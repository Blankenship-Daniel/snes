.BANK 31 SLOT 0
.ORG $0000

.SECTION "Bank31" FORCE

	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sty $0A.b		; 84 0A ; Store Y register to $0A.b [Reads: Y Index]
.INDEX 8
	sep #$90		; E2 90
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda #$89.b		; A9 89 ; Load #$89.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp ($E1.b,S),Y		; D3 E1 ; Compare accumulator (stack relative indirect indexed) ($E1.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	ora $1F8780.l,X		; 1F 80 87 1F ; Logical OR long $1F8780.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda ($1F.b,X)		; A1 1F ; Load accumulator ($1F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inc $1FCA.w		; EE CA 1F ; Increment $1FCA.w [Flags: NZ]
	stz $0A85.w		; 9C 85 0A ; Store zero to $0A85.w
	cpy $1FAC.w		; CC AC 1F ; Compare $1FAC.w with Y register [Reads: Y Index] [Flags: NCZ]
	ror $1FA6.w,X		; 7E A6 1F ; Rotate right $1FA6.w,X [Reads: X Index] [Flags: NCZ]
	and [$AB.b],Y		; 37 AB ; AND accumulator with memory (long indexed) [$AB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FEE46.l,X		; 1F 46 EE 1F ; Logical OR long $1FEE46.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($91.b,S),Y		; 53 91 ; XOR accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1FC1F0.l,X		; 1F F0 C1 1F ; Logical OR long $1FC1F0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $0A84B9.l,X		; 1F B9 84 0A ; Logical OR long $0A84B9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $D30A8B.l,X		; 9F 8B 0A D3 ; Store accumulator (long,X) $D30A8B.l,X [Reads: Accumulator, X Index]
	bit #$0A.b		; 89 0A ; Test bits #$0A.b with accumulator [Reads: Accumulator] [Flags: Z]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
.INDEX 8
	sep #$1F		; E2 1F
	lda $E2.b,S		; A3 E2 ; Load accumulator (stack relative) $E2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1FE474.l,X		; 1F 74 E4 1F ; Logical OR long $1FE474.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $A0.b		; 25 A0 ; Logical AND $A0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1FCC27.l,X		; 1F 27 CC 1F ; Logical OR long $1FCC27.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $0A86.w,Y		; 59 86 0A ; Exclusive OR accumulator with memory $0A86.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ora $1FA5A2.l,X		; 1F A2 A5 1F ; Logical OR long $1FA5A2.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($AA.b),Y		; B1 AA ; Load accumulator ($AA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FF749.l,X		; 1F 49 F7 1F ; Logical OR long $1FF749.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($FE.b)		; D2 FE ; Compare accumulator (indirect) ($FE.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $1FC281.l,X		; 1F 81 C2 1F ; Logical OR long $1FC281.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cmp $1F.b,S		; C3 1F ; Compare accumulator (stack relative) $1F.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	eor ($91.b,S),Y		; 53 91 ; XOR accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0A8C5A.l,X		; 1F 5A 8C 0A ; Logical OR long $0A8C5A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $8D.b,X		; 36 8D ; Rotate left $8D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc #$EC.b		; E9 EC ; Subtract #$EC.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $1FE644.l,X		; 1F 44 E6 1F ; Logical OR long $1FE644.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1F9BC3.l,X		; 1F C3 9B 1F ; Logical OR long $1F9BC3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($CD.b,S),Y		; 33 CD ; AND accumulator (stack relative indirect indexed) ($CD.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1F918F.l,X		; 1F 8F 91 1F ; Logical OR long $1F918F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stx $C1.b		; 86 C1 ; Store X register to $C1.b [Reads: X Index]
	ora $1FA3FD.l,X		; 1F FD A3 1F ; Logical OR long $1FA3FD.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 8
	sep #$A9		; E2 A9
	ora $0A87D7.l,X		; 1F D7 87 0A ; Logical OR long $0A87D7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1FC3B5.l,X		; 1F B5 C3 1F ; Logical OR long $1FC3B5.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	stx $0A.b		; 86 0A ; Store X register to $0A.b [Reads: X Index]
	sta [$8D.b]		; 87 8D ; Store accumulator (long) [$8D.b] [Reads: Direct Page, Accumulator]
	ora $1FCE72.l,X		; 1F 72 CE 1F ; Logical OR long $1FCE72.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp [$8D.b],Y		; D7 8D ; Compare accumulator (long indexed) [$8D.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	sbc $931F97.l,X		; FF 97 1F 93 ; Subtract with carry (long,X) $931F97.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $1F.b,Y		; 96 1F ; Store X register $1F.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldy #$94.b		; A0 94 ; Load #$94.b into Y register [Writes: Y Index] [Flags: NZ]
	ora $1F9361.l,X		; 1F 61 93 1F ; Logical OR long $1F9361.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $1F92.w		; AE 92 1F ; Load $1F92.w into X register [Writes: X Index] [Flags: NZ]
	rol $C1.b,X		; 36 C1 ; Rotate left $C1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $1FA273.l,X		; 1F 73 A2 1F ; Logical OR long $1FA273.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($A8.b),Y		; D1 A8 ; Compare accumulator ($A8.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ora $0A88DB.l,X		; 1F DB 88 0A ; Logical OR long $0A88DB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $1FFC.w,X		; 7E FC 1F ; Rotate right $1FFC.w,X [Reads: X Index] [Flags: NCZ]
	jmp.w [$1FC3]		; DC C3 1F ; Jump long indirect [$1FC3] [Flow: jump]
	sty $1FC4.w		; 8C C4 1F ; Store Y register to $1FC4.w [Reads: Y Index]
	sbc #$8D.b		; E9 8D ; Subtract #$8D.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $0A8E95.l,X		; 1F 95 8E 0A ; Logical OR long $0A8E95.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $960A8E.l		; 4F 8E 0A 96 ; Exclusive OR accumulator with memory (long) $960A8E.l [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	cmp #$DA.b		; C9 DA ; Compare #$DA.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora $1FDBD7.l,X		; 1F D7 DB 1F ; Logical OR long $1FDBD7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $801F9A.l		; 6F 9A 1F 80 ; Add with carry (long) $801F9A.l [Writes: Accumulator] [Flags: NCVZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1FC001.l,X		; 1F 01 C0 1F ; Logical OR long $1FC001.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$A1.b		; A2 A1 ; Load #$A1.b into X register [Writes: X Index] [Flags: NZ]
	ora $1FA7E9.l,X		; 1F E9 A7 1F ; Logical OR long $1FA7E9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $411F.w,X		; FE 1F 41 ; Increment memory $411F.w,X [Reads: X Index] [Flags: NZ]
	sbc $1F1F.w,X		; FD 1F 1F ; Subtract with carry $1F1F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $1F.b		; C5 1F ; Compare $1F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $30, $CA		; 30 CA ; Branch if minus to $30, $CA [Flow: branch]
	ora $0A902F.l,X		; 1F 2F 90 0A ; Logical OR long $0A902F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0A8F.w,Y		; 19 8F 0A ; OR accumulator with memory $0A8F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $0A91.w		; 6E 91 0A ; Rotate right $0A91.w [Flags: NCZ]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1F9942.l,X		; 1F 42 99 1F ; Logical OR long $1F9942.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$80.b]		; 47 80 ; Exclusive OR accumulator with memory (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldx $BA.b,Y		; B6 BA ; Load X register $BA.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ora $1FBB58.l,X		; 1F 58 BB 1F ; Logical OR long $1FBB58.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$BB.b		; E0 BB ; Compare #$BB.b with X register [Reads: X Index] [Flags: NCZ]
	ora $1FBF08.l,X		; 1F 08 BF 1F ; Logical OR long $1FBF08.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	lda [$1F.b]		; A7 1F ; Load accumulator (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $1FF8D2.l,X		; 1F D2 F8 1F ; Logical OR long $1FF8D2.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($1FF9.w,X)		; 7C F9 1F ; Jump indirect indexed to ($1FF9.w,X) [Reads: X Index] [Flow: jump]
	cpy #$C5.b		; C0 C5 ; Compare #$C5.b with Y register [Reads: Y Index] [Flags: NCZ]
	ora $1FC6C2.l,X		; 1F C2 C6 1F ; Logical OR long $1FC6C2.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sta ($0A.b)		; 92 0A ; Store accumulator (indirect) ($0A.b) [Reads: Direct Page, Accumulator]
	ora [$93.b],Y		; 17 93 ; OR accumulator with memory (long indexed) [$93.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stz $94.b		; 64 94 ; Store zero to $94.b
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $88.b,X		; B5 88 ; Load $88.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FD9DC.l,X		; 1F DC D9 1F ; Logical OR long $1FD9DC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$DA.b],Y		; 57 DA ; Exclusive OR accumulator with memory (long indexed) [$DA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1F9E3F.l,X		; 1F 3F 9E 1F ; Logical OR long $1F9E3F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $BD.b		; 04 BD ; Test and set bits $BD.b [Reads: Accumulator] [Flags: Z]
	ora $1FBE1F.l,X		; 1F 1F BE 1F ; Logical OR long $1FBE1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1FA738.l,X		; 1F 38 A7 1F ; Logical OR long $1FA738.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $1FF7.w		; 8C F7 1F ; Store Y register to $1FF7.w [Reads: Y Index]
	lsr $FA.b,X		; 56 FA ; Logical shift right $FA.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $1FF9E9.l,X		; 1F E9 F9 1F ; Logical OR long $1FF9E9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $1FC6.w,X		; FE C6 1F ; Increment memory $1FC6.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $0AA349.l,X		; 1F 49 A3 0A ; Logical OR long $0AA349.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $CD0AA2.l		; 4F A2 0A CD ; Exclusive OR accumulator with memory (long) $CD0AA2.l [Writes: Accumulator] [Flags: NZ]
	stz $F50A.w,X		; 9E 0A F5 ; Store zero to $F50A.w,X [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $1F897A.l,X		; 1F 7A 89 1F ; Logical OR long $1F897A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($1F8A.w)		; 6C 8A 1F ; Jump indirect to ($1F8A.w) [Flow: jump]
	cmp $9C.b		; C5 9C ; Compare $9C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $1FCF55.l,X		; 1F 55 CF 1F ; Logical OR long $1FCF55.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1F8780.l,X		; 1F 80 87 1F ; Logical OR long $1F8780.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1FEF57.l,X		; 1F 57 EF 1F ; Logical OR long $1FEF57.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($F0.b,S),Y		; 33 F0 ; AND accumulator (stack relative indirect indexed) ($F0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1FF0F9.l,X		; 1F F9 F0 1F ; Logical OR long $1FF0F9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $CE1FC7.l		; 4F C7 1F CE ; Exclusive OR accumulator with memory (long) $CE1FC7.l [Writes: Accumulator] [Flags: NZ]
	cmp [$1F.b]		; C7 1F ; Compare accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	adc $0AA3.w,X		; 7D A3 0A ; Add $0AA3.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $0AA1.w		; 20 A1 0A ; Jump to subroutine at $0AA1.w [Writes: Stack Pointer] [Flow: call]
	dec $0A9F.w,X		; DE 9F 0A ; Decrement memory $0A9F.w,X [Reads: X Index] [Flags: NZ]
	lda $C21F8A.l,X		; BF 8A 1F C2 ; Load long $C21F8A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora $1F8CBB.l,X		; 1F BB 8C 1F ; Logical OR long $1F8CBB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1FD0EC.l,X		; 1F EC D0 1F ; Logical OR long $1FD0EC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $0A9E66.l,X		; 1F 66 9E 0A ; Logical OR long $0A9E66.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1FF214.l,X		; 1F 14 F2 1F ; Logical OR long $1FF214.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc ($1F.b,S),Y		; F3 1F ; Subtract with carry (stack relative indirect indexed) ($1F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1FF3.w,X		; FD F3 1F ; Subtract with carry $1FF3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $1FC8.w		; 2D C8 1F ; Logical AND $1FC8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1FBA9E.l,X		; 1F 9E BA 1F ; Logical OR long $1FBA9E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$B9.b]		; 87 B9 ; Store accumulator (long) [$B9.b] [Reads: Direct Page, Accumulator]
	ora $1FB8E9.l,X		; 1F E9 B8 1F ; Logical OR long $1FB8E9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $B8.b,S		; 43 B8 ; Exclusive OR accumulator with stack relative $B8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1F8780.l,X		; 1F 80 87 1F ; Logical OR long $1F8780.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$FB.b]		; 87 FB ; Store accumulator (long) [$FB.b] [Reads: Direct Page, Accumulator]
	ora $1FFC0A.l,X		; 1F 0A FC 1F ; Logical OR long $1FFC0A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $B2.b,S		; 63 B2 ; Add with carry (stack relative) $B2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $1FAEC3.l,X		; 1F C3 AE 1F ; Logical OR long $1FAEC3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($96.b,X)		; A1 96 ; Load accumulator ($96.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1FF4EC.l,X		; 1F EC F4 1F ; Logical OR long $1FF4EC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sbc $1F.b,X		; F5 1F ; Subtract $1F.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($F6.b,S),Y		; D3 F6 ; Compare accumulator (stack relative indirect indexed) ($F6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	ora $1FC851.l,X		; 1F 51 C8 1F ; Logical OR long $1FC851.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($C8.b)		; D2 C8 ; Compare accumulator (indirect) ($C8.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $1FB9EA.l,X		; 1F EA B9 1F ; Logical OR long $1FB9EA.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $B7.b,S		; 63 B7 ; Add with carry (stack relative) $B7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $1FB66D.l,X		; 1F 6D B6 1F ; Logical OR long $1FB66D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $B5		; F0 B5 ; Branch if equal to $F0, $B5 [Flow: branch]
	ora $1FE700.l,X		; 1F 00 E7 1F ; Logical OR long $1FE700.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora $1FFF1D.l,X		; 1F 1D FF 1F ; Logical OR long $1FFF1D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1FD1.w,X		; BD D1 1F ; Load $1FD1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($97.b)		; 32 97 ; AND accumulator with memory (indirect) ($97.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp [$99.b],Y		; D7 99 ; Compare accumulator (long indexed) [$99.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stx $D9.b		; 86 D9 ; Store X register to $D9.b [Reads: X Index]
	ora $1FD9AF.l,X		; 1F AF D9 1F ; Logical OR long $1FD9AF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1FC93D.l,X		; 1F 3D C9 1F ; Logical OR long $1FC93D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $1FC9.w,Y		; 79 C9 1F ; Add $1FC9.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $1F8E.w		; EE 8E 1F ; Increment $1F8E.w [Flags: NZ]
	.db $10, $B3		; 10 B3 ; Branch if plus to $10, $B3 [Flow: branch]
	ora $1FB3C1.l,X		; 1F C1 B3 1F ; Logical OR long $1FB3C1.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($1FB5.w,X)		; 7C B5 1F ; Jump indirect indexed to ($1FB5.w,X) [Reads: X Index] [Flow: jump]
	eor $E7.b		; 45 E7 ; Exclusive OR $E7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1FE80B.l,X		; 1F 0B E8 1F ; Logical OR long $1FE80B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	jmp.w [$5C1F]		; DC 1F 5C ; Jump long indirect [$5C1F] [Flow: jump]
	cmp $371F.w,X		; DD 1F 37 ; Compare accumulator $371F.w,X [Reads: X Index] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($9D.b,S),Y		; 13 9D ; OR accumulator (stack relative indirect indexed) ($9D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cmp [$1F.b],Y		; D7 1F ; Compare accumulator (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	adc $1FD8.w,Y		; 79 D8 1F ; Add $1FD8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1FC9E7.l,X		; 1F E7 C9 1F ; Logical OR long $1FC9E7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $CA		; 30 CA ; Branch if minus to $30, $CA [Flow: branch]
	ora $1F8F73.l,X		; 1F 73 8F 1F ; Logical OR long $1F8F73.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $1FB0.w,Y		; F9 B0 1F ; Subtract with carry $1FB0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $B4BF1F.l		; AF 1F BF B4 ; Load long $B4BF1F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1FEB0B.l,X		; 1F 0B EB 1F ; Logical OR long $1FEB0B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b,S		; 43 EC ; Exclusive OR accumulator with stack relative $EC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1FDDD1.l,X		; 1F D1 DD 1F ; Logical OR long $1FDDD1.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $95851F.l,X		; DF 1F 85 95 ; Compare accumulator (long,X) $95851F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $800A9D.l,X		; 5F 9D 0A 80 ; Exclusive OR accumulator with memory (long,X) $800A9D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	cmp $D4.b,X		; D5 D4 ; Compare accumulator $D4.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $1FD634.l,X		; 1F 34 D6 1F ; Logical OR long $1FD634.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1FCA8D.l,X		; 1F 8D CA 1F ; Logical OR long $1FCA8D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1F902E.l,X		; 1F 2E 90 1F ; Logical OR long $1F902E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($1F.b),Y		; B1 1F ; Load accumulator ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $801FAF.l,X		; 5F AF 1F 80 ; Exclusive OR accumulator with memory (long,X) $801FAF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1FED36.l,X		; 1F 36 ED 1F ; Logical OR long $1FED36.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$E0.b		; A9 E0 ; Load #$E0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1F8780.l,X		; 1F 80 87 1F ; Logical OR long $1F8780.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sta $0A.b,X		; 95 0A ; Store accumulator to $0A.b,X [Reads: Accumulator, X Index]
	sbc $95.b,X		; F5 95 ; Subtract $95.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc [$96.b],Y		; 77 96 ; Add with carry (long indexed) [$96.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1FD1.w,X		; FD D1 1F ; Subtract with carry $1FD1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $D3.b,X		; 76 D3 ; Rotate right $D3.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $1F8780.l,X		; 1F 80 87 1F ; Logical OR long $1F8780.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($CA.b,X)		; E1 CA ; Subtract with carry ($CA.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0AAD3D.l,X		; 1F 3D AD 0A ; Logical OR long $0AAD3D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx $90.b		; E4 90 ; Compare $90.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $0A816E.l,X		; 1F 6E 81 0A ; Logical OR long $0A816E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($83.b,S),Y		; 33 83 ; AND accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $42, $82		; 42 82 ; Reserved instruction
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pei ($B3.b)		; D4 B3 ; Push effective indirect address ($B3.b) [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $0AB4.w,Y		; B9 B4 0A ; Load $0AB4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $0AB1.w,Y		; F9 B1 0A ; Subtract with carry $0AB1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pea $0AB2.w		; F4 B2 0A ; Push absolute address $0AB2.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $0AB169.l,X		; 1F 69 B1 0A ; Logical OR long $0AB169.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $800A.w		; AD 0A 80 ; Load $800A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	lda $AA.b,X		; B5 AA ; Load $AA.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $A20A.w		; AE 0A A2 ; Load $A20A.w into X register [Writes: X Index] [Flags: NZ]
	ldy $1A0A.w		; AC 0A 1A ; Load $1A0A.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $0A.b		; A4 0A ; Load $0A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $90, $A5		; 90 A5 ; Branch if carry clear to $90, $A5 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$A7.b		; 09 A7 ; Logical OR #$A7.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor ($A7.b)		; 52 A7 ; Exclusive OR accumulator with memory (indirect) ($A7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda ($A7.b,X)		; A1 A7 ; Load accumulator ($A7.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lda [$0A.b]		; A7 0A ; Load accumulator (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1F8780.l,X		; 1F 80 87 1F ; Logical OR long $1F8780.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $AF.b,X		; F5 AF ; Subtract $AF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr $0AB0.w,X		; 5E B0 0A ; Logical shift right $0AB0.w,X [Reads: X Index] [Flags: NCZ]
	asl $0AAE.w,X		; 1E AE 0A ; Arithmetic shift left $0AAE.w,X [Reads: X Index] [Flags: NCZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $0AA9D7.l,X		; 1F D7 A9 0A ; Logical OR long $0AA9D7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $ABF00A.l		; AF 0A F0 AB ; Load long $ABF00A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldy #$EB.b		; A0 EB ; Load #$EB.b into Y register [Writes: Y Index] [Flags: NZ]
	ora $ED.b,S		; 03 ED ; OR accumulator with stack relative $ED.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $71.b,S		; 03 71 ; OR accumulator with stack relative $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx $D003.w		; EC 03 D0 ; Compare $D003.w with X register [Reads: X Index] [Flags: NCZ]
	cpx $0003.w		; EC 03 00 ; Compare $0003.w with X register [Reads: X Index] [Flags: NCZ]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	cpy $ED.b		; C4 ED ; Compare $ED.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $F103.w		; EE 03 F1 ; Increment $F103.w [Flags: NZ]
	inc $9303.w		; EE 03 93 ; Increment $9303.w [Flags: NZ]
	sbc $F04E03.l		; EF 03 4E F0 ; Subtract with carry (long) $F04E03.l [Writes: Accumulator] [Flags: NCVZ]
	ora $B0.b,S		; 03 B0 ; OR accumulator with stack relative $B0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	sty $03F1.w		; 8C F1 03 ; Store Y register to $03F1.w [Reads: Y Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc ($03.b)		; F2 03 ; Subtract with carry (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and [$FB.b]		; 27 FB ; AND accumulator with memory (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $B003.w,Y		; F9 03 B0 ; Subtract with carry $B003.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $8A.b,S		; 03 8A ; OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $03.b,X		; F5 03 ; Subtract $03.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc $03.b,X		; F5 03 ; Subtract $03.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc $03.b,X		; F6 03 ; Increment memory $03.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	.db $B0, $F6		; B0 F6 ; Branch if carry set to $B0, $F6 [Flow: branch]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc [$03.b],Y		; F7 03 ; Subtract with carry (long indexed) [$03.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F7.b),Y		; F1 F7 ; Subtract with carry ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($4503.w,X)		; FC 03 45 ; Jump to subroutine indirect indexed ($4503.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($8903.w,X)		; FC 03 89 ; Jump to subroutine indirect indexed ($8903.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $E203.w,X		; FD 03 E2 ; Subtract with carry $E203.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F103.w,X		; FD 03 F1 ; Subtract with carry $F103.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $71.b,S		; 03 71 ; OR accumulator with stack relative $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc ($03.b,S),Y		; F3 03 ; Subtract with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lsr $F4.b,X		; 56 F4 ; Logical shift right $F4.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $41.b,S		; 03 41 ; OR accumulator with stack relative $41.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $BF03.w,X		; FE 03 BF ; Increment memory $BF03.w,X [Reads: X Index] [Flags: NZ]
	inc $5303.w,X		; FE 03 53 ; Increment memory $5303.w,X [Reads: X Index] [Flags: NZ]
	sbc $F4FB03.l,X		; FF 03 FB F4 ; Subtract with carry (long,X) $F4FB03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $5B.b,S		; 03 5B ; OR accumulator with stack relative $5B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $8403.w,Y		; F9 03 84 ; Subtract with carry $8403.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $D103.w,Y		; F9 03 D1 ; Subtract with carry $D103.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $0A.b,Y		; B6 0A ; Load X register $0A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	cpy #$B5.b		; C0 B5 ; Compare #$B5.b with Y register [Reads: Y Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	inc $0AB5.w,X		; FE B5 0A ; Increment memory $0AB5.w,X [Reads: X Index] [Flags: NZ]
	eor ($B6.b),Y		; 51 B6 ; Exclusive OR accumulator with memory ($B6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	inc $0AB5.w,X		; FE B5 0A ; Increment memory $0AB5.w,X [Reads: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1F8780.l,X		; 1F 80 87 1F ; Logical OR long $1F8780.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1F8780.l,X		; 1F 80 87 1F ; Logical OR long $1F8780.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1F8780.l,X		; 1F 80 87 1F ; Logical OR long $1F8780.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $87		; 80 87 ; Branch always to $80, $87 [Flow: branch]
	ora $1F8780.l,X		; 1F 80 87 1F ; Logical OR long $1F8780.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda [$84.b],Y		; B7 84 ; Load accumulator (long indexed) [$84.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta ($0A.b),Y		; 91 0A ; Store accumulator ($0A.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$8B.b],Y		; 97 8B ; Store accumulator (long indexed) [$8B.b],Y [Reads: Direct Page, Y Index, Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $5C0A89.l		; CF 89 0A 5C ; Compare accumulator (long) $5C0A89.l [Reads: Accumulator] [Flags: NCZ]
.INDEX 8
	sep #$1F		; E2 1F
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	sta ($A1.b)		; 92 A1 ; Store accumulator (indirect) ($A1.b) [Reads: Direct Page, Accumulator]
	ora $1FCC25.l,X		; 1F 25 CC 1F ; Logical OR long $1FCC25.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $250A86.l		; 4F 86 0A 25 ; Exclusive OR accumulator with memory (long) $250A86.l [Writes: Accumulator] [Flags: NZ]
	lda $341F.w		; AD 1F 34 ; Load $341F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$1F.b]		; A7 1F ; Load accumulator (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $AB		; F0 AB ; Branch if equal to $F0, $AB [Flow: branch]
	ora $1FEF53.l,X		; 1F 53 EF 1F ; Logical OR long $1FEF53.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta ($1F.b),Y		; 91 1F ; Store accumulator ($1F.b),Y [Reads: Direct Page, Y Index, Accumulator]
	adc $1FC2.w,Y		; 79 C2 1F ; Add $1FC2.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	stx $85.b,Y		; 96 85 ; Store X register $85.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor ($8C.b)		; 52 8C ; Exclusive OR accumulator with memory (indirect) ($8C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $1FE2.w,X		; 9D E2 1F ; Store accumulator to $1FE2.w,X [Reads: Accumulator, X Index]
	stz $E4.b		; 64 E4 ; Store zero to $E4.b
	ora $1FE63E.l,X		; 1F 3E E6 1F ; Logical OR long $1FE63E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $A1		; 50 A1 ; Branch if overflow clear to $50, $A1 [Flow: branch]
	ora $1FCD31.l,X		; 1F 31 CD 1F ; Logical OR long $1FCD31.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $86.b		; E5 86 ; Subtract $86.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dec $AC.b		; C6 AC ; Decrement $AC.b [Reads: Direct Page] [Flags: NZ]
	ora $1FA670.l,X		; 1F 70 A6 1F ; Logical OR long $1FA670.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($AB.b),Y		; 31 AB ; AND accumulator with memory ($AB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FF784.l,X		; 1F 84 F7 1F ; Logical OR long $1FF784.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FFF.w,Y		; 19 FF 1F ; OR accumulator with memory $1FFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $1FC3.w,X		; 5E C3 1F ; Logical shift right $1FC3.w,X [Reads: X Index] [Flags: NCZ]
	lda $8B1FC3.l		; AF C3 1F 8B ; Load long $8B1FC3.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($1F.b),Y		; 91 1F ; Store accumulator ($1F.b),Y [Reads: Direct Page, Y Index, Accumulator]
	rol $0A8D.w		; 2E 8D 0A ; Rotate left $0A8D.w [Flags: NCZ]
	cmp ($8D.b),Y		; D1 8D ; Compare accumulator ($8D.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $30, $ED		; 30 ED ; Branch if minus to $30, $ED [Flow: branch]
	ora $1FE6EE.l,X		; 1F EE E6 1F ; Logical OR long $1FE6EE.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	stz $701F.w		; 9C 1F 70 ; Store zero to $701F.w
	dec $A81F.w		; CE 1F A8 ; Decrement $A81F.w [Flags: NZ]
	sta ($1F.b)		; 92 1F ; Store accumulator (indirect) ($1F.b) [Reads: Direct Page, Accumulator]
	inc $1FC1.w		; EE C1 1F ; Increment $1FC1.w [Flags: NZ]
	sty $A5.b,X		; 94 A5 ; Store Y register $A5.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora $1FAAA7.l,X		; 1F A7 AA 1F ; Logical OR long $1FAAA7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $880A88.l		; CF 88 0A 88 ; Compare accumulator (long) $880A88.l [Reads: Accumulator] [Flags: NCZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $1F.b,S		; C3 1F ; Compare accumulator (stack relative) $1F.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($87.b),Y		; D1 87 ; Compare accumulator ($87.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $8D.b,S		; E3 8D ; Subtract stack-relative $8D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	ora $1FCF4F.l,X		; 1F 4F CF 1F ; Logical OR long $1FCF4F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	stx $920A.w		; 8E 0A 92 ; Store X register to $920A.w [Reads: X Index]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	bit $1F99.w,X		; 3C 99 1F ; Test bits $1F99.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc ($97.b),Y		; F1 97 ; Subtract with carry ($97.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $1F9685.l,X		; 1F 85 96 1F ; Logical OR long $1F9685.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($94.b)		; 92 94 ; Store accumulator (indirect) ($94.b) [Reads: Direct Page, Accumulator]
	ora $1F935B.l,X		; 1F 5B 93 1F ; Logical OR long $1F935B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $C1		; 80 C1 ; Branch always to $80, $C1 [Flow: branch]
	ora $1FA3F5.l,X		; 1F F5 A3 1F ; Logical OR long $1FA3F5.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $1FA9.w,X		; DE A9 1F ; Decrement memory $1FA9.w,X [Reads: X Index] [Flags: NZ]
	lda $89.b,S		; A3 89 ; Load accumulator (stack relative) $89.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and [$FD.b],Y		; 37 FD ; AND accumulator with memory (long indexed) [$FD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FC486.l,X		; 1F 86 C4 1F ; Logical OR long $1FC486.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $1F.b		; C5 1F ; Compare $1F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	nop		; EA ; No operation
	stx $151F.w		; 8E 1F 15 ; Store X register to $151F.w [Reads: X Index]
	sta $8E930A.l		; 8F 0A 93 8E ; Store accumulator (long) $8E930A.l [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	cmp $1FDB.w		; CD DB 1F ; Compare $1FDB.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $1FDC.w		; AE DC 1F ; Load $1FDC.w into X register [Writes: X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora $1F8788.l,X		; 1F 88 87 1F ; Logical OR long $1F8788.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	bit $1FC1.w		; 2C C1 1F ; Test bits $1FC1.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	adc [$A2.b]		; 67 A2 ; Add with carry (long) [$A2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $1FA8C9.l,X		; 1F C9 A8 1F ; Logical OR long $1FA8C9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $1FFE.w		; CE FE 1F ; Decrement $1FFE.w [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	inc $BA1F.w,X		; FE 1F BA ; Increment memory $BA1F.w,X [Reads: X Index] [Flags: NZ]
	cmp $1F.b		; C5 1F ; Compare $1F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	bit #$CA.b		; 89 CA ; Test bits #$CA.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora $0A90DC.l,X		; 1F DC 90 0A ; Logical OR long $0A90DC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$90.b		; 29 90 ; Logical AND #$90.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $30, $92		; 30 92 ; Branch if minus to $30, $92 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $1F88.w		; AD 88 1F ; Load $1F88.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $1F9A.w		; 6D 9A 1F ; Add $1F9A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ror $81.b		; 66 81 ; Rotate right $81.b [Reads: Direct Page] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr $1FBB.w		; 4E BB 1F ; Logical shift right $1FBB.w [Flags: NCZ]
	cmp ($BB.b)		; D2 BB ; Compare accumulator (indirect) ($BB.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $1FBCF6.l,X		; 1F F6 BC 1F ; Logical OR long $1FBCF6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$BF.b],Y		; F7 BF ; Subtract with carry (long indexed) [$BF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $1FA7E5.l,X		; 1F E5 A7 1F ; Logical OR long $1FA7E5.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy $1FF8.w		; CC F8 1F ; Compare $1FF8.w with Y register [Reads: Y Index] [Flags: NCZ]
	ror $F9.b,X		; 76 F9 ; Rotate right $F9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $1FF9E1.l,X		; 1F E1 F9 1F ; Logical OR long $1FF9E1.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	dec $1F.b		; C6 1F ; Decrement $1F.b [Reads: Direct Page] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dec $1F.b		; C6 1F ; Decrement $1F.b [Reads: Direct Page] [Flags: NZ]
	ora #$93.b		; 09 93 ; Logical OR #$93.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	mvn $0A,$94		; 54 94 0A ; Move block negative $0A,$94 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc [$95.b],Y		; 77 95 ; Add with carry (long indexed) [$95.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1F88.w		; ED 88 1F ; Subtract $1F88.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor ($DA.b,S),Y		; 53 DA ; XOR accumulator (stack relative indirect indexed) ($DA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1FDAC5.l,X		; 1F C5 DA 1F ; Logical OR long $1FDAC5.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$1F.b		; A0 1F ; Load #$1F.b into Y register [Writes: Y Index] [Flags: NZ]
	ora [$BE.b],Y		; 17 BE ; OR accumulator with memory (long indexed) [$BE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FBF02.l,X		; 1F 02 BF 1F ; Logical OR long $1FBF02.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	cmp [$A7.b]		; C7 A7 ; Compare accumulator (long) [$A7.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $1FF821.l,X		; 1F 21 F8 1F ; Logical OR long $1FF821.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$FA.b		; A0 FA ; Load #$FA.b into Y register [Writes: Y Index] [Flags: NZ]
	ora $1FFA4E.l,X		; 1F 4E FA 1F ; Logical OR long $1FFA4E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp [$1F.b]		; C7 1F ; Compare accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $0A.b,S		; A3 0A ; Load accumulator (stack relative) $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($A3.b,X)		; 41 A3 ; Exclusive OR accumulator with memory ($A3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $89720A.l,X		; 9F 0A 72 89 ; Store accumulator (long,X) $89720A.l,X [Reads: Accumulator, X Index]
	ora $1F8A66.l,X		; 1F 66 8A 1F ; Logical OR long $1F8A66.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1F8A.w,Y		; B9 8A 1F ; Load $1F8A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $9E.b,X		; 35 9E ; Logical AND $9E.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FD0E6.l,X		; 1F E6 D0 1F ; Logical OR long $1FD0E6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	sbc $0C1FF0.l		; EF F0 1F 0C ; Subtract with carry (long) $0C1FF0.l [Writes: Accumulator] [Flags: NCVZ]
	sbc ($1F.b)		; F2 1F ; Subtract with carry (indirect) ($1F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dec $C7.b		; C6 C7 ; Decrement $C7.b [Reads: Direct Page] [Flags: NZ]
	ora $1FC827.l,X		; 1F 27 C8 1F ; Logical OR long $1FC827.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy $0A.b		; A4 0A ; Load $0A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: NZ]
	asl $0AA1.w,X		; 1E A1 0A ; Arithmetic shift left $0AA1.w,X [Reads: X Index] [Flags: NCZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora $1F8CB7.l,X		; 1F B7 8C 1F ; Logical OR long $1F8CB7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $1F8D.w,X		; 7D 8D 1F ; Add $1F8D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	lda [$D1.b],Y		; B7 D1 ; Load accumulator (long indexed) [$D1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1F8788.l,X		; 1F 88 87 1F ; Logical OR long $1F8788.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	stz $880A.w,X		; 9E 0A 88 ; Store zero to $880A.w,X [Reads: X Index]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	and $EF1FF3.l,X		; 3F F3 1F EF ; AND accumulator with memory (long,X) $EF1FF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($1F.b,S),Y		; F3 1F ; Subtract with carry (stack relative indirect indexed) ($1F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$F4.b		; E0 F4 ; Compare #$F4.b with X register [Reads: X Index] [Flags: NCZ]
	ora $1FC84D.l,X		; 1F 4D C8 1F ; Logical OR long $1FC84D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	lda ($BA.b)		; B2 BA ; Load accumulator (indirect) ($BA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1FB9E6.l,X		; 1F E6 B9 1F ; Logical OR long $1FB9E6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $E11F.w,Y		; B9 1F E1 ; Load $E11F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $1F8788.l,X		; 1F 88 87 1F ; Logical OR long $1F8788.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	ora $1FFC78.l,X		; 1F 78 FC 1F ; Logical OR long $1FFC78.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda ($1F.b,S),Y		; B3 1F ; Load accumulator (stack relative indirect indexed) ($1F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda $972A1F.l		; AF 1F 2A 97 ; Load long $972A1F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	ldx #$F5.b		; A2 F5 ; Load #$F5.b into X register [Writes: X Index] [Flags: NZ]
	ora $1FF6C9.l,X		; 1F C9 F6 1F ; Logical OR long $1FF6C9.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($F7.b,X)		; 41 F7 ; Exclusive OR accumulator with memory ($F7.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FC8C8.l,X		; 1F C8 C8 1F ; Logical OR long $1FC8C8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$C9.b],Y		; 37 C9 ; AND accumulator with memory (long indexed) [$C9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FBA9A.l,X		; 1F 9A BA 1F ; Logical OR long $1FBA9A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $1FB8.w,X		; 3D B8 1F ; AND accumulator with memory $1FB8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $1FB7.w,Y		; 59 B7 1F ; Exclusive OR accumulator with memory $1FB7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$B6.b]		; 67 B6 ; Add with carry (long) [$B6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $1FE741.l,X		; 1F 41 E7 1F ; Logical OR long $1FE741.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $4C1FFB.l,X		; 7F FB 1F 4C ; Add long $4C1FFB.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $D1FB1F.l,X		; FF 1F FB D1 ; Subtract with carry (long,X) $D1FB1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0A9887.l,X		; 1F 87 98 0A ; Logical OR long $0A9887.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$99.b		; C9 99 ; Compare #$99.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$9B.b		; 29 9B ; Logical AND #$9B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda #$D9.b		; A9 D9 ; Load #$D9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1FD9D8.l,X		; 1F D8 D9 1F ; Logical OR long $1FD9D8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	adc $C9.b,X		; 75 C9 ; Add $C9.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $1FC9E1.l,X		; 1F E1 C9 1F ; Logical OR long $1FC9E1.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $B3B71F.l		; 8F 1F B7 B3 ; Store accumulator (long) $B3B71F.l [Reads: Accumulator]
	ora $1FB4AD.l,X		; 1F AD B4 1F ; Logical OR long $1FB4AD.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx $B5.b		; E4 B5 ; Compare $B5.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $1FE807.l,X		; 1F 07 E8 1F ; Logical OR long $1FE807.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$EB.b]		; 07 EB ; OR accumulator with memory (long) [$EB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1FDD50.l,X		; 1F 50 DD 1F ; Logical OR long $1FDD50.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $1FDD.w		; CD DD 1F ; Compare $1FDD.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $9B.b,X		; 75 9B ; Add $9B.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$9D.b		; 09 9D ; Logical OR #$9D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor [$9D.b],Y		; 57 9D ; Exclusive OR accumulator with memory (long indexed) [$9D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $1FD974.l,X		; 1F 74 D9 1F ; Logical OR long $1FD974.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $1FCA89.l,X		; 1F 89 CA 1F ; Logical OR long $1FCA89.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $90.b		; 26 90 ; Rotate left $90.b [Reads: Direct Page] [Flags: NCZ]
	ora $1FB176.l,X		; 1F 76 B1 1F ; Logical OR long $1FB176.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$B0.b]		; E7 B0 ; Subtract with carry (long) [$B0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $1FB56C.l,X		; 1F 6C B5 1F ; Logical OR long $1FB56C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $E11FEC.l,X		; 3F EC 1F E1 ; AND accumulator with memory (long,X) $E11FEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx $5C1F.w		; EC 1F 5C ; Compare $5C1F.w with X register [Reads: X Index] [Flags: NCZ]
	cmp $E0A11F.l,X		; DF 1F A1 E0 ; Compare accumulator (long,X) $E0A11F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ora $0A9596.l,X		; 1F 96 95 0A ; Logical OR long $0A9596.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	stz $880A.w,X		; 9E 0A 88 ; Store zero to $880A.w,X [Reads: X Index]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	.db $30, $D6		; 30 D6 ; Branch if minus to $30, $D6 [Flow: branch]
	ora $1FD783.l,X		; 1F 83 D7 1F ; Logical OR long $1FD783.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	cmp $1FCA.w,X		; DD CA 1F ; Compare accumulator $1FCA.w,X [Reads: X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	dec $1F90.w,X		; DE 90 1F ; Decrement memory $1F90.w,X [Reads: X Index] [Flags: NZ]
	eor $1FB2.w,Y		; 59 B2 1F ; Exclusive OR accumulator with memory $1FB2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $AF.b,X		; D6 AF ; Decrement memory $AF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora $1F8788.l,X		; 1F 88 87 1F ; Logical OR long $1F8788.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	inc $CB1F.w		; EE 1F CB ; Increment $CB1F.w [Flags: NZ]
	sbc ($1F.b,X)		; E1 1F ; Subtract with carry ($1F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	sbc $0A95.w		; ED 95 0A ; Subtract $0A95.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $9D0A96.l		; 6F 96 0A 9D ; Add with carry (long) $9D0A96.l [Writes: Accumulator] [Flags: NCVZ]
	stx $0A.b,Y		; 96 0A ; Store X register $0A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $70, $D3		; 70 D3 ; Branch if overflow set to $70, $D3 [Flow: branch]
	ora $1FD4D1.l,X		; 1F D1 D4 1F ; Logical OR long $1FD4D1.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	cpx $1FCA.w		; EC CA 1F ; Compare $1FCA.w with X register [Reads: X Index] [Flags: NCZ]
	ldy $AD.b,X		; B4 AD ; Load Y register $AD.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor #$91.b		; 49 91 ; Exclusive OR #$91.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0A823C.l,X		; 1F 3C 82 0A ; Logical OR long $0A823C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $84.b		; 64 84 ; Store zero to $84.b
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	sta $0A.b,S		; 83 0A ; Store accumulator (stack relative) $0A.b,S [Reads: Stack Pointer, Accumulator]
	lda ($B4.b),Y		; B1 B4 ; Load accumulator ($B4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	lda $0A.b,X		; B5 0A ; Load $0A.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inc $0AB2.w		; EE B2 0A ; Increment $0AB2.w [Flags: NZ]
	dec $0AB3.w		; CE B3 0A ; Decrement $0AB3.w [Flags: NZ]
	cmp ($A9.b,S),Y		; D3 A9 ; Compare accumulator (stack relative indirect indexed) ($A9.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	sbc $B1.b,X		; F5 B1 ; Subtract $B1.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldx $880A.w		; AE 0A 88 ; Load $880A.w into X register [Writes: X Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	cpx $0AAB.w		; EC AB 0A ; Compare $0AAB.w with X register [Reads: X Index] [Flags: NCZ]
	ror $AF.b,X		; 76 AF ; Rotate right $AF.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and [$AD.b],Y		; 37 AD ; AND accumulator with memory (long indexed) [$AD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A7.b,S		; 03 A7 ; OR accumulator with stack relative $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda [$0A.b]		; A7 0A ; Load accumulator (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0AA7.w,Y		; 99 A7 0A ; Store accumulator to $0AA7.w,Y [Reads: Y Index, Accumulator]
	cmp ($A7.b,S),Y		; D3 A7 ; Compare accumulator (stack relative indirect indexed) ($A7.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($A8.b,S),Y		; 13 A8 ; OR accumulator (stack relative indirect indexed) ($A8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	inc $0AA8.w,X		; FE A8 0A ; Increment memory $0AA8.w,X [Reads: X Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	adc $B1.b		; 65 B1 ; Add $B1.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldy $AE.b		; A4 AE ; Load $AE.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	lda ($AA.b),Y		; B1 AA ; Load accumulator ($AA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc ($AF.b),Y		; F1 AF ; Subtract with carry ($AF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ldy $E70A.w		; AC 0A E7 ; Load $E70A.w into Y register [Writes: Y Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $67.b,S		; 03 67 ; OR accumulator with stack relative $67.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx $CA03.w		; EC 03 CA ; Compare $CA03.w with X register [Reads: X Index] [Flags: NCZ]
	cpx $B603.w		; EC 03 B6 ; Compare $B603.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $4103.w		; ED 03 41 ; Subtract $4103.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	bit $03EE.w		; 2C EE 03 ; Test bits $03EE.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sbc [$EE.b]		; E7 EE ; Subtract with carry (long) [$EE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $89.b,S		; 03 89 ; OR accumulator with stack relative $89.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $F04603.l		; EF 03 46 F0 ; Subtract with carry (long) $F04603.l [Writes: Accumulator] [Flags: NCVZ]
	ora $AA.b,S		; 03 AA ; OR accumulator with stack relative $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	sty $F1.b		; 84 F1 ; Store Y register to $F1.b [Reads: Y Index]
	ora $63.b,S		; 03 63 ; OR accumulator with stack relative $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc ($03.b)		; F2 03 ; Subtract with carry (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc #$F3.b		; 69 F3 ; Add #$F3.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora $AA.b,S		; 03 AA ; OR accumulator with stack relative $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $21.b,S		; 03 21 ; OR accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $D4.b,S		; 03 D4 ; OR accumulator with stack relative $D4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $03.b,X		; F5 03 ; Subtract $03.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $F6.b,X		; 15 F6 ; OR accumulator with memory $F6.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $AA.b,S		; 03 AA ; OR accumulator with stack relative $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $03.b,X		; F6 03 ; Increment memory $03.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	asl $03F7.w,X		; 1E F7 03 ; Arithmetic shift left $03F7.w,X [Reads: X Index] [Flags: NCZ]
	sbc #$F7.b		; E9 F7 ; Subtract #$F7.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $E9.b,S		; 03 E9 ; OR accumulator with stack relative $E9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $41.b,S		; 03 41 ; OR accumulator with stack relative $41.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($8503.w,X)		; FC 03 85 ; Jump to subroutine indirect indexed ($8503.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $DC03.w,X		; FD 03 DC ; Subtract with carry $DC03.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3B03.w,X		; FD 03 3B ; Subtract with carry $3B03.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $5303.w,X		; FE 03 53 ; Increment memory $5303.w,X [Reads: X Index] [Flags: NZ]
	sbc $4E03.w,Y		; F9 03 4E ; Subtract with carry $4E03.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pea $F103.w		; F4 03 F1 ; Push absolute address $F103.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pea $BB03.w		; F4 03 BB ; Push absolute address $BB03.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	inc $4B03.w,X		; FE 03 4B ; Increment memory $4B03.w,X [Reads: X Index] [Flags: NZ]
	sbc $FFEB03.l,X		; FF 03 EB FF ; Subtract with carry (long,X) $FFEB03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $03.b,X		; F5 03 ; Subtract $03.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $03F9.w,X		; 7E F9 03 ; Rotate right $03F9.w,X [Reads: X Index] [Flags: NCZ]
	sbc ($F9.b)		; F2 F9 ; Subtract with carry (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda [$0A.b],Y		; B7 0A ; Load accumulator (long indexed) [$0A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $0A.b,X		; B5 0A ; Load $0A.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $0A.b,Y		; B6 0A ; Load X register $0A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	ldx $0A.b,Y		; B6 0A ; Load X register $0A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldx $0A.b,Y		; B6 0A ; Load X register $0A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sta ($87.b)		; 92 87 ; Store accumulator (indirect) ($87.b) [Reads: Direct Page, Accumulator]
	ora $1F8792.l,X		; 1F 92 87 1F ; Logical OR long $1F8792.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($87.b)		; 92 87 ; Store accumulator (indirect) ($87.b) [Reads: Direct Page, Accumulator]
	ora $1F8792.l,X		; 1F 92 87 1F ; Logical OR long $1F8792.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	sta ($87.b)		; 92 87 ; Store accumulator (indirect) ($87.b) [Reads: Direct Page, Accumulator]
	ora $1F8792.l,X		; 1F 92 87 1F ; Logical OR long $1F8792.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($87.b)		; 92 87 ; Store accumulator (indirect) ($87.b) [Reads: Direct Page, Accumulator]
	ora $1F8792.l,X		; 1F 92 87 1F ; Logical OR long $1F8792.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($87.b)		; 92 87 ; Store accumulator (indirect) ($87.b) [Reads: Direct Page, Accumulator]
	ora $1F8792.l,X		; 1F 92 87 1F ; Logical OR long $1F8792.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($87.b)		; 92 87 ; Store accumulator (indirect) ($87.b) [Reads: Direct Page, Accumulator]
	ora $1F8792.l,X		; 1F 92 87 1F ; Logical OR long $1F8792.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($87.b)		; 92 87 ; Store accumulator (indirect) ($87.b) [Reads: Direct Page, Accumulator]
	ora $1F8792.l,X		; 1F 92 87 1F ; Logical OR long $1F8792.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($87.b)		; 92 87 ; Store accumulator (indirect) ($87.b) [Reads: Direct Page, Accumulator]
	ora $1F8792.l,X		; 1F 92 87 1F ; Logical OR long $1F8792.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$1F.b]		; 87 1F ; Store accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc $00E9FF.l,X		; FF FF E9 00 ; Subtract with carry (long,X) $00E9FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $18EDFF.l,X		; FF FF ED 18 ; Subtract with carry (long,X) $18EDFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($00A1.w,X)		; FC A1 00 ; Jump to subroutine indirect indexed ($00A1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and #$22.b		; 29 22 ; Logical AND #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($02.b)		; 52 02 ; Exclusive OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $05A5.w,X		; FE A5 05 ; Increment memory $05A5.w,X [Reads: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $81A6.w,X		; FE A6 81 ; Increment memory $81A6.w,X [Reads: X Index] [Flags: NZ]
	sbc $CA8326.l,X		; FF 26 83 CA ; Subtract with carry (long,X) $CA8326.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $5C0221.l,X		; FF 21 02 5C ; Subtract with carry (long,X) $5C0221.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $55.b,X		; 15 55 ; OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jmp $875655.l		; 5C 55 56 87 ; Jump long to $875655.l [Flow: jump]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $87FA23.l,X		; 9F 23 FA 87 ; Store accumulator (long,X) $87FA23.l,X [Reads: Accumulator, X Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sta $B0FA4B.l,X		; 9F 4B FA B0 ; Store accumulator (long,X) $B0FA4B.l,X [Reads: Accumulator, X Index]
	sta ($FF.b),Y		; 91 FF ; Store accumulator ($FF.b),Y [Reads: Direct Page, Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	adc $E8.b		; 65 E8 ; Add $E8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ror $9B.b		; 66 9B ; Rotate right $9B.b [Reads: Direct Page] [Flags: NCZ]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $A3.b,S		; E3 A3 ; Subtract stack-relative $A3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora #$13.b		; 09 13 ; Logical OR #$13.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$09.b		; C0 09 ; Compare #$09.b with Y register [Reads: Y Index] [Flags: NCZ]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	adc ($C0.b,X)		; 61 C0 ; Add with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($C0.b,X)		; 61 C0 ; Add with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $C013.w,Y		; D9 13 C0 ; Compare accumulator $C013.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $C052.w,Y		; D9 52 C0 ; Compare accumulator $C052.w,Y [Reads: Y Index] [Flags: NCZ]
	sbc $1049FF.l,X		; FF FF 49 10 ; Subtract with carry (long,X) $1049FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FFFF.w		; CD FF FF ; Compare $FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $1C		; 80 1C ; Branch always to $80, $1C [Flow: branch]
	sta ($1C.b,X)		; 81 1C ; Store accumulator ($1C.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $0851FF.l,X		; FF FF 51 08 ; Subtract with carry (long,X) $0851FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $00A1.w,X		; FE A1 00 ; Increment memory $00A1.w,X [Reads: X Index] [Flags: NZ]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($01.b)		; 52 01 ; Exclusive OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $0025.w,X		; FE 25 00 ; Increment memory $0025.w,X [Reads: X Index] [Flags: NZ]
	inc $0128.w,X		; FE 28 01 ; Increment memory $0128.w,X [Reads: X Index] [Flags: NZ]
	sta $0281.w,Y		; 99 81 02 ; Store accumulator to $0281.w,Y [Reads: Y Index, Accumulator]
	sbc $C00508.l,X		; FF 08 05 C0 ; Subtract with carry (long,X) $C00508.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($61.b,S),Y		; 93 61 ; Store accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc $99840A.l,X		; FF 0A 84 99 ; Subtract with carry (long,X) $99840A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	inc $802A.w,X		; FE 2A 80 ; Increment memory $802A.w,X [Reads: X Index] [Flags: NZ]
	sbc $D00241.l,X		; FF 41 02 D0 ; Subtract with carry (long,X) $D00241.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $E08642.l,X		; FF 42 86 E0 ; Subtract with carry (long,X) $E08642.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FF82A2.l,X		; FF A2 82 FF ; Subtract with carry (long,X) $FF82A2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $83.b		; A5 83 ; Load $83.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $D88765.l,X		; FF 65 87 D8 ; Subtract with carry (long,X) $D88765.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$62.b		; 69 62 ; Add #$62.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0667.l,X		; FF 67 06 FF ; Subtract with carry (long,X) $FF0667.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$02.b]		; A7 02 ; Load accumulator (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $5B.b,S		; C3 5B ; Compare accumulator (stack relative) $5B.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($5B.b,S),Y		; D3 5B ; Compare accumulator (stack relative indirect indexed) ($5B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cpx #$AC.b		; E0 AC ; Compare #$AC.b with X register [Reads: X Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pei ($38.b)		; D4 38 ; Push effective indirect address ($38.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsr ($C851.w,X)		; FC 51 C8 ; Jump to subroutine indirect indexed ($C851.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $2D.b,X		; 15 2D ; OR accumulator with memory $2D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $C9.b,X		; 55 C9 ; Exclusive OR accumulator with memory $C9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	bit $1D.b		; 24 1D ; Test bits $1D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $4C04.w,X		; 5D 04 4C ; Exclusive OR accumulator with memory $4C04.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FD03.w,X		; 1D 03 FD ; OR accumulator with memory $FD03.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $642D.w,X		; 5D 2D 64 ; Exclusive OR accumulator with memory $642D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $CB75.w,X		; FD 75 CB ; Subtract with carry $CB75.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $045D.w		; 4C 5D 04 ; Jump to $045D.w [Flow: jump]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jmp $DB2E.w		; 4C 2E DB ; Jump to $DB2E.w [Flow: jump]
	and [$1E.b],Y		; 37 1E ; AND accumulator with memory (long indexed) [$1E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc #$34.b		; 69 34 ; Add #$34.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jmp $1E4B69.l		; 5C 69 4B 1E ; Jump long to $1E4B69.l [Flow: jump]
	adc #$48.b		; 69 48 ; Add #$48.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jmp $E1FC69.l		; 5C 69 FC E1 ; Jump long to $E1FC69.l [Flow: jump]
	and $A838.w,Y		; 39 38 A8 ; AND accumulator with memory $A838.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($05.b,S),Y		; 93 05 ; Store accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	jsr $38B4.w		; 20 B4 38 ; Jump to subroutine at $38B4.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $B8		; 50 B8 ; Branch if overflow clear to $50, $B8 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pei ($38.b)		; D4 38 ; Push effective indirect address ($38.b) [Reads: Direct Page] [Writes: Stack Pointer]
	bit #$13.b		; 89 13 ; Test bits #$13.b with accumulator [Reads: Accumulator] [Flags: Z]
	cpy #$E1.b		; C0 E1 ; Compare #$E1.b with Y register [Reads: Y Index] [Flags: NCZ]
	ora #$C0.b		; 09 C0 ; Logical OR #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $90.b,S		; 83 90 ; Store accumulator (stack relative) $90.b,S [Reads: Stack Pointer, Accumulator]
	cpy #$83.b		; C0 83 ; Compare #$83.b with Y register [Reads: Y Index] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$E8.b		; C0 E8 ; Compare #$E8.b with Y register [Reads: Y Index] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $823660.l,X		; FF 60 36 82 ; Subtract with carry (long,X) $823660.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	jsr $FF1C.w		; 20 1C FF ; Jump to subroutine at $FF1C.w [Writes: Stack Pointer] [Flow: call]
	sbc $FC08ED.l,X		; FF ED 08 FC ; Subtract with carry (long,X) $FC08ED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($38.b,X)		; E1 38 ; Subtract with carry ($38.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $68.b		; 65 68 ; Add $68.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $08.b		; 66 08 ; Rotate right $08.b [Reads: Direct Page] [Flags: NCZ]
	lda $6C76.w		; AD 76 6C ; Load $6C76.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $1B77.w		; AD 77 1B ; Load $1B77.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $23.b,S		; 63 23 ; Add with carry (stack relative) $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $43.b,S		; 63 43 ; Add with carry (stack relative) $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc $FA.b,S		; 63 FA ; Add with carry (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	bit $B0.b		; 24 B0 ; Test bits $B0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lsr $A91C.w,X		; 5E 1C A9 ; Logical shift right $A91C.w,X [Reads: X Index] [Flags: NCZ]
	lsr $A94C.w,X		; 5E 4C A9 ; Logical shift right $A94C.w,X [Reads: X Index] [Flags: NCZ]
	lsr $C828.w,X		; 5E 28 C8 ; Logical shift right $C828.w,X [Reads: X Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $50, $C8		; 50 C8 ; Branch if overflow clear to $50, $C8 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $61.b,X		; 36 61 ; Rotate left $61.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $0019FF.l,X		; FF FF 19 00 ; Subtract with carry (long,X) $0019FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta ($01.b,S),Y		; 93 01 ; Store accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc ($A0.b,X)		; E1 A0 ; Subtract with carry ($A0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $FF.b		; C4 FF ; Compare $FF.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($02.b),Y		; B1 02 ; Load accumulator ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $C8852E.l,X		; FF 2E 85 C8 ; Subtract with carry (long,X) $C8852E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E861.w,Y		; F9 61 E8 ; Subtract with carry $E861.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $62, $D8, $E1		; 62 D8 E1 ; Push effective relative address $62, $D8, $E1 [Writes: Stack Pointer]
	cpy $21.b		; C4 21 ; Compare $21.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp ($30.b,X)		; C1 30 ; Compare accumulator ($30.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	eor ($21.b)		; 52 21 ; Exclusive OR accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $30, $3D		; 30 3D ; Branch if minus to $30, $3D [Flow: branch]
	.db $50, $30		; 50 30 ; Branch if overflow clear to $50, $30 [Flow: branch]
	and $3839.w,X		; 3D 39 38 ; AND accumulator with memory $3839.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	bit $B9.b,X		; 34 B9 ; Test bits $B9.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	.db $30, $B6		; 30 B6 ; Branch if minus to $30, $B6 [Flow: branch]
	bit $31.b,X		; 34 31 ; Test bits $31.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	adc ($45.b),Y		; 71 45 ; Add with carry ($45.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	adc ($30.b),Y		; 71 30 ; Add with carry ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	bit $18.b,X		; 34 18 ; Test bits $18.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sta ($05.b,S),Y		; 93 05 ; Store accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($3A.b)		; 12 3A ; OR accumulator with memory (indirect) ($3A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$AF.b],Y		; 37 AF ; AND accumulator with memory (long indexed) [$AF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $2BFAAF.l,X		; 3F AF FA 2B ; AND accumulator with memory (long,X) $2BFAAF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $C7.b,S		; 23 C7 ; AND accumulator with stack relative $C7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	cmp ($FA.b,S),Y		; D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	and [$DF.b],Y		; 37 DF ; AND accumulator with memory (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $4BFADF.l,X		; 3F DF FA 4B ; AND accumulator with memory (long,X) $4BFADF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($FA.b,S),Y		; D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	eor ($C7.b,S),Y		; 53 C7 ; XOR accumulator (stack relative indirect indexed) ($C7.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	and $DB.b,S		; 23 DB ; AND accumulator with stack relative $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $DB.b,S		; 23 DB ; AND accumulator with stack relative $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	lda $A0F914.l,X		; BF 14 F9 A0 ; Load long $A0F914.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $3D		; 30 3D ; Branch if minus to $30, $3D [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $30, $3D		; 30 3D ; Branch if minus to $30, $3D [Flow: branch]
	ldy #$50.b		; A0 50 ; Load #$50.b into Y register [Writes: Y Index] [Flags: NZ]
	and $50D8.w,X		; 3D D8 50 ; AND accumulator with memory $50D8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $FFFF.w,X		; 3D FF FF ; AND accumulator with memory $FFFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $82.b,X		; 36 82 ; Rotate left $82.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	sbc $1019FF.l,X		; FF FF 19 10 ; Subtract with carry (long,X) $1019FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $93.b		; 00 93 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E8.b,X)		; 01 E8 ; Logical OR ($E8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($01.b,S),Y		; 93 01 ; Store accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy $E1.b		; C4 E1 ; Compare $E1.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ldy #$C4.b		; A0 C4 ; Load #$C4.b into Y register [Writes: Y Index] [Flags: NZ]
	ora ($B2.b,X)		; 01 B2 ; Logical OR ($B2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ora $2C.b		; 05 2C ; Logical OR $2C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$61		; C2 61
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp ($01.b,S),Y		; D3 01 ; Compare accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	jsr ($04BD.w,X)		; FC BD 04 ; Jump to subroutine indirect indexed ($04BD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($002D.w,X)		; FC 2D 00 ; Jump to subroutine indirect indexed ($002D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($C4.b,X)		; E1 C4 ; Subtract with carry ($C4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($87AE.w,X)		; FC AE 87 ; Jump to subroutine indirect indexed ($87AE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $FD62.w,Y		; F9 62 FD ; Subtract with carry $FD62.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $4885.w		; 2E 85 48 ; Rotate left $4885.w [Flags: NCZ]
	sbc $FE61.w,Y		; F9 61 FE ; Subtract with carry $FE61.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $A887.w		; AE 87 A8 ; Load $A887.w into X register [Writes: X Index] [Flags: NZ]
	sbc $5B62.w,Y		; F9 62 5B ; Subtract with carry $5B62.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($C4.b,X)		; E1 C4 ; Subtract with carry ($C4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($C4.b,X)		; E1 C4 ; Subtract with carry ($C4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C8852E.l,X		; FF 2E 85 C8 ; Subtract with carry (long,X) $C8852E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $D861.w,Y		; F9 61 D8 ; Subtract with carry $D861.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($C4.b,X)		; E1 C4 ; Subtract with carry ($C4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FF, $AD		; 62 FF AD ; Push effective relative address $62, $FF, $AD [Writes: Stack Pointer]
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($01.b,S),Y		; D3 01 ; Compare accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sbc $C4061D.l,X		; FF 1D 06 C4 ; Subtract with carry (long,X) $C4061D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.ACCU 16
	rep #$62		; C2 62
	cmp ($B2.b),Y		; D1 B2 ; Compare accumulator ($B2.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora [$FD.b]		; 07 FD ; OR accumulator with memory (long) [$FD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$5E.b]		; 07 5E ; OR accumulator with memory (long) [$5E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($02.b),Y		; B1 02 ; Load accumulator ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $059B.w,X		; FE 9B 05 ; Increment memory $059B.w,X [Reads: X Index] [Flags: NZ]
	jmp $62C1.w		; 4C C1 62 ; Jump to $62C1.w [Flow: jump]
	sbc $863C.w,X		; FD 3C 86 ; Subtract with carry $863C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $01C9.w,X		; 5E C9 01 ; Logical shift right $01C9.w,X [Reads: X Index] [Flags: NCZ]
	inc $849C.w,X		; FE 9C 84 ; Increment memory $849C.w,X [Reads: X Index] [Flags: NZ]
	ldy $C1.b		; A4 C1 ; Load $C1.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	adc ($2D.b,X)		; 61 2D ; Add with carry ($2D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $7138.w		; 2C 38 71 ; Test bits $7138.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $50, $38		; 50 38 ; Branch if overflow clear to $50, $38 [Flow: branch]
	adc ($2D.b),Y		; 71 2D ; Add with carry ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $31.b,X		; 34 31 ; Test bits $31.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	adc $6DFA2B.l,X		; 7F 2B FA 6D ; Add long $6DFA2B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $34.b,X		; 36 34 ; Rotate left $34.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	jmp ($7138.w)		; 6C 38 71 ; Jump indirect to ($7138.w) [Flow: jump]
	.db $90, $38		; 90 38 ; Branch if carry clear to $90, $38 [Flow: branch]
	adc ($6D.b),Y		; 71 6D ; Add with carry ($6D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $71.b,X		; 34 71 ; Test bits $71.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	adc $F93E.w,X		; 7D 3E F9 ; Add $F93E.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $3436.w		; AD 36 34 ; Load $3436.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $7138.w		; AC 38 71 ; Load $7138.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $38		; D0 38 ; Branch if not equal to $D0, $38 [Flow: branch]
	adc ($AD.b),Y		; 71 AD ; Add with carry ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $B1.b,X		; 34 B1 ; Test bits $B1.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	and $3444.w,X		; 3D 44 34 ; AND accumulator with memory $3444.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $D44C.w,X		; 3D 4C D4 ; AND accumulator with memory $D44C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $88D4.w		; AC D4 88 ; Load $88D4.w into Y register [Writes: Y Index] [Flags: NZ]
	and #$0513.w		; 29 13 05 ; Logical AND #$0513.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $B693.w,Y		; 59 93 B6 ; Exclusive OR accumulator with memory $B693.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	ldx $D8.b,Y		; B6 D8 ; Load X register $D8.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda ($B7.b)		; B2 B7 ; Load accumulator (indirect) ($B7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $1FFA2B.l,X		; 3F 2B FA 1F ; AND accumulator with memory (long,X) $1FFA2B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $9FFA5B.l,X		; 5F 5B FA 9F ; Exclusive OR accumulator with memory (long,X) $9FFA5B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $BFFA5B.l,X		; DF 5B FA BF ; Compare accumulator (long,X) $BFFA5B.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy $34.b,X		; B4 34 ; Load Y register $34.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	and $34C4.w,X		; 3D C4 34 ; AND accumulator with memory $34C4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $C009.w,X		; 3D 09 C0 ; AND accumulator with memory $C009.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$24.b		; C0 24 ; Compare #$24.b with Y register [Reads: Y Index] [Flags: NCZ]
.ACCU 16
	rep #$60		; C2 60
	lsr $00C1.w,X		; 5E C1 00 ; Logical shift right $00C1.w,X [Reads: X Index] [Flags: NCZ]
	cmp $C0.b,X		; D5 C0 ; Compare accumulator $C0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cpy #$F0.b		; C0 F0 ; Compare #$F0.b with Y register [Reads: Y Index] [Flags: NCZ]
.ACCU 16
	rep #$60		; C2 60
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000819.l,X		; FF 19 08 00 ; Subtract with carry (long,X) $000819.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($01.b,S),Y		; 93 01 ; Store accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	lda ($02.b),Y		; B1 02 ; Load accumulator ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($052B.w,X)		; FC 2B 05 ; Jump to subroutine indirect indexed ($052B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $FC61.w,Y		; F9 61 FC ; Subtract with carry $FC61.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $3885.w		; AE 85 38 ; Load $3885.w into X register [Writes: X Index] [Flags: NZ]
	sbc ($C4.b,X)		; E1 C4 ; Subtract with carry ($C4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $872E.w,X		; FD 2E 87 ; Subtract with carry $872E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $2B62.w,Y		; F9 62 2B ; Subtract with carry $2B62.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$FA.b],Y		; B7 FA ; Load accumulator (long indexed) [$FA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $B7.b,S		; 43 B7 ; Exclusive OR accumulator with stack relative $B7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda [$FA.b],Y		; B7 FA ; Load accumulator (long indexed) [$FA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($D9.b),Y		; 71 D9 ; Add with carry ($D9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $A671.w		; 20 71 A6 ; Jump to subroutine at $A671.w [Writes: Stack Pointer] [Flow: call]
	.db $42, $34		; 42 34 ; Reserved instruction
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	and ($DB.b,X)		; 21 DB ; Logical AND ($DB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $28D0.w,X		; 3D D0 28 ; AND accumulator with memory $28D0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $2ABD.w,X		; 3D BD 2A ; AND accumulator with memory $2ABD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $5088.w,Y		; F9 88 50 ; Subtract with carry $5088.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $88.b		; 65 88 ; Add $88.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$65.b		; A0 65 ; Load #$65.b into Y register [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $50, $66		; 50 66 ; Branch if overflow clear to $50, $66 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ldy #$66.b		; A0 66 ; Load #$66.b into Y register [Writes: Y Index] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $0819FF.l,X		; FF FF 19 08 ; Subtract with carry (long,X) $0819FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $02A1.w,X		; FE A1 02 ; Increment memory $02A1.w,X [Reads: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsl $A2FE62.l		; 22 62 FE A2 ; Jump to subroutine long $A2FE62.l [Writes: Stack Pointer] [Flow: call]
	dec $B8.b		; C6 B8 ; Decrement $B8.b [Reads: Direct Page] [Flags: NZ]
	rol $C901.w		; 2E 01 C9 ; Rotate left $C901.w [Flags: NCZ]
	cop $61.b		; 02 61 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $D8C422.l,X		; FF 22 C4 D8 ; Subtract with carry (long,X) $D8C422.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($C4.b,X)		; 01 C4 ; Logical OR ($C4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc #$6200.w		; E9 00 62 ; Subtract #$6200.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc $B9C3AC.l,X		; FF AC C3 B9 ; Subtract with carry (long,X) $B9C3AC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $A802.w		; CE 02 A8 ; Decrement $A802.w [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FE, $AC		; 62 FE AC ; Push effective relative address $62, $FE, $AC [Writes: Stack Pointer]
	cmp [$FE.b]		; C7 FE ; Compare accumulator (long) [$FE.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ldx $1F83.w		; AE 83 1F ; Load $1F83.w into X register [Writes: X Index] [Flags: NZ]
	rol $34.b		; 26 34 ; Rotate left $34.b [Reads: Direct Page] [Flags: NCZ]
	ora $7129.w,X		; 1D 29 71 ; OR accumulator with memory $7129.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $3448.w		; 20 48 34 ; Jump to subroutine at $3448.w [Writes: Stack Pointer] [Flow: call]
	bit $714C.w		; 2C 4C 71 ; Test bits $714C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $30, $58		; 30 58 ; Branch if minus to $30, $58 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc ($40.b),Y		; 71 40 ; Add with carry ($40.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	bit $50.b,X		; 34 50 ; Test bits $50.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	eor #$5471.w		; 49 71 54 ; Exclusive OR #$5471.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	bit $61.b,X		; 34 61 ; Test bits $61.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc ($20.b),Y		; 71 20 ; Add with carry ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	.db $50, $28		; 50 28 ; Branch if overflow clear to $50, $28 [Flow: branch]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sec		; 38 ; Set carry flag [Flags: C]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and ($2A.b),Y		; 31 2A ; AND accumulator with memory ($2A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsr $C838.w		; 20 38 C8 ; Jump to subroutine at $C838.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $38		; 50 38 ; Branch if overflow clear to $50, $38 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $2454.w,X		; 3D 54 24 ; AND accumulator with memory $2454.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $2931.w,X		; 3D 31 29 ; AND accumulator with memory $2931.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $792E30.l,X		; 3F 30 2E 79 ; AND accumulator with memory (long,X) $792E30.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $463A.w		; 20 3A 46 ; Jump to subroutine at $463A.w [Writes: Stack Pointer] [Flow: call]
	jsr $793D.w		; 20 3D 79 ; Jump to subroutine at $793D.w [Writes: Stack Pointer] [Flow: call]
	jsr $4446.w		; 20 46 44 ; Jump to subroutine at $4446.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	adc $5531.w,Y		; 79 31 55 ; Add $5531.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jmp $7A4A.w		; 4C 4A 7A ; Jump to $7A4A.w [Flow: jump]
	jmp $4346.w		; 4C 46 43 ; Jump to $4346.w [Flow: jump]
	jmp $4C7A3D.l		; 5C 3D 7A 4C ; Jump long to $4C7A3D.l [Flow: jump]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $4C.b		; 45 4C ; Exclusive OR $4C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $1B7A.w		; 2E 7A 1B ; Rotate left $1B7A.w [Flags: NCZ]
	ldx #$DB.b		; A2 DB ; Load #$DB.b into X register [Writes: X Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ldx #$DB.b		; A2 DB ; Load #$DB.b into X register [Writes: X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp ($34.b,S),Y		; D3 34 ; Compare accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
	and $A2.b,S		; 23 A2 ; AND accumulator with stack relative $A2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $23.b,S		; A3 23 ; Load accumulator (stack relative) $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	lda $E3.b,S		; A3 E3 ; Load accumulator (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($05.b,S),Y		; 93 05 ; Store accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $90, $E9		; 90 E9 ; Branch if carry clear to $90, $E9 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sta ($C8.b),Y		; 91 C8 ; Store accumulator ($C8.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cmp $A818B7.l		; CF B7 18 A8 ; Compare accumulator (long) $A818B7.l [Reads: Accumulator] [Flags: NCZ]
	lsr $A920.w,X		; 5E 20 A9 ; Logical shift right $A920.w,X [Reads: X Index] [Flags: NCZ]
	lsr $A948.w,X		; 5E 48 A9 ; Logical shift right $A948.w,X [Reads: X Index] [Flags: NCZ]
	lsr $A950.w,X		; 5E 50 A9 ; Logical shift right $A950.w,X [Reads: X Index] [Flags: NCZ]
	lsr $A4FE.w,X		; 5E FE A4 ; Logical shift right $A4FE.w,X [Reads: X Index] [Flags: NCZ]
	cmp [$B8.b]		; C7 B8 ; Compare accumulator (long) [$B8.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	lsr $FF02.w		; 4E 02 FF ; Logical shift right $FF02.w [Flags: NCZ]
	bit $C5.b		; 24 C5 ; Test bits $C5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lsr $FE62.w,X		; 5E 62 FE ; Logical shift right $FE62.w,X [Reads: X Index] [Flags: NCZ]
	ldx $C6.b		; A6 C6 ; Load $C6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ror $FF01.w		; 6E 01 FF ; Rotate right $FF01.w [Flags: NCZ]
	rol $C4.b		; 26 C4 ; Rotate left $C4.b [Reads: Direct Page] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lsr $FE61.w,X		; 5E 61 FE ; Logical shift right $FE61.w,X [Reads: X Index] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp [$B8.b]		; C7 B8 ; Compare accumulator (long) [$B8.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	stx $FF02.w		; 8E 02 FF ; Store X register to $FF02.w [Reads: X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp $A8.b		; C5 A8 ; Compare $A8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	stz $FE62.w,X		; 9E 62 FE ; Store zero to $FE62.w,X [Reads: X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dec $B8.b		; C6 B8 ; Decrement $B8.b [Reads: Direct Page] [Flags: NZ]
	ldx $FF01.w		; AE 01 FF ; Load $FF01.w into X register [Writes: X Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpy $C8.b		; C4 C8 ; Compare $C8.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	stz $B861.w,X		; 9E 61 B8 ; Store zero to $B861.w,X [Reads: X Index]
	ora $B8C0.w		; 0D C0 B8 ; Logical OR $B8C0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $9CB8C0.l		; 5C C0 B8 9C ; Jump long to $9CB8C0.l [Flow: jump]
	cpy #$BB.b		; C0 BB ; Compare #$BB.b with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $FFC0.w,X		; DD C0 FF ; Compare accumulator $FFC0.w,X [Reads: X Index] [Flags: NCZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $613660.l,X		; FF 60 36 61 ; Subtract with carry (long,X) $613660.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $82, $00, $FF		; 82 00 FF ; Branch always long to $82, $00, $FF [Flow: branch]
	sbc $091C19.l,X		; FF 19 1C 09 ; Subtract with carry (long,X) $091C19.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($0124.w,X)		; FC 24 01 ; Jump to subroutine indirect indexed ($0124.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $0241.w,Y		; 19 41 02 ; OR accumulator with memory $0241.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $0504.w,X		; FD 04 05 ; Subtract with carry $0504.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor ($61.b)		; 52 61 ; Exclusive OR accumulator with memory (indirect) ($61.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0406.w,X		; FD 06 04 ; Subtract with carry $0406.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	adc ($01.b,X)		; 61 01 ; Add with carry ($01.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($00A6.w,X)		; FC A6 00 ; Jump to subroutine indirect indexed ($00A6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and #$6171.w		; 29 71 61 ; Logical AND #$6171.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($84A9.w,X)		; FC A9 84 ; Jump to subroutine indirect indexed ($84A9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and #$FF80.w		; 29 80 FF ; Logical AND #$FF80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$D882.w		; A9 82 D8 ; Load #$D882.w into accumulator [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and #$C986.w		; 29 86 C9 ; Logical AND #$C986.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($62.b),Y		; 71 62 ; Add with carry ($62.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C00226.l,X		; FF 26 02 C0 ; Subtract with carry (long,X) $C00226.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($01.b,X)		; 61 01 ; Add with carry ($01.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $06C6.w,X		; FE C6 06 ; Increment memory $06C6.w,X [Reads: X Index] [Flags: NZ]
	.db $B0, $52		; B0 52 ; Branch if carry set to $B0, $52 [Flow: branch]
	.db $62, $FE, $C4		; 62 FE C4 ; Push effective relative address $62, $FE, $C4 [Writes: Stack Pointer]
	ora [$E1.b]		; 07 E1 ; OR accumulator with memory (long) [$E1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($C4.b,S),Y		; 33 C4 ; AND accumulator (stack relative indirect indexed) ($C4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc ($70.b,X)		; E1 70 ; Subtract with carry ($70.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $C1.b		; C4 C1 ; Compare $C1.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $05.b		; 84 05 ; Store Y register to $05.b [Reads: Y Index]
	sbc ($52.b,X)		; E1 52 ; Subtract with carry ($52.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $82, $02, $F8		; 82 02 F8 ; Branch always long to $82, $02, $F8 [Flow: branch]
	and ($01.b,X)		; 21 01 ; Logical AND ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $E906A2.l,X		; FF A2 06 E9 ; Subtract with carry (long,X) $E906A2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($C4.b,X)		; 01 C4 ; Logical OR ($C4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ora ($C4.b,X)		; 01 C4 ; Logical OR ($C4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora ($C4.b,X)		; 01 C4 ; Logical OR ($C4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora ($C4.b,X)		; 01 C4 ; Logical OR ($C4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and #$6200.w		; 29 00 62 ; Logical AND #$6200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($06A2.w,X)		; FC A2 06 ; Jump to subroutine indirect indexed ($06A2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	jsl $22FD01.l		; 22 01 FD 22 ; Jump to subroutine long $22FD01.l [Writes: Stack Pointer] [Flow: call]
	tsb $49.b		; 04 49 ; Test and set bits $49.b [Reads: Accumulator] [Flags: Z]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$6200.w		; A9 00 62 ; Load #$6200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc $06A2.w,X		; FE A2 06 ; Increment memory $06A2.w,X [Reads: X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	jsl $22FF01.l		; 22 01 FF 22 ; Jump to subroutine long $22FF01.l [Writes: Stack Pointer] [Flow: call]
	tsb $C9.b		; 04 C9 ; Test and set bits $C9.b [Reads: Accumulator] [Flags: Z]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($DB.b,S),Y		; 13 DB ; OR accumulator (stack relative indirect indexed) ($DB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $50, $DB		; 50 DB ; Branch if overflow clear to $50, $DB [Flow: branch]
	ror $0E.b		; 66 0E ; Rotate right $0E.b [Reads: Direct Page] [Flags: NCZ]
	bit $67.b,X		; 34 67 ; Test bits $67.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora ($71.b,S),Y		; 13 71 ; OR accumulator (stack relative indirect indexed) ($71.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stz $50.b		; 64 50 ; Store zero to $50.b
	adc ($9B.b),Y		; 71 9B ; Add with carry ($9B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($71.b,S),Y		; 13 71 ; OR accumulator (stack relative indirect indexed) ($71.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $71		; 50 71 ; Branch if overflow clear to $50, $71 [Flow: branch]
	ror $62.b		; 66 62 ; Rotate right $62.b [Reads: Direct Page] [Flags: NCZ]
	bit $68.b,X		; 34 68 ; Test bits $68.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	.db $10, $39		; 10 39 ; Branch if plus to $10, $39 [Flow: branch]
	.db $90, $10		; 90 10 ; Branch if carry clear to $90, $10 [Flow: branch]
	and $5068.w,Y		; 39 68 50 ; AND accumulator with memory $5068.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $5090.w,Y		; 39 90 50 ; AND accumulator with memory $5090.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $4328.w,Y		; 39 28 43 ; AND accumulator with memory $4328.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$A9.b],Y		; B7 A9 ; Load accumulator (long indexed) [$A9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $52		; B0 52 ; Branch if carry set to $B0, $52 [Flow: branch]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldx $2965.w		; AE 65 29 ; Load $2965.w into X register [Writes: X Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $E8.b		; 06 E8 ; Arithmetic shift left $E8.b [Reads: Direct Page] [Flags: NCZ]
	ldx $3366.w		; AE 66 33 ; Load $3366.w into X register [Writes: X Index] [Flags: NZ]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($3B.b,S),Y		; 33 3B ; AND accumulator (stack relative indirect indexed) ($3B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sta $8B.b,S		; 83 8B ; Store accumulator (stack relative) $8B.b,S [Reads: Stack Pointer, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $73.b,S		; A3 73 ; Load accumulator (stack relative) $73.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	adc ($FA.b,S),Y		; 73 FA ; Add with carry (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($50.b,X)		; 21 50 ; Logical AND ($50.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy #$09.b		; C0 09 ; Compare #$09.b with Y register [Reads: Y Index] [Flags: NCZ]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$0090.w		; 09 90 00 ; Logical OR #$0090.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0090.w,Y		; D9 90 00 ; Compare accumulator $0090.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $6062.w,Y		; D9 62 60 ; Compare accumulator $6062.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp ($50.b,X)		; C1 50 ; Compare accumulator ($50.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0A71.l,X		; FF 71 0A FF ; Subtract with carry (long,X) $FF0A71.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $010C19.l,X		; FF 19 0C 01 ; Subtract with carry (long,X) $010C19.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($C4.b,S),Y		; 33 C4 ; AND accumulator (stack relative indirect indexed) ($C4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	jsl $42FC01.l		; 22 01 FC 42 ; Jump to subroutine long $42FC01.l [Writes: Stack Pointer] [Flow: call]
	cop $11.b		; 02 11 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($62.b)		; 32 62 ; AND accumulator with memory (indirect) ($62.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($C645.w,X)		; FC 45 C6 ; Jump to subroutine indirect indexed ($C645.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($5E.b,X)		; 21 5E ; Logical AND ($5E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($4C.b,X)		; 01 4C ; Logical OR ($4C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor ($61.b)		; 52 61 ; Exclusive OR accumulator with memory (indirect) ($61.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	eor $02.b,S		; 43 02 ; Exclusive OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $C435.w,X		; FD 35 C4 ; Subtract with carry $C435.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0534.w,X		; FD 34 05 ; Subtract with carry $0534.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($01A4.w,X)		; FC A4 01 ; Jump to subroutine indirect indexed ($01A4.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $0621.w,X		; FD 21 06 ; Subtract with carry $0621.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $62.b		; 02 62 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($C4.b,X)		; 01 C4 ; Logical OR ($C4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	and $DB.b,S		; 23 DB ; AND accumulator with stack relative $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $DB.b,S		; 23 DB ; AND accumulator with stack relative $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	eor $2ABDB6.l,X		; 5F B6 BD 2A ; Exclusive OR accumulator with memory (long,X) $2ABDB6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $2CAC.w,Y		; F9 AC 2C ; Subtract with carry $2CAC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ldy $3854.w		; AC 54 38 ; Load $3854.w into Y register [Writes: Y Index] [Flags: NZ]
	cpy $3854.w		; CC 54 38 ; Compare $3854.w with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	cpy $382C.w		; CC 2C 38 ; Compare $382C.w with Y register [Reads: Y Index] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $DB.b,X		; B5 DB ; Load $DB.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $B2.b		; A6 B2 ; Load $B2.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	bit $A5.b,X		; 34 A5 ; Test bits $A5.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ldy $71.b,X		; B4 71 ; Load Y register $71.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cmp $71B4.w,Y		; D9 B4 71 ; Compare accumulator $71B4.w,Y [Reads: Y Index] [Flags: NCZ]
	ldx $D6.b		; A6 D6 ; Load $D6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	bit $A8.b,X		; 34 A8 ; Test bits $A8.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ldy $D038.w,X		; BC 38 D0 ; Load Y register $D038.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy $0038.w,X		; BC 38 00 ; Load Y register $0038.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta $02.b,S		; 83 02 ; Store accumulator (stack relative) $02.b,S [Reads: Stack Pointer, Accumulator]
	jsr ($0568.w,X)		; FC 68 05 ; Jump to subroutine indirect indexed ($0568.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta ($61.b,S),Y		; 93 61 ; Store accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	jsr ($816E.w,X)		; FC 6E 81 ; Jump to subroutine indirect indexed ($816E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $3902.w,X		; 7D 02 39 ; Add $3902.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FC, $E7		; 62 FC E7 ; Push effective relative address $62, $FC, $E7 [Writes: Stack Pointer]
	cmp [$FC.b]		; C7 FC ; Compare accumulator (long) [$FC.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	stx $48.b		; 86 48 ; Store X register to $48.b [Reads: X Index]
	lda $FD01.w,Y		; B9 01 FD ; Load $FD01.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sty $51.b		; 84 51 ; Store Y register to $51.b [Reads: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$C5.b]		; 47 C5 ; Exclusive OR accumulator with memory (long) [$C5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $90C0.w,Y		; 19 C0 90 ; OR accumulator with memory $90C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta ($88.b),Y		; 91 88 ; Store accumulator ($88.b),Y [Reads: Direct Page, Y Index, Accumulator]
	and $EC76.w		; 2D 76 EC ; Logical AND $EC76.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $9877.w		; 2D 77 98 ; Logical AND $9877.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($05.b,S),Y		; 93 05 ; Store accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	adc $E3.b,S		; 63 E3 ; Add with carry (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($60.b),Y		; B1 60 ; Load accumulator ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$608D.w		; 49 8D 60 ; Exclusive OR #$608D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $51.b		; 25 51 ; Logical AND $51.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0960.w		; 1C 60 09 ; Test and reset bits $0960.w [Reads: Accumulator] [Flags: Z]
	.db $10, $C0		; 10 C0 ; Branch if plus to $10, $C0 [Flow: branch]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $621820.l,X		; FF 20 18 62 ; Subtract with carry (long,X) $621820.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $0A81.w		; 1C 81 0A ; Test and reset bits $0A81.w [Reads: Accumulator] [Flags: Z]
	.db $82, $00, $FF		; 82 00 FF ; Branch always long to $82, $00, $FF [Flow: branch]
	sbc $1900E9.l,X		; FF E9 00 19 ; Subtract with carry (long,X) $1900E9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $1933.w		; 20 33 19 ; Jump to subroutine at $1933.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $33		; 30 33 ; Branch if minus to $30, $33 [Flow: branch]
	ora $3340.w,Y		; 19 40 33 ; OR accumulator with memory $3340.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $3350.w,Y		; 19 50 33 ; OR accumulator with memory $3350.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $3358.w,Y		; 19 58 33 ; OR accumulator with memory $3358.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $3612.w		; 20 12 36 ; Jump to subroutine at $3612.w [Writes: Stack Pointer] [Flow: call]
	bit $20.b,X		; 34 20 ; Test bits $20.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $2371.w		; 20 71 23 ; Jump to subroutine at $2371.w [Writes: Stack Pointer] [Flow: call]
	bit $71.b		; 24 71 ; Test bits $71.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor $247124.l,X		; 5F 24 71 24 ; Exclusive OR accumulator with memory (long,X) $247124.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	jmp $3424.w		; 4C 24 34 ; Jump to $3424.w [Flow: jump]
	bit $60.b		; 24 60 ; Test bits $60.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $4C.b,X		; 34 4C ; Test bits $4C.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc ($25.b),Y		; 71 25 ; Add with carry ($25.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $3D.b		; 24 3D ; Test bits $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $50, $24		; 50 24 ; Branch if overflow clear to $50, $24 [Flow: branch]
	and $E839.w,X		; 3D 39 E8 ; AND accumulator with memory $E839.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	lda ($70.b)		; B2 70 ; Load accumulator (indirect) ($70.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $70, $36		; 70 36 ; Branch if overflow set to $70, $36 [Flow: branch]
	lda ($71.b)		; B2 71 ; Load accumulator (indirect) ($71.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda ($71.b)		; B2 71 ; Load accumulator (indirect) ($71.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $91		; 30 91 ; Branch if minus to $30, $91 [Flow: branch]
	sbc $87B128.l,X		; FF 28 B1 87 ; Subtract with carry (long,X) $87B128.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $B1		; 50 B1 ; Branch if overflow clear to $50, $B1 [Flow: branch]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $603200.l,X		; FF 00 32 60 ; Subtract with carry (long,X) $603200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0C11FF.l,X		; FF FF 11 0C ; Subtract with carry (long,X) $0C11FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($00A1.w,X)		; FC A1 00 ; Jump to subroutine indirect indexed ($00A1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr ($44A2.w,X)		; FC A2 44 ; Jump to subroutine indirect indexed ($44A2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $01.b		; 26 01 ; Rotate left $01.b [Reads: Direct Page] [Flags: NCZ]
	jsr ($4022.w,X)		; FC 22 40 ; Jump to subroutine indirect indexed ($4022.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($C12D.w,X)		; FC 2D C1 ; Jump to subroutine indirect indexed ($C12D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec $FD02.w,X		; DE 02 FD ; Decrement memory $FD02.w,X [Reads: X Index] [Flags: NZ]
	lda $FDC3.w		; AD C3 FD ; Load $FDC3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and ($02.b,X)		; 21 02 ; Logical AND ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $4622.w,X		; FD 22 46 ; Subtract with carry $4622.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rol $01.b		; 26 01 ; Rotate left $01.b [Reads: Direct Page] [Flags: NCZ]
	sbc $42A2.w,X		; FD A2 42 ; Subtract with carry $42A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0853.w,X)		; FC 53 08 ; Jump to subroutine indirect indexed ($0853.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $32.b		; 25 32 ; Logical AND $32.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($0A.b,S),Y		; 73 0A ; Add with carry (stack relative indirect indexed) ($0A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora [$43.b],Y		; 17 43 ; OR accumulator with memory (long indexed) [$43.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $14.b,S		; 63 14 ; Add with carry (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($63.b,X)		; C1 63 ; Compare accumulator ($63.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	jsr ($095D.w,X)		; FC 5D 09 ; Jump to subroutine indirect indexed ($095D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $D2.b		; 25 D2 ; Logical AND $D2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	adc $5F0B.w,X		; 7D 0B 5F ; Add $5F0B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $64.b,S		; 43 64 ; Exclusive OR accumulator with stack relative $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp $FE64C1.l		; 5C C1 64 FE ; Jump long to $FE64C1.l [Flow: jump]
	eor $A5C8.w,Y		; 59 C8 A5 ; Exclusive OR accumulator with memory $A5C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $FF03.w,X		; 9E 03 FF ; Store zero to $FF03.w,X [Reads: X Index]
	adc $95CA.w,Y		; 79 CA 95 ; Add $95CA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $FE63.w		; AD 63 FE ; Load $FE63.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $A5C9.w,X		; 5D C9 A5 ; Exclusive OR accumulator with memory $A5C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $FF04.w,X		; DE 04 FF ; Decrement memory $FF04.w,X [Reads: X Index] [Flags: NZ]
	adc $DDCB.w,X		; 7D CB DD ; Add $DDCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $0C64.w		; AD 64 0C ; Load $0C64.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($7F.b)		; 52 7F ; Exclusive OR accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($8052.w)		; 6C 52 80 ; Jump indirect to ($8052.w) [Flow: jump]
	sty $7FA5.w		; 8C A5 7F ; Store Y register to $7FA5.w [Reads: Y Index]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora ($F9.b,S),Y		; 13 F9 ; OR accumulator (stack relative indirect indexed) ($F9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	jsr $3433.w		; 20 33 34 ; Jump to subroutine at $3433.w [Writes: Stack Pointer] [Flow: call]
	asl $3434.w,X		; 1E 34 34 ; Arithmetic shift left $3434.w,X [Reads: X Index] [Flags: NCZ]
	jsr $4871.w		; 20 71 48 ; Jump to subroutine at $4871.w [Writes: Stack Pointer] [Flow: call]
	jsr $FC71.w		; 20 71 FC ; Jump to subroutine at $FC71.w [Writes: Stack Pointer] [Flow: call]
	sbc $31.b,S		; E3 31 ; Subtract stack-relative $31.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	ora #$C005.w		; 09 05 C0 ; Logical OR #$C005.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $C005.w,Y		; 59 05 C0 ; Exclusive OR accumulator with memory $C005.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $0B00.w		; EE 00 0B ; Increment $0B00.w [Flags: NZ]
	inc $00.b,X		; F6 00 ; Increment memory $00.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $4524FF.l,X		; FF FF 24 45 ; Subtract with carry (long,X) $4524FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $28.b,S		; C3 28 ; Compare accumulator (stack relative) $28.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
.ACCU 16
	rep #$29		; C2 29
	bit #$38C3.w		; 89 C3 38 ; Test bits #$38C3.w with accumulator [Reads: Accumulator] [Flags: Z]
	.db $90, $C2		; 90 C2 ; Branch if carry clear to $90, $C2 [Flow: branch]
	bit $9F.b		; 24 9F ; Test bits $9F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cmp $50.b,S		; C3 50 ; Compare accumulator (stack relative) $50.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	eor $C3.b		; 45 C3 ; Exclusive OR $C3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($59.b,X)		; 41 59 ; Exclusive OR accumulator with memory ($59.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
.INDEX 16
	rep #$50		; C2 50
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rep #$41		; C2 41 ; Reset processor status bits #$41 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ldy $FCC3.w		; AC C3 FC ; Load $FCC3.w into Y register [Writes: Y Index] [Flags: NZ]
	sta $D8.b,S		; 83 D8 ; Store accumulator (stack relative) $D8.b,S [Reads: Stack Pointer, Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $5007.w,X		; 3C 07 50 ; Test bits $5007.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $5B07.w,X		; 3C 07 5B ; Test bits $5B07.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	.db $42, $68		; 42 68 ; Reserved instruction
	sbc $DA63.w,X		; FD 63 DA ; Subtract with carry $DA63.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $47.b,S		; 23 47 ; AND accumulator with stack relative $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc [$20.b]		; 67 20 ; Add with carry (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpy $67.b		; C4 67 ; Compare $67.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	jsr ($D98C.w,X)		; FC 8C D9 ; Jump to subroutine indirect indexed ($D98C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cpy $3008.w		; CC 08 30 ; Compare $3008.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $50, $07		; 50 07 ; Branch if overflow clear to $50, $07 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor ($07.b),Y		; 51 07 ; Exclusive OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora [$40.b]		; 07 40 ; OR accumulator with memory (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$D807.w		; A9 07 D8 ; Load #$D807.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $38.b,X		; B4 38 ; Load Y register $38.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $B4		; D0 B4 ; Branch if not equal to $D0, $B4 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $6DFB29.l,X		; FF 29 FB 6D ; Subtract with carry (long,X) $6DFB29.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $01.b,X		; B5 01 ; Load $01.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $02C5.w		; 6D C5 02 ; Add $02C5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $3317FF.l,X		; FF FF 17 33 ; Subtract with carry (long,X) $3317FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $4D.b		; C6 4D ; Decrement $4D.b [Reads: Direct Page] [Flags: NZ]
	and ($C6.b,S),Y		; 33 C6 ; AND accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$73.b],Y		; 17 73 ; OR accumulator with memory (long indexed) [$73.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $4D.b		; C6 4D ; Decrement $4D.b [Reads: Direct Page] [Flags: NZ]
	adc ($C6.b,S),Y		; 73 C6 ; Add with carry (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora [$B2.b],Y		; 17 B2 ; OR accumulator with memory (long indexed) [$B2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $4D.b		; C6 4D ; Decrement $4D.b [Reads: Direct Page] [Flags: NZ]
	lda ($C6.b)		; B2 C6 ; Load accumulator (indirect) ($C6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$9F.b],Y		; 97 9F ; Store accumulator (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index, Accumulator]
	dec $CD.b		; C6 CD ; Decrement $CD.b [Reads: Direct Page] [Flags: NZ]
	sta $DC97C6.l,X		; 9F C6 97 DC ; Store accumulator (long,X) $DC97C6.l,X [Reads: Accumulator, X Index]
	dec $CD.b		; C6 CD ; Decrement $CD.b [Reads: Direct Page] [Flags: NZ]
	jmp.w [$F0C6]		; DC C6 F0 ; Jump long indirect [$F0C6] [Flow: jump]
	sbc $FF40B2.l,X		; FF B2 40 FF ; Subtract with carry (long,X) $FF40B2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0800E1.l,X		; [PATTERN: Memory clearing operation] FF E1 00 08 ; Subtract with carry (long,X) $0800E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0876.w,X		; 1E 76 08 ; Arithmetic shift left $0876.w,X [Reads: X Index] [Flags: NCZ]
	stz $EC76.w,X		; 9E 76 EC ; Store zero to $EC76.w,X [Reads: X Index]
	asl $EC77.w,X		; 1E 77 EC ; Arithmetic shift left $EC77.w,X [Reads: X Index] [Flags: NCZ]
	stz $3177.w,X		; 9E 77 31 ; Store zero to $3177.w,X [Reads: X Index]
	and $545D.w		; 2D 5D 54 ; Logical AND $545D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $2888.w		; 2C 88 28 ; Test bits $2888.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	mvp $28,$88		; 44 88 28 ; Move block positive $28,$88 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor ($5D.b)		; 52 5D ; Exclusive OR accumulator with memory (indirect) ($5D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	bit #$AB48.w		; 89 48 AB ; Test bits #$AB48.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$B220.w		; 89 20 B2 ; Test bits #$B220.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$B258.w		; 89 58 B2 ; Test bits #$B258.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$AB2B.w		; 89 2B AB ; Test bits #$AB2B.w with accumulator [Reads: Accumulator] [Flags: Z]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $AB.b,S		; 43 AB ; Exclusive OR accumulator with stack relative $AB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor ($AB.b,S),Y		; 53 AB ; XOR accumulator (stack relative indirect indexed) ($AB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $BB.b,S		; 23 BB ; AND accumulator with stack relative $BB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $CB.b,S		; 23 CB ; AND accumulator with stack relative $CB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and ($C3.b,S),Y		; 33 C3 ; AND accumulator (stack relative indirect indexed) ($C3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp $FA.b,S		; C3 FA ; Compare accumulator (stack relative) $FA.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $DB.b,S		; 43 DB ; Exclusive OR accumulator with stack relative $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor ($DB.b,S),Y		; 53 DB ; XOR accumulator (stack relative indirect indexed) ($DB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	clv		; B8 ; Clear overflow flag [Flags: V]
	jsl $22CC38.l		; 22 38 CC 22 ; Jump to subroutine long $22CC38.l [Writes: Stack Pointer] [Flow: call]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and ($70.b,X)		; 21 70 ; Logical AND ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $B033.w,X		; 3E 33 B0 ; Rotate left $B033.w,X [Reads: X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sec		; 38 ; Set carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sec		; 38 ; Set carry flag [Flags: C]
	ldy $383C.w,X		; BC 3C 38 ; Load Y register $383C.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $14.b,S		; A3 14 ; Load accumulator (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $91C0.w,Y		; F9 C0 91 ; Subtract with carry $91C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE38.w		; 29 38 FE ; Logical AND #$FE38.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc ($39.b,X)		; E1 39 ; Subtract with carry ($39.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($70.b,X)		; A1 70 ; Load accumulator ($70.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $FFFF33.l,X		; BF 33 FF FF ; Load long $FFFF33.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	.db $62, $18, $82		; 62 18 82 ; Push effective relative address $62, $18, $82 [Writes: Stack Pointer]
	trb $FFFF.w		; 1C FF FF ; Test and reset bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	sbc ($0C.b,X)		; E1 0C ; Subtract with carry ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($C851.w,X)		; FC 51 C8 ; Jump to subroutine indirect indexed ($C851.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $1E.b		; 25 1E ; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $2C.b		; 14 2C ; Test and reset bits $2C.b [Reads: Accumulator] [Flags: Z]
	adc $14.b,S		; 63 14 ; Add with carry (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $5DFC63.l		; 4F 63 FC 5D ; Exclusive OR accumulator with memory (long) $5DFC63.l [Writes: Accumulator] [Flags: NZ]
	cmp #$DD24.w		; C9 24 DD ; Compare #$DD24.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $5C.b		; 04 5C ; Test and set bits $5C.b [Reads: Accumulator] [Flags: Z]
	bit $5D64.w		; 2C 64 5D ; Test bits $5D64.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor $282A64.l,X		; 5F 64 2A 28 ; Exclusive OR accumulator with memory (long,X) $282A64.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$39		; C2 39
	eor #$30C2.w		; 49 C2 30 ; Exclusive OR #$30C2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $6450C3.l		; 5C C3 50 64 ; Jump long to $6450C3.l [Flow: jump]
	cmp $29.b,S		; C3 29 ; Compare accumulator (stack relative) $29.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	bit #$38C2.w		; 89 C2 38 ; Test bits #$38C2.w with accumulator [Reads: Accumulator] [Flags: Z]
	ldy #$41C2.w		; A0 C2 41 ; Load #$41C2.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $28C3.w		; AC C3 28 ; Load $28C3.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$36		; C2 36
	cpy $20C3.w		; CC C3 20 ; Compare $20C3.w with Y register [Reads: Y Index] [Flags: NCZ]
	bit $FC67.w		; 2C 67 FC ; Test bits $FC67.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $82, $98, $20		; 82 98 20 ; Branch always long to $82, $98, $20 [Flow: branch]
	eor $D92467.l		; 4F 67 24 D9 ; Exclusive OR accumulator with memory (long) $D92467.l [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr ($998D.w,X)		; FC 8D 99 ; Jump to subroutine indirect indexed ($998D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $685F.w,Y		; 59 5F 68 ; Exclusive OR accumulator with memory $685F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$0729.w		; 29 29 07 ; Logical AND #$0729.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	bit $FD68.w		; 2C 68 FD ; Test bits $FD68.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $62, $9A, $38		; 62 9A 38 ; Push effective relative address $62, $9A, $38 [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora [$30.b]		; 07 30 ; OR accumulator with memory (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp $832807.l		; 5C 07 28 83 ; Jump long to $832807.l [Flow: jump]
	ora [$48.b]		; 07 48 ; OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$2807.w		; A9 07 28 ; Load #$2807.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($07.b,X)		; C1 07 ; Compare accumulator ($07.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	ora [$14.b]		; 07 14 ; OR accumulator with memory (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $22.b,X		; 35 22 ; Logical AND $22.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	trb $49.b		; 14 49 ; Test and reset bits $49.b [Reads: Accumulator] [Flags: Z]
	jsl $226D14.l		; 22 14 6D 22 ; Jump to subroutine long $226D14.l [Writes: Stack Pointer] [Flow: call]
	adc $53.b,S		; 63 53 ; Add with carry (stack relative) $53.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and ($70.b,X)		; 21 70 ; Logical AND ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($FA.b,S),Y		; 73 FA ; Add with carry (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	trb $D9.b		; 14 D9 ; Test and reset bits $D9.b [Reads: Accumulator] [Flags: Z]
	jsl $69D934.l		; 22 34 D9 69 ; Jump to subroutine long $69D934.l [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp ($FA.b,S),Y		; D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $5822.w,X		; 9D 22 58 ; Store accumulator to $5822.w,X [Reads: Accumulator, X Index]
	eor $5822.w,Y		; 59 22 58 ; Exclusive OR accumulator with memory $5822.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $22.b,X		; 35 22 ; Logical AND $22.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $B033.w,X		; 3E 33 B0 ; Rotate left $B033.w,X [Reads: X Index] [Flags: NCZ]
	ora ($05.b),Y		; 11 05 ; OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $38E1.w,X		; FE E1 38 ; Increment memory $38E1.w,X [Reads: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($70.b,X)		; A1 70 ; Load accumulator ($70.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $EE9833.l,X		; BF 33 98 EE ; Load long $EE9833.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$38A8.w		; C0 A8 38 ; Compare #$38A8.w with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $FF3929.l,X		; FF 29 39 FF ; Subtract with carry (long,X) $FF3929.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF142B.l,X		; FF 2B 14 FF ; Subtract with carry (long,X) $FF142B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $FA.b,X		; 16 FA ; Arithmetic shift left $FA.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $36, $82		; 62 36 82 ; Push effective relative address $62, $36, $82 [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	jsr $FF20.w		; 20 20 FF ; Jump to subroutine at $FF20.w [Writes: Stack Pointer] [Flow: call]
	sbc $2E0CE1.l,X		; FF E1 0C 2E ; Subtract with carry (long,X) $2E0CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $2069.w,X		; 1D 69 20 ; OR accumulator with memory $2069.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $64.b		; 14 64 ; Test and reset bits $64.b [Reads: Accumulator] [Flags: Z]
	jsl $69592E.l		; 22 2E 59 69 ; Jump to subroutine long $69592E.l [Writes: Stack Pointer] [Flow: call]
	jsr $2288.w		; 20 88 22 ; Jump to subroutine at $2288.w [Writes: Stack Pointer] [Flow: call]
	bit $2258.w		; 2C 58 22 ; Test bits $2258.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp $3869.w		; 4C 69 38 ; Jump to $3869.w [Flow: jump]
	jmp $3822.w		; 4C 22 38 ; Jump to $3822.w [Flow: jump]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	adc #$2838.w		; 69 38 28 ; Add #$2838.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $692844.l		; 22 44 28 69 ; Jump to subroutine long $692844.l [Writes: Stack Pointer] [Flow: call]
	mvp $22,$34		; 44 34 22 ; Move block positive $22,$34 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor ($35.b)		; 52 35 ; Exclusive OR accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$6444.w		; 69 44 64 ; Add #$6444.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $696444.l		; 22 44 64 69 ; Jump to subroutine long $696444.l [Writes: Stack Pointer] [Flow: call]
	mvp $22,$73		; 44 73 22 ; Move block positive $22,$73 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $50692B.l,X		; 5F 2B 69 50 ; Exclusive OR accumulator with memory (long,X) $50692B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jsl $69673B.l		; 22 3B 67 69 ; Jump to subroutine long $69673B.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $7C5C22.l,X		; 7F 22 5C 7C ; Add long $7C5C22.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $697C5C.l		; 22 5C 7C 69 ; Jump to subroutine long $697C5C.l [Writes: Stack Pointer] [Flow: call]
	mvp $22,$8B		; 44 8B 22 ; Move block positive $22,$8B [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $69,$8B		; 44 8B 69 ; Move block positive $69,$8B [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	bit $2294.w		; 2C 94 22 ; Test bits $2294.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	rol $6995.w		; 2E 95 69 ; Rotate left $6995.w [Flags: NCZ]
	bit $22C7.w		; 2C C7 22 ; Test bits $22C7.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jsr $22B8.w		; 20 B8 22 ; Jump to subroutine at $22B8.w [Writes: Stack Pointer] [Flow: call]
	and $97.b,S		; 23 97 ; AND accumulator with stack relative $97.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc #$D920.w		; 69 20 D9 ; Add #$D920.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$BB38.w		; 69 38 BB ; Add #$BB38.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $22D12E.l		; 22 2E D1 22 ; Jump to subroutine long $22D12E.l [Writes: Stack Pointer] [Flow: call]
	.db $50, $BB		; 50 BB ; Branch if overflow clear to $50, $BB [Flow: branch]
	adc #$D05C.w		; 69 5C D0 ; Add #$D05C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$DD22.w		; 69 22 DD ; Add #$DD22.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $22AE45.l		; 22 45 AE 22 ; Jump to subroutine long $22AE45.l [Writes: Stack Pointer] [Flow: call]
	.db $50, $94		; 50 94 ; Branch if overflow clear to $50, $94 [Flow: branch]
	jsl $69975C.l		; 22 5C 97 69 ; Jump to subroutine long $69975C.l [Writes: Stack Pointer] [Flow: call]
	jmp $3F69AF.l		; 5C AF 69 3F ; Jump long to $3F69AF.l [Flow: jump]
	and $5F1BFA.l		; 2F FA 1B 5F ; AND accumulator with memory (long) $5F1BFA.l [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora $F96A.w,Y		; 19 6A F9 ; OR accumulator with memory $F96A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor [$6B.b],Y		; 57 6B ; Exclusive OR accumulator with memory (long indexed) [$6B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc $83.b,S		; 63 83 ; Add with carry (stack relative) $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc $A7.b,S		; 63 A7 ; Add with carry (stack relative) $A7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and [$BF.b]		; 27 BF ; AND accumulator with memory (long) [$BF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cpy #$0591.w		; C0 91 05 ; Compare #$0591.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $C83829.l,X		; FF 29 38 C8 ; Subtract with carry (long,X) $C83829.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($70.b,X)		; A1 70 ; Load accumulator ($70.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $E1FE33.l,X		; BF 33 FE E1 ; Load long $E1FE33.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $21B8.w,Y		; 39 B8 21 ; AND accumulator with memory $21B8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $98		; 70 98 ; Branch if overflow set to $70, $98 [Flow: branch]
	rol $BC33.w,X		; 3E 33 BC ; Rotate left $BC33.w,X [Reads: X Index] [Flags: NCZ]
	bit $FF38.w,X		; 3C 38 FF ; Test bits $FF38.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $FA162A.l,X		; FF 2A 16 FA ; Subtract with carry (long,X) $FA162A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $82, $1C, $62		; 82 1C 62 ; Branch always long to $82, $1C, $62 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $EC76.w,X		; 1E 76 EC ; Arithmetic shift left $EC76.w,X [Reads: X Index] [Flags: NCZ]
	asl $0877.w,X		; 1E 77 08 ; Arithmetic shift left $0877.w,X [Reads: X Index] [Flags: NCZ]
	and $65.b,X		; 35 65 ; Logical AND $65.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and $66.b,X		; 35 66 ; Logical AND $66.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $692A.w,X		; 3D 2A 69 ; AND accumulator with memory $692A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2A.b,X)		; 41 2A ; Exclusive OR accumulator with memory ($2A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$4120.w		; 69 20 41 ; Add #$4120.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $22414C.l		; 22 4C 41 22 ; Jump to subroutine long $22414C.l [Writes: Stack Pointer] [Flow: call]
	and ($58.b),Y		; 31 58 ; AND accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $7021B8.l		; 22 B8 21 70 ; Jump to subroutine long $7021B8.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $D933.w,X		; 3E 33 D9 ; Rotate left $D933.w,X [Reads: X Index] [Flags: NCZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sbc $11B0.w,Y		; F9 B0 11 ; Subtract with carry $11B0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FE.b		; 05 FE ; Logical OR $FE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($38.b,X)		; E1 38 ; Subtract with carry ($38.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	.db $30, $90		; 30 90 ; Branch if minus to $30, $90 [Flow: branch]
	ora $48.b		; 05 48 ; Logical OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	.db $50, $90		; 50 90 ; Branch if overflow clear to $50, $90 [Flow: branch]
	ora $58.b		; 05 58 ; Logical OR $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	jsr $0590.w		; 20 90 05 ; Jump to subroutine at $0590.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	adc $68.b		; 65 68 ; Add $68.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ror $1C.b		; 66 1C ; Rotate right $1C.b [Reads: Direct Page] [Flags: NCZ]
	lda ($87.b),Y		; B1 87 ; Load accumulator ($87.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp $2C87B1.l		; 5C B1 87 2C ; Jump long to $2C87B1.l [Flow: jump]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $38BC.w		; 2C BC 38 ; Test bits $38BC.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jmp $38BC.w		; 4C BC 38 ; Jump to $38BC.w [Flow: jump]
	sec		; 38 ; Set carry flag [Flags: C]
	ldy #$3433.w		; A0 33 34 ; Load #$3433.w into Y register [Writes: Y Index] [Flags: NZ]
	lda ($71.b,X)		; A1 71 ; Load accumulator ($71.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($71.b,X)		; A1 71 ; Load accumulator ($71.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $B0, $34		; B0 34 ; Branch if carry set to $B0, $34 [Flow: branch]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $62, $38, $60		; 62 38 60 ; Push effective relative address $62, $38, $60 [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	jsr $6120.w		; 20 20 61 ; Jump to subroutine at $6120.w [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $00A9FF.l,X		; FF FF A9 00 ; Subtract with carry (long,X) $00A9FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	eor $80.b,S		; 43 80 ; Exclusive OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	brk $93.b		; 00 93 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	adc ($83.b,S),Y		; 73 83 ; Add with carry (stack relative indirect indexed) ($83.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	adc ($BB.b,S),Y		; 73 BB ; Add with carry (stack relative indirect indexed) ($BB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc ($83.b,X)		; E1 83 ; Subtract with carry ($83.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc ($BB.b,X)		; E1 BB ; Subtract with carry ($BB.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $61.b		; E5 61 ; Subtract $61.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($812E.w,X)		; FC 2E 81 ; Jump to subroutine indirect indexed ($812E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc $62.b		; E5 62 ; Subtract $62.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $83AE.w,X		; FD AE 83 ; Subtract with carry $83AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($A5.b)		; 92 A5 ; Store accumulator (indirect) ($A5.b) [Reads: Direct Page, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($A7.b)		; 92 A7 ; Store accumulator (indirect) ($A7.b) [Reads: Direct Page, Accumulator]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1CF2FF.l,X		; FF FF F2 1C ; Subtract with carry (long,X) $1CF2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($00A1.w,X)		; FC A1 00 ; Jump to subroutine indirect indexed ($00A1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	jsl $A9FC61.l		; 22 61 FC A9 ; Jump to subroutine long $A9FC61.l [Writes: Stack Pointer] [Flow: call]
	tsb $18.b		; 04 18 ; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	sta ($01.b)		; 92 01 ; Store accumulator (indirect) ($01.b) [Reads: Direct Page, Accumulator]
	jsr ($0029.w,X)		; FC 29 00 ; Jump to subroutine indirect indexed ($0029.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($012C.w,X)		; FC 2C 01 ; Jump to subroutine indirect indexed ($012C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cpy #$FD02.w		; C0 02 FD ; Compare #$FD02.w with Y register [Reads: Y Index] [Flags: NCZ]
	jmp ($5805.w)		; 6C 05 58 ; Jump indirect to ($5805.w) [Flow: jump]
	cmp ($61.b,S),Y		; D3 61 ; Compare accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sbc $816E.w,X		; FD 6E 81 ; Subtract with carry $816E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $836E.w,X		; FE 6E 83 ; Increment memory $836E.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($62.b,S),Y		; D3 62 ; Compare accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	inc $076C.w,X		; FE 6C 07 ; Increment memory $076C.w,X [Reads: X Index] [Flags: NZ]
	lda #$02C1.w		; A9 C1 02 ; Load #$02C1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $D2034C.l,X		; FF 4C 03 D2 ; Subtract with carry (long,X) $D2034C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($62.b)		; 72 62 ; Add with carry (indirect) ($62.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $920246.l,X		; FF 46 02 92 ; Subtract with carry (long,X) $920246.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	sta ($70.b,X)		; 81 70 ; Store accumulator ($70.b,X) [Reads: Direct Page, Accumulator, X Index]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$7004.w		; 09 04 70 ; Logical OR #$7004.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($01.b)		; 92 01 ; Store accumulator (indirect) ($01.b) [Reads: Direct Page, Accumulator]
	adc $22.b,S		; 63 22 ; Add with carry (stack relative) $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $FD, $89		; 62 FD 89 ; Push effective relative address $62, $FD, $89 [Writes: Stack Pointer]
	asl $FD.b		; 06 FD ; Arithmetic shift left $FD.b [Reads: Direct Page] [Flags: NCZ]
	sta ($02.b,X)		; 81 02 ; Store accumulator ($02.b,X) [Reads: Direct Page, Accumulator, X Index]
	jsr ($C859.w,X)		; FC 59 C8 ; Jump to subroutine indirect indexed ($C859.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and [$9F.b]		; 27 9F ; AND accumulator with memory (long) [$9F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,S		; 03 A4 ; OR accumulator with stack relative $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stz $FE03.w		; 9C 03 FE ; Store zero to $FE03.w
	lda $ACCC.w,Y		; B9 CC AC ; Load $ACCC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $B6FE63.l,X		; 7F 63 FE B6 ; Add long $B6FE63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $036C.w,X		; BC 6C 03 ; Load Y register $036C.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $C5CA16.l,X		; FF 16 CA C5 ; Subtract with carry (long,X) $C5CA16.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $FF64.w,X		; 7E 64 FF ; Rotate right $FF64.w,X [Reads: X Index] [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and [$B7.b]		; 27 B7 ; AND accumulator with memory (long) [$B7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $A4.b		; 04 A4 ; Test and set bits $A4.b [Reads: Accumulator] [Flags: Z]
	lda [$04.b],Y		; B7 04 ; Load accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($495B.w,X)		; FC 5B 49 ; Jump to subroutine indirect indexed ($495B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	trb $AC.b		; 14 AC ; Test and reset bits $AC.b [Reads: Accumulator] [Flags: Z]
	adc $64.b,S		; 63 64 ; Add with carry (stack relative) $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp $22.b		; C5 22 ; Compare $22.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp $22.b		; C5 22 ; Compare $22.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	stz $2298.w		; 9C 98 22 ; Store zero to $2298.w
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($9869.w)		; 6C 69 98 ; Jump indirect to ($9869.w) [Flow: jump]
	.db $80, $38		; 80 38 ; Branch always to $80, $38 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	stz $F9.b		; 64 F9 ; Store zero to $F9.b
	bit $98.b,X		; 34 98 ; Test bits $98.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	jsl $229854.l		; 22 54 98 22 ; Jump to subroutine long $229854.l [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and ($65.b)		; 32 65 ; AND accumulator with memory (indirect) ($65.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($66.b)		; 32 66 ; AND accumulator with memory (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $23.b,X		; 36 23 ; Rotate left $23.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol $52.b,X		; 36 52 ; Rotate left $52.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol $1D.b,X		; 36 1D ; Rotate left $1D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and $792337.l,X		; 3F 37 23 79 ; AND accumulator with memory (long,X) $792337.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $62.b,X		; 35 62 ; Logical AND $62.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $2363.w,Y		; 79 63 23 ; Add $2363.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rol $7D.b,X		; 36 7D ; Rotate left $7D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	bit $7F78.w		; 2C 78 7F ; Test bits $7F78.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	stz $78.b		; 64 78 ; Store zero to $78.b
	.db $80, $FC		; 80 FC ; Branch always to $80, $FC [Flow: branch]
	sbc ($39.b,X)		; E1 39 ; Subtract with carry ($39.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	inc $60B8.w,X		; FE B8 60 ; Increment memory $60B8.w,X [Reads: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $A8.b,S		; 23 A8 ; AND accumulator with stack relative $A8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $63.b		; C5 63 ; Compare $63.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp $9A.b		; C5 9A ; Compare $9A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp $B8.b		; C5 B8 ; Compare $B8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cmp $FE.b		; C5 FE ; Compare $FE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	and $7BF3.w,Y		; 39 F3 7B ; AND accumulator with memory $7BF3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $FB.b,X		; B4 FB ; Load Y register $FB.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sbc $F519.w,X		; FD 19 F5 ; Subtract with carry $F519.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $F932.w,Y		; 59 32 F9 ; Exclusive OR accumulator with memory $F932.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$C013.w		; 09 13 C0 ; Logical OR #$C013.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$C053.w		; 09 53 C0 ; Logical OR #$C053.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$6000.w		; E0 00 60 ; Compare #$6000.w with X register [Reads: X Index] [Flags: NCZ]
	adc ($13.b,S),Y		; 73 13 ; Add with carry (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$13B2.w		; C0 B2 13 ; Compare #$13B2.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$5273.w		; C0 73 52 ; Compare #$5273.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $C0, $AB		; 62 C0 AB ; Push effective relative address $62, $C0, $AB [Writes: Stack Pointer]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $9E17FF.l,X		; FF FF 17 9E ; Subtract with carry (long,X) $9E17FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $9E57.w,Y		; D9 57 9E ; Compare accumulator $9E57.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $9E97.w,Y		; D9 97 9E ; Compare accumulator $9E97.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $6EAE.w,Y		; D9 AE 6E ; Compare accumulator $6EAE.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $A11B.w,Y		; D9 1B A1 ; Compare accumulator $A11B.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp #$A15B.w		; C9 5B A1 ; Compare #$A15B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$A193.w		; C9 93 A1 ; Compare #$A193.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$72B1.w		; C9 B1 72 ; Compare #$72B1.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($0A.b),Y		; 71 0A ; Add with carry ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $04E1FF.l,X		; FF FF E1 04 ; Subtract with carry (long,X) $04E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0023.w,X)		; FC 23 00 ; Jump to subroutine indirect indexed ($0023.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	and ($01.b),Y		; 31 01 ; AND accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($0483.w,X)		; FC 83 04 ; Jump to subroutine indirect indexed ($0483.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr $6122.w		; 20 22 61 ; Jump to subroutine at $6122.w [Writes: Stack Pointer] [Flow: call]
	jsr ($0081.w,X)		; FC 81 00 ; Jump to subroutine indirect indexed ($0081.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($8124.w,X)		; FC 24 81 ; Jump to subroutine indirect indexed ($8124.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor #$FC02.w		; 49 02 FC ; Exclusive OR #$FC02.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $85.b		; 84 85 ; Store Y register to $85.b [Reads: Y Index]
	jsl $FC615B.l		; 22 5B 61 FC ; Jump to subroutine long $FC615B.l [Writes: Stack Pointer] [Flow: call]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tsb $18.b		; 04 18 ; Test and set bits $18.b [Reads: Accumulator] [Flags: Z]
	lda ($01.b),Y		; B1 01 ; Load accumulator ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($002B.w,X)		; FC 2B 00 ; Jump to subroutine indirect indexed ($002B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($812C.w,X)		; FC 2C 81 ; Jump to subroutine indirect indexed ($812C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$FC02.w		; C9 02 FC ; Compare #$FC02.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sty $2085.w		; 8C 85 20 ; Store Y register to $2085.w [Reads: Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $2081.w		; 8E 81 20 ; Store X register to $2081.w [Reads: X Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $69.b		; 65 69 ; Add $69.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ror $FC.b		; 66 FC ; Rotate right $FC.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($38.b,X)		; E1 38 ; Subtract with carry ($38.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $2CC823.l		; 2F 23 C8 2C ; AND accumulator with memory (long) $2CC823.l [Writes: Accumulator] [Flags: NZ]
	adc $C8.b,S		; 63 C8 ; Add with carry (stack relative) $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	bit $63.b,X		; 34 63 ; Test bits $63.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	mvn $C8,$63		; 54 63 C8 ; Move block negative $C8,$63 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp $2FC863.l		; 5C 63 C8 2F ; Jump long to $2FC863.l [Flow: jump]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $C8A0.w		; 2C A0 C8 ; Test bits $C8A0.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $A0.b,X		; 34 A0 ; Test bits $A0.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	mvn $C8,$A0		; 54 A0 C8 ; Move block negative $C8,$A0 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp $2FC8A0.l		; 5C A0 C8 2F ; Jump long to $2FC8A0.l [Flow: jump]
	ora $2F3F.w,X		; 1D 3F 2F ; OR accumulator with memory $2F3F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $79.b,S		; 23 79 ; AND accumulator with stack relative $79.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $2F7963.l		; 2F 63 79 2F ; AND accumulator with memory (long) $2F7963.l [Writes: Accumulator] [Flags: NZ]
	lda $79.b,S		; A3 79 ; Load accumulator (stack relative) $79.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $79E1.w		; 2C E1 79 ; Test bits $79E1.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $6B40E9.l		; 2F E9 40 6B ; AND accumulator with memory (long) $6B40E9.l [Writes: Accumulator] [Flags: NZ]
	and $7A.b,S		; 23 7A ; AND accumulator with stack relative $7A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $7A.b,S		; 63 7A ; Add with carry (stack relative) $7A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7A.b,S		; A3 7A ; Load accumulator (stack relative) $7A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc ($7A.b,X)		; E1 7A ; Subtract with carry ($7A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $41,$61		; 44 61 41 ; Move block positive $41,$61 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor [$67.b]		; 47 67 ; Exclusive OR accumulator with memory (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	mvp $42,$A5		; 44 A5 42 ; Move block positive $42,$A5 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor ($67.b,S),Y		; 53 67 ; XOR accumulator (stack relative indirect indexed) ($67.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $EB39.w,Y		; 79 39 EB ; Add $EB39.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $1059.w,X		; FE 59 10 ; Increment memory $1059.w,X [Reads: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc [$FA.b]		; 67 FA ; Add with carry (long) [$FA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc $974BFA.l		; 6F FA 4B 97 ; Add with carry (long) $974BFA.l [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sta $8160FA.l,X		; 9F FA 60 81 ; Store accumulator (long,X) $8160FA.l,X [Reads: Accumulator, X Index]
	inc $1101.w,X		; FE 01 11 ; Increment memory $1101.w,X [Reads: X Index] [Flags: NZ]
	cpy #$5B01.w		; C0 01 5B ; Compare #$5B01.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$9101.w		; C0 01 91 ; Compare #$9101.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D901.w		; C0 01 D9 ; Compare #$D901.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $2E.b		; 02 2E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FFFF1C.l		; 22 1C FF FF ; Jump to subroutine long $FFFF1C.l [Writes: Stack Pointer] [Flow: call]
	sbc ($10.b),Y		; F1 10 ; Subtract with carry ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $0D.b		; 24 0D ; Test bits $0D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $50, $0E		; 50 0E ; Branch if overflow clear to $50, $0E [Flow: branch]
	ora #$612B.w		; 09 2B 61 ; Logical OR #$612B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc $0241.w,X		; FE 41 02 ; Increment memory $0241.w,X [Reads: X Index] [Flags: NZ]
	.db $90, $21		; 90 21 ; Branch if carry clear to $90, $21 [Flow: branch]
	.db $62, $FE, $42		; 62 FE 42 ; Push effective relative address $62, $FE, $42 [Writes: Stack Pointer]
	stx $A2.b		; 86 A2 ; Store X register to $A2.b [Reads: X Index]
	and #$FF01.w		; 29 01 FF ; Logical AND #$FF01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$9882.w		; A2 82 98 ; Load #$9882.w into X register [Writes: X Index] [Flags: NZ]
	and $FE70.w,Y		; 39 70 FE ; AND accumulator with memory $FE70.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $07.b		; 45 07 ; Exclusive OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx #$0251.w		; A2 51 02 ; Load #$0251.w into X register [Writes: X Index] [Flags: NZ]
	sbc $9003A5.l,X		; FF A5 03 90 ; Subtract with carry (long,X) $9003A5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $8346.w,X		; FE 46 83 ; Increment memory $8346.w,X [Reads: X Index] [Flags: NZ]
	sbc $C8B1.w,X		; FD B1 C8 ; Subtract with carry $C8B1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $632D.w		; 6D 2D 63 ; Add $632D.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $C9B5.w,X		; FD B5 C9 ; Subtract with carry $C9B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($031C.w,X)		; 7C 1C 03 ; Jump indirect indexed to ($031C.w,X) [Reads: X Index] [Flow: jump]
	inc $CA11.w,X		; FE 11 CA ; Increment memory $CA11.w,X [Reads: X Index] [Flags: NZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	stz $FE.b		; 64 FE ; Store zero to $FE.b
	ora $CB.b,X		; 15 CB ; OR accumulator with memory $CB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($045C.w,X)		; 7C 5C 04 ; Jump indirect indexed to ($045C.w,X) [Reads: X Index] [Flow: jump]
	sta $34.b,X		; 95 34 ; Store accumulator to $34.b,X [Reads: Accumulator, X Index]
	adc #$3AA8.w		; 69 A8 3A ; Add #$3AA8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc ($9D.b),Y		; 71 9D ; Add with carry ($9D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $42, $F9		; 42 F9 ; Reserved instruction
	clv		; B8 ; Clear overflow flag [Flags: V]
	and #$B805.w		; 29 05 B8 ; Logical AND #$B805.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($06.b),Y		; 51 06 ; Exclusive OR accumulator with memory ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$552C.w		; C0 2C 55 ; Compare #$552C.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$5654.w		; C0 54 56 ; Compare #$5654.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor ($38.b,X)		; 41 38 ; Exclusive OR accumulator with memory ($38.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $1E6B.w,X		; 5D 6B 1E ; Exclusive OR accumulator with memory $1E6B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$5C68.w		; 69 68 5C ; Add #$5C68.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$2142.w		; 69 42 21 ; Add #$2142.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $2942.w,Y		; F9 42 29 ; Subtract with carry $2942.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3142.w,Y		; F9 42 31 ; Subtract with carry $3142.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2148.w,Y		; F9 48 21 ; Subtract with carry $2148.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($48.b,S),Y		; 33 48 ; AND accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and #$7833.w		; 29 33 78 ; Logical AND #$7833.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	sbc $830E.w,X		; FD 0E 83 ; Subtract with carry $830E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $870D.w,X		; FD 0D 87 ; Subtract with carry $870D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $DB		; 50 DB ; Branch if overflow clear to $50, $DB [Flow: branch]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $FD85.w		; AD 85 FD ; Load $FD85.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $FC81.w		; AE 81 FC ; Load $FC81.w into X register [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and $B6.b,X		; 35 B6 ; Logical AND $B6.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jmp $AC6C.w		; 4C 6C AC ; Jump to $AC6C.w [Flow: jump]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lda $7CC8.w,Y		; B9 C8 7C ; Load $7CC8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $FE03.w		; 9C 03 FE ; Store zero to $FE03.w
	ora $84CA.w,Y		; 19 CA 84 ; OR accumulator with memory $84CA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $1CFE64.l		; AF 64 FE 1C ; Load long $1CFE64.l into accumulator [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	rol $CD.b,X		; 36 CD ; Rotate left $CD.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	stz $24C9.w		; 9C C9 24 ; Store zero to $24C9.w
	cpy $63.b		; C4 63 ; Compare $63.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	jsl $2169B0.l		; 22 B0 69 21 ; Jump to subroutine long $2169B0.l [Writes: Stack Pointer] [Flow: call]
	cmp $4022.w,X		; DD 22 40 ; Compare accumulator $4022.w,X [Reads: X Index] [Flags: NCZ]
	ldy $69.b		; A4 69 ; Load $69.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $22B0.w		; 20 B0 22 ; Jump to subroutine at $22B0.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	jsl $389C28.l		; 22 28 9C 38 ; Jump to subroutine long $389C28.l [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $B0, $22		; B0 22 ; Branch if carry set to $B0, $22 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda ($22.b),Y		; B1 22 ; Load accumulator ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	stz $6369.w,X		; 9E 69 63 ; Store zero to $6369.w,X [Reads: X Index]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $DD.b		; 84 DD ; Store Y register to $DD.b [Reads: Y Index]
	jsl $699D97.l		; 22 97 9D 69 ; Jump to subroutine long $699D97.l [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $98.b		; 06 98 ; Arithmetic shift left $98.b [Reads: Direct Page] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lsr $E4C8.w,X		; 5E C8 E4 ; Logical shift right $E4C8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $D1B9.w,X		; 5E B9 D1 ; Logical shift right $D1B9.w,X [Reads: X Index] [Flags: NCZ]
	inc $CF5D.w,X		; FE 5D CF ; Increment memory $CF5D.w,X [Reads: X Index] [Flags: NZ]
	inc $C033.w,X		; FE 33 C0 ; Increment memory $C033.w,X [Reads: X Index] [Flags: NZ]
	cmp $69.b		; C5 69 ; Compare $69.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpy #$78C5.w		; C0 C5 78 ; Compare #$78C5.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda #$78C5.w		; A9 C5 78 ; Load #$78C5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $78.b		; C5 78 ; Compare $78.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $50, $C5		; 50 C5 ; Branch if overflow clear to $50, $C5 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $733B.w,X		; FD 3B 73 ; Subtract with carry $733B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$CC.b],Y		; 77 CC ; Add with carry (long indexed) [$CC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jsr ($75CB.w,X)		; FC CB 75 ; Jump to subroutine indirect indexed ($75CB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($A0.b),Y		; 11 A0 ; OR accumulator with memory ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $A1.b		; 65 A1 ; Add $A1.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda $09.b,S		; A3 09 ; Load accumulator (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$09D9.w		; C0 D9 09 ; Compare #$09D9.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$61A3.w		; C0 A3 61 ; Compare #$61A3.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$61D9.w		; C0 D9 61 ; Compare #$61D9.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$E850.w		; C0 50 E8 ; Compare #$E850.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$EA60.w		; C0 60 EA ; Compare #$EA60.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $D0, $9C		; D0 9C ; Branch if not equal to $D0, $9C [Flow: branch]
	lsr $FFFF.w,X		; 5E FF FF ; Logical shift right $FFFF.w,X [Reads: X Index] [Flags: NCZ]
	and [$B6.b]		; 27 B6 ; AND accumulator with memory (long) [$B6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $B666.w,Y		; D9 66 B6 ; Compare accumulator $B666.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $9D6E.w,Y		; D9 6E 9D ; Compare accumulator $9D6E.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $1F6E.w,Y		; D9 6E 1F ; Compare accumulator $1F6E.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $5C6E.w,Y		; D9 6E 5C ; Compare accumulator $5C6E.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $2370.w,Y		; D9 70 23 ; Compare accumulator $2370.w,Y [Reads: Y Index] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	lda $62C9.w,Y		; B9 C9 62 ; Load $62C9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $71C9.w,Y		; B9 C9 71 ; Load $71C9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($C9.b,X)		; A1 C9 ; Load accumulator ($C9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $2E.b		; 02 2E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $2E.b,S		; 63 2E ; Add with carry (stack relative) $2E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $1C83.w		; 1C 83 1C ; Test and reset bits $1C83.w [Reads: Accumulator] [Flags: Z]
	jsl $02A000.l		; 22 00 A0 02 ; Jump to subroutine long $02A000.l [Writes: Stack Pointer] [Flow: call]
	sbc $1CE1FF.l,X		; FF FF E1 1C ; Subtract with carry (long,X) $1CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0023.w,X)		; FC 23 00 ; Jump to subroutine indirect indexed ($0023.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $0130.w,Y		; 19 30 01 ; OR accumulator with memory $0130.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($04E3.w,X)		; FC E3 04 ; Jump to subroutine indirect indexed ($04E3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	jsl $E1FC61.l		; 22 61 FC E1 ; Jump to subroutine long $E1FC61.l [Writes: Stack Pointer] [Flow: call]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $B883.w		; EE 83 B8 ; Increment $B883.w [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FE, $EC		; 62 FE EC ; Push effective relative address $62, $FE, $EC [Writes: Stack Pointer]
	sta [$C9.b]		; 87 C9 ; Store accumulator (long) [$C9.b] [Reads: Direct Page, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $FC83.w		; AC 83 FC ; Load $FC83.w into Y register [Writes: Y Index] [Flags: NZ]
	eor $48.b,X		; 55 48 ; Exclusive OR accumulator with memory $48.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	bit $57.b		; 24 57 ; Test bits $57.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $4C.b,X		; 15 4C ; OR accumulator with memory $4C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $2C.b		; 45 2C ; Exclusive OR $2C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora ($C8.b),Y		; 11 C8 ; OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	mvn $03,$1C		; 54 1C 03 ; Move block negative $03,$1C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $CA71.w,X		; FD 71 CA ; Subtract with carry $CA71.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $FD642D.l		; 5C 2D 64 FD ; Jump long to $FD642D.l [Flow: jump]
	adc ($CE.b,S),Y		; 73 CE ; Add with carry (stack relative indirect indexed) ($CE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $033C.w		; 6D 3C 03 ; Add $033C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	inc $CC53.w,X		; FE 53 CC ; Increment memory $CC53.w,X [Reads: X Index] [Flags: NZ]
	sty $2D.b,X		; 94 2D ; Store Y register $2D.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $1F.b		; A4 1F ; Load $1F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($CA.b),Y		; 11 CA ; OR accumulator with memory ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $2C.b		; C5 2C ; Compare $2C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	stz $FF.b		; 64 FF ; Store zero to $FF.b
	ora $4E.b,X		; 15 4E ; OR accumulator with memory $4E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pei ($54.b)		; D4 54 ; Push effective indirect address ($54.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $4A.b,X		; 75 4A ; Add $4A.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp.w [$6464]		; DC 64 64 ; Jump long indirect [$6464] [Flow: jump]
	sbc $B5CB76.l,X		; FF 76 CB B5 ; Subtract with carry (long,X) $B5CB76.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($FE04.w)		; 6C 04 FE ; Jump indirect to ($FE04.w) [Flow: jump]
	stx $CF.b,Y		; 96 CF ; Store X register $CF.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldy $7D.b		; A4 7D ; Load $7D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	stz $FE.b		; 64 FE ; Store zero to $FE.b
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $8CB5.w		; CE B5 8C ; Decrement $8CB5.w [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	jmp.w [$649C]		; DC 9C 64 ; Jump long indirect [$649C] [Flow: jump]
	sbc $BC4B7A.l,X		; FF 7A 4B BC ; Subtract with carry (long,X) $BC4B7A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$04.b]		; A7 04 ; Load accumulator (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $4FBA.w,X		; FE BA 4F ; Increment memory $4FBA.w,X [Reads: X Index] [Flags: NZ]
	lda $64B4.w		; AD B4 64 ; Load $64B4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc $CBBD.w,X		; FE BD CB ; Increment memory $CBBD.w,X [Reads: X Index] [Flags: NZ]
	lsr $04DF.w		; 4E DF 04 ; Logical shift right $04DF.w [Flags: NCZ]
	jsr ($C9FD.w,X)		; FC FD C9 ; Jump to subroutine indirect indexed ($C9FD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $63B4.w,X		; 3D B4 63 ; AND accumulator with memory $63B4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($4DFA.w,X)		; FC FA 4D ; Jump to subroutine indirect indexed ($4DFA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $A6.b		; 24 A6 ; Test bits $A6.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	eor #$9C14.w		; 49 14 9C ; Exclusive OR #$9C14.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $8F.b		; 24 8F ; Test bits $8F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpy $7D44.w		; CC 44 7D ; Compare $7D44.w with Y register [Reads: Y Index] [Flags: NCZ]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	asl $CD.b,X		; 16 CD ; Arithmetic shift left $CD.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $6F.b		; 24 6F ; Test bits $6F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	lsr $C9.b,X		; 56 C9 ; Logical shift right $C9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	trb $64.b		; 14 64 ; Test and reset bits $64.b [Reads: Accumulator] [Flags: Z]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $4F.b,X		; 75 4F ; Add $4F.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($0457.w)		; 6C 57 04 ; Jump indirect to ($0457.w) [Flow: jump]
	inc $4D35.w,X		; FE 35 4D ; Increment memory $4D35.w,X [Reads: X Index] [Flags: NZ]
	eor $6467.w,X		; 5D 67 64 ; Exclusive OR accumulator with memory $6467.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $4E7A.w,X		; FD 7A 4E ; Subtract with carry $4E7A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($03A7.w)		; 6C A7 03 ; Jump indirect to ($03A7.w) [Flow: jump]
	inc $4C3A.w,X		; FE 3A 4C ; Increment memory $4C3A.w,X [Reads: X Index] [Flags: NZ]
	sta $6367.w		; 8D 67 63 ; Store accumulator to $6367.w [Reads: Accumulator]
	and $60.b,S		; 23 60 ; AND accumulator with stack relative $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $50, $2B		; 50 2B ; Branch if overflow clear to $50, $2B [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc $48.b,S		; 63 48 ; Add with carry (stack relative) $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $50, $72		; 50 72 ; Branch if overflow clear to $50, $72 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and $98.b,S		; 23 98 ; AND accumulator with stack relative $98.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $50, $A3		; 50 A3 ; Branch if overflow clear to $50, $A3 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C8.b,S		; A3 C8 ; Load accumulator (stack relative) $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	sta ($D0.b),Y		; 91 D0 ; Store accumulator ($D0.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda ($C8.b),Y		; B1 C8 ; Load accumulator ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$C89B.w		; A0 9B C8 ; Load #$C89B.w into Y register [Writes: Y Index] [Flags: NZ]
	lda ($98.b)		; B2 98 ; Load accumulator (indirect) ($98.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($2B.b,X)		; A1 2B ; Load accumulator ($2B.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $60.b,S		; A3 60 ; Load accumulator (stack relative) $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $50, $29		; 50 29 ; Branch if overflow clear to $50, $29 [Flow: branch]
	and $792C53.l,X		; 3F 53 2C 79 ; AND accumulator with memory (long,X) $792C53.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $204662.l		; 22 62 46 20 ; Jump to subroutine long $204662.l [Writes: Stack Pointer] [Flow: call]
	adc $79.b		; 65 79 ; Add $79.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsl $52446E.l		; 22 6E 44 52 ; Jump to subroutine long $52446E.l [Writes: Stack Pointer] [Flow: call]
	adc ($79.b),Y		; 71 79 ; Add with carry ($79.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $20469A.l		; 22 9A 46 20 ; Jump to subroutine long $20469A.l [Writes: Stack Pointer] [Flow: call]
	sta $2279.w,X		; 9D 79 22 ; Store accumulator to $2279.w,X [Reads: Accumulator, X Index]
	ldy $44.b		; A4 44 ; Load $44.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	adc $DF4B.w,Y		; 79 4B DF ; Add $DF4B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	bit #$40DF.w		; 89 DF 40 ; Test bits #$40DF.w with accumulator [Reads: Accumulator] [Flags: Z]
	lda $AE7AA8.l		; AF A8 7A AE ; Load long $AE7AA8.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $43.b		; A6 43 ; Load $43.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	jmp.w [$7A9D]		; DC 9D 7A ; Jump long indirect [$7A9D] [Flow: jump]
	lda [$98.b]		; A7 98 ; Load accumulator (long) [$98.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $A6.b		; 45 A6 ; Exclusive OR $A6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($7A.b),Y		; 71 7A ; Add with carry ($7A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$6C.b]		; A7 6C ; Load accumulator (long) [$6C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $DC.b,S		; 43 DC ; Exclusive OR accumulator with stack relative $DC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $7A.b		; 65 7A ; Add $7A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $60.b		; C5 60 ; Compare $60.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $C7.b		; 45 C7 ; Exclusive OR $C7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $A17A.w		; 2C 7A A1 ; Test bits $A17A.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $792EA1.l,X		; 3F A1 2E 79 ; AND accumulator with memory (long,X) $792EA1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $5D424B.l,X		; 5F 4B 42 5D ; Exclusive OR accumulator with memory (long,X) $5D424B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $5F7A.w		; 2E 7A 5F ; Rotate left $5F7A.w [Flags: NCZ]
	eor $41.b,X		; 55 41 ; Exclusive OR accumulator with memory $41.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $5D7A5B.l,X		; 5F 5B 7A 5D ; Exclusive OR accumulator with memory (long,X) $5D7A5B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $5F7A.w,Y		; 99 7A 5F ; Store accumulator to $5F7A.w,Y [Reads: Y Index, Accumulator]
	lda ($42.b),Y		; B1 42 ; Load accumulator ($42.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	adc $9999.w,Y		; 79 99 99 ; Add $9999.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $5014.w,Y		; 79 14 50 ; Add $5014.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $225034.l		; 22 34 50 22 ; Jump to subroutine long $225034.l [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rol $1469.w,X		; 3E 69 14 ; Rotate left $1469.w,X [Reads: X Index] [Flags: NCZ]
	jmp ($1422.w,X)		; 7C 22 14 ; Jump indirect indexed to ($1422.w,X) [Reads: X Index] [Flow: jump]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsl $22B414.l		; 22 14 B4 22 ; Jump to subroutine long $22B414.l [Writes: Stack Pointer] [Flow: call]
	and $69C6.w,Y		; 39 C6 69 ; AND accumulator with memory $69C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $69BC.w,X		; BC BC 69 ; Load Y register $69BC.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$22B4]		; DC B4 22 ; Jump long indirect [$22B4] [Flow: jump]
	jmp.w [$227C]		; DC 7C 22 ; Jump long indirect [$227C] [Flow: jump]
	jmp.w [$2288]		; DC 88 22 ; Jump long indirect [$2288] [Flow: jump]
	dec $1E.b,X		; D6 1E ; Decrement memory $1E.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	adc #$52D4.w		; 69 D4 52 ; Add #$52D4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $691C6D.l		; 22 6D 1C 69 ; Jump to subroutine long $691C6D.l [Writes: Stack Pointer] [Flow: call]
	sta ($1C.b),Y		; 91 1C ; Store accumulator ($1C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	adc #$8317.w		; 69 17 83 ; Add #$8317.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and [$7F.b],Y		; 37 7F ; AND accumulator with memory (long indexed) [$7F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $2F83FA.l		; 2F FA 83 2F ; AND accumulator with memory (long) $2F83FA.l [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $E7FA7F.l,X		; BF 7F FA E7 ; Load long $E7FA7F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $FA.b,S		; 83 FA ; Store accumulator (stack relative) $FA.b,S [Reads: Stack Pointer, Accumulator]
	ldy $10.b,X		; B4 10 ; Load Y register $10.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	dec A		; [PATTERN: Memory clearing operation] 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jmp $3BEC.w		; 4C EC 3B ; Jump to $3BEC.w [Flow: jump]
	stz $3BEC.w		; 9C EC 3B ; Store zero to $3BEC.w
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $76.b		; 64 76 ; Store zero to $76.b
	cpx $7764.w		; EC 64 77 ; Compare $7764.w with X register [Reads: X Index] [Flags: NCZ]
	cpx $7794.w		; EC 94 77 ; Compare $7794.w with X register [Reads: X Index] [Flags: NCZ]
	jmp ($3898.w)		; 6C 98 38 ; Jump indirect to ($3898.w) [Flow: jump]
	sty $98.b		; 84 98 ; Store Y register to $98.b [Reads: Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $C2.b,S		; 63 C2 ; Add with carry (stack relative) $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	inc $C28B.w,X		; FE 8B C2 ; Increment memory $C28B.w,X [Reads: X Index] [Flags: NZ]
	inc $6C75.w,X		; FE 75 6C ; Increment memory $6C75.w,X [Reads: X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jsr ($7295.w,X)		; FC 95 72 ; Jump to subroutine indirect indexed ($7295.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $72DA.w,X		; FD DA 72 ; Subtract with carry $72DA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $A7.b		; 25 A7 ; Logical AND $A7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $A7C5.w,Y		; F9 C5 A7 ; Subtract with carry $A7C5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DF61.w,Y		; F9 61 DF ; Subtract with carry $DF61.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $1052.w,X		; FE 52 10 ; Increment memory $1052.w,X [Reads: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldx #$F810.w		; A2 10 F8 ; Load #$F810.w into X register [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor $0AFE.w,Y		; 59 FE 0A ; Exclusive OR accumulator with memory $0AFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $FFC0.w,Y		; D9 C0 FF ; Compare accumulator $FFC0.w,Y [Reads: Y Index] [Flags: NCZ]
	sbc $FF142B.l,X		; FF 2B 14 FF ; Subtract with carry (long,X) $FF142B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $2E.b,S		; 63 2E ; Add with carry (stack relative) $2E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $1C		; 10 1C ; Branch if plus to $10, $1C [Flow: branch]
	cop $1C.b		; 02 1C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $008300.l		; 22 00 83 00 ; Jump to subroutine long $008300.l [Writes: Stack Pointer] [Flow: call]
	lda ($02.b,X)		; A1 02 ; Load accumulator ($02.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $10F1FF.l,X		; FF FF F1 10 ; Subtract with carry (long,X) $10F1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($8022.w,X)		; FC 22 80 ; Jump to subroutine indirect indexed ($8022.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and $70.b,X		; 35 70 ; Logical AND $70.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$FD01.w		; 29 01 FD ; Logical AND #$FD01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $82, $84, $60		; 82 84 60 ; Branch always long to $82, $84, $60 [Flow: branch]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $0081.w,X		; FD 81 00 ; Subtract with carry $0081.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0125.w,X)		; FC 25 01 ; Jump to subroutine indirect indexed ($0125.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor ($02.b),Y		; 51 02 ; Exclusive OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $0585.w,X		; FD 85 05 ; Subtract with carry $0585.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8186.w,X		; FD 86 81 ; Subtract with carry $8186.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0F10.w		; E0 10 0F ; Compare #$0F10.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$1064.w		; E0 64 10 ; Compare #$1064.w with X register [Reads: X Index] [Flags: NCZ]
	sbc #$622B.w		; E9 2B 62 ; Subtract #$622B.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc $C8B1.w,X		; FD B1 C8 ; Subtract with carry $C8B1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($031C.w,X)		; 7C 1C 03 ; Jump indirect indexed to ($031C.w,X) [Reads: X Index] [Flow: jump]
	inc $CA11.w,X		; FE 11 CA ; Increment memory $CA11.w,X [Reads: X Index] [Flags: NZ]
	adc $632D.w		; 6D 2D 63 ; Add $632D.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $C9B5.w,X		; FD B5 C9 ; Subtract with carry $C9B5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($045C.w,X)		; 7C 5C 04 ; Jump indirect indexed to ($045C.w,X) [Reads: X Index] [Flow: jump]
	inc $CB15.w,X		; FE 15 CB ; Increment memory $CB15.w,X [Reads: X Index] [Flags: NZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	stz $FF.b		; 64 FF ; Store zero to $FF.b
	and #$C802.w		; 29 02 C8 ; Logical AND #$C802.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $D8862A.l,X		; FF 2A 86 D8 ; Subtract with carry (long,X) $D8862A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $82, $FD, $AE		; 82 FD AE ; Branch always long to $82, $FD, $AE [Flow: branch]
	sta ($FD.b,X)		; 81 FD ; Store accumulator ($FD.b,X) [Reads: Direct Page, Accumulator, X Index]
	lda $5085.w		; AD 85 50 ; Load $5085.w into accumulator [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FD87.w		; 0D 87 FD ; Logical OR $FD87.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $FC83.w		; 0E 83 FC ; Arithmetic shift left $FC83.w [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and $AE.b,X		; 35 AE ; Logical AND $AE.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	cpy $B9FD.w		; CC FD B9 ; Compare $B9FD.w with Y register [Reads: Y Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp ($039C.w,X)		; 7C 9C 03 ; Jump indirect indexed to ($039C.w,X) [Reads: X Index] [Flow: jump]
	inc $CA19.w,X		; FE 19 CA ; Increment memory $CA19.w,X [Reads: X Index] [Flags: NZ]
	sty $AF.b		; [PATTERN: Memory clearing operation] 84 AF ; Store Y register to $AF.b [Reads: Y Index]
	stz $FE.b		; 64 FE ; Store zero to $FE.b
	trb $36CB.w		; 1C CB 36 ; Test and reset bits $36CB.w [Reads: Accumulator] [Flags: Z]
	cmp $FC04.w		; CD 04 FC ; Compare $FC04.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	stz $24C9.w		; 9C C9 24 ; Store zero to $24C9.w
	lda $2863.w,X		; BD 63 28 ; Load $2863.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$2805.w		; 29 05 28 ; Logical AND #$2805.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($06.b),Y		; 51 06 ; Exclusive OR accumulator with memory ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $2C		; 30 2C ; Branch if minus to $30, $2C [Flow: branch]
	eor $30.b,X		; 55 30 ; Exclusive OR accumulator with memory $30.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	mvn $5D,$56		; 54 56 5D ; Move block negative $5D,$56 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $42, $F9		; 42 F9 ; Reserved instruction
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($43.b,S),Y		; 33 43 ; AND accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	mvn $71,$3A		; 54 3A 71 ; Move block negative $71,$3A [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc #$6934.w		; 69 34 69 ; Add #$6934.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta [$1E.b],Y		; 97 1E ; Store accumulator (long indexed) [$1E.b],Y [Reads: Direct Page, Y Index, Accumulator]
	adc #$5C94.w		; 69 94 5C ; Add #$5C94.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$43A0.w		; 69 A0 43 ; Add #$43A0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ldy #$B849.w		; A0 49 B8 ; Load #$B849.w into Y register [Writes: Y Index] [Flags: NZ]
	cpy #$3848.w		; C0 48 38 ; Compare #$3848.w with Y register [Reads: Y Index] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $30, $88		; 30 88 ; Branch if minus to $30, $88 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	jsl $107892.l		; 22 92 78 10 ; Jump to subroutine long $107892.l [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsl $2069AA.l		; 22 AA 69 20 ; Jump to subroutine long $2069AA.l [Writes: Stack Pointer] [Flow: call]
	cmp $2322.w,X		; DD 22 23 ; Compare accumulator $2322.w,X [Reads: X Index] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsl $699C68.l		; 22 68 9C 69 ; Jump to subroutine long $699C68.l [Writes: Stack Pointer] [Flow: call]
	sta [$9D.b],Y		; 97 9D ; Store accumulator (long indexed) [$9D.b],Y [Reads: Direct Page, Y Index, Accumulator]
	adc #$DD84.w		; 69 84 DD ; Add #$DD84.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $FAA363.l		; 22 63 A3 FA ; Jump to subroutine long $FAA363.l [Writes: Stack Pointer] [Flow: call]
	sta $B8B2.w,Y		; 99 B2 B8 ; Store accumulator to $B8B2.w,Y [Reads: Y Index, Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $B7.b,S		; E3 B7 ; Subtract stack-relative $B7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($BB.b,S),Y		; B3 BB ; Load accumulator (stack relative indirect indexed) ($BB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc [$E7.b]		; E7 E7 ; Subtract with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $FED1.w,Y		; B9 D1 FE ; Load $FED1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $78.b		; C5 78 ; Compare $78.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $50, $C5		; 50 C5 ; Branch if overflow clear to $50, $C5 [Flow: branch]
	eor $FECF.w,X		; 5D CF FE ; Exclusive OR accumulator with memory $FECF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($B8.b,S),Y		; 33 B8 ; AND accumulator (stack relative indirect indexed) ($B8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $33.b		; C5 33 ; Compare $33.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpy #$78C5.w		; C0 C5 78 ; Compare #$78C5.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda #$69C5.w		; A9 C5 69 ; Load #$69C5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cmp $69.b		; C5 69 ; Compare $69.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpy #$7BC5.w		; C0 C5 7B ; Compare #$7BC5.w with Y register [Reads: Y Index] [Flags: NCZ]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $B41B.w,X		; FD 1B B4 ; Subtract with carry $B41B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $B45B.w,X		; FD 5B B4 ; Subtract with carry $B45B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $343C.w,X		; FD 3C 34 ; Subtract with carry $343C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $B43C.w,X		; FD 3C B4 ; Subtract with carry $B43C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$CC.b],Y		; 37 CC ; AND accumulator with memory (long indexed) [$CC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	adc [$CC.b],Y		; 77 CC ; Add with carry (long indexed) [$CC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$41C0.w		; 09 C0 41 ; Logical OR #$41C0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0BC0.w		; 09 C0 0B ; Logical OR #$0BC0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($C0.b,X)		; 61 C0 ; Add with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($61.b,X)		; 41 61 ; Exclusive OR accumulator with memory ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$11E4.w		; C0 E4 11 ; Compare #$11E4.w with Y register [Reads: Y Index] [Flags: NCZ]
	ldx #$75E4.w		; A2 E4 75 ; Load #$75E4.w into X register [Writes: X Index] [Flags: NZ]
	lda $D9.b,S		; A3 D9 ; Load accumulator (stack relative) $D9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit #$50C0.w		; 89 C0 50 ; Test bits #$50C0.w with accumulator [Reads: Accumulator] [Flags: Z]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpy #$EA60.w		; C0 60 EA ; Compare #$EA60.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $1F6EFF.l,X		; FF FF 6E 1F ; Subtract with carry (long,X) $1F6EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $5C6E.w,Y		; D9 6E 5C ; Compare accumulator $5C6E.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $AE27.w,Y		; D9 27 AE ; Compare accumulator $AE27.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $AE66.w,Y		; D9 66 AE ; Compare accumulator $AE66.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $9C6E.w,Y		; D9 6E 9C ; Compare accumulator $9C6E.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $2370.w,Y		; D9 70 23 ; Compare accumulator $2370.w,Y [Reads: Y Index] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	lda ($C9.b),Y		; B1 C9 ; Load accumulator ($C9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$A171.w		; C9 71 A1 ; Compare #$A171.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$B162.w		; C9 62 B1 ; Compare #$B162.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C862.w		; C9 62 C8 ; Compare #$C862.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc $1C.b,S		; 63 1C ; Add with carry (stack relative) $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl L000000.l		; 22 00 80 00 ; Jump to subroutine long L000000.l [Writes: Stack Pointer] [Flow: call]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	ldy #$FF02.w		; A0 02 FF ; Load #$FF02.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $FC1CE1.l,X		; FF E1 1C FC ; Subtract with carry (long,X) $FC1CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $355880.l		; 22 80 58 35 ; Jump to subroutine long $355880.l [Writes: Stack Pointer] [Flow: call]
	.db $70, $1A		; 70 1A ; Branch if overflow set to $70, $1A [Flow: branch]
	and #$FD01.w		; 29 01 FD ; Logical AND #$FD01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $82, $84, $60		; 82 84 60 ; Branch always long to $82, $84, $60 [Flow: branch]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $0081.w,X		; FD 81 00 ; Subtract with carry $0081.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0241.w,X		; FE 41 02 ; Increment memory $0241.w,X [Reads: X Index] [Flags: NZ]
	.db $90, $21		; 90 21 ; Branch if carry clear to $90, $21 [Flow: branch]
	.db $62, $FE, $42		; 62 FE 42 ; Push effective relative address $62, $FE, $42 [Writes: Stack Pointer]
	stx $A2.b		; 86 A2 ; Store X register to $A2.b [Reads: X Index]
	and #$FF01.w		; 29 01 FF ; Logical AND #$FF01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$FC82.w		; A2 82 FC ; Load #$FC82.w into X register [Writes: X Index] [Flags: NZ]
	and $01.b		; 25 01 ; Logical AND $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor ($02.b),Y		; 51 02 ; Exclusive OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $0585.w,X		; FD 85 05 ; Subtract with carry $0585.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit #$1A04.w		; 89 04 1A ; Test bits #$1A04.w with accumulator [Reads: Accumulator] [Flags: Z]
	sta ($01.b),Y		; 91 01 ; Store accumulator ($01.b),Y [Reads: Direct Page, Y Index, Accumulator]
	jsr ($0029.w,X)		; FC 29 00 ; Jump to subroutine indirect indexed ($0029.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $830E.w,X		; FD 0E 83 ; Subtract with carry $830E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $870D.w,X		; FD 0D 87 ; Subtract with carry $870D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $DB		; 50 DB ; Branch if overflow clear to $50, $DB [Flow: branch]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $FD85.w		; AD 85 FD ; Load $FD85.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $FF81.w		; AE 81 FF ; Load $FF81.w into X register [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $82, $A2, $A9		; 82 A2 A9 ; Branch always long to $82, $A2, $A9 [Flow: branch]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stx $92.b		; 86 92 ; Store X register to $92.b [Reads: X Index]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0745.w,X		; FE 45 07 ; Increment memory $0745.w,X [Reads: X Index] [Flags: NZ]
	ldx #$0251.w		; A2 51 02 ; Load #$0251.w into X register [Writes: X Index] [Flags: NZ]
	sbc $FD03A5.l,X		; FF A5 03 FD ; Subtract with carry (long,X) $FD03A5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($C8.b),Y		; B1 C8 ; Load accumulator ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($031C.w,X)		; 7C 1C 03 ; Jump indirect indexed to ($031C.w,X) [Reads: X Index] [Flow: jump]
	inc $CA11.w,X		; FE 11 CA ; Increment memory $CA11.w,X [Reads: X Index] [Flags: NZ]
	adc $FD632F.l		; 6F 2F 63 FD ; Add with carry (long) $FD632F.l [Writes: Accumulator] [Flags: NCVZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	cpy $AE35.w		; CC 35 AE ; Compare $AE35.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $BD.b		; 24 BD ; Test bits $BD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	stz $36C9.w		; [PATTERN: Memory clearing operation] 9C C9 36 ; Store zero to $36C9.w
	cmp $FE04.w		; CD 04 FE ; Compare $FE04.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	trb $84CB.w		; 1C CB 84 ; Test and reset bits $84CB.w [Reads: Accumulator] [Flags: Z]
	lda $2F8764.l		; AF 64 87 2F ; Load long $2F8764.l into accumulator [Writes: Accumulator] [Flags: NZ]
	stz $28.b		; 64 28 ; Store zero to $28.b
	and #$2805.w		; 29 05 28 ; Logical AND #$2805.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($06.b),Y		; 51 06 ; Exclusive OR accumulator with memory ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $2C		; 30 2C ; Branch if minus to $30, $2C [Flow: branch]
	eor $30.b,X		; 55 30 ; Exclusive OR accumulator with memory $30.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	mvn $68,$56		; 54 56 68 ; Move block negative $68,$56 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	adc ($54.b),Y		; 71 54 ; Add with carry ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	adc ($5D.b),Y		; 71 5D ; Add with carry ($5D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $42, $F9		; 42 F9 ; Reserved instruction
	clv		; B8 ; Clear overflow flag [Flags: V]
	and #$B805.w		; 29 05 B8 ; Logical AND #$B805.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($06.b),Y		; 51 06 ; Exclusive OR accumulator with memory ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$552C.w		; C0 2C 55 ; Compare #$552C.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$5654.w		; C0 54 56 ; Compare #$5654.w with Y register [Reads: Y Index] [Flags: NCZ]
	sta $BBFA43.l,X		; 9F 43 FA BB ; Store accumulator (long,X) $BBFA43.l,X [Reads: Accumulator, X Index]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$DEC8.w		; C0 C8 DE ; Compare #$DEC8.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpx $D8.b		; E4 D8 ; Compare $D8.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	dec $E4A8.w,X		; DE A8 E4 ; Decrement memory $E4A8.w,X [Reads: X Index] [Flags: NZ]
	dec $3BC0.w,X		; DE C0 3B ; Decrement memory $3BC0.w,X [Reads: X Index] [Flags: NZ]
	sta ($FC.b,S),Y		; 93 FC ; Store accumulator (stack relative indirect indexed) ($FC.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc #$2338.w		; E9 38 23 ; Subtract #$2338.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda #$2222.w		; A9 22 22 ; Load #$2222.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	adc #$DD20.w		; 69 20 DD ; Add #$DD20.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $22DD84.l		; 22 84 DD 22 ; Jump to subroutine long $22DD84.l [Writes: Stack Pointer] [Flow: call]
	sty $D0.b,X		; 94 D0 ; Store Y register $D0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	adc #$EB88.w		; 69 88 EB ; Add #$EB88.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ldx #$33C8.w		; A2 C8 33 ; Load #$33C8.w into X register [Writes: X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($C0.b,S),Y		; 33 C0 ; AND accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $70, $B8		; 70 B8 ; Branch if overflow set to $70, $B8 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $70, $C0		; 70 C0 ; Branch if overflow set to $70, $C0 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($BB.b,S),Y		; 33 BB ; AND accumulator (stack relative indirect indexed) ($BB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $70.b		; 46 70 ; Logical shift right $70.b [Reads: Direct Page] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lsr $7B.b		; 46 7B ; Logical shift right $7B.b [Reads: Direct Page] [Flags: NCZ]
	and $6F7B79.l		; 2F 79 7B 6F ; AND accumulator with memory (long) $6F7B79.l [Writes: Accumulator] [Flags: NZ]
	adc $AE78.w,Y		; 79 78 AE ; Add $AE78.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $2978.w,Y		; 79 78 29 ; Add $2978.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $7A2F87.l,X		; 3F 87 2F 7A ; AND accumulator with memory (long,X) $7A2F87.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$6F.b]		; 87 6F ; Store accumulator (long) [$6F.b] [Reads: Direct Page, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sta $AF.b		; 85 AF ; Store accumulator to $AF.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	and ($CF.b,S),Y		; 33 CF ; AND accumulator (stack relative indirect indexed) ($CF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $70, $CF		; 70 CF ; Branch if overflow set to $70, $CF [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $30, $BF		; 30 BF ; Branch if minus to $30, $BF [Flow: branch]
	adc $CF5D.w,Y		; 79 5D CF ; Add $CF5D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $107A.w,X		; FE 7A 10 ; Increment memory $107A.w,X [Reads: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $CF.b,X		; 35 CF ; Logical AND $CF.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $CF75.w,Y		; F9 75 CF ; Subtract with carry $CF75.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $090B.w,Y		; F9 0B 09 ; Subtract with carry $090B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$0941.w		; C0 41 09 ; Compare #$0941.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$09A3.w		; C0 A3 09 ; Compare #$09A3.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$09D9.w		; C0 D9 09 ; Compare #$09D9.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$620B.w		; C0 0B 62 ; Compare #$620B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$6241.w		; C0 41 62 ; Compare #$6241.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$63A3.w		; C0 A3 63 ; Compare #$63A3.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$98A3.w		; C0 A3 98 ; Compare #$98A3.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$63D9.w		; C0 D9 63 ; Compare #$63D9.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$98D9.w		; C0 D9 98 ; Compare #$98D9.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$E850.w		; C0 50 E8 ; Compare #$E850.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$EA60.w		; C0 60 EA ; Compare #$EA60.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $142BFF.l,X		; FF FF 2B 14 ; Subtract with carry (long,X) $142BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $830063.l,X		; FF 63 00 83 ; Subtract with carry (long,X) $830063.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FD1C82.l,X		; FF 82 1C FD ; Subtract with carry (long,X) $FD1C82.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $23FD61.l		; 22 61 FD 23 ; Jump to subroutine long $23FD61.l [Writes: Stack Pointer] [Flow: call]
	tsb $40.b		; 04 40 ; Test and set bits $40.b [Reads: Accumulator] [Flags: Z]
	and ($01.b),Y		; 31 01 ; AND accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($00C3.w,X)		; FC C3 00 ; Jump to subroutine indirect indexed ($00C3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $30, $41		; 30 41 ; Branch if minus to $30, $41 [Flow: branch]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $81.b		; C4 81 ; Compare $81.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor #$FD02.w		; 49 02 FD ; Exclusive OR #$FD02.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $85.b		; 24 85 ; Test bits $85.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor #$615B.w		; 49 5B 61 ; Exclusive OR #$615B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $0429.w,X		; FD 29 04 ; Subtract with carry $0429.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sta ($01.b)		; 92 01 ; Store accumulator (indirect) ($01.b) [Reads: Direct Page, Accumulator]
	jsr ($00A9.w,X)		; FC A9 00 ; Jump to subroutine indirect indexed ($00A9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $C8A0.w,Y		; 39 A0 C8 ; AND accumulator with memory $C8A0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($81AA.w,X)		; FC AA 81 ; Jump to subroutine indirect indexed ($81AA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $5881.w		; 2C 81 58 ; Test bits $5881.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $6885.w		; AC 85 68 ; Load $6885.w into Y register [Writes: Y Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $FD81.w		; AE 81 FD ; Load $FD81.w into X register [Writes: X Index] [Flags: NZ]
	inc $7883.w		; EE 83 78 ; Increment $7883.w [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FD, $EC		; 62 FD EC ; Push effective relative address $62, $FD, $EC [Writes: Stack Pointer]
	sta [$88.b]		; 87 88 ; Store accumulator (long) [$88.b] [Reads: Direct Page, Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($9883.w)		; 6C 83 98 ; Jump indirect to ($9883.w) [Flow: jump]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	.db $62, $99, $A0		; 62 99 A0 ; Push effective relative address $62, $99, $A0 [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inc $876A.w,X		; FE 6A 87 ; Increment memory $876A.w,X [Reads: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	nop		; EA ; No operation
	sta $B8.b,S		; 83 B8 ; Store accumulator (stack relative) $B8.b,S [Reads: Stack Pointer, Accumulator]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inc $02E9.w,X		; FE E9 02 ; Increment memory $02E9.w,X [Reads: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sta ($01.b)		; 92 01 ; Store accumulator (indirect) ($01.b) [Reads: Direct Page, Accumulator]
	inc $0669.w,X		; FE 69 06 ; Increment memory $0669.w,X [Reads: X Index] [Flags: NZ]
	sta $625B.w,Y		; 99 5B 62 ; Store accumulator to $625B.w,Y [Reads: Y Index, Accumulator]
	inc $8764.w,X		; FE 64 87 ; Increment memory $8764.w,X [Reads: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor #$FE02.w		; 49 02 FE ; Exclusive OR #$FE02.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $83.b		; C4 83 ; Compare $83.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $B0, $41		; B0 41 ; Branch if carry set to $B0, $41 [Flow: branch]
	.db $62, $FE, $C3		; 62 FE C3 ; Push effective relative address $62, $FE, $C3 [Writes: Stack Pointer]
	cop $A8.b		; 02 A8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($01.b),Y		; 31 01 ; AND accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $0663.w,X		; FE 63 06 ; Increment memory $0663.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $61FE62.l		; 22 62 FE 61 ; Jump to subroutine long $61FE62.l [Writes: Stack Pointer] [Flow: call]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $65.b		; 65 65 ; Add $65.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $66.b		; 65 66 ; Add $66.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	and $C8.b,S		; 23 C8 ; AND accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	adc $C8.b,S		; 63 C8 ; Add with carry (stack relative) $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor [$1F.b],Y		; 57 1F ; Exclusive OR accumulator with memory (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $792357.l,X		; 3F 57 23 79 ; AND accumulator with memory (long,X) $792357.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$62.b],Y		; 57 62 ; Exclusive OR accumulator with memory (long indexed) [$62.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $9E35.w,Y		; 79 35 9E ; Add $9E35.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $34.b		; 46 34 ; Logical shift right $34.b [Reads: Direct Page] [Flags: NCZ]
	lda ($79.b,X)		; A1 79 ; Load accumulator ($79.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $AA.b,X		; 35 AA ; Logical AND $AA.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	mvp $AE,$55		; 44 55 AE ; Move block positive $AE,$55 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $CB57.w,Y		; 79 57 CB ; Add $CB57.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sta $7AAE.w,Y		; 99 AE 7A ; Store accumulator to $7AAE.w,Y [Reads: Y Index, Accumulator]
	sta $43AA.w,Y		; 99 AA 43 ; Store accumulator to $43AA.w,Y [Reads: Y Index, Accumulator]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda ($7A.b,X)		; A1 7A ; Load accumulator ($7A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $459E.w,Y		; 99 9E 45 ; Store accumulator to $459E.w,Y [Reads: Y Index, Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	and $7A.b,S		; 23 7A ; AND accumulator with stack relative $7A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $62, $7A, $59		; 62 7A 59 ; Push effective relative address $62, $7A, $59 [Writes: Stack Pointer]
	wai		; CB ; Wait for interrupt
	inc $CB89.w,X		; FE 89 CB ; Increment memory $CB89.w,X [Reads: X Index] [Flags: NZ]
	inc $1061.w,X		; FE 61 10 ; Increment memory $1061.w,X [Reads: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta ($10.b,X)		; 81 10 ; Store accumulator ($10.b,X) [Reads: Direct Page, Accumulator, X Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	bit $A43C.w,X		; 3C 3C A4 ; Test bits $A43C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ldy $3C.b		; A4 3C ; Load $3C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	adc ($FE.b),Y		; 71 FE ; Add with carry ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $34E7.w,X		; FD E7 34 ; Subtract with carry $34E7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($39E9.w,X)		; FC E9 39 ; Jump to subroutine indirect indexed ($39E9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc [$CF.b],Y		; 77 CF ; Add with carry (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc [$D7.b],Y		; 77 D7 ; Add with carry (long indexed) [$D7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc [$DF.b],Y		; 77 DF ; Add with carry (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc [$E7.b],Y		; 77 E7 ; Add with carry (long indexed) [$E7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy $809C.w,X		; BC 9C 80 ; Load Y register $809C.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $32.b		; 02 32 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$5A0B.w		; C0 0B 5A ; Compare #$5A0B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$8A09.w		; C0 09 8A ; Compare #$8A09.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$BB0B.w		; C0 0B BB ; Compare #$BB0B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D949.w		; C0 49 D9 ; Compare #$D949.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$8829.w		; C0 29 88 ; Compare #$8829.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$32		; C2 32
	cpy #$5AAB.w		; C0 AB 5A ; Compare #$5AAB.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$8AC9.w		; C0 C9 8A ; Compare #$8AC9.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$BBAB.w		; C0 AB BB ; Compare #$BBAB.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D989.w		; C0 89 D9 ; Compare #$D989.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$00E8.w		; C0 E8 00 ; Compare #$00E8.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0088.w		; A9 88 00 ; Load #$0088.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc $10E1FF.l,X		; FF FF E1 10 ; Subtract with carry (long,X) $10E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0081.w,X)		; FC 81 00 ; Jump to subroutine indirect indexed ($0081.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $FC6121.l		; 22 21 61 FC ; Jump to subroutine long $FC6121.l [Writes: Stack Pointer] [Flow: call]
	stx $81.b		; 86 81 ; Store X register to $81.b [Reads: X Index]
	sbc $8346.w,X		; FD 46 83 ; Subtract with carry $8346.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $53		; 50 53 ; Branch if overflow clear to $50, $53 [Flow: branch]
	.db $62, $FD, $44		; 62 FD 44 ; Push effective relative address $62, $FD, $44 [Writes: Stack Pointer]
	ora [$62.b]		; 07 62 ; OR accumulator with memory (long) [$62.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $05.b		; 84 05 ; Store Y register to $05.b [Reads: Y Index]
	ldy #$6153.w		; A0 53 61 ; Load #$6153.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $8186.w,X		; FE 86 81 ; Increment memory $8186.w,X [Reads: X Index] [Flags: NZ]
	sbc $D28346.l,X		; FF 46 83 D2 ; Subtract with carry (long,X) $D28346.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FC0241.l,X		; FF 41 02 FC ; Subtract with carry (long,X) $FC0241.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($C8.b),Y		; B1 C8 ; Load accumulator ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $BC031F.l,X		; 3F 1F 03 BC ; AND accumulator with memory (long,X) $BC031F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $FF03.w		; 1C 03 FF ; Test and reset bits $FF03.w [Reads: Accumulator] [Flags: Z]
	ora ($CA.b),Y		; 11 CA ; OR accumulator with memory ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $632D.w		; 2D 2D 63 ; Logical AND $632D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($C9B5.w,X)		; FC B5 C9 ; Jump to subroutine indirect indexed ($C9B5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $045C.w,X		; 3C 5C 04 ; Test bits $045C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $CB15.w,X		; FD 15 CB ; Subtract with carry $CB15.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $64,$46		; 44 46 64 ; Move block positive $64,$46 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $4F13.w,X		; FD 13 4F ; Subtract with carry $4F13.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $36.b,X		; 56 36 ; Logical shift right $36.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	lda ($4D.b,S),Y		; B3 4D ; Load accumulator (stack relative indirect indexed) ($4D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $6346.w		; AC 46 63 ; Load $6346.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $C9B5.w,X		; FE B5 C9 ; Increment memory $C9B5.w,X [Reads: X Index] [Flags: NZ]
	ldy $045C.w,X		; BC 5C 04 ; Load Y register $045C.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $C5CB15.l,X		; FF 15 CB C5 ; Subtract with carry (long,X) $C5CB15.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FC64.w		; 2D 64 FC ; Logical AND $FC64.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$2200.w		; 89 00 22 ; Test bits #$2200.w with accumulator [Reads: Accumulator] [Flags: Z]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($818E.w,X)		; FC 8E 81 ; Jump to subroutine indirect indexed ($818E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $0249.w,X		; FD 49 02 ; Subtract with carry $0249.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $A3		; 50 A3 ; Branch if overflow clear to $50, $A3 [Flow: branch]
	.db $62, $FD, $4B		; 62 FD 4B ; Push effective relative address $62, $FD, $4B [Writes: Stack Pointer]
	stx $62.b		; 86 62 ; Store X register to $62.b [Reads: X Index]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $A0.b		; 84 A0 ; Store Y register to $A0.b [Reads: Y Index]
	lda $61.b,S		; A3 61 ; Load accumulator (stack relative) $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $0089.w,X		; FE 89 00 ; Increment memory $0089.w,X [Reads: X Index] [Flags: NZ]
	sbc $D20249.l,X		; FF 49 02 D2 ; Subtract with carry (long,X) $D20249.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FC834E.l,X		; FF 4E 83 FC ; Subtract with carry (long,X) $FC834E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $2DC8.w,Y		; B9 C8 2D ; Load $2DC8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $FC63.w		; AD 63 FC ; Load $FC63.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $3FC9.w,X		; BD C9 3F ; Load $3FC9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $DCBC04.l,X		; DF 04 BC DC ; Compare accumulator (long,X) $DCBC04.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	ora $C5CB.w,X		; 1D CB C5 ; OR accumulator with memory $C5CB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $FF64.w		; AD 64 FF ; Load $FF64.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $BCCA.w,Y		; 19 CA BC ; OR accumulator with memory $BCCA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $FE03.w		; 9C 03 FE ; Store zero to $FE03.w
	lda $ACC8.w,Y		; B9 C8 AC ; Load $ACC8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $FE63.w		; AE 63 FE ; Load $FE63.w into X register [Writes: X Index] [Flags: NZ]
	ldy $564C.w,X		; BC 4C 56 ; Load Y register $564C.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	dec $03.b		; C6 03 ; Decrement $03.b [Reads: Direct Page] [Flags: NZ]
	sbc $4E1C.w,X		; FD 1C 4E ; Subtract with carry $4E1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $64,$AE		; 44 AE 64 ; Move block positive $64,$AE [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $CA19.w,X		; FD 19 CA ; Subtract with carry $CA19.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $039C.w,X		; 3C 9C 03 ; Test bits $039C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($C8.b)		; 32 C8 ; AND accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and ($C8.b)		; 32 C8 ; AND accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $3F2B7B.l,X		; 3F 7B 2B 3F ; AND accumulator with memory (long,X) $3F2B7B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and #$3A3F.w		; 29 3F 3A ; Logical AND #$3A3F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $5D3879.l		; 2F 79 38 5D ; AND accumulator with memory (long) $5D3879.l [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lsr $38.b		; 46 38 ; Logical shift right $38.b [Reads: Direct Page] [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	eor [$37.b]		; 47 37 ; Exclusive OR accumulator with memory (long) [$37.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($86.b,X)		; 41 86 ; Exclusive OR accumulator with memory ($86.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and [$41.b],Y		; 37 41 ; AND accumulator with memory (long indexed) [$41.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $5DB8.w,Y		; 79 B8 5D ; Add $5DB8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dec $2F.b		; C6 2F ; Decrement $2F.b [Reads: Direct Page] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	lda #$3A3F.w		; A9 3F 3A ; Load #$3A3F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $DF3B79.l		; AF 79 3B DF ; Load long $DF3B79.l into accumulator [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $DDB840.l,X		; DF 40 B8 DD ; Compare accumulator (long,X) $DDB840.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dec $AF.b		; C6 AF ; Decrement $AF.b [Reads: Direct Page] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda #$BA3F.w		; A9 3F BA ; Load #$BA3F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $4779.w		; AC 79 47 ; Load $4779.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp ($42.b,S),Y		; D3 42 ; Compare accumulator (stack relative indirect indexed) ($42.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	stx $D3.b		; 86 D3 ; Store X register to $D3.b [Reads: X Index]
	.db $42, $46		; 42 46 ; Reserved instruction
	ldy $D47A.w		; AC 7A D4 ; Load $D47A.w into Y register [Writes: Y Index] [Flags: NZ]
	bit $D477.w		; 2C 77 D4 ; Test bits $D477.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cpy $3977.w		; CC 77 39 ; Compare $3977.w with Y register [Reads: Y Index] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $2840.w,Y		; F9 40 28 ; Subtract with carry $2840.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $2BC3.w,X		; 5E C3 2B ; Logical shift right $2BC3.w,X [Reads: X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $FE.b,S		; 23 FE ; AND accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$6000.w		; E0 00 60 ; Compare #$6000.w with X register [Reads: X Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $52.b,S		; 63 52 ; Add with carry (stack relative) $52.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$8A63.w		; C0 63 8A ; Compare #$8A63.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cop $90.b		; 02 90 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B0.b		; 02 B0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1814E1.l,X		; FF E1 14 18 ; Subtract with carry (long,X) $1814E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	trb $55.b		; 14 55 ; Test and reset bits $55.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
	rol $18FE.w,X		; 3E FE 18 ; Rotate left $18FE.w,X [Reads: X Index] [Flags: NCZ]
	and ($FE.b,X)		; 21 FE ; Logical AND ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $7F3C.w		; 0C 3C 7F ; Test and set bits $7F3C.w [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $8124.w,X		; FE 24 81 ; Increment memory $8124.w,X [Reads: X Index] [Flags: NZ]
	inc $8364.w,X		; FE 64 83 ; Increment memory $8364.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FE, $62		; 62 FE 62 ; Push effective relative address $62, $FE, $62 [Writes: Stack Pointer]
	sta [$FE.b]		; 87 FE ; Store accumulator (long) [$FE.b] [Reads: Direct Page, Accumulator]
	ldx #$A883.w		; A2 83 A8 ; Load #$A883.w into X register [Writes: X Index] [Flags: NZ]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $02A1.w,X		; FE A1 02 ; Increment memory $02A1.w,X [Reads: X Index] [Flags: NZ]
	sbc $C10001.l,X		; FF 01 00 C1 ; Subtract with carry (long,X) $C10001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $B88405.l,X		; FF 05 84 B8 ; Subtract with carry (long,X) $B88405.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FE01.w,Y		; 59 01 FE ; Exclusive OR accumulator with memory $FE01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $80.b		; A5 80 ; Load $80.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $81A6.w,X		; FE A6 81 ; Increment memory $81A6.w,X [Reads: X Index] [Flags: NZ]
	sbc $D98366.l,X		; FF 66 83 D9 ; Subtract with carry (long,X) $D98366.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FF, $62		; 62 FF 62 ; Push effective relative address $62, $FF, $62 [Writes: Stack Pointer]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator]
	ldx #$FC83.w		; A2 83 FC ; Load #$FC83.w into X register [Writes: X Index] [Flags: NZ]
	bit #$2100.w		; 89 00 21 ; Test bits #$2100.w with accumulator [Reads: Accumulator] [Flags: Z]
	lda $61.b,S		; A3 61 ; Load accumulator (stack relative) $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($818D.w,X)		; FC 8D 81 ; Jump to subroutine indirect indexed ($818D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($DB.b),Y		; 31 DB ; AND accumulator with memory ($DB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $FD85.w		; AD 85 FD ; Load $FD85.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $FE81.w		; AE 81 FE ; Load $FE81.w into X register [Writes: X Index] [Flags: NZ]
	rol $FE83.w		; 2E 83 FE ; Rotate left $FE83.w [Flags: NCZ]
	and $9A87.w		; 2D 87 9A ; Logical AND $9A87.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $FD83.w		; AD 83 FD ; Load $FD83.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $5502.w,Y		; 59 02 55 ; Exclusive OR accumulator with memory $5502.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$FD62.w		; A0 62 FD ; Load #$FD62.w into Y register [Writes: Y Index] [Flags: NZ]
	jmp $C36506.l		; 5C 06 65 C3 ; Jump long to $C36506.l [Flow: jump]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jmp ($9D04.w,X)		; 7C 04 9D ; Jump indirect indexed to ($9D04.w,X) [Reads: X Index] [Flow: jump]
	ldy #$FE61.w		; A0 61 FE ; Load #$FE61.w into Y register [Writes: Y Index] [Flags: NZ]
	adc $2F00.w,Y		; 79 00 2F ; Add $2F00.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $D32FFA.l,X		; 9F FA 2F D3 ; Store accumulator (long,X) $D32FFA.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp $A806.w,Y		; D9 06 A8 ; Compare accumulator $A806.w,Y [Reads: Y Index] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	asl $BB.b		; 06 BB ; Arithmetic shift left $BB.b [Reads: Direct Page] [Flags: NCZ]
	cmp [$FA.b],Y		; D7 FA ; Compare accumulator (long indexed) [$FA.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cpx $B4.b		; E4 B4 ; Compare $B4.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp #$FEB9.w		; C9 B9 FE ; Compare #$FEB9.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $CC5BC8.l,X		; 9F C8 5B CC ; Store accumulator (long,X) $CC5BC8.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $C8CC.w,Y		; 99 CC C8 ; Store accumulator to $C8CC.w,Y [Reads: Y Index, Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	stz $48C8.w,X		; 9E C8 48 ; Store zero to $48C8.w,X [Reads: X Index]
	sta $4B3F.w,X		; 9D 3F 4B ; Store accumulator to $4B3F.w,X [Reads: Accumulator, X Index]
	lda ($79.b,X)		; A1 79 ; Load accumulator ($79.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $B740.w,Y		; D9 40 B7 ; Compare accumulator $B740.w,Y [Reads: Y Index] [Flags: NCZ]
	lda ($7A.b,X)		; A1 7A ; Load accumulator ($7A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sta $AA3F.w,X		; 9D 3F AA ; Store accumulator to $AA3F.w,X [Reads: Accumulator, X Index]
	ldx #$5779.w		; A2 79 57 ; Load #$5779.w into X register [Writes: X Index] [Flags: NZ]
	cmp $CF9442.l		; CF 42 94 CF ; Compare accumulator (long) $CF9442.l [Reads: Accumulator] [Flags: NCZ]
	.db $42, $56		; 42 56 ; Reserved instruction
	ldx #$787A.w		; A2 7A 78 ; Load #$787A.w into X register [Writes: X Index] [Flags: NZ]
	cpy $55.b		; C4 55 ; Compare $55.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sbc $FE3969.l,X		; FF 69 39 FE ; Subtract with carry (long,X) $FE3969.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($39.b,X)		; 61 39 ; Add with carry ($39.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $013941.l,X		; FF 41 39 01 ; Subtract with carry (long,X) $013941.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora ($D2.b,X)		; 01 D2 ; Logical OR ($D2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy #$E823.w		; C0 23 E8 ; Compare #$E823.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$EA60.w		; C0 60 EA ; Compare #$EA60.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpy #$E8D9.w		; C0 D9 E8 ; Compare #$E8D9.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$9266.w		; C0 66 92 ; Compare #$9266.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$9295.w		; C0 95 92 ; Compare #$9295.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit #$C059.w		; 89 59 C0 ; Test bits #$C059.w with accumulator [Reads: Accumulator] [Flags: Z]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and $BAC0.w,Y		; 39 C0 BA ; AND accumulator with memory $BAC0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($60.b),Y		; 11 60 ; OR accumulator with memory ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($1C.b),Y		; 71 1C ; Add with carry ($1C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $80.b,X		; 36 80 ; Rotate left $80.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $62.b,X		; 36 62 ; Rotate left $62.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC0CF3.l,X		; FF F3 0C FC ; Subtract with carry (long,X) $FC0CF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($22.b,X)		; 61 22 ; Add with carry ($22.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $3181.w		; 8D 81 31 ; Store accumulator to $3181.w [Reads: Accumulator]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $FD83.w		; AD 83 FD ; Load $FD83.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cop $60.b		; 02 60 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($01.b,X)		; A1 01 ; Load accumulator ($01.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $064A.w,X		; FD 4A 06 ; Subtract with carry $064A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($6B.b),Y		; 51 6B ; Exclusive OR accumulator with memory ($6B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FD, $45		; 62 FD 45 ; Push effective relative address $62, $FD, $45 [Writes: Stack Pointer]
	sta [$60.b]		; 87 60 ; Store accumulator (long) [$60.b] [Reads: Direct Page, Accumulator]
	eor $FD02.w,Y		; 59 02 FD ; Exclusive OR accumulator with memory $FD02.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $83.b		; A5 83 ; Load $83.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $02A2.w,X		; FD A2 02 ; Subtract with carry $02A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($01.b,X)		; 21 01 ; Logical AND ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $0642.w,X		; FD 42 06 ; Subtract with carry $0642.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0241.w,X		; FD 41 02 ; Subtract with carry $0241.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($C8B1.w,X)		; FC B1 C8 ; Jump to subroutine indirect indexed ($C8B1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $031C.w,X		; 3C 1C 03 ; Test bits $031C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $CA11.w,X		; FD 11 CA ; Subtract with carry $CA11.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $2C632F.l		; 2F 2F 63 2C ; AND accumulator with memory (long) $2C632F.l [Writes: Accumulator] [Flags: NZ]
	lda $BCFC63.l		; AF 63 FC BC ; Load long $BCFC63.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$CF3C.w		; C9 3C CF ; Compare #$CF3C.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	jmp ($5CCB.w,X)		; 7C CB 5C ; Jump indirect indexed to ($5CCB.w,X) [Reads: X Index] [Flow: jump]
	lda $FD64.w,X		; BD 64 FD ; Load $FD64.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	mvn $03,$AC		; 54 AC 03 ; Move block negative $03,$AC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $CE1A.w,X		; FD 1A CE ; Subtract with carry $CE1A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $5D.b		; 46 5D ; Logical shift right $5D.b [Reads: Direct Page] [Flags: NCZ]
	stz $FD.b		; 64 FD ; Store zero to $FD.b
	trb $CF.b		; 14 CF ; Test and reset bits $CF.b [Reads: Accumulator] [Flags: Z]
	mvn $04,$4C		; 54 4C 04 ; Move block negative $04,$4C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $CB74.w,X		; FD 74 CB ; Subtract with carry $CB74.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $FD643D.l		; 5C 3D 64 FD ; Jump long to $FD643D.l [Flow: jump]
	adc ($CA.b)		; 72 CA ; Add with carry (indirect) ($CA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	mvn $03,$2C		; 54 2C 03 ; Move block negative $03,$2C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $CE12.w,X		; FD 12 CE ; Subtract with carry $CE12.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc $7F7C24.l,X		; 7F 24 7C 7F ; Add long $7F7C24.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $BC.b		; 24 BC ; Test bits $BC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc $807C54.l,X		; 7F 54 7C 80 ; Add long $807C54.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $3BDC.w,X		; 3C DC 3B ; Test bits $3BDC.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor ($38.b,X)		; 41 38 ; Exclusive OR accumulator with memory ($38.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor ($40.b,X)		; 41 40 ; Exclusive OR accumulator with memory ($40.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ldx #$41C8.w		; A2 C8 41 ; Load #$41C8.w into X register [Writes: X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor ($C0.b,X)		; 41 C0 ; Exclusive OR accumulator with memory ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	and #$3B3F.w		; 29 3F 3B ; Logical AND #$3B3F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $6F3B79.l		; 2F 79 3B 6F ; AND accumulator with memory (long) $6F3B79.l [Writes: Accumulator] [Flags: NZ]
	adc $AF39.w,Y		; 79 39 AF ; Add $AF39.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $CF39.w,Y		; 79 39 CF ; Add $CF39.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jmp $457ABF.l		; 5C BF 7A 45 ; Jump long to $457ABF.l [Flow: jump]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor $47.b		; 45 47 ; Exclusive OR $47.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($7A.b,S),Y		; 53 7A ; XOR accumulator (stack relative indirect indexed) ($7A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $91.b		; 46 91 ; Logical shift right $91.b [Reads: Direct Page] [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	eor $4C.b		; 45 4C ; Exclusive OR $4C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $5C.b,S		; 43 5C ; Exclusive OR accumulator with stack relative $5C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $38457A.l,X		; 3F 7A 45 38 ; AND accumulator with memory (long,X) $38457A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $44.b		; 45 44 ; Exclusive OR $44.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $FE7A.w		; 2E 7A FE ; Rotate left $FE7A.w [Flags: NCZ]
	rol $41.b		; 26 41 ; Rotate left $41.b [Reads: Direct Page] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ror $02.b		; 66 02 ; Rotate right $02.b [Reads: Direct Page] [Flags: NCZ]
	sbc $FE43A6.l,X		; FF A6 43 FE ; Subtract with carry (long,X) $FE43A6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($08.b,S),Y		; 53 08 ; XOR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($0A.b,S),Y		; 33 0A ; AND accumulator (stack relative indirect indexed) ($0A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy $6442.w		; CC 42 64 ; Compare $6442.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda $58.b		; A5 58 ; Load $58.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	and $8B.b,X		; 35 8B ; Logical AND $8B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inc $8955.w,X		; FE 55 89 ; Increment memory $8955.w,X [Reads: X Index] [Flags: NZ]
	sty $42.b,X		; 94 42 ; Store Y register $42.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	adc $94.b,S		; 63 94 ; Add with carry (stack relative) $94.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and $B922.w		; 2D 22 B9 ; Logical AND $B922.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol $DE22.w		; 2E 22 DE ; Rotate left $DE22.w [Flags: NCZ]
	and $59FE69.l		; 2F 69 FE 59 ; AND accumulator with memory (long) $59FE69.l [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $9F.b		; A4 9F ; Load $9F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $C4CA.w,Y		; 19 CA C4 ; OR accumulator with memory $C4CA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $1CFF64.l		; AF 64 FF 1C ; Load long $1CFF64.l into accumulator [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	ldy $CF.b		; A4 CF ; Load $CF.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	jmp $AF94C9.l		; 5C C9 94 AF ; Jump long to $AF94C9.l [Flow: jump]
	adc $D7.b,S		; 63 D7 ; Add with carry (stack relative) $D7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sta $9469.w,X		; 9D 69 94 ; Store accumulator to $9469.w,X [Reads: Accumulator, X Index]
	cmp $DEC022.l,X		; DF 22 C0 DE ; Compare accumulator (long,X) $DEC022.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	jsl $FA63E3.l		; 22 E3 63 FA ; Jump to subroutine long $FA63E3.l [Writes: Stack Pointer] [Flow: call]
	inc $3861.w,X		; FE 61 38 ; Increment memory $3861.w,X [Reads: X Index] [Flags: NZ]
	sbc $FF3841.l,X		; FF 41 38 FF ; Subtract with carry (long,X) $FF3841.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$A238.w		; 69 38 A2 ; Add #$A238.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $A1C5.w,X		; 3D C5 A1 ; AND accumulator with memory $A1C5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$B8C5.w		; A9 C5 B8 ; Load #$B8C5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$A1C5.w		; A9 C5 A1 ; Load #$A1C5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$B8C5.w		; C0 C5 B8 ; Compare #$B8C5.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FEC5.w		; C0 C5 FE ; Compare #$FEC5.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda $33.b,S		; A3 33 ; Load accumulator (stack relative) $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($CC.b,S),Y		; B3 CC ; Load accumulator (stack relative indirect indexed) ($CC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda #$F9AA.w		; A9 AA F9 ; Load #$F9AA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($AA.b,X)		; C1 AA ; Compare accumulator ($AA.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sbc $BBAB.w,Y		; F9 AB BB ; Subtract with carry $BBAB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $BB.b,S		; C3 BB ; Compare accumulator (stack relative) $BB.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $52C0E8.l		; 22 E8 C0 52 ; Jump to subroutine long $52C0E8.l [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpy #$1061.w		; C0 61 10 ; Compare #$1061.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$6A61.w		; C0 61 6A ; Compare #$6A61.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$9B60.w		; C0 60 9B ; Compare #$9B60.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $00.b,X		; 76 00 ; Rotate right $00.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $3397FF.l,X		; FF FF 97 33 ; Subtract with carry (long,X) $3397FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $33CC.w,Y		; D9 CC 33 ; Compare accumulator $33CC.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $9F97.w,Y		; D9 97 9F ; Compare accumulator $9F97.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $359A.w,Y		; D9 9A 35 ; Compare accumulator $359A.w,Y [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ldx #$C0C9.w		; A2 C9 C0 ; Load #$C0C9.w into X register [Writes: X Index] [Flags: NZ]
	ldx #$9AC9.w		; A2 C9 9A ; Load #$9AC9.w into X register [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$A2C0.w		; C9 C0 A2 ; Compare #$A2C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C8C0.w		; C9 C0 C8 ; Compare #$C8C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta ($02.b)		; 92 02 ; Store accumulator (indirect) ($02.b) [Reads: Direct Page, Accumulator]
	lda ($02.b)		; B2 02 ; Load accumulator (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	.db $30, $16		; 30 16 ; Branch if minus to $30, $16 [Flow: branch]
	sbc $10E3FF.l,X		; FF FF E3 10 ; Subtract with carry (long,X) $10E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0081.w,X)		; FC 81 00 ; Jump to subroutine indirect indexed ($0081.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $FC6121.l		; 22 21 61 FC ; Jump to subroutine long $FC6121.l [Writes: Stack Pointer] [Flow: call]
	stx $81.b		; 86 81 ; Store X register to $81.b [Reads: X Index]
	inc $0201.w,X		; FE 01 02 ; Increment memory $0201.w,X [Reads: X Index] [Flags: NZ]
	sta ($20.b,X)		; 81 20 ; Store accumulator ($20.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $62, $FE, $04		; 62 FE 04 ; Push effective relative address $62, $FE, $04 [Writes: Stack Pointer]
	ora $61.b,S		; 03 61 ; OR accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $50,$07		; 44 07 50 ; Move block positive $50,$07 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor ($62.b,S),Y		; 53 62 ; XOR accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $8346.w,X		; FD 46 83 ; Subtract with carry $8346.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($C8B1.w,X)		; FC B1 C8 ; Jump to subroutine indirect indexed ($C8B1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $031E.w,X		; 3D 1E 03 ; AND accumulator with memory $031E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $CAD1.w,X		; FD D1 CA ; Subtract with carry $CAD1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $632D.w		; 2D 2D 63 ; Logical AND $632D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($C9B5.w,X)		; FC B5 C9 ; Jump to subroutine indirect indexed ($C9B5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $045C.w,X		; 3C 5C 04 ; Test bits $045C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $CB15.w,X		; FD 15 CB ; Subtract with carry $CB15.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $64,$46		; 44 46 64 ; Move block positive $64,$46 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $4F13.w,X		; [PATTERN: Memory clearing operation] FD 13 4F ; Subtract with carry $4F13.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $04,$37		; 54 37 04 ; Move block negative $04,$37 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $4BD3.w,X		; FD D3 4B ; Subtract with carry $4BD3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $2C.b,X		; 74 2C ; Store zero to $2C.b,X [Reads: X Index]
	stz $FE.b		; 64 FE ; Store zero to $FE.b
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $8166.w,X		; FE 66 81 ; Increment memory $8166.w,X [Reads: X Index] [Flags: NZ]
	sbc $DA0261.l,X		; FF 61 02 DA ; Subtract with carry (long,X) $DA0261.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FE8366.l,X		; FF 66 83 FE ; Subtract with carry (long,X) $FE8366.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $48.b,X		; 94 48 ; Store Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ldy $46.b,X		; B4 46 ; Load Y register $46.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $4A.b,X		; 34 4A ; Test bits $4A.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ldy $54.b		; A4 54 ; Load $54.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sta $C9.b,X		; 95 C9 ; Store accumulator to $C9.b,X [Reads: Accumulator, X Index]
	ldy $5E.b,X		; B4 5E ; Load Y register $5E.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	and $CB.b,X		; 35 CB ; Logical AND $CB.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpy $6454.w		; CC 54 64 ; Compare $6454.w with Y register [Reads: Y Index] [Flags: NCZ]
	jsr ($012C.w,X)		; FC 2C 01 ; Jump to subroutine indirect indexed ($012C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp ($02.b,X)		; C1 02 ; Compare accumulator ($02.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	jsr ($058C.w,X)		; FC 8C 05 ; Jump to subroutine indirect indexed ($058C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr $61D3.w		; 20 D3 61 ; Jump to subroutine at $61D3.w [Writes: Stack Pointer] [Flow: call]
	jsr ($818E.w,X)		; FC 8E 81 ; Jump to subroutine indirect indexed ($818E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $38F890.l		; 22 90 F8 38 ; Jump to subroutine long $38F890.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	eor ($90.b)		; 52 90 ; Exclusive OR accumulator with memory (indirect) ($90.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	cmp ($90.b)		; D2 90 ; Compare accumulator (indirect) ($90.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($C859.w,X)		; FC 59 C8 ; Jump to subroutine indirect indexed ($C859.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and [$9F.b]		; 27 9F ; AND accumulator with memory (long) [$9F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stz $FF03.w,X		; 9E 03 FF ; Store zero to $FF03.w,X [Reads: X Index]
	adc $14CA.w,Y		; 79 CA 14 ; Add $14CA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $FC63.w		; AC 63 FC ; Load $FC63.w into Y register [Writes: Y Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	eor #$B424.w		; 49 24 B4 ; Exclusive OR #$B424.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	eor $C62C.w		; 4D 2C C6 ; Exclusive OR $C62C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lda $3FC9.w,X		; BD C9 3F ; Load $3FC9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $DFBC04.l,X		; DF 04 BC DF ; Compare accumulator (long,X) $DFBC04.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	adc $DDCB.w,X		; 7D CB DD ; Add $DDCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $2064.w		; AD 64 20 ; Load $2064.w into accumulator [Writes: Accumulator] [Flags: NZ]
	bit $0876.w		; 2C 76 08 ; Test bits $0876.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ldy $A276.w		; AC 76 A2 ; Load $A276.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	cpx $77C4.w		; EC C4 77 ; Compare $77C4.w with X register [Reads: X Index] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($2B.b,S),Y		; D3 2B ; Compare accumulator (stack relative indirect indexed) ($2B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($33.b,S),Y		; D3 33 ; Compare accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy $41.b		; A4 41 ; Load $41.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsl $2241C8.l		; 22 C8 41 22 ; Jump to subroutine long $2241C8.l [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cpx $8856.w		; EC 56 88 ; Compare $8856.w with X register [Reads: X Index] [Flags: NCZ]
	cpx $B856.w		; EC 56 B8 ; Compare $B856.w with X register [Reads: X Index] [Flags: NCZ]
	cpx $FE56.w		; EC 56 FE ; Compare $FE56.w with X register [Reads: X Index] [Flags: NCZ]
	sbc ($38.b,X)		; E1 38 ; Subtract with carry ($38.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($D2.b,X)		; 01 D2 ; Logical OR ($D2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy #$1301.w		; C0 01 13 ; Compare #$1301.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$5201.w		; C0 01 52 ; Compare #$5201.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$5262.w		; C0 62 52 ; Compare #$5262.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$1193.w		; C0 93 11 ; Compare #$1193.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $283BFF.l,X		; FF FF 3B 28 ; Subtract with carry (long,X) $283BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($C8.b)		; 32 C8 ; AND accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and #$3A3F.w		; 29 3F 3A ; Logical AND #$3A3F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $5D3879.l		; 2F 79 38 5D ; AND accumulator with memory (long) $5D3879.l [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lsr $38.b		; 46 38 ; Logical shift right $38.b [Reads: Direct Page] [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lsr $36.b		; 46 36 ; Logical shift right $36.b [Reads: Direct Page] [Flags: NCZ]
	eor $63.b,S		; 43 63 ; Exclusive OR accumulator with stack relative $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc $33.b,S		; 63 33 ; Add with carry (stack relative) $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($2B.b,S),Y		; 73 2B ; Add with carry (stack relative indirect indexed) ($2B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc ($33.b,S),Y		; 73 33 ; Add with carry (stack relative indirect indexed) ($33.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($50.b),Y		; B1 50 ; Load accumulator ($50.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($51.b),Y		; B1 51 ; Load accumulator ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $7955B0.l,X		; 3F B0 55 79 ; AND accumulator with memory (long,X) $7955B0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($5D.b),Y		; B1 5D ; Load accumulator ($5D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy $7A55.w		; CC 55 7A ; Compare $7A55.w with Y register [Reads: Y Index] [Flags: NCZ]
	and $A8.b,S		; 23 A8 ; AND accumulator with stack relative $A8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($C8.b)		; B2 C8 ; Load accumulator (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $AA.b,S		; 63 AA ; Add with carry (stack relative) $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	lda $AA.b,S		; A3 AA ; Load accumulator (stack relative) $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($D0.b)		; B2 D0 ; Load accumulator (indirect) ($D0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and $AB.b,S		; 23 AB ; AND accumulator with stack relative $AB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $3FAB63.l,X		; 3F 63 AB 3F ; AND accumulator with memory (long,X) $3FAB63.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $A9.b,S		; A3 A9 ; Load accumulator (stack relative) $A9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $79AD20.l,X		; 3F 20 AD 79 ; AND accumulator with memory (long,X) $79AD20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($B4.b,X)		; 21 B4 ; Logical AND ($B4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	mvp $B8,$3A		; 44 3A B8 ; Move block positive $B8,$3A [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $DF3B.w,Y		; 79 3B DF ; Add $DF3B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $DFB940.l,X		; DF 40 B9 DF ; Compare accumulator (long,X) $DFB940.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dec $7AAF.w,X		; DE AF 7A ; Decrement memory $7AAF.w,X [Reads: X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda $FE.b,S		; A3 FE ; Load accumulator (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cpy #$605E.w		; C0 5E 60 ; Compare #$605E.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$895E.w		; C0 5E 89 ; Compare #$895E.w with Y register [Reads: Y Index] [Flags: NCZ]
.ACCU 16
.INDEX 16
	rep #$F9		; C2 F9
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$B05E.w		; C0 5E B0 ; Compare #$B05E.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$C85E.w		; C0 5E C8 ; Compare #$C85E.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$315E.w		; C0 5E 31 ; Compare #$315E.w with Y register [Reads: Y Index] [Flags: NCZ]
	ror $4161.w		; 6E 61 41 ; Rotate right $4161.w [Flags: NCZ]
	ror $B162.w		; 6E 62 B1 ; Rotate right $B162.w [Flags: NCZ]
	ror $C161.w		; 6E 61 C1 ; Rotate right $C161.w [Flags: NCZ]
	ror $3062.w		; 6E 62 30 ; Rotate right $3062.w [Flags: NCZ]
	inc $4061.w		; EE 61 40 ; Increment $4061.w [Flags: NZ]
	inc $2262.w		; EE 62 22 ; Increment $2262.w [Flags: NZ]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	eor ($90.b)		; 52 90 ; Exclusive OR accumulator with memory (indirect) ($90.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	ldx #$F890.w		; A2 90 F8 ; Load #$F890.w into X register [Writes: X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	cmp ($90.b)		; D2 90 ; Compare accumulator (indirect) ($90.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	clv		; B8 ; Clear overflow flag [Flags: V]
	adc ($F9.b,X)		; 61 F9 ; Add with carry ($F9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1F2DFF.l,X		; FF FF 2D 1F ; Subtract with carry (long,X) $1F2DFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $2D.b		; C6 2D ; Decrement $2D.b [Reads: Direct Page] [Flags: NZ]
	jmp $1D47C6.l		; 5C C6 47 1D ; Jump long to $1D47C6.l [Flow: jump]
	dec $47.b		; C6 47 ; Decrement $47.b [Reads: Direct Page] [Flags: NZ]
	bit $C6.b,X		; 34 C6 ; Test bits $C6.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	mvp $C6,$3E		; 44 3E C6 ; Move block positive $C6,$3E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	clv		; B8 ; Clear overflow flag [Flags: V]
	adc ($F9.b,X)		; 61 F9 ; Add with carry ($F9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $71E4.w,X		; FE E4 71 ; Increment memory $71E4.w,X [Reads: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	eor #$17C6.w		; 49 C6 17 ; Exclusive OR #$17C6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17C6.w,X		; 9D C6 17 ; Store accumulator to $17C6.w,X [Reads: Accumulator, X Index]
	ldy $C6.b,X		; B4 C6 ; Load Y register $C6.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	and $57C6BE.l		; 2F BE C6 57 ; AND accumulator with memory (long) $57C6BE.l [Writes: Accumulator] [Flags: NZ]
	sta $DC6FC6.l,X		; 9F C6 6F DC ; Store accumulator (long,X) $DC6FC6.l,X [Reads: Accumulator, X Index]
	dec $95.b		; C6 95 ; Decrement $95.b [Reads: Direct Page] [Flags: NZ]
	sta $A397C6.l,X		; 9F C6 97 A3 ; Store accumulator (long,X) $A397C6.l,X [Reads: Accumulator, X Index]
	dec $AF.b		; C6 AF ; Decrement $AF.b [Reads: Direct Page] [Flags: NZ]
	jmp.w [$CDC6]		; DC C6 CD ; Jump long indirect [$CDC6] [Flow: jump]
	sta $FFF0C6.l,X		; 9F C6 F0 FF ; Store accumulator (long,X) $FFF0C6.l,X [Reads: Accumulator, X Index]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	sta ($40.b),Y		; 91 40 ; Store accumulator ($40.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($16.b),Y		; 91 16 ; Store accumulator ($16.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $40		; 90 40 ; Branch if carry clear to $90, $40 [Flow: branch]
	sbc $10F1FF.l,X		; FF FF F1 10 ; Subtract with carry (long,X) $10F1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0071.w,X)		; FC 71 00 ; Jump to subroutine indirect indexed ($0071.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	trb $6123.w		; 1C 23 61 ; Test and reset bits $6123.w [Reads: Accumulator] [Flags: Z]
	jsr ($8173.w,X)		; FC 73 81 ; Jump to subroutine indirect indexed ($8173.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($85B3.w,X)		; FC B3 85 ; Jump to subroutine indirect indexed ($85B3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $6148.w		; 2D 48 61 ; Logical AND $6148.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($81B6.w,X)		; FC B6 81 ; Jump to subroutine indirect indexed ($81B6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $0251.w,X		; FD 51 02 ; Subtract with carry $0251.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $62,$23		; 54 23 62 ; Move block negative $62,$23 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $8353.w,X		; FD 53 83 ; Subtract with carry $8353.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8713.w,X		; FD 13 87 ; Subtract with carry $8713.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FD, $16		; 62 FD 16 ; Push effective relative address $62, $FD, $16 [Writes: Stack Pointer]
	sta $FD.b,S		; 83 FD ; Store accumulator (stack relative) $FD.b,S [Reads: Stack Pointer, Accumulator]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $6121.w		; 6E 21 61 ; Rotate right $6121.w [Flags: NCZ]
	sbc $81B6.w,X		; FD B6 81 ; Subtract with carry $81B6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0211.w,X		; FE 11 02 ; Increment memory $0211.w,X [Reads: X Index] [Flags: NZ]
	stx $21.b		; 86 21 ; Store X register to $21.b [Reads: X Index]
	.db $62, $FE, $16		; 62 FE 16 ; Push effective relative address $62, $FE, $16 [Writes: Stack Pointer]
	sta $9C.b,S		; 83 9C ; Store accumulator (stack relative) $9C.b,S [Reads: Stack Pointer, Accumulator]
	bit $0D.b		; 24 0D ; Test bits $0D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $0E50.w		; 9C 50 0E ; Store zero to $0E50.w
	sta $612B.w,X		; 9D 2B 61 ; Store accumulator to $612B.w,X [Reads: Accumulator, X Index]
	.db $B0, $37		; B0 37 ; Branch if carry set to $B0, $37 [Flow: branch]
	.db $10, $B0		; 10 B0 ; Branch if plus to $10, $B0 [Flow: branch]
	eor $0F.b,S		; 43 0F ; Exclusive OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy $1D.b		; C4 1D ; Compare $1D.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $62, $FF, $11		; 62 FF 11 ; Push effective relative address $62, $FF, $11 [Writes: Stack Pointer]
	cop $B0.b		; 02 B0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $62, $C4, $65		; 62 C4 65 ; Push effective relative address $62, $C4, $65 [Writes: Stack Pointer]
	.db $62, $FF, $16		; 62 FF 16 ; Push effective relative address $62, $FF, $16 [Writes: Stack Pointer]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Stack Pointer, Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	trb $BF.b		; 14 BF ; Test and reset bits $BF.b [Reads: Accumulator] [Flags: Z]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $27C9.w,X		; 5D C9 27 ; Exclusive OR accumulator with memory $27C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $AEA503.l		; AF 03 A5 AE ; Load long $AEA503.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	jmp.w [$64BF]		; DC BF 64 ; Jump long indirect [$64BF] [Flow: jump]
	sbc $27CB7D.l,X		; FF 7D CB 27 ; Subtract with carry (long,X) $27CB7D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DEA504.l,X		; DF 04 A5 DE ; Compare accumulator (long,X) $DEA504.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tsb $30.b		; 04 30 ; Test and set bits $30.b [Reads: Accumulator] [Flags: Z]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F83FA.l,X		; 1F FA 83 1F ; Logical OR long $1F83FA.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$FA.b]		; 27 FA ; AND accumulator with memory (long) [$FA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $27.b,S		; 83 27 ; Store accumulator (stack relative) $27.b,S [Reads: Stack Pointer, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $2F83FA.l		; 2F FA 83 2F ; AND accumulator with memory (long) $2F83FA.l [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$FA.b],Y		; 37 FA ; AND accumulator with memory (long indexed) [$FA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $37.b,S		; 83 37 ; Store accumulator (stack relative) $37.b,S [Reads: Stack Pointer, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $39E1.w,X		; FE E1 39 ; Increment memory $39E1.w,X [Reads: X Index] [Flags: NZ]
	jsr ($F5EA.w,X)		; FC EA F5 ; Jump to subroutine indirect indexed ($F5EA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $F5EA.w,X		; FD EA F5 ; Subtract with carry $F5EA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $F5EA.w,X		; FE EA F5 ; Increment memory $F5EA.w,X [Reads: X Index] [Flags: NZ]
	sbc $15F53A.l,X		; FF 3A F5 15 ; Subtract with carry (long,X) $15F53A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$4A22.w		; A9 22 4A ; Load #$4A22.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsl $699C60.l		; 22 60 9C 69 ; Jump to subroutine long $699C60.l [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsl $699CA0.l		; 22 A0 9C 69 ; Jump to subroutine long $699CA0.l [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	stz $DC69.w		; 9C 69 DC ; Store zero to $DC69.w
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsl $FA9FE3.l		; 22 E3 9F FA ; Jump to subroutine long $FA9FE3.l [Writes: Stack Pointer] [Flow: call]
	inc $F5EA.w,X		; FE EA F5 ; Increment memory $F5EA.w,X [Reads: X Index] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp [$FE.b]		; C7 FE ; Compare accumulator (long) [$FE.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $23FEC7.l,X		; DF C7 FE 23 ; Compare accumulator (long,X) $23FEC7.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda $23C5.w,Y		; B9 C5 23 ; Load $23C5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $C5		; D0 C5 ; Branch if not equal to $D0, $C5 [Flow: branch]
	adc $B9.b,S		; 63 B9 ; Add with carry (stack relative) $B9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp $63.b		; C5 63 ; Compare $63.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $C5		; D0 C5 ; Branch if not equal to $D0, $C5 [Flow: branch]
	lda $B9.b,S		; A3 B9 ; Load accumulator (stack relative) $B9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $A3.b		; C5 A3 ; Compare $A3.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $C5		; D0 C5 ; Branch if not equal to $D0, $C5 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$C04A.w		; 09 4A C0 ; Logical OR #$C04A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $13.b,X		; 15 13 ; OR accumulator with memory $13.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $4A.b		; 25 4A ; Logical AND $4A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvn $C0,$4A		; 54 4A C0 ; Move block negative $C0,$4A [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc [$11.b]		; 67 11 ; Add with carry (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta [$11.b],Y		; 97 11 ; Store accumulator (long indexed) [$11.b],Y [Reads: Direct Page, Y Index, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $A011.w		; 9C 11 A0 ; Store zero to $A011.w
	stz $A165.w		; 9C 65 A1 ; Store zero to $A165.w
	cpy $34.b		; C4 34 ; Compare $34.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	lda $C4.b,S		; A3 C4 ; Load accumulator (stack relative) $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $A2		; 50 A2 ; Branch if overflow clear to $50, $A2 [Flow: branch]
	cmp $13.b,X		; D5 13 ; Compare accumulator $13.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cpy #$52D5.w		; C0 D5 52 ; Compare #$52D5.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$38C1.w		; C0 C1 38 ; Compare #$38C1.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$4BC0.w		; C0 C0 4B ; Compare #$4BC0.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($60.b),Y		; 11 60 ; OR accumulator with memory ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $AF17FF.l,X		; FF FF 17 AF ; Subtract with carry (long,X) $AF17FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $AF57.w,Y		; D9 57 AF ; Compare accumulator $AF57.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $AF97.w,Y		; D9 97 AF ; Compare accumulator $AF97.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $AFD5.w,Y		; D9 D5 AF ; Compare accumulator $AFD5.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $B21B.w,Y		; D9 1B B2 ; Compare accumulator $B21B.w,Y [Reads: Y Index] [Flags: NCZ]
	sbc [$1B.b]		; E7 1B ; Subtract with carry (long) [$1B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc [$5B.b]		; E7 5B ; Subtract with carry (long) [$5B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda ($E7.b)		; B2 E7 ; Load accumulator (indirect) ($E7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc [$9B.b]		; E7 9B ; Subtract with carry (long) [$9B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda ($E7.b)		; B2 E7 ; Load accumulator (indirect) ($E7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc [$D8.b]		; E7 D8 ; Subtract with carry (long) [$D8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda ($E7.b)		; B2 E7 ; Load accumulator (indirect) ($E7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $70FFF0.l,X		; FF F0 FF 70 ; Subtract with carry (long,X) $70FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $1C60.w		; 2E 60 1C ; Rotate left $1C60.w [Flags: NCZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C8.b,S		; A3 C8 ; Load accumulator (stack relative) $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda $C8.b,S		; A3 C8 ; Load accumulator (stack relative) $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cld		; D8 ; Clear decimal flag [Flags: D]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora [$9F.b],Y		; 17 9F ; OR accumulator with memory (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $3F9F54.l,X		; 3F 54 9F 3F ; AND accumulator with memory (long,X) $3F9F54.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$A3.b],Y		; 17 A3 ; OR accumulator with memory (long indexed) [$A3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $E114.w,Y		; 79 14 E1 ; Add $E114.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $EB17.w,Y		; 79 17 EB ; Add $EB17.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	mvn $40,$EB		; 54 EB 40 ; Move block negative $40,$EB [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7A.b,S		; A3 7A ; Load accumulator (stack relative) $7A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc ($7A.b,X)		; E1 7A ; Subtract with carry ($7A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($90.b,X)		; 21 90 ; Logical AND ($90.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor ($90.b),Y		; 51 90 ; Exclusive OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $7FA5.w		; 0C A5 7F ; Test and set bits $7FA5.w [Reads: Accumulator] [Flags: Z]
	jmp ($80A5.w)		; 6C A5 80 ; Jump indirect to ($80A5.w) [Flow: jump]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $10E1FF.l,X		; FF FF E1 10 ; Subtract with carry (long,X) $10E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora $5888.w,X		; 1D 88 58 ; OR accumulator with memory $5888.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	eor $8844.w,Y		; 59 44 88 ; Exclusive OR accumulator with memory $8844.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$881D.w		; A0 1D 88 ; Load #$881D.w into Y register [Writes: Y Index] [Flags: NZ]
	lda ($44.b,X)		; A1 44 ; Load accumulator ($44.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsr ($39E1.w,X)		; FC E1 39 ; Jump to subroutine indirect indexed ($39E1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $39E1.w,X		; FE E1 39 ; Increment memory $39E1.w,X [Reads: X Index] [Flags: NZ]
	bit $FDC4.w,X		; 3C C4 FD ; Test bits $FDC4.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ldy $FDC4.w,X		; BC C4 FD ; Load Y register $FDC4.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $1FDD.w,X		; 3C DD 1F ; Test bits $1FDD.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $2B.b,S		; 43 2B ; Exclusive OR accumulator with stack relative $2B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora $43FA5B.l,X		; 1F 5B FA 43 ; Logical OR long $43FA5B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	bit $73DD.w,X		; 3C DD 73 ; Test bits $73DD.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $BBDD.w,X		; 3C DD BB ; Test bits $BBDD.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $BBFA2B.l,X		; DF 2B FA BB ; Compare accumulator (long,X) $BBFA2B.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $FCFA5B.l,X		; DF 5B FA FC ; Compare accumulator (long,X) $FCFA5B.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda $2D00.w,Y		; B9 00 2D ; Load $2D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$FC61.w		; A2 61 FC ; Load #$FC61.w into X register [Writes: X Index] [Flags: NZ]
	ldy $3CC1.w,X		; BC C1 3C ; Load Y register $3CC1.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cmp $FD02.w		; CD 02 FD ; Compare $FD02.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	trb $44C5.w		; 1C C5 44 ; Test and reset bits $44C5.w [Reads: Accumulator] [Flags: Z]
	dec $FD61.w,X		; DE 61 FD ; Decrement memory $FD61.w,X [Reads: X Index] [Flags: NZ]
	asl $FD81.w,X		; 1E 81 FD ; Arithmetic shift left $FD81.w,X [Reads: X Index] [Flags: NCZ]
	ora $4402.w,Y		; 19 02 44 ; OR accumulator with memory $4402.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $62.b,S		; A3 62 ; Load accumulator (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $461B.w,X		; FD 1B 46 ; Subtract with carry $461B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $01,$B5		; 54 B5 01 ; Move block negative $01,$B5 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp $FD61A3.l		; 5C A3 61 FD ; Jump long to $FD61A3.l [Flow: jump]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	mvp $79,$FD		; 44 FD 79 ; Move block positive $79,$FD [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $9402.w,Y		; 59 02 94 ; Exclusive OR accumulator with memory $9402.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $62.b,S		; A3 62 ; Load accumulator (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $465B.w,X		; FE 5B 46 ; Increment memory $465B.w,X [Reads: X Index] [Flags: NZ]
	ldy $B5.b		; A4 B5 ; Load $B5.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ora ($AC.b,X)		; 01 AC ; Logical OR ($AC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $61.b,S		; A3 61 ; Load accumulator (stack relative) $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $44BB.w,X		; FE BB 44 ; Increment memory $44BB.w,X [Reads: X Index] [Flags: NZ]
	inc $00B9.w,X		; FE B9 00 ; Increment memory $00B9.w,X [Reads: X Index] [Flags: NZ]
	sbc $BC0219.l,X		; FF 19 02 BC ; Subtract with carry (long,X) $BC0219.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $C502.w		; CD 02 C5 ; Compare $C502.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx #$FF62.w		; A2 62 FF ; Load #$FF62.w into X register [Writes: X Index] [Flags: NZ]
	trb $ACC3.w		; 1C C3 AC ; Test and reset bits $ACC3.w [Reads: Accumulator] [Flags: Z]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FE, $BC		; 62 FE BC ; Push effective relative address $62, $FE, $BC [Writes: Stack Pointer]
	cmp [$FE.b]		; C7 FE ; Compare accumulator (long) [$FE.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ldx $5B83.w,Y		; BE 83 5B ; Load X register $5B83.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cmp ($FE.b)		; D2 FE ; Compare accumulator (indirect) ($FE.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cmp ($FE.b)		; D2 FE ; Compare accumulator (indirect) ($FE.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $70, $A9		; 70 A9 ; Branch if overflow set to $70, $A9 [Flow: branch]
	and $8D55.w,X		; 3D 55 8D ; AND accumulator with memory $8D55.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $8D.b		; A5 8D ; Load $8D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$C093.w		; 09 93 C0 ; Logical OR #$C093.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$C0D2.w		; 09 D2 C0 ; Logical OR #$C0D2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $DD.b		; 25 DD ; Logical AND $DD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$9226.w		; C0 26 92 ; Compare #$9226.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $93.b,X		; D5 93 ; Compare accumulator $93.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cpy #$DDBD.w		; C0 BD DD ; Compare #$DDBD.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D2D5.w		; C0 D5 D2 ; Compare #$D2D5.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$91F3.w		; C0 F3 91 ; Compare #$91F3.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	.db $10, $1C		; 10 1C ; Branch if plus to $10, $1C [Flow: branch]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	adc ($0A.b),Y		; 71 0A ; Add with carry ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1C81FF.l,X		; FF FF 81 1C ; Subtract with carry (long,X) $1C81FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $FCFC.w,Y		; 59 FC FC ; Exclusive OR accumulator with memory $FCFC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $221800.l		; 22 00 18 22 ; Jump to subroutine long $221800.l [Writes: Stack Pointer] [Flow: call]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldx #$FC04.w		; A2 04 FC ; Load #$FC04.w into X register [Writes: X Index] [Flags: NZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $0221.w,X		; FD 21 02 ; Subtract with carry $0221.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0622.w,X		; FD 22 06 ; Subtract with carry $0622.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and $01.b,S		; 23 01 ; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $04B2.w,X		; FD B2 04 ; Subtract with carry $04B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00B1.w,X		; FD B1 00 ; Subtract with carry $00B1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0211.w,X		; FE 11 02 ; Increment memory $0211.w,X [Reads: X Index] [Flags: NZ]
	inc $0612.w,X		; FE 12 06 ; Increment memory $0612.w,X [Reads: X Index] [Flags: NZ]
	sty $23.b,X		; 94 23 ; Store Y register $23.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldx #$FE04.w		; A2 04 FE ; Load #$FE04.w into X register [Writes: X Index] [Flags: NZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $D80221.l,X		; FF 21 02 D8 ; Subtract with carry (long,X) $D80221.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $22FF01.l		; 22 01 FF 22 ; Jump to subroutine long $22FF01.l [Writes: Stack Pointer] [Flow: call]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	ldx #$FC02.w		; A2 02 FC ; Load #$FC02.w into X register [Writes: X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	eor ($1A.b,X)		; 41 1A ; Exclusive OR accumulator with memory ($1A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $02.b,X		; B5 02 ; Load $02.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($C1.b,X)		; 61 C1 ; Add with carry ($C1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor $FD.b		; 45 FD ; Exclusive OR $FD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $FE81.w		; 8E 81 FE ; Store X register to $FE81.w [Reads: X Index]
	lsr $9183.w		; 4E 83 91 ; Logical shift right $9183.w [Flags: NCZ]
	cmp ($62.b,X)		; C1 62 ; Compare accumulator ($62.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	inc $474B.w,X		; FE 4B 47 ; Increment memory $474B.w,X [Reads: X Index] [Flags: NZ]
	ldx #$02B5.w		; A2 B5 02 ; Load #$02B5.w into X register [Writes: X Index] [Flags: NZ]
	sbc $6843AB.l,X		; FF AB 43 68 ; Subtract with carry (long,X) $6843AB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $FD62.w		; 6E 62 FD ; Rotate right $FD62.w [Flags: NCZ]
	lda $C7.b		; A5 C7 ; Load $C7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lsr $8802.w,X		; 5E 02 88 ; Logical shift right $8802.w,X [Reads: X Index] [Flags: NCZ]
	ror $FE61.w		; 6E 61 FE ; Rotate right $FE61.w [Flags: NCZ]
	and $C5.b		; 25 C5 ; Logical AND $C5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $C6A7.w,X		; FD A7 C6 ; Subtract with carry $C6A7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ror $FE01.w,X		; 7E 01 FE ; Rotate right $FE01.w,X [Reads: X Index] [Flags: NCZ]
	and [$C4.b]		; 27 C4 ; AND accumulator with memory (long) [$C4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ldx $06.b,Y		; B6 06 ; Load X register $06.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	.db $70, $E9		; 70 E9 ; Branch if overflow set to $70, $E9 [Flow: branch]
	asl $B0.b		; 06 B0 ; Arithmetic shift left $B0.b [Reads: Direct Page] [Flags: NCZ]
	ldx $06.b,Y		; B6 06 ; Load X register $06.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	jsr ($C852.w,X)		; FC 52 C8 ; Jump to subroutine indirect indexed ($C852.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $2D.b		; 24 2D ; Test bits $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $FD03.w		; 2D 03 FD ; Logical AND $FD03.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b)		; 72 CA ; Add with carry (indirect) ($CA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lsr $643C.w,X		; 5E 3C 64 ; Logical shift right $643C.w,X [Reads: X Index] [Flags: NCZ]
	bit $85.b		; 24 85 ; Test bits $85.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $4C.b		; 04 4C ; Test and set bits $4C.b [Reads: Accumulator] [Flags: Z]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	sbc $4B78.w,X		; FD 78 4B ; Subtract with carry $4B78.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($4958.w,X)		; FC 58 49 ; Jump to subroutine indirect indexed ($4958.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $3C.b,X		; 16 3C ; Arithmetic shift left $3C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C8.b)		; 52 C8 ; Exclusive OR accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $3C.b,Y		; 96 3C ; Store X register $3C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor #$2DA4.w		; 49 A4 2D ; Exclusive OR #$2DA4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $CC.b,S		; 03 CC ; OR accumulator with stack relative $CC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $FF03.w		; 2D 03 FF ; Logical AND $FF03.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b)		; 72 CA ; Add with carry (indirect) ($CA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dec $643C.w,X		; DE 3C 64 ; Decrement memory $643C.w,X [Reads: X Index] [Flags: NZ]
	ldy $85.b		; A4 85 ; Load $85.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tsb $CC.b		; 04 CC ; Test and set bits $CC.b [Reads: Accumulator] [Flags: Z]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	sbc $A04B78.l,X		; FF 78 4B A0 ; Subtract with carry (long,X) $A04B78.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$A3.b]		; 27 A3 ; AND accumulator with memory (long) [$A3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7DA06A.l,X		; 3F 6A A0 7D ; AND accumulator with memory (long,X) $7DA06A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldy #$2887.w		; A0 87 28 ; Load #$2887.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$DF.b]		; 27 DF ; AND accumulator with memory (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7DDC6B.l,X		; 3F 6B DC 7D ; AND accumulator with memory (long,X) $7DDC6B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$28.b]		; 87 28 ; Store accumulator (long) [$28.b] [Reads: Direct Page, Accumulator]
	lda $2C.b,X		; B5 2C ; Load $2C.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$6978.w		; C9 78 69 ; Compare #$6978.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	and $2C9069.l		; 2F 69 90 2C ; AND accumulator with memory (long) $2C9069.l [Writes: Accumulator] [Flags: NZ]
	adc #$5090.w		; 69 90 50 ; Add #$5090.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$886C.w		; 69 6C 88 ; Add #$886C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$8890.w		; 69 90 88 ; Add #$8890.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$9590.w		; 69 90 95 ; Add #$9590.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $2294DC.l		; 22 DC 94 22 ; Jump to subroutine long $2294DC.l [Writes: Stack Pointer] [Flow: call]
	bit $3F.b		; 24 3F ; Test bits $3F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
.ACCU 16
	rep #$24		; C2 24
	stz $C2.b,X		; [PATTERN: Memory clearing operation] 74 C2 ; Store zero to $C2.b,X [Reads: X Index]
	jmp $C23F.w		; 4C 3F C2 ; Jump to $C23F.w [Flow: jump]
	jmp $C274.w		; 4C 74 C2 ; Jump to $C274.w [Flow: jump]
	ldy $3F.b		; A4 3F ; Load $3F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$A4		; C2 A4
	stz $C2.b,X		; 74 C2 ; Store zero to $C2.b,X [Reads: X Index]
	cpy $C23F.w		; CC 3F C2 ; Compare $C23F.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $C274.w		; CC 74 C2 ; Compare $C274.w with Y register [Reads: Y Index] [Flags: NCZ]
	jsr $273B.w		; 20 3B 27 ; Jump to subroutine at $273B.w [Writes: Stack Pointer] [Flow: call]
	and $3F.b,S		; 23 3F ; AND accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $6A7D.w		; 20 7D 6A ; Jump to subroutine at $6A7D.w [Writes: Stack Pointer] [Flow: call]
	jsr $2887.w		; 20 87 28 ; Jump to subroutine at $2887.w [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta [$28.b]		; 87 28 ; Store accumulator (long) [$28.b] [Reads: Direct Page, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$5F.b]		; 27 5F ; AND accumulator with memory (long) [$5F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7D5C6B.l,X		; 3F 6B 5C 7D ; AND accumulator with memory (long,X) $7D5C6B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $2C.b,X		; 35 2C ; Logical AND $2C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$8A2C.w		; 49 2C 8A ; Exclusive OR #$8A2C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $95.b,X		; 15 95 ; OR accumulator with memory $95.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $229649.l		; 22 49 96 22 ; Jump to subroutine long $229649.l [Writes: Stack Pointer] [Flow: call]
	ror $692D.w		; 6E 2D 69 ; Rotate right $692D.w [Flags: NCZ]
	sbc $39E1.w,X		; FD E1 39 ; Subtract with carry $39E1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $FEA1.w		; 20 A1 FE ; Jump to subroutine at $FEA1.w [Writes: Stack Pointer] [Flow: call]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lsr $A1D8.w,X		; 5E D8 A1 ; Logical shift right $A1D8.w,X [Reads: X Index] [Flags: NCZ]
	inc $4A7D.w,X		; FE 7D 4A ; Increment memory $4A7D.w,X [Reads: X Index] [Flags: NZ]
	sbc $8EFE.w,Y		; F9 FE 8E ; Subtract with carry $8EFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($09.b)		; B2 09 ; Load accumulator (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $C0		; 10 C0 ; Branch if plus to $10, $C0 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $10, $C0		; 10 C0 ; Branch if plus to $10, $C0 [Flow: branch]
	stz $12.b		; 64 12 ; Store zero to $12.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $10.b,X		; 94 10 ; Store Y register $10.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	cpy #$12A0.w		; C0 A0 12 ; Compare #$12A0.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $C010.w,Y		; D9 10 C0 ; Compare accumulator $C010.w,Y [Reads: Y Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jmp ($0BC0.w)		; 6C C0 0B ; Jump indirect to ($0BC0.w) [Flow: jump]
	dec $C0.b		; C6 C0 ; Decrement $C0.b [Reads: Direct Page] [Flags: NZ]
	eor ($C6.b,X)		; 41 C6 ; Exclusive OR accumulator with memory ($C6.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$F30A.w		; C0 0A F3 ; Compare #$F30A.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $A3.b		; 00 A3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $C0.b		; C6 C0 ; Decrement $C0.b [Reads: Direct Page] [Flags: NZ]
	ldx #$00F3.w		; A2 F3 00 ; Load #$00F3.w into X register [Writes: X Index] [Flags: NZ]
	sbc ($C6.b,X)		; E1 C6 ; Subtract with carry ($C6.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$6BC8.w		; C0 C8 6B ; Compare #$6BC8.w with Y register [Reads: Y Index] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $2B12FF.l,X		; FF FF 12 2B ; Subtract with carry (long,X) $2B12FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora ($6A.b)		; 12 6A ; OR accumulator with memory (indirect) ($6A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	.db $42, $2B		; 42 2B ; Reserved instruction
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	.db $42, $6A		; 42 6A ; Reserved instruction
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta ($2B.b)		; 92 2B ; Store accumulator (indirect) ($2B.b) [Reads: Direct Page, Accumulator]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta ($6A.b)		; 92 6A ; Store accumulator (indirect) ($6A.b) [Reads: Direct Page, Accumulator]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($1C.b),Y		; 71 1C ; Add with carry ($1C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $FF00.w		; 20 00 FF ; Jump to subroutine at $FF00.w [Writes: Stack Pointer] [Flow: call]
	sbc $FC1C51.l,X		; FF 51 1C FC ; Subtract with carry (long,X) $FC1C51.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b,X		; 15 2D ; OR accumulator with memory $2D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $14.b,S		; 63 14 ; Add with carry (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp $2463.w		; CD 63 24 ; Compare $2463.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $FC04.w,X		; DD 04 FC ; Compare accumulator $FC04.w,X [Reads: X Index] [Flags: NCZ]
	eor $58C9.w,X		; 5D C9 58 ; Exclusive OR accumulator with memory $58C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $64.b		; C6 64 ; Decrement $64.b [Reads: Direct Page] [Flags: NZ]
	jmp $04DD.w		; 4C DD 04 ; Jump to $04DD.w [Flow: jump]
	sbc $CB6D.w,X		; FD 6D CB ; Subtract with carry $CB6D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4F6B.w,X		; FD 6B 4F ; Subtract with carry $4F6B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ldy $04.b,X		; B4 04 ; Load Y register $04.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sbc $4DCB.w,X		; FD CB 4D ; Subtract with carry $4DCB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $C6		; 70 C6 ; Branch if overflow set to $70, $C6 [Flow: branch]
	adc $FD.b,S		; 63 FD ; Add with carry (stack relative) $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp $80C9.w		; CD C9 80 ; Compare $80C9.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	jmp.w [$8804]		; DC 04 88 ; Jump long indirect [$8804] [Flow: jump]
	dec $64.b		; C6 64 ; Decrement $64.b [Reads: Direct Page] [Flags: NZ]
	inc $CB2D.w,X		; FE 2D CB ; Increment memory $CB2D.w,X [Reads: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$FEC2.w		; A9 C2 FE ; Load #$FEC2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	eor $04B498.l		; 4F 98 B4 04 ; Exclusive OR accumulator with memory (long) $04B498.l [Writes: Accumulator] [Flags: NZ]
	inc $4D8B.w,X		; FE 8B 4D ; Increment memory $4D8B.w,X [Reads: X Index] [Flags: NZ]
	ldy #$63C6.w		; A0 C6 63 ; Load #$63C6.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $04DC.w		; AC DC 04 ; Load $04DC.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $C98D.w,X		; FE 8D C9 ; Increment memory $C98D.w,X [Reads: X Index] [Flags: NZ]
	cpy $04DD.w		; CC DD 04 ; Compare $04DD.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $ABCB7D.l,X		; FF 7D CB AB ; Subtract with carry (long,X) $ABCB7D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpx #$80AB.w		; E0 AB 80 ; Compare #$80AB.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$2FDF.w		; E0 DF 2F ; Compare #$2FDF.w with X register [Reads: X Index] [Flags: NCZ]
	stz $DD.b		; 64 DD ; Store zero to $DD.b
	lda $FF64.w		; AD 64 FF ; Load $FF64.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $031D.w		; CC 1D 03 ; Compare $031D.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor $24031C.l		; 4F 1C 03 24 ; Exclusive OR accumulator with memory (long) $24031C.l [Writes: Accumulator] [Flags: NZ]
	ora $2103.w,X		; 1D 03 21 ; OR accumulator with memory $2103.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $2467.w		; 2D 67 24 ; Logical AND $2467.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FC07.w		; 29 07 FC ; Logical AND #$FC07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $82, $98, $20		; 82 98 20 ; Branch always long to $82, $98, $20 [Flow: branch]
	cmp $2467.w		; CD 67 24 ; Compare $2467.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $FC08.w,Y		; D9 08 FC ; Compare accumulator $FC08.w,Y [Reads: Y Index] [Flags: NCZ]
	sta $4C99.w		; 8D 99 4C ; Store accumulator to $4C99.w [Reads: Accumulator]
	cmp $5408.w,Y		; D9 08 54 ; Compare accumulator $5408.w,Y [Reads: Y Index] [Flags: NCZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc $9B5D.w,X		; FD 5D 9B ; Subtract with carry $9B5D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $B1.b,X		; 55 B1 ; Exclusive OR accumulator with memory $B1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lsr $08B1.w,X		; 5E B1 08 ; Logical shift right $08B1.w,X [Reads: X Index] [Flags: NCZ]
	lda $ACFAB0.l		; AF B0 FA AC ; Load long $ACFAB0.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc [$FE.b]		; 67 FE ; Add with carry (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda $CC99.w,X		; BD 99 CC ; Load $CC99.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $FF08.w,Y		; D9 08 FF ; Compare accumulator $FF08.w,Y [Reads: Y Index] [Flags: NCZ]
	adc $DA9B.w		; 6D 9B DA ; Add $DA9B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $90, $68		; 90 68 ; Branch if carry clear to $90, $68 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $30, $68		; 30 68 ; Branch if minus to $30, $68 [Flow: branch]
	cpy $0729.w		; CC 29 07 ; Compare $0729.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $4F9A62.l,X		; FF 62 9A 4F ; Subtract with carry (long,X) $4F9A62.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora [$4F.b]		; 07 4F ; OR accumulator with memory (long) [$4F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $C2		; 30 C2 ; Branch if minus to $30, $C2 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and ($C2.b)		; 32 C2 ; AND accumulator with memory (indirect) ($C2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $8C58.w,X		; 3C 58 8C ; Test bits $8C58.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $C2		; 50 C2 ; Branch if overflow clear to $50, $C2 [Flow: branch]
	stx $30.b		; 86 30 ; Store X register to $30.b [Reads: X Index]
.ACCU 16
.INDEX 16
	rep #$7B		; C2 7B
	.db $50, $C2		; 50 C2 ; Branch if overflow clear to $50, $C2 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor $C8C2.w,Y		; 59 C2 C8 ; Exclusive OR accumulator with memory $C8C2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rep #$40		; C2 40 ; Reset processor status bits #$40 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$32		; C2 32
	adc ($C2.b),Y		; 71 C2 ; Add with carry ($C2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$28		; C2 28
	cpy $48C3.w		; CC C3 48 ; Compare $48C3.w with Y register [Reads: Y Index] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cmp $4B.b,S		; C3 4B ; Compare accumulator (stack relative) $4B.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ldy #$89C2.w		; A0 C2 89 ; Load #$89C2.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$B0C2.w		; A0 C2 B0 ; Load #$B0C2.w into Y register [Writes: Y Index] [Flags: NZ]
	stz $A8B0.w		; 9C B0 A8 ; Store zero to $A8B0.w
	sta ($C2.b),Y		; 91 C2 ; Store accumulator ($C2.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldx $90.b,Y		; B6 90 ; Load X register $90.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	cmp $C8.b,S		; C3 C8 ; Compare accumulator (stack relative) $C8.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$63		; C2 63
	adc $E0.b,S		; 63 E0 ; Add with carry (stack relative) $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $E0.b,S		; 63 E0 ; Add with carry (stack relative) $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $60		; 50 60 ; Branch if overflow clear to $50, $60 [Flow: branch]
	cpx #$903A.w		; E0 3A 90 ; Compare #$903A.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$B87C.w		; E0 7C B8 ; Compare #$B87C.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$C17C.w		; E0 7C C1 ; Compare #$C17C.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$1D35.w		; E0 35 1D ; Compare #$1D35.w with X register [Reads: X Index] [Flags: NCZ]
	adc #$1D49.w		; 69 49 1D ; Add #$1D49.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$1DB5.w		; 69 B5 1D ; Add #$1DB5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$1DC9.w		; 69 C9 1D ; Add #$1DC9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$53B4.w		; 69 B4 53 ; Add #$53B4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$53C8.w		; 69 C8 53 ; Add #$53C8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$3D49.w		; 69 49 3D ; Add #$3D49.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $B15078.l,X		; 5F 78 50 B1 ; Exclusive OR accumulator with memory (long,X) $B15078.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4B.b		; 85 4B ; Store accumulator to $4B.b [Reads: Accumulator]
	sbc $22523B.l,X		; FF 3B 52 22 ; Subtract with carry (long,X) $22523B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($52.b),Y		; 91 52 ; Store accumulator ($52.b),Y [Reads: Direct Page, Y Index, Accumulator]
	jsl $FF6736.l		; 22 36 67 FF ; Jump to subroutine long $FF6736.l [Writes: Stack Pointer] [Flow: call]
	trb $5F.b		; 14 5F ; Test and reset bits $5F.b [Reads: Accumulator] [Flags: Z]
	jsl $22C915.l		; 22 15 C9 22 ; Jump to subroutine long $22C915.l [Writes: Stack Pointer] [Flow: call]
	and $C9.b,X		; 35 C9 ; Logical AND $C9.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$C949.w		; 69 49 C9 ; Add #$C949.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$C9B5.w		; 69 B5 C9 ; Add #$C9B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$C9C9.w		; 69 C9 C9 ; Add #$C9C9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$78A8.w		; 69 A8 78 ; Add #$78A8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $227AC8.l		; 22 C8 7A 22 ; Jump to subroutine long $227AC8.l [Writes: Stack Pointer] [Flow: call]
	ldy $8F.b,X		; B4 8F ; Load Y register $8F.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	stx $A822.w		; 8E 22 A8 ; Store X register to $A822.w [Reads: X Index]
	sty $3722.w		; 8C 22 37 ; Store Y register to $3722.w [Reads: Y Index]
	lda $2A.b,S		; A3 2A ; Load accumulator (stack relative) $2A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $A3.b,X		; 76 A3 ; Rotate right $A3.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx #$4F22.w		; A2 22 4F ; Load #$4F22.w into X register [Writes: X Index] [Flags: NZ]
	eor $5D8D29.l,X		; 5F 29 8D 5D ; Exclusive OR accumulator with memory (long,X) $5D8D29.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$634C.w		; 29 4C 63 ; Logical AND #$634C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $2D72.w		; 4C 72 2D ; Jump to $2D72.w [Flow: jump]
	eor $6B75.w,X		; 5D 75 6B ; Exclusive OR accumulator with memory $6B75.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $8C.b,X		; 36 8C ; Rotate left $8C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $93.b,X		; 34 93 ; Test bits $93.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$6A61.w		; A9 61 6A ; Load #$6A61.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sta ($6A.b,S),Y		; 93 6A ; Store accumulator (stack relative indirect indexed) ($6A.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc $3469.w,X		; FD 69 34 ; Subtract with carry $3469.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor ($B9.b)		; 52 B9 ; Exclusive OR accumulator with memory (indirect) ($B9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ror $D092.w,X		; 7E 92 D0 ; Rotate right $D092.w,X [Reads: X Index] [Flags: NCZ]
	ror $FE92.w,X		; 7E 92 FE ; Rotate right $FE92.w,X [Reads: X Index] [Flags: NCZ]
	inc $F2.b		; E6 F2 ; Increment $F2.b [Reads: Direct Page] [Flags: NZ]
	and $F9A3.w,Y		; 39 A3 F9 ; AND accumulator with memory $F9A3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda ($C4.b),Y		; B1 C4 ; Load accumulator ($C4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc #$62B0.w		; E9 B0 62 ; Subtract #$62B0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda ($22.b),Y		; B1 22 ; Load accumulator ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $D922.w		; CD 22 D9 ; Compare $D922.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $69		; B0 69 ; Branch if carry set to $B0, $69 [Flow: branch]
	ldy $FFA3.w,X		; BC A3 FF ; Load Y register $FFA3.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $63.b,S		; A3 63 ; Load accumulator (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $9B.b,S		; A3 9B ; Load accumulator (stack relative) $9B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc ($B6.b,X)		; E1 B6 ; Subtract with carry ($B6.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $B2B9.w,Y		; F9 B9 B2 ; Subtract with carry $B2B9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $0018.w		; 20 18 00 ; Jump to subroutine at $0018.w [Writes: Stack Pointer] [Flow: call]
	trb $2E83.w		; 1C 83 2E ; Test and reset bits $2E83.w [Reads: Accumulator] [Flags: Z]
	lda $02.b,S		; A3 02 ; Load accumulator (stack relative) $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $0CE1FF.l,X		; FF FF E1 0C ; Subtract with carry (long,X) $0CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$9D.b],Y		; 97 9D ; Store accumulator (long indexed) [$9D.b],Y [Reads: Direct Page, Y Index, Accumulator]
	jsr ($29FE.w,X)		; FC FE 29 ; Jump to subroutine indirect indexed ($29FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$1761.w		; A2 61 17 ; Load #$1761.w into X register [Writes: X Index] [Flags: NZ]
	eor [$63.b],Y		; 57 63 ; Exclusive OR accumulator with memory (long indexed) [$63.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $D4.b		; 14 D4 ; Test and reset bits $D4.b [Reads: Accumulator] [Flags: Z]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $24C9.w,X		; 5D C9 24 ; Exclusive OR accumulator with memory $24C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $4C04.w,X		; DD 04 4C ; Compare accumulator $4C04.w,X [Reads: X Index] [Flags: NCZ]
	cmp $FD04.w,X		; DD 04 FD ; Compare accumulator $FD04.w,X [Reads: X Index] [Flags: NCZ]
	adc $5FCB.w,X		; 7D CB 5F ; Add $5FCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$64.b],Y		; 57 64 ; Exclusive OR accumulator with memory (long indexed) [$64.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp $2364D4.l		; 5C D4 64 23 ; Jump long to $2364D4.l [Flow: jump]
	and [$67.b],Y		; 37 67 ; AND accumulator with memory (long indexed) [$67.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($B4.b,X)		; 21 B4 ; Logical AND ($B4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc [$24.b]		; 67 24 ; Add with carry (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FC08.w,Y		; D9 08 FC ; Compare accumulator $FC08.w,Y [Reads: Y Index] [Flags: NCZ]
	sta $4C99.w		; 8D 99 4C ; Store accumulator to $4C99.w [Reads: Accumulator]
	cmp $5B08.w,Y		; D9 08 5B ; Compare accumulator $5B08.w,Y [Reads: Y Index] [Flags: NCZ]
	and [$68.b],Y		; 37 68 ; AND accumulator with memory (long indexed) [$68.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $68B4.w,Y		; 59 B4 68 ; Exclusive OR accumulator with memory $68B4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $9B6D.w,X		; FD 6D 9B ; Subtract with carry $9B6D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	rep #$48		; C2 48 ; Reset processor status bits #$48 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$34		; C2 34
	cmp $4869.w,Y		; D9 69 48 ; Compare accumulator $4869.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $3B69.w,Y		; D9 69 3B ; Compare accumulator $3B69.w,Y [Reads: Y Index] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $DB.b,S		; 43 DB ; Exclusive OR accumulator with stack relative $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	trb $C479.w		; 1C 79 C4 ; Test and reset bits $C479.w [Reads: Accumulator] [Flags: Z]
	trb $79.b		; 14 79 ; Test and reset bits $79.b [Reads: Accumulator] [Flags: Z]
	cpy $09.b		; C4 09 ; Compare $09.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc ($14.b,X)		; 61 14 ; Add with carry ($14.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $229B14.l		; 22 14 9B 22 ; Jump to subroutine long $229B14.l [Writes: Stack Pointer] [Flow: call]
	and $6979.w		; 2D 79 69 ; Logical AND $6979.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $2B.b,S		; 43 2B ; Exclusive OR accumulator with stack relative $2B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $2232.w		; 20 32 22 ; Jump to subroutine at $2232.w [Writes: Stack Pointer] [Flow: call]
	and ($31.b,X)		; 21 31 ; Logical AND ($31.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc #$5014.w		; 69 14 50 ; Add #$5014.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $22505C.l		; 22 5C 50 22 ; Jump to subroutine long $22505C.l [Writes: Stack Pointer] [Flow: call]
	eor $6931.w,X		; 5D 31 69 ; Exclusive OR accumulator with memory $6931.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and ($22.b)		; 32 22 ; AND accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $3981.w,X		; FE 81 39 ; Increment memory $3981.w,X [Reads: X Index] [Flags: NZ]
	sbc $1D3941.l,X		; FF 41 39 1D ; Subtract with carry (long,X) $1D3941.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($B8FB.w,X)		; 7C FB B8 ; Jump indirect indexed to ($B8FB.w,X) [Reads: X Index] [Flow: jump]
	bit $B433.w,X		; 3C 33 B4 ; Test bits $B433.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $B4.b,X		; 34 B4 ; Test bits $B4.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $C871.w,X		; 3C 71 C8 ; Test bits $C871.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $B471.w,X		; 3C 71 B4 ; Test bits $B471.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	lsr $BD34.w		; 4E 34 BD ; Logical shift right $BD34.w [Flags: NCZ]
	.db $42, $F9		; 42 F9 ; Reserved instruction
	sta $F9BE.w,X		; 9D BE F9 ; Store accumulator to $F9BE.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($B6.b)		; 92 B6 ; Store accumulator (indirect) ($B6.b) [Reads: Direct Page, Accumulator]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sta ($B6.b)		; 92 B6 ; Store accumulator (indirect) ($B6.b) [Reads: Direct Page, Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sta $9FD3FA.l,X		; 9F FA D3 9F ; Store accumulator (long,X) $9FD3FA.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda [$88.b]		; A7 88 ; Load accumulator (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $A7		; D0 A7 ; Branch if not equal to $D0, $A7 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pei ($88.b)		; D4 88 ; Push effective indirect address ($88.b) [Reads: Direct Page] [Writes: Stack Pointer]
	.db $D0, $D4		; D0 D4 ; Branch if not equal to $D0, $D4 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $70.b,S		; A3 70 ; Load accumulator (stack relative) $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $70, $BB		; 70 BB ; Branch if overflow set to $70, $BB [Flow: branch]
	ldx #$C771.w		; A2 71 C7 ; Load #$C771.w into X register [Writes: X Index] [Flags: NZ]
	ldx #$FF71.w		; A2 71 FF ; Load #$FF71.w into X register [Writes: X Index] [Flags: NZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $021C80.l,X		; FF 80 1C 02 ; Subtract with carry (long,X) $021C80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $2E12.w		; 1C 12 2E ; Test and reset bits $2E12.w [Reads: Accumulator] [Flags: Z]
	adc ($1C.b,X)		; 61 1C ; Add with carry ($1C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $00, $81		; 62 00 81 ; Push effective relative address $62, $00, $81 [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $391C26.l,X		; FF 26 1C 39 ; Subtract with carry (long,X) $391C26.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $DB.b,S		; 23 DB ; AND accumulator with stack relative $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $DB62.w,Y		; 39 62 DB ; AND accumulator with memory $DB62.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jsr ($00B1.w,X)		; FC B1 00 ; Jump to subroutine indirect indexed ($00B1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $FC6122.l		; 2F 22 61 FC ; AND accumulator with memory (long) $FC6122.l [Writes: Accumulator] [Flags: NZ]
	lda $FC01.w,Y		; B9 01 FC ; Load $FC01.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $0111.w,X		; 3E 11 01 ; Rotate left $0111.w,X [Reads: X Index] [Flags: NCZ]
	inc $0211.w,X		; FE 11 02 ; Increment memory $0211.w,X [Reads: X Index] [Flags: NZ]
	sta ($23.b)		; 92 23 ; Store accumulator (indirect) ($23.b) [Reads: Direct Page, Accumulator]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($06.b)		; 12 06 ; OR accumulator with memory (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $3F02A2.l,X		; FF A2 02 3F ; Subtract with carry (long,X) $3F02A2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($02.b,S),Y		; 93 02 ; Store accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda $93.b,X		; B5 93 ; Load $93.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$5F03.w		; A9 03 5F ; Load #$5F03.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $72FF03.l		; 2F 03 FF 72 ; AND accumulator with memory (long) $72FF03.l [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $C832.w,X		; FD 32 C8 ; Subtract with carry $C832.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $633C.w		; 4E 3C 63 ; Logical shift right $633C.w [Flags: NCZ]
	sbc $4938.w,X		; FD 38 49 ; Subtract with carry $4938.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FF0487.l,X		; 5F 87 04 FF ; Exclusive OR accumulator with memory (long,X) $FF0487.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	dec $643C.w,X		; DE 3C 64 ; Decrement memory $643C.w,X [Reads: X Index] [Flags: NZ]
	sbc $38E1.w,X		; FD E1 38 ; Subtract with carry $38E1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($3221.w,X)		; FC 21 32 ; Jump to subroutine indirect indexed ($3221.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stz $58.b,X		; 74 58 ; Store zero to $58.b,X [Reads: X Index]
	and ($70.b,S),Y		; 33 70 ; AND accumulator (stack relative indirect indexed) ($70.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $34.b,X		; 56 34 ; Logical shift right $34.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $70, $58		; 70 58 ; Branch if overflow set to $70, $58 [Flow: branch]
	adc ($84.b),Y		; 71 84 ; Add with carry ($84.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc ($70.b),Y		; 71 70 ; Add with carry ($70.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $79.b,X		; 34 79 ; Test bits $79.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	lsr $4BF9.w,X		; 5E F9 4B ; Logical shift right $4BF9.w,X [Reads: X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jsl $69284A.l		; 22 4A 28 69 ; Jump to subroutine long $69284A.l [Writes: Stack Pointer] [Flow: call]
	eor #$696B.w		; 49 6B 69 ; Exclusive OR #$696B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $8F43FA.l		; 8F FA 43 8F ; Store accumulator (long) $8F43FA.l [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $43.b,S		; C3 43 ; Compare accumulator (stack relative) $43.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($43.b,S),Y		; D3 43 ; Compare accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rol $9030.w		; 2E 30 90 ; Rotate left $9030.w [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	eor $5FA0FA.l,X		; 5F FA A0 5F ; Exclusive OR accumulator with memory (long,X) $5FA0FA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $5FA8.w,X		; 5E A8 5F ; Logical shift right $5FA8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $42CA.w,X		; 5E CA 42 ; Logical shift right $42CA.w,X [Reads: X Index] [Flags: NCZ]
	jsr ($1097.w,X)		; FC 97 10 ; Jump to subroutine indirect indexed ($1097.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$10CA.w		; C0 CA 10 ; Compare #$10CA.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$A30B.w		; C0 0B A3 ; Compare #$A30B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$A34B.w		; C0 4B A3 ; Compare #$A34B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$A38B.w		; C0 8B A3 ; Compare #$A38B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$A3CA.w		; C0 CA A3 ; Compare #$A3CA.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$E000.w		; C0 00 E0 ; Compare #$E000.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	ora $C013.w		; 0D 13 C0 ; Logical OR $C013.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $C053.w		; 0D 53 C0 ; Logical OR $C053.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $C090.w		; 0D 90 C0 ; Logical OR $C090.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	sbc $04E2FF.l,X		; FF FF E2 04 ; Subtract with carry (long,X) $04E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	asl $E6D8.w		; 0E D8 E6 ; Arithmetic shift left $E6D8.w [Flags: NCZ]
	.db $10, $88		; 10 88 ; Branch if plus to $10, $88 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	adc ($E8.b,X)		; 61 E8 ; Add with carry ($E8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $62, $B0, $11		; 62 B0 11 ; Push effective relative address $62, $B0, $11 [Writes: Stack Pointer]
	sbc $E23395.l,X		; FF 95 33 E2 ; Subtract with carry (long,X) $E23395.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $73.b,X		; 95 73 ; Store accumulator to $73.b,X [Reads: Accumulator, X Index]
	sep #$CD		; E2 CD ; Set processor status bits #$CD [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	and ($E2.b,S),Y		; 33 E2 ; AND accumulator (stack relative indirect indexed) ($E2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $E273.w		; CD 73 E2 ; Compare $E273.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $609A.w,Y		; F9 9A 60 ; Subtract with carry $609A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $889A.w,Y		; F9 9A 88 ; Subtract with carry $889A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $38D6.w,Y		; F9 D6 38 ; Subtract with carry $38D6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $60D6.w,Y		; F9 D6 60 ; Subtract with carry $60D6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $88D6.w,Y		; F9 D6 88 ; Subtract with carry $88D6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $23B3.w,Y		; F9 B3 23 ; Subtract with carry $23B3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($69.b,S),Y		; B3 69 ; Load accumulator (stack relative indirect indexed) ($69.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	and $88.b,S		; 23 88 ; AND accumulator with stack relative $88.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	adc #$A888.w		; 69 88 A8 ; Add #$A888.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	and ($A8.b,S),Y		; 33 A8 ; AND accumulator (stack relative indirect indexed) ($A8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	and ($BA.b,S),Y		; 33 BA ; AND accumulator (stack relative indirect indexed) ($BA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $30, $70		; 30 70 ; Branch if minus to $30, $70 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	and ($71.b,S),Y		; 33 71 ; AND accumulator (stack relative indirect indexed) ($71.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$33.b]		; C7 33 ; Compare accumulator (long) [$33.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	adc ($BB.b),Y		; 71 BB ; Add with carry ($BB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($C771.w,X)		; 7C 71 C7 ; Jump indirect indexed to ($C771.w,X) [Reads: X Index] [Flow: jump]
	jmp ($AC71.w,X)		; 7C 71 AC ; Jump indirect indexed to ($AC71.w,X) [Reads: X Index] [Flow: jump]
	clv		; B8 ; Clear overflow flag [Flags: V]
	bit $AC.b,X		; 34 AC ; Test bits $AC.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	lda $D5B171.l,X		; BF 71 B1 D5 ; Load long $D5B171.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $D0.b,X		; 34 D0 ; Test bits $D0.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc ($C8.b),Y		; 71 C8 ; Add with carry ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	bit $B8.b,X		; 34 B8 ; Test bits $B8.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	.db $30, $34		; 30 34 ; Branch if minus to $30, $34 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldy $22.b,X		; B4 22 ; Load Y register $22.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $22.b,X		; B4 22 ; Load Y register $22.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda #$69B6.w		; A9 B6 69 ; Load #$69B6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsl $69B6D5.l		; 22 D5 B6 69 ; Jump to subroutine long $69B6D5.l [Writes: Stack Pointer] [Flow: call]
	inc $3881.w,X		; FE 81 38 ; Increment memory $3881.w,X [Reads: X Index] [Flags: NZ]
	sbc $993841.l,X		; FF 41 38 99 ; Subtract with carry (long,X) $993841.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sbc $BAE1.w,Y		; F9 E1 BA ; Subtract with carry $BAE1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C3BB.w,Y		; F9 BB C3 ; Subtract with carry $C3BB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($DF88.w,X)		; FC 88 DF ; Jump to subroutine indirect indexed ($DF88.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda ($DC.b,X)		; A1 DC ; Load accumulator ($DC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$A3.b],Y		; F7 A3 ; Subtract with carry (long indexed) [$A3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $162AFF.l,X		; FF FF 2A 16 ; Subtract with carry (long,X) $162AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $FF1E.w		; 20 1E FF ; Jump to subroutine at $FF1E.w [Writes: Stack Pointer] [Flow: call]
	sbc $A800E9.l,X		; FF E9 00 A8 ; Subtract with carry (long,X) $A800E9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	dec $A0B0.w,X		; DE B0 A0 ; Decrement memory $A0B0.w,X [Reads: X Index] [Flags: NZ]
	dec $A8B8.w,X		; DE B8 A8 ; Decrement memory $A8B8.w,X [Reads: X Index] [Flags: NZ]
	dec $A0C0.w,X		; DE C0 A0 ; Decrement memory $A0C0.w,X [Reads: X Index] [Flags: NZ]
	dec $A8C8.w,X		; DE C8 A8 ; Decrement memory $A8C8.w,X [Reads: X Index] [Flags: NZ]
	dec $A0D0.w,X		; DE D0 A0 ; Decrement memory $A0D0.w,X [Reads: X Index] [Flags: NZ]
	dec $FFFF.w,X		; DE FF FF ; Decrement memory $FFFF.w,X [Reads: X Index] [Flags: NZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($18.b,X)		; 81 18 ; Store accumulator ($18.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $14E2FF.l,X		; FF FF E2 14 ; Subtract with carry (long,X) $14E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	sta $88FC.w,X		; 9D FC 88 ; Store accumulator to $88FC.w,X [Reads: Accumulator, X Index]
	rol $880D.w		; 2E 0D 88 ; Rotate left $880D.w [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $12D8.w		; 0E D8 12 ; Arithmetic shift left $12D8.w [Flags: NCZ]
	ora $1066D8.l		; 0F D8 66 10 ; OR accumulator with memory (long) $1066D8.l [Writes: Accumulator] [Flags: NZ]
	bit #$6131.w		; 89 31 61 ; Test bits #$6131.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc #$6231.w		; E9 31 62 ; Subtract #$6231.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	bit $0193.w		; 2C 93 01 ; Test bits $0193.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jsr ($0079.w,X)		; FC 79 00 ; Jump to subroutine indirect indexed ($0079.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $61A2.w,X		; 1D A2 61 ; OR accumulator with memory $61A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($C17C.w,X)		; FC 7C C1 ; Jump to subroutine indirect indexed ($C17C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $A502CF.l		; 2F CF 02 A5 ; AND accumulator with memory (long) $A502CF.l [Writes: Accumulator] [Flags: NZ]
	cpy $C502.w		; CC 02 C5 ; Compare $C502.w with Y register [Reads: Y Index] [Flags: NCZ]
	ldx #$FF62.w		; A2 62 FF ; Load #$FF62.w into X register [Writes: X Index] [Flags: NZ]
	trb $FFC3.w		; 1C C3 FF ; Test and reset bits $FFC3.w [Reads: Accumulator] [Flags: Z]
	ora $FE02.w,Y		; 19 02 FE ; OR accumulator with memory $FE02.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $AC00.w,Y		; B9 00 AC ; Load $AC00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $61.b,S		; A3 61 ; Load accumulator (stack relative) $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $44BB.w,X		; FE BB 44 ; Increment memory $44BB.w,X [Reads: X Index] [Flags: NZ]
	lsr $B7.b,X		; 56 B7 ; Logical shift right $B7.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $62.b,S		; A3 62 ; Load accumulator (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $461B.w,X		; FD 1B 46 ; Subtract with carry $461B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0219.w,X		; FD 19 02 ; Subtract with carry $0219.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	and $70.b,S		; 23 70 ; AND accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $70, $37		; 70 37 ; Branch if overflow set to $70, $37 [Flow: branch]
	jsl $224B71.l		; 22 71 4B 22 ; Jump to subroutine long $224B71.l [Writes: Stack Pointer] [Flow: call]
	adc ($2B.b),Y		; 71 2B ; Add with carry ($2B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($33.b,S),Y		; 53 33 ; XOR accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora #$9028.w		; 09 28 90 ; Logical OR #$9028.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$9138.w		; 69 38 91 ; Add #$9138.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $88.b		; 06 88 ; Arithmetic shift left $88.b [Reads: Direct Page] [Flags: NCZ]
	bit $EC76.w,X		; 3C 76 EC ; Test bits $EC76.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $BF77.w,X		; 3C 77 BF ; Test bits $BF77.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	trb $F9.b		; 14 F9 ; Test and reset bits $F9.b [Reads: Accumulator] [Flags: Z]
	.db $B0, $11		; B0 11 ; Branch if carry set to $B0, $11 [Flow: branch]
	ora $B0.b		; 05 B0 ; Logical OR $B0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$A806.w		; 69 06 A8 ; Add #$A806.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	rol $A833.w		; 2E 33 A8 ; Rotate left $A833.w [Flags: NCZ]
	rol $A833.w,X		; 3E 33 A8 ; Rotate left $A833.w,X [Reads: X Index] [Flags: NCZ]
	lsr $AA33.w		; 4E 33 AA ; Logical shift right $AA33.w [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $AA.b,X		; 34 AA ; Test bits $AA.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $AA71.w		; 2C 71 AA ; Test bits $AA71.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jmp $2CD634.l		; 5C 34 D6 2C ; Jump long to $2CD634.l [Flow: jump]
	adc ($B8.b),Y		; 71 B8 ; Add with carry ($B8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($5E.b,X)		; 41 5E ; Exclusive OR accumulator with memory ($5E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFB403.l,X		; FF 03 B4 FF ; Subtract with carry (long,X) $FFB403.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $34.b		; 05 34 ; Logical OR $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($43.b,S),Y		; B3 43 ; Load accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($42C2.w,X)		; FC C2 42 ; Jump to subroutine indirect indexed ($42C2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($912B.w,X)		; FC 2B 91 ; Jump to subroutine indirect indexed ($912B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $B858.w,X		; FE 58 B8 ; Increment memory $B858.w,X [Reads: X Index] [Flags: NZ]
	eor $78.b,X		; 55 78 ; Exclusive OR accumulator with memory $78.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor $98.b,X		; 55 98 ; Exclusive OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor $58.b,X		; 55 58 ; Exclusive OR accumulator with memory $58.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $56		; D0 56 ; Branch if not equal to $D0, $56 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $D0, $56		; D0 56 ; Branch if not equal to $D0, $56 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $56		; D0 56 ; Branch if not equal to $D0, $56 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora ($A0.b,S),Y		; 13 A0 ; OR accumulator (stack relative indirect indexed) ($A0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor $13DCA1.l,X		; 5F A1 DC 13 ; Exclusive OR accumulator with memory (long,X) $13DCA1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$77DC.w		; A2 DC 77 ; Load #$77DC.w into X register [Writes: X Index] [Flags: NZ]
	lda $07.b,S		; A3 07 ; Load accumulator (stack relative) $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($60.b),Y		; 91 60 ; Store accumulator ($60.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora $5FC0DD.l,X		; 1F DD C0 5F ; Logical OR long $5FC0DD.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $9FC0.w,X		; DD C0 9F ; Compare accumulator $9FC0.w,X [Reads: X Index] [Flags: NCZ]
	cmp $D5C0.w,X		; DD C0 D5 ; Compare accumulator $D5C0.w,X [Reads: X Index] [Flags: NCZ]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp $D2.b,X		; D5 D2 ; Compare accumulator $D2.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cpy #$91F3.w		; C0 F3 91 ; Compare #$91F3.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor [$86.b],Y		; 57 86 ; Exclusive OR accumulator with memory (long indexed) [$86.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$868D.w		; C0 8D 86 ; Compare #$868D.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$930C.w		; C0 0C 93 ; Compare #$930C.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D20C.w		; C0 0C D2 ; Compare #$D20C.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $80, $28		; 80 28 ; Branch always to $80, $28 [Flow: branch]
	sbc $04E2FF.l,X		; FF FF E2 04 ; Subtract with carry (long,X) $04E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0091.w,X)		; FC 91 00 ; Jump to subroutine indirect indexed ($0091.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $21.b		; 24 21 ; Test bits $21.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $01.b		; 26 01 ; Rotate left $01.b [Reads: Direct Page] [Flags: NCZ]
	jsr ($4492.w,X)		; FC 92 44 ; Jump to subroutine indirect indexed ($4492.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($4022.w,X)		; FC 22 40 ; Jump to subroutine indirect indexed ($4022.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($4123.w,X)		; FC 23 41 ; Jump to subroutine indirect indexed ($4123.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	rol $02.b,X		; 36 02 ; Rotate left $02.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	jsr ($4593.w,X)		; FC 93 45 ; Jump to subroutine indirect indexed ($4593.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $47.b		; 24 47 ; Test bits $47.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc ($20.b,X)		; 61 20 ; Add with carry ($20.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FC01.w,X		; 5D 01 FC ; Exclusive OR accumulator with memory $FC01.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $C4.b,X		; 95 C4 ; Store accumulator to $C4.b,X [Reads: Accumulator, X Index]
	jsr ($C045.w,X)		; FC 45 C0 ; Jump to subroutine indirect indexed ($C045.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($C146.w,X)		; FC 46 C1 ; Jump to subroutine indirect indexed ($C146.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr $026D.w		; 20 6D 02 ; Jump to subroutine at $026D.w [Writes: Stack Pointer] [Flow: call]
	jsr ($C596.w,X)		; FC 96 C5 ; Jump to subroutine indirect indexed ($C596.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $7E.b		; 24 7E ; Test bits $7E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $FC01.w		; 8E 01 FC ; Store X register to $FC01.w [Reads: X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy $FC.b		; C4 FC ; Compare $FC.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cpy #$29FC.w		; C0 FC 29 ; Compare #$29FC.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp ($18.b,X)		; C1 18 ; Compare accumulator ($18.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	stz $FC02.w,X		; [PATTERN: Memory clearing operation] 9E 02 FC ; Store zero to $FC02.w,X [Reads: X Index]
	sta $24C5.w,Y		; 99 C5 24 ; Store accumulator to $24C5.w,Y [Reads: Y Index, Accumulator]
	lda $C52061.l		; AF 61 20 C5 ; Load long $C52061.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $FC44.w		; 9C 44 FC ; Store zero to $FC44.w
	jmp $FC40.w		; 4C 40 FC ; Jump to $FC40.w [Flow: jump]
	eor $2041.w		; 4D 41 20 ; Exclusive OR $2041.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $02.b,X		; D5 02 ; Compare accumulator $02.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	jsr ($459D.w,X)		; FC 9D 45 ; Jump to subroutine indirect indexed ($459D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $E5.b		; 24 E5 ; Test bits $E5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $FD81.w,X		; 9E 81 FD ; Store zero to $FD81.w,X [Reads: X Index]
	and ($02.b),Y		; 31 02 ; AND accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp $6221.w		; 4C 21 62 ; Jump to $6221.w [Flow: jump]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and $01.b		; 25 01 ; Logical AND $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $4632.w,X		; FD 32 46 ; Subtract with carry $4632.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4282.w,X		; FD 82 42 ; Subtract with carry $4282.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4383.w,X		; FD 83 43 ; Subtract with carry $4383.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and $02.b,X		; 35 02 ; Logical AND $02.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $4733.w,X		; FD 33 47 ; Subtract with carry $4733.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $6247.w		; 4C 47 62 ; Jump to $6247.w [Flow: jump]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lsr $FD01.w,X		; 5E 01 FD ; Logical shift right $FD01.w,X [Reads: X Index] [Flags: NCZ]
	and $C6.b,X		; 35 C6 ; Logical AND $C6.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $C2A5.w,X		; FD A5 C2 ; Subtract with carry $C2A5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C3A6.w,X		; FD A6 C3 ; Subtract with carry $C3A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ror $FD02.w		; 6E 02 FD ; Rotate right $FD02.w [Flags: NCZ]
	rol $C7.b,X		; 36 C7 ; Rotate left $C7.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	jmp $627E.w		; 4C 7E 62 ; Jump to $627E.w [Flow: jump]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $FD01.w		; 8D 01 FD ; Store accumulator to $FD01.w [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	dec $FD.b		; C6 FD ; Decrement $FD.b [Reads: Direct Page] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$FD		; C2 FD
	bit #$58C3.w		; 89 C3 58 ; Test bits #$58C3.w with accumulator [Reads: Accumulator] [Flags: Z]
	sta $FD02.w,X		; 9D 02 FD ; Store accumulator to $FD02.w,X [Reads: Accumulator, X Index]
	and $4CC7.w,Y		; 39 C7 4C ; AND accumulator with memory $4CC7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $C65862.l		; AF 62 58 C6 ; Load long $C65862.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $FD46.w,X		; 3C 46 FD ; Test bits $FD46.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ldy $5842.w		; AC 42 58 ; Load $5842.w into Y register [Writes: Y Index] [Flags: NZ]
	dec $02.b,X		; D6 02 ; Decrement memory $02.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $43AD.w,X		; FD AD 43 ; Subtract with carry $43AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $62E1.w		; 4C E1 62 ; Jump to $62E1.w [Flow: jump]
	sbc $833E.w,X		; FD 3E 83 ; Subtract with carry $833E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $473D.w,X		; FD 3D 47 ; Subtract with carry $473D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($27.b),Y		; 31 27 ; AND accumulator with memory ($27.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $31.b,S		; E3 31 ; Subtract stack-relative $31.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	adc $E3.b		; 65 E3 ; Add $E3.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and ($87.b),Y		; 31 87 ; AND accumulator with memory ($87.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpx $31.b		; E4 31 ; Compare $31.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $E4.b		; C5 E4 ; Compare $E4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora ($F9.b,S),Y		; 13 F9 ; OR accumulator (stack relative indirect indexed) ($F9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$055D.w		; C0 5D 05 ; Compare #$055D.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$4405.w		; C0 05 44 ; Compare #$4405.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$5405.w		; C0 05 54 ; Compare #$5405.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $7C0560.l		; 5C 60 05 7C ; Jump long to $7C0560.l [Flow: jump]
	cpy #$AC05.w		; C0 05 AC ; Compare #$AC05.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$BC05.w		; C0 05 BC ; Compare #$BC05.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $60.b		; C5 60 ; Compare $60.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $E4.b		; 05 E4 ; Logical OR $E4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$F005.w		; C0 05 F0 ; Compare #$F005.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $5D.b		; 00 5D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	eor $C0E4.w,X		; 5D E4 C0 ; Exclusive OR accumulator with memory $C0E4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $C0AC.w,X		; 5D AC C0 ; Exclusive OR accumulator with memory $C0AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $00BC.w,X		; 5D BC 00 ; Exclusive OR accumulator with memory $00BC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($7E.b),Y		; 71 7E ; Add with carry ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $C07C.w,X		; 5D 7C C0 ; Exclusive OR accumulator with memory $C07C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $C044.w,X		; 5D 44 C0 ; Exclusive OR accumulator with memory $C044.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $0054.w,X		; 5D 54 00 ; Exclusive OR accumulator with memory $0054.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($24.b),Y		; 71 24 ; Add with carry ($24.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0C51FF.l,X		; FF FF 51 0C ; Subtract with carry (long,X) $0C51FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $43.b,S		; 23 43 ; AND accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and $79.b,S		; 23 79 ; AND accumulator with stack relative $79.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jsr ($C851.w,X)		; FC 51 C8 ; Jump to subroutine indirect indexed ($C851.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CA91.w,X)		; FC 91 CA ; Jump to subroutine indirect indexed ($CA91.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $2C.b		; 24 2C ; Test bits $2C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $FC.b		; 64 FC ; Store zero to $FC.b
	sta ($0E.b,S),Y		; 93 0E ; Store accumulator (stack relative indirect indexed) ($0E.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	bit $32.b,X		; 34 32 ; Test bits $32.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $FD63.w		; 2C 63 FD ; Test bits $FD63.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and ($0C.b,S),Y		; 33 0C ; AND accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $C831.w,X		; FD 31 C8 ; Subtract with carry $C831.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $CA71.w,X		; FD 71 CA ; Subtract with carry $CA71.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$2D.b],Y		; 17 2D ; OR accumulator with memory (long indexed) [$2D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $2589.w,Y		; 59 89 25 ; Exclusive OR accumulator with memory $2589.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tsb $5F.b		; 04 5F ; Test and set bits $5F.b [Reads: Accumulator] [Flags: Z]
	and $FD64.w		; 2D 64 FD ; Logical AND $FD64.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $238B.w,Y		; 79 8B 23 ; Add $238B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $3B.b,S		; 23 3B ; AND accumulator with stack relative $3B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	bit $1D.b,X		; 34 1D ; Test bits $1D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	adc #$1D48.w		; 69 48 1D ; Add #$1D48.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$E3FC.w		; 69 FC E3 ; Add #$E3FC.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and ($4C.b)		; 32 4C ; AND accumulator with memory (indirect) ($4C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	jmp $6986.w		; 4C 86 69 ; Jump to $6986.w [Flow: jump]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $50, $38		; 50 38 ; Branch if overflow clear to $50, $38 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $50, $68		; 50 68 ; Branch if overflow clear to $50, $68 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	ora [$AE.b],Y		; 17 AE ; OR accumulator with memory (long indexed) [$AE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $AE5F.w,X		; FE 5F AE ; Increment memory $AE5F.w,X [Reads: X Index] [Flags: NZ]
	inc $AF27.w,X		; FE 27 AF ; Increment memory $AF27.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and [$B7.b]		; 27 B7 ; AND accumulator with memory (long) [$B7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor [$AF.b],Y		; 57 AF ; Exclusive OR accumulator with memory (long indexed) [$AF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor [$B7.b],Y		; 57 B7 ; Exclusive OR accumulator with memory (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rol $A9.b,X		; 36 A9 ; Rotate left $A9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $A93E.w,Y		; F9 3E A9 ; Subtract with carry $A93E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A946.w,Y		; F9 46 A9 ; Subtract with carry $A946.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A815.w,Y		; F9 15 A8 ; Subtract with carry $A815.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $22A84D.l		; 22 4D A8 22 ; Jump to subroutine long $22A84D.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	cpy $33.b		; C4 33 ; Compare $33.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	bit $C2.b,X		; 34 C2 ; Test bits $C2.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	cpy $71.b		; C4 71 ; Compare $71.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	bit $D6.b,X		; 34 D6 ; Test bits $D6.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $48.b,X		; 34 48 ; Test bits $48.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	cpy $71.b		; C4 71 ; Compare $71.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	and $F9CA.w,X		; 3D CA F9 ; AND accumulator with memory $F9CA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $FAE8.w,Y		; 39 E8 FA ; AND accumulator with memory $FAE8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx $880D.w		; AE 0D 88 ; Load $880D.w into X register [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	asl $92D8.w		; 0E D8 92 ; Arithmetic shift left $92D8.w [Flags: NCZ]
	ora $10E6D8.l		; 0F D8 E6 10 ; OR accumulator with memory (long) $10E6D8.l [Writes: Accumulator] [Flags: NZ]
	bit #$61B1.w		; 89 B1 61 ; Test bits #$61B1.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc #$62B1.w		; E9 B1 62 ; Subtract #$62B1.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $C8.b,X		; B5 C8 ; Load $C8.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda ($3F.b),Y		; B1 3F ; Load accumulator ($3F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$79B7.w		; A9 B7 79 ; Load #$79B7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cmp $40.b,X		; D5 40 ; Compare accumulator $40.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $B7.b,X		; D5 B7 ; Compare accumulator $B7.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($A0.b,S),Y		; 93 A0 ; Store accumulator (stack relative indirect indexed) ($A0.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp $93DCA1.l,X		; DF A1 DC 93 ; Compare accumulator (long,X) $93DCA1.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ldx #$F7DC.w		; A2 DC F7 ; Load #$F7DC.w into X register [Writes: X Index] [Flags: NZ]
	lda $FF.b,S		; A3 FF ; Load accumulator (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $222E82.l,X		; FF 82 2E 22 ; Subtract with carry (long,X) $222E82.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $1800.w		; 2E 00 18 ; Rotate left $1800.w [Flags: NCZ]
	.db $42, $02		; 42 02 ; Reserved instruction
	sbc $18E9FF.l,X		; FF FF E9 18 ; Subtract with carry (long,X) $18E9FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$6122.w		; 69 22 61 ; Add #$6122.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $40A1.w,X		; FD A1 40 ; Subtract with carry $40A1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	ora [$01.b],Y		; 17 01 ; OR accumulator with memory (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $D14241.l,X		; FF 41 42 D1 ; Subtract with carry (long,X) $D14241.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $62.b		; 24 62 ; Test bits $62.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sbc $A14344.l,X		; FF 44 43 A1 ; Subtract with carry (long,X) $A14344.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: NCZ]
	sbc $04A5.w,X		; FD A5 04 ; Subtract with carry $04A5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $53		; 50 53 ; Branch if overflow clear to $50, $53 [Flow: branch]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($22.b,X)		; 41 22 ; Exclusive OR accumulator with memory ($22.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FD, $01		; 62 FD 01 ; Push effective relative address $62, $FD, $01 [Writes: Stack Pointer]
	.db $42, $38		; 42 38 ; Reserved instruction
	ora $01.b,X		; 15 01 ; OR accumulator with memory $01.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and #$6122.w		; 29 22 61 ; Logical AND #$6122.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($40A1.w,X)		; FC A1 40 ; Jump to subroutine indirect indexed ($40A1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($04A5.w,X)		; FC A5 04 ; Jump to subroutine indirect indexed ($04A5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor ($01.b)		; 52 01 ; Exclusive OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($0025.w,X)		; FC 25 00 ; Jump to subroutine indirect indexed ($0025.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $8346.w,X		; FE 46 83 ; Increment memory $8346.w,X [Reads: X Index] [Flags: NZ]
	.db $90, $53		; 90 53 ; Branch if carry clear to $90, $53 [Flow: branch]
	.db $62, $FE, $44		; 62 FE 44 ; Push effective relative address $62, $FE, $44 [Writes: Stack Pointer]
	eor [$38.b]		; 47 38 ; Exclusive OR accumulator with memory (long) [$38.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $70.b,S		; A3 70 ; Load accumulator (stack relative) $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $70, $37		; 70 37 ; Branch if overflow set to $70, $37 [Flow: branch]
	ldx #$4B71.w		; A2 71 4B ; Load #$4B71.w into X register [Writes: X Index] [Flags: NZ]
	ldx #$2B71.w		; A2 71 2B ; Load #$2B71.w into X register [Writes: X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor ($BB.b,S),Y		; 53 BB ; XOR accumulator (stack relative indirect indexed) ($BB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; [PATTERN: Memory clearing operation] FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $50, $5E		; 50 5E ; Branch if overflow clear to $50, $5E [Flow: branch]
	sta ($17.b,S),Y		; 93 17 ; Store accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	stz $5FFE.w,X		; 9E FE 5F ; Store zero to $5FFE.w,X [Reads: X Index]
	stz $FDFE.w,X		; 9E FE FD ; Store zero to $FDFE.w,X [Reads: X Index]
	sbc ($24.b)		; F2 24 ; Subtract with carry (indirect) ($24.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00EF12.l,X		; FF 12 EF 00 ; Subtract with carry (long,X) $00EF12.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0900.w		; 0C 00 09 ; Test and set bits $0900.w [Reads: Accumulator] [Flags: Z]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $13		; 50 13 ; Branch if overflow clear to $50, $13 [Flow: branch]
	cpy #$1062.w		; C0 62 10 ; Compare #$1062.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc ($17.b,X)		; E1 17 ; Subtract with carry ($17.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$56A3.w		; C0 A3 56 ; Compare #$56A3.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$56E1.w		; C0 E1 56 ; Compare #$56E1.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sty $15.b,X		; 94 15 ; Store Y register $15.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	dec $FFFF.w		; CE FF FF ; Decrement $FFFF.w [Flags: NZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $61.b,X		; 36 61 ; Rotate left $61.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A200E2.l,X		; FF E2 00 A2 ; Subtract with carry (long,X) $A200E2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cop $C6.b		; 02 C6 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor #$CEF9.w		; 49 F9 CE ; Exclusive OR #$CEF9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$D6F9.w		; 49 F9 D6 ; Exclusive OR #$D6F9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$FFF9.w		; 49 F9 FF ; Exclusive OR #$FFF9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($ED.b)		; 12 ED ; OR accumulator with memory (indirect) ($ED.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$1F.b],Y		; 97 1F ; Store accumulator (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $921E.w,X		; 9E 1E 92 ; Store zero to $921E.w,X [Reads: X Index]
	sta [$67.b],Y		; 97 67 ; Store accumulator (long indexed) [$67.b],Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc #$6239.w		; E9 39 62 ; Subtract #$6239.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($0D.b,S),Y		; B3 0D ; Load accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp [$0E.b]		; C7 0E ; Compare accumulator (long) [$0E.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	mvn $0F,$93		; 54 93 0F ; Move block negative $0F,$93 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $10,$E7		; 54 E7 10 ; Move block negative $10,$E7 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc #$62B4.w		; 69 B4 62 ; Add #$62B4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora #$61B4.w		; 09 B4 61 ; Logical OR #$61B4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($0D.b,S),Y		; B3 0D ; Load accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp [$0E.b]		; C7 0E ; Compare accumulator (long) [$0E.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	lda $0191.w		; AD 91 01 ; Load $0191.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pei ($93.b)		; D4 93 ; Push effective indirect address ($93.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ora $10E7D4.l		; 0F D4 E7 10 ; OR accumulator with memory (long) $10E7D4.l [Writes: Accumulator] [Flags: NZ]
	bit #$61B4.w		; 89 B4 61 ; Test bits #$61B4.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc #$62B4.w		; E9 B4 62 ; Subtract #$62B4.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $B8		; B0 B8 ; Branch if carry set to $B0, $B8 [Flow: branch]
	lsr $C9B0.w,X		; 5E B0 C9 ; Logical shift right $C9B0.w,X [Reads: X Index] [Flags: NCZ]
	lsr $B0B8.w,X		; 5E B8 B0 ; Logical shift right $B0B8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $C2BA.w,X		; 5E BA C2 ; Logical shift right $C2BA.w,X [Reads: X Index] [Flags: NCZ]
	jsr ($D0B8.w,X)		; FC B8 D0 ; Jump to subroutine indirect indexed ($D0B8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lsr $9009.w,X		; 5E 09 90 ; Logical shift right $9009.w,X [Reads: X Index] [Flags: NCZ]
	ldy #$D809.w		; A0 09 D8 ; Load #$D809.w into Y register [Writes: Y Index] [Flags: NZ]
	lda ($D9.b,X)		; A1 D9 ; Load accumulator ($D9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $A2		; 90 A2 ; Branch if carry clear to $90, $A2 [Flow: branch]
	cmp $A3F4.w,Y		; D9 F4 A3 ; Compare accumulator $A3F4.w,Y [Reads: Y Index] [Flags: NCZ]
	eor $A290.w,Y		; 59 90 A2 ; Exclusive OR accumulator with memory $A290.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $A3F4.w,Y		; 59 F4 A3 ; Exclusive OR accumulator with memory $A3F4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit #$A090.w		; 89 90 A0 ; Test bits #$A090.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$A1D8.w		; 89 D8 A1 ; Test bits #$A1D8.w with accumulator [Reads: Accumulator] [Flags: Z]
	sta [$89.b],Y		; 97 89 ; Store accumulator (long indexed) [$89.b],Y [Reads: Direct Page, Y Index, Accumulator]
	brk $D6.b		; 00 D6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $D6F9.w,Y		; 39 F9 D6 ; AND accumulator with memory $D6F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($F9.b,X)		; 41 F9 ; Exclusive OR accumulator with memory ($F9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $F949.w,Y		; BE 49 F9 ; Load X register $F949.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $F939.w,Y		; BE 39 F9 ; Load X register $F939.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $F941.w,Y		; BE 41 F9 ; Load X register $F941.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsr ($00B3.w,X)		; FC B3 00 ; Jump to subroutine indirect indexed ($00B3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $0132.w,X		; 3D 32 01 ; AND accumulator with memory $0132.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $02A3.w,X		; FD A3 02 ; Subtract with carry $02A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $6141.w		; 2D 41 61 ; Logical AND $6141.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($81B6.w,X)		; FC B6 81 ; Jump to subroutine indirect indexed ($81B6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $8316.w,X		; FD 16 83 ; Subtract with carry $8316.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $62,$5A		; 44 5A 62 ; Move block positive $62,$5A [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $50, $4B		; 50 4B ; Branch if overflow clear to $50, $4B [Flow: branch]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $87.b		; 14 87 ; Test and reset bits $87.b [Reads: Accumulator] [Flags: Z]
	sbc $83A4.w,X		; FD A4 83 ; Subtract with carry $83A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $59.b,X		; 56 59 ; Logical shift right $59.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cpy #$3309.w		; C0 09 33 ; Compare #$3309.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$7105.w		; C0 05 71 ; Compare #$7105.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $60		; 30 60 ; Branch if minus to $30, $60 [Flow: branch]
	ldx $1E.b,Y		; B6 1E ; Load X register $1E.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sta ($FF.b,S),Y		; 93 FF ; Store accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc $FA162A.l,X		; FF 2A 16 FA ; Subtract with carry (long,X) $FA162A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $82.b,X		; 36 82 ; Rotate left $82.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $62, $1C, $FF		; 62 1C FF ; Push effective relative address $62, $1C, $FF [Writes: Stack Pointer]
	sbc $FD1CE1.l,X		; FF E1 1C FD ; Subtract with carry (long,X) $FD1CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($00.b),Y		; D1 00 ; Compare accumulator ($00.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	adc [$23.b],Y		; 77 23 ; Add with carry (long indexed) [$23.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($76.b,X)		; 61 76 ; Add with carry ($76.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $8081.w,X		; DE 81 80 ; Decrement memory $8081.w,X [Reads: X Index] [Flags: NZ]
	trb $8D69.w		; 1C 69 8D ; Test and reset bits $8D69.w [Reads: Accumulator] [Flags: Z]
	trb $9E69.w		; 1C 69 9E ; Test and reset bits $9E69.w [Reads: Accumulator] [Flags: Z]
	and #$8C69.w		; 29 69 8C ; Logical AND #$8C69.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$8C22.w		; 49 22 8C ; Exclusive OR #$8C22.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$9C69.w		; 49 69 9C ; Exclusive OR #$9C69.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $AF22.w,Y		; 59 22 AF ; Exclusive OR accumulator with memory $AF22.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $9C69.w,Y		; 59 69 9C ; Exclusive OR accumulator with memory $9C69.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $BC22.w,Y		; 79 22 BC ; Add $BC22.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $CC22.w,Y		; 59 22 CC ; Exclusive OR accumulator with memory $CC22.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $AC69.w,Y		; 59 69 AC ; Exclusive OR accumulator with memory $AC69.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit #$BC22.w		; 89 22 BC ; Test bits #$BC22.w with accumulator [Reads: Accumulator] [Flags: Z]
	adc #$BD22.w		; 69 22 BD ; Add #$BD22.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$BC69.w		; 69 69 BC ; Add #$BC69.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	trb $AC69.w		; 1C 69 AC ; Test and reset bits $AC69.w [Reads: Accumulator] [Flags: Z]
	and #$AD22.w		; 29 22 AD ; Logical AND #$AD22.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$CC69.w		; 29 69 CC ; Logical AND #$CC69.w with accumulator [Writes: Accumulator] [Flags: NZ]
	trb $BC69.w		; 1C 69 BC ; Test and reset bits $BC69.w [Reads: Accumulator] [Flags: Z]
	and $BC22.w,Y		; 39 22 BC ; AND accumulator with memory $BC22.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $BD69.w,Y		; 39 69 BD ; AND accumulator with memory $BD69.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$DD22.w		; 49 22 DD ; Exclusive OR #$DD22.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$DC69.w		; 49 69 DC ; Exclusive OR #$DC69.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsl $2238DC.l		; 22 DC 38 22 ; Jump to subroutine long $2238DC.l [Writes: Stack Pointer] [Flow: call]
	cmp $691C.w,X		; DD 1C 69 ; Compare accumulator $691C.w,X [Reads: X Index] [Flags: NCZ]
	sta ($68.b,X)		; 81 68 ; Store accumulator ($68.b,X) [Reads: Direct Page, Accumulator, X Index]
	jsl $69698D.l		; 22 8D 69 69 ; Jump to subroutine long $69698D.l [Writes: Stack Pointer] [Flow: call]
	stz $6989.w		; [PATTERN: Memory clearing operation] 9C 89 69 ; Store zero to $6989.w
	sty $2299.w		; 8C 99 22 ; Store Y register to $2299.w [Reads: Y Index]
	sta $6999.w		; 8D 99 69 ; Store accumulator to $6999.w [Reads: Accumulator]
	sty $22B9.w		; 8C B9 22 ; Store Y register to $22B9.w [Reads: Y Index]
	stz $69A9.w		; 9C A9 69 ; Store zero to $69A9.w
	sta $BC22A9.l,X		; 9F A9 22 BC ; Store accumulator (long,X) $BC22A9.l,X [Reads: Accumulator, X Index]
	sta $BC69.w,Y		; 99 69 BC ; Store accumulator to $BC69.w,Y [Reads: Y Index, Accumulator]
	sta $BC22.w,Y		; 99 22 BC ; Store accumulator to $BC22.w,Y [Reads: Y Index, Accumulator]
	adc $CD22.w,Y		; 79 22 CD ; Add $CD22.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $DE69.w,Y		; 79 69 DE ; Add $DE69.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $DC69.w,Y		; 79 69 DC ; Add $DC69.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $F92685.l		; 22 85 26 F9 ; Jump to subroutine long $F92685.l [Writes: Stack Pointer] [Flow: call]
	sbc ($D6.b,X)		; E1 D6 ; Subtract with carry ($D6.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $B9AC.w,Y		; F9 AC B9 ; Subtract with carry $B9AC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$C99C.w		; 69 9C C9 ; Add #$C99C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $69C99C.l		; 22 9C C9 69 ; Jump to subroutine long $69C99C.l [Writes: Stack Pointer] [Flow: call]
	sta $69C9.w		; 8D C9 69 ; Store accumulator to $69C9.w [Reads: Accumulator]
	sty $22D9.w		; 8C D9 22 ; Store Y register to $22D9.w [Reads: Y Index]
	ldy $69B9.w,X		; BC B9 69 ; Load Y register $69B9.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $22B9.w,X		; BD B9 22 ; Load $22B9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $22C9.w,X		; BC C9 22 ; Load Y register $22C9.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$69A9]		; DC A9 69 ; Jump long indirect [$69A9] [Flow: jump]
	jmp.w [$69C9]		; DC C9 69 ; Jump long indirect [$69C9] [Flow: jump]
	jmp.w [$22C8]		; DC C8 22 ; Jump long indirect [$22C8] [Flow: jump]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp #$AE69.w		; C9 69 AE ; Compare #$AE69.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $0B22.w,Y		; D9 22 0B ; Compare accumulator $0B22.w,Y [Reads: Y Index] [Flags: NCZ]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $13.b		; 46 13 ; Logical shift right $13.b [Reads: Direct Page] [Flags: NCZ]
	cpy #$530B.w		; C0 0B 53 ; Compare #$530B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$5346.w		; C0 46 53 ; Compare #$5346.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$930B.w		; C0 0B 93 ; Compare #$930B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$9346.w		; C0 46 93 ; Compare #$9346.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D20B.w		; C0 0B D2 ; Compare #$D20B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D246.w		; C0 46 D2 ; Compare #$D246.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $FA.b,X		; 16 FA ; Arithmetic shift left $FA.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($2E.b,S),Y		; 73 2E ; Add with carry (stack relative indirect indexed) ($2E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $1C.b,S		; 63 1C ; Add with carry (stack relative) $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00E2FF.l,X		; FF FF E2 00 ; Subtract with carry (long,X) $00E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol $880D.w		; 2E 0D 88 ; Rotate left $880D.w [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $12D8.w		; 0E D8 12 ; Arithmetic shift left $12D8.w [Flags: NCZ]
	ora $1066D8.l		; 0F D8 66 10 ; OR accumulator with memory (long) $1066D8.l [Writes: Accumulator] [Flags: NZ]
	bit #$6131.w		; 89 31 61 ; Test bits #$6131.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc #$6231.w		; E9 31 62 ; Subtract #$6231.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $FE.b		; 06 FE ; Arithmetic shift left $FE.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($38.b,X)		; E1 38 ; Subtract with carry ($38.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($38E1.w,X)		; FC E1 38 ; Jump to subroutine indirect indexed ($38E1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $23.b,S		; 63 23 ; Add with carry (stack relative) $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc ($5A.b,X)		; 61 5A ; Add with carry ($5A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $631B.w,Y		; F9 1B 63 ; Subtract with carry $631B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor ($FE.b,X)		; 41 FE ; Exclusive OR accumulator with memory ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	eor ($FE.b,X)		; 41 FE ; Exclusive OR accumulator with memory ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $11		; B0 11 ; Branch if carry set to $B0, $11 [Flow: branch]
	ora $B0.b		; 05 B0 ; Logical OR $B0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$A006.w		; 69 06 A0 ; Add #$A006.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	bit $D83D.w,X		; 3C 3D D8 ; Test bits $D83D.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $B23D.w,X		; 3C 3D B2 ; Test bits $B23D.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	.db $42, $FC		; 42 FC ; Reserved instruction
	wai		; CB ; Wait for interrupt
	eor $FC.b,S		; 43 FC ; Exclusive OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $43.b,S		; C3 43 ; Compare accumulator (stack relative) $43.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	jsr ($1388.w,X)		; FC 88 13 ; Jump to subroutine indirect indexed ($1388.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ldy #$5F88.w		; A0 88 5F ; Load #$5F88.w into Y register [Writes: Y Index] [Flags: NZ]
	lda ($DC.b,X)		; A1 DC ; Load accumulator ($DC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A2.b,S),Y		; 13 A2 ; OR accumulator (stack relative indirect indexed) ($A2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$A377]		; DC 77 A3 ; Jump long indirect [$A377] [Flow: jump]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc $1CE5FF.l,X		; FF FF E5 1C ; Subtract with carry (long,X) $1CE5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($80.b,S),Y		; B3 80 ; Load accumulator (stack relative indirect indexed) ($80.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $0D.b,X		; 34 0D ; Test bits $0D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	cpx #$0F20.w		; E0 20 0F ; Compare #$0F20.w with X register [Reads: X Index] [Flags: NCZ]
	ldx #$0120.w		; A2 20 01 ; Load #$0120.w into X register [Writes: X Index] [Flags: NZ]
	ldx #$0268.w		; A2 68 02 ; Load #$0268.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$1064.w		; E0 64 10 ; Compare #$1064.w with X register [Reads: X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $50, $0E		; 50 0E ; Branch if overflow clear to $50, $0E [Flow: branch]
	inc $2DE5.w,X		; FE E5 2D ; Increment memory $2DE5.w,X [Reads: X Index] [Flags: NZ]
	sbc #$6239.w		; E9 39 62 ; Subtract #$6239.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor ($53.b),Y		; 51 53 ; Exclusive OR accumulator with memory ($53.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,X		; 15 07 ; OR accumulator with memory $07.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$0DB3.w		; 09 B3 0D ; Logical OR #$0DB3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp [$0E.b]		; C7 0E ; Compare accumulator (long) [$0E.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $80.b		; 45 80 ; Exclusive OR $80.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $626245.l		; 0F 45 62 62 ; OR accumulator with memory (long) $626245.l [Writes: Accumulator] [Flags: NZ]
	mvn $10,$E4		; 54 E4 10 ; Move block negative $10,$E4 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	rol $6149.w		; 2E 49 61 ; Rotate left $6149.w [Flags: NCZ]
	ora #$61B4.w		; 09 B4 61 ; Logical OR #$61B4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($34FB.w,X)		; FC FB 34 ; Jump to subroutine indirect indexed ($34FB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($34FD.w,X)		; FC FD 34 ; Jump to subroutine indirect indexed ($34FD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $B850.w,Y		; 39 50 B8 ; AND accumulator with memory $B850.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $A96D.w,Y		; 39 6D A9 ; AND accumulator with memory $A96D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($6D.b,X)		; 01 6D ; Logical OR ($6D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp ($02.b),Y		; D1 02 ; Compare accumulator ($02.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sty $A4.b,X		; 94 A4 ; Store Y register $A4.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora $D094.w		; 0D 94 D0 ; Logical OR $D094.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $91AD.w		; 0E AD 91 ; Arithmetic shift left $91AD.w [Flags: NCZ]
	ora ($D4.b,X)		; 01 D4 ; Logical OR ($D4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($0F.b,S),Y		; 93 0F ; Store accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	pei ($E7.b)		; D4 E7 ; Push effective indirect address ($E7.b) [Reads: Direct Page] [Writes: Stack Pointer]
	.db $10, $E9		; 10 E9 ; Branch if plus to $10, $E9 [Flow: branch]
	ldy $62.b,X		; B4 62 ; Load Y register $62.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	inc $34FB.w,X		; FE FB 34 ; Increment memory $34FB.w,X [Reads: X Index] [Flags: NZ]
	and $F9C2.w,X		; 3D C2 F9 ; AND accumulator with memory $F9C2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $FCC2.w,Y		; BE C2 FC ; Load X register $FCC2.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	inc $34FD.w,X		; FE FD 34 ; Increment memory $34FD.w,X [Reads: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($A0.b,X)		; 21 A0 ; Logical AND ($A0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpx $21.b		; E4 21 ; Compare $21.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ldx #$1000.w		; A2 00 10 ; Load #$1000.w into X register [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $4BC0.w,Y		; 19 C0 4B ; OR accumulator with memory $4BC0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $88C0.w,Y		; 19 C0 88 ; OR accumulator with memory $88C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $A1.b		; 65 A1 ; Add $A1.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx $75.b		; E4 75 ; Compare $75.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $09.b,S		; A3 09 ; Load accumulator (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $90, $A0		; 90 A0 ; Branch if carry clear to $90, $A0 [Flow: branch]
	ora #$A1D8.w		; 09 D8 A1 ; Logical OR #$A1D8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $A290.w,Y		; D9 90 A2 ; Compare accumulator $A290.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $A3F4.w,Y		; D9 F4 A3 ; Compare accumulator $A3F4.w,Y [Reads: Y Index] [Flags: NCZ]
	ora #$C03B.w		; 09 3B C0 ; Logical OR #$C03B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$C071.w		; 09 71 C0 ; Logical OR #$C071.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol $3B.b		; 26 3B ; Rotate left $3B.b [Reads: Direct Page] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $A3.b,X		; F5 A3 ; Subtract $A3.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $C0E1.w		; 6D E1 C0 ; Add $C0E1.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $60E3.w		; 8C E3 60 ; Store Y register to $60E3.w [Reads: Y Index]
	sty $E5.b,X		; 94 E5 ; Store Y register $E5.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	lda ($58.b,X)		; A1 58 ; Load accumulator ($58.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($A2.b),Y		; 91 A2 ; Store accumulator ($A2.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sty $91.b,X		; 94 91 ; Store Y register $91.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ldy #$788B.w		; A0 8B 78 ; Load #$788B.w into Y register [Writes: Y Index] [Flags: NZ]
	cpy #$78CA.w		; C0 CA 78 ; Compare #$78CA.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$6256.w		; C0 56 62 ; Compare #$6256.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$896D.w		; C0 6D 89 ; Compare #$896D.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$6181.w		; C0 81 61 ; Compare #$6181.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $6088.w		; 8D 88 60 ; Store accumulator to $6088.w [Reads: Accumulator]
	sta [$89.b],Y		; 97 89 ; Store accumulator (long indexed) [$89.b],Y [Reads: Direct Page, Y Index, Accumulator]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FA162A.l,X		; FF 2A 16 FA ; Subtract with carry (long,X) $FA162A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1851FF.l,X		; FF FF 51 18 ; Subtract with carry (long,X) $1851FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($00E1.w,X)		; FC E1 00 ; Jump to subroutine indirect indexed ($00E1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr ($81E6.w,X)		; FC E6 81 ; Jump to subroutine indirect indexed ($81E6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $DA0261.l,X		; FF 61 02 DA ; Subtract with carry (long,X) $DA0261.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $508366.l,X		; FF 66 83 50 ; Subtract with carry (long,X) $508366.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FD03.w,X		; 1D 03 FD ; OR accumulator with memory $FD03.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($C8.b),Y		; 11 C8 ; OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$FD64.w		; 29 64 FD ; Logical AND #$FD64.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($CA.b,X)		; 81 CA ; Store accumulator ($CA.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $8E83.w,X		; FD 83 8E ; Subtract with carry $8E83.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $3B		; 70 3B ; Branch if overflow set to $70, $3B [Flow: branch]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $8C.b,S		; 43 8C ; Exclusive OR accumulator with stack relative $8C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $90, $29		; 90 29 ; Branch if carry clear to $90, $29 [Flow: branch]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C8.b,X)		; 41 C8 ; Exclusive OR accumulator with memory ($C8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,X)		; A1 1D ; Load accumulator ($1D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($CA.b),Y		; 31 CA ; AND accumulator with memory ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $642D.w		; CD 2D 64 ; Compare $642D.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $45CB35.l,X		; FF 35 CB 45 ; Subtract with carry (long,X) $45CB35.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FD63.w		; 2D 63 FD ; Logical AND $FD63.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $C9.b,X		; 15 C9 ; OR accumulator with memory $C9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$5E.b],Y		; 57 5E ; Exclusive OR accumulator with memory (long indexed) [$5E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $89.b		; 04 89 ; Test and set bits $89.b [Reads: Accumulator] [Flags: Z]
	ldy $0D.b,X		; B4 0D ; Load Y register $0D.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	bit #$0EC0.w		; 89 C0 0E ; Test bits #$0EC0.w with accumulator [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc ($D1.b,X)		; 61 D1 ; Add with carry ($D1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	cmp ($E4.b),Y		; D1 E4 ; Compare accumulator ($E4.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	.db $10, $E8		; 10 E8 ; Branch if plus to $10, $E8 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	.db $62, $94, $B5		; 62 94 B5 ; Push effective relative address $62, $94, $B5 [Writes: Stack Pointer]
	ora $C194.w,Y		; 19 94 C1 ; OR accumulator with memory $C194.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sty $BA.b,X		; 94 BA ; Store Y register $BA.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	adc $B0.b,S		; 63 B0 ; Add with carry (stack relative) $B0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sta $9DD003.l,X		; 9F 03 D0 9D ; Store accumulator (long,X) $9DD003.l,X [Reads: Accumulator, X Index]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $D0, $D9		; D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	trb $BADC.w		; 1C DC BA ; Test and reset bits $BADC.w [Reads: Accumulator] [Flags: Z]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	cmp $E3FD04.l,X		; DF 04 FD E3 ; Compare accumulator (long,X) $E3FD04.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda ($70.b),Y		; B1 70 ; Load accumulator ($70.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1F8C69.l,X		; 1F 69 8C 1F ; Logical OR long $1F8C69.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$E1FD.w		; 69 FD E1 ; Add #$E1FD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit #$A091.w		; 89 91 A0 ; Test bits #$A091.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$A1D5.w		; 89 D5 A1 ; Test bits #$A1D5.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $91.b,X		; D5 91 ; Compare accumulator $91.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldx #$F5D5.w		; A2 D5 F5 ; Load #$F5D5.w into X register [Writes: X Index] [Flags: NZ]
	lda $FF.b,S		; A3 FF ; Load accumulator (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FCC3BF.l,X		; FF BF C3 FC ; Subtract with carry (long,X) $FCC3BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1D45FF.l,X		; FF FF 45 1D ; Subtract with carry (long,X) $1D45FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $60.b		; C6 60 ; Decrement $60.b [Reads: Direct Page] [Flags: NZ]
	ora $47C6.w,X		; 1D C6 47 ; OR accumulator with memory $47C6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $87C6.w,X		; 3E C6 87 ; Rotate left $87C6.w,X [Reads: X Index] [Flags: NCZ]
	rol $93C6.w,X		; 3E C6 93 ; Rotate left $93C6.w,X [Reads: X Index] [Flags: NCZ]
	ora $1FCCC6.l,X		; 1F C6 CC 1F ; Logical OR long $1FCCC6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $BD.b		; C6 BD ; Decrement $BD.b [Reads: Direct Page] [Flags: NZ]
	jmp $B698C6.l		; 5C C6 98 B6 ; Jump long to $B698C6.l [Flow: jump]
	ldy $D298.w		; AC 98 D2 ; Load $D298.w into Y register [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $D0, $A2		; D0 A2 ; Branch if not equal to $D0, $A2 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $D0, $D2		; D0 D2 ; Branch if not equal to $D0, $D2 [Flow: branch]
	lda #$9FB1.w		; A9 B1 9F ; Load #$9FB1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec $95.b		; C6 95 ; Decrement $95.b [Reads: Direct Page] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	dec $95.b		; C6 95 ; Decrement $95.b [Reads: Direct Page] [Flags: NZ]
	cpy #$C9C6.w		; C0 C6 C9 ; Compare #$C9C6.w with Y register [Reads: Y Index] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	dec $C9.b		; C6 C9 ; Decrement $C9.b [Reads: Direct Page] [Flags: NZ]
	cpy #$B1C6.w		; C0 C6 B1 ; Compare #$B1C6.w with Y register [Reads: Y Index] [Flags: NCZ]
	jmp.w [$F0C6]		; DC C6 F0 ; Jump long indirect [$F0C6] [Flow: jump]
	sbc $FF40B0.l,X		; FF B0 40 FF ; Subtract with carry (long,X) $FF40B0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $181CE1.l,X		; FF E1 1C 18 ; Subtract with carry (long,X) $181CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($61.b,S),Y		; D3 61 ; Compare accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	jsr ($406C.w,X)		; FC 6C 40 ; Jump to subroutine indirect indexed ($406C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($816E.w,X)		; FC 6E 81 ; Jump to subroutine indirect indexed ($816E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $61A1.w		; 2D A1 61 ; Logical AND $61A1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp $01.b		; C5 01 ; Compare $01.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jsr ($44BC.w,X)		; FC BC 44 ; Jump to subroutine indirect indexed ($44BC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($01.b,S),Y		; 93 01 ; Store accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda ($93.b),Y		; B1 93 ; Load accumulator ($93.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $FD00.w,Y		; B9 00 FD ; Load $FD00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $5883.w		; 6E 83 58 ; Rotate right $5883.w [Flags: NCZ]
	cmp ($62.b,S),Y		; D3 62 ; Compare accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sbc $426C.w,X		; FD 6C 42 ; Subtract with carry $426C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $C5		; 50 C5 ; Branch if overflow clear to $50, $C5 [Flow: branch]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	.db $62, $FD, $1C		; 62 FD 1C ; Push effective relative address $62, $FD, $1C [Writes: Stack Pointer]
	lsr $53.b		; 46 53 ; Logical shift right $53.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta [$C9.b]		; 87 C9 ; Store accumulator (long) [$C9.b] [Reads: Direct Page, Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$FF02.w		; A9 02 FF ; Load #$FF02.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sta $91.b,S		; 83 91 ; Store accumulator (stack relative) $91.b,S [Reads: Stack Pointer, Accumulator]
	ldy #$90C3.w		; A0 C3 90 ; Load #$90C3.w into Y register [Writes: Y Index] [Flags: NZ]
	sta $A19027.l,X		; 9F 27 90 A1 ; Store accumulator (long,X) $A19027.l,X [Reads: Accumulator, X Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $AB		; 90 AB ; Branch if carry clear to $90, $AB [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldy $A1.b		; A4 A1 ; Load $A1.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $740A.w,X		; FE 0A 74 ; Increment memory $740A.w,X [Reads: X Index] [Flags: NZ]
	inc $F4C9.w,X		; FE C9 F4 ; Increment memory $F4C9.w,X [Reads: X Index] [Flags: NZ]
	eor $B692.w,Y		; 59 92 B6 ; Exclusive OR accumulator with memory $B692.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sta $55.b,X		; 95 55 ; Store accumulator to $55.b,X [Reads: Accumulator, X Index]
	sbc $093909.l,X		; FF 09 39 09 ; Subtract with carry (long,X) $093909.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($C0.b)		; 92 C0 ; Store accumulator (indirect) ($C0.b) [Reads: Direct Page, Accumulator]
	and $92.b		; 25 92 ; Logical AND $92.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $BD.b		; 05 BD ; Logical OR $BD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $C0.b		; C6 C0 ; Decrement $C0.b [Reads: Direct Page] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($00.b)		; F2 00 ; Subtract with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	mvn $00,$BB		; 54 BB 00 ; Move block negative $00,$BB [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $00,$BF		; 54 BF 00 ; Move block negative $00,$BF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cpy #$BBAB.w		; C0 AB BB ; Compare #$BBAB.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$BBE8.w		; C0 E8 BB ; Compare #$BBE8.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$530B.w		; C0 0B 53 ; Compare #$530B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$534B.w		; C0 4B 53 ; Compare #$534B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$538B.w		; C0 8B 53 ; Compare #$538B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$53CA.w		; C0 CA 53 ; Compare #$53CA.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$130B.w		; C0 0B 13 ; Compare #$130B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$134B.w		; C0 4B 13 ; Compare #$134B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$138B.w		; C0 8B 13 ; Compare #$138B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$13CA.w		; C0 CA 13 ; Compare #$13CA.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($0A.b,X)		; 61 0A ; Add with carry ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1CE1FF.l,X		; FF FF E1 1C ; Subtract with carry (long,X) $1CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00E1.w,X		; FD E1 00 ; Subtract with carry $00E1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	nop		; EA ; No operation
	sta ($8B.b,X)		; 81 8B ; Store accumulator ($8B.b,X) [Reads: Direct Page, Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator]
	lda #$B102.w		; A9 02 B1 ; Load #$B102.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($01.b,S),Y		; 93 01 ; Store accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	inc $0689.w,X		; FE 89 06 ; Increment memory $0689.w,X [Reads: X Index] [Flags: NZ]
	ldy #$627B.w		; A0 7B 62 ; Load #$627B.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $8786.w,X		; FE 86 87 ; Increment memory $8786.w,X [Reads: X Index] [Flags: NZ]
	lda ($6B.b),Y		; B1 6B ; Load accumulator ($6B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $83.b		; A6 83 ; Load $83.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and $2DEC76.l		; 2F 76 EC 2D ; AND accumulator with memory (long) $2DEC76.l [Writes: Accumulator] [Flags: NZ]
	adc [$A1.b],Y		; 77 A1 ; Add with carry (long indexed) [$A1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc #$28B1.w		; 69 B1 28 ; Add #$28B1.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $2244B1.l		; 22 B1 44 22 ; Jump to subroutine long $2244B1.l [Writes: Stack Pointer] [Flow: call]
	cmp $6928.w,X		; DD 28 69 ; Compare accumulator $6928.w,X [Reads: X Index] [Flags: NCZ]
	ldx #$225E.w		; A2 5E 22 ; Load #$225E.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$5515.w		; A0 15 55 ; Load #$5515.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $B0, $94		; B0 94 ; Branch if carry set to $B0, $94 [Flow: branch]
	eor $D0.b,X		; 55 D0 ; Exclusive OR accumulator with memory $D0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sty $55.b,X		; 94 55 ; Store Y register $55.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sbc $B33809.l,X		; FF 09 38 B3 ; Subtract with carry (long,X) $B33809.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpy #$80B3.w		; C0 B3 80 ; Compare #$80B3.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$7BF0.w		; C0 F0 7B ; Compare #$7BF0.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cpy #$BBBB.w		; C0 BB BB ; Compare #$BBBB.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $FF18.w		; 20 18 FF ; Jump to subroutine at $FF18.w [Writes: Stack Pointer] [Flow: call]
	sbc $231C61.l,X		; FF 61 1C 23 ; Subtract with carry (long,X) $231C61.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$63.b]		; 47 63 ; Exclusive OR accumulator with memory (long) [$63.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $63C4.w		; 20 C4 63 ; Jump to subroutine at $63C4.w [Writes: Stack Pointer] [Flow: call]
	jsr ($4883.w,X)		; FC 83 48 ; Jump to subroutine indirect indexed ($4883.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($37.b,S),Y		; 33 37 ; AND accumulator (stack relative indirect indexed) ($37.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $B0.b,S		; 03 B0 ; OR accumulator with stack relative $B0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$03.b],Y		; 37 03 ; AND accumulator with memory (long indexed) [$03.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FC4A33.l,X		; FF 33 4A FC ; Subtract with carry (long,X) $FC4A33.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $33C9.w		; 8C C9 33 ; Store Y register to $33C9.w [Reads: Y Index]
	cmp $CFB004.l		; CF 04 B0 CF ; Compare accumulator (long) $CFB004.l [Reads: Accumulator] [Flags: NCZ]
	tsb $CF.b		; 04 CF ; Test and set bits $CF.b [Reads: Accumulator] [Flags: Z]
	eor [$64.b]		; 47 64 ; Exclusive OR accumulator with memory (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy $64C4.w		; CC C4 64 ; Compare $64C4.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $75CB3C.l,X		; FF 3C CB 75 ; Subtract with carry (long,X) $75CB3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($22.b),Y		; 31 22 ; AND accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $24		; B0 24 ; Branch if carry set to $B0, $24 [Flow: branch]
	adc #$27B2.w		; 69 B2 27 ; Add #$27B2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $2232C8.l		; 22 C8 32 22 ; Jump to subroutine long $2232C8.l [Writes: Stack Pointer] [Flow: call]
	cmp $DC6933.l,X		; DF 33 69 DC ; Compare accumulator (long,X) $DC6933.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $698FDF.l		; 22 DF 8F 69 ; Jump to subroutine long $698FDF.l [Writes: Stack Pointer] [Flow: call]
	jmp.w [$69D0]		; DC D0 69 ; Jump long indirect [$69D0] [Flow: jump]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $FE22.w,X		; DE 22 FE ; Decrement memory $FE22.w,X [Reads: X Index] [Flags: NZ]
	cmp $FEF4.w		; CD F4 FE ; Compare $FEF4.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	dec $A074.w		; CE 74 A0 ; Decrement $A074.w [Flags: NZ]
	sbc $9856.w		; ED 56 98 ; Subtract $9856.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $9188.w		; 1C 88 91 ; Test and reset bits $9188.w [Reads: Accumulator] [Flags: Z]
	jsl $331CF9.l		; 22 F9 1C 33 ; Jump to subroutine long $331CF9.l [Writes: Stack Pointer] [Flow: call]
	jsl $223148.l		; 22 48 31 22 ; Jump to subroutine long $223148.l [Writes: Stack Pointer] [Flow: call]
	eor $6931.w,Y		; 59 31 69 ; Exclusive OR accumulator with memory $6931.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $6931.w,X		; 1D 31 69 ; OR accumulator with memory $6931.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($71E3.w,X)		; FC E3 71 ; Jump to subroutine indirect indexed ($71E3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $7183.w,X		; FE 83 71 ; Increment memory $7183.w,X [Reads: X Index] [Flags: NZ]
	inc $71E3.w,X		; FE E3 71 ; Increment memory $71E3.w,X [Reads: X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cmp $DF76F9.l		; CF F9 76 DF ; Compare accumulator (long) $DF76F9.l [Reads: Accumulator] [Flags: NCZ]
	jsl $69181C.l		; 22 1C 18 69 ; Jump to subroutine long $69181C.l [Writes: Stack Pointer] [Flow: call]
	asl $2224.w,X		; 1E 24 22 ; Arithmetic shift left $2224.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	bit $69.b		; 24 69 ; Test bits $69.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sbc $6338FF.l,X		; FF FF 38 63 ; Subtract with carry (long,X) $6338FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp $8863.w		; 4C 63 88 ; Jump to $8863.w [Flow: jump]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sty $4E88.w		; 8C 88 4E ; Store Y register to $4E88.w [Reads: Y Index]
	sty $6288.w		; 8C 88 62 ; Store Y register to $6288.w [Reads: Y Index]
	lsr $685D.w		; 4E 5D 68 ; Logical shift right $685D.w [Flags: NCZ]
	adc ($B8.b),Y		; 71 B8 ; Add with carry ($B8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $618D.w,X		; 5D 8D 61 ; Exclusive OR accumulator with memory $618D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $3EB1.w,X		; 5D B1 3E ; Exclusive OR accumulator with memory $3EB1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($79.b,X)		; 61 79 ; Add with carry ($79.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $6953C1.l,X		; 5F C1 53 69 ; Exclusive OR accumulator with memory (long,X) $6953C1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	adc ($FA.b,S),Y		; 73 FA ; Add with carry (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($8A.b,X)		; 61 8A ; Add with carry ($8A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $229A61.l		; 22 61 9A 22 ; Jump to subroutine long $229A61.l [Writes: Stack Pointer] [Flow: call]
	adc ($AA.b,X)		; 61 AA ; Add with carry ($AA.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $228A91.l		; 22 91 8A 22 ; Jump to subroutine long $228A91.l [Writes: Stack Pointer] [Flow: call]
	sta ($9A.b),Y		; 91 9A ; Store accumulator ($9A.b),Y [Reads: Direct Page, Y Index, Accumulator]
	jsl $22AA91.l		; 22 91 AA 22 ; Jump to subroutine long $22AA91.l [Writes: Stack Pointer] [Flow: call]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $FA.b,S		; 83 FA ; Store accumulator (stack relative) $FA.b,S [Reads: Stack Pointer, Accumulator]
	sta $A3.b,S		; 83 A3 ; Store accumulator (stack relative) $A3.b,S [Reads: Stack Pointer, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc ($BB.b,X)		; 61 BB ; Add with carry ($BB.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $B98D.w,X		; 5D 8D B9 ; Exclusive OR accumulator with memory $B98D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $FFFF.w,X		; 5D FF FF ; Exclusive OR accumulator with memory $FFFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$C6.b],Y		; 37 C6 ; AND accumulator with memory (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc [$C6.b],Y		; 77 C6 ; Add with carry (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $C637.w,Y		; B9 37 C6 ; Load $C637.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $C677.w,Y		; B9 77 C6 ; Load $C677.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $B9C6.w		; AE C6 B9 ; Load $B9C6.w into X register [Writes: X Index] [Flags: NZ]
	ldx $22C6.w		; AE C6 22 ; Load $22C6.w into X register [Writes: X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	dec $22.b		; C6 22 ; Decrement $22.b [Reads: Direct Page] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dec $48.b		; C6 48 ; Decrement $48.b [Reads: Direct Page] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	dec $48.b		; C6 48 ; Decrement $48.b [Reads: Direct Page] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dec $5E.b		; C6 5E ; Decrement $5E.b [Reads: Direct Page] [Flags: NZ]
	and ($70.b)		; 32 70 ; AND accumulator with memory (indirect) ($70.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $32.b		; 66 32 ; Rotate right $32.b [Reads: Direct Page] [Flags: NCZ]
	.db $70, $1E		; 70 1E ; Branch if overflow set to $70, $1E [Flow: branch]
	.db $50, $70		; 50 70 ; Branch if overflow clear to $50, $70 [Flow: branch]
	rol $7050.w		; 2E 50 70 ; Rotate left $7050.w [Flags: NCZ]
	rol $7050.w,X		; 3E 50 70 ; Rotate left $7050.w,X [Reads: X Index] [Flags: NCZ]
	lsr $7050.w		; 4E 50 70 ; Logical shift right $7050.w [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $3260FA.l,X		; 3F FA 60 32 ; AND accumulator with memory (long,X) $3260FA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and ($72.b)		; 32 72 ; AND accumulator with memory (indirect) ($72.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $FE8140.l		; 22 40 81 FE ; Jump to subroutine long $FE8140.l [Writes: Stack Pointer] [Flow: call]
	and ($92.b)		; 32 92 ; AND accumulator with memory (indirect) ($92.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $22B232.l		; 22 32 B2 22 ; Jump to subroutine long $22B232.l [Writes: Stack Pointer] [Flow: call]
	ora $1F8A51.l,X		; 1F 51 8A 1F ; Logical OR long $1F8A51.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $22		; 50 22 ; Branch if overflow clear to $50, $22 [Flow: branch]
	adc [$33.b],Y		; 77 33 ; Add with carry (long indexed) [$33.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $C0.b,X		; 75 C0 ; Add $C0.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$FFF0.w		; 69 F0 FF ; Add #$FFF0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $1C.b,S		; 63 1C ; Add with carry (stack relative) $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	jsl $00001C.l		; 22 1C 00 00 ; Jump to subroutine long $00001C.l [Writes: Stack Pointer] [Flow: call]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($00.b,S),Y		; 73 00 ; Add with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	jsr $FF00.w		; 20 00 FF ; Jump to subroutine at $FF00.w [Writes: Stack Pointer] [Flow: call]
	sbc $0800D1.l,X		; FF D1 00 08 ; Subtract with carry (long,X) $0800D1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($0D.b,S),Y		; 33 0D ; AND accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor [$0E.b]		; 47 0E ; Exclusive OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$6134.w		; 09 34 61 ; Logical OR #$6134.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvn $0F,$13		; 54 13 0F ; Move block negative $0F,$13 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $10,$67		; 54 67 10 ; Move block negative $10,$67 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc #$6234.w		; 69 34 62 ; Add #$6234.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora #$A010.w		; 09 10 A0 ; Logical OR #$A010.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$A158.w		; 09 58 A1 ; Logical OR #$A158.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $A210.w,Y		; 59 10 A2 ; Exclusive OR accumulator with memory $A210.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $A374.w,Y		; 59 74 A3 ; Exclusive OR accumulator with memory $A374.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ror $D8FE.w		; 6E FE D8 ; Rotate right $D8FE.w [Flags: NCZ]
	ror $B8FE.w		; 6E FE B8 ; Rotate right $B8FE.w [Flags: NCZ]
	bit $A822.w		; 2C 22 A8 ; Test bits $A822.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	mvp $C8,$22		; 44 22 C8 ; Move block positive $C8,$22 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $B8,$22		; 44 22 B8 ; Move block positive $B8,$22 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	jsl $5515A0.l		; 22 A0 15 55 ; Jump to subroutine long $5515A0.l [Writes: Stack Pointer] [Flow: call]
	ldy #$FE29.w		; A0 29 FE ; Load #$FE29.w into Y register [Writes: Y Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and #$31FE.w		; 29 FE 31 ; Logical AND #$31FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$3DDF.w		; 29 DF 3D ; Logical AND #$3DDF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc $4238.w,Y		; F9 38 42 ; Subtract with carry $4238.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	eor ($FE.b)		; 52 FE ; Exclusive OR accumulator with memory (indirect) ($FE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($FE.b)		; 52 FE ; Exclusive OR accumulator with memory (indirect) ($FE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$90B2.w		; 09 B2 90 ; Logical OR #$90B2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda $DB.b,S		; A3 DB ; Load accumulator (stack relative) $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda $DB.b,S		; A3 DB ; Load accumulator (stack relative) $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cld		; D8 ; Clear decimal flag [Flags: D]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($FE.b),Y		; B1 FE ; Load accumulator ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($3A.b)		; 92 3A ; Store accumulator (indirect) ($3A.b) [Reads: Direct Page, Accumulator]
	sta $DCE59C.l,X		; 9F 9C E5 DC ; Store accumulator (long,X) $DCE59C.l,X [Reads: Accumulator, X Index]
	stz $97E5.w		; 9C E5 97 ; Store zero to $97E5.w
	jmp.w [$D4E6]		; DC E6 D4 ; Jump long indirect [$D4E6] [Flow: jump]
	jmp.w [$94E6]		; DC E6 94 ; Jump long indirect [$94E6] [Flow: jump]
	sta $AFDCE4.l,X		; 9F E4 DC AF ; Store accumulator (long,X) $AFDCE4.l,X [Reads: Accumulator, X Index]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldy $C1.b,X		; B4 C1 ; Load Y register $C1.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cmp ($FE.b),Y		; D1 FE ; Compare accumulator ($FE.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $82, $1C, $83		; 82 1C 83 ; Branch always long to $82, $1C, $83 [Flow: branch]
	trb $3662.w		; 1C 62 36 ; Test and reset bits $3662.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $61.b,X		; 36 61 ; Rotate left $61.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FD00E1.l,X		; FF E1 00 FD ; Subtract with carry (long,X) $FD00E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($38.b,X)		; 41 38 ; Exclusive OR accumulator with memory ($38.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $0D.b		; A4 0D ; Load $0D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx $10.b		; E4 10 ; Compare $10.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ora #$61AB.w		; 09 AB 61 ; Logical OR #$61AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$62AB.w		; 69 AB 62 ; Add #$62AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda ($C8.b),Y		; B1 C8 ; Load accumulator ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda ($3F.b),Y		; B1 3F ; Load accumulator ($3F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$79B7.w		; 29 B7 79 ; Logical AND #$79B7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $40.b,X		; D5 40 ; Compare accumulator $40.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $B7.b,X		; 55 B7 ; Exclusive OR accumulator with memory $B7.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	.db $42, $BA		; 42 BA ; Reserved instruction
	jsr ($A994.w,X)		; FC 94 A9 ; Jump to subroutine indirect indexed ($A994.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $A4C8.w,Y		; 59 C8 A4 ; Exclusive OR accumulator with memory $A4C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $CC03.w,X		; 9D 03 CC ; Store accumulator to $CC03.w,X [Reads: Accumulator, X Index]
	sta $FF03.w,X		; 9D 03 FF ; Store accumulator to $FF03.w,X [Reads: Accumulator, X Index]
	adc $94CA.w,Y		; 79 CA 94 ; Add $94CA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($63.b),Y		; D1 63 ; Compare accumulator ($63.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	inc $C95D.w,X		; FE 5D C9 ; Increment memory $C95D.w,X [Reads: X Index] [Flags: NZ]
	lda $DE.b		; A5 DE ; Load $DE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	adc $DDCB.w,X		; 7D CB DD ; Add $DDCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $AB64.w		; AD 64 AB ; Load $AB64.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $ABC3.w		; AC C3 AB ; Load $ABC3.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $C3		; D0 C3 ; Branch if not equal to $D0, $C3 [Flow: branch]
	pei ($B9.b)		; D4 B9 ; Push effective indirect address ($B9.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $A4.b,S		; C3 A4 ; Compare accumulator (stack relative) $A4.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	lda #$CC07.w		; A9 07 CC ; Load #$CC07.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$FE07.w		; A9 07 FE ; Load #$FE07.w into accumulator [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $A09A6A.l,X		; FF 6A 9A A0 ; Subtract with carry (long,X) $A09A6A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $67		; B0 67 ; Branch if carry set to $B0, $67 [Flow: branch]
	ldy #$67D0.w		; A0 D0 67 ; Load #$67D0.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $998D.w,X		; FE 8D 99 ; Increment memory $998D.w,X [Reads: X Index] [Flags: NZ]
	lda #$08D9.w		; A9 D9 08 ; Load #$08D9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $D99B6D.l,X		; FF 6D 9B D9 ; Subtract with carry (long,X) $D99B6D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $68		; B0 68 ; Branch if carry set to $B0, $68 [Flow: branch]
	ldy $9D.b,X		; B4 9D ; Load Y register $9D.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	adc #$AEB4.w		; 69 B4 AE ; Add #$AEB4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $699DC8.l		; 22 C8 9D 69 ; Jump to subroutine long $699DC8.l [Writes: Stack Pointer] [Flow: call]
	sty $BB.b,X		; 94 BB ; Store Y register $BB.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	jsl $22CF94.l		; 22 94 CF 22 ; Jump to subroutine long $22CF94.l [Writes: Stack Pointer] [Flow: call]
	lda $F9BE.w,X		; BD BE F9 ; Load $F9BE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($A0.b),Y		; 91 A0 ; Store accumulator ($A0.b),Y [Reads: Direct Page, Y Index, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $A1.b		; E5 A1 ; Subtract $A1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $91.b		; 64 91 ; Store zero to $91.b
	ldx #$F564.w		; A2 64 F5 ; Load #$F564.w into X register [Writes: X Index] [Flags: NZ]
	lda $49.b,S		; A3 49 ; Load accumulator (stack relative) $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora #$902A.w		; 09 2A 90 ; Logical OR #$902A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($6B.b),Y		; 31 6B ; AND accumulator with memory ($6B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$1B.b],Y		; B7 1B ; Load accumulator (long indexed) [$1B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$58E5.w		; 49 E5 58 ; Exclusive OR #$58E5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$29E5.w		; 49 E5 29 ; Exclusive OR #$29E5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$53FE.w		; 49 FE 53 ; Exclusive OR #$53FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $2363FA.l,X		; 3F FA 63 23 ; AND accumulator with memory (long,X) $2363FA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy $54.b,X		; B4 54 ; Load Y register $54.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	eor $639B.w,X		; 5D 9B 63 ; Exclusive OR accumulator with memory $639B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $63.b,S		; E3 63 ; Subtract stack-relative $63.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$5595.w		; A0 95 55 ; Load #$5595.w into Y register [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy #$5515.w		; A0 15 55 ; Load #$5515.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	trb $98A4.w		; 1C A4 98 ; Test and reset bits $98A4.w [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy $88.b		; A4 88 ; Load $88.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	and ($76.b,X)		; 21 76 ; Logical AND ($76.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ror $EC.b,X		; 76 EC ; Rotate right $EC.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and ($77.b),Y		; 31 77 ; AND accumulator with memory ($77.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $82, $38, $00		; 82 38 00 ; Branch always long to $82, $38, $00 [Flow: branch]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0808E1.l,X		; FF E1 08 08 ; Subtract with carry (long,X) $0808E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $0D.b		; 24 0D ; Test bits $0D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc ($60.b,X)		; 61 60 ; Add with carry ($60.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $62, $08, $D0		; 62 08 D0 ; Push effective relative address $62, $08, $D0 [Writes: Stack Pointer]
	asl $D208.w		; 0E 08 D2 ; Arithmetic shift left $D208.w [Flags: NCZ]
	adc ($60.b,X)		; 61 60 ; Add with carry ($60.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $10.b		; E4 10 ; Compare $10.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cmp ($62.b)		; D2 62 ; Compare accumulator (indirect) ($62.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $3941.w,X		; FD 41 39 ; Subtract with carry $3941.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $A424.w		; 20 24 A4 ; Jump to subroutine at $A424.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $24		; 50 24 ; Branch if overflow clear to $50, $24 [Flow: branch]
	ldy $20.b		; A4 20 ; Load $20.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lsr $2022.w		; 4E 22 20 ; Logical shift right $2022.w [Flags: NCZ]
	adc $4856.w		; 6D 56 48 ; Add $4856.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lsr $1522.w		; 4E 22 15 ; Logical shift right $1522.w [Flags: NCZ]
	adc #$4922.w		; 69 22 49 ; Add #$4922.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$3822.w		; 69 22 38 ; Add #$3822.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $2070.w		; 4D 70 20 ; Exclusive OR $2070.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $55.b,X		; 95 55 ; Store accumulator to $55.b,X [Reads: Accumulator, X Index]
	ora $9D.b,X		; 15 9D ; OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $229D49.l		; 22 49 9D 22 ; Jump to subroutine long $229D49.l [Writes: Stack Pointer] [Flow: call]
	ora $B9.b,X		; 15 B9 ; OR accumulator with memory $B9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $22B949.l		; 22 49 B9 22 ; Jump to subroutine long $22B949.l [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	jmp $6089.w		; 4C 89 60 ; Jump to $6089.w [Flow: jump]
	jmp $2089.w		; 4C 89 20 ; Jump to $2089.w [Flow: jump]
	pei ($A4.b)		; D4 A4 ; Push effective indirect address ($A4.b) [Reads: Direct Page] [Writes: Stack Pointer]
	.db $50, $D4		; 50 D4 ; Branch if overflow clear to $50, $D4 [Flow: branch]
	ldy $38.b		; A4 38 ; Load $38.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta $FE70.w,X		; 9D 70 FE ; Store accumulator to $FE70.w,X [Reads: Accumulator, X Index]
	bit $C0.b		; 24 C0 ; Test bits $C0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	eor $FF01.w		; 4D 01 FF ; Exclusive OR $FF01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $C2.b		; 84 C2 ; Store Y register to $C2.b [Reads: Y Index]
	sbc $5E.b,S		; E3 5E ; Subtract stack-relative $5E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	.db $62, $FF, $8C		; 62 FF 8C ; Push effective relative address $62, $FF, $8C [Writes: Stack Pointer]
	cmp $9A.b,S		; C3 9A ; Compare accumulator (stack relative) $9A.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp $FE02.w		; CD 02 FE ; Compare $FE02.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit $9BC1.w		; 2C C1 9B ; Test bits $9BC1.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $50, $F9		; 50 F9 ; Branch if overflow clear to $50, $F9 [Flow: branch]
	sta $5A.b,X		; 95 5A ; Store accumulator to $5A.b,X [Reads: Accumulator, X Index]
	.db $70, $A5		; 70 A5 ; Branch if overflow set to $70, $A5 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $70, $B5		; 70 B5 ; Branch if overflow set to $70, $B5 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $70, $C5		; 70 C5 ; Branch if overflow set to $70, $C5 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $70, $D5		; 70 D5 ; Branch if overflow set to $70, $D5 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $70, $95		; 70 95 ; Branch if overflow set to $70, $95 [Flow: branch]
	cpy #$C733.w		; C0 33 C7 ; Compare #$C733.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda $C8DE.w		; AD DE C8 ; Load $C8DE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $8BA4.w,X		; BC A4 8B ; Load Y register $8BA4.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora $0FCAC0.l		; 0F C0 CA 0F ; OR accumulator with memory (long) $0FCAC0.l [Writes: Accumulator] [Flags: NZ]
	cpy #$00F0.w		; C0 F0 00 ; Compare #$00F0.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cmp $CAC0.w,X		; DD C0 CA ; Compare accumulator $CAC0.w,X [Reads: X Index] [Flags: NCZ]
	cmp $08C0.w,X		; DD C0 08 ; Compare accumulator $08C0.w,X [Reads: X Index] [Flags: NCZ]
	ora ($A0.b),Y		; 11 A0 ; OR accumulator with memory ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $11.b		; 64 11 ; Store zero to $11.b
	ldx #$E508.w		; A2 08 E5 ; Load #$E508.w into X register [Writes: X Index] [Flags: NZ]
	lda ($64.b,X)		; A1 64 ; Load accumulator ($64.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $A3.b,X		; F5 A3 ; Subtract $A3.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4DA7FF.l,X		; FF FF A7 4D ; Subtract with carry (long,X) $4DA7FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $FFFF.w		; CE FF FF ; Decrement $FFFF.w [Flags: NZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $82, $00, $60		; 82 00 60 ; Branch always long to $82, $00, $60 [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0808E1.l,X		; FF E1 08 08 ; Subtract with carry (long,X) $0808E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $0D.b		; 24 0D ; Test bits $0D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $50, $0E		; 50 0E ; Branch if overflow clear to $50, $0E [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $10.b		; 64 10 ; Store zero to $10.b
	ora #$612B.w		; 09 2B 61 ; Logical OR #$612B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$622B.w		; 69 2B 62 ; Add #$622B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $42, $42		; 42 42 ; Reserved instruction
	jsr ($9520.w,X)		; FC 20 95 ; Jump to subroutine indirect indexed ($9520.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $43.b,X		; 55 43 ; Exclusive OR accumulator with memory $43.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsr ($1108.w,X)		; FC 08 11 ; Jump to subroutine indirect indexed ($1108.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ldy #$6508.w		; A0 08 65 ; Load #$6508.w into Y register [Writes: Y Index] [Flags: NZ]
	lda ($64.b,X)		; A1 64 ; Load accumulator ($64.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A2.b),Y		; 11 A2 ; OR accumulator with memory ($A2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $75.b		; 64 75 ; Store zero to $75.b
	lda $89.b,S		; A3 89 ; Load accumulator (stack relative) $89.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	asl $B489.w		; 0E 89 B4 ; Arithmetic shift left $B489.w [Flags: NCZ]
	ora $60A2.w		; 0D A2 60 ; Logical OR $60A2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($88.b,X)		; 61 88 ; Add with carry ($88.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	adc ($88.b,X)		; 61 88 ; Add with carry ($88.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	adc ($D1.b,X)		; 61 D1 ; Add with carry ($D1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $90D110.l		; 5C 10 D1 90 ; Jump long to $90D110.l [Flow: jump]
	ora $6260D2.l		; 0F D2 60 62 ; OR accumulator with memory (long) $6260D2.l [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $62, $E8, $BA		; 62 E8 BA ; Push effective relative address $62, $E8, $BA [Writes: Stack Pointer]
	.db $62, $A0, $15		; 62 A0 15 ; Push effective relative address $62, $A0, $15 [Writes: Stack Pointer]
	eor $9B.b,X		; 55 9B ; Exclusive OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $D0, $45		; D0 45 ; Branch if not equal to $D0, $45 [Flow: branch]
	lda $45A8.w,Y		; B9 A8 45 ; Load $45A8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $4EB8.w,Y		; B9 B8 4E ; Load $4EB8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $38B8.w,Y		; B9 B8 38 ; Load $38B8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $9068A1.l,X		; DF A1 68 90 ; Compare accumulator (long,X) $9068A1.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda ($62.b),Y		; B1 62 ; Load accumulator ($62.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $B9B1B0.l,X		; DF B0 B1 B9 ; Compare accumulator (long,X) $B9B1B0.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($B9.b),Y		; B1 B9 ; Load accumulator ($B9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp ($B9.b),Y		; D1 B9 ; Compare accumulator ($B9.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	.db $D0, $D1		; D0 D1 ; Branch if not equal to $D0, $D1 [Flow: branch]
	lda $39A8.w,Y		; B9 A8 39 ; Load $39A8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $39D0.w,X		; FE D0 39 ; Increment memory $39D0.w,X [Reads: X Index] [Flags: NZ]
	inc $C139.w,X		; FE 39 C1 ; Increment memory $C139.w,X [Reads: X Index] [Flags: NZ]
	inc $AA20.w,X		; FE 20 AA ; Increment memory $AA20.w,X [Reads: X Index] [Flags: NZ]
	jsl $69AA20.l		; 22 20 AA 69 ; Jump to subroutine long $69AA20.l [Writes: Stack Pointer] [Flow: call]
	jsr $69CA.w		; 20 CA 69 ; Jump to subroutine at $69CA.w [Writes: Stack Pointer] [Flow: call]
	jsr $22DE.w		; 20 DE 22 ; Jump to subroutine at $22DE.w [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec $5C22.w,X		; DE 22 5C ; Decrement memory $5C22.w,X [Reads: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	adc #$AA48.w		; 69 48 AA ; Add #$AA48.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $69AA5C.l		; 22 5C AA 69 ; Jump to subroutine long $69AA5C.l [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor $81A1.w		; 4D A1 81 ; Exclusive OR $81A1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $C0.b,S		; 63 C0 ; Add with carry (stack relative) $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($A0.b,X)		; A1 A0 ; Load accumulator ($A0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpx $5D.b		; E4 5D ; Compare $5D.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $E1.b,S		; A3 E1 ; Load accumulator (stack relative) $E1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $C0.b,S		; 63 C0 ; Add with carry (stack relative) $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cpx $A1.b		; E4 A1 ; Compare $A1.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ldx #$FFFF.w		; A2 FF FF ; Load #$FFFF.w into X register [Writes: X Index] [Flags: NZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $1C20.w,X		; 1E 20 1C ; Arithmetic shift left $1C20.w,X [Reads: X Index] [Flags: NCZ]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $82, $00, $FF		; 82 00 FF ; Branch always long to $82, $00, $FF [Flow: branch]
	sbc $FC1861.l,X		; FF 61 18 FC ; Subtract with carry (long,X) $FC1861.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $1F.b		; [PATTERN: Memory clearing operation] 25 1F ; Logical AND $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($CA.b),Y		; 91 CA ; Store accumulator ($CA.b),Y [Reads: Direct Page, Y Index, Accumulator]
	stz $2C.b		; 64 2C ; Store zero to $2C.b
	stz $FD.b		; 64 FD ; Store zero to $FD.b
	sta ($0E.b,S),Y		; 93 0E ; Store accumulator (stack relative indirect indexed) ($0E.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	stz $32.b,X		; [PATTERN: Memory clearing operation] 74 32 ; Store zero to $32.b,X [Reads: X Index]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($0C.b,S),Y		; 33 0C ; AND accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $6328.w		; 8C 28 63 ; Store Y register to $6328.w [Reads: Y Index]
	stz $031E.w		; 9C 1E 03 ; Store zero to $031E.w
	jsr $56ED.w		; 20 ED 56 ; Jump to subroutine at $56ED.w [Writes: Stack Pointer] [Flow: call]
	cpy $031D.w		; CC 1D 03 ; Compare $031D.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FECA71.l,X		; FF 71 CA FE ; Subtract with carry (long,X) $FECA71.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($C8.b),Y		; 31 C8 ; AND accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $642D.w,X		; DD 2D 64 ; Compare accumulator $642D.w,X [Reads: X Index] [Flags: NCZ]
	sbc $CCCB75.l,X		; FF 75 CB CC ; Subtract with carry (long,X) $CCCB75.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $1504.w,X		; 5D 04 15 ; Exclusive OR accumulator with memory $1504.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $FC63.w		; 2D 63 FC ; Logical AND $FC63.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $C9.b,X		; 55 C9 ; Exclusive OR accumulator with memory $C9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and [$5F.b]		; 27 5F ; AND accumulator with memory (long) [$5F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $A4.b		; 04 A4 ; Test and set bits $A4.b [Reads: Accumulator] [Flags: Z]
	eor $B704.w,X		; 5D 04 B7 ; Exclusive OR accumulator with memory $B704.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $B469.w,X		; 1E 69 B4 ; Arithmetic shift left $B469.w,X [Reads: X Index] [Flags: NCZ]
	jmp $1ECB69.l		; 5C 69 CB 1E ; Jump long to $1ECB69.l [Flow: jump]
	adc #$5CC8.w		; 69 C8 5C ; Add #$5CC8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$1D74.w		; 69 74 1D ; Add #$1D74.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$1D88.w		; 69 88 1D ; Add #$1D88.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$E3FD.w		; 69 FD E3 ; Add #$E3FD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and ($60.b),Y		; 31 60 ; AND accumulator with memory ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $55.b,X		; 15 55 ; OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and ($93.b,X)		; 21 93 ; Logical AND ($93.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldx $22.b,Y		; B6 22 ; Load X register $22.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ldx $3C5D.w,Y		; BE 5D 3C ; Load X register $3C5D.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $88BF.w,X		; 3C BF 88 ; Test bits $88BF.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cpy #$D03D.w		; C0 3D D0 ; Compare #$D03D.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$AC3D.w		; C0 3D AC ; Compare #$AC3D.w with Y register [Reads: Y Index] [Flags: NCZ]
	stz $FE61.w,X		; 9E 61 FE ; Store zero to $FE61.w,X [Reads: X Index]
	lda $9800.w,Y		; B9 00 98 ; Load $9800.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $BAFE01.l		; AF 01 FE BA ; Load long $BAFE01.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $FE.b		; C4 FE ; Compare $FE.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpy #$D088.w		; C0 88 D0 ; Compare #$D088.w with Y register [Reads: Y Index] [Flags: NCZ]
	asl $D288.w		; 0E 88 D2 ; Arithmetic shift left $D288.w [Flags: NCZ]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $C402.w,Y		; 19 02 C4 ; OR accumulator with memory $C402.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$D062.w		; A2 62 D0 ; Load #$D062.w into X register [Writes: X Index] [Flags: NZ]
	lda $1AFF01.l		; AF 01 FF 1A ; Load long $1AFF01.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec $FF.b		; C6 FF ; Decrement $FF.b [Reads: Direct Page] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$E0		; C2 E0
	cpx $10.b		; E4 10 ; Compare $10.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp ($62.b)		; D2 62 ; Compare accumulator (indirect) ($62.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	bit #$C08D.w		; 89 8D C0 ; Test bits #$C08D.w with accumulator [Reads: Accumulator] [Flags: Z]
	lda $8C.b		; A5 8C ; Load $8C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $8C.b,X		; D5 8C ; Compare accumulator $8C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $C08D.w,Y		; D9 8D C0 ; Compare accumulator $C08D.w,Y [Reads: Y Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A1.b		; E5 A1 ; Subtract $A1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx $F5.b		; E4 F5 ; Compare $F5.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $FF.b,S		; A3 FF ; Load accumulator (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FA4363.l,X		; FF 63 43 FA ; Subtract with carry (long,X) $FA4363.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $4B.b,S		; 63 4B ; Add with carry (stack relative) $4B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc $53.b,S		; 63 53 ; Add with carry (stack relative) $53.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	eor ($FA.b,S),Y		; 53 FA ; XOR accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FC4343.l,X		; DF 43 43 FC ; Compare accumulator (long,X) $FC4343.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ldy $1F.b,X		; B4 1F ; Load Y register $1F.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ora ($B4.b,X)		; 01 B4 ; Logical OR ($B4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $36EC02.l,X		; 5F 02 EC 36 ; Exclusive OR accumulator with memory (long,X) $36EC02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: NCZ]
	sbc $1F17FF.l,X		; FF FF 17 1F ; Subtract with carry (long,X) $1F17FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $17.b		; C6 17 ; Decrement $17.b [Reads: Direct Page] [Flags: NZ]
	jmp $1D8CC6.l		; 5C C6 8C 1D ; Jump long to $1D8CC6.l [Flow: jump]
	dec $95.b		; C6 95 ; Decrement $95.b [Reads: Direct Page] [Flags: NZ]
	ora $5C95C6.l,X		; 1F C6 95 5C ; Logical OR long $5C95C6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $55.b		; C6 55 ; Decrement $55.b [Reads: Direct Page] [Flags: NZ]
	ora $57C6.w,X		; 1D C6 57 ; OR accumulator with memory $57C6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $C6.b,X		; 36 C6 ; Rotate left $C6.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor [$5C.b],Y		; 57 5C ; Exclusive OR accumulator with memory (long indexed) [$5C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $CD.b		; C6 CD ; Decrement $CD.b [Reads: Direct Page] [Flags: NZ]
	ora $5CCDC6.l,X		; 1F C6 CD 5C ; Logical OR long $5CCDC6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: NZ]
	sbc $821E10.l,X		; FF 10 1E 82 ; Subtract with carry (long,X) $821E10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $80, $36		; 80 36 ; Branch always to $80, $36 [Flow: branch]
	sta ($40.b,S),Y		; 93 40 ; Store accumulator (stack relative indirect indexed) ($40.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	jsr $6100.w		; 20 00 61 ; Jump to subroutine at $6100.w [Writes: Stack Pointer] [Flow: call]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC04E1.l,X		; FF E1 04 FC ; Subtract with carry (long,X) $FC04E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $88.b,X		; 55 88 ; Exclusive OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $5A.b		; 25 5A ; Logical AND $5A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $8A.b,X		; 75 8A ; Add $8A.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $146469.l		; 5C 69 64 14 ; Jump long to $146469.l [Flow: jump]
	adc #$1463.w		; 69 63 14 ; Add #$1463.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta ($63.b)		; 92 63 ; Store accumulator (indirect) ($63.b) [Reads: Direct Page, Accumulator]
	jsr ($895A.w,X)		; FC 5A 89 ; Jump to subroutine indirect indexed ($895A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $AA.b		; 25 AA ; Logical AND $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp $156492.l		; 5C 92 64 15 ; Jump long to $156492.l [Flow: jump]
	eor $22.b,X		; 55 22 ; Exclusive OR accumulator with memory $22.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$2255.w		; 49 55 22 ; Exclusive OR #$2255.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$7B.b],Y		; 17 7B ; OR accumulator with memory (long indexed) [$7B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $227958.l		; 22 58 79 22 ; Jump to subroutine long $227958.l [Writes: Stack Pointer] [Flow: call]
	ora [$8F.b],Y		; 17 8F ; OR accumulator with memory (long indexed) [$8F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $228D58.l		; 22 58 8D 22 ; Jump to subroutine long $228D58.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $B915.w,Y		; F9 15 B9 ; Subtract with carry $B915.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $22B949.l		; 22 49 B9 22 ; Jump to subroutine long $22B949.l [Writes: Stack Pointer] [Flow: call]
	lda $FB1C.w,Y		; B9 1C FB ; Load $FB1C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sty $4E.b,X		; 94 4E ; Store Y register $4E.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	jsl $6930A9.l		; 22 A9 30 69 ; Jump to subroutine long $6930A9.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	jmp.w [$5ED0]		; DC D0 5E ; Jump long indirect [$5ED0] [Flow: jump]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jsl $2231C9.l		; 22 C9 31 22 ; Jump to subroutine long $2231C9.l [Writes: Stack Pointer] [Flow: call]
	ldy $C337.w		; AC 37 C3 ; Load $C337.w into Y register [Writes: Y Index] [Flags: NZ]
	sta $51.b,X		; 95 51 ; Store accumulator to $51.b,X [Reads: Accumulator, X Index]
.INDEX 16
	rep #$95		; C2 95
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
.ACCU 16
	rep #$A8		; C2 A8
	adc [$C2.b]		; 67 C2 ; Add with carry (long) [$C2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	rep #$CA		; C2 CA ; Reset processor status bits #$CA [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	and [$C3.b],Y		; 37 C3 ; AND accumulator with memory (long indexed) [$C3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	adc $C3.b,S		; 63 C3 ; Add with carry (stack relative) $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rep #$CA		; C2 CA ; Reset processor status bits #$CA [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cmp $38.b,S		; C3 38 ; Compare accumulator (stack relative) $38.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	rol $30B8.w		; 2E B8 30 ; Rotate left $30B8.w [Flags: NCZ]
	asl $4892.w,X		; 1E 92 48 ; Arithmetic shift left $4892.w,X [Reads: X Index] [Flags: NCZ]
	asl $2192.w,X		; 1E 92 21 ; Arithmetic shift left $2192.w,X [Reads: X Index] [Flags: NCZ]
	.db $42, $F9		; 42 F9 ; Reserved instruction
	and $35.b,X		; 35 35 ; Logical AND $35.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$3850.w		; 69 50 38 ; Add #$3850.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp $FE3128.l,X		; DF 28 31 FE ; Compare accumulator (long,X) $FE3128.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7B14FF.l,X		; FF FF 14 7B ; Subtract with carry (long,X) $7B14FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($5C.b,X)		; 61 5C ; Add with carry ($5C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $26, $6B		; 62 26 6B ; Push effective relative address $62, $26, $6B [Writes: Stack Pointer]
	cpx #$6B4C.w		; E0 4C 6B ; Compare #$6B4C.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$FFFF.w		; E0 FF FF ; Compare #$FFFF.w with X register [Reads: X Index] [Flags: NCZ]
	ora [$5C.b],Y		; 17 5C ; OR accumulator with memory (long indexed) [$5C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $17.b		; C6 17 ; Decrement $17.b [Reads: Direct Page] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dec $4D.b		; C6 4D ; Decrement $4D.b [Reads: Direct Page] [Flags: NZ]
	jmp $684DC6.l		; 5C C6 4D 68 ; Jump long to $684DC6.l [Flow: jump]
	dec $17.b		; C6 17 ; Decrement $17.b [Reads: Direct Page] [Flags: NZ]
	sta ($C6.b),Y		; 91 C6 ; Store accumulator ($C6.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora [$A4.b],Y		; 17 A4 ; OR accumulator with memory (long indexed) [$A4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $4D.b		; C6 4D ; Decrement $4D.b [Reads: Direct Page] [Flags: NZ]
	sta ($C6.b),Y		; 91 C6 ; Store accumulator ($C6.b),Y [Reads: Direct Page, Y Index, Accumulator]
	eor $C6A4.w		; 4D A4 C6 ; Exclusive OR $C6A4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	cop $1C.b		; 02 1C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $38, $72		; 62 38 72 ; Push effective relative address $62, $38, $72 [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $82, $36, $00		; 82 36 00 ; Branch always long to $82, $36, $00 [Flow: branch]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC0861.l,X		; FF 61 08 FC ; Subtract with carry (long,X) $FC0861.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($08.b,S),Y		; 53 08 ; XOR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $32.b		; 25 32 ; Logical AND $32.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($0A.b,S),Y		; 73 0A ; Add with carry (stack relative indirect indexed) ($0A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	trb $40.b		; 14 40 ; Test and reset bits $40.b [Reads: Accumulator] [Flags: Z]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	mvn $25,$89		; 54 89 25 ; Move block negative $25,$89 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	stz $8B.b,X		; 74 8B ; Store zero to $8B.b,X [Reads: X Index]
	jmp $FC6440.l		; 5C 40 64 FC ; Jump long to $FC6440.l [Flow: jump]
	sbc $31.b,S		; E3 31 ; Subtract stack-relative $31.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	jsr $5515.w		; 20 15 55 ; Jump to subroutine at $5515.w [Writes: Stack Pointer] [Flow: call]
	jsr $566D.w		; 20 6D 56 ; Jump to subroutine at $566D.w [Writes: Stack Pointer] [Flow: call]
	adc #$91A2.w		; 69 A2 91 ; Add #$91A2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $A3.b,S		; 63 A3 ; Add with carry (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($B6.b,S),Y		; 93 B6 ; Store accumulator (stack relative indirect indexed) ($B6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	jsr $B7EA.w		; 20 EA B7 ; Jump to subroutine at $B7EA.w [Writes: Stack Pointer] [Flow: call]
	jsr $88BA.w		; 20 BA 88 ; Jump to subroutine at $88BA.w [Writes: Stack Pointer] [Flow: call]
	and ($AC.b),Y		; 31 AC ; AND accumulator with memory ($AC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $DFB545.l		; 22 45 B5 DF ; Jump to subroutine long $DFB545.l [Writes: Stack Pointer] [Flow: call]
	eor $DFD4.w		; 4D D4 DF ; Exclusive OR $DFD4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $DFDC.w		; 4D DC DF ; Exclusive OR $DFDC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($D1.b),Y		; 51 D1 ; Exclusive OR accumulator with memory ($D1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $E363.w,X		; FE 63 E3 ; Increment memory $E363.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor #$F9C2.w		; 49 C2 F9 ; Exclusive OR #$F9C2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $3604FF.l,X		; FF FF 04 36 ; Subtract with carry (long,X) $3604FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $02.b		; 46 02 ; Logical shift right $02.b [Reads: Direct Page] [Flags: NCZ]
	sbc $2E4CFF.l,X		; FF FF 4C 2E ; Subtract with carry (long,X) $2E4CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $5C		; 70 5C ; Branch if overflow set to $70, $5C [Flow: branch]
	rol $1570.w		; 2E 70 15 ; Rotate left $1570.w [Flags: NCZ]
	and $1522.w		; 2D 22 15 ; Logical AND $1522.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $4A22.w,Y		; 59 22 4A ; Exclusive OR accumulator with memory $4A22.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $1A69.w		; 2C 69 1A ; Test bits $1A69.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $C6.b,X		; 35 C6 ; Logical AND $C6.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $4032.w		; 1C 32 40 ; Test and reset bits $4032.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $006100.l		; 22 00 61 00 ; Jump to subroutine long $006100.l [Writes: Stack Pointer] [Flow: call]
	sbc $04E1FF.l,X		; FF FF E1 04 ; Subtract with carry (long,X) $04E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0025.w,X)		; FC 25 00 ; Jump to subroutine indirect indexed ($0025.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor ($01.b)		; 52 01 ; Exclusive OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $02A5.w,X		; FD A5 02 ; Subtract with carry $02A5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($C855.w,X)		; FC 55 C8 ; Jump to subroutine indirect indexed ($C855.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $CA.b,X		; 75 CA ; Add $CA.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $48646D.l,X		; 5F 6D 64 48 ; Exclusive OR accumulator with memory (long,X) $48646D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $FD04.w,X		; DE 04 FD ; Decrement memory $FD04.w,X [Reads: X Index] [Flags: NZ]
	adc $20CB.w,X		; 7D CB 20 ; Add $20CB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $FC04.w,X		; DE 04 FC ; Decrement memory $FC04.w,X [Reads: X Index] [Flags: NZ]
	eor $16C9.w,X		; 5D C9 16 ; Exclusive OR accumulator with memory $16C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1463.w		; 8D 63 14 ; Store accumulator to $1463.w [Reads: Accumulator]
	adc $2A63.w		; 6D 63 2A ; Add $2A63.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jmp ($28C2.w)		; 6C C2 28 ; Jump indirect to ($28C2.w) [Flow: jump]
	sta $CC28C2.l		; 8F C2 28 CC ; Store accumulator (long) $CC28C2.l [Reads: Accumulator]
	rep #$48		; C2 48 ; Reset processor status bits #$48 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	adc $BD48C2.l,X		; 7F C2 48 BD ; Add long $BD48C2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.ACCU 16
	rep #$20		; C2 20
	adc $FC67.w		; 6D 67 FC ; Add $FC67.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	stx $98.b		; 86 98 ; Store X register to $98.b [Reads: X Index]
	and #$0769.w		; 29 69 07 ; Logical AND #$0769.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $9A66.w,X		; FD 66 9A ; Subtract with carry $9A66.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	.db $70, $68		; 70 68 ; Branch if overflow set to $70, $68 [Flow: branch]
	sbc $9B6D.w,X		; FD 6D 9B ; Subtract with carry $9B6D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $2808.w,Y		; D9 08 28 ; Compare accumulator $2808.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $2208.w,Y		; D9 08 22 ; Compare accumulator $2208.w,Y [Reads: Y Index] [Flags: NCZ]
	sta $FC67.w		; 8D 67 FC ; Store accumulator to $FC67.w [Reads: Accumulator]
	sta $2099.w		; 8D 99 20 ; Store accumulator to $2099.w [Reads: Accumulator]
	sbc $0C56.w		; ED 56 0C ; Subtract $0C56.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $7F.b		; 65 7F ; Add $7F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $7A.b,X		; 16 7A ; Arithmetic shift left $7A.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	jsl $228D15.l		; 22 15 8D 22 ; Jump to subroutine long $228D15.l [Writes: Stack Pointer] [Flow: call]
	bit $8D.b,X		; 34 8D ; Test bits $8D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$8A7A.w		; 49 7A 8A ; Exclusive OR #$8A7A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $142BFF.l,X		; FF FF 2B 14 ; Subtract with carry (long,X) $142BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $610012.l,X		; FF 12 00 61 ; Subtract with carry (long,X) $610012.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $161C61.l,X		; FF 61 1C 16 ; Subtract with carry (long,X) $161C61.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$FC63.w		; 29 63 FC ; Logical AND #$FC63.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $93.b,X		; 15 93 ; OR accumulator with memory $93.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	jmp $CF27C9.l		; 5C C9 27 CF ; Jump long to $CF27C9.l [Flow: jump]
	tsb $A5.b		; 04 A5 ; Test and set bits $A5.b [Reads: Accumulator] [Flags: Z]
	dec $DD04.w		; CE 04 DD ; Decrement $DD04.w [Flags: NZ]
	sta ($64.b,S),Y		; 93 64 ; Store accumulator (stack relative indirect indexed) ($64.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc $DECB7C.l,X		; FF 7C CB DE ; Subtract with carry (long,X) $DECB7C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$FF64.w		; 29 64 FF ; Logical AND #$FF64.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$1F.b]		; 27 1F ; AND accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $1703.w,X		; 1E 03 17 ; Arithmetic shift left $1703.w,X [Reads: X Index] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $5F8F17.l,X		; 5F 17 8F 5F ; Exclusive OR accumulator with memory (long,X) $5F8F17.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda [$8E.b]		; A7 8E ; Load accumulator (long) [$8E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $227AA7.l		; 22 A7 7A 22 ; Jump to subroutine long $227AA7.l [Writes: Stack Pointer] [Flow: call]
	trb $DE.b		; 14 DE ; Test and reset bits $DE.b [Reads: Accumulator] [Flags: Z]
	eor $22DD88.l,X		; 5F 88 DD 22 ; Exclusive OR accumulator with memory (long,X) $22DD88.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $DD.b		; A4 DD ; Load $DD.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsl $22DDC9.l		; 22 C9 DD 22 ; Jump to subroutine long $22DDC9.l [Writes: Stack Pointer] [Flow: call]
	inc $747E.w,X		; FE 7E 74 ; Increment memory $747E.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $55.b,X		; 15 55 ; OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc $F47D.w,X		; FE 7D F4 ; Increment memory $F47D.w,X [Reads: X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp $CFB8F9.l		; CF F9 B8 CF ; Compare accumulator (long) $CFB8F9.l [Reads: Accumulator] [Flags: NCZ]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	lda #$68C2.w		; A9 C2 68 ; Load #$68C2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lda #$8AC2.w		; A9 C2 8A ; Load #$8AC2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$C8C2.w		; A9 C2 C8 ; Load #$C8C2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$B8C2.w		; 29 C2 B8 ; Logical AND #$B8C2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $C2		; 30 C2 ; Branch if minus to $30, $C2 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	rep #$C8		; C2 C8 ; Reset processor status bits #$C8 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
.ACCU 16
.INDEX 16
	rep #$FC		; C2 FC
	.db $82, $98, $2A		; 82 98 2A ; Branch always long to $82, $98, $2A [Flow: branch]
	and #$8A07.w		; 29 07 8A ; Logical AND #$8A07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FF07.w		; 29 07 FF ; Logical AND #$FF07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $62, $9A, $DB		; 62 9A DB ; Push effective relative address $62, $9A, $DB [Writes: Stack Pointer]
	and ($68.b,S),Y		; 33 68 ; AND accumulator (stack relative indirect indexed) ($68.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda ($68.b)		; B2 68 ; Load accumulator (indirect) ($68.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $C89B6C.l,X		; FF 6C 9B C8 ; Subtract with carry (long,X) $C89B6C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$8908.w		; C9 08 89 ; Compare #$8908.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$2A08.w		; C9 08 2A ; Compare #$2A08.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$2308.w		; C9 08 23 ; Compare #$2308.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	and ($67.b,S),Y		; 33 67 ; AND accumulator (stack relative indirect indexed) ($67.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $67B2.w		; 20 B2 67 ; Jump to subroutine at $67B2.w [Writes: Stack Pointer] [Flow: call]
	jsr ($998C.w,X)		; FC 8C 99 ; Jump to subroutine indirect indexed ($998C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FBE1.w,X		; FD E1 FB ; Subtract with carry $FBE1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	stz $B8E8.w,X		; 9E E8 B8 ; Store zero to $B8E8.w,X [Reads: X Index]
	eor $E8.b,S		; 43 E8 ; Exclusive OR accumulator with stack relative $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sta $E8.b,S		; 83 E8 ; Store accumulator (stack relative) $E8.b,S [Reads: Stack Pointer, Accumulator]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ldy $BDE8.w,X		; BC E8 BD ; Load Y register $BDE8.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$1F.b],Y		; 17 1F ; OR accumulator with memory (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $57.b		; C6 57 ; Decrement $57.b [Reads: Direct Page] [Flags: NZ]
	ora $1F97C6.l,X		; 1F C6 97 1F ; Logical OR long $1F97C6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $CD.b		; C6 CD ; Decrement $CD.b [Reads: Direct Page] [Flags: NZ]
	ora $5917C6.l,X		; 1F C6 17 59 ; Logical OR long $5917C6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $57.b		; C6 57 ; Decrement $57.b [Reads: Direct Page] [Flags: NZ]
	eor $97C6.w,Y		; 59 C6 97 ; Exclusive OR accumulator with memory $97C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $CDC6.w,Y		; 59 C6 CD ; Exclusive OR accumulator with memory $CDC6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $17C6.w,Y		; 59 C6 17 ; Exclusive OR accumulator with memory $17C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($C6.b,S),Y		; 93 C6 ; Store accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	eor [$93.b],Y		; 57 93 ; Exclusive OR accumulator with memory (long indexed) [$93.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $97.b		; C6 97 ; Decrement $97.b [Reads: Direct Page] [Flags: NZ]
	sta ($C6.b,S),Y		; 93 C6 ; Store accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp $C693.w		; CD 93 C6 ; Compare $C693.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora [$CC.b],Y		; 17 CC ; OR accumulator with memory (long indexed) [$CC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $57.b		; C6 57 ; Decrement $57.b [Reads: Direct Page] [Flags: NZ]
	cpy $97C6.w		; CC C6 97 ; Compare $97C6.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $CDC6.w		; CC C6 CD ; Compare $CDC6.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $F0C6.w		; CC C6 F0 ; Compare $F0C6.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $121C71.l,X		; FF 71 1C 12 ; Subtract with carry (long,X) $121C71.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $091CE1.l,X		; FF E1 1C 09 ; Subtract with carry (long,X) $091CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $0D.b,X		; 34 0D ; Test bits $0D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora #$0E40.w		; 09 40 0E ; Logical OR #$0E40.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($31.b,X)		; 61 31 ; Add with carry ($31.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cop $4C.b		; 02 4C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $62.b		; 65 62 ; Add $62.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8336.w,X		; FD 36 83 ; Subtract with carry $8336.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4735.w,X		; FD 35 47 ; Subtract with carry $4735.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $FD0255.l		; 5C 55 02 FD ; Jump long to $FD0255.l [Flow: jump]
	sta $45.b,X		; [PATTERN: Memory clearing operation] 95 45 ; Store accumulator to $45.b,X [Reads: Accumulator, X Index]
	stz $65.b		; 64 65 ; Store zero to $65.b
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $81.b,Y		; 96 81 ; Store X register $81.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stz $6B.b,X		; 74 6B ; Store zero to $6B.b,X [Reads: X Index]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $85.b		; 26 85 ; Rotate left $85.b [Reads: Direct Page] [Flags: NCZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $FD81.w		; 2E 81 FD ; Rotate left $FD81.w [Flags: NCZ]
	and ($02.b),Y		; 31 02 ; AND accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp $6221.w		; 4C 21 62 ; Jump to $6221.w [Flow: jump]
	sbc $8632.w,X		; FD 32 86 ; Subtract with carry $8632.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $FD0129.l		; 5C 29 01 FD ; Jump long to $FD0129.l [Flow: jump]
	sta ($84.b)		; 92 84 ; Store accumulator (indirect) ($84.b) [Reads: Direct Page, Accumulator]
	stz $21.b		; 64 21 ; Store zero to $21.b
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($00.b),Y		; 91 00 ; Store accumulator ($00.b),Y [Reads: Direct Page, Y Index, Accumulator]
	inc $02D1.w,X		; FE D1 02 ; Increment memory $02D1.w,X [Reads: X Index] [Flags: NZ]
	ldy $21.b,X		; B4 21 ; Load Y register $21.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	.db $62, $FE, $D2		; 62 FE D2 ; Push effective relative address $62, $FE, $D2 [Writes: Stack Pointer]
	stx $C4.b		; 86 C4 ; Store X register to $C4.b [Reads: X Index]
	and #$CC01.w		; 29 01 CC ; Logical AND #$CC01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $0D.b		; 24 0D ; Test bits $0D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($3A.b),Y		; 11 3A ; OR accumulator with memory ($3A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc #$9123.w		; E9 23 91 ; Subtract #$9123.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cpx $8065.w		; EC 65 80 ; Compare $8065.w with X register [Reads: X Index] [Flags: NCZ]
	ldy #$56ED.w		; A0 ED 56 ; Load #$56ED.w into Y register [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta ($DF.b,X)		; 81 DF ; Store accumulator ($DF.b,X) [Reads: Direct Page, Accumulator, X Index]
	sty $71.b,X		; 94 71 ; Store Y register $71.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $B0, $7B		; B0 7B ; Branch if carry set to $B0, $7B [Flow: branch]
	sta ($B9.b)		; 92 B9 ; Store accumulator (indirect) ($B9.b) [Reads: Direct Page, Accumulator]
	sta ($B8.b)		; 92 B8 ; Store accumulator (indirect) ($B8.b) [Reads: Direct Page, Accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $4399.w,X		; 5D 99 43 ; Exclusive OR accumulator with memory $4399.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $2B78.w,X		; 5D 78 2B ; Exclusive OR accumulator with memory $2B78.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $42, $88		; 42 88 ; Reserved instruction
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $42, $88		; 42 88 ; Reserved instruction
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $88		; 42 88 ; Reserved instruction
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $42, $88		; 42 88 ; Reserved instruction
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor [$88.b],Y		; 57 88 ; Exclusive OR accumulator with memory (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $5D6F.w		; 9C 6F 5D ; Store zero to $5D6F.w
	and $A8FA37.l		; 2F 37 FA A8 ; AND accumulator with memory (long) $A8FA37.l [Writes: Accumulator] [Flags: NZ]
	lda #$D0FE.w		; A9 FE D0 ; Load #$D0FE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$BBFE.w		; A9 FE BB ; Load #$BBFE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $BB.b,S		; C3 BB ; Compare accumulator (stack relative) $BB.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $DB.b,S		; C3 DB ; Compare accumulator (stack relative) $DB.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($63.b,S),Y		; D3 63 ; Compare accumulator (stack relative indirect indexed) ($63.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $73.b,S		; E3 73 ; Subtract stack-relative $73.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora #$A011.w		; 09 11 A0 ; Logical OR #$A011.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$A155.w		; 09 55 A1 ; Logical OR #$A155.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$BB0B.w		; C0 0B BB ; Compare #$BB0B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$7B4B.w		; C0 4B 7B ; Compare #$7B4B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$BB4B.w		; C0 4B BB ; Compare #$BB4B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$675C.w		; C0 5C 67 ; Compare #$675C.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $C46013.l		; 5C 13 60 C4 ; Jump long to $C46013.l [Flow: jump]
	ora ($60.b,S),Y		; 13 60 ; OR accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy $A011.w		; CC 11 A0 ; Compare $A011.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta ($1C.b,X)		; 81 1C ; Store accumulator ($1C.b,X) [Reads: Direct Page, Accumulator, X Index]
	adc ($00.b,S),Y		; 73 00 ; Add with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $18E2FF.l,X		; FF FF E2 18 ; Subtract with carry (long,X) $18E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $2E.b		; 24 2E ; Test bits $2E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $3325.w		; 0D 25 33 ; Logical OR $3325.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $81.b,Y		; 96 81 ; Store X register $81.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldy $0F12.w,X		; BC 12 0F ; Load Y register $0F12.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cmp $6233.w		; CD 33 62 ; Compare $6233.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $FD8336.l,X		; FF 36 83 FD ; Subtract with carry (long,X) $FD8336.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($38.b,X)		; E1 38 ; Subtract with carry ($38.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $55.b,X		; 15 55 ; OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $3B.b,S		; C3 3B ; Compare accumulator (stack relative) $3B.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsl $223A58.l		; 22 58 3A 22 ; Jump to subroutine long $223A58.l [Writes: Stack Pointer] [Flow: call]
	stz $4A.b		; 64 4A ; Store zero to $4A.b
	jsl $225871.l		; 22 71 58 22 ; Jump to subroutine long $225871.l [Writes: Stack Pointer] [Flow: call]
	sty $4A.b		; 84 4A ; Store Y register to $4A.b [Reads: Y Index]
	jsl $223A90.l		; 22 90 3A 22 ; Jump to subroutine long $223A90.l [Writes: Stack Pointer] [Flow: call]
	ldy #$222A.w		; A0 2A 22 ; Load #$222A.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr ($F4AA.w,X)		; FC AA F4 ; Jump to subroutine indirect indexed ($F4AA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($74CB.w,X)		; FC CB 74 ; Jump to subroutine indirect indexed ($74CB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $742B.w,X		; FD 2B 74 ; Subtract with carry $742B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F44A.w,X		; FD 4A F4 ; Subtract with carry $F44A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($F4CC.w,X)		; FC CC F4 ; Jump to subroutine indirect indexed ($F4CC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($74AD.w,X)		; FC AD 74 ; Jump to subroutine indirect indexed ($74AD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $F42C.w,X		; FD 2C F4 ; Subtract with carry $F42C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $744D.w,X		; FD 4D 74 ; Subtract with carry $744D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	lda $4948FA.l,X		; BF FA 48 49 ; Load long $4948FA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $49B0.w,X		; FE B0 49 ; Increment memory $49B0.w,X [Reads: X Index] [Flags: NZ]
	inc $6160.w,X		; FE 60 61 ; Increment memory $6160.w,X [Reads: X Index] [Flags: NZ]
	inc $6198.w,X		; FE 98 61 ; Increment memory $6198.w,X [Reads: X Index] [Flags: NZ]
	inc $A3B1.w,X		; FE B1 A3 ; Increment memory $A3B1.w,X [Reads: X Index] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$B1		; E2 B1
	cld		; D8 ; Clear decimal flag [Flags: D]
.ACCU 8
.INDEX 8
	sep #$BA		; E2 BA
	clv		; B8 ; Clear overflow flag [Flags: V]
	sbc $99FE.w,Y		; F9 FE 99 ; Subtract with carry $99FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inc $819E.w,X		; FE 9E 81 ; Increment memory $819E.w,X [Reads: X Index] [Flags: NZ]
	sbc $D20249.l,X		; FF 49 02 D2 ; Subtract with carry (long,X) $D20249.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $05834E.l,X		; FF 4E 83 05 ; Subtract with carry (long,X) $05834E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $52.b		; 05 52 ; Logical OR $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$DD.b		; C0 DD ; Compare #$DD.b with Y register [Reads: Y Index] [Flags: NCZ]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $C052.w,X		; DD 52 C0 ; Compare accumulator $C052.w,X [Reads: X Index] [Flags: NCZ]
	bit $13.b		; 24 13 ; Test bits $13.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy #$C0.b		; A0 C0 ; Load #$C0.b into Y register [Writes: Y Index] [Flags: NZ]
	ora ($A2.b,S),Y		; 13 A2 ; OR accumulator (stack relative indirect indexed) ($A2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $93.b		; 85 93 ; Store accumulator to $93.b [Reads: Accumulator]
	cpy #$85.b		; C0 85 ; Compare #$85.b with Y register [Reads: Y Index] [Flags: NCZ]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc ($93.b,X)		; E1 93 ; Subtract with carry ($93.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$E1.b		; C0 E1 ; Compare #$E1.b with Y register [Reads: Y Index] [Flags: NCZ]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $162AFF.l,X		; FF FF 2A 16 ; Subtract with carry (long,X) $162AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	.db $80, $1C		; 80 1C ; Branch always to $80, $1C [Flow: branch]
	jsl $FFFF00.l		; 22 00 FF FF ; Jump to subroutine long $FFFF00.l [Writes: Stack Pointer] [Flow: call]
	sep #$08		; E2 08 ; Set processor status bits #$08 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $2258E2.l		; 22 E2 58 22 ; Jump to subroutine long $2258E2.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$22		; E2 22
	bit $F9.b		; 24 F9 ; Test bits $F9.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	rol $F924.w,X		; 3E 24 F9 ; Rotate left $F924.w,X [Reads: X Index] [Flags: NCZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $4E.b,X		; 15 4E ; OR accumulator with memory $4E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $4E3D.w,X		; 5D 3D 4E ; Exclusive OR accumulator with memory $4E3D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9E5A.w,X		; 5D 5A 9E ; Exclusive OR accumulator with memory $9E5A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($22.b,S),Y		; 93 22 ; Store accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	stz $AA92.w,X		; 9E 92 AA ; Store zero to $AA92.w,X [Reads: X Index]
	.db $30, $C2		; 30 C2 ; Branch if minus to $30, $C2 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rep #$CC		; C2 CC ; Reset processor status bits #$CC [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	eor ($C3.b,X)		; 41 C3 ; Exclusive OR accumulator with memory ($C3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor ($C3.b,X)		; 41 C3 ; Exclusive OR accumulator with memory ($C3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $33.b		; A6 33 ; Load $33.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	and [$A6.b]		; 27 A6 ; AND accumulator with memory (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$6A.b],Y		; 37 6A ; AND accumulator with memory (long indexed) [$6A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $67.b		; A6 67 ; Load $67.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	and [$6B.b],Y		; 37 6B ; AND accumulator with memory (long indexed) [$6B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($3D.b),Y		; B1 3D ; Load accumulator ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$B1.b		; 29 B1 ; Logical AND #$B1.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($6B.b,X)		; 41 6B ; Exclusive OR accumulator with memory ($6B.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($59.b),Y		; B1 59 ; Load accumulator ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $6A41.w		; CD 41 6A ; Compare $6A41.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor #$FE.b		; 49 FE ; Exclusive OR #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $94E668.l,X		; 9F 68 E6 94 ; Store accumulator (long,X) $94E668.l,X [Reads: Accumulator, X Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	cpx $97.b		; E4 97 ; Compare $97.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	trb $D4E5.w		; 1C E5 D4 ; Test and reset bits $D4E5.w [Reads: Accumulator] [Flags: Z]
	trb $DCE5.w		; 1C E5 DC ; Test and reset bits $DCE5.w [Reads: Accumulator] [Flags: Z]
	ora $5CDCE3.l,X		; 1F E3 DC 5C ; Logical OR long $5CDCE3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $DC.b,S		; E3 DC ; Subtract stack-relative $DC.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	inc $94.b		; E6 94 ; Increment $94.b [Reads: Direct Page] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cpx $A6.b		; E4 A6 ; Compare $A6.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $FE22.w		; 2E 22 FE ; Rotate left $FE22.w [Flags: NCZ]
	ror $34.b		; 66 34 ; Rotate right $34.b [Reads: Direct Page] [Flags: NCZ]
	lda #$79.b		; A9 79 ; Load #$79.b into accumulator [Writes: Accumulator] [Flags: NZ]
	inc $8FA3.w,X		; FE A3 8F ; Increment memory $8FA3.w,X [Reads: X Index] [Flags: NZ]
	jsl $698FB7.l		; 22 B7 8F 69 ; Jump to subroutine long $698FB7.l [Writes: Stack Pointer] [Flow: call]
	ldy $D0.b,X		; B4 D0 ; Load Y register $D0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	adc #$AB.b		; 69 AB ; Add #$AB.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $C369.w,X		; 9D 69 C3 ; Store accumulator to $C369.w,X [Reads: Accumulator, X Index]
	sta $CF69.w,X		; 9D 69 CF ; Store accumulator to $CF69.w,X [Reads: Accumulator, X Index]
	stz $CC69.w,X		; 9E 69 CC ; Store zero to $CC69.w,X [Reads: X Index]
	jmp.w [$DB69]		; DC 69 DB ; Jump long indirect [$DB69] [Flow: jump]
	sta $AF69.w,X		; 9D 69 AF ; Store accumulator to $AF69.w,X [Reads: Accumulator, X Index]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp [$BB.b]		; C7 BB ; Compare accumulator (long) [$BB.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($BB.b,S),Y		; D3 BB ; Compare accumulator (stack relative indirect indexed) ($BB.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $162AFF.l,X		; FF FF 2A 16 ; Subtract with carry (long,X) $162AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $2E, $60		; 62 2E 60 ; Push effective relative address $62, $2E, $60 [Writes: Stack Pointer]
	rol $0022.w		; 2E 22 00 ; Rotate left $0022.w [Flags: NCZ]
	.db $82, $00, $83		; 82 00 83 ; Branch always long to $82, $00, $83 [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8804E2.l,X		; FF E2 04 88 ; Subtract with carry (long,X) $8804E2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp ($61.b)		; D2 61 ; Compare accumulator (indirect) ($61.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpx #$E4.b		; E0 E4 ; Compare #$E4.b with X register [Reads: X Index] [Flags: NCZ]
	.db $10, $E8		; 10 E8 ; Branch if plus to $10, $E8 [Flow: branch]
	cmp ($62.b)		; D2 62 ; Compare accumulator (indirect) ($62.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	inc $8782.w,X		; FE 82 87 ; Increment memory $8782.w,X [Reads: X Index] [Flags: NZ]
	lda ($28.b),Y		; B1 28 ; Load accumulator ($28.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $85		; 42 85 ; Reserved instruction
	ldy #$3B.b		; A0 3B ; Load #$3B.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $62, $FE, $85		; 62 FE 85 ; Push effective relative address $62, $FE, $85 [Writes: Stack Pointer]
	asl $B1.b		; 06 B1 ; Arithmetic shift left $B1.b [Reads: Direct Page] [Flags: NCZ]
	.db $50, $01		; 50 01 ; Branch if overflow clear to $50, $01 [Flow: branch]
	sbc $D00445.l,X		; FF 45 04 D0 ; Subtract with carry (long,X) $D00445.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $38.b		; E5 38 ; Subtract $38.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($23.b,S),Y		; D3 23 ; Compare accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $34A8.w,X		; FE A8 34 ; Increment memory $34A8.w,X [Reads: X Index] [Flags: NZ]
	sbc $B83448.l,X		; FF 48 34 B8 ; Subtract with carry (long,X) $B83448.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($FE.b),Y		; 91 FE ; Store accumulator ($FE.b),Y [Reads: Direct Page, Y Index, Accumulator]
	inc $348A.w,X		; FE 8A 34 ; Increment memory $348A.w,X [Reads: X Index] [Flags: NZ]
	sbc $FE346A.l,X		; FF 6A 34 FE ; Subtract with carry (long,X) $FE346A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	wai		; CB ; Wait for interrupt
	bit $FF.b,X		; 34 FF ; Test bits $FF.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $FE.b,X		; 34 FE ; Test bits $FE.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sty $FFB4.w		; 8C B4 FF ; Store Y register to $FFB4.w [Reads: Y Index]
	jmp ($B0B4.w)		; 6C B4 B0 ; Jump indirect to ($B0B4.w) [Flow: jump]
	adc ($3D.b,X)		; 61 3D ; Add with carry ($3D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($38.b),Y		; B1 38 ; Load accumulator ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$B1.b		; C0 B1 ; Compare #$B1.b with Y register [Reads: Y Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A1.b		; E5 A1 ; Subtract $A1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx $F5.b		; E4 F5 ; Compare $F5.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $FF.b,S		; A3 FF ; Load accumulator (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0083.l,X		; FF 83 00 FF ; Subtract with carry (long,X) $FF0083.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $081CE1.l,X		; FF E1 1C 08 ; Subtract with carry (long,X) $081CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $0D.b		; 24 0D ; Test bits $0D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $50, $0E		; 50 0E ; Branch if overflow clear to $50, $0E [Flow: branch]
	ora #$2B.b		; 09 2B ; Logical OR #$2B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($60.b,X)		; 61 60 ; Add with carry ($60.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$62.b		; 29 62 ; Logical AND #$62.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $06A3.w,X		; FD A3 06 ; Subtract with carry $06A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and ($01.b)		; 32 01 ; AND accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $0D.b		; 24 0D ; Test bits $0D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	inc $0423.w,X		; FE 23 04 ; Increment memory $0423.w,X [Reads: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and #$61.b		; 29 61 ; Logical AND #$61.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $600268.l		; 22 68 02 60 ; Jump to subroutine long $600268.l [Writes: Stack Pointer] [Flow: call]
	stz $10.b		; 64 10 ; Store zero to $10.b
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	eor $FD62.w,Y		; 59 62 FD ; Exclusive OR accumulator with memory $FD62.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $87.b		; A4 87 ; Load $87.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $88.b		; 02 88 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $0E		; 50 0E ; Branch if overflow clear to $50, $0E [Flow: branch]
	inc $8524.w,X		; FE 24 85 ; Increment memory $8524.w,X [Reads: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor $E061.w,Y		; 59 61 E0 ; Exclusive OR accumulator with memory $E061.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	ldx #$68.b		; A2 68 ; Load #$68.b into X register [Writes: X Index] [Flags: NZ]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $10.b		; 64 10 ; Store zero to $10.b
	sbc #$2B.b		; E9 2B ; Subtract #$2B.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $2D, $36		; 62 2D 36 ; Push effective relative address $62, $2D, $36 [Writes: Stack Pointer]
	ldy $FE.b		; A4 FE ; Load $FE.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $82, $87, $B1		; 82 87 B1 ; Branch always long to $82, $87, $B1 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $85		; 42 85 ; Reserved instruction
	ldy #$3B.b		; A0 3B ; Load #$3B.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $62, $FE, $85		; 62 FE 85 ; Push effective relative address $62, $FE, $85 [Writes: Stack Pointer]
	asl $B1.b		; 06 B1 ; Arithmetic shift left $B1.b [Reads: Direct Page] [Flags: NCZ]
	.db $50, $01		; 50 01 ; Branch if overflow clear to $50, $01 [Flow: branch]
	sbc $D00445.l,X		; FF 45 04 D0 ; Subtract with carry (long,X) $D00445.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $39.b		; E5 39 ; Subtract $39.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsr $3D28.w		; 20 28 3D ; Jump to subroutine at $3D28.w [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $4118.w,X		; 3D 18 41 ; AND accumulator with memory $4118.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $3E78.w,X		; FE 78 3E ; Increment memory $3E78.w,X [Reads: X Index] [Flags: NZ]
	sta ($80.b,S),Y		; 93 80 ; Store accumulator (stack relative indirect indexed) ($80.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	rol $3093.w,X		; 3E 93 30 ; Rotate left $3093.w,X [Reads: X Index] [Flags: NCZ]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($A0.b),Y		; 11 A0 ; OR accumulator with memory ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $A1.b		; 65 A1 ; Add $A1.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx $11.b		; E4 11 ; Compare $11.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ldx #$E4.b		; A2 E4 ; Load #$E4.b into X register [Writes: X Index] [Flags: NZ]
	adc $A3.b,X		; 75 A3 ; Add $A3.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($38.b),Y		; B1 38 ; Load accumulator ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$B1.b		; C0 B1 ; Compare #$B1.b with Y register [Reads: Y Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($A2.b),Y		; 11 A2 ; OR accumulator with memory ($A2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora ($A0.b),Y		; 11 A0 ; OR accumulator with memory ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $32E2.w,X		; FD E2 32 ; Subtract with carry $32E2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	eor $64C0.w,Y		; 59 C0 64 ; Exclusive OR accumulator with memory $64C0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $A3.b,X		; 75 A3 ; Add $A3.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc $A1.b		; 65 A1 ; Add $A1.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$4B.b		; C0 4B ; Compare #$4B.b with Y register [Reads: Y Index] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$8B.b		; C0 8B ; Compare #$8B.b with Y register [Reads: Y Index] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$CA.b		; C0 CA ; Compare #$CA.b with Y register [Reads: Y Index] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FF142B.l,X		; FF 2B 14 FF ; Subtract with carry (long,X) $FF142B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cpx $4856.w		; EC 56 48 ; Compare $4856.w with X register [Reads: X Index] [Flags: NCZ]
	cpx $1B56.w		; EC 56 1B ; Compare $1B56.w with X register [Reads: X Index] [Flags: NCZ]
	ldx #$FF.b		; A2 FF ; Load #$FF.b into X register [Writes: X Index] [Flags: NZ]
	sbc $9C16FF.l,X		; FF FF 16 9C ; Subtract with carry (long,X) $9C16FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FFFF.w,X		; FE FF FF ; Increment memory $FFFF.w,X [Reads: X Index] [Flags: NZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $08E1FF.l,X		; FF FF E1 08 ; Subtract with carry (long,X) $08E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $A3.b,S		; 63 A3 ; Add with carry (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr ($34AB.w,X)		; FC AB 34 ; Jump to subroutine indirect indexed ($34AB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $344B.w,X		; FD 4B 34 ; Subtract with carry $344B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $DEB8.w		; 20 B8 DE ; Jump to subroutine at $DEB8.w [Writes: Stack Pointer] [Flow: call]
	jsr $3690.w		; 20 90 36 ; Jump to subroutine at $3690.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $90		; 50 90 ; Branch if overflow clear to $50, $90 [Flow: branch]
	rol $08.b,X		; 36 08 ; Rotate left $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lda ($73.b),Y		; B1 73 ; Load accumulator ($73.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $1A		; B0 1A ; Branch if carry set to $B0, $1A [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inc $9EE2.w,X		; FE E2 9E ; Increment memory $9EE2.w,X [Reads: X Index] [Flags: NZ]
	sbc $CB9E02.l,X		; FF 02 9E CB ; Subtract with carry (long,X) $CB9E02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($46.b),Y		; B1 46 ; Load accumulator ($46.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	and $FE88.w,Y		; 39 88 FE ; AND accumulator with memory $FE88.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $9F.b		; E5 9F ; Subtract $9F.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $BB9F05.l,X		; FF 05 9F BB ; Subtract with carry (long,X) $BB9F05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($FA.b,S),Y		; 53 FA ; XOR accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $53.b,S		; C3 53 ; Compare accumulator (stack relative) $53.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	and $9AFE.w,Y		; 39 FE 9A ; AND accumulator with memory $9AFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($FE.b),Y		; 51 FE ; Exclusive OR accumulator with memory ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor ($FE.b),Y		; 51 FE ; Exclusive OR accumulator with memory ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	lda ($FE.b,X)		; A1 FE ; Load accumulator ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $73		; 80 73 ; Branch always to $80, $73 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $90, $73		; 90 73 ; Branch if carry clear to $90, $73 [Flow: branch]
	sty $A3.b,X		; 94 A3 ; Store Y register $A3.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	eor $42E8.w,X		; 5D E8 42 ; Exclusive OR accumulator with memory $42E8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $C8.b,X		; 74 C8 ; Store zero to $C8.b,X [Reads: X Index]
	lda $5D.b,S		; A3 5D ; Load accumulator (stack relative) $5D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $1BA4.w,X		; 3C A4 1B ; Test bits $1BA4.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $48.b		; 14 48 ; Test and reset bits $48.b [Reads: Accumulator] [Flags: Z]
	lsr $4864.w,X		; 5E 64 48 ; Logical shift right $4864.w,X [Reads: X Index] [Flags: NCZ]
	lsr $4363.w,X		; 5E 63 43 ; Logical shift right $4363.w,X [Reads: X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($3B.b,S),Y		; 33 3B ; AND accumulator (stack relative indirect indexed) ($3B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor ($33.b,S),Y		; 53 33 ; XOR accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and ($4B.b,S),Y		; 33 4B ; AND accumulator (stack relative indirect indexed) ($4B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	eor ($FA.b,S),Y		; 53 FA ; XOR accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsl $32FEA1.l		; 22 A1 FE 32 ; Jump to subroutine long $32FEA1.l [Writes: Stack Pointer] [Flow: call]
	lda ($FE.b),Y		; B1 FE ; Load accumulator ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $B1		; 42 B1 ; Reserved instruction
	inc $A152.w,X		; FE 52 A1 ; Increment memory $A152.w,X [Reads: X Index] [Flags: NZ]
	inc $10A0.w,X		; FE A0 10 ; Increment memory $10A0.w,X [Reads: X Index] [Flags: NZ]
	rol $D0.b,X		; 36 D0 ; Rotate left $D0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $0A61.w		; 1C 61 0A ; Test and reset bits $0A61.w [Reads: Accumulator] [Flags: Z]
	.db $82, $00, $83		; 82 00 83 ; Branch always long to $82, $00, $83 [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE00E1.l,X		; FF E1 00 FE ; Subtract with carry (long,X) $FE00E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $299980.l		; 22 80 99 29 ; Jump to subroutine long $299980.l [Writes: Stack Pointer] [Flow: call]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $82.b		; 02 82 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$3B.b		; C0 3B ; Compare #$3B.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $62, $FE, $25		; 62 FE 25 ; Push effective relative address $62, $FE, $25 [Writes: Stack Pointer]
	ora ($99.b,X)		; 01 99 ; Logical OR ($99.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor ($02.b),Y		; 51 02 ; Exclusive OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $BB0305.l,X		; FF 05 03 BB ; Subtract with carry (long,X) $BB0305.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $23.b,S		; 43 23 ; Exclusive OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and ($30.b),Y		; 31 30 ; AND accumulator with memory ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor ($30.b),Y		; 51 30 ; Exclusive OR accumulator with memory ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($4C.b),Y		; 31 4C ; AND accumulator with memory ($4C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $3A41.w,X		; 5D 41 3A ; Exclusive OR accumulator with memory $3A41.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $9F30.w,Y		; F9 30 9F ; Subtract with carry $9F30.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $AA3888.l,X		; 9F 88 38 AA ; Store accumulator (long,X) $AA3888.l,X [Reads: Accumulator, X Index]
	adc #$44.b		; 69 44 ; Add #$44.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $D0.b,X		; 34 D0 ; Test bits $D0.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	lsr $A31B.w,X		; 5E 1B A3 ; Logical shift right $A31B.w,X [Reads: X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $63FAB3.l,X		; 3F B3 FA 63 ; AND accumulator with memory (long,X) $63FAB3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	stz $A2.b,X		; 74 A2 ; Store zero to $A2.b,X [Reads: X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($9A.b),Y		; B1 9A ; Load accumulator ($9A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$9A.b		; C0 9A ; Compare #$9A.b with Y register [Reads: Y Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $9A		; D0 9A ; Branch if not equal to $D0, $9A [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $F9A2.w,Y		; 99 A2 F9 ; Store accumulator to $F9A2.w,Y [Reads: Y Index, Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$73.b		; C0 73 ; Compare #$73.b with Y register [Reads: Y Index] [Flags: NCZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora #$C0.b		; 09 C0 ; Logical OR #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora #$C0.b		; 09 C0 ; Logical OR #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	adc ($C0.b,X)		; 61 C0 ; Add with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	adc ($C0.b,X)		; 61 C0 ; Add with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($2B.b)		; D2 2B ; Compare accumulator (indirect) ($2B.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $602E62.l,X		; FF 62 2E 60 ; Subtract with carry (long,X) $602E62.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $83.b,X		; 36 83 ; Rotate left $83.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	trb $0A61.w		; 1C 61 0A ; Test and reset bits $0A61.w [Reads: Accumulator] [Flags: Z]
	jsl L000100.l		; 22 00 81 00 ; Jump to subroutine long L000100.l [Writes: Stack Pointer] [Flow: call]
	sbc $08E1FF.l,X		; FF FF E1 08 ; Subtract with carry (long,X) $08E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $8126.w,X		; FE 26 81 ; Increment memory $8126.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $85.b		; A6 85 ; Load $85.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($98.b,X)		; 61 98 ; Add with carry ($98.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($01.b)		; 92 01 ; Store accumulator (indirect) ($01.b) [Reads: Direct Page, Accumulator]
	inc $04A9.w,X		; FE A9 04 ; Increment memory $04A9.w,X [Reads: X Index] [Flags: NZ]
	inc $0029.w,X		; FE 29 00 ; Increment memory $0029.w,X [Reads: X Index] [Flags: NZ]
	sbc $D883A6.l,X		; FF A6 83 D8 ; Subtract with carry (long,X) $D883A6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $87.b		; 26 87 ; Rotate left $87.b [Reads: Direct Page] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $D8, $92		; 62 D8 92 ; Push effective relative address $62, $D8, $92 [Writes: Stack Pointer]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and #$06.b		; 29 06 ; Logical AND #$06.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FC02A9.l,X		; FF A9 02 FC ; Subtract with carry (long,X) $FC02A9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $2A1880.l		; 22 80 18 2A ; Jump to subroutine long $2A1880.l [Writes: Stack Pointer] [Flow: call]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldx #$82.b		; A2 82 ; Load #$82.b into X register [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FC, $A4		; 62 FC A4 ; Push effective relative address $62, $FC, $A4 [Writes: Stack Pointer]
	stx $38.b		; 86 38 ; Store X register to $38.b [Reads: X Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	mvp $50,$84		; 44 84 50 ; Move block positive $50,$84 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $42, $80		; 42 80 ; Reserved instruction
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $82A2.w,X		; FD A2 82 ; Subtract with carry $82A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $594A.w,X		; FE 4A 59 ; Increment memory $594A.w,X [Reads: X Index] [Flags: NZ]
	inc $595A.w,X		; FE 5A 59 ; Increment memory $595A.w,X [Reads: X Index] [Flags: NZ]
	inc $6E18.w,X		; FE 18 6E ; Increment memory $6E18.w,X [Reads: X Index] [Flags: NZ]
	inc $6E28.w,X		; FE 28 6E ; Increment memory $6E28.w,X [Reads: X Index] [Flags: NZ]
	inc $6E38.w,X		; FE 38 6E ; Increment memory $6E38.w,X [Reads: X Index] [Flags: NZ]
	inc $6E48.w,X		; FE 48 6E ; Increment memory $6E48.w,X [Reads: X Index] [Flags: NZ]
	inc $6E58.w,X		; FE 58 6E ; Increment memory $6E58.w,X [Reads: X Index] [Flags: NZ]
	inc $3529.w,X		; FE 29 35 ; Increment memory $3529.w,X [Reads: X Index] [Flags: NZ]
	adc #$5D.b		; 69 5D ; Add #$5D.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $69.b,X		; 35 69 ; Logical AND $69.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $3B.b,S		; 23 3B ; AND accumulator with stack relative $3B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc $FA.b,S		; 63 FA ; Add with carry (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and $43.b,S		; 23 43 ; AND accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	trb $AC.b		; 14 AC ; Test and reset bits $AC.b [Reads: Accumulator] [Flags: Z]
	ldy $5C.b		; A4 5C ; Load $5C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $24A4.w		; AC A4 24 ; Load $24A4.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $5488.w		; AE 88 54 ; Load $5488.w into X register [Writes: X Index] [Flags: NZ]
	ldx $2688.w		; AE 88 26 ; Load $2688.w into X register [Writes: X Index] [Flags: NZ]
	cpy #$5D.b		; C0 5D ; Compare #$5D.b with Y register [Reads: Y Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cld		; D8 ; Clear decimal flag [Flags: D]
	sec		; 38 ; Set carry flag [Flags: C]
	and $FBAC.w,Y		; 39 AC FB ; AND accumulator with memory $FBAC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $10, $3A		; 10 3A ; Branch if plus to $10, $3A [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	and #$74.b		; 29 74 ; Logical AND #$74.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ldx #$74.b		; A2 74 ; Load #$74.b into X register [Writes: X Index] [Flags: NZ]
	cmp $2B.b,S		; C3 2B ; Compare accumulator (stack relative) $2B.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($2B.b,S),Y		; D3 2B ; Compare accumulator (stack relative indirect indexed) ($2B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $4B.b,S		; C3 4B ; Compare accumulator (stack relative) $4B.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($4B.b,S),Y		; D3 4B ; Compare accumulator (stack relative indirect indexed) ($4B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	dec $E5FE.w,X		; DE FE E5 ; Decrement memory $E5FE.w,X [Reads: X Index] [Flags: NZ]
	sta $9F05FF.l,X		; 9F FF 05 9F ; Store accumulator (long,X) $9F05FF.l,X [Reads: Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	eor $CAFE.w,Y		; 59 FE CA ; Exclusive OR accumulator with memory $CAFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $CAFE.w,Y		; 59 FE CA ; Exclusive OR accumulator with memory $CAFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($FE.b,X)		; A1 FE ; Load accumulator ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda ($FE.b),Y		; B1 FE ; Load accumulator ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp ($FE.b,X)		; C1 FE ; Compare accumulator ($FE.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	ldx #$C9.b		; A2 C9 ; Load #$C9.b into X register [Writes: X Index] [Flags: NZ]
	inc $6AB6.w,X		; FE B6 6A ; Increment memory $6AB6.w,X [Reads: X Index] [Flags: NZ]
	adc #$CA.b		; 69 CA ; Add #$CA.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$FE.b		; 69 FE ; Add #$FE.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc [$1E.b]		; E7 1E ; Subtract with carry (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FE1E07.l,X		; FF 07 1E FE ; Subtract with carry (long,X) $FE1E07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc #$9F.b		; E9 9F ; Subtract #$9F.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc $A09F09.l,X		; FF 09 9F A0 ; Subtract with carry (long,X) $A09F09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$DE.b		; A0 DE ; Load #$DE.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	dec $A2E1.w,X		; DE E1 A2 ; Decrement memory $A2E1.w,X [Reads: X Index] [Flags: NZ]
	sbc $7889.w,Y		; F9 89 78 ; Subtract with carry $7889.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$89.b		; C0 89 ; Compare #$89.b with Y register [Reads: Y Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpy #$D9.b		; C0 D9 ; Compare #$D9.b with Y register [Reads: Y Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$C0.b		; 09 C0 ; Logical OR #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$C0.b		; 09 C0 ; Logical OR #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$28.b		; 49 28 ; Exclusive OR #$28.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $1C811C.l		; 22 1C 81 1C ; Jump to subroutine long $1C811C.l [Writes: Stack Pointer] [Flow: call]
	.db $62, $2E, $61		; 62 2E 61 ; Push effective relative address $62, $2E, $61 [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $82, $00, $FF		; 82 00 FF ; Branch always long to $82, $00, $FF [Flow: branch]
	sbc $0804E1.l,X		; FF E1 04 08 ; Subtract with carry (long,X) $0804E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $0D.b		; 24 0D ; Test bits $0D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc ($68.b,X)		; 61 68 ; Add with carry ($68.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $62, $FE, $25		; 62 FE 25 ; Push effective relative address $62, $FE, $25 [Writes: Stack Pointer]
	.db $80, $98		; 80 98 ; Branch always to $80, $98 [Flow: branch]
	eor $FE01.w,Y		; 59 01 FE ; Exclusive OR accumulator with memory $FE01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $84.b		; 85 84 ; Store accumulator to $84.b [Reads: Accumulator]
	lda ($23.b,X)		; A1 23 ; Load accumulator ($23.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $CA0221.l,X		; FF 21 02 CA ; Subtract with carry (long,X) $CA0221.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $FF62.w		; 20 62 FF ; Jump to subroutine at $FF62.w [Writes: Stack Pointer] [Flow: call]
	rol $06.b		; 26 06 ; Rotate left $06.b [Reads: Direct Page] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $62, $01, $FF		; 62 01 FF ; Push effective relative address $62, $01, $FF [Writes: Stack Pointer]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $10, $3A		; 10 3A ; Branch if plus to $10, $3A [Flow: branch]
	.db $30, $EC		; 30 EC ; Branch if minus to $30, $EC [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $40.b,X		; 15 40 ; OR accumulator with memory $40.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
.INDEX 16
	rep #$14		; C2 14
	eor ($C2.b)		; 52 C2 ; Exclusive OR accumulator with memory (indirect) ($C2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
.INDEX 16
	rep #$14		; C2 14
	sta ($C2.b,S),Y		; 93 C2 ; Store accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	bit $A0.b		; 24 A0 ; Test bits $A0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
.ACCU 16
	rep #$26		; C2 26
	cpy #$14C2.w		; C0 C2 14 ; Compare #$14C2.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $25C2.w		; CD C2 25 ; Compare $25C2.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	jmp.w [$4DC2]		; DC C2 4D ; Jump long indirect [$4DC2] [Flow: jump]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

.INDEX 16
	rep #$5C		; C2 5C
	eor ($C2.b,S),Y		; 53 C2 ; XOR accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp $C280.w		; 4C 80 C2 ; Jump to $C280.w [Flow: jump]
	jmp $4DC290.l		; 5C 90 C2 4D ; Jump long to $4DC290.l [Flow: jump]
	ldy #$15C2.w		; A0 C2 15 ; Load #$15C2.w into Y register [Writes: Y Index] [Flags: NZ]
	eor ($27.b,X)		; 41 27 ; Exclusive OR accumulator with memory ($27.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$47.b],Y		; 17 47 ; OR accumulator with memory (long indexed) [$47.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$87.b],Y		; 17 87 ; OR accumulator with memory (long indexed) [$87.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $C4.b,X		; 16 C4 ; Arithmetic shift left $C4.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $E9.b,X		; 16 E9 ; Arithmetic shift left $E9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $30, $45		; 30 45 ; Branch if minus to $30, $45 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $2B4E.w		; 20 4E 2B ; Jump to subroutine at $2B4E.w [Writes: Stack Pointer] [Flow: call]
	jsl $206B53.l		; 22 53 6B 20 ; Jump to subroutine long $206B53.l [Writes: Stack Pointer] [Flow: call]
	.db $82, $2D, $30		; 82 2D 30 ; Branch always long to $82, $2D, $30 [Flow: branch]
	sta $6B.b		; 85 6B ; Store accumulator to $6B.b [Reads: Accumulator]
	jsr $2B8E.w		; 20 8E 2B ; Jump to subroutine at $2B8E.w [Writes: Stack Pointer] [Flow: call]
	jsr $6B93.w		; 20 93 6B ; Jump to subroutine at $6B93.w [Writes: Stack Pointer] [Flow: call]
	jsr $2DA2.w		; 20 A2 2D ; Jump to subroutine at $2DA2.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $2BAE.w		; 20 AE 2B ; Jump to subroutine at $2BAE.w [Writes: Stack Pointer] [Flow: call]
	jsr $6BB3.w		; 20 B3 6B ; Jump to subroutine at $6BB3.w [Writes: Stack Pointer] [Flow: call]
	jsl $502DC2.l		; 22 C2 2D 50 ; Jump to subroutine long $502DC2.l [Writes: Stack Pointer] [Flow: call]
	cmp $6B.b		; C5 6B ; Compare $6B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jsl $202BCE.l		; 22 CE 2B 20 ; Jump to subroutine long $202BCE.l [Writes: Stack Pointer] [Flow: call]
	cmp ($6B.b),Y		; D1 6B ; Compare accumulator ($6B.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	and ($DA.b,X)		; 21 DA ; Logical AND ($DA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $DE40.w		; 2D 40 DE ; Logical AND $DE40.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $2741.w		; 4D 41 27 ; Exclusive OR $2741.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor [$6B.b]		; 47 6B ; Exclusive OR accumulator with memory (long) [$6B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $6B.b		; 85 6B ; Store accumulator to $6B.b [Reads: Accumulator]
	jmp $6A45.w		; 4C 45 6A ; Jump to $6A45.w [Flow: jump]
	jmp $2C4E.w		; 4C 4E 2C ; Jump to $2C4E.w [Flow: jump]
	lsr $6A53.w,X		; 5E 53 6A ; Logical shift right $6A53.w,X [Reads: X Index] [Flags: NCZ]
	jmp $2E82.w		; 4C 82 2E ; Jump to $2E82.w [Flow: jump]
	jmp $6A85.w		; 4C 85 6A ; Jump to $6A85.w [Flow: jump]
	jmp $2C8E.w		; 4C 8E 2C ; Jump to $2C8E.w [Flow: jump]
	jmp $4C6A93.l		; 5C 93 6A 4C ; Jump long to $4C6A93.l [Flow: jump]
	ldx #$4C2E.w		; A2 2E 4C ; Load #$4C2E.w into X register [Writes: X Index] [Flags: NZ]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $28AD.w		; 4D AD 28 ; Exclusive OR $28AD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc $3B.b,S		; 63 3B ; Add with carry (stack relative) $3B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and [$B3.b]		; 27 B3 ; AND accumulator with memory (long) [$B3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and [$BB.b]		; 27 BB ; AND accumulator with memory (long) [$BB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr ($B4EB.w,X)		; FC EB B4 ; Jump to subroutine indirect indexed ($B4EB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and [$D3.b]		; 27 D3 ; AND accumulator with memory (long) [$D3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $BBFAD3.l		; 2F D3 FA BB ; AND accumulator with memory (long) $BBFAD3.l [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($72.b,X)		; C1 72 ; Compare accumulator ($72.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sbc $9BC3.w,Y		; F9 C3 9B ; Subtract with carry $9BC3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sta [$A3.b],Y		; 97 A3 ; Store accumulator (long indexed) [$A3.b],Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $AB340A.l,X		; FF 0A 34 AB ; Subtract with carry (long,X) $AB340A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp ($E3.b,S),Y		; D3 E3 ; Compare accumulator (stack relative indirect indexed) ($E3.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $80, $73		; 80 73 ; Branch always to $80, $73 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	stz $E8.b,X		; [PATTERN: Memory clearing operation] 74 E8 ; Store zero to $E8.b,X [Reads: X Index]
	sta ($74.b,X)		; 81 74 ; Store accumulator ($74.b,X) [Reads: Direct Page, Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($A0.b),Y		; 11 A0 ; OR accumulator with memory ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $11.b		; 64 11 ; Store zero to $11.b
	ldx #$1381.w		; A2 81 13 ; Load #$1381.w into X register [Writes: X Index] [Flags: NZ]
	cpy #$5388.w		; C0 88 53 ; Compare #$5388.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $C050.w,Y		; D9 50 C0 ; Compare accumulator $C050.w,Y [Reads: Y Index] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr $8200.w		; 20 00 82 ; Jump to subroutine at $8200.w [Writes: Stack Pointer] [Flow: call]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC1CE1.l,X		; FF E1 1C FC ; Subtract with carry (long,X) $FC1CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $01		; B0 01 ; Branch if carry set to $B0, $01 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	ldx $FD0D.w		; AE 0D FD ; Load $FD0D.w into X register [Writes: X Index] [Flags: NZ]
	and ($00.b,X)		; 21 00 ; Logical AND ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $FC61.w,Y		; 99 61 FC ; Store accumulator to $FC61.w,Y [Reads: Y Index, Accumulator]
	bit $1981.w		; 2C 81 19 ; Test bits $1981.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $10.b		; C4 10 ; Compare $10.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($02.b)		; B2 02 ; Load accumulator (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $05CB.w,X		; FD CB 05 ; Subtract with carry $05CB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $C2		; 70 C2 ; Branch if overflow set to $70, $C2 [Flow: branch]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $8001.w		; CD 01 80 ; Compare $8001.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp ($02.b),Y		; D1 02 ; Compare accumulator ($02.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	inc $032D.w,X		; FE 2D 03 ; Increment memory $032D.w,X [Reads: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$62		; C2 62
	inc $072B.w,X		; FE 2B 07 ; Increment memory $072B.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($02.b)		; B2 02 ; Load accumulator (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $03AB.w,X		; FE AB 03 ; Increment memory $03AB.w,X [Reads: X Index] [Flags: NZ]
	lda #$6289.w		; A9 89 62 ; Load #$6289.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc $87A7.w,X		; FE A7 87 ; Increment memory $87A7.w,X [Reads: X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$83.b]		; 27 83 ; AND accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	and $62.b,S		; 23 62 ; AND accumulator with stack relative $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $600221.l,X		; FF 21 02 60 ; Subtract with carry (long,X) $600221.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	dec $2080.w,X		; DE 80 20 ; Decrement memory $2080.w,X [Reads: X Index] [Flags: NZ]
	dec $28A0.w,X		; DE A0 28 ; Decrement memory $28A0.w,X [Reads: X Index] [Flags: NZ]
	dec $3B83.w,X		; DE 83 3B ; Decrement memory $3B83.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($23.b,S),Y		; B3 23 ; Load accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($2B.b,S),Y		; B3 2B ; Load accumulator (stack relative indirect indexed) ($2B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($33.b,S),Y		; B3 33 ; Load accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($3B.b,S),Y		; B3 3B ; Load accumulator (stack relative indirect indexed) ($3B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($63.b,S),Y		; B3 63 ; Load accumulator (stack relative indirect indexed) ($63.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	adc ($FA.b,S),Y		; 73 FA ; Add with carry (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	dec $60B8.w,X		; DE B8 60 ; Decrement memory $60B8.w,X [Reads: X Index] [Flags: NZ]
	dec $6880.w,X		; DE 80 68 ; Decrement memory $6880.w,X [Reads: X Index] [Flags: NZ]
	dec $7278.w,X		; DE 78 72 ; Decrement memory $7278.w,X [Reads: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($88.b)		; 72 88 ; Add with carry (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta ($72.b,X)		; 81 72 ; Store accumulator ($72.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $7B83.w,Y		; F9 83 7B ; Subtract with carry $7B83.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sta $8B.b,S		; 83 8B ; Store accumulator (stack relative) $8B.b,S [Reads: Stack Pointer, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $340A.w,X		; FE 0A 34 ; Increment memory $340A.w,X [Reads: X Index] [Flags: NZ]
	sta $C3.b,S		; 83 C3 ; Store accumulator (stack relative) $C3.b,S [Reads: Stack Pointer, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sta $CB.b,S		; 83 CB ; Store accumulator (stack relative) $CB.b,S [Reads: Stack Pointer, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp ($60DE.w,X)		; 7C DE 60 ; Jump indirect indexed to ($60DE.w,X) [Reads: X Index] [Flow: jump]
	sty $60DE.w		; 8C DE 60 ; Store Y register to $60DE.w [Reads: Y Index]
	stz $60DE.w		; 9C DE 60 ; Store zero to $60DE.w
	ldy $60DE.w		; AC DE 60 ; Load $60DE.w into Y register [Writes: Y Index] [Flags: NZ]
	stx $89.b		; 86 89 ; Store X register to $89.b [Reads: X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	adc ($78.b,S),Y		; 73 78 ; Add with carry (stack relative indirect indexed) ($78.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $3A		; 10 3A ; Branch if plus to $10, $3A [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($C0.b,S),Y		; 53 C0 ; XOR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $9D.b,X		; 34 9D ; Test bits $9D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ldy #$910A.w		; A0 0A 91 ; Load #$910A.w into Y register [Writes: Y Index] [Flags: NZ]
	cpy #$9038.w		; C0 38 90 ; Compare #$9038.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D90B.w		; C0 0B D9 ; Compare #$D90B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D54C.w		; C0 4C D5 ; Compare #$D54C.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda $60.b,S		; A3 60 ; Load accumulator (stack relative) $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($C0.b,X)		; C1 C0 ; Compare accumulator ($C0.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	.db $42, $D9		; 42 D9 ; Reserved instruction
	cpy #$E173.w		; C0 73 E1 ; Compare #$E173.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$C199.w		; C0 99 C1 ; Compare #$C199.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$13D9.w		; C0 D9 13 ; Compare #$13D9.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$53D9.w		; C0 D9 53 ; Compare #$53D9.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$8BBB.w		; C0 BB 8B ; Compare #$8BBB.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$CABB.w		; C0 BB CA ; Compare #$CABB.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$E3B0.w		; C0 B0 E3 ; Compare #$E3B0.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsl $1C2018.l		; 22 18 20 1C ; Jump to subroutine long $1C2018.l [Writes: Stack Pointer] [Flow: call]
	sbc $0451FF.l,X		; FF FF 51 04 ; Subtract with carry (long,X) $0451FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($C851.w,X)		; FC 51 C8 ; Jump to subroutine indirect indexed ($C851.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $1D.b		; 24 1D ; Test bits $1D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $17.b,S		; 03 17 ; OR accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $AF1463.l		; 2F 63 14 AF ; AND accumulator with memory (long) $AF1463.l [Writes: Accumulator] [Flags: NZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	jmp $1D4C89.l		; 5C 89 4C 1D ; Jump long to $1D4C89.l [Flow: jump]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $5C642F.l,X		; 5F 2F 64 5C ; Exclusive OR accumulator with memory (long,X) $5C642F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $7CFD64.l		; AF 64 FD 7C ; Load long $7CFD64.l into accumulator [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp $04C9.w		; 4C C9 04 ; Jump to $04C9.w [Flow: jump]
	and [$1F.b],Y		; 37 1F ; AND accumulator with memory (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $AF.b,X		; 35 AF ; Logical AND $AF.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$1F4B.w		; 69 4B 1F ; Add #$1F4B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$69AF.w		; 49 AF 69 ; Exclusive OR #$69AF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec $22.b,X		; D6 22 ; Decrement memory $22.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	jmp $1422D8.l		; 5C D8 22 14 ; Jump long to $1422D8.l [Flow: jump]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsl $B406FD.l		; 22 FD 06 B4 ; Jump to subroutine long $B406FD.l [Writes: Stack Pointer] [Flow: call]
	inc $C852.w,X		; FE 52 C8 ; Increment memory $C852.w,X [Reads: X Index] [Flags: NZ]
	sta [$3F.b],Y		; 97 3F ; Store accumulator (long indexed) [$3F.b],Y [Reads: Direct Page, Y Index, Accumulator]
	adc $94.b,S		; 63 94 ; Add with carry (stack relative) $94.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lda $FE63.w,X		; BD 63 FE ; Load $FE63.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp $C9A489.l		; 5C 89 A4 C9 ; Jump long to $C9A489.l [Flow: jump]
	tsb $CC.b		; 04 CC ; Test and set bits $CC.b [Reads: Accumulator] [Flags: Z]
	cmp #$FF04.w		; C9 04 FF ; Compare #$FF04.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc ($CA.b)		; 72 CA ; Add with carry (indirect) ($CA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DC643F.l,X		; DF 3F 64 DC ; Compare accumulator (long,X) $DC643F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda $FF64.w,X		; BD 64 FF ; Load $FF64.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($B78B.w,X)		; 7C 8B B7 ; Jump indirect indexed to ($B78B.w,X) [Reads: X Index] [Flow: jump]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B9.b,X		; B5 B9 ; Load $B9.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$B9C9.w		; 69 C9 B9 ; Add #$B9C9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$2894.w		; 69 94 28 ; Add #$2894.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $2228DC.l		; 22 DC 28 22 ; Jump to subroutine long $2228DC.l [Writes: Stack Pointer] [Flow: call]
	sty $D8.b,X		; 94 D8 ; Store Y register $D8.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	jsl $22D8DC.l		; 22 DC D8 22 ; Jump to subroutine long $22D8DC.l [Writes: Stack Pointer] [Flow: call]
	inc $F192.w,X		; FE 92 F1 ; Increment memory $F192.w,X [Reads: X Index] [Flags: NZ]
	sbc $24F132.l,X		; FF 32 F1 24 ; Subtract with carry (long,X) $24F132.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	wai		; CB ; Wait for interrupt
	sbc $E39B.w,Y		; F9 9B E3 ; Subtract with carry $E39B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	sbc $1F34FF.l,X		; FF FF 34 1F ; Subtract with carry (long,X) $1F34FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	wai		; CB ; Wait for interrupt
	cop $B4.b		; 02 B4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $CBB401.l		; 2F 01 B4 CB ; AND accumulator with memory (long) $CBB401.l [Writes: Accumulator] [Flags: NZ]
	cop $2D.b		; 02 2D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $5D.b,X		; 34 5D ; Test bits $5D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	jsr $5D4C.w		; 20 4C 5D ; Jump to subroutine at $5D4C.w [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jmp $2D5D.w		; 4C 5D 2D ; Jump to $2D5D.w [Flow: jump]
	stz $5D.b		; 64 5D ; Store zero to $5D.b
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jmp ($205D.w,X)		; 7C 5D 20 ; Jump indirect indexed to ($205D.w,X) [Reads: X Index] [Flow: jump]
	jmp ($2D5D.w,X)		; 7C 5D 2D ; Jump indirect indexed to ($2D5D.w,X) [Reads: X Index] [Flow: jump]
	sty $5D.b,X		; 94 5D ; Store Y register $5D.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $AC2088.l,X		; 7F 88 20 AC ; Add long $AC2088.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $AC48.w,X		; 5D 48 AC ; Exclusive OR accumulator with memory $AC48.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $AE40.w,X		; 5D 40 AE ; Exclusive OR accumulator with memory $AE40.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor ($BA.b),Y		; 51 BA ; Exclusive OR accumulator with memory ($BA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $4343.w,Y		; F9 43 43 ; Subtract with carry $4343.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and [$5B.b],Y		; 37 5B ; AND accumulator with memory (long indexed) [$5B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc $0135.w		; 6D 35 01 ; Add $0135.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $0245.w		; 6D 45 02 ; Add $0245.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $01B5.w		; 6D B5 01 ; Add $01B5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $02C5.w		; 6D C5 02 ; Add $02C5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $1F15FF.l,X		; FF FF 15 1F ; Subtract with carry (long,X) $1F15FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $15.b		; C6 15 ; Decrement $15.b [Reads: Direct Page] [Flags: NZ]
	eor $9B15C6.l,X		; 5F C6 15 9B ; Exclusive OR accumulator with memory (long,X) $9B15C6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $4D.b		; C6 4D ; Decrement $4D.b [Reads: Direct Page] [Flags: NZ]
	ora $5F4DC6.l,X		; 1F C6 4D 5F ; Logical OR long $5F4DC6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $95.b		; C6 95 ; Decrement $95.b [Reads: Direct Page] [Flags: NZ]
	and $6F95C6.l		; 2F C6 95 6F ; AND accumulator with memory (long) $6F95C6.l [Writes: Accumulator] [Flags: NZ]
	dec $95.b		; C6 95 ; Decrement $95.b [Reads: Direct Page] [Flags: NZ]
	ldx $C6.b		; A6 C6 ; Load $C6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp $C62F.w		; CD 2F C6 ; Compare $C62F.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $C66F.w		; CD 6F C6 ; Compare $C66F.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $C6A6.w		; CD A6 C6 ; Compare $C6A6.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $C697.w		; 4D 97 C6 ; Exclusive OR $C697.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($0A.b,X)		; 61 0A ; Add with carry ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($40.b)		; 92 40 ; Store accumulator (indirect) ($40.b) [Reads: Direct Page, Accumulator]
	lda ($40.b)		; B2 40 ; Load accumulator (indirect) ($40.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $08E1FF.l,X		; FF FF E1 08 ; Subtract with carry (long,X) $08E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $10, $36		; 10 36 ; Branch if plus to $10, $36 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $73.b		; 26 73 ; Rotate left $73.b [Reads: Direct Page] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	stz $FC.b,X		; [PATTERN: Memory clearing operation] 74 FC ; Store zero to $FC.b,X [Reads: X Index]
	lda $34.b,S		; A3 34 ; Load accumulator (stack relative) $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $3445.w,X		; FD 45 34 ; Subtract with carry $3445.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $183D.w		; 9C 3D 18 ; Store zero to $183D.w
	jmp.w [$603D]		; DC 3D 60 ; Jump long indirect [$603D] [Flow: jump]
	stz $603D.w		; 9C 3D 60 ; Store zero to $603D.w
	jmp.w [$2A3D]		; DC 3D 2A ; Jump long indirect [$2A3D] [Flow: jump]
	lda $9C48C4.l		; AF C4 48 9C ; Load long $9C48C4.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $1A.b		; C4 1A ; Compare $1A.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	lda $1AFE.w		; AD FE 1A ; Load $1AFE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $1AFE.w,X		; BD FE 1A ; Load $1AFE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $2AFE.w		; CD FE 2A ; Compare $2AFE.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $3AFE.w,X		; 9D FE 3A ; Store accumulator to $3AFE.w,X [Reads: Accumulator, X Index]
	sta $3AFE.w,X		; 9D FE 3A ; Store accumulator to $3AFE.w,X [Reads: Accumulator, X Index]
	lda $3AFE.w		; AD FE 3A ; Load $3AFE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $4AFE.w		; CD FE 4A ; Compare $4AFE.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $5AFE.w,X		; BD FE 5A ; Load $5AFE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $5AFE.w		; AD FE 5A ; Load $5AFE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $23FE.w		; CD FE 23 ; Compare $23FE.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $A723FA.l,X		; 9F FA 23 A7 ; Store accumulator (long,X) $A723FA.l,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $DF.b,S		; 23 DF ; AND accumulator with stack relative $DF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr ($5F8E.w,X)		; FC 8E 5F ; Jump to subroutine indirect indexed ($5F8E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($DEEB.w,X)		; FC EB DE ; Jump to subroutine indirect indexed ($DEEB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $DE0B.w,X		; FD 0B DE ; Subtract with carry $DE0B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($5EEC.w,X)		; FC EC 5E ; Jump to subroutine indirect indexed ($5EEC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $5E0C.w,X		; FD 0C 5E ; Subtract with carry $5E0C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $DF43FA.l,X		; DF FA 43 DF ; Compare accumulator (long,X) $DF43FA.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr ($5FEE.w,X)		; FC EE 5F ; Jump to subroutine indirect indexed ($5FEE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $5F0E.w,X		; FD 0E 5F ; Subtract with carry $5F0E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DE2A.w,X		; FD 2A DE ; Subtract with carry $DE2A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DE4A.w,X		; FD 4A DE ; Subtract with carry $DE4A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $5E2B.w,X		; FD 2B 5E ; Subtract with carry $5E2B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $5E4B.w,X		; FD 4B 5E ; Subtract with carry $5E4B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DF69.w,X		; FD 69 DF ; Subtract with carry $DF69.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda [$FA.b]		; A7 FA ; Load accumulator (long) [$FA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda $C75BFA.l,X		; BF FA 5B C7 ; Load long $C75BFA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $DF8B.w,X		; FD 8B DF ; Subtract with carry $DF8B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $5F8C.w,X		; FD 8C 5F ; Subtract with carry $5F8C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DE6D.w,X		; FD 6D DE ; Subtract with carry $DE6D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sbc [$FA.b]		; E7 FA ; Subtract with carry (long) [$FA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $0023.w,X		; FE 23 00 ; Increment memory $0023.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($01.b),Y		; 31 01 ; AND accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $0483.w,X		; FE 83 04 ; Increment memory $0483.w,X [Reads: X Index] [Flags: NZ]
	ldy #$6122.w		; A0 22 61 ; Load #$6122.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $0081.w,X		; FE 81 00 ; Increment memory $0081.w,X [Reads: X Index] [Flags: NZ]
	sbc $CA0221.l,X		; FF 21 02 CA ; Subtract with carry (long,X) $CA0221.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $D88626.l,X		; FF 26 86 D8 ; Subtract with carry (long,X) $D88626.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldx $82.b		; A6 82 ; Load $82.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc $D883A8.l,X		; FF A8 83 D8 ; Subtract with carry (long,X) $D883A8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sta [$C8.b]		; 87 C8 ; Store accumulator (long) [$C8.b] [Reads: Direct Page, Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $62, $FF, $2B		; 62 FF 2B ; Push effective relative address $62, $FF, $2B [Writes: Stack Pointer]
	asl $D8.b		; 06 D8 ; Arithmetic shift left $D8.b [Reads: Direct Page] [Flags: NCZ]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FF02AB.l,X		; FF AB 02 FF ; Subtract with carry (long,X) $FF02AB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $9A83.w		; AC 83 9A ; Load $9A83.w into Y register [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FE81.w		; 2C 81 FE ; Test bits $FE81.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($01.b),Y		; B1 01 ; Load accumulator ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $048B.w,X		; FE 8B 04 ; Increment memory $048B.w,X [Reads: X Index] [Flags: NZ]
	ldy #$619B.w		; A0 9B 61 ; Load #$619B.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $8588.w,X		; FE 88 85 ; Increment memory $8588.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit #$FE02.w		; 89 02 FE ; Test bits #$FE02.w with accumulator [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sta ($FE.b,X)		; 81 FE ; Store accumulator ($FE.b,X) [Reads: Direct Page, Accumulator, X Index]
	rol $80.b		; 26 80 ; Rotate left $80.b [Reads: Direct Page] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc #$FE01.w		; 69 01 FE ; Add #$FE01.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	stx $84.b		; 86 84 ; Store X register to $84.b [Reads: X Index]
	ldy #$615A.w		; A0 5A 61 ; Load #$615A.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $8584.w,X		; FE 84 85 ; Increment memory $8584.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FE02.w		; 49 02 FE ; Exclusive OR #$FE02.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $81.b		; 24 81 ; Test bits $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($74.b),Y		; 31 74 ; AND accumulator with memory ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $A430.w		; AC 30 A4 ; Load $A430.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $A430.w,X		; BC 30 A4 ; Load Y register $A430.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cmp ($7B.b,S),Y		; D3 7B ; Compare accumulator (stack relative indirect indexed) ($7B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($83.b,S),Y		; D3 83 ; Compare accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sta ($11.b,X)		; 81 11 ; Store accumulator ($11.b,X) [Reads: Direct Page, Accumulator, X Index]
	cpy #$5881.w		; C0 81 58 ; Compare #$5881.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$9881.w		; C0 81 98 ; Compare #$9881.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$AB88.w		; C0 88 AB ; Compare #$AB88.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $CAC0.w,Y		; D9 C0 CA ; Compare accumulator $CAC0.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $D9C0.w,Y		; D9 C0 D9 ; Compare accumulator $D9C0.w,Y [Reads: Y Index] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$A8D9.w		; C0 D9 A8 ; Compare #$A8D9.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $C049.w,Y		; D9 49 C0 ; Compare accumulator $C049.w,Y [Reads: Y Index] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $36, $61		; 62 36 61 ; Push effective relative address $62, $36, $61 [Writes: Stack Pointer]
	trb $0082.w		; 1C 82 00 ; Test and reset bits $0082.w [Reads: Accumulator] [Flags: Z]
	sbc $1881FF.l,X		; FF FF 81 18 ; Subtract with carry (long,X) $1881FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp ($61.b)		; D2 61 ; Compare accumulator (indirect) ($61.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $62, $28, $90		; 62 28 90 ; Push effective relative address $62, $28, $90 [Writes: Stack Pointer]
	rol $38.b,X		; 36 38 ; Rotate left $38.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $90, $36		; 90 36 ; Branch if carry clear to $90, $36 [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $B0		; 50 B0 ; Branch if overflow clear to $50, $B0 [Flow: branch]
	dec $D028.w,X		; DE 28 D0 ; Decrement memory $D028.w,X [Reads: X Index] [Flags: NZ]
	dec $E363.w,X		; DE 63 E3 ; Decrement memory $E363.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpy #$FF73.w		; C0 73 FF ; Compare #$FF73.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor #$D202.w		; 49 02 D2 ; Exclusive OR #$D202.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $A9834E.l,X		; FF 4E 83 A9 ; Subtract with carry (long,X) $A9834E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $88		; B0 88 ; Branch if carry set to $B0, $88 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ldy $CBA4.w,X		; BC A4 CB ; Load Y register $CBA4.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda ($FA.b,S),Y		; B3 FA ; Load accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	cmp ($FA.b,S),Y		; D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $A1.b		; E5 A1 ; Subtract $A1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $91.b		; 64 91 ; Store zero to $91.b
	ldx #$93E1.w		; A2 E1 93 ; Load #$93E1.w into X register [Writes: X Index] [Flags: NZ]
	cpy #$D2E1.w		; C0 E1 D2 ; Compare #$D2E1.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($18.b,X)		; [PATTERN: Memory clearing operation] 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $82, $1C, $FF		; 82 1C FF ; Branch always long to $82, $1C, $FF [Flow: branch]
	sbc $9700E5.l,X		; FF E5 00 97 ; Subtract with carry (long,X) $9700E5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $B7DE.w		; 9C DE B7 ; Store zero to $B7DE.w
	stz $D6DE.w		; 9C DE D6 ; Store zero to $D6DE.w
	stz $97DE.w		; 9C DE 97 ; Store zero to $97DE.w
	cpx $DE.b		; E4 DE ; Compare $DE.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lda [$E4.b],Y		; B7 E4 ; Load accumulator (long indexed) [$E4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $E4D6.w,X		; DE D6 E4 ; Decrement memory $E4D6.w,X [Reads: X Index] [Flags: NZ]
	dec $A794.w,X		; DE 94 A7 ; Decrement memory $A794.w,X [Reads: X Index] [Flags: NZ]
	dec $C794.w,X		; DE 94 C7 ; Decrement memory $C794.w,X [Reads: X Index] [Flags: NZ]
	dec $A7E4.w,X		; DE E4 A7 ; Decrement memory $A7E4.w,X [Reads: X Index] [Flags: NZ]
	dec $C7E4.w,X		; DE E4 C7 ; Decrement memory $C7E4.w,X [Reads: X Index] [Flags: NZ]
	dec $FFFF.w,X		; DE FF FF ; Decrement memory $FFFF.w,X [Reads: X Index] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $03.b,S		; 43 03 ; Exclusive OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta $03.b,S		; 83 03 ; Store accumulator (stack relative) $03.b,S [Reads: Stack Pointer, Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $03.b,S		; C3 03 ; Compare accumulator (stack relative) $03.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta $43.b,S		; 83 43 ; Store accumulator (stack relative) $43.b,S [Reads: Stack Pointer, Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $43.b,S		; C3 43 ; Compare accumulator (stack relative) $43.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $83.b,S		; 43 83 ; Exclusive OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $83.b,S		; C3 83 ; Compare accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $C3.b,S		; 03 C3 ; OR accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $C3.b,S		; 43 C3 ; Exclusive OR accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta $C3.b,S		; 83 C3 ; Store accumulator (stack relative) $C3.b,S [Reads: Stack Pointer, Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $A79FFF.l,X		; FF FF 9F A7 ; Subtract with carry (long,X) $A79FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $D4.b		; C6 D4 ; Decrement $D4.b [Reads: Direct Page] [Flags: NZ]
	lda [$C6.b]		; A7 C6 ; Load accumulator (long) [$C6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $F4F9.w,X		; FE F9 F4 ; Increment memory $F4F9.w,X [Reads: X Index] [Flags: NZ]
	sbc $FE741E.l,X		; FF 1E 74 FE ; Subtract with carry (long,X) $FE741E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $9CFF74.l		; 5C 74 FF 9C ; Jump long to $9CFF74.l [Flow: jump]
	stz $F0.b,X		; 74 F0 ; Store zero to $F0.b,X [Reads: X Index]
	sbc $E1FFFF.l,X		; FF FF FF E1 ; Subtract with carry (long,X) $E1FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr ($005A.w,X)		; FC 5A 00 ; Jump to subroutine indirect indexed ($005A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $A1.b		; 24 A1 ; Test bits $A1.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	lda $FD00.w,Y		; B9 00 FD ; Load $FD00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $FD02.w,Y		; 19 02 FD ; OR accumulator with memory $FD02.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $FD.b		; 06 FD ; Arithmetic shift left $FD.b [Reads: Direct Page] [Flags: NCZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: NCZ]
	lda ($01.b),Y		; B1 01 ; Load accumulator ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $02AB.w,X		; FD AB 02 ; Subtract with carry $02AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $C9.b		; 64 C9 ; Store zero to $C9.b
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $FD83.w		; AC 83 FD ; Load $FD83.w into Y register [Writes: Y Index] [Flags: NZ]
	jmp $5DFD87.l		; 5C 87 FD 5D ; Jump long to $5DFD87.l [Flow: jump]
	sta $25.b,S		; 83 25 ; Store accumulator (stack relative) $25.b,S [Reads: Stack Pointer, Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $1581.w,X		; 5D 81 15 ; Exclusive OR accumulator with memory $1581.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($61.b),Y		; B1 61 ; Load accumulator ($61.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($39E9.w,X)		; FC E9 39 ; Jump to subroutine indirect indexed ($39E9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda $C4F994.l,X		; BF 94 F9 C4 ; Load long $C4F994.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $3A		; 90 3A ; Branch if carry clear to $90, $3A [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	inc $BACB.w,X		; FE CB BA ; Increment memory $BACB.w,X [Reads: X Index] [Flags: NZ]
	inc $AE22.w,X		; FE 22 AE ; Increment memory $AE22.w,X [Reads: X Index] [Flags: NZ]
	cmp ($48.b)		; D2 48 ; Compare accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ldx $88D2.w		; AE D2 88 ; Load $88D2.w into X register [Writes: X Index] [Flags: NZ]
	ldx $880D.w		; AE 0D 88 ; Load $880D.w into X register [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	asl $B189.w		; 0E 89 B1 ; Arithmetic shift left $B189.w [Flags: NCZ]
	adc ($D8.b,X)		; 61 D8 ; Add with carry ($D8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($0F.b)		; 92 0F ; Store accumulator (indirect) ($0F.b) [Reads: Direct Page, Accumulator]
	cld		; D8 ; Clear decimal flag [Flags: D]
	inc $10.b		; E6 10 ; Increment $10.b [Reads: Direct Page] [Flags: NZ]
	sbc #$62B1.w		; E9 B1 62 ; Subtract #$62B1.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $C090.w		; 0D 90 C0 ; Logical OR $C090.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta ($60.b,S),Y		; 93 60 ; Store accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	asl $60A1.w		; 0E A1 60 ; Arithmetic shift left $60A1.w [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpy #$E84A.w		; C0 4A E8 ; Compare #$E84A.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D865.w		; C0 65 D8 ; Compare #$D865.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$9056.w		; C0 56 90 ; Compare #$9056.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$A065.w		; C0 65 A0 ; Compare #$A065.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$9388.w		; C0 88 93 ; Compare #$9388.w with Y register [Reads: Y Index] [Flags: NCZ]
	ldy #$DF88.w		; A0 88 DF ; Load #$DF88.w into Y register [Writes: Y Index] [Flags: NZ]
	lda ($DC.b,X)		; A1 DC ; Load accumulator ($DC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($A2.b,S),Y		; 93 A2 ; Store accumulator (stack relative indirect indexed) ($A2.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	jmp.w [$A3F7]		; DC F7 A3 ; Jump long indirect [$A3F7] [Flow: jump]
	lda $FF92.w		; AD 92 FF ; Load $FF92.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $811882.l		; 22 82 18 81 ; Jump to subroutine long $811882.l [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $0081FF.l,X		; FF FF 81 00 ; Subtract with carry (long,X) $0081FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	and $FCFC.w,Y		; 39 FC FC ; AND accumulator with memory $FCFC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$2900.w		; A9 00 29 ; Load #$2900.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$FC61.w		; A2 61 FC ; Load #$FC61.w into X register [Writes: X Index] [Flags: NZ]
	lda $1804.w		; AD 04 18 ; Load $1804.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($01.b)		; D2 01 ; Compare accumulator (indirect) ($01.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jsr ($002D.w,X)		; FC 2D 00 ; Jump to subroutine indirect indexed ($002D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $832E.w,X		; FD 2E 83 ; Subtract with carry $832E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FD, $2C		; 62 FD 2C ; Push effective relative address $62, $FD, $2C [Writes: Stack Pointer]
	sta [$58.b]		; 87 58 ; Store accumulator (long) [$58.b] [Reads: Direct Page, Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $FD83.w		; AC 83 FD ; Load $FD83.w into Y register [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cop $58.b		; 02 58 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $062B.w,X		; FD 2B 06 ; Subtract with carry $062B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx #$FD62.w		; A2 62 FD ; Load #$FD62.w into X register [Writes: X Index] [Flags: NZ]
	and #$FC02.w		; 29 02 FC ; Logical AND #$FC02.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc #$2838.w		; E9 38 28 ; Subtract #$2838.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda ($90.b)		; B2 90 ; Load accumulator (indirect) ($90.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $EA		; 30 EA ; Branch if minus to $30, $EA [Flow: branch]
	lda [$18.b],Y		; B7 18 ; Load accumulator (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$FEFD.w		; E0 FD FE ; Compare #$FEFD.w with X register [Reads: X Index] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $04AB.w,X		; FE AB 04 ; Increment memory $04AB.w,X [Reads: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx #$FE61.w		; A2 61 FE ; Load #$FE61.w into X register [Writes: X Index] [Flags: NZ]
	lda #$FF00.w		; A9 00 FF ; Load #$FF00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$C802.w		; 29 02 C8 ; Logical AND #$C802.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$FF62.w		; A2 62 FF ; Load #$FF62.w into X register [Writes: X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	asl $D8.b		; 06 D8 ; Arithmetic shift left $D8.b [Reads: Direct Page] [Flags: NCZ]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FF02AB.l,X		; FF AB 02 FF ; Subtract with carry (long,X) $FF02AB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $D883.w		; AC 83 D8 ; Load $D883.w into Y register [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $C887.w		; 2C 87 C8 ; Test bits $C887.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FF, $2E		; 62 FF 2E ; Push effective relative address $62, $FF, $2E [Writes: Stack Pointer]
	sta $FE.b,S		; 83 FE ; Store accumulator (stack relative) $FE.b,S [Reads: Stack Pointer, Accumulator]
	ldx $A881.w		; AE 81 A8 ; Load $A881.w into X register [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $9885.w		; AC 85 98 ; Load $9885.w into Y register [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FE81.w		; 2C 81 FE ; Test bits $FE81.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ldy $FE.b,X		; B4 FE ; Load Y register $FE.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$FFB4]		; DC B4 FF ; Jump long indirect [$FFB4] [Flow: jump]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $FF.b,X		; B4 FF ; Load Y register $FF.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	trb $D0B4.w		; 1C B4 D0 ; Test and reset bits $D0B4.w [Reads: Accumulator] [Flags: Z]
	cpy #$89FD.w		; C0 FD 89 ; Compare #$89FD.w with Y register [Reads: Y Index] [Flags: NCZ]
	bit $0D.b,X		; 34 0D ; Test bits $0D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit #$0E40.w		; 89 40 0E ; Test bits #$0E40.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp ($10.b),Y		; D1 10 ; Compare accumulator ($10.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ora $1064D1.l		; 0F D1 64 10 ; OR accumulator with memory (long) $1064D1.l [Writes: Accumulator] [Flags: NZ]
	.db $B0, $4A		; B0 4A ; Branch if carry set to $B0, $4A [Flow: branch]
	eor $3D9C.w,X		; 5D 9C 3D ; Exclusive OR accumulator with memory $3D9C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $3DC8.w,X		; 5D C8 3D ; Exclusive OR accumulator with memory $3DC8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $33B0.w,X		; 5D B0 33 ; Exclusive OR accumulator with memory $33B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($88.b,S),Y		; 33 88 ; AND accumulator (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($E8.b,X)		; 61 E8 ; Add with carry ($E8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $62, $94, $41		; 62 94 41 ; Push effective relative address $62, $94, $41 [Writes: Stack Pointer]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cpx $41.b		; E4 41 ; Compare $41.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and ($B9.b)		; 32 B9 ; AND accumulator with memory (indirect) ($B9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$C093.w		; 09 93 C0 ; Logical OR #$C093.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $C0D9.w,Y		; 59 D9 C0 ; Exclusive OR accumulator with memory $C0D9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $C091.w,Y		; 59 91 C0 ; Exclusive OR accumulator with memory $C091.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit #$C091.w		; 89 91 C0 ; Test bits #$C091.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$C0D9.w		; 89 D9 C0 ; Test bits #$C0D9.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $C0D9.w,Y		; D9 D9 C0 ; Compare accumulator $C0D9.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $C091.w,Y		; D9 91 C0 ; Compare accumulator $C091.w,Y [Reads: Y Index] [Flags: NCZ]
	bit #$A011.w		; 89 11 A0 ; Test bits #$A011.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$A155.w		; 89 55 A1 ; Test bits #$A155.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $11.b,X		; D5 11 ; Compare accumulator $11.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldx #$75D5.w		; A2 D5 75 ; Load #$75D5.w into X register [Writes: X Index] [Flags: NZ]
	lda $FF.b,S		; A3 FF ; Load accumulator (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $821883.l,X		; FF 83 18 82 ; Subtract with carry (long,X) $821883.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $80, $36		; 80 36 ; Branch always to $80, $36 [Flow: branch]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $18E1FF.l,X		; FF FF E1 18 ; Subtract with carry (long,X) $18E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$9F.b],Y		; 17 9F ; OR accumulator with memory (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($4D.b)		; D2 4D ; Compare accumulator (indirect) ($4D.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $DC17D2.l,X		; 9F D2 17 DC ; Store accumulator (long,X) $DC17D2.l,X [Reads: Accumulator, X Index]
	cmp ($4D.b)		; D2 4D ; Compare accumulator (indirect) ($4D.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jmp.w [$FED2]		; DC D2 FE ; Jump long indirect [$FED2] [Flow: jump]
	sbc #$BA02.w		; E9 02 BA ; Subtract #$BA02.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inc $83EE.w,X		; FE EE 83 ; Increment memory $83EE.w,X [Reads: X Index] [Flags: NZ]
	trb $9D.b		; 14 9D ; Test and reset bits $9D.b [Reads: Accumulator] [Flags: Z]
	eor $9D14.w,X		; 5D 14 9D ; Exclusive OR accumulator with memory $9D14.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $50, $D9		; 50 D9 ; Branch if overflow clear to $50, $D9 [Flow: branch]
	eor $9F9D.w,X		; 5D 9D 9F ; Exclusive OR accumulator with memory $9F9D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $E0.b,X		; 94 E0 ; Store Y register $E0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	eor $D3AF.w,X		; 5D AF D3 ; Exclusive OR accumulator with memory $D3AF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $B5FADB.l		; AF DB FA B5 ; Load long $B5FADB.l into accumulator [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc $BAFE.w,Y		; F9 FE BA ; Subtract with carry $BAFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $93CA.w		; 6E CA 93 ; Rotate right $93CA.w [Flags: NCZ]
	cpy #$D2CA.w		; C0 CA D2 ; Compare #$D2CA.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $388218.l		; 22 18 82 38 ; Jump to subroutine long $388218.l [Writes: Stack Pointer] [Flow: call]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$1F.b],Y		; 97 1F ; Store accumulator (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp ($CD.b)		; D2 CD ; Compare accumulator (indirect) ($CD.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $5C97D2.l,X		; 1F D2 97 5C ; Logical OR long $5C97D2.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($CD.b)		; D2 CD ; Compare accumulator (indirect) ($CD.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jmp $52B9D2.l		; 5C D2 B9 52 ; Jump long to $52B9D2.l [Flow: jump]
	sbc $1F94.w,Y		; F9 94 1F ; Subtract with carry $1F94.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $61.b,X		; 94 61 ; Store Y register $61.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	eor $1DD0.w,X		; 5D D0 1D ; Exclusive OR accumulator with memory $1DD0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $51E4.w,X		; 5D E4 51 ; Exclusive OR accumulator with memory $51E4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr $FF00.w		; 20 00 FF ; Jump to subroutine at $FF00.w [Writes: Stack Pointer] [Flow: call]
	sbc $9814E1.l,X		; FF E1 14 98 ; Subtract with carry (long,X) $9814E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $BF.b		; 06 BF ; Arithmetic shift left $BF.b [Reads: Direct Page] [Flags: NCZ]
	trb $F9.b		; 14 F9 ; Test and reset bits $F9.b [Reads: Accumulator] [Flags: Z]
	clv		; B8 ; Clear overflow flag [Flags: V]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsr ($9F14.w,X)		; FC 14 9F ; Jump to subroutine indirect indexed ($9F14.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	dec $BF14.w,X		; DE 14 BF ; Decrement memory $BF14.w,X [Reads: X Index] [Flags: NZ]
	dec $DD14.w,X		; DE 14 DD ; Decrement memory $DD14.w,X [Reads: X Index] [Flags: NZ]
	dec $9428.w,X		; DE 28 94 ; Decrement memory $9428.w,X [Reads: X Index] [Flags: NZ]
	sbc $9458.w,Y		; F9 58 94 ; Subtract with carry $9458.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9470.w,Y		; F9 70 94 ; Subtract with carry $9470.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9490.w,Y		; F9 90 94 ; Subtract with carry $9490.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $94A8.w,Y		; F9 A8 94 ; Subtract with carry $94A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EC29.w,Y		; F9 29 EC ; Subtract with carry $EC29.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EC59.w,Y		; F9 59 EC ; Subtract with carry $EC59.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EC71.w,Y		; F9 71 EC ; Subtract with carry $EC71.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EC91.w,Y		; F9 91 EC ; Subtract with carry $EC91.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $ECA9.w,Y		; F9 A9 EC ; Subtract with carry $ECA9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9FE4.w,Y		; F9 E4 9F ; Subtract with carry $9FE4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $BFE4.w,X		; DE E4 BF ; Decrement memory $BFE4.w,X [Reads: X Index] [Flags: NZ]
	dec $DDE4.w,X		; DE E4 DD ; Decrement memory $DDE4.w,X [Reads: X Index] [Flags: NZ]
	dec $2CA8.w,X		; DE A8 2C ; Decrement memory $2CA8.w,X [Reads: X Index] [Flags: NZ]
	eor $33C3.w,X		; 5D C3 33 ; Exclusive OR accumulator with memory $33C3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($2E.b),Y		; D1 2E ; Compare accumulator ($2E.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$5D50.w		; C0 50 5D ; Compare #$5D50.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda ($53.b,S),Y		; B3 53 ; Load accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	eor ($FA.b,S),Y		; 53 FA ; XOR accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$882E.w		; A9 2E 88 ; Load #$882E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $9F03FF.l,X		; FF FF 03 9F ; Subtract with carry (long,X) $9F03FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $9F.b,S		; 43 9F ; Exclusive OR accumulator with stack relative $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta $9F.b,S		; 83 9F ; Store accumulator (stack relative) $9F.b,S [Reads: Stack Pointer, Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $9F.b,S		; C3 9F ; Compare accumulator (stack relative) $9F.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $DC.b,S		; 03 DC ; OR accumulator with stack relative $DC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $DC.b,S		; 43 DC ; Exclusive OR accumulator with stack relative $DC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta $DC.b,S		; 83 DC ; Store accumulator (stack relative) $DC.b,S [Reads: Stack Pointer, Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $DC.b,S		; C3 DC ; Compare accumulator (stack relative) $DC.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $9F1FFF.l,X		; FF FF 1F 9F ; Subtract with carry (long,X) $9F1FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $5F.b		; C6 5F ; Decrement $5F.b [Reads: Direct Page] [Flags: NZ]
	sta $9F9FC6.l,X		; 9F C6 9F 9F ; Store accumulator (long,X) $9F9FC6.l,X [Reads: Accumulator, X Index]
	dec $D4.b		; C6 D4 ; Decrement $D4.b [Reads: Direct Page] [Flags: NZ]
	sta $DC1FC6.l,X		; 9F C6 1F DC ; Store accumulator (long,X) $DC1FC6.l,X [Reads: Accumulator, X Index]
	dec $5F.b		; C6 5F ; Decrement $5F.b [Reads: Direct Page] [Flags: NZ]
	jmp.w [$9FC6]		; DC C6 9F ; Jump long indirect [$9FC6] [Flow: jump]
	jmp.w [$D4C6]		; DC C6 D4 ; Jump long indirect [$D4C6] [Flow: jump]
	jmp.w [$48C6]		; DC C6 48 ; Jump long indirect [$48C6] [Flow: jump]
	stz $33DE.w,X		; 9E DE 33 ; Store zero to $33DE.w,X [Reads: X Index]
	cpy $50DE.w		; CC DE 50 ; Compare $50DE.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $CF68DE.l		; CF DE 68 CF ; Compare accumulator (long) $CF68DE.l [Reads: Accumulator] [Flags: NCZ]
	dec $9F80.w,X		; DE 80 9F ; Decrement memory $9F80.w,X [Reads: X Index] [Flags: NZ]
	dec $C798.w,X		; DE 98 C7 ; Decrement memory $C798.w,X [Reads: X Index] [Flags: NZ]
	dec $E498.w,X		; DE 98 E4 ; Decrement memory $E498.w,X [Reads: X Index] [Flags: NZ]
	dec $D4BA.w,X		; DE BA D4 ; Decrement memory $D4BA.w,X [Reads: X Index] [Flags: NZ]
	dec $9FB0.w,X		; DE B0 9F ; Decrement memory $9FB0.w,X [Reads: X Index] [Flags: NZ]
	dec $B4BA.w,X		; DE BA B4 ; Decrement memory $B4BA.w,X [Reads: X Index] [Flags: NZ]
	dec $FFF0.w,X		; DE F0 FF ; Decrement memory $FFF0.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	adc ($1C.b,X)		; 61 1C ; Add with carry ($1C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $18E1FF.l,X		; FF FF E1 18 ; Subtract with carry (long,X) $18E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($02B9.w,X)		; FC B9 02 ; Jump to subroutine indirect indexed ($02B9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $62A2.w		; 2C A2 62 ; Test bits $62A2.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jsr ($C6BA.w,X)		; FC BA C6 ; Jump to subroutine indirect indexed ($C6BA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $01AD.w,X		; 3C AD 01 ; Test bits $01AD.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	mvp $61,$A2		; 44 A2 61 ; Move block positive $61,$A2 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $C41A.w,X		; FD 1A C4 ; Subtract with carry $C41A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0019.w,X		; FD 19 00 ; Subtract with carry $0019.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $62D3.w		; 2C D3 62 ; Test bits $62D3.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jsr ($47BC.w,X)		; FC BC 47 ; Jump to subroutine indirect indexed ($47BC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($83BE.w,X)		; FC BE 83 ; Jump to subroutine indirect indexed ($83BE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $02C5.w,X		; 3C C5 02 ; Test bits $02C5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	mvp $61,$D3		; 44 D3 61 ; Move block positive $61,$D3 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $451C.w,X		; FD 1C 45 ; Subtract with carry $451C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $811E.w,X		; FD 1E 81 ; Subtract with carry $811E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $C12C.w,X		; FE 2C C1 ; Increment memory $C12C.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $FE02.w		; CD 02 FE ; Compare $FE02.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	jmp ($9CC3.w,X)		; 7C C3 9C ; Jump indirect indexed to ($9CC3.w,X) [Reads: X Index] [Flow: jump]
	cmp $62.b		; C5 62 ; Compare $62.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$FE.b]		; 87 FE ; Store accumulator (long) [$FE.b] [Reads: Direct Page, Accumulator]
	sbc #$B802.w		; E9 02 B8 ; Subtract #$B802.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda $62.b,S		; A3 62 ; Load accumulator (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $83EB.w,X		; FE EB 83 ; Increment memory $83EB.w,X [Reads: X Index] [Flags: NZ]
	sta [$A2.b],Y		; 97 A2 ; Store accumulator (long indexed) [$A2.b],Y [Reads: Direct Page, Y Index, Accumulator]
	inc $BAFE.w,X		; FE FE BA ; Increment memory $BAFE.w,X [Reads: X Index] [Flags: NZ]
	adc $A21F.w		; 6D 1F A2 ; Add $A21F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	inc $CB1B.w,X		; FE 1B CB ; Increment memory $CB1B.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp ($FA.b,S),Y		; D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	cmp ($FA.b,S),Y		; D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $F9DA.w,Y		; 59 DA F9 ; Exclusive OR accumulator with memory $F9DA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($B9.b)		; 32 B9 ; AND accumulator with memory (indirect) ($B9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $C132.w,Y		; F9 32 C1 ; Subtract with carry $C132.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $B94A.w,Y		; F9 4A B9 ; Subtract with carry $B94A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C14A.w,Y		; F9 4A C1 ; Subtract with carry $C14A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $BB38.w,Y		; F9 38 BB ; Subtract with carry $BB38.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $3959.w,X		; FD 59 39 ; Subtract with carry $3959.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta ($C0.b,S),Y		; 93 C0 ; Store accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cmp $ADC0.w,X		; DD C0 AD ; Compare accumulator $ADC0.w,X [Reads: X Index] [Flags: NCZ]
	cmp #$CAC0.w		; C9 C0 CA ; Compare #$CAC0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp ($C0.b)		; D2 C0 ; Compare accumulator (indirect) ($C0.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	and $608C.w,X		; 3D 8C 60 ; AND accumulator with memory $608C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $60D5.w,X		; 3D D5 60 ; AND accumulator with memory $60D5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $82, $18, $FF		; 82 18 FF ; Branch always long to $82, $18, $FF [Flow: branch]
	sbc $2014E1.l,X		; FF E1 14 20 ; Subtract with carry (long,X) $2014E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $2015A4.l		; 5C A4 15 20 ; Jump long to $2015A4.l [Flow: jump]
.INDEX 16
	rep #$15		; C2 15
	ora $1427.w,X		; 1D 27 14 ; OR accumulator with memory $1427.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $6A.b,S		; 23 6A ; AND accumulator with stack relative $6A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $31.b,X		; 15 31 ; OR accumulator with memory $31.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $30, $23		; 30 23 ; Branch if minus to $30, $23 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $3C.b,S		; 23 3C ; AND accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $21.b,S		; C3 21 ; Compare accumulator (stack relative) $21.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $4D.b,S		; C3 4D ; Compare accumulator (stack relative) $4D.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ora $3CC2.w,X		; 1D C2 3C ; OR accumulator with memory $3CC2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$40C2.w		; 29 C2 40 ; Logical AND #$40C2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($C2.b,X)		; 41 C2 ; Exclusive OR accumulator with memory ($C2.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $3C		; 50 3C ; Branch if overflow clear to $50, $3C [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$34		; C2 34
	eor $29.b		; 45 29 ; Exclusive OR $29.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($48.b,X)		; 41 48 ; Exclusive OR accumulator with memory ($48.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $4C28.w,X		; 5D 28 4C ; Exclusive OR accumulator with memory $4C28.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($6B.b)		; 52 6B ; Exclusive OR accumulator with memory (indirect) ($6B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp $2B4E.w		; 4C 4E 2B ; Jump to $2B4E.w [Flow: jump]
	jmp $5C6B3F.l		; 5C 3F 6B 5C ; Jump long to $5C6B3F.l [Flow: jump]
	and $692B.w,Y		; 39 2B 69 ; AND accumulator with memory $692B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($6B.b,X)		; 21 6B ; Logical AND ($6B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $271D.w		; 4D 1D 27 ; Exclusive OR $271D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $6A21.w		; 4C 21 6A ; Jump to $6A21.w [Flow: jump]
	bit $2E2A.w,X		; 3C 2A 2E ; Test bits $2E2A.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $6A2F.w,X		; 3C 2F 6A ; Test bits $6A2F.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	and ($3D.b,X)		; 21 3D ; Logical AND ($3D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rol DMAP2.w		; 2E 20 43 ; Rotate left DMAP2.w [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $2853.w		; 20 53 28 ; Jump to subroutine at $2853.w [Writes: Stack Pointer] [Flow: call]
	bit $49.b,X		; 34 49 ; Test bits $49.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $FCA45C.l		; 5C 5C A4 FC ; Jump long to $FCA45C.l [Flow: jump]
	cpx $B4.b		; E4 B4 ; Compare $B4.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $2E.b,X		; 34 2E ; Test bits $2E.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sta ($1B.b,S),Y		; 93 1B ; Store accumulator (stack relative indirect indexed) ($1B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	and $5F1BFA.l,X		; 3F FA 1B 5F ; AND accumulator with memory (long,X) $5F1BFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $FA.b,S		; 63 FA ; Add with carry (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $53.b,S		; 63 53 ; Add with carry (stack relative) $53.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $63.b,S		; E3 63 ; Subtract stack-relative $63.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $0023.w,X		; FE 23 00 ; Increment memory $0023.w,X [Reads: X Index] [Flags: NZ]
	inc $8124.w,X		; FE 24 81 ; Increment memory $8124.w,X [Reads: X Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	and ($01.b)		; 32 01 ; AND accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FF02A3.l,X		; FF A3 02 FF ; Subtract with carry (long,X) $FF02A3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $85.b		; 24 85 ; Test bits $85.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta $024A.w,Y		; 99 4A 02 ; Store accumulator to $024A.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	adc ($FF.b,X)		; 61 FF ; Add with carry ($FF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $81.b		; 26 81 ; Rotate left $81.b [Reads: Direct Page] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $63FF.w,X		; FD FF 63 ; Subtract with carry $63FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $598B.w,Y		; 39 8B 59 ; AND accumulator with memory $598B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$118B.w		; C0 8B 11 ; Compare #$118B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$11CA.w		; C0 CA 11 ; Compare #$11CA.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $18, $00		; 62 18 00 ; Push effective relative address $62, $18, $00 [Writes: Stack Pointer]
	trb $FFFF.w		; 1C FF FF ; Test and reset bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	ora [$9F.b],Y		; 17 9F ; OR accumulator with memory (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($4D.b),Y		; D1 4D ; Compare accumulator ($4D.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sta $DC17D1.l,X		; 9F D1 17 DC ; Store accumulator (long,X) $DC17D1.l,X [Reads: Accumulator, X Index]
	cmp ($4D.b),Y		; D1 4D ; Compare accumulator ($4D.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	jmp.w [$64D1]		; [PATTERN: Memory clearing operation] DC D1 64 ; Jump long indirect [$64D1] [Flow: jump]
	dec $DE.b,X		; D6 DE ; Decrement memory $DE.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	jmp $64DEE4.l		; 5C E4 DE 64 ; Jump long to $64DEE4.l [Flow: jump]
	stz $5CDE.w,X		; 9E DE 5C ; Store zero to $5CDE.w,X [Reads: X Index]
	stz $FDDE.w		; 9C DE FD ; Store zero to $FDDE.w
	tsb $FC34.w		; 0C 34 FC ; Test and set bits $FC34.w [Reads: Accumulator] [Flags: Z]
	jmp ($14EE.w,X)		; 7C EE 14 ; Jump indirect indexed to ($14EE.w,X) [Reads: X Index] [Flow: jump]
	stz $1488.w		; 9C 88 14 ; Store zero to $1488.w
	pei ($88.b)		; D4 88 ; Push effective indirect address ($88.b) [Reads: Direct Page] [Writes: Stack Pointer]
	trb $899C.w		; 1C 9C 89 ; Test and reset bits $899C.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	bit #$E41C.w		; 89 1C E4 ; Test bits #$E41C.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$DC1C.w		; 89 1C DC ; Test bits #$DC1C.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$2AFE.w		; 89 FE 2A ; Test bits #$2AFE.w with accumulator [Reads: Accumulator] [Flags: Z]
	cpy #$A2AC.w		; C0 AC A2 ; Compare #$A2AC.w with Y register [Reads: Y Index] [Flags: NCZ]
	adc ($98.b,X)		; 61 98 ; Add with carry ($98.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $BAFE01.l		; AF 01 FE BA ; Load long $BAFE01.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $FE.b		; C4 FE ; Compare $FE.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	lda $FF00.w,Y		; B9 00 FF ; Load $FF00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $C402.w,Y		; 19 02 C4 ; OR accumulator with memory $C402.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$D062.w		; A2 62 D0 ; Load #$D062.w into X register [Writes: X Index] [Flags: NZ]
	lda $1AFF01.l		; AF 01 FF 1A ; Load long $1AFF01.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec $FF.b		; C6 FF ; Decrement $FF.b [Reads: Direct Page] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$FF		; C2 FF
	ldy $D0C3.w		; AC C3 D0 ; Load $D0C3.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp $DAC402.l		; CF 02 C4 DA ; Compare accumulator (long) $DAC402.l [Reads: Accumulator] [Flags: NCZ]
	.db $62, $FF, $1E		; 62 FF 1E ; Push effective relative address $62, $FF, $1E [Writes: Stack Pointer]
	sta $FE.b,S		; 83 FE ; Store accumulator (stack relative) $FE.b,S [Reads: Stack Pointer, Accumulator]
	ldx $AC81.w,Y		; BE 81 AC ; Load X register $AC81.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($98.b,X)		; 61 98 ; Add with carry ($98.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $BCFE02.l		; CF 02 FE BC ; Compare accumulator (long) $BCFE02.l [Reads: Accumulator] [Flags: NCZ]
	cmp $FE.b		; C5 FE ; Compare $FE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	bit $FFC1.w		; 2C C1 FF ; Test bits $FFC1.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	trb $FEC7.w		; 1C C7 FE ; Test and reset bits $FEC7.w [Reads: Accumulator] [Flags: Z]
	and ($40.b),Y		; 31 40 ; AND accumulator with memory ($40.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $0115.w,X		; 9E 15 01 ; Store zero to $0115.w,X [Reads: X Index]
	sbc $8E4291.l,X		; FF 91 42 8E ; Subtract with carry (long,X) $8E4291.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $8136.w,X		; FE 36 81 ; Increment memory $8136.w,X [Reads: X Index] [Flags: NZ]
	inc $25.b		; E6 25 ; Increment $25.b [Reads: Direct Page] [Flags: NZ]
	.db $62, $FF, $96		; 62 FF 96 ; Push effective relative address $62, $FF, $96 [Writes: Stack Pointer]
	sta $FE.b,S		; 83 FE ; Store accumulator (stack relative) $FE.b,S [Reads: Stack Pointer, Accumulator]
	sta ($C7.b)		; 92 C7 ; Store accumulator (indirect) ($C7.b) [Reads: Direct Page, Accumulator]
	ldy $2F.b,X		; B4 2F ; Load Y register $2F.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($C5.b)		; 32 C5 ; AND accumulator with memory (indirect) ($C5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $3E.b		; A4 3E ; Load $3E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $62, $FE, $94		; 62 FE 94 ; Push effective relative address $62, $FE, $94 [Writes: Stack Pointer]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: NZ]
	eor $34FF01.l		; 4F 01 FF 34 ; Exclusive OR accumulator with memory (long) $34FF01.l [Writes: Accumulator] [Flags: NZ]
	cpy $CC.b		; C4 CC ; Compare $CC.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	rol $A361.w,X		; 3E 61 A3 ; Rotate left $A361.w,X [Reads: X Index] [Flags: NCZ]
	jsr $98C4.w		; 20 C4 98 ; Jump to subroutine at $98C4.w [Writes: Stack Pointer] [Flow: call]
	and ($C4.b)		; 32 C4 ; AND accumulator with memory (indirect) ($C4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and ($C4.b)		; 32 C4 ; AND accumulator with memory (indirect) ($C4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cpy $99.b		; C4 99 ; Compare $99.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	jsr $A15E.w		; 20 5E A1 ; Jump to subroutine at $A15E.w [Writes: Stack Pointer] [Flow: call]
	jsr $985E.w		; 20 5E 98 ; Jump to subroutine at $985E.w [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit #$3298.w		; 89 98 32 ; Test bits #$3298.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$2BE0.w		; 89 E0 2B ; Test bits #$2BE0.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$32E0.w		; 89 E0 32 ; Test bits #$32E0.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$23BB.w		; 89 BB 23 ; Test bits #$23BB.w with accumulator [Reads: Accumulator] [Flags: Z]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $23.b,S		; C3 23 ; Compare accumulator (stack relative) $23.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $E0FE.w,Y		; 59 FE E0 ; Exclusive OR accumulator with memory $E0FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$E3FE.w		; 29 FE E3 ; Logical AND #$E3FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $C08D.w,X		; 7E 8D C0 ; Rotate right $C08D.w,X [Reads: X Index] [Flags: NCZ]
	ror $C0DD.w,X		; 7E DD C0 ; Rotate right $C0DD.w,X [Reads: X Index] [Flags: NCZ]
	cmp $8D.b,X		; D5 8D ; Compare accumulator $8D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cpy #$DDD5.w		; C0 D5 DD ; Compare #$DDD5.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$8CF1.w		; C0 F1 8C ; Compare #$8CF1.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc ($DC.b),Y		; F1 DC ; Subtract with carry ($DC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $62, $5D, $C8		; 62 5D C8 ; Push effective relative address $62, $5D, $C8 [Writes: Stack Pointer]
	.db $62, $5D, $B4		; 62 5D B4 ; Push effective relative address $62, $5D, $B4 [Writes: Stack Pointer]
	and $47B400.l,X		; 3F 00 B4 47 ; AND accumulator with memory (long,X) $47B400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $8700.w		; 0D 00 87 ; Logical OR $8700.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($60.b),Y		; 11 60 ; OR accumulator with memory ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$11.b],Y		; F7 11 ; Subtract with carry (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta $1C.b,S		; 83 1C ; Store accumulator (stack relative) $1C.b,S [Reads: Stack Pointer, Accumulator]
	.db $80, $38		; 80 38 ; Branch always to $80, $38 [Flow: branch]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $82, $00, $FF		; 82 00 FF ; Branch always long to $82, $00, $FF [Flow: branch]
	sbc $FC00E1.l,X		; FF E1 00 FC ; Subtract with carry (long,X) $FC00E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $2D02.w,Y		; B9 02 2D ; Load $2D02.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$FC62.w		; A0 62 FC ; Load #$FC62.w into Y register [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	dec $3C.b		; C6 3C ; Decrement $3C.b [Reads: Direct Page] [Flags: NZ]
	lda $4501.w,X		; BD 01 45 ; Load $4501.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$FD61.w		; A0 61 FD ; Load #$FD61.w into Y register [Writes: Y Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cpy $FD.b		; C4 FD ; Compare $FD.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ora $3D00.w,Y		; 19 00 3D ; OR accumulator with memory $3D00.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stx $6E60.w		; 8E 60 6E ; Store X register to $6E60.w [Reads: X Index]
	ldx $31FE.w,Y		; BE FE 31 ; Load X register $31FE.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cmp #$31DF.w		; C9 DF 31 ; Compare #$31DF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsl $22E831.l		; 22 31 E8 22 ; Jump to subroutine long $22E831.l [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and ($DA.b,X)		; 21 DA ; Logical AND ($DA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $59FD.w,Y		; F9 FD 59 ; Subtract with carry $59FD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	jsr ($3979.w,X)		; FC 79 39 ; Jump to subroutine indirect indexed ($3979.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsl $FFFF1C.l		; 22 1C FF FF ; Jump to subroutine long $FFFF1C.l [Writes: Stack Pointer] [Flow: call]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0033.w,X		; FE 33 00 ; Increment memory $0033.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($01.b,S),Y		; 33 01 ; AND accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $04B3.w,X		; FE B3 04 ; Increment memory $04B3.w,X [Reads: X Index] [Flags: NZ]
	ldy $6122.w		; AC 22 61 ; Load $6122.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $00B1.w,X		; FE B1 00 ; Increment memory $00B1.w,X [Reads: X Index] [Flags: NZ]
	sbc $C40211.l,X		; FF 11 02 C4 ; Subtract with carry (long,X) $C40211.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $33D062.l		; 22 62 D0 33 ; Jump to subroutine long $33D062.l [Writes: Stack Pointer] [Flow: call]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($06.b,S),Y		; 13 06 ; OR accumulator (stack relative indirect indexed) ($06.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $6141.w		; 8D 41 61 ; Store accumulator to $6141.w [Reads: Accumulator]
	inc $8136.w,X		; FE 36 81 ; Increment memory $8136.w,X [Reads: X Index] [Flags: NZ]
	sbc $E50293.l,X		; FF 93 02 E5 ; Subtract with carry (long,X) $E50293.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($62.b,X)		; 41 62 ; Exclusive OR accumulator with memory ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $9B8396.l,X		; FF 96 83 9B ; Subtract with carry (long,X) $9B8396.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $D8D2.w,X		; 3E D2 D8 ; Rotate left $D8D2.w,X [Reads: X Index] [Flags: NCZ]
	rol $B8D2.w,X		; 3E D2 B8 ; Rotate left $B8D2.w,X [Reads: X Index] [Flags: NCZ]
	ora $FFD2.w,X		; 1D D2 FF ; OR accumulator with memory $FFD2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $38.b,S		; 63 38 ; Add with carry (stack relative) $38.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ror $C011.w,X		; 7E 11 C0 ; Rotate right $C011.w,X [Reads: X Index] [Flags: NCZ]
	cmp $11.b,X		; D5 11 ; Compare accumulator $11.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cpy #$10F1.w		; C0 F1 10 ; Compare #$10F1.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $31.b		; 86 31 ; Store X register to $31.b [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $31.b,X		; F6 31 ; Increment memory $31.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr $FF18.w		; 20 18 FF ; Jump to subroutine at $FF18.w [Writes: Stack Pointer] [Flow: call]
	sbc $1B0881.l,X		; FF 81 08 1B ; Subtract with carry (long,X) $1B0881.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $97FC.w,Y		; B9 FC 97 ; Load $97FC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1FCDD1.l,X		; 1F D1 CD 1F ; Logical OR long $1FCDD1.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($97.b),Y		; D1 97 ; Compare accumulator ($97.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor $5FCDD1.l,X		; 5F D1 CD 5F ; Exclusive OR accumulator with memory (long,X) $5FCDD1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($97.b),Y		; D1 97 ; Compare accumulator ($97.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sta $9FCDD1.l,X		; 9F D1 CD 9F ; Store accumulator (long,X) $9FCDD1.l,X [Reads: Accumulator, X Index]
	cmp ($18.b),Y		; D1 18 ; Compare accumulator ($18.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($CA18.w,X)		; FC 18 CA ; Jump to subroutine indirect indexed ($CA18.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($BA28.w,X)		; FC 28 BA ; Jump to subroutine indirect indexed ($BA28.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CA28.w,X)		; FC 28 CA ; Jump to subroutine indirect indexed ($CA28.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($9E64.w,X)		; FC 64 9E ; Jump to subroutine indirect indexed ($9E64.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	stz $CE.b		; 64 CE ; Store zero to $CE.b
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	mvn $A4,$BC		; 54 BC A4 ; Move block negative $A4,$BC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jsr ($ED7C.w,X)		; FC 7C ED ; Jump to subroutine indirect indexed ($ED7C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	lda $A7FA7B.l		; AF 7B FA A7 ; Load long $A7FA7B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($FA.b,S),Y		; D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sta [$DC.b],Y		; 97 DC ; Store accumulator (long indexed) [$DC.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp ($CD.b),Y		; D1 CD ; Compare accumulator ($CD.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	jmp.w [$BFD1]		; DC D1 BF ; Jump long indirect [$BFD1] [Flow: jump]
	trb $F9.b		; 14 F9 ; Test and reset bits $F9.b [Reads: Accumulator] [Flags: Z]
	lda #$DE58.w		; A9 58 DE ; Load #$DE58.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $70.b,X		; 95 70 ; Store accumulator to $70.b,X [Reads: Accumulator, X Index]
	dec $07FF.w,X		; DE FF 07 ; Decrement memory $07FF.w,X [Reads: X Index] [Flags: NZ]
	bit $DD.b,X		; 34 DD ; Test bits $DD.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	.db $80, $DE		; 80 DE ; Branch always to $80, $DE [Flow: branch]
	sta $A8.b,X		; 95 A8 ; Store accumulator to $A8.b,X [Reads: Accumulator, X Index]
	dec $EBFE.w,X		; DE FE EB ; Decrement memory $EBFE.w,X [Reads: X Index] [Flags: NZ]
	ldy $DD.b,X		; B4 DD ; Load Y register $DD.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	dec $D3CB.w,X		; DE CB D3 ; Decrement memory $D3CB.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($D3.b,S),Y		; D3 D3 ; Compare accumulator (stack relative indirect indexed) ($D3.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $F9C2.w,Y		; 39 C2 F9 ; AND accumulator with memory $F9C2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $92.b,X		; 35 92 ; Logical AND $92.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF924D.l,X		; FF 4D 92 FF ; Subtract with carry (long,X) $FF924D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $3A90.w		; 20 90 3A ; Jump to subroutine at $3A90.w [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta ($1C.b,X)		; 81 1C ; Store accumulator ($1C.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $82, $36, $63		; 82 36 63 ; Branch always long to $82, $36, $63 [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1B08E1.l,X		; FF E1 08 1B ; Subtract with carry (long,X) $1B08E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $17C2.w,X		; 1D C2 17 ; OR accumulator with memory $17C2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1F5427.l,X		; 1F 27 54 1F ; Logical OR long $1F5427.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$15.b]		; 27 15 ; AND accumulator with memory (long) [$15.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($6A.b,X)		; 21 6A ; Logical AND ($6A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc #$6B20.w		; 69 20 6B ; Add #$6B20.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora $39.b,X		; 15 39 ; OR accumulator with memory $39.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	bit $3F30.w		; 2C 30 3F ; Test bits $3F30.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $51.b,S		; C3 51 ; Compare accumulator (stack relative) $51.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	and ($C3.b,X)		; 21 C3 ; Logical AND ($C3.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $4D.b,X		; 15 4D ; OR accumulator with memory $4D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
.INDEX 16
	rep #$15		; C2 15
	eor $152E.w		; 4D 2E 15 ; Exclusive OR $152E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($6A.b),Y		; 51 6A ; Exclusive OR accumulator with memory ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $69.b,X		; 15 69 ; OR accumulator with memory $69.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $30, $5E		; 30 5E ; Branch if minus to $30, $5E [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rol $2B.b,X		; 36 2B ; Rotate left $2B.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $6B3B.w,Y		; 59 3B 6B ; Exclusive OR accumulator with memory $6B3B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($58.b)		; 32 58 ; AND accumulator with memory (indirect) ($58.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	jsr ($7484.w,X)		; FC 84 74 ; Jump to subroutine indirect indexed ($7484.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $B493.w,X		; FD 93 B4 ; Subtract with carry $B493.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
.INDEX 16
	rep #$90		; C2 90
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
.INDEX 16
	rep #$91		; C2 91
	sec		; 38 ; Set carry flag [Flags: C]
	cpx $143B.w		; EC 3B 14 ; Compare $143B.w with X register [Reads: X Index] [Flags: NCZ]
	ldy $22.b,X		; B4 22 ; Load Y register $22.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	trb $C8.b		; 14 C8 ; Test and reset bits $C8.b [Reads: Accumulator] [Flags: Z]
	jsl $889D30.l		; 22 30 9D 88 ; Jump to subroutine long $889D30.l [Writes: Stack Pointer] [Flow: call]
	.db $50, $B7		; 50 B7 ; Branch if overflow clear to $50, $B7 [Flow: branch]
	jsl $3879FC.l		; 22 FC 79 38 ; Jump to subroutine long $3879FC.l [Writes: Stack Pointer] [Flow: call]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE00E1.l,X		; FF E1 00 FE ; Subtract with carry (long,X) $FE00E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($39.b,X)		; 81 39 ; Store accumulator ($39.b,X) [Reads: Direct Page, Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $A33B.w		; 6E 3B A3 ; Rotate right $A33B.w [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $33.b,S		; A3 33 ; Load accumulator (stack relative) $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $12.b,X		; D5 12 ; Compare accumulator $12.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $881CB1.l,X		; FF B1 1C 88 ; Subtract with carry (long,X) $881CB1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $3A		; B0 3A ; Branch if carry set to $B0, $3A [Flow: branch]
	eor $39C8.w,X		; 5D C8 39 ; Exclusive OR accumulator with memory $39C8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr $FF1C.w		; 20 1C FF ; Jump to subroutine at $FF1C.w [Writes: Stack Pointer] [Flow: call]
	sbc $FE0081.l,X		; FF 81 00 FE ; Subtract with carry (long,X) $FE0081.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($39.b,X)		; E1 39 ; Subtract with carry ($39.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $FF92.w,X		; 9D 92 FF ; Store accumulator to $FF92.w,X [Reads: Accumulator, X Index]
	.db $D0, $90		; D0 90 ; Branch if not equal to $D0, $90 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sta ($B6.b)		; 92 B6 ; Store accumulator (indirect) ($B6.b) [Reads: Direct Page, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $90, $B0		; 90 B0 ; Branch if carry clear to $90, $B0 [Flow: branch]
	stz $B093.w,X		; 9E 93 B0 ; Store zero to $B093.w,X [Reads: X Index]
	cmp [$93.b],Y		; D7 93 ; Compare accumulator (long indexed) [$93.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	lda #$5DAE.w		; A9 AE 5D ; Load #$5DAE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$5DCA.w		; A9 CA 5D ; Load #$5DCA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sta ($D0.b)		; 92 D0 ; Store accumulator (indirect) ($D0.b) [Reads: Direct Page, Accumulator]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sta ($B0.b)		; 92 B0 ; Store accumulator (indirect) ($B0.b) [Reads: Direct Page, Accumulator]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lsr $C0C8.w,X		; 5E C8 C0 ; Logical shift right $C0C8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $B8B8.w,X		; 5E B8 B8 ; Logical shift right $B8B8.w,X [Reads: X Index] [Flags: NCZ]
	ldy $FD.b		; A4 FD ; Load $FD.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $58.b		; 06 58 ; Arithmetic shift left $58.b [Reads: Direct Page] [Flags: NCZ]
	ldx #$FD62.w		; A2 62 FD ; Load #$FD62.w into X register [Writes: X Index] [Flags: NZ]
	adc #$FD02.w		; 69 02 FD ; Add #$FD02.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy $FD83.w		; AC 83 FD ; Load $FD83.w into Y register [Writes: Y Index] [Flags: NZ]
	jmp ($5887.w)		; 6C 87 58 ; Jump indirect to ($5887.w) [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FD, $6E		; 62 FD 6E ; Push effective relative address $62, $FD, $6E [Writes: Stack Pointer]
	sta $40.b,S		; 83 40 ; Store accumulator (stack relative) $40.b,S [Reads: Stack Pointer, Accumulator]
	ldy $88.b		; A4 88 ; Load $88.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dec $88.b		; C6 88 ; Decrement $88.b [Reads: Direct Page] [Flags: NZ]
	.db $30, $9E		; 30 9E ; Branch if minus to $30, $9E [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($C4.b),Y		; 31 C4 ; AND accumulator with memory ($C4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $FBA0.w,Y		; 19 A0 FB ; OR accumulator with memory $FBA0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta ($C0.b),Y		; 91 C0 ; Store accumulator ($C0.b),Y [Reads: Direct Page, Y Index, Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cmp $B0C0.w,Y		; D9 C0 B0 ; Compare accumulator $B0C0.w,Y [Reads: Y Index] [Flags: NCZ]
	ora $C888.w,X		; 1D 88 C8 ; OR accumulator with memory $C888.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B188.w,X		; 1D 88 B1 ; OR accumulator with memory $B188.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sta ($C9.b)		; 92 C9 ; Store accumulator (indirect) ($C9.b) [Reads: Direct Page, Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sta ($A0.b)		; 92 A0 ; Store accumulator (indirect) ($A0.b) [Reads: Direct Page, Accumulator]
	.db $30, $A4		; 30 A4 ; Branch if minus to $30, $A4 [Flow: branch]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	ldy $94.b		; A4 94 ; Load $94.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	eor ($5D.b,X)		; 41 5D ; Exclusive OR accumulator with memory ($5D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $41		; D0 41 ; Branch if not equal to $D0, $41 [Flow: branch]
	eor $FFFF.w,X		; 5D FF FF ; Exclusive OR accumulator with memory $FFFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $8022.w		; 20 22 80 ; Jump to subroutine at $8022.w [Writes: Stack Pointer] [Flow: call]
	asl $0082.w,X		; 1E 82 00 ; Arithmetic shift left $0082.w,X [Reads: X Index] [Flags: NCZ]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$9F.b],Y		; 17 9F ; OR accumulator with memory (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($4D.b)		; D2 4D ; Compare accumulator (indirect) ($4D.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $DC17D2.l,X		; 9F D2 17 DC ; Store accumulator (long,X) $DC17D2.l,X [Reads: Accumulator, X Index]
	cmp ($4D.b)		; D2 4D ; Compare accumulator (indirect) ($4D.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jmp.w [$38D2]		; DC D2 38 ; Jump long indirect [$38D2] [Flow: jump]
	.db $90, $3A		; 90 3A ; Branch if carry clear to $90, $3A [Flow: branch]
	jmp ($77BC.w)		; 6C BC 77 ; Jump indirect to ($77BC.w) [Flow: jump]
	jsr $F994.w		; 20 94 F9 ; Jump to subroutine at $F994.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $94		; 30 94 ; Branch if minus to $30, $94 [Flow: branch]
	sbc $9448.w,Y		; F9 48 94 ; Subtract with carry $9448.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9458.w,Y		; F9 58 94 ; Subtract with carry $9458.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EC21.w,Y		; F9 21 EC ; Subtract with carry $EC21.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EC59.w,Y		; F9 59 EC ; Subtract with carry $EC59.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EC31.w,Y		; F9 31 EC ; Subtract with carry $EC31.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EC49.w,Y		; F9 49 EC ; Subtract with carry $EC49.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C040.w,Y		; F9 40 C0 ; Subtract with carry $C040.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $9F17.w,X		; 5E 17 9F ; Logical shift right $9F17.w,X [Reads: X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora [$A7.b],Y		; 17 A7 ; OR accumulator with memory (long indexed) [$A7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora [$AF.b],Y		; 17 AF ; OR accumulator with memory (long indexed) [$AF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora [$D7.b],Y		; 17 D7 ; OR accumulator with memory (long indexed) [$D7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora [$DF.b],Y		; 17 DF ; OR accumulator with memory (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora [$E7.b],Y		; 17 E7 ; OR accumulator with memory (long indexed) [$E7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc [$9F.b]		; 67 9F ; Add with carry (long) [$9F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc [$A7.b]		; 67 A7 ; Add with carry (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc [$AF.b]		; 67 AF ; Add with carry (long) [$AF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc [$D7.b]		; 67 D7 ; Add with carry (long) [$D7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc [$DF.b]		; 67 DF ; Add with carry (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc [$E7.b]		; 67 E7 ; Add with carry (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor ($AB.b,S),Y		; 53 AB ; XOR accumulator (stack relative indirect indexed) ($AB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor ($DB.b,S),Y		; 53 DB ; XOR accumulator (stack relative indirect indexed) ($DB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsl $186118.l		; 22 18 61 18 ; Jump to subroutine long $186118.l [Writes: Stack Pointer] [Flow: call]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $02C1.w,X		; FE C1 02 ; Increment memory $02C1.w,X [Reads: X Index] [Flags: NZ]
	.db $B0, $22		; B0 22 ; Branch if carry set to $B0, $22 [Flow: branch]
	.db $62, $FE, $C3		; 62 FE C3 ; Push effective relative address $62, $FE, $C3 [Writes: Stack Pointer]
	asl $C1.b		; 06 C1 ; Arithmetic shift left $C1.b [Reads: Direct Page] [Flags: NCZ]
	and ($01.b),Y		; 31 01 ; AND accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF02A3.l,X		; FF A3 02 FF ; Subtract with carry (long,X) $FF02A3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $83.b		; A4 83 ; Load $83.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp ($49.b,X)		; C1 49 ; Compare accumulator ($49.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $87.b		; C4 87 ; Compare $87.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $B0, $5A		; B0 5A ; Branch if carry set to $B0, $5A [Flow: branch]
	.db $62, $FE, $C6		; 62 FE C6 ; Push effective relative address $62, $FE, $C6 [Writes: Stack Pointer]
	sta $9B.b,S		; 83 9B ; Store accumulator (stack relative) $9B.b,S [Reads: Stack Pointer, Accumulator]
	adc $FA.b,S		; 63 FA ; Add with carry (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda ($5A.b,X)		; A1 5A ; Load accumulator ($5A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $81FE.w,Y		; F9 FE 81 ; Subtract with carry $81FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp $11.b,S		; C3 11 ; Compare accumulator (stack relative) $11.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cpy #$59C3.w		; C0 C3 59 ; Compare #$59C3.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $00.b,S		; 63 00 ; Add with carry (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $21.b,X		; 15 21 ; OR accumulator with memory $21.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $29.b,S		; C3 29 ; Compare accumulator (stack relative) $29.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	and ($C2.b),Y		; 31 C2 ; AND accumulator with memory ($C2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1C.b,X		; 15 1C ; OR accumulator with memory $1C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and [$15.b]		; 27 15 ; AND accumulator with memory (long) [$15.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $146A.w		; 20 6A 14 ; Jump to subroutine at $146A.w [Writes: Stack Pointer] [Flow: call]
	and [$2C.b],Y		; 37 2C ; AND accumulator with memory (long indexed) [$2C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$6A38.w		; 29 38 6A ; Logical AND #$6A38.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$284D.w		; 29 4D 28 ; Logical AND #$284D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $35.b		; 45 35 ; Exclusive OR $35.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $2D30.w		; 2D 30 2D ; Logical AND $2D30.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $6B23.w		; 2C 23 6B ; Test bits $6B23.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jmp $5CC21F.l		; 5C 1F C2 5C ; Jump long to $5CC21F.l [Flow: jump]
	jmp $5114C2.l		; 5C C2 14 51 ; Jump long to $5114C2.l [Flow: jump]
	cmp $23.b,S		; C3 23 ; Compare accumulator (stack relative) $23.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $50.b,S		; C3 50 ; Compare accumulator (stack relative) $50.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $58.b,S		; C3 58 ; Compare accumulator (stack relative) $58.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	asl $5B27.w,X		; 1E 27 5B ; Arithmetic shift left $5B27.w,X [Reads: X Index] [Flags: NCZ]
	and $6A.b,S		; 23 6A ; AND accumulator with stack relative $6A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $142A61.l,X		; 1F 61 2A 14 ; Logical OR long $142A61.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $27		; 50 27 ; Branch if overflow clear to $50, $27 [Flow: branch]
	trb $6B56.w		; 1C 56 6B ; Test and reset bits $6B56.w [Reads: Accumulator] [Flags: Z]
	ora $54.b,X		; 15 54 ; OR accumulator with memory $54.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$6B.b],Y		; 17 6B ; OR accumulator with memory (long indexed) [$6B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	mvn $28,$6B		; 54 6B 28 ; Move block negative $28,$6B [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $6B.b,S		; 23 6B ; AND accumulator with stack relative $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc ($6B.b,X)		; 61 6B ; Add with carry ($6B.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($20.b),Y		; 31 20 ; AND accumulator with memory ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($48.b)		; D2 48 ; Compare accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	and $D2.b,S		; 23 D2 ; AND accumulator with stack relative $D2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $F421.w,X		; FD 21 F4 ; Subtract with carry $F421.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3444.w,X		; FD 44 34 ; Subtract with carry $3444.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $18D250.l		; 22 50 D2 18 ; Jump to subroutine long $18D250.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp ($18.b)		; D2 18 ; Compare accumulator (indirect) ($18.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cmp ($FF.b)		; D2 FF ; Compare accumulator (indirect) ($FF.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $020000.l,X		; FF 00 00 02 ; Subtract with carry (long,X) $020000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BB0CE1.l,X		; FF E1 0C BB ; Subtract with carry (long,X) $BB0CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $38E1.w,X		; FE E1 38 ; Increment memory $38E1.w,X [Reads: X Index] [Flags: NZ]
	bit #$0D34.w		; 89 34 0D ; Test bits #$0D34.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$0E40.w		; 89 40 0E ; Test bits #$0E40.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp ($10.b),Y		; D1 10 ; Compare accumulator ($10.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ora $1064D1.l		; 0F D1 64 10 ; OR accumulator with memory (long) $1064D1.l [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($E8.b,X)		; 61 E8 ; Add with carry ($E8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FE, $93		; 62 FE 93 ; Push effective relative address $62, $FE, $93 [Writes: Stack Pointer]
	jmp $5C33FF.l		; 5C FF 33 5C ; Jump long to $5C33FF.l [Flow: jump]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	eor ($FC.b,S),Y		; 53 FC ; XOR accumulator (stack relative indirect indexed) ($FC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit #$A011.w		; 89 11 A0 ; Test bits #$A011.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$A155.w		; 89 55 A1 ; Test bits #$A155.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $11.b,X		; D5 11 ; Compare accumulator $11.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldx #$75D5.w		; A2 D5 75 ; Load #$75D5.w into X register [Writes: X Index] [Flags: NZ]
	lda $9D.b,S		; A3 9D ; Load accumulator (stack relative) $9D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($FF.b)		; 92 FF ; Store accumulator (indirect) ($FF.b) [Reads: Direct Page, Accumulator]
	pei ($90.b)		; D4 90 ; Push effective indirect address ($90.b) [Reads: Direct Page] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $91		; B0 91 ; Branch if carry set to $B0, $91 [Flow: branch]
	ora $98.b		; 05 98 ; Logical OR $98.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $831881.l,X		; FF 81 18 83 ; Subtract with carry (long,X) $831881.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $0080.w		; 1C 80 00 ; Test and reset bits $0080.w [Reads: Accumulator] [Flags: Z]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($002B.w,X)		; FC 2B 00 ; Jump to subroutine indirect indexed ($002B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $01B1.w,Y		; 19 B1 01 ; OR accumulator with memory $01B1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $040B.w,X		; FD 0B 04 ; Subtract with carry $040B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldx #$FD61.w		; A2 61 FD ; Load #$FD61.w into X register [Writes: X Index] [Flags: NZ]
	ora #$FC00.w		; 09 00 FC ; Logical OR #$FC00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $1981.w		; 2C 81 19 ; Test bits $1981.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cmp #$FD02.w		; C9 02 FD ; Compare #$FD02.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $4085.w		; 0C 85 40 ; Test and set bits $4085.w [Reads: Accumulator] [Flags: Z]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $4D81.w		; 0E 81 4D ; Arithmetic shift left $4D81.w [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor $B8D8.w		; 4D D8 B8 ; Exclusive OR $B8D8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($A3.b,S),Y		; 53 A3 ; XOR accumulator (stack relative indirect indexed) ($A3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $A3.b,S		; 63 A3 ; Add with carry (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor ($E3.b,S),Y		; 53 E3 ; XOR accumulator (stack relative indirect indexed) ($E3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	adc $E3.b,S		; 63 E3 ; Add with carry (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $2A.b,S		; A3 2A ; Load accumulator (stack relative) $2A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($A3.b)		; D2 A3 ; Compare accumulator (indirect) ($A3.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $50, $D2		; 50 D2 ; Branch if overflow clear to $50, $D2 [Flow: branch]
	lda $2A.b,S		; A3 2A ; Load accumulator (stack relative) $2A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $2AD3.w,X		; FE D3 2A ; Increment memory $2AD3.w,X [Reads: X Index] [Flags: NZ]
	inc $52A3.w,X		; FE A3 52 ; Increment memory $52A3.w,X [Reads: X Index] [Flags: NZ]
	inc $52D3.w,X		; FE D3 52 ; Increment memory $52D3.w,X [Reads: X Index] [Flags: NZ]
	inc $52BA.w,X		; FE BA 52 ; Increment memory $52BA.w,X [Reads: X Index] [Flags: NZ]
	jsr ($9103.w,X)		; FC 03 91 ; Jump to subroutine indirect indexed ($9103.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$D903.w		; C0 03 D9 ; Compare #$D903.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FFFF1C.l		; 22 1C FF FF ; Jump to subroutine long $FFFF1C.l [Writes: Stack Pointer] [Flow: call]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	inc $8793.w,X		; FE 93 87 ; Increment memory $8793.w,X [Reads: X Index] [Flags: NZ]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FE, $96		; 62 FE 96 ; Push effective relative address $62, $FE, $96 [Writes: Stack Pointer]
	sta $B4.b,S		; 83 B4 ; Store accumulator (stack relative) $B4.b,S [Reads: Stack Pointer, Accumulator]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($85.b,S),Y		; 33 85 ; AND accumulator (stack relative indirect indexed) ($85.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $6148.w		; CD 48 61 ; Compare $6148.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $958136.l,X		; FF 36 81 95 ; Subtract with carry (long,X) $958136.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $69.b,S		; 43 69 ; Exclusive OR accumulator with stack relative $69.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $43.b,S		; A3 43 ; Load accumulator (stack relative) $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $559AFA.l,X		; 5F FA 9A 55 ; Exclusive OR accumulator with memory (long,X) $559AFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $55A2.w,Y		; F9 A2 55 ; Subtract with carry $55A2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $63DB.w,Y		; F9 DB 63 ; Subtract with carry $63DB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $63.b,S		; E3 63 ; Subtract stack-relative $63.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc #$6943.w		; E9 43 69 ; Subtract #$6943.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor $F9.b,X		; 55 F9 ; Exclusive OR accumulator with memory $F9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
.INDEX 8
	sep #$55		; E2 55
	sbc $43D8.w,Y		; F9 D8 43 ; Subtract with carry $43D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sta [$22.b],Y		; 97 22 ; Store accumulator (long indexed) [$22.b],Y [Reads: Direct Page, Y Index, Accumulator]
	inc $22DF.w,X		; FE DF 22 ; Increment memory $22DF.w,X [Reads: X Index] [Flags: NZ]
	inc $4AB4.w,X		; FE B4 4A ; Increment memory $4AB4.w,X [Reads: X Index] [Flags: NZ]
	cpy #$C5.b		; C0 C5 ; Compare #$C5.b with Y register [Reads: Y Index] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr $FF18.w		; 20 18 FF ; Jump to subroutine at $FF18.w [Writes: Stack Pointer] [Flow: call]
	sbc $FF00E4.l,X		; FF E4 00 FF ; Subtract with carry (long,X) $FF00E4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F921AD.l,X		; FF AD 21 F9 ; Subtract with carry (long,X) $F921AD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1C81FF.l,X		; FF FF 81 1C ; Subtract with carry (long,X) $1C81FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr $0A0D.w		; 4E 0D 0A ; Logical shift right $0A0D.w [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl $510B.w		; 0E 0B 51 ; Arithmetic shift left $510B.w [Flags: NCZ]
	adc ($C0.b,X)		; 61 C0 ; Add with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $B0A2.w		; 2C A2 B0 ; Test bits $B0A2.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jsr $B00F.w		; 20 0F B0 ; Jump to subroutine at $B00F.w [Writes: Stack Pointer] [Flow: call]
	jsl $C1FE62.l		; 22 62 FE C1 ; Jump to subroutine long $C1FE62.l [Writes: Stack Pointer] [Flow: call]
	cop $C9.b		; 02 C9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $82.b,S		; A3 82 ; Load accumulator (stack relative) $82.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	inc $10.b		; E6 10 ; Increment $10.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $62, $FF, $43		; 62 FF 43 ; Push effective relative address $62, $FF, $43 [Writes: Stack Pointer]
	lda $5353.w,Y		; B9 53 53 ; Load $5353.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$91.b		; E0 91 ; Compare #$91.b with X register [Reads: X Index] [Flags: NCZ]
	eor ($E0.b,S),Y		; 53 E0 ; XOR accumulator (stack relative indirect indexed) ($E0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($91.b,S),Y		; 53 91 ; XOR accumulator (stack relative indirect indexed) ($91.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$91.b		; E0 91 ; Compare #$91.b with X register [Reads: X Index] [Flags: NCZ]
	sta ($E0.b),Y		; 91 E0 ; Store accumulator ($E0.b),Y [Reads: Direct Page, Y Index, Accumulator]
	bit $C26B.w,X		; 3C 6B C2 ; Test bits $C26B.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	and $C39B.w,X		; 3D 9B C3 ; AND accumulator with memory $C39B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	mvn $C3,$A6		; 54 A6 C3 ; Move block negative $C3,$A6 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp $68C3AA.l		; 5C AA C3 68 ; Jump long to $68C3AA.l [Flow: jump]
	lda ($C3.b),Y		; B1 C3 ; Load accumulator ($C3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $B0.b,X		; 75 B0 ; Add $B0.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $8F.b,S		; C3 8F ; Compare accumulator (stack relative) $8F.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	lda ($C3.b),Y		; B1 C3 ; Load accumulator ($C3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cmp $A6.b,S		; C3 A6 ; Compare accumulator (stack relative) $A6.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ldy #$C3.b		; A0 C3 ; Load #$C3.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $C398.w		; AD 98 C3 ; Load $C398.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $6A.b,X		; B4 6A ; Load Y register $6A.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
.INDEX 16
	rep #$51		; C2 51
	and $45C3.w,X		; 3D C3 45 ; AND accumulator with memory $45C3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$3DC3.w		; 49 C3 3D ; Exclusive OR #$3DC3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($C3.b),Y		; 51 C3 ; Exclusive OR accumulator with memory ($C3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $C239.w		; 9C 39 C2 ; Store zero to $C239.w
	lda ($49.b,X)		; A1 49 ; Load accumulator ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $AD.b,S		; C3 AD ; Compare accumulator (stack relative) $AD.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	eor ($C3.b),Y		; 51 C3 ; Exclusive OR accumulator with memory ($C3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $50, $8A		; 50 8A ; Branch if overflow clear to $50, $8A [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $50, $22		; 50 22 ; Branch if overflow clear to $50, $22 [Flow: branch]
	mvp $69,$44		; 44 44 69 ; Move block positive $69,$44 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $22,$44		; 44 44 22 ; Move block positive $22,$44 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $55.b,X		; 15 55 ; OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $10, $3A		; 10 3A ; Branch if plus to $10, $3A [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	adc $0C.b		; 65 0C ; Add $0C.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($7F.b,X)		; 61 7F ; Add with carry ($7F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and $E805.w,Y		; 39 05 E8 ; AND accumulator with memory $E805.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ror $EC.b		; 66 EC ; Rotate right $EC.b [Reads: Direct Page] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $80, $58		; 80 58 ; Branch always to $80, $58 [Flow: branch]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $60.b		; 06 60 ; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: NCZ]
	sbc $7856.w		; ED 56 78 ; Subtract $7856.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cpx $503B.w		; EC 3B 50 ; Compare $503B.w with X register [Reads: X Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	adc #$3850.w		; 69 50 38 ; Add #$3850.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $6938A8.l,X		; 5F A8 38 69 ; Exclusive OR accumulator with memory (long,X) $6938A8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	mvp $B4,$22		; 44 22 B4 ; Move block positive $B4,$22 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $B4,$69		; 44 69 B4 ; Move block positive $B4,$69 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor ($22.b),Y		; 51 22 ; Exclusive OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $50.b		; C6 50 ; Decrement $50.b [Reads: Direct Page] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsl $22C88B.l		; 22 8B C8 22 ; Jump to subroutine long $22C88B.l [Writes: Stack Pointer] [Flow: call]
	stz $BC.b,X		; 74 BC ; Store zero to $BC.b,X [Reads: X Index]
	adc #$BC88.w		; 69 88 BC ; Add #$BC88.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$3C63.w		; 69 63 3C ; Add #$3C63.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
.ACCU 16
	rep #$66		; C2 66
	eor $506429.l		; 4F 29 64 50 ; Exclusive OR accumulator with memory (long) $506429.l [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $5C2B54.l		; 5C 54 2B 5C ; Jump long to $5C2B54.l [Flow: jump]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvn $2B,$5C		; 54 5C 2B ; Move block negative $2B,$5C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $6B,$60		; 54 60 6B ; Move block negative $6B,$60 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp $2B64.w		; 4C 64 2B ; Jump to $2B64.w [Flow: jump]
	lsr $6B6B.w		; 4E 6B 6B ; Logical shift right $6B6B.w [Flags: NCZ]
	jmp $2D98.w		; 4C 98 2D ; Jump to $2D98.w [Flow: jump]
	mvn $6B,$9C		; 54 9C 6B ; Move block negative $6B,$9C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $2D,$A0		; 54 A0 2D ; Move block negative $2D,$A0 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp $5C6BA4.l		; 5C A4 6B 5C ; Jump long to $5C6BA4.l [Flow: jump]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and $AC64.w		; 2D 64 AC ; Logical AND $AC64.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror $B3.b		; 66 B3 ; Rotate right $B3.b [Reads: Direct Page] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $986A.w		; AC 6A 98 ; Load $986A.w into Y register [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rol $A4A0.w		; 2E A0 A4 ; Rotate left $A4A0.w [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldy #$2EA0.w		; A0 A0 2E ; Load #$2EA0.w into Y register [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	stz $A86A.w		; 9C 6A A8 ; Store zero to $A86A.w
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $6BB2.w		; 2E B2 6B ; Rotate left $6BB2.w [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	stz $2C.b		; 64 2C ; Store zero to $2C.b
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldy #$2C5C.w		; A0 5C 2C ; Load #$2C5C.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$6A58.w		; A0 58 6A ; Load #$6A58.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	mvn $98,$2C		; 54 2C 98 ; Move block negative $98,$2C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $50, $6A		; 50 6A ; Branch if overflow clear to $50, $6A [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	stz $C2.b,X		; 74 C2 ; Store zero to $C2.b,X [Reads: X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc ($27.b),Y		; 71 27 ; Add with carry ($27.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc [$6A.b],Y		; 77 6A ; Add with carry (long indexed) [$6A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $77.b,X		; 74 77 ; Store zero to $77.b,X [Reads: X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	jsr ($7231.w,X)		; FC 31 72 ; Jump to subroutine indirect indexed ($7231.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stz $AE.b,X		; 74 AE ; Store zero to $AE.b,X [Reads: X Index]
	tsb $71.b		; 04 71 ; Test and set bits $71.b [Reads: Accumulator] [Flags: Z]
	ldy #$0AE0.w		; A0 E0 0A ; Load #$0AE0.w into Y register [Writes: Y Index] [Flags: NZ]
	ora ($A0.b,S),Y		; 13 A0 ; OR accumulator (stack relative indirect indexed) ($A0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $F7BEA1.l,X		; BF A1 BE F7 ; Load long $F7BEA1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $C3.b,S		; A3 C3 ; Load accumulator (stack relative) $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($31.b),Y		; D1 31 ; Compare accumulator ($31.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $81FFFF.l,X		; FF FF FF 81 ; Subtract with carry (long,X) $81FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $E1FC.w		; 1C FC E1 ; Test and reset bits $E1FC.w [Reads: Accumulator] [Flags: Z]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $30A0.w		; 2C A0 30 ; Test bits $30A0.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $0D.b,X		; 34 0D ; Test bits $0D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	jsl $3B1861.l		; 22 61 18 3B ; Jump to subroutine long $3B1861.l [Writes: Stack Pointer] [Flow: call]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $80.b,S		; 23 80 ; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl $AA08.w		; 0E 08 AA ; Arithmetic shift left $AA08.w [Flags: NCZ]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($02.b,X)		; C1 02 ; Compare accumulator ($02.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	ldy $A22C.w,X		; BC 2C A2 ; Load Y register $A22C.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $B0, $20		; B0 20 ; Branch if carry set to $B0, $20 [Flow: branch]
	ora $6222B0.l		; 0F B0 22 62 ; OR accumulator with memory (long) $6222B0.l [Writes: Accumulator] [Flags: NZ]
	cmp #$0138.w		; C9 38 01 ; Compare #$0138.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $BA82A3.l,X		; FF A3 82 BA ; Subtract with carry (long,X) $BA82A3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $10.b		; E6 10 ; Increment $10.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $62, $58, $13		; 62 58 13 ; Push effective relative address $62, $58, $13 [Writes: Stack Pointer]
	ora $78.b		; 05 78 ; Logical OR $78.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $3A		; 10 3A ; Branch if plus to $10, $3A [Flow: branch]
	adc $11.b,S		; 63 11 ; Add with carry (stack relative) $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	inc $1193.w,X		; FE 93 11 ; Increment memory $1193.w,X [Reads: X Index] [Flags: NZ]
	inc $2450.w,X		; FE 50 24 ; Increment memory $2450.w,X [Reads: X Index] [Flags: NZ]
	ldy $50.b		; A4 50 ; Load $50.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $4422.w		; 20 22 44 ; Jump to subroutine at $4422.w [Writes: Stack Pointer] [Flow: call]
	bit $A4.b,X		; 34 A4 ; Test bits $A4.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	.db $30, $46		; 30 46 ; Branch if minus to $30, $46 [Flow: branch]
	jsl $693244.l		; 22 44 32 69 ; Jump to subroutine long $693244.l [Writes: Stack Pointer] [Flow: call]
	mvp $22,$30		; 44 30 22 ; Move block positive $22,$30 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $50, $21		; 50 21 ; Branch if overflow clear to $50, $21 [Flow: branch]
	adc #$215C.w		; 69 5C 21 ; Add #$215C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$4830.w		; 69 30 48 ; Add #$4830.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy $14.b		; A4 14 ; Load $14.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	cmp $14.b,S		; C3 14 ; Compare accumulator (stack relative) $14.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cmp $14.b,S		; C3 14 ; Compare accumulator (stack relative) $14.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and [$17.b]		; 27 17 ; AND accumulator with memory (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $9D156A.l,X		; 5F 6A 15 9D ; Exclusive OR accumulator with memory (long,X) $9D156A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $1D6B5F.l,X		; 1F 5F 6B 1D ; Logical OR long $1D6B5F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $146B.w,X		; 9D 6B 14 ; Store accumulator to $146B.w,X [Reads: Accumulator, X Index]
	ldy $28.b,X		; B4 28 ; Load Y register $28.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ora #$FE6A.w		; 09 6A FE ; Logical OR #$FE6A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$FE7A.w		; 09 7A FE ; Logical OR #$FE7A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($69.b)		; 32 69 ; AND accumulator with memory (indirect) ($69.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $A132.w,X		; FE 32 A1 ; Increment memory $A132.w,X [Reads: X Index] [Flags: NZ]
	inc $C8FC.w,X		; FE FC C8 ; Increment memory $C8FC.w,X [Reads: X Index] [Flags: NZ]
	ldy $53.b,X		; B4 53 ; Load Y register $53.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($9FA8.w,X)		; FC A8 9F ; Jump to subroutine indirect indexed ($9FA8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $30, $C0		; 30 C0 ; Branch if minus to $30, $C0 [Flow: branch]
	ldy $60.b		; A4 60 ; Load $60.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	adc ($A4.b)		; 72 A4 ; Add with carry (indirect) ($A4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$A470.w		; A0 70 A4 ; Load #$A470.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy #$90C2.w		; A0 C2 90 ; Load #$90C2.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
.INDEX 16
	rep #$90		; C2 90
	sta $9027.w,Y		; 99 27 90 ; Store accumulator to $9027.w,Y [Reads: Y Index, Accumulator]
	stz $886A.w		; 9C 6A 88 ; Store zero to $886A.w
	ldy #$882E.w		; A0 2E 88 ; Load #$882E.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $9428.w		; AD 28 94 ; Load $9428.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $A4.b,X		; 94 A4 ; Store Y register $A4.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	stz $6B9D.w		; 9C 9D 6B ; Store zero to $6B9D.w
	cmp ($6A.b,X)		; C1 6A ; Compare accumulator ($6A.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sta ($C8.b,S),Y		; 93 C8 ; Store accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	.db $62, $B9, $C8		; 62 B9 C8 ; Push effective relative address $62, $B9, $C8 [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda $6AD9.w,Y		; B9 D9 6A ; Load $6AD9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($CB.b,S),Y		; 93 CB ; Store accumulator (stack relative indirect indexed) ($CB.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	adc ($FA.b,S),Y		; 73 FA ; Add with carry (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	wai		; CB ; Wait for interrupt
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	sta $FA.b,S		; 83 FA ; Store accumulator (stack relative) $FA.b,S [Reads: Stack Pointer, Accumulator]
	wai		; CB ; Wait for interrupt
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	sta ($FA.b,S),Y		; 93 FA ; Store accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp ($6B.b,S),Y		; D3 6B ; Compare accumulator (stack relative indirect indexed) ($6B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($73.b,S),Y		; D3 73 ; Compare accumulator (stack relative indirect indexed) ($73.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($7B.b,S),Y		; D3 7B ; Compare accumulator (stack relative indirect indexed) ($7B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($83.b,S),Y		; D3 83 ; Compare accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($8B.b,S),Y		; D3 8B ; Compare accumulator (stack relative indirect indexed) ($8B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp ($93.b,S),Y		; D3 93 ; Compare accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and $E8FF.w,Y		; 39 FF E8 ; AND accumulator with memory $E8FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($66.b,S),Y		; 53 66 ; XOR accumulator (stack relative indirect indexed) ($66.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $FE72.w		; EE 72 FE ; Increment $FE72.w [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	eor $B8.b,S		; 43 B8 ; Exclusive OR accumulator with stack relative $B8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($B963.w,X)		; FC 63 B9 ; Jump to subroutine indirect indexed ($B963.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora #$C00A.w		; 09 0A C0 ; Logical OR #$C00A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and ($60.b),Y		; 31 60 ; AND accumulator with memory ($60.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $11.b,S		; C3 11 ; Compare accumulator (stack relative) $11.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cpy #$32C9.w		; C0 C9 32 ; Compare #$32C9.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $F7BEA1.l,X		; BF A1 BE F7 ; Load long $F7BEA1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $FF.b,S		; A3 FF ; Load accumulator (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $81FFFF.l,X		; FF FF FF 81 ; Subtract with carry (long,X) $81FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $E1FC.w		; 1C FC E1 ; Test and reset bits $E1FC.w [Reads: Accumulator] [Flags: Z]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $30A0.w		; 2C A0 30 ; Test bits $30A0.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $0D.b,X		; 34 0D ; Test bits $0D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	jsl $3B1861.l		; 22 61 18 3B ; Jump to subroutine long $3B1861.l [Writes: Stack Pointer] [Flow: call]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $80.b,S		; 23 80 ; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl $AA08.w		; 0E 08 AA ; Arithmetic shift left $AA08.w [Flags: NCZ]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($02.b,X)		; E1 02 ; Subtract with carry ($02.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $2C.b		; C4 2C ; Compare $2C.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ldx #$20B8.w		; A2 B8 20 ; Load #$20B8.w into X register [Writes: X Index] [Flags: NZ]
	ora $6222B8.l		; 0F B8 22 62 ; OR accumulator with memory (long) $6222B8.l [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3B		; D0 3B ; Branch if not equal to $D0, $3B [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $82.b,S		; A3 82 ; Load accumulator (stack relative) $82.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	inc $10.b		; E6 10 ; Increment $10.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $62, $50, $10		; 62 50 10 ; Push effective relative address $62, $50, $10 [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $10, $3A		; 10 3A ; Branch if plus to $10, $3A [Flow: branch]
	ldy #$3A10.w		; A0 10 3A ; Load #$3A10.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	trb $55.b		; 14 55 ; Test and reset bits $55.b [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	trb $55.b		; 14 55 ; Test and reset bits $55.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($65.b,S),Y		; 53 65 ; XOR accumulator (stack relative indirect indexed) ($65.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $7F59.w		; 0C 59 7F ; Test and set bits $7F59.w [Reads: Accumulator] [Flags: Z]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor ($66.b)		; 52 66 ; Exclusive OR accumulator with memory (indirect) ($66.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx $8059.w		; EC 59 80 ; Compare $8059.w with X register [Reads: X Index] [Flags: NCZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $48.b		; 06 48 ; Arithmetic shift left $48.b [Reads: Direct Page] [Flags: NCZ]
	inc $6456.w		; EE 56 64 ; Increment $6456.w [Flags: NZ]
	jsl $2290C3.l		; 22 C3 90 22 ; Jump to subroutine long $2290C3.l [Writes: Stack Pointer] [Flow: call]
	cmp $6C.b,S		; C3 6C ; Compare accumulator (stack relative) $6C.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp $88.b,S		; C3 88 ; Compare accumulator (stack relative) $88.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp $64.b,S		; C3 64 ; Compare accumulator (stack relative) $64.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	trb $6C27.w		; 1C 27 6C ; Test and reset bits $6C27.w [Reads: Accumulator] [Flags: Z]
	jsl $3B6D69.l		; 22 69 6D 3B ; Jump to subroutine long $3B6D69.l [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $22		; 90 22 ; Branch if carry clear to $90, $22 [Flow: branch]
	adc #$3878.w		; 69 78 38 ; Add #$3878.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cpy $90.b		; C4 90 ; Compare $90.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	trb $6227.w		; 1C 27 62 ; Test and reset bits $6227.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvp $88,$5D		; 44 5D 88 ; Move block positive $88,$5D [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $71,$5D		; 44 5D 71 ; Move block positive $71,$5D [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $88.b		; 45 88 ; Exclusive OR $88.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit #$8845.w		; 89 45 88 ; Test bits #$8845.w with accumulator [Reads: Accumulator] [Flags: Z]
	eor $5D65.w		; 4D 65 5D ; Exclusive OR $5D65.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$5D65.w		; 89 65 5D ; Test bits #$5D65.w with accumulator [Reads: Accumulator] [Flags: Z]
	lsr $8864.w		; 4E 64 88 ; Logical shift right $8864.w [Flags: NCZ]
	ldx $8864.w		; AE 64 88 ; Load $8864.w into X register [Writes: X Index] [Flags: NZ]
	adc $FB24.w,Y		; 79 24 FB ; Add $FB24.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1FE5.w,X		; FD E5 1F ; Subtract with carry $1FE5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $1F05.w,X		; FE 05 1F ; Increment memory $1F05.w,X [Reads: X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	eor $FDFE.w,Y		; 59 FE FD ; Exclusive OR accumulator with memory $FDFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $9C		; 42 9C ; Reserved instruction
	inc $9C82.w,X		; FE 82 9C ; Increment memory $9C82.w,X [Reads: X Index] [Flags: NZ]
	.db $50, $40		; 50 40 ; Branch if overflow clear to $50, $40 [Flow: branch]
	and $40A8.w,X		; 3D A8 40 ; AND accumulator with memory $40A8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $462D.w,X		; 3D 2D 46 ; AND accumulator with memory $462D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$692C.w		; 69 2C 69 ; Add #$692C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $FA6743.l		; 22 43 67 FA ; Jump to subroutine long $FA6743.l [Writes: Stack Pointer] [Flow: call]
	and ($78.b,X)		; 21 78 ; Logical AND ($78.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $69792E.l		; 22 2E 79 69 ; Jump to subroutine long $69792E.l [Writes: Stack Pointer] [Flow: call]
	ora $22B9.w,X		; 1D B9 22 ; OR accumulator with memory $22B9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $69BA.w		; 2C BA 69 ; Test bits $69BA.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $22CD.w		; 2C CD 22 ; Test bits $22CD.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $69CD.w,X		; 3C CD 69 ; Test bits $69CD.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	rol $6989.w,X		; 3E 89 69 ; Rotate left $6989.w,X [Reads: X Index] [Flags: NCZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc $FA.b,S		; 63 FA ; Add with carry (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$2265.w		; C0 65 22 ; Compare #$2265.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp ($45.b),Y		; D1 45 ; Compare accumulator ($45.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	adc #$8CB4.w		; 69 B4 8C ; Add #$8CB4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $FA8BC7.l		; 22 C7 8B FA ; Jump to subroutine long $FA8BC7.l [Writes: Stack Pointer] [Flow: call]
	cmp $D7FA8B.l		; CF 8B FA D7 ; Compare accumulator (long) $D7FA8B.l [Reads: Accumulator] [Flags: NCZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jmp.w [$228C]		; DC 8C 22 ; Jump long indirect [$228C] [Flow: jump]
	sbc #$698F.w		; E9 8F 69 ; Subtract #$698F.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda $B622B4.l		; AF B4 22 B6 ; Load long $B622B4.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $69.b,Y		; B6 69 ; Load X register $69.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda $AFFA9F.l		; AF 9F FA AF ; Load long $AFFA9F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$FA.b]		; A7 FA ; Load accumulator (long) [$FA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $7BFAAF.l		; AF AF FA 7B ; Load long $7BFAAF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inc $9F4F.w,X		; FE 4F 9F ; Increment memory $9F4F.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $4FFAA7.l		; 4F A7 FA 4F ; Exclusive OR accumulator with memory (long) $4FFAA7.l [Writes: Accumulator] [Flags: NZ]
	lda $807FFA.l		; AF FA 7F 80 ; Load long $807FFA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $8060.w,Y		; F9 60 80 ; Subtract with carry $8060.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $8098.w,X		; 3D 98 80 ; AND accumulator with memory $8098.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $927D.w,X		; 3D 7D 92 ; AND accumulator with memory $927D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $C9FD.w,Y		; F9 FD C9 ; Subtract with carry $C9FD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $29FE.w,X		; 1E FE 29 ; Arithmetic shift left $29FE.w,X [Reads: X Index] [Flags: NCZ]
	ora $B863FC.l,X		; 1F FC 63 B8 ; Logical OR long $B863FC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FDB963.l,X		; FF 63 B9 FD ; Subtract with carry (long,X) $FDB963.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $FE9C.w		; AD 9C FE ; Load $FE9C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $539C.w		; 2D 9C 53 ; Logical AND $539C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	lda $E3.b,S		; A3 E3 ; Load accumulator (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$1031.w		; C0 31 10 ; Compare #$1031.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$6010.w		; C9 10 60 ; Compare #$6010.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp ($0A.b)		; D2 0A ; Compare accumulator (indirect) ($0A.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpy #$BF0A.w		; C0 0A BF ; Compare #$BF0A.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda ($BE.b,X)		; A1 BE ; Load accumulator ($BE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$A3.b],Y		; F7 A3 ; Subtract with carry (long indexed) [$A3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc $1881FF.l,X		; FF FF 81 18 ; Subtract with carry (long,X) $1881FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$0D3E.w		; 09 3E 0D ; Logical OR #$0D3E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $42, $61		; 42 61 ; Reserved instruction
	inc $02E1.w,X		; FE E1 02 ; Increment memory $02E1.w,X [Reads: X Index] [Flags: NZ]
	cpy $28.b		; C4 28 ; Compare $28.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ldx #$20B8.w		; A2 B8 20 ; Load #$20B8.w into X register [Writes: X Index] [Flags: NZ]
	ora $6222B8.l		; 0F B8 22 62 ; OR accumulator with memory (long) $6222B8.l [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3B		; D0 3B ; Branch if not equal to $D0, $3B [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $82.b,S		; A3 82 ; Load accumulator (stack relative) $82.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $80.b,X		; 94 80 ; Store Y register $80.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora $0D94C4.l		; 0F C4 94 0D ; OR accumulator with memory (long) $0D94C4.l [Writes: Accumulator] [Flags: NZ]
	sty $92.b,X		; 94 92 ; Store Y register $92.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and #$CC00.w		; 29 00 CC ; Logical AND #$CC00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($01.b)		; 92 01 ; Store accumulator (indirect) ($01.b) [Reads: Direct Page, Accumulator]
	ldy $019B.w		; AC 9B 01 ; Load $019B.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$A288.w		; A0 88 A2 ; Load #$A288.w into Y register [Writes: Y Index] [Flags: NZ]
	cpy #$A088.w		; C0 88 A0 ; Compare #$A088.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $B0, $92		; B0 92 ; Branch if carry set to $B0, $92 [Flow: branch]
	brk $94.b		; 00 94 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpy $C080.w		; CC 80 C0 ; Compare $C080.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp #$10E6.w		; C9 E6 10 ; Compare #$10E6.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	.db $62, $09, $BA		; 62 09 BA ; Push effective relative address $62, $09, $BA [Writes: Stack Pointer]
	asl $BA08.w		; 0E 08 BA ; Arithmetic shift left $BA08.w [Flags: NCZ]
	adc ($38.b,X)		; 61 38 ; Add with carry ($38.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $55.b,X		; 16 55 ; Arithmetic shift left $55.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor #$0510.w		; 49 10 05 ; Exclusive OR #$0510.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora $516888.l,X		; 1F 88 68 51 ; Logical OR long $516888.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $70, $33		; 70 33 ; Branch if overflow set to $70, $33 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	bit #$8830.w		; 89 30 88 ; Test bits #$8830.w with accumulator [Reads: Accumulator] [Flags: Z]
	inc $9E62.w,X		; FE 62 9E ; Increment memory $9E62.w,X [Reads: X Index] [Flags: NZ]
	jsr ($9E84.w,X)		; FC 84 9E ; Jump to subroutine indirect indexed ($9E84.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($9FE5.w,X)		; FC E5 9F ; Jump to subroutine indirect indexed ($9FE5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $9C42.w,X		; FD 42 9C ; Subtract with carry $9C42.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($6C.b,X)		; 21 6C ; Logical AND ($6C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $FF.b,X		; 56 FF ; Logical shift right $FF.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc $B8.b,S		; 63 B8 ; Add with carry (stack relative) $B8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	inc $B9C9.w,X		; FE C9 B9 ; Increment memory $B9C9.w,X [Reads: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sty $55.b,X		; 94 55 ; Store Y register $55.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	.db $50, $94		; 50 94 ; Branch if overflow clear to $50, $94 [Flow: branch]
	eor $28.b,X		; 55 28 ; Exclusive OR accumulator with memory $28.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda ($FE.b),Y		; B1 FE ; Load accumulator ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$FCFE.w		; C9 FE FC ; Compare #$FCFE.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $FD9E.w		; AC 9E FD ; Load $FD9E.w into Y register [Writes: Y Index] [Flags: NZ]
	jmp ($681F.w)		; 6C 1F 68 ; Jump indirect to ($681F.w) [Flow: jump]
	lda $66.b,X		; B5 66 ; Load $66.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $65.b,X		; B5 65 ; Load $65.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $69A7.w		; AC A7 69 ; Load $69A7.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $B0, $B0		; B0 B0 ; Branch if carry set to $B0, $B0 [Flow: branch]
	ldy $A0.b		; A4 A0 ; Load $A0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $D0.b		; A4 D0 ; Load $D0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ldy $BB.b		; A4 BB ; Load $BB.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp $E3.b,S		; C3 E3 ; Compare accumulator (stack relative) $E3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $50, $EC		; 50 EC ; Branch if overflow clear to $50, $EC [Flow: branch]
	lsr $A0.b,X		; 56 A0 ; Logical shift right $A0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $0956.w		; EC 56 09 ; Compare $0956.w with X register [Reads: X Index] [Flags: NCZ]
	ora ($A0.b,S),Y		; 13 A0 ; OR accumulator (stack relative indirect indexed) ($A0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora ($C0.b),Y		; 11 C0 ; OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($31.b),Y		; D1 31 ; Compare accumulator ($31.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $F7CDA1.l		; CF A1 CD F7 ; Compare accumulator (long) $F7CDA1.l [Reads: Accumulator] [Flags: NCZ]
	lda $1E.b,S		; A3 1E ; Load accumulator (stack relative) $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $5AFE.w,Y		; 59 FE 5A ; Exclusive OR accumulator with memory $5AFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $7AFE.w,Y		; 39 FE 7A ; AND accumulator with memory $7AFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $A2FE.w,Y		; 59 FE A2 ; Exclusive OR accumulator with memory $A2FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $D0FE.w,Y		; 39 FE D0 ; AND accumulator with memory $D0FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta ($A1.b)		; 92 A1 ; Store accumulator (indirect) ($A1.b) [Reads: Direct Page, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($68.b)		; 92 68 ; Store accumulator (indirect) ($68.b) [Reads: Direct Page, Accumulator]
	eor #$3092.w		; 49 92 30 ; Exclusive OR #$3092.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$4093.w		; A9 93 40 ; Load #$4093.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$6892.w		; A9 92 68 ; Load #$6892.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($93.b,X)		; 41 93 ; Exclusive OR accumulator with memory ($93.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $3682.w,X		; 1E 82 36 ; Arithmetic shift left $3682.w,X [Reads: X Index] [Flags: NCZ]
	sbc $1C22FF.l,X		; FF FF 22 1C ; Subtract with carry (long,X) $1C22FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$0D39.w		; 09 39 0D ; Logical OR #$0D39.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $0A61.w,X		; 3E 61 0A ; Rotate left $0A61.w,X [Reads: X Index] [Flags: NCZ]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($61.b)		; B2 61 ; Load accumulator (indirect) ($61.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0F11.w		; CD 11 0F ; Compare $0F11.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rol $C962.w,X		; 3E 62 C9 ; Rotate left $C962.w,X [Reads: X Index] [Flags: NCZ]
	inc $10.b		; E6 10 ; Increment $10.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	.db $62, $14, $3A		; 62 14 3A ; Push effective relative address $62, $14, $3A [Writes: Stack Pointer]
	ora $B115.w,Y		; 19 15 B1 ; OR accumulator with memory $B115.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora [$3F.b],Y		; 17 3F ; OR accumulator with memory (long indexed) [$3F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $14.b,S		; 63 14 ; Add with carry (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	adc $37.b,S		; 63 37 ; Add with carry (stack relative) $37.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $1EB403.l,X		; 1F 03 B4 1E ; Logical OR long $1EB403.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $CC.b,S		; 03 CC ; OR accumulator with stack relative $CC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $C81B.w,X		; 1E 1B C8 ; Arithmetic shift left $C81B.w,X [Reads: X Index] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	trb $3FDF.w		; 1C DF 3F ; Test and reset bits $3FDF.w [Reads: Accumulator] [Flags: Z]
	stz $DC.b		; 64 DC ; Store zero to $DC.b
	lda $4364.w,Y		; B9 64 43 ; Load $4364.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $DCC004.l,X		; DF 04 C0 DC ; Compare accumulator (long,X) $DCC004.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tsb $60.b		; 04 60 ; Test and set bits $60.b [Reads: Accumulator] [Flags: Z]
	ora $55.b,X		; 15 55 ; OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $10, $3A		; 10 3A ; Branch if plus to $10, $3A [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpx $0C3B.w		; EC 3B 0C ; Compare $0C3B.w with X register [Reads: X Index] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $8052EC.l,X		; 7F EC 52 80 ; Add long $8052EC.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$A012.w		; 09 12 A0 ; Logical OR #$A012.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $A1.b		; C5 A1 ; Compare $A1.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($12.b),Y		; D1 12 ; Compare accumulator ($12.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ldx #$F7CD.w		; A2 CD F7 ; Load #$F7CD.w into X register [Writes: X Index] [Flags: NZ]
	lda $FF.b,S		; A3 FF ; Load accumulator (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $9C42FD.l,X		; FF FD 42 9C ; Subtract with carry (long,X) $9C42FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $9C82.w,X		; FE 82 9C ; Increment memory $9C82.w,X [Reads: X Index] [Flags: NZ]
	sbc $20C7.w,X		; FD C7 20 ; Subtract with carry $20C7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $2027.w,X		; FE 27 20 ; Increment memory $2027.w,X [Reads: X Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	inc $8434.w,X		; FE 34 84 ; Increment memory $8434.w,X [Reads: X Index] [Flags: NZ]
	lda $34.b,S		; A3 34 ; Load accumulator (stack relative) $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$784C.w		; A2 4C 78 ; Load #$784C.w into X register [Writes: X Index] [Flags: NZ]
	lda ($4C.b,X)		; A1 4C ; Load accumulator ($4C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$8024.w		; A0 24 80 ; Load #$8024.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $10, $3C		; 10 3C ; Branch if plus to $10, $3C [Flow: branch]
	adc $306402.l		; 6F 02 64 30 ; Add with carry (long) $306402.l [Writes: Accumulator] [Flags: NCVZ]
	cmp ($78.b,X)		; C1 78 ; Compare accumulator ($78.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and ($7D.b,X)		; 21 7D ; Logical AND ($7D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rol $7FF9.w,X		; 3E F9 7F ; Rotate left $7FF9.w,X [Reads: X Index] [Flags: NCZ]
	.db $70, $F9		; 70 F9 ; Branch if overflow set to $70, $F9 [Flow: branch]
	and $2249.w		; 2D 49 22 ; Logical AND $2249.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $2259.w		; 2D 59 22 ; Logical AND $2259.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $6949.w		; 2C 49 69 ; Test bits $6949.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jmp $6949.w		; 4C 49 69 ; Jump to $6949.w [Flow: jump]
	ldy $6949.w		; AC 49 69 ; Load $6949.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $2249.w		; AD 49 22 ; Load $2249.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $2259.w		; AD 59 22 ; Load $2259.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $6949.w		; CC 49 69 ; Compare $6949.w with Y register [Reads: Y Index] [Flags: NCZ]
	mvn $0E,$6C		; 54 6C 0E ; Move block negative $0E,$6C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	bit $8C.b		; 24 8C ; Test bits $8C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $0DA054.l		; 0F 54 A0 0D ; OR accumulator with memory (long) $0DA054.l [Writes: Accumulator] [Flags: NZ]
	bit $01A7.w,X		; 3C A7 01 ; Test bits $01A7.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $87.b		; 24 87 ; Test bits $87.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $62, $5C, $87		; 62 5C 87 ; Push effective relative address $62, $5C, $87 [Writes: Stack Pointer]
	adc ($A4.b,X)		; 61 A4 ; Add with carry ($A4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $A3.b		; 84 A3 ; Store Y register to $A3.b [Reads: Y Index]
	ldy $98.b		; A4 98 ; Load $98.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx #$78BC.w		; A2 BC 78 ; Load #$78BC.w into X register [Writes: X Index] [Flags: NZ]
	lda ($BC.b,X)		; A1 BC ; Load accumulator ($BC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$8094.w		; A0 94 80 ; Load #$8094.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $10, $94		; 10 94 ; Branch if plus to $10, $94 [Flow: branch]
	sty $C40F.w		; 8C 0F C4 ; Store Y register to $C40F.w [Reads: Y Index]
	jmp ($C40E.w)		; 6C 0E C4 ; Jump indirect to ($C40E.w) [Flow: jump]
	ldy #$940D.w		; A0 0D 94 ; Load #$940D.w into Y register [Writes: Y Index] [Flags: NZ]
	sta [$62.b]		; 87 62 ; Store accumulator (long) [$62.b] [Reads: Direct Page, Accumulator]
	ldy $026F.w		; AC 6F 02 ; Load $026F.w into Y register [Writes: Y Index] [Flags: NZ]
	cpy $6187.w		; CC 87 61 ; Compare $6187.w with Y register [Reads: Y Index] [Flags: NCZ]
	ldy $01A7.w		; AC A7 01 ; Load $01A7.w into Y register [Writes: Y Index] [Flags: NZ]
	and $88.b,X		; 35 88 ; Logical AND $88.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$7D45.w		; C0 45 7D ; Compare #$7D45.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvn $60,$8A		; 54 8A 60 ; Move block negative $60,$8A [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	lda $88.b		; A5 88 ; Load $88.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$7DB5.w		; C0 B5 7D ; Compare #$7DB5.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy $8A.b		; C4 8A ; Compare $8A.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sta ($B8.b)		; 92 B8 ; Store accumulator (indirect) ($B8.b) [Reads: Direct Page, Accumulator]
	.db $B0, $8A		; B0 8A ; Branch if carry set to $B0, $8A [Flow: branch]
	lda $92B0.w,Y		; B9 B0 92 ; Load $92B0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $8E69.w,Y		; B9 69 8E ; Load $8E69.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $C240.w,Y		; B9 40 C2 ; Load $C240.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sec		; 38 ; Set carry flag [Flags: C]
	lda ($92.b)		; B2 92 ; Load accumulator (indirect) ($92.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $50, $B2		; 50 B2 ; Branch if overflow clear to $50, $B2 [Flow: branch]
	sta ($B0.b)		; 92 B0 ; Store accumulator (indirect) ($B0.b) [Reads: Direct Page, Accumulator]
.ACCU 16
.INDEX 16
	rep #$B9		; C2 B9
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($93.b)		; B2 93 ; Load accumulator (indirect) ($93.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$93B2.w		; C0 B2 93 ; Compare #$93B2.w with Y register [Reads: Y Index] [Flags: NCZ]
	adc ($B9.b,X)		; 61 B9 ; Add with carry ($B9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($99.b)		; 92 99 ; Store accumulator (indirect) ($99.b) [Reads: Direct Page, Accumulator]
	lda $6992.w,Y		; B9 92 69 ; Load $6992.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B8.b)		; B2 B8 ; Load accumulator (indirect) ($B8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $938D.w		; 20 8D 93 ; Jump to subroutine at $938D.w [Writes: Stack Pointer] [Flow: call]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sta $FE93.w		; 8D 93 FE ; Store accumulator to $FE93.w [Reads: Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $790A.w,X		; FD 0A 79 ; Subtract with carry $790A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($FBE1.w,X)		; FC E1 FB ; Jump to subroutine indirect indexed ($FBE1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $70, $EE		; 70 EE ; Branch if overflow set to $70, $EE [Flow: branch]
	adc ($80.b,X)		; 61 80 ; Add with carry ($80.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $2862.w		; EE 62 28 ; Increment $2862.w [Flags: NZ]
	and $B8.b,X		; 35 B8 ; Logical AND $B8.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $2D		; 30 2D ; Branch if minus to $30, $2D [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	jsr $B83D.w		; 20 3D B8 ; Jump to subroutine at $B83D.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and $D0B9.w		; 2D B9 D0 ; Logical AND $D0B9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $B9.b,X		; 35 B9 ; Logical AND $B9.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $24B9.w,X		; 3D B9 24 ; AND accumulator with memory $24B9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $2CB9.w,X		; BD B9 2C ; Load $2CB9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $B9.b		; C5 B9 ; Compare $B9.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	bit $CD.b,X		; 34 CD ; Test bits $CD.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	lda $D53C.w,Y		; B9 3C D5 ; Load $D53C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $C5D4.w,Y		; B9 D4 C5 ; Load $C5D4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cpy $B8CD.w		; CC CD B8 ; Compare $B8CD.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $D5.b		; C4 D5 ; Compare $D5.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sbc $3B18FF.l,X		; FF FF 18 3B ; Subtract with carry (long,X) $3B18FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $C219.w		; AC 19 C2 ; Load $C219.w into Y register [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cpy $AA23.w		; CC 23 AA ; Compare $AA23.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp #$A9C8.w		; C9 C8 A9 ; Compare #$A9C8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	and [$1F.b],Y		; 37 1F ; AND accumulator with memory (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $77.b		; C6 77 ; Decrement $77.b [Reads: Direct Page] [Flags: NZ]
	ora $1FADC6.l,X		; 1F C6 AD 1F ; Logical OR long $1FADC6.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $17.b		; C6 17 ; Decrement $17.b [Reads: Direct Page] [Flags: NZ]
	and $3FCDC6.l,X		; 3F C6 CD 3F ; AND accumulator with memory (long,X) $3FCDC6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $57.b		; C6 57 ; Decrement $57.b [Reads: Direct Page] [Flags: NZ]
	eor $5F97C6.l,X		; 5F C6 97 5F ; Exclusive OR accumulator with memory (long,X) $5F97C6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $17.b		; C6 17 ; Decrement $17.b [Reads: Direct Page] [Flags: NZ]
	adc $B017C6.l,X		; 7F C6 17 B0 ; Add long $B017C6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $43.b		; C6 43 ; Decrement $43.b [Reads: Direct Page] [Flags: NZ]
	ldx $57C6.w,Y		; BE C6 57 ; Load X register $57C6.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sta $CDC6.w,X		; 9D C6 CD ; Store accumulator to $CDC6.w,X [Reads: Accumulator, X Index]
	adc $9F83C6.l,X		; 7F C6 83 9F ; Add long $9F83C6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $C0.b		; C6 C0 ; Decrement $C0.b [Reads: Direct Page] [Flags: NZ]
	sta $B8CDC6.l,X		; 9F C6 CD B8 ; Store accumulator (long,X) $B8CDC6.l,X [Reads: Accumulator, X Index]
	dec $83.b		; C6 83 ; Decrement $83.b [Reads: Direct Page] [Flags: NZ]
	jmp.w [$B8C6]		; DC C6 B8 ; Jump long indirect [$B8C6] [Flow: jump]
	jmp.w [$F0C6]		; DC C6 F0 ; Jump long indirect [$F0C6] [Flow: jump]
	sbc $A12630.l,X		; FF 30 26 A1 ; Subtract with carry (long,X) $A12630.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $FFFF.w		; 0C FF FF ; Test and set bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	sbc $0900.w		; ED 00 09 ; Subtract $0900.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and $080D.w,Y		; 39 0D 08 ; AND accumulator with memory $080D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $C961.w,X		; 3E 61 C9 ; Rotate left $C961.w,X [Reads: X Index] [Flags: NCZ]
	ora ($0F.b)		; 12 0F ; OR accumulator with memory (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $42, $62		; 42 62 ; Reserved instruction
	bit $80.b		; 24 80 ; Test bits $80.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $0D9454.l		; 0F 54 94 0D ; OR accumulator with memory (long) $0D9454.l [Writes: Accumulator] [Flags: NZ]
	bit $019B.w,X		; 3C 9B 01 ; Test bits $019B.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $92.b		; 24 92 ; Test bits $92.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora ($5C.b,X)		; 01 5C ; Logical OR ($5C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($01.b)		; 92 01 ; Store accumulator (indirect) ($01.b) [Reads: Direct Page, Accumulator]
	sbc $02A9.w,X		; FD A9 02 ; Subtract with carry $02A9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $88		; 30 88 ; Branch if minus to $30, $88 [Flow: branch]
	ldx #$8850.w		; A2 50 88 ; Load #$8850.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$9240.w		; A0 40 92 ; Load #$9240.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	jmp $08C080.l		; 5C 80 C0 08 ; Jump long to $08C080.l [Flow: jump]
	eor ($65.b,X)		; 41 65 ; Exclusive OR accumulator with memory ($65.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($38E1.w,X)		; FC E1 38 ; Jump to subroutine indirect indexed ($38E1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $B809.w,X		; FD 09 B8 ; Subtract with carry $B809.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	.db $30, $66		; 30 66 ; Branch if minus to $30, $66 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	.db $50, $66		; 50 66 ; Branch if overflow clear to $50, $66 [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $5B.b,S		; 23 5B ; AND accumulator with stack relative $5B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $63.b,S		; 23 63 ; AND accumulator with stack relative $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and ($63.b,S),Y		; 33 63 ; AND accumulator (stack relative indirect indexed) ($63.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $63.b,S		; 43 63 ; Exclusive OR accumulator with stack relative $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor ($63.b,S),Y		; 53 63 ; XOR accumulator (stack relative indirect indexed) ($63.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sta $1D.b,X		; 95 1D ; Store accumulator to $1D.b,X [Reads: Accumulator, X Index]
	adc #$4995.w		; 69 95 49 ; Add #$4995.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$1E95.w		; 69 95 1E ; Add #$1E95.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $226A95.l		; 22 95 6A 22 ; Jump to subroutine long $226A95.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and $93.b,S		; 23 93 ; AND accumulator with stack relative $93.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor ($93.b,S),Y		; 53 93 ; XOR accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($60.b)		; 92 60 ; Store accumulator (indirect) ($60.b) [Reads: Direct Page, Accumulator]
	and ($92.b),Y		; 31 92 ; AND accumulator with memory ($92.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor ($92.b),Y		; 51 92 ; Exclusive OR accumulator with memory ($92.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $4A99.w,Y		; B9 99 4A ; Load $4A99.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $4A98.w,Y		; B9 98 4A ; Load $4A98.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $6AC5.w,Y		; B9 C5 6A ; Load $6AC5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $6949E9.l		; 22 E9 49 69 ; Jump to subroutine long $6949E9.l [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	adc $68.b		; 65 68 ; Add $68.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ror $20.b		; 66 20 ; Rotate right $20.b [Reads: Direct Page] [Flags: NCZ]
	nop		; EA ; No operation
	asl $31.b		; 06 31 ; Arithmetic shift left $31.b [Reads: Direct Page] [Flags: NCZ]
	cpy #$31B9.w		; C0 B9 31 ; Compare #$31B9.w with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda $CA28.w,Y		; B9 28 CA ; Load $CA28.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($50.b,S),Y		; 93 50 ; Store accumulator (stack relative indirect indexed) ($50.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta ($88.b,S),Y		; 93 88 ; Store accumulator (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	adc $98.b		; 65 98 ; Add $98.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta ($05.b,S),Y		; 93 05 ; Store accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ror $98.b		; 66 98 ; Rotate right $98.b [Reads: Direct Page] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $A0.b		; 06 A0 ; Arithmetic shift left $A0.b [Reads: Direct Page] [Flags: NCZ]
	sta $55.b,X		; 95 55 ; Store accumulator to $55.b,X [Reads: Accumulator, X Index]
	ldy #$56ED.w		; A0 ED 56 ; Load #$56ED.w into Y register [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $A3.b,S		; E3 A3 ; Subtract stack-relative $A3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and $A8D0.w,X		; 3D D0 A8 ; AND accumulator with memory $A8D0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $CDB0.w,X		; 3D B0 CD ; AND accumulator with memory $CDB0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($B1.b,S),Y		; 33 B1 ; AND accumulator (stack relative indirect indexed) ($B1.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $B1.b,X		; 34 B1 ; Test bits $B1.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	jmp.w [$B034]		; DC 34 B0 ; Jump long indirect [$B034] [Flow: jump]
	cpy $CC71.w		; CC 71 CC ; Compare $CC71.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $BD71.w		; CC 71 BD ; Compare $BD71.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp ($F9.b)		; D2 F9 ; Compare accumulator (indirect) ($F9.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora #$A012.w		; 09 12 A0 ; Logical OR #$A012.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $A213.w		; CD 13 A2 ; Compare $A213.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $62, $38, $80		; 62 38 80 ; Push effective relative address $62, $38, $80 [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC10E2.l,X		; FF E2 10 FC ; Subtract with carry (long,X) $FC10E2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($21.b)		; 12 21 ; OR accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $81.b		; 46 81 ; Logical shift right $81.b [Reads: Direct Page] [Flags: NCZ]
	sbc $02A1.w,X		; FD A1 02 ; Subtract with carry $02A1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $83A6.w,X		; FD A6 83 ; Subtract with carry $83A6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and ($C8.b),Y		; 31 C8 ; AND accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($48.b),Y		; 31 48 ; AND accumulator with memory ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($33.b),Y		; 31 33 ; AND accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $793731.l,X		; 3F 31 37 79 ; AND accumulator with memory (long,X) $793731.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($57.b),Y		; 31 57 ; AND accumulator with memory ($57.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $37.b,X		; 55 37 ; Exclusive OR accumulator with memory $37.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	eor ($62.b)		; 52 62 ; Exclusive OR accumulator with memory (indirect) ($62.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($110B.w,X)		; FC 0B 11 ; Jump to subroutine indirect indexed ($110B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($C0.b)		; 52 C0 ; Exclusive OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc $1C61FF.l,X		; FF FF 61 1C ; Subtract with carry (long,X) $1C61FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $33.b,X		; 34 33 ; Test bits $33.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora $29.b,S		; 03 29 ; OR accumulator with stack relative $29.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	adc $34.b,S		; 63 34 ; Add with carry (stack relative) $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	ldx $89.b		; A6 89 ; Load $89.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	jsr ($08A3.w,X)		; FC A3 08 ; Jump to subroutine indirect indexed ($08A3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $0CB3.w,X		; FD B3 0C ; Subtract with carry $0CB3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0E13.w,X		; FE 13 0E ; Increment memory $0E13.w,X [Reads: X Index] [Flags: NZ]
	sbc $8DB6.w,X		; FD B6 8D ; Subtract with carry $8DB6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $8F16.w,X		; FE 16 8F ; Increment memory $8F16.w,X [Reads: X Index] [Flags: NZ]
	inc $0CB3.w,X		; FE B3 0C ; Increment memory $0CB3.w,X [Reads: X Index] [Flags: NZ]
	cmp #$6432.w		; C9 32 64 ; Compare #$6432.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $046B.w		; AC 6B 04 ; Load $046B.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $348B26.l,X		; FF 26 8B 34 ; Subtract with carry (long,X) $348B26.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($03.b,S),Y		; 93 03 ; Store accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda $63.b,S		; A3 63 ; Load accumulator (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $C3.b,X		; 34 C3 ; Test bits $C3.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	ldy $FC09.w		; AC 09 FC ; Load $FC09.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$FD08.w		; A9 08 FD ; Load #$FD08.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $850C.w,Y		; B9 0C 85 ; Load $850C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($64.b),Y		; 91 64 ; Store accumulator ($64.b),Y [Reads: Direct Page, Y Index, Accumulator]
	jmp ($04C2.w)		; 6C C2 04 ; Jump indirect to ($04C2.w) [Flow: jump]
	inc $0B1C.w,X		; FE 1C 0B ; Increment memory $0B1C.w,X [Reads: X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sta ($03.b,S),Y		; 93 03 ; Store accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	inc $08B9.w,X		; FE B9 08 ; Increment memory $08B9.w,X [Reads: X Index] [Flags: NZ]
	lda $63A0.w		; AD A0 63 ; Load $63A0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	wai		; CB ; Wait for interrupt
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	ldy $2489.w,X		; BC 89 24 ; Load Y register $2489.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	bit $2722.w		; 2C 22 27 ; Test bits $2722.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	rol $2469.w		; 2E 69 24 ; Rotate left $2469.w [Flags: NCZ]
	jmp ($2669.w)		; 6C 69 26 ; Jump indirect to ($2669.w) [Flow: jump]
	adc $5722.w,Y		; 79 22 57 ; Add $5722.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $5469.w		; 2E 69 54 ; Rotate left $5469.w [Flags: NCZ]
	jmp ($6B69.w)		; 6C 69 6B ; Jump indirect to ($6B69.w) [Flow: jump]
	rol $6869.w		; 2E 69 68 ; Rotate left $6869.w [Flags: NCZ]
	jmp ($7069.w)		; 6C 69 70 ; Jump indirect to ($7069.w) [Flow: jump]
	bit $68B1.w		; 2C B1 68 ; Test bits $68B1.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $8822.w		; 2C 22 88 ; Test bits $8822.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $9722.w		; 2C 22 97 ; Test bits $9722.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	rol $9469.w		; 2E 69 94 ; Rotate left $9469.w [Flags: NCZ]
	jmp ($6A69.w)		; 6C 69 6A ; Jump indirect to ($6A69.w) [Flow: jump]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $B12CB0.l		; 22 B0 2C B1 ; Jump to subroutine long $B12CB0.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	bit $CC22.w		; 2C 22 CC ; Test bits $CC22.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $AB22.w		; 2C 22 AB ; Test bits $AB22.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	rol $CC69.w		; 2E 69 CC ; Rotate left $CC69.w [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $696CD8.l		; 22 D8 6C 69 ; Jump to subroutine long $696CD8.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jmp ($A969.w)		; 6C 69 A9 ; Jump indirect to ($A969.w) [Flow: jump]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sta $DB22.w		; 8D 22 DB ; Store accumulator to $DB22.w [Reads: Accumulator]
	stx $D869.w		; 8E 69 D8 ; Store X register to $D869.w [Reads: X Index]
	cpy $AA69.w		; CC 69 AA ; Compare $AA69.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $6A22.w,Y		; D9 22 6A ; Compare accumulator $6A22.w,Y [Reads: Y Index] [Flags: NCZ]
	sty $6822.w		; 8C 22 68 ; Store Y register to $6822.w [Reads: Y Index]
	stz $688C.w,X		; 9E 8C 68 ; Store zero to $688C.w,X [Reads: X Index]
	sty $8869.w		; 8C 69 88 ; Store Y register to $8869.w [Reads: Y Index]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cpy $69.b		; C4 69 ; Compare $69.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sta [$8E.b],Y		; 97 8E ; Store accumulator (long indexed) [$8E.b],Y [Reads: Direct Page, Y Index, Accumulator]
	adc #$8C24.w		; 69 24 8C ; Add #$8C24.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $698C24.l		; 22 24 8C 69 ; Jump to subroutine long $698C24.l [Writes: Stack Pointer] [Flow: call]
	bit $C4.b		; 24 C4 ; Test bits $C4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc #$D024.w		; 69 24 D0 ; Add #$D024.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $8B9E54.l		; 22 54 9E 8B ; Jump to subroutine long $8B9E54.l [Writes: Stack Pointer] [Flow: call]
	mvn $69,$8C		; 54 8C 69 ; Move block negative $69,$8C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $69,$C4		; 54 C4 69 ; Move block negative $69,$C4 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($83.b,S),Y		; B3 83 ; Load accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr ($31F9.w,X)		; FC F9 31 ; Jump to subroutine indirect indexed ($31F9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $F9C3.w,X		; 3C C3 F9 ; Test bits $F9C3.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $3354FF.l,X		; FF FF 54 33 ; Subtract with carry (long,X) $3354FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($6D.b,X)		; 01 6D ; Logical OR ($6D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $61.b		; 02 61 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $62, $94, $33		; 62 94 33 ; Push effective relative address $62, $94, $33 [Writes: Stack Pointer]
	ora ($AD.b,X)		; 01 AD ; Logical OR ($AD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $61.b		; 02 61 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp #$6202.w		; C9 02 62 ; Compare #$6202.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	mvn $02,$6B		; 54 6B 02 ; Move block negative $02,$6B [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp ($617B.w)		; 6C 7B 61 ; Jump indirect to ($617B.w) [Flow: jump]
	mvn $01,$93		; 54 93 01 ; Move block negative $01,$93 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $02,$C3		; 54 C3 02 ; Move block negative $02,$C3 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sty $7B.b		; 84 7B ; Store Y register to $7B.b [Reads: Y Index]
	.db $62, $94, $6B		; 62 94 6B ; Push effective relative address $62, $94, $6B [Writes: Stack Pointer]
	cop $D9.b		; 02 D9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($01.b),Y		; 91 01 ; Store accumulator ($01.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cmp $02C9.w,Y		; D9 C9 02 ; Compare accumulator $02C9.w,Y [Reads: Y Index] [Flags: NCZ]
	adc $3CFA9B.l,X		; 7F 9B FA 3C ; Add long $3CFA9B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $3833.w		; 4C 33 38 ; Jump to $3833.w [Flow: jump]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $38.b,X		; 34 38 ; Test bits $38.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	lsr $3834.w,X		; 5E 34 38 ; Logical shift right $3834.w,X [Reads: X Index] [Flags: NCZ]
	jmp $4C71.w		; 4C 71 4C ; Jump to $4C71.w [Flow: jump]
	jmp $4171.w		; 4C 71 41 ; Jump to $4171.w [Flow: jump]
	eor ($F9.b)		; 52 F9 ; Exclusive OR accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$33AC.w		; C0 AC 33 ; Compare #$33AC.w with Y register [Reads: Y Index] [Flags: NCZ]
	ldy $34AA.w,X		; BC AA 34 ; Load Y register $34AA.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy $34BE.w,X		; BC BE 34 ; Load Y register $34BE.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy $71AC.w,X		; BC AC 71 ; Load Y register $71AC.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $AC		; D0 AC ; Branch if not equal to $D0, $AC [Flow: branch]
	adc ($C5.b),Y		; 71 C5 ; Add with carry ($C5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($F9.b)		; B2 F9 ; Load accumulator (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $FFFE.w		; 4E FE FF ; Logical shift right $FFFE.w [Flags: NCZ]
	sbc $C63729.l,X		; FF 29 37 C6 ; Subtract with carry (long,X) $C63729.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $C6,$37		; 44 37 C6 ; Move block positive $C6,$37 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $C633.w		; 6D 33 C6 ; Add $C633.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $33.b		; 84 33 ; Store Y register to $33.b [Reads: Y Index]
	dec $6D.b		; C6 6D ; Decrement $6D.b [Reads: Direct Page] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dec $84.b		; C6 84 ; Decrement $84.b [Reads: Direct Page] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dec $C4.b		; C6 C4 ; Decrement $C4.b [Reads: Direct Page] [Flags: NZ]
	and ($C6.b,S),Y		; 33 C6 ; AND accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $C633.w		; AD 33 C6 ; Load $C633.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $C664.w		; AD 64 C6 ; Load $C664.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $64.b		; C4 64 ; Compare $64.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	dec $2D.b		; C6 2D ; Decrement $2D.b [Reads: Direct Page] [Flags: NZ]
	stx $C6.b,Y		; 96 C6 ; Store X register $C6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	and $C6BC.w		; 2D BC C6 ; Logical AND $C6BC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvp $C6,$96		; 44 96 C6 ; Move block positive $C6,$96 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $C6,$BC		; 44 BC C6 ; Move block positive $C6,$BC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $C692.w		; 6D 92 C6 ; Add $C692.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $92.b		; 84 92 ; Store Y register to $92.b [Reads: Y Index]
	dec $6D.b		; C6 6D ; Decrement $6D.b [Reads: Direct Page] [Flags: NZ]
	ldy $84C6.w,X		; BC C6 84 ; Load Y register $84C6.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy $ADC6.w,X		; BC C6 AD ; Load Y register $ADC6.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta ($C6.b,S),Y		; 93 C6 ; Store accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda $C6C8.w		; AD C8 C6 ; Load $C6C8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($C6.b,S),Y		; 93 C6 ; Store accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: NZ]
	sbc $711873.l,X		; FF 73 18 71 ; Subtract with carry (long,X) $711873.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $1C61FF.l,X		; FF FF 61 1C ; Subtract with carry (long,X) $1C61FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$6332.w		; 29 32 63 ; Logical AND #$6332.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $6B.b,X		; 34 6B ; Test bits $6B.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	ldx $89.b		; A6 89 ; Load $89.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sbc $0E13.w,X		; FD 13 0E ; Subtract with carry $0E13.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0CB3.w,X		; FD B3 0C ; Subtract with carry $0CB3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0E13.w,X		; FE 13 0E ; Increment memory $0E13.w,X [Reads: X Index] [Flags: NZ]
	sbc $8DB6.w,X		; FD B6 8D ; Subtract with carry $8DB6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $8F16.w,X		; FE 16 8F ; Increment memory $8F16.w,X [Reads: X Index] [Flags: NZ]
	ldy $0333.w		; AC 33 03 ; Load $0333.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $C90A23.l,X		; FF 23 0A C9 ; Subtract with carry (long,X) $C90A23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	stz $AC.b		; 64 AC ; Store zero to $AC.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	rol $8B.b		; 26 8B ; Rotate left $8B.b [Reads: Direct Page] [Flags: NCZ]
	and #$0390.w		; 29 90 03 ; Logical AND #$0390.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $0390.w		; 4C 90 03 ; Jump to $0390.w [Flow: jump]
	and #$04C8.w		; 29 C8 04 ; Logical AND #$04C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $04C8.w		; 4C C8 04 ; Jump to $04C8.w [Flow: jump]
	sbc $0CB9.w,X		; FD B9 0C ; Subtract with carry $0CB9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0E19.w,X		; FE 19 0E ; Increment memory $0E19.w,X [Reads: X Index] [Flags: NZ]
	adc $04C8.w		; 6D C8 04 ; Add $04C8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy $0393.w		; AC 93 03 ; Load $0393.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $C90A29.l,X		; FF 29 0A C9 ; Subtract with carry (long,X) $C90A29.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$AC64.w		; A0 64 AC ; Load #$AC64.w into Y register [Writes: Y Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	bit $308B.w		; 2C 8B 30 ; Test bits $308B.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $24B1.w		; 2C B1 24 ; Test bits $24B1.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $4822.w		; 2C 22 48 ; Test bits $4822.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $2422.w		; 2C 22 24 ; Test bits $2422.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jmp ($2469.w)		; 6C 69 24 ; Jump indirect to ($2469.w) [Flow: jump]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $692C54.l		; 22 54 2C 69 ; Jump to subroutine long $692C54.l [Writes: Stack Pointer] [Flow: call]
	eor $3C.b,X		; 55 3C ; Exclusive OR accumulator with memory $3C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	mvn $69,$6C		; 54 6C 69 ; Move block negative $69,$6C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora $708A.w,X		; 1D 8A 70 ; OR accumulator with memory $708A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $68B1.w		; 2C B1 68 ; Test bits $68B1.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $8822.w		; 2C 22 88 ; Test bits $8822.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $9522.w		; 2C 22 95 ; Test bits $9522.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $708A.w		; 2D 8A 70 ; Logical AND $708A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $B0, $68		; B0 68 ; Branch if carry set to $B0, $68 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $227888.l		; 22 88 78 22 ; Jump to subroutine long $227888.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rol $A869.w		; 2E 69 A8 ; Rotate left $A869.w [Flags: NCZ]
	jmp ($CC69.w)		; 6C 69 CC ; Jump indirect to ($CC69.w) [Flow: jump]
	bit $D822.w		; 2C 22 D8 ; Test bits $D822.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $CD69.w		; 2C 69 CD ; Test bits $CD69.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $696CD8.l		; 22 D8 6C 69 ; Jump to subroutine long $696CD8.l [Writes: Stack Pointer] [Flow: call]
	cmp $228C.w		; CD 8C 22 ; Compare $228C.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sty $A869.w		; 8C 69 A8 ; Store Y register to $A869.w [Reads: Y Index]
	sty $A869.w		; 8C 69 A8 ; Store Y register to $A869.w [Reads: Y Index]
	cpy $D869.w		; CC 69 D8 ; Compare $D869.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $CC69.w		; CC 69 CC ; Compare $CC69.w with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsl $B18C70.l		; 22 70 8C B1 ; Jump to subroutine long $B18C70.l [Writes: Stack Pointer] [Flow: call]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $9422.w		; [PATTERN: Memory clearing operation] 8C 22 94 ; Store Y register to $9422.w [Reads: Y Index]
	cpy $6869.w		; CC 69 68 ; Compare $6869.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $A969.w		; CC 69 A9 ; Compare $A969.w with Y register [Reads: Y Index] [Flags: NCZ]
	stz $958C.w		; 9C 8C 95 ; Store zero to $958C.w
	stz $688B.w		; 9C 8B 68 ; Store zero to $688B.w
	ldx $8C.b		; A6 8C ; Load $8C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	mvn $8B,$A6		; 54 A6 8B ; Move block negative $8B,$A6 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $8D.b,X		; 55 8D ; Exclusive OR accumulator with memory $8D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $698E68.l		; 22 68 8E 69 ; Jump to subroutine long $698E68.l [Writes: Stack Pointer] [Flow: call]
	mvn $69,$8E		; 54 8E 69 ; Move block negative $69,$8E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $69,$CC		; 54 CC 69 ; Move block negative $69,$CC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	bit $8C.b		; 24 8C ; Test bits $8C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc #$9C25.w		; 69 25 9C ; Add #$9C25.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $CC24.w		; 8C 24 CC ; Store Y register to $CC24.w [Reads: Y Index]
	adc #$D926.w		; 69 26 D9 ; Add #$D926.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $FA2373.l		; 22 73 23 FA ; Jump to subroutine long $FA2373.l [Writes: Stack Pointer] [Flow: call]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $FA.b,S		; 83 FA ; Store accumulator (stack relative) $FA.b,S [Reads: Stack Pointer, Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ldy #$1B34.w		; A0 34 1B ; Load #$1B34.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $90, $33		; 90 33 ; Branch if carry clear to $90, $33 [Flow: branch]
	eor $F996.w,X		; 5D 96 F9 ; Exclusive OR accumulator with memory $F996.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $F96B.w,X		; 3C 6B F9 ; Test bits $F96B.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ldy $6B.b,X		; B4 6B ; Load Y register $6B.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$6102.w		; 29 02 61 ; Logical AND #$6102.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $02.b		; 45 02 ; Exclusive OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $54, $33		; 62 54 33 ; Push effective relative address $62, $54, $33 [Writes: Stack Pointer]
	ora ($6D.b,X)		; 01 6D ; Logical OR ($6D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $61.b		; 02 61 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $62, $94, $33		; 62 94 33 ; Push effective relative address $62, $94, $33 [Writes: Stack Pointer]
	ora ($54.b,X)		; 01 54 ; Logical OR ($54.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $6C.b		; 02 6C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($54.b,X)		; 61 54 ; Add with carry ($54.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($01.b,S),Y		; 93 01 ; Store accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora ($91.b,X)		; 01 91 ; Logical OR ($91.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$5402.w		; C9 02 54 ; Compare #$5402.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	wai		; CB ; Wait for interrupt
	cop $94.b		; 02 94 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	wai		; CB ; Wait for interrupt
	cop $94.b		; 02 94 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($01.b,S),Y		; 93 01 ; Store accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sty $7B.b		; 84 7B ; Store Y register to $7B.b [Reads: Y Index]
	.db $62, $94, $6B		; 62 94 6B ; Push effective relative address $62, $94, $6B [Writes: Stack Pointer]
	cop $7B.b		; 02 7B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FFFE.w		; 4E FE FF ; Logical shift right $FFFE.w [Flags: NCZ]
	sbc $C6332D.l,X		; FF 2D 33 C6 ; Subtract with carry (long,X) $C6332D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $C6,$33		; 44 33 C6 ; Move block positive $C6,$33 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and $C664.w		; 2D 64 C6 ; Logical AND $C664.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvp $C6,$64		; 44 64 C6 ; Move block positive $C6,$64 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $C633.w		; 6D 33 C6 ; Add $C633.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $33.b		; 84 33 ; Store Y register to $33.b [Reads: Y Index]
	dec $6D.b		; C6 6D ; Decrement $6D.b [Reads: Direct Page] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dec $84.b		; C6 84 ; Decrement $84.b [Reads: Direct Page] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dec $AD.b		; C6 AD ; Decrement $AD.b [Reads: Direct Page] [Flags: NZ]
	and [$C6.b],Y		; 37 C6 ; AND accumulator with memory (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy $37.b		; C4 37 ; Compare $37.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	dec $29.b		; C6 29 ; Decrement $29.b [Reads: Direct Page] [Flags: NZ]
	sta [$C6.b],Y		; 97 C6 ; Store accumulator (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index, Accumulator]
	mvp $C6,$97		; 44 97 C6 ; Move block positive $C6,$97 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $C693.w		; 6D 93 C6 ; Add $C693.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $93.b		; 84 93 ; Store Y register to $93.b [Reads: Y Index]
	dec $6D.b		; C6 6D ; Decrement $6D.b [Reads: Direct Page] [Flags: NZ]
	cpy $C6.b		; C4 C6 ; Compare $C6.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sty $C4.b		; 84 C4 ; Store Y register to $C4.b [Reads: Y Index]
	dec $AD.b		; C6 AD ; Decrement $AD.b [Reads: Direct Page] [Flags: NZ]
	sta [$C6.b],Y		; 97 C6 ; Store accumulator (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cpy $97.b		; C4 97 ; Compare $97.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: NZ]
	sbc $FF0012.l,X		; FF 12 00 FF ; Subtract with carry (long,X) $FF0012.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $341C61.l,X		; FF 61 1C 34 ; Subtract with carry (long,X) $341C61.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($03.b,S),Y		; 33 03 ; AND accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($08A3.w,X)		; FC A3 08 ; Jump to subroutine indirect indexed ($08A3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and #$6342.w		; 29 42 63 ; Logical AND #$6342.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $8F16.w,X		; FD 16 8F ; Subtract with carry $8F16.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $0330.w		; 6D 30 03 ; Add $0330.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $0468.w		; 6D 68 04 ; Add $0468.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda $0330.w		; AD 30 03 ; Load $0330.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $8D.b,Y		; B6 8D ; Load X register $8D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sbc $298F26.l,X		; FF 26 8F 29 ; Subtract with carry (long,X) $298F26.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($63.b)		; 92 63 ; Store accumulator (indirect) ($63.b) [Reads: Direct Page, Accumulator]
	bit $CB.b,X		; 34 CB ; Test bits $CB.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	ldy $FD89.w		; AC 89 FD ; Load $FD89.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $6C0E.w,Y		; 19 0E 6C ; OR accumulator with memory $6C0E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($03.b)		; 92 03 ; Store accumulator (indirect) ($03.b) [Reads: Direct Page, Accumulator]
	inc $0A19.w,X		; FE 19 0A ; Increment memory $0A19.w,X [Reads: X Index] [Flags: NZ]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	stz $FD.b		; 64 FD ; Store zero to $FD.b
	ldy $AE8D.w,X		; BC 8D AE ; Load Y register $AE8D.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $90, $63		; 90 63 ; Branch if carry clear to $90, $63 [Flow: branch]
	sbc $FF0E29.l,X		; FF 29 0E FF ; Subtract with carry (long,X) $FF0E29.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $248F.w		; 2C 8F 24 ; Test bits $248F.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $2722.w		; 2D 22 27 ; Logical AND $2722.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol $2469.w		; 2E 69 24 ; Rotate left $2469.w [Flags: NCZ]
	jmp ($2669.w)		; 6C 69 26 ; Jump indirect to ($2669.w) [Flow: jump]
	adc $5422.w,Y		; 79 22 54 ; Add $5422.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $5469.w		; 2E 69 54 ; Rotate left $5469.w [Flags: NCZ]
	mvp $54,$8B		; 44 8B 54 ; Move block positive $54,$8B [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ror $69.b		; 66 69 ; Rotate right $69.b [Reads: Direct Page] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ror $69.b		; 66 69 ; Rotate right $69.b [Reads: Direct Page] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rol $6869.w		; 2E 69 68 ; Rotate left $6869.w [Flags: NCZ]
	mvp $97,$8C		; 44 8C 97 ; Move block positive $97,$8C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	rol $9469.w		; 2E 69 94 ; Rotate left $9469.w [Flags: NCZ]
	jmp ($A869.w)		; 6C 69 A8 ; Jump indirect to ($A869.w) [Flow: jump]
	ora $AB69.w,X		; 1D 69 AB ; OR accumulator with memory $AB69.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $BCAA8A.l		; 2F 8A AA BC ; AND accumulator with memory (long) $BCAA8A.l [Writes: Accumulator] [Flags: NZ]
	adc #$2EDB.w		; 69 DB 2E ; Add #$2EDB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$6CD8.w		; 69 D8 6C ; Add #$6CD8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$78B0.w		; 69 B0 78 ; Add #$78B0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $A8		; B0 A8 ; Branch if carry set to $B0, $A8 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $2278CC.l		; 22 CC 78 22 ; Jump to subroutine long $2278CC.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $8C		; B0 8C ; Branch if carry set to $B0, $8C [Flow: branch]
	lda ($A8.b),Y		; B1 A8 ; Load accumulator ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sty $CC22.w		; 8C 22 CC ; Store Y register to $CC22.w [Reads: Y Index]
	sty $D922.w		; 8C 22 D9 ; Store Y register to $D922.w [Reads: Y Index]
	stz $D88B.w		; 9C 8B D8 ; Store zero to $D88B.w
	sty $D869.w		; 8C 69 D8 ; Store Y register to $D869.w [Reads: Y Index]
	cpy $AA69.w		; CC 69 AA ; Compare $AA69.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $8422.w,Y		; D9 22 84 ; Compare accumulator $8422.w,Y [Reads: Y Index] [Flags: NCZ]
	sta $9722.w		; 8D 22 97 ; Store accumulator to $9722.w [Reads: Accumulator]
	stx $9469.w		; 8E 69 94 ; Store X register to $9469.w [Reads: X Index]
	cpy $7069.w		; CC 69 70 ; Compare $7069.w with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	.db $B0, $88		; B0 88 ; Branch if carry set to $B0, $88 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsl $22D868.l		; 22 68 D8 22 ; Jump to subroutine long $22D868.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stx $6869.w		; 8E 69 68 ; Store X register to $6869.w [Reads: X Index]
	cpy $2669.w		; CC 69 26 ; Compare $2669.w with Y register [Reads: Y Index] [Flags: NCZ]
	sta $5422.w		; 8D 22 54 ; Store accumulator to $5422.w [Reads: Accumulator]
	stx $5722.w		; 8E 22 57 ; Store X register to $5722.w [Reads: X Index]
	stx $5469.w		; 8E 69 54 ; Store X register to $5469.w [Reads: X Index]
	cpy $2469.w		; CC 69 24 ; Compare $2469.w with Y register [Reads: Y Index] [Flags: NCZ]
	sty $2469.w		; 8C 69 24 ; Store Y register to $2469.w [Reads: Y Index]
	cpy $2469.w		; CC 69 24 ; Compare $2469.w with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsl $31D3FE.l		; 22 FE D3 31 ; Jump to subroutine long $31D3FE.l [Writes: Stack Pointer] [Flow: call]
	sbc $31D9.w,X		; FD D9 31 ; Subtract with carry $31D9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $23.b,S		; A3 23 ; Load accumulator (stack relative) $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($83.b,S),Y		; B3 83 ; Load accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($E3.b,S),Y		; B3 E3 ; Load accumulator (stack relative indirect indexed) ($E3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $E3.b,S		; A3 E3 ; Load accumulator (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $90, $33		; 90 33 ; Branch if carry clear to $90, $33 [Flow: branch]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ldy #$5D34.w		; A0 34 5D ; Load #$5D34.w into Y register [Writes: Y Index] [Flags: NZ]
	stx $F9.b,Y		; 96 F9 ; Store X register $F9.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sbc $3354FF.l,X		; FF FF 54 33 ; Subtract with carry (long,X) $3354FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($94.b,X)		; 01 94 ; Logical OR ($94.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($01.b,S),Y		; 33 01 ; AND accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $0131.w,Y		; D9 31 01 ; Compare accumulator $0131.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $0269.w,Y		; D9 69 02 ; Compare accumulator $0269.w,Y [Reads: Y Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $D9, $91		; 62 D9 91 ; Push effective relative address $62, $D9, $91 [Writes: Stack Pointer]
	ora ($D9.b,X)		; 01 D9 ; Logical OR ($D9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp #$C902.w		; C9 02 C9 ; Compare #$C902.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $AD62.w,Y		; D9 62 AD ; Compare accumulator $AD62.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $AC61.w,Y		; D9 61 AC ; Compare accumulator $AC61.w,Y [Reads: Y Index] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($94.b,X)		; 61 94 ; Add with carry ($94.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $54.b		; 02 54 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $44.b		; 02 44 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $54, $93		; 62 54 93 ; Push effective relative address $62, $54, $93 [Writes: Stack Pointer]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp $6D62.w,Y		; D9 62 6D ; Compare accumulator $6D62.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $5461.w,Y		; D9 61 54 ; Compare accumulator $5461.w,Y [Reads: Y Index] [Flags: NCZ]
	wai		; CB ; Wait for interrupt
	cop $28.b		; 02 28 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($BB.b,X)		; 61 BB ; Add with carry ($BB.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $FFFE.w		; 4E FE FF ; Logical shift right $FFFE.w [Flags: NCZ]
	sbc $C63729.l,X		; FF 29 37 C6 ; Subtract with carry (long,X) $C63729.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $C6,$37		; 44 37 C6 ; Move block positive $C6,$37 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and #$C668.w		; 29 68 C6 ; Logical AND #$C668.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvp $C6,$68		; 44 68 C6 ; Move block positive $C6,$68 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $C637.w		; 6D 37 C6 ; Add $C637.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $37.b		; 84 37 ; Store Y register to $37.b [Reads: Y Index]
	dec $AD.b		; C6 AD ; Decrement $AD.b [Reads: Direct Page] [Flags: NZ]
	and [$C6.b],Y		; 37 C6 ; AND accumulator with memory (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and [$C6.b],Y		; 37 C6 ; AND accumulator with memory (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $C668.w		; AD 68 C6 ; Load $C668.w into accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dec $2D.b		; C6 2D ; Decrement $2D.b [Reads: Direct Page] [Flags: NZ]
	sta ($C6.b,S),Y		; 93 C6 ; Store accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	mvp $C6,$93		; 44 93 C6 ; Move block positive $C6,$93 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and $C6C4.w		; 2D C4 C6 ; Logical AND $C6C4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvp $C6,$C4		; 44 C4 C6 ; Move block positive $C6,$C4 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $C697.w		; 6D 97 C6 ; Add $C697.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $97.b		; 84 97 ; Store Y register to $97.b [Reads: Y Index]
	dec $6D.b		; C6 6D ; Decrement $6D.b [Reads: Direct Page] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $84.b		; C6 84 ; Decrement $84.b [Reads: Direct Page] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $AD.b		; C6 AD ; Decrement $AD.b [Reads: Direct Page] [Flags: NZ]
	sta ($C6.b,S),Y		; 93 C6 ; Store accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($C6.b,S),Y		; 93 C6 ; Store accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda $C6C8.w		; AD C8 C6 ; Load $C6C8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $F0.b		; C6 F0 ; Decrement $F0.b [Reads: Direct Page] [Flags: NZ]
	sbc $FF2873.l,X		; FF 73 28 FF ; Subtract with carry (long,X) $FF2873.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $291C61.l,X		; FF 61 1C 29 ; Subtract with carry (long,X) $291C61.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	jmp $0330.w		; 4C 30 03 ; Jump to $0330.w [Flow: jump]
	jsr ($8DA6.w,X)		; FC A6 8D ; Jump to subroutine indirect indexed ($8DA6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $8F16.w,X		; FD 16 8F ; Subtract with carry $8F16.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $0330.w		; 6D 30 03 ; Add $0330.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $0468.w		; 6D 68 04 ; Add $0468.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy $0333.w		; AC 33 03 ; Load $0333.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $C90A23.l,X		; FF 23 0A C9 ; Subtract with carry (long,X) $C90A23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $42, $64		; 42 64 ; Reserved instruction
	inc $8DB6.w,X		; FE B6 8D ; Increment memory $8DB6.w,X [Reads: X Index] [Flags: NZ]
	jsr ($0CA9.w,X)		; FC A9 0C ; Jump to subroutine indirect indexed ($0CA9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $0E19.w,X		; FD 19 0E ; Subtract with carry $0E19.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($8DAC.w,X)		; FC AC 8D ; Jump to subroutine indirect indexed ($8DAC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $8F1C.w,X		; FD 1C 8F ; Subtract with carry $8F1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($0392.w)		; 6C 92 03 ; Jump indirect to ($0392.w) [Flow: jump]
	inc $0A19.w,X		; FE 19 0A ; Increment memory $0A19.w,X [Reads: X Index] [Flags: NZ]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	stz $FD.b		; 64 FD ; Store zero to $FD.b
	ldy $AD8D.w,X		; BC 8D AD ; Load Y register $AD8D.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta ($63.b)		; 92 63 ; Store accumulator (indirect) ($63.b) [Reads: Direct Page, Accumulator]
	inc $89BC.w,X		; FE BC 89 ; Increment memory $89BC.w,X [Reads: X Index] [Flags: NZ]
	sbc $C98B2C.l,X		; FF 2C 8B C9 ; Subtract with carry (long,X) $C98B2C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($64.b)		; 92 64 ; Store accumulator (indirect) ($64.b) [Reads: Direct Page, Accumulator]
	and [$2E.b]		; 27 2E ; AND accumulator with memory (long) [$2E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$6C24.w		; 69 24 6C ; Add #$6C24.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$1D54.w		; 69 54 1D ; Add #$1D54.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$2F57.w		; 69 57 2F ; Add #$2F57.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $79.b		; 26 79 ; Rotate left $79.b [Reads: Direct Page] [Flags: NCZ]
	jsl $692E6B.l		; 22 6B 2E 69 ; Jump to subroutine long $692E6B.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jmp ($6869.w)		; 6C 69 68 ; Jump indirect to ($6869.w) [Flow: jump]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	adc #$8C68.w		; 69 68 8C ; Add #$8C68.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$2E97.w		; 69 97 2E ; Add #$2E97.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$6C94.w		; 69 94 6C ; Add #$6C94.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$2CA8.w		; 69 A8 2C ; Add #$2CA8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$3CA9.w		; 69 A9 3C ; Add #$3CA9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $6CA8.w		; 8C A8 6C ; Store Y register to $6CA8.w [Reads: Y Index]
	adc #$1CD9.w		; 69 D9 1C ; Add #$1CD9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$2CCC.w		; 69 CC 2C ; Add #$2CCC.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $B078B0.l		; 22 B0 78 B0 ; Jump to subroutine long $B078B0.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $2278CC.l		; 22 CC 78 22 ; Jump to subroutine long $2278CC.l [Writes: Stack Pointer] [Flow: call]
	rol $8D.b		; 26 8D ; Rotate left $8D.b [Reads: Direct Page] [Flags: NCZ]
	jsl $698E27.l		; 22 27 8E 69 ; Jump to subroutine long $698E27.l [Writes: Stack Pointer] [Flow: call]
	bit $CC.b		; 24 CC ; Test bits $CC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc #$BC56.w		; 69 56 BC ; Add #$BC56.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$D926.w		; 69 26 D9 ; Add #$D926.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $8C9C69.l		; 22 69 9C 8C ; Jump to subroutine long $8C9C69.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cpy $6A69.w		; CC 69 6A ; Compare $6A69.w with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsl $228D84.l		; 22 84 8D 22 ; Jump to subroutine long $228D84.l [Writes: Stack Pointer] [Flow: call]
	sta [$8E.b],Y		; 97 8E ; Store accumulator (long indexed) [$8E.b],Y [Reads: Direct Page, Y Index, Accumulator]
	adc #$CC94.w		; 69 94 CC ; Add #$CC94.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$8EAB.w		; 69 AB 8E ; Add #$8EAB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$CCA8.w		; 69 A8 CC ; Add #$CCA8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$8CB0.w		; 69 B0 8C ; Add #$8CB0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda ($A8.b),Y		; B1 A8 ; Load accumulator ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sty $CC22.w		; 8C 22 CC ; Store Y register to $CC22.w [Reads: Y Index]
	sty $A822.w		; 8C 22 A8 ; Store Y register to $A822.w [Reads: Y Index]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsl $698EDB.l		; 22 DB 8E 69 ; Jump to subroutine long $698EDB.l [Writes: Stack Pointer] [Flow: call]
	cmp $69CC.w,Y		; D9 CC 69 ; Compare accumulator $69CC.w,Y [Reads: Y Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp $E322.w,Y		; D9 22 E3 ; Compare accumulator $E322.w,Y [Reads: Y Index] [Flags: NCZ]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $31D9.w,X		; FD D9 31 ; Subtract with carry $31D9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	wai		; CB ; Wait for interrupt
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($31.b,X)		; 01 31 ; Logical OR ($31.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($54.b,X)		; 01 54 ; Logical OR ($54.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($01.b,S),Y		; 33 01 ; AND accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $33.b,X		; 94 33 ; Store Y register $33.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $AC, $7B		; 62 AC 7B ; Push effective relative address $62, $AC, $7B [Writes: Stack Pointer]
	adc ($94.b,X)		; 61 94 ; Add with carry ($94.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $54.b		; 02 54 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $44.b		; 02 44 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $54, $93		; 62 54 93 ; Push effective relative address $62, $54, $93 [Writes: Stack Pointer]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp $6D62.w,Y		; D9 62 6D ; Compare accumulator $6D62.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $5461.w,Y		; D9 61 54 ; Compare accumulator $5461.w,Y [Reads: Y Index] [Flags: NCZ]
	wai		; CB ; Wait for interrupt
	cop $45.b		; 02 45 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $2962.w,Y		; D9 62 29 ; Compare accumulator $2962.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $0161.w,Y		; D9 61 01 ; Compare accumulator $0161.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp #$0102.w		; C9 02 01 ; Compare #$0102.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta ($01.b),Y		; 91 01 ; Store accumulator ($01.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($01.b,X)		; 61 01 ; Add with carry ($01.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$7B02.w		; 69 02 7B ; Add #$7B02.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lsr $3BFE.w		; 4E FE 3B ; Logical shift right $3BFE.w [Flags: NCZ]
	ldx $FFFE.w		; AE FE FF ; Load $FFFE.w into X register [Writes: X Index] [Flags: NZ]
	sbc $C63729.l,X		; FF 29 37 C6 ; Subtract with carry (long,X) $C63729.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $C6,$37		; 44 37 C6 ; Move block positive $C6,$37 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and #$C668.w		; 29 68 C6 ; Logical AND #$C668.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvp $C6,$68		; 44 68 C6 ; Move block positive $C6,$68 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $C637.w		; 6D 37 C6 ; Add $C637.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $37.b		; 84 37 ; Store Y register to $37.b [Reads: Y Index]
	dec $AD.b		; C6 AD ; Decrement $AD.b [Reads: Direct Page] [Flags: NZ]
	and [$C6.b],Y		; 37 C6 ; AND accumulator with memory (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy $37.b		; C4 37 ; Compare $37.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	dec $AD.b		; C6 AD ; Decrement $AD.b [Reads: Direct Page] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dec $C4.b		; C6 C4 ; Decrement $C4.b [Reads: Direct Page] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dec $AD.b		; C6 AD ; Decrement $AD.b [Reads: Direct Page] [Flags: NZ]
	sta ($C6.b,S),Y		; 93 C6 ; Store accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($C6.b,S),Y		; 93 C6 ; Store accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda $C6C8.w		; AD C8 C6 ; Load $C6C8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $6D.b		; C6 6D ; Decrement $6D.b [Reads: Direct Page] [Flags: NZ]
	sta [$C6.b],Y		; 97 C6 ; Store accumulator (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sty $97.b		; 84 97 ; Store Y register to $97.b [Reads: Y Index]
	dec $6D.b		; C6 6D ; Decrement $6D.b [Reads: Direct Page] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $84.b		; C6 84 ; Decrement $84.b [Reads: Direct Page] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $29.b		; C6 29 ; Decrement $29.b [Reads: Direct Page] [Flags: NZ]
	sta ($C6.b,S),Y		; 93 C6 ; Store accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	mvp $C6,$93		; 44 93 C6 ; Move block positive $C6,$93 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and #$C6C8.w		; 29 C8 C6 ; Logical AND #$C6C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvp $C6,$C8		; 44 C8 C6 ; Move block positive $C6,$C8 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr $001E.w		; 20 1E 00 ; Jump to subroutine at $001E.w [Writes: Stack Pointer] [Flow: call]
	rol $2812.w		; 2E 12 28 ; Rotate left $2812.w [Flags: NCZ]
	sbc $0CE1FF.l,X		; FF FF E1 0C ; Subtract with carry (long,X) $0CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0081.w,X)		; FC 81 00 ; Jump to subroutine indirect indexed ($0081.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($22.b,X)		; 61 22 ; Add with carry ($22.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $FD81.w		; 8E 81 FD ; Store X register to $FD81.w [Reads: X Index]
	eor ($02.b,X)		; 41 02 ; Exclusive OR accumulator with memory ($02.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $22		; 50 22 ; Branch if overflow clear to $50, $22 [Flow: branch]
	.db $62, $FD, $43		; 62 FD 43 ; Push effective relative address $62, $FD, $43 [Writes: Stack Pointer]
	asl $60.b		; 06 60 ; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: NCZ]
	and ($01.b),Y		; 31 01 ; AND accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $02A3.w,X		; FD A3 02 ; Subtract with carry $02A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $83A4.w,X		; FD A4 83 ; Subtract with carry $83A4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor #$FD02.w		; 49 02 FD ; Exclusive OR #$FD02.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvp $52,$87		; 44 87 52 ; Move block positive $52,$87 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	.db $62, $FD, $4B		; 62 FD 4B ; Push effective relative address $62, $FD, $4B [Writes: Stack Pointer]
	asl $60.b		; 06 60 ; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: NCZ]
	lda ($01.b),Y		; B1 01 ; Load accumulator ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $02AB.w,X		; FD AB 02 ; Subtract with carry $02AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $83AC.w,X		; FD AC 83 ; Subtract with carry $83AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$FD02.w		; C9 02 FD ; Compare #$FD02.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	jmp $5087.w		; 4C 87 50 ; Jump to $5087.w [Flow: jump]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FD, $4E		; 62 FD 4E ; Push effective relative address $62, $FD, $4E [Writes: Stack Pointer]
	sta $2C.b,S		; 83 2C ; Store accumulator (stack relative) $2C.b,S [Reads: Stack Pointer, Accumulator]
	trb $4C38.w		; 1C 38 4C ; Test and reset bits $4C38.w [Reads: Accumulator] [Flags: Z]
	trb $2D38.w		; 1C 38 2D ; Test and reset bits $2D38.w [Reads: Accumulator] [Flags: Z]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $2D.b,X		; 34 2D ; Test bits $2D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	and $2F44E4.l		; 2F E4 44 2F ; AND accumulator with memory (long) $2F44E4.l [Writes: Accumulator] [Flags: NZ]
	cpx $2D.b		; E4 2D ; Compare $2D.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	adc $6F44E4.l		; 6F E4 44 6F ; Add with carry (long) $6F44E4.l [Writes: Accumulator] [Flags: NCVZ]
	cpx $2D.b		; E4 2D ; Compare $2D.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $AF44E4.l		; AF E4 44 AF ; Load long $AF44E4.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx $4C.b		; E4 4C ; Compare $4C.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	mvn $2C,$38		; 54 38 2C ; Move block negative $2C,$38 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $70, $38		; 70 38 ; Branch if overflow set to $70, $38 [Flow: branch]
	bit $74.b,X		; 34 74 ; Test bits $74.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	dec $9044.w,X		; DE 44 90 ; Decrement memory $9044.w,X [Reads: X Index] [Flags: NZ]
	dec $8C4C.w,X		; DE 4C 8C ; Decrement memory $8C4C.w,X [Reads: X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $38A8.w		; 2C A8 38 ; Test bits $38A8.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $4CDEE4.l		; 2F E4 DE 4C ; AND accumulator with memory (long) $4CDEE4.l [Writes: Accumulator] [Flags: NZ]
	cpx $DE.b		; E4 DE ; Compare $DE.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	mvn $92,$41		; 54 41 92 ; Move block negative $92,$41 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $93,$C1		; 54 C1 93 ; Move block negative $93,$C1 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sty $30.b,X		; 94 30 ; Store Y register $30.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	eor $4C94.w,X		; 5D 94 4C ; Exclusive OR accumulator with memory $4C94.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $3EC4.w,X		; 5D C4 3E ; Exclusive OR accumulator with memory $3EC4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($CC.b)		; 92 CC ; Store accumulator (indirect) ($CC.b) [Reads: Direct Page, Accumulator]
	rol $AC92.w,X		; 3E 92 AC ; Rotate left $AC92.w,X [Reads: X Index] [Flags: NCZ]
	rol $B492.w,X		; 3E 92 B4 ; Rotate left $B492.w,X [Reads: X Index] [Flags: NCZ]
	rol $BD92.w,X		; 3E 92 BD ; Rotate left $BD92.w,X [Reads: X Index] [Flags: NCZ]
	.db $30, $88		; 30 88 ; Branch if minus to $30, $88 [Flow: branch]
	pei ($30.b)		; D4 30 ; Push effective indirect address ($30.b) [Reads: Direct Page] [Writes: Stack Pointer]
	eor $4CD4.w,X		; 5D D4 4C ; Exclusive OR accumulator with memory $4CD4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A3B0.w,X		; 5D B0 A3 ; Exclusive OR accumulator with memory $A3B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $B0.b,S		; E3 B0 ; Subtract stack-relative $B0.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc $C0.b,S		; E3 C0 ; Subtract stack-relative $C0.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	lda $E4.b,S		; A3 E4 ; Load accumulator (stack relative) $E4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$E4D8.w		; C0 D8 E4 ; Compare #$E4D8.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $B0, $A0		; B0 A0 ; Branch if carry set to $B0, $A0 [Flow: branch]
	dec $A0C8.w,X		; DE C8 A0 ; Decrement memory $A0C8.w,X [Reads: X Index] [Flags: NZ]
	dec $C0B0.w,X		; DE B0 C0 ; Decrement memory $C0B0.w,X [Reads: X Index] [Flags: NZ]
	dec $C0C8.w,X		; DE C8 C0 ; Decrement memory $C0C8.w,X [Reads: X Index] [Flags: NZ]
	dec $E4B3.w,X		; DE B3 E4 ; Decrement memory $E4B3.w,X [Reads: X Index] [Flags: NZ]
	dec $ACA0.w,X		; DE A0 AC ; Decrement memory $ACA0.w,X [Reads: X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ldy #$38D0.w		; A0 D0 38 ; Load #$38D0.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $D3719F.l		; AF 9F 71 D3 ; Load long $D3719F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $DCAC71.l,X		; 9F 71 AC DC ; Store accumulator (long,X) $DCAC71.l,X [Reads: Accumulator, X Index]
	adc ($D0.b),Y		; 71 D0 ; Add with carry ($D0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp.w [$0871]		; DC 71 08 ; Jump long indirect [$0871] [Flow: jump]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($11.b,X)		; 61 11 ; Add with carry ($11.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$5B61.w		; C0 61 5B ; Compare #$5B61.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$9161.w		; C0 61 91 ; Compare #$9161.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D961.w		; C0 61 D9 ; Compare #$D961.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $9CB1FF.l,X		; FF FF B1 9C ; Subtract with carry (long,X) $9CB1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $F0.b,X		; 34 F0 ; Test bits $F0.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sbc $620000.l,X		; FF 00 00 62 ; Subtract with carry (long,X) $620000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE08ED.l,X		; FF ED 08 FE ; Subtract with carry (long,X) $FE08ED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	ldy #$6122.w		; A0 22 61 ; Load #$6122.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $0483.w,X		; FE 83 04 ; Increment memory $0483.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($01.b),Y		; 31 01 ; AND accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $0023.w,X		; FE 23 00 ; Increment memory $0023.w,X [Reads: X Index] [Flags: NZ]
	inc $8124.w,X		; FE 24 81 ; Increment memory $8124.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FE02.w		; 49 02 FE ; Exclusive OR #$FE02.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $85.b		; 84 85 ; Store Y register to $85.b [Reads: Y Index]
	ldx #$615B.w		; A2 5B 61 ; Load #$615B.w into X register [Writes: X Index] [Flags: NZ]
	inc $048B.w,X		; FE 8B 04 ; Increment memory $048B.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($01.b),Y		; B1 01 ; Load accumulator ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $002B.w,X		; FE 2B 00 ; Increment memory $002B.w,X [Reads: X Index] [Flags: NZ]
	inc $812C.w,X		; FE 2C 81 ; Increment memory $812C.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FE02.w		; C9 02 FE ; Compare #$FE02.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sty $A085.w		; 8C 85 A0 ; Store Y register to $A085.w [Reads: Y Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($FE.b,X)		; 61 FE ; Add with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $FF81.w		; 8E 81 FF ; Store X register to $FF81.w [Reads: X Index]
	eor ($02.b,X)		; 41 02 ; Exclusive OR accumulator with memory ($02.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($23.b,S),Y		; D3 23 ; Compare accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	.db $62, $D2, $9A		; 62 D2 9A ; Push effective relative address $62, $D2, $9A [Writes: Stack Pointer]
	.db $62, $FF, $4E		; 62 FF 4E ; Push effective relative address $62, $FF, $4E [Writes: Stack Pointer]
	sta $19.b,S		; 83 19 ; Store accumulator (stack relative) $19.b,S [Reads: Stack Pointer, Accumulator]
	trb $19E6.w		; 1C E6 19 ; Test and reset bits $19E6.w [Reads: Accumulator] [Flags: Z]
	bit $28E6.w,X		; 3C E6 28 ; Test bits $28E6.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jmp $3AE6.w		; 4C E6 3A ; Jump to $3AE6.w [Flow: jump]
	eor $48E3.w		; 4D E3 48 ; Exclusive OR $48E3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $4D18E6.l		; 5C E6 18 4D ; Jump long to $4D18E6.l [Flow: jump]
	sbc $38.b,S		; E3 38 ; Subtract stack-relative $38.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	trb $18E4.w		; 1C E4 18 ; Test and reset bits $18E4.w [Reads: Accumulator] [Flags: Z]
	bit $49E3.w		; 2C E3 49 ; Test bits $49E3.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	asl $28E5.w,X		; 1E E5 28 ; Arithmetic shift left $28E5.w,X [Reads: X Index] [Flags: NCZ]
	jmp $2C58E5.l		; 5C E5 58 2C ; Jump long to $2C58E5.l [Flow: jump]
	sbc $17.b,S		; E3 17 ; Subtract stack-relative $17.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	ora $1F67FA.l,X		; 1F FA 67 1F ; Logical OR long $1F67FA.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora [$67.b],Y		; 17 67 ; OR accumulator with memory (long indexed) [$67.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora $17341E.l,X		; 1F 1E 34 17 ; Logical OR long $17341E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $71.b		; 24 71 ; Test bits $71.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $71.b		; 24 71 ; Test bits $71.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $FC346A.l,X		; 1F 6A 34 FC ; Logical OR long $FC346A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($39.b,X)		; E1 39 ; Subtract with carry ($39.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$67.b]		; 67 67 ; Add with carry (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $28A4.w,X		; 3C A4 28 ; Test bits $28A4.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cpy #$505E.w		; C0 5E 50 ; Compare #$505E.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$1B5E.w		; C0 5E 1B ; Compare #$1B5E.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $A3.b,S		; 63 A3 ; Add with carry (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	adc $E3.b,S		; 63 E3 ; Add with carry (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $30, $9E		; 30 9E ; Branch if minus to $30, $9E [Flow: branch]
	adc #$9E4C.w		; 69 4C 9E ; Add #$9E4C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$B031.w		; 69 31 B0 ; Add #$B031.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $FAAB3B.l		; 22 3B AB FA ; Jump to subroutine long $FAAB3B.l [Writes: Stack Pointer] [Flow: call]
	eor $AB.b,S		; 43 AB ; Exclusive OR accumulator with stack relative $AB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $30, $D6		; 30 D6 ; Branch if minus to $30, $D6 [Flow: branch]
	adc #$D64C.w		; 69 4C D6 ; Add #$D64C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$D431.w		; 69 31 D4 ; Add #$D431.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $FADB3B.l		; 22 3B DB FA ; Jump to subroutine long $FADB3B.l [Writes: Stack Pointer] [Flow: call]
	eor $DB.b,S		; 43 DB ; Exclusive OR accumulator with stack relative $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $B0, $11		; B0 11 ; Branch if carry set to $B0, $11 [Flow: branch]
	ora $BB.b		; 05 BB ; Logical OR $BB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $B770.w		; 1C 70 B7 ; Test and reset bits $B770.w [Reads: Accumulator] [Flags: Z]
	and $71.b,S		; 23 71 ; AND accumulator with stack relative $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	and $71.b,S		; 23 71 ; AND accumulator with stack relative $71.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda [$6F.b],Y		; B7 6F ; Load accumulator (long indexed) [$6F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($CB.b),Y		; 71 CB ; Add with carry ($CB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $B9B671.l		; 6F 71 B6 B9 ; Add with carry (long) $B9B671.l [Writes: Accumulator] [Flags: NCVZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $AF71.w,Y		; B9 71 AF ; Load $AF71.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $B0FA23.l		; CF 23 FA B0 ; Compare accumulator (long) $B0FA23.l [Reads: Accumulator] [Flags: NCZ]
	and #$B03D.w		; 29 3D B0 ; Logical AND #$B03D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($3D.b),Y		; 51 3D ; Exclusive OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $79		; B0 79 ; Branch if carry set to $B0, $79 [Flow: branch]
	and $A1B0.w,X		; 3D B0 A1 ; AND accumulator with memory $A1B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $C9B0.w,X		; 3D B0 C9 ; AND accumulator with memory $C9B0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $1181.w,X		; 3D 81 11 ; AND accumulator with memory $1181.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$5B81.w		; C0 81 5B ; Compare #$5B81.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$9181.w		; C0 81 91 ; Compare #$9181.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D981.w		; C0 81 D9 ; Compare #$D981.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$00E0.w		; C0 E0 00 ; Compare #$00E0.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$E42C.w		; 29 2C E4 ; Logical AND #$E42C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $82, $1C, $81		; 82 1C 81 ; Branch always long to $82, $1C, $81 [Flow: branch]
	trb $1862.w		; 1C 62 18 ; Test and reset bits $1862.w [Reads: Accumulator] [Flags: Z]
	adc ($2E.b,X)		; 61 2E ; Add with carry ($2E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $006000.l		; 22 00 60 00 ; Jump to subroutine long $006000.l [Writes: Stack Pointer] [Flow: call]
	jsr $FF00.w		; 20 00 FF ; Jump to subroutine at $FF00.w [Writes: Stack Pointer] [Flow: call]
	sbc $2000E9.l,X		; FF E9 00 20 ; Subtract with carry (long,X) $2000E9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$2092.w		; A9 92 20 ; Load #$2092.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $2092.w,Y		; B9 92 20 ; Load $2092.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$2092.w		; C9 92 20 ; Compare #$2092.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $3992.w,Y		; D9 92 39 ; Compare accumulator $3992.w,Y [Reads: Y Index] [Flags: NCZ]
	lda ($93.b),Y		; B1 93 ; Load accumulator ($93.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda ($92.b),Y		; B1 92 ; Load accumulator ($92.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp ($92.b),Y		; D1 92 ; Compare accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	cmp $FA.b,S		; C3 FA ; Compare accumulator (stack relative) $FA.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	jsr ($38E9.w,X)		; FC E9 38 ; Jump to subroutine indirect indexed ($38E9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $0061.w		; 20 61 00 ; Jump to subroutine at $0061.w [Writes: Stack Pointer] [Flow: call]
	sbc $00E9FF.l,X		; FF FF E9 00 ; Subtract with carry (long,X) $00E9FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $0D.b		; A4 0D ; Load $0D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	cpx #$0F90.w		; E0 90 0F ; Compare #$0F90.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$10E4.w		; E0 E4 10 ; Compare #$10E4.w with X register [Reads: X Index] [Flags: NCZ]
	bit #$61AB.w		; 89 AB 61 ; Test bits #$61AB.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc #$62AB.w		; E9 AB 62 ; Subtract #$62AB.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($A0.b),Y		; 91 A0 ; Store accumulator ($A0.b),Y [Reads: Direct Page, Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A1.b		; E5 A1 ; Subtract $A1.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx $91.b		; E4 91 ; Compare $91.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ldx #$F5E4.w		; A2 E4 F5 ; Load #$F5E4.w into X register [Writes: X Index] [Flags: NZ]
	lda $FF.b,S		; A3 FF ; Load accumulator (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FFA8B1.l,X		; FF B1 A8 FF ; Subtract with carry (long,X) $FFA8B1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($18.b,X)		; 81 18 ; Store accumulator ($18.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $18E1FF.l,X		; FF FF E1 18 ; Subtract with carry (long,X) $18E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $0D.b		; A4 0D ; Load $0D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	ora #$61AB.w		; 09 AB 61 ; Logical OR #$61AB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc $802A.w,X		; FE 2A 80 ; Increment memory $802A.w,X [Reads: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda #$FE01.w		; A9 01 FE ; Load #$FE01.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $9B01.w		; 2D 01 9B ; Logical AND $9B01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($02.b),Y		; D1 02 ; Compare accumulator ($02.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc ($B8.b,X)		; E1 B8 ; Subtract with carry ($B8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $E1.b		; C4 E1 ; Compare $E1.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cpy #$1BC4.w		; C0 C4 1B ; Compare #$1BC4.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda ($FA.b,S),Y		; B3 FA ; Load accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $B3.b,S		; 23 B3 ; AND accumulator with stack relative $B3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	lda ($FA.b,S),Y		; B3 FA ; Load accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $DDB8.w,Y		; 19 B8 DD ; OR accumulator with memory $DDB8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $D0		; 42 D0 ; Reserved instruction
	cmp $942B.w,X		; DD 2B 94 ; Compare accumulator $942B.w,X [Reads: X Index] [Flags: NCZ]
	sbc $A330.w,Y		; F9 30 A3 ; Subtract with carry $A330.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($FC.b,S),Y		; 93 FC ; Store accumulator (stack relative indirect indexed) ($FC.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sbc #$4839.w		; E9 39 48 ; Subtract #$4839.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda ($FC.b)		; B2 FC ; Load accumulator (indirect) ($FC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp ($92.b),Y		; D1 92 ; Compare accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc ($92.b,X)		; E1 92 ; Subtract with carry ($92.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor ($E3.b,S),Y		; 53 E3 ; XOR accumulator (stack relative indirect indexed) ($E3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	adc $E3.b,S		; 63 E3 ; Add with carry (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $3B.b,X		; D6 3B ; Decrement memory $3B.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	.db $D0, $BA		; D0 BA ; Branch if not equal to $D0, $BA [Flow: branch]
	jsr ($C2E0.w,X)		; FC E0 C2 ; Jump to subroutine indirect indexed ($C2E0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($9108.w,X)		; FC 08 91 ; Jump to subroutine indirect indexed ($9108.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ldy #$E508.w		; A0 08 E5 ; Load #$E508.w into Y register [Writes: Y Index] [Flags: NZ]
	lda ($8B.b,X)		; A1 8B ; Load accumulator ($8B.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	bit #$CAC0.w		; 89 C0 CA ; Test bits #$CAC0.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$8BC0.w		; 89 C0 8B ; Test bits #$8BC0.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A898FF.l,X		; FF FF 98 A8 ; Subtract with carry (long,X) $A898FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFA8B8.l,X		; FF B8 A8 FF ; Subtract with carry (long,X) $FFA8B8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF3882.l,X		; FF 82 38 FF ; Subtract with carry (long,X) $FF3882.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0318E1.l,X		; FF E1 18 03 ; Subtract with carry (long,X) $0318E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$FD01.w		; A9 01 FD ; Load #$FD01.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $82, $03, $D1		; 82 03 D1 ; Branch always long to $82, $03, $D1 [Flow: branch]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0103.w		; AD 03 01 ; Load $0103.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cpy $01.b		; C4 01 ; Compare $01.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cpy #$E0C4.w		; C0 C4 E0 ; Compare #$E0C4.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	cpx #$10E4.w		; E0 E4 10 ; Compare #$10E4.w with X register [Reads: X Index] [Flags: NCZ]
	sbc #$62AB.w		; E9 AB 62 ; Subtract #$62AB.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda #$18FC.w		; A9 FC 18 ; Load #$18FC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	dec $3B.b,X		; D6 3B ; Decrement memory $3B.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$FC		; C2 FC
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $90, $3A		; 90 3A ; Branch if carry clear to $90, $3A [Flow: branch]
	sta $F9A2.w,Y		; 99 A2 F9 ; Store accumulator to $F9A2.w,Y [Reads: Y Index, Accumulator]
	lda $D0.b		; A5 D0 ; Load $D0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $ECA0.w,X		; DD A0 EC ; Compare accumulator $ECA0.w,X [Reads: X Index] [Flags: NCZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx $A93B.w		; EC 3B A9 ; Compare $A93B.w with X register [Reads: X Index] [Flags: NCZ]
	sta $D188.w,Y		; 99 88 D1 ; Store accumulator to $D188.w,Y [Reads: Y Index, Accumulator]
	sta $CB88.w,Y		; 99 88 CB ; Store accumulator to $CB88.w,Y [Reads: Y Index, Accumulator]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp ($E3.b,S),Y		; D3 E3 ; Compare accumulator (stack relative indirect indexed) ($E3.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $D0.b		; C5 D0 ; Compare $D0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $C0B1.w,X		; DD B1 C0 ; Compare accumulator $C0B1.w,X [Reads: X Index] [Flags: NCZ]
	jsl LC0090B.l		; 22 0B 89 C0 ; Jump to subroutine long LC0090B.l [Writes: Stack Pointer] [Flow: call]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit #$0BC0.w		; 89 C0 0B ; Test bits #$0BC0.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $91.b		; E4 91 ; Compare $91.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ldx #$F5E4.w		; A2 E4 F5 ; Load #$F5E4.w into X register [Writes: X Index] [Flags: NZ]
	lda $FF.b,S		; A3 FF ; Load accumulator (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FFA818.l,X		; FF 18 A8 FF ; Subtract with carry (long,X) $FFA818.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $FFA858.l,X		; FF 58 A8 FF ; Subtract with carry (long,X) $FFA858.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $90, $FF		; 90 FF ; Branch if carry clear to $90, $FF [Flow: branch]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $82, $00, $FF		; 82 00 FF ; Branch always long to $82, $00, $FF [Flow: branch]
	sbc $FE08E3.l,X		; FF E3 08 FE ; Subtract with carry (long,X) $FE08E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $1E.b		; A5 1E ; Load $1E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $2D.b,X		; 94 2D ; Store Y register $2D.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	adc $DC.b,S		; 63 DC ; Add with carry (stack relative) $DC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and $9764.w		; 2D 64 97 ; Logical AND $9764.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $DF63.w		; 4D 63 DF ; Exclusive OR $DF63.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $9464.w		; 4D 64 94 ; Exclusive OR $9464.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $FE63.w		; CD 63 FE ; Compare $FE63.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $A5C9.w,X		; 5D C9 A5 ; Exclusive OR accumulator with memory $A5C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $FF04.w,X		; DE 04 FF ; Decrement memory $FF04.w,X [Reads: X Index] [Flags: NZ]
	adc $DCCB.w,X		; 7D CB DC ; Add $DCCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $AA64.w		; CD 64 AA ; Compare $AA64.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit $A8C2.w		; 2C C2 A8 ; Test bits $A8C2.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor $C8C2.w		; 4D C2 C8 ; Exclusive OR $C8C2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $A0C2.w		; 4D C2 A0 ; Exclusive OR $A0C2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $D0C2.w		; 6E C2 D0 ; Rotate right $D0C2.w [Flags: NCZ]
	ror $A8C2.w		; 6E C2 A8 ; Rotate right $A8C2.w [Flags: NCZ]
	sta $C8C2.w,X		; 9D C2 C8 ; Store accumulator to $C8C2.w,X [Reads: Accumulator, X Index]
	sta $AAC2.w,X		; 9D C2 AA ; Store accumulator to $AAC2.w,X [Reads: Accumulator, X Index]
	cpy $A0C2.w		; CC C2 A0 ; Compare $A0C2.w with Y register [Reads: Y Index] [Flags: NCZ]
	and $FE67.w		; 2D 67 FE ; Logical AND $FE67.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $82, $98, $A9		; 82 98 A9 ; Branch always long to $82, $98, $A9 [Flow: branch]
	and #$D807.w		; 29 07 D8 ; Logical AND #$D807.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $FF68.w		; 2D 68 FF ; Logical AND $FF68.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $62, $9A, $A3		; 62 9A A3 ; Push effective relative address $62, $9A, $A3 [Writes: Stack Pointer]
	eor $DB67.w		; 4D 67 DB ; Exclusive OR $DB67.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $A068.w		; 4D 68 A0 ; Exclusive OR $A068.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $FE67.w		; CD 67 FE ; Compare $FE67.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $A999.w		; 8D 99 A9 ; Store accumulator to $A999.w [Reads: Accumulator]
	cmp $D808.w,Y		; D9 08 D8 ; Compare accumulator $D808.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $FF68.w		; CD 68 FF ; Compare $FF68.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $949B.w		; 6D 9B 94 ; Add $949B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsl $224E94.l		; 22 94 4E 22 ; Jump to subroutine long $224E94.l [Writes: Stack Pointer] [Flow: call]
	pei ($3A.b)		; D4 3A ; Push effective indirect address ($3A.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $224ED4.l		; 22 D4 4E 22 ; Jump to subroutine long $224ED4.l [Writes: Stack Pointer] [Flow: call]
	sta $B9.b,X		; 95 B9 ; Store accumulator to $B9.b,X [Reads: Accumulator, X Index]
	jsl $22CD95.l		; 22 95 CD 22 ; Jump to subroutine long $22CD95.l [Writes: Stack Pointer] [Flow: call]
	pei ($BA.b)		; D4 BA ; Push effective indirect address ($BA.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $22CED4.l		; 22 D4 CE 22 ; Jump to subroutine long $22CED4.l [Writes: Stack Pointer] [Flow: call]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rol $B0E3.w,X		; 3E E3 B0 ; Rotate left $B0E3.w,X [Reads: X Index] [Flags: NCZ]
	ror $C0E5.w		; 6E E5 C0 ; Rotate right $C0E5.w [Flags: NCZ]
	ror $B8E6.w		; 6E E6 B8 ; Rotate right $B8E6.w [Flags: NCZ]
	stz $98E4.w,X		; 9E E4 98 ; Store zero to $98E4.w,X [Reads: X Index]
	and $1D19FA.l,X		; 3F FA 19 1D ; AND accumulator with memory (long,X) $1D19FA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rep #$49		; C2 49 ; Reset processor status bits #$49 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora $19C2.w,X		; 1D C2 19 ; OR accumulator with memory $19C2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $49C2.w		; 4D C2 49 ; Exclusive OR $49C2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $15C2.w		; 4D C2 15 ; Exclusive OR $15C2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $221527.l,X		; 1F 27 15 22 ; Logical OR long $221527.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $4E.b,X		; 15 4E ; OR accumulator with memory $4E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $6B.b,X		; 15 6B ; OR accumulator with memory $6B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	eor $6B.b		; 45 6B ; Exclusive OR $6B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc #$6B4E.w		; 69 4E 6B ; Add #$6B4E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$6B22.w		; 69 22 6B ; Add #$6B22.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $1F.b		; 45 1F ; Exclusive OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$38.b]		; 27 38 ; AND accumulator with memory (long) [$38.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $39E4.w		; 1C E4 39 ; Test and reset bits $39E4.w [Reads: Accumulator] [Flags: Z]
	bit $28E5.w		; 2C E5 28 ; Test bits $28E5.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $30E4.w		; 2D E4 30 ; Logical AND $30E4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $29E5.w		; 2C E5 29 ; Test bits $29E5.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jmp $28E6.w		; 4C E6 28 ; Jump to $28E6.w [Flow: jump]
	mvp $48,$E4		; 44 E4 48 ; Move block positive $48,$E4 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and $40E3.w,X		; 3D E3 40 ; AND accumulator with memory $40E3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp $48E6.w		; 4C E6 48 ; Jump to $48E6.w [Flow: jump]
	bit $E3.b,X		; 34 E3 ; Test bits $E3.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp $3C18E3.l		; 5C E3 18 3C ; Jump long to $3C18E3.l [Flow: jump]
	inc $58.b		; E6 58 ; Increment $58.b [Reads: Direct Page] [Flags: NZ]
	bit $38E5.w,X		; 3C E5 38 ; Test bits $38E5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $14A4.w,X		; 3C A4 14 ; Test bits $14A4.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	.db $D0, $38		; D0 38 ; Branch if not equal to $D0, $38 [Flow: branch]
	stz $D0.b		; 64 D0 ; Store zero to $D0.b
	sec		; 38 ; Set carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	clv		; B8 ; Clear overflow flag [Flags: V]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($B1.b)		; 32 B1 ; AND accumulator with memory (indirect) ($B1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $B14A.w,Y		; F9 4A B1 ; Subtract with carry $B14A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $B952.w,Y		; F9 52 B9 ; Subtract with carry $B952.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C152.w,Y		; F9 52 C1 ; Subtract with carry $C152.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C952.w,Y		; F9 52 C9 ; Subtract with carry $C952.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $D132.w,Y		; F9 32 D1 ; Subtract with carry $D132.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $D13A.w,Y		; F9 3A D1 ; Subtract with carry $D13A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $D142.w,Y		; F9 42 D1 ; Subtract with carry $D142.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $D14A.w,Y		; F9 4A D1 ; Subtract with carry $D14A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $B839.w,Y		; F9 39 B8 ; Subtract with carry $B839.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $142BFF.l,X		; FF FF 2B 14 ; Subtract with carry (long,X) $142BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $823862.l,X		; FF 62 38 82 ; Subtract with carry (long,X) $823862.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $0063.w		; 1C 63 00 ; Test and reset bits $0063.w [Reads: Accumulator] [Flags: Z]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	sbc $08E3FF.l,X		; FF FF E3 08 ; Subtract with carry (long,X) $08E3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($002B.w,X)		; FC 2B 00 ; Jump to subroutine indirect indexed ($002B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($04AB.w,X)		; FC AB 04 ; Jump to subroutine indirect indexed ($04AB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldx #$FC61.w		; A2 61 FC ; Load #$FC61.w into X register [Writes: X Index] [Flags: NZ]
	lda #$FD00.w		; A9 00 FD ; Load #$FD00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$4802.w		; 29 02 48 ; Logical AND #$4802.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$FD62.w		; A2 62 FD ; Load #$FD62.w into X register [Writes: X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	asl $58.b		; 06 58 ; Arithmetic shift left $58.b [Reads: Direct Page] [Flags: NCZ]
	lda ($01.b)		; B2 01 ; Load accumulator (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $02AB.w,X		; FD AB 02 ; Subtract with carry $02AB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $002B.w,X		; FE 2B 00 ; Increment memory $002B.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($01.b,S),Y		; B3 01 ; Load accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $04BB.w,X		; FE BB 04 ; Increment memory $04BB.w,X [Reads: X Index] [Flags: NZ]
	lda $AC6133.l		; AF 33 61 AC ; Load long $AC6133.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$FE61.w		; A9 61 FE ; Load #$FE61.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $0120.w,X		; BD 20 01 ; Load $0120.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $DF0272.l,X		; FF 72 02 DF ; Subtract with carry (long,X) $DF0272.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($62.b,S),Y		; 33 62 ; AND accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $62A8.w,X		; DE A8 62 ; Decrement memory $62A8.w,X [Reads: X Index] [Flags: NZ]
	sbc $FC837E.l,X		; FF 7E 83 FC ; Subtract with carry (long,X) $FC837E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($38.b,X)		; E1 38 ; Subtract with carry ($38.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	and $4D30FA.l,X		; 3F FA 30 4D ; AND accumulator with memory (long,X) $4D30FA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit #$4D48.w		; 89 48 4D ; Test bits #$4D48.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$5530.w		; 89 30 55 ; Test bits #$5530.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$5548.w		; 89 48 55 ; Test bits #$5548.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$231B.w		; 89 1B 23 ; Test bits #$231B.w with accumulator [Reads: Accumulator] [Flags: Z]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $3E.b,S		; 23 3E ; AND accumulator with stack relative $3E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $3E53.w,X		; FE 53 3E ; Increment memory $3E53.w,X [Reads: X Index] [Flags: NZ]
	inc $A138.w,X		; FE 38 A1 ; Increment memory $A138.w,X [Reads: X Index] [Flags: NZ]
	cpx $38.b		; E4 38 ; Compare $38.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ldy $FC34.w,X		; BC 34 FC ; Load Y register $FC34.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cpx $6C9C.w		; EC 9C 6C ; Compare $6C9C.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $80		; D0 80 ; Branch if not equal to $D0, $80 [Flow: branch]
	sty $7FD0.w		; 8C D0 7F ; Store Y register to $7FD0.w [Reads: Y Index]
	cpx #$80D0.w		; E0 D0 80 ; Compare #$80D0.w with X register [Reads: X Index] [Flags: NCZ]
	lda #$DDD0.w		; A9 D0 DD ; Load #$DDD0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $F92E.w,Y		; D9 2E F9 ; Compare accumulator $F92E.w,Y [Reads: Y Index] [Flags: NCZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sta [$FA.b]		; 87 FA ; Store accumulator (long) [$FA.b] [Reads: Direct Page, Accumulator]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta [$FA.b]		; 87 FA ; Store accumulator (long) [$FA.b] [Reads: Direct Page, Accumulator]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $B0, $22		; B0 22 ; Branch if carry set to $B0, $22 [Flow: branch]
	.db $D0, $B0		; D0 B0 ; Branch if not equal to $D0, $B0 [Flow: branch]
	jsl $22ACB8.l		; 22 B8 AC 22 ; Jump to subroutine long $22ACB8.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $AC		; D0 AC ; Branch if not equal to $D0, $AC [Flow: branch]
	jsl $2280B8.l		; 22 B8 80 22 ; Jump to subroutine long $2280B8.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $80		; D0 80 ; Branch if not equal to $D0, $80 [Flow: branch]
	jsl $227CB8.l		; 22 B8 7C 22 ; Jump to subroutine long $227CB8.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $7C		; D0 7C ; Branch if not equal to $D0, $7C [Flow: branch]
	jsl $2250B8.l		; 22 B8 50 22 ; Jump to subroutine long $2250B8.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $50		; D0 50 ; Branch if not equal to $D0, $50 [Flow: branch]
	jsl $224CB8.l		; 22 B8 4C 22 ; Jump to subroutine long $224CB8.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $4C		; D0 4C ; Branch if not equal to $D0, $4C [Flow: branch]
	jsl $F94AC8.l		; 22 C8 4A F9 ; Jump to subroutine long $F94AC8.l [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sbc $AAC8.w,Y		; F9 C8 AA ; Subtract with carry $AAC8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9109.w,Y		; F9 09 91 ; Subtract with carry $9109.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$9159.w		; C0 59 91 ; Compare #$9159.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$137E.w		; C0 7E 13 ; Compare #$137E.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$537E.w		; C0 7E 53 ; Compare #$537E.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$917E.w		; C0 7E 91 ; Compare #$917E.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$10AF.w		; C0 AF 10 ; Compare #$10AF.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$00EC.w		; C0 EC 00 ; Compare #$00EC.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pea $6000.w		; F4 00 60 ; Push absolute address $6000.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc $A1AFFF.l,X		; FF FF AF A1 ; Subtract with carry (long,X) $A1AFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $71AF.w,Y		; F9 AF 71 ; Subtract with carry $71AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $41AF.w,Y		; F9 AF 41 ; Subtract with carry $41AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC00D1.l,X		; FF D1 00 FC ; Subtract with carry (long,X) $FC00D1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit #$2200.w		; 89 00 22 ; Test bits #$2200.w with accumulator [Reads: Accumulator] [Flags: Z]
	lda ($61.b,X)		; A1 61 ; Load accumulator ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($818E.w,X)		; FC 8E 81 ; Jump to subroutine indirect indexed ($818E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $0249.w,X		; FD 49 02 ; Subtract with carry $0249.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($A1.b)		; 52 A1 ; Exclusive OR accumulator with memory (indirect) ($A1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FD, $4E		; 62 FD 4E ; Push effective relative address $62, $FD, $4E [Writes: Stack Pointer]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Stack Pointer, Accumulator]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $21.b		; 02 21 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($FC.b,X)		; 61 FC ; Add with carry ($FC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $81.b		; 06 81 ; Arithmetic shift left $81.b [Reads: Direct Page] [Flags: NCZ]
	ora ($10.b,S),Y		; 13 10 ; OR accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($02.b,X)		; C1 02 ; Compare accumulator ($02.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	adc ($21.b)		; 72 21 ; Add with carry (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $FD, $C6		; 62 FD C6 ; Push effective relative address $62, $FD, $C6 [Writes: Stack Pointer]
	sta $10.b,S		; 83 10 ; Store accumulator (stack relative) $10.b,S [Reads: Stack Pointer, Accumulator]
	and $C4.b,S		; 23 C4 ; AND accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $58		; 10 58 ; Branch if plus to $10, $58 [Flow: branch]
	cpy $60.b		; C4 60 ; Compare $60.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	and $C4.b,S		; 23 C4 ; AND accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cpy $2C.b		; C4 2C ; Compare $2C.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	jmp $5C4C89.l		; 5C 89 4C 5C ; Jump long to $5C4C89.l [Flow: jump]
	bit #$6424.w		; 89 24 64 ; Test bits #$6424.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$5C24.w		; 89 24 5C ; Test bits #$5C24.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$6454.w		; 89 54 64 ; Test bits #$6454.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$5C54.w		; 89 54 5C ; Test bits #$5C54.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$642C.w		; 89 2C 64 ; Test bits #$642C.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$644C.w		; 89 4C 64 ; Test bits #$644C.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$540D.w		; 89 0D 54 ; Test bits #$540D.w with accumulator [Reads: Accumulator] [Flags: Z]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor $54.b,X		; 55 54 ; Exclusive OR accumulator with memory $54.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $3DB939.l		; 0F 39 B9 3D ; OR accumulator with memory (long) $3DB939.l [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $B3FC.w,Y		; F9 FC B3 ; Subtract with carry $B3FC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $FD.b,X		; B4 FD ; Load Y register $FD.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	and ($B4.b,S),Y		; 33 B4 ; AND accumulator (stack relative indirect indexed) ($B4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($39E1.w,X)		; FC E1 39 ; Jump to subroutine indirect indexed ($39E1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jsl $22DBFE.l		; 22 FE DB 22 ; Jump to subroutine long $22DBFE.l [Writes: Stack Pointer] [Flow: call]
	inc $5A9B.w,X		; FE 9B 5A ; Increment memory $5A9B.w,X [Reads: X Index] [Flags: NZ]
	inc $5ADB.w,X		; FE DB 5A ; Increment memory $5ADB.w,X [Reads: X Index] [Flags: NZ]
	inc $4BBF.w,X		; FE BF 4B ; Increment memory $4BBF.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $DB.b,S		; A3 DB ; Load accumulator (stack relative) $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cmp $DFA099.l,X		; DF 99 A0 DF ; Compare accumulator (long,X) $DFA099.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cmp #$DFA0.w		; C9 A0 DF ; Compare #$DFA0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cmp $C09301.l,X		; DF 01 93 C0 ; Compare accumulator (long,X) $C09301.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ora ($D2.b,X)		; 01 D2 ; Logical OR ($D2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy #$9361.w		; C0 61 93 ; Compare #$9361.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$D261.w		; C0 61 D2 ; Compare #$D261.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $36		; 80 36 ; Branch always to $80, $36 [Flow: branch]
	adc ($1C.b,X)		; 61 1C ; Add with carry ($1C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $0081.w		; 1C 81 00 ; Test and reset bits $0081.w [Reads: Accumulator] [Flags: Z]
	sbc $04E1FF.l,X		; FF FF E1 04 ; Subtract with carry (long,X) $04E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$0D34.w		; 09 34 0D ; Logical OR #$0D34.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($10.b),Y		; 51 10 ; Exclusive OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $613A08.l		; 0F 08 3A 61 ; OR accumulator with memory (long) $613A08.l [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $62, $08, $C7		; 62 08 C7 ; Push effective relative address $62, $08, $C7 [Writes: Stack Pointer]
	asl $E754.w		; 0E 54 E7 ; Arithmetic shift left $E754.w [Flags: NCZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	dec $61.b		; C6 61 ; Decrement $61.b [Reads: Direct Page] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dec $62.b		; C6 62 ; Decrement $62.b [Reads: Direct Page] [Flags: NZ]
	and $31FA2B.l,X		; 3F 2B FA 31 ; AND accumulator with memory (long,X) $31FA2B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $2A49.w,Y		; F9 49 2A ; Subtract with carry $2A49.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4820.w,Y		; F9 20 48 ; Subtract with carry $4820.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $5E4418.l		; 22 18 44 5E ; Jump to subroutine long $5E4418.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvp $41,$5E		; 44 5E 41 ; Move block positive $41,$5E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $226315.l		; 22 15 63 22 ; Jump to subroutine long $226315.l [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc ($22.b,X)		; 61 22 ; Add with carry ($22.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $73.b		; 14 73 ; Test and reset bits $73.b [Reads: Accumulator] [Flags: Z]
	jsl $227350.l		; 22 50 73 22 ; Jump to subroutine long $227350.l [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	sty $5E.b		; 84 5E ; Store Y register to $5E.b [Reads: Y Index]
	jsr $2284.w		; 20 84 22 ; Jump to subroutine at $2284.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $84		; 50 84 ; Branch if overflow clear to $50, $84 [Flow: branch]
	jsl $5E8460.l		; 22 60 84 5E ; Jump to subroutine long $5E8460.l [Writes: Stack Pointer] [Flow: call]
	trb $99.b		; 14 99 ; Test and reset bits $99.b [Reads: Accumulator] [Flags: Z]
	jsl $229958.l		; 22 58 99 22 ; Jump to subroutine long $229958.l [Writes: Stack Pointer] [Flow: call]
	trb $AD.b		; 14 AD ; Test and reset bits $AD.b [Reads: Accumulator] [Flags: Z]
	jsl $22AD58.l		; 22 58 AD 22 ; Jump to subroutine long $22AD58.l [Writes: Stack Pointer] [Flow: call]
	trb $C9.b		; 14 C9 ; Test and reset bits $C9.b [Reads: Accumulator] [Flags: Z]
	jsl $5EC828.l		; 22 28 C8 5E ; Jump to subroutine long $5EC828.l [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp #$5022.w		; C9 22 50 ; Compare #$5022.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lsr $1109.w,X		; 5E 09 11 ; Logical shift right $1109.w,X [Reads: X Index] [Flags: NCZ]
	ldy #$1155.w		; A0 55 11 ; Load #$1155.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$D809.w		; A2 09 D8 ; Load #$D809.w into X register [Writes: X Index] [Flags: NZ]
	lda ($59.b,X)		; A1 59 ; Load accumulator ($59.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pea $FFA3.w		; F4 A3 FF ; Push absolute address $FFA3.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0061.l,X		; FF 61 00 FF ; Subtract with carry (long,X) $FF0061.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FC1CE1.l,X		; FF E1 1C FC ; Subtract with carry (long,X) $FC1CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$1F.b]		; 27 1F ; AND accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $FF03.w,X		; 1E 03 FF ; Arithmetic shift left $FF03.w,X [Reads: X Index] [Flags: NCZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$2F.b],Y		; 17 2F ; OR accumulator with memory (long indexed) [$2F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $15.b,S		; 63 15 ; Add with carry (stack relative) $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lda $FC63.w		; AD 63 FC ; Load $FC63.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $27C9.w,X		; 5D C9 27 ; Exclusive OR accumulator with memory $27C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $DEA504.l,X		; DF 04 A5 DE ; Compare accumulator (long,X) $DEA504.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	adc $DFCB.w,X		; 7D CB DF ; Add $DFCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $ADDD64.l		; 2F 64 DD AD ; AND accumulator with memory (long) $ADDD64.l [Writes: Accumulator] [Flags: NZ]
	stz $FC.b		; 64 FC ; Store zero to $FC.b
	.db $82, $98, $2B		; 82 98 2B ; Branch always long to $82, $98, $2B [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora [$A9.b]		; 07 A9 ; OR accumulator with memory (long) [$A9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF07.w		; 29 07 FF ; Logical AND #$FF07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $62, $9A, $23		; 62 9A 23 ; Push effective relative address $62, $9A, $23 [Writes: Stack Pointer]
	and ($67.b,S),Y		; 33 67 ; AND accumulator (stack relative indirect indexed) ($67.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($B0.b,X)		; 21 B0 ; Logical AND ($B0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc [$FC.b]		; 67 FC ; Add with carry (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $2B99.w		; 8D 99 2B ; Store accumulator to $2B99.w [Reads: Accumulator]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$08D9.w		; A9 D9 08 ; Load #$08D9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $DB9B6D.l,X		; FF 6D 9B DB ; Subtract with carry (long,X) $DB9B6D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($68.b,S),Y		; 33 68 ; AND accumulator (stack relative indirect indexed) ($68.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $68B0.w,Y		; D9 B0 68 ; Compare accumulator $68B0.w,Y [Reads: Y Index] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$6B		; C2 6B
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$AA		; C2 AA
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$3F		; C2 3F
	eor $50.b,S		; 43 50 ; Exclusive OR accumulator with stack relative $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $43.b,S		; 83 43 ; Store accumulator (stack relative) $43.b,S [Reads: Stack Pointer, Accumulator]
	.db $50, $3B		; 50 3B ; Branch if overflow clear to $50, $3B [Flow: branch]
	eor [$7C.b]		; 47 7C ; Exclusive OR accumulator with memory (long) [$7C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit #$3F7C.w		; 89 7C 3F ; Test bits #$3F7C.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp [$50.b]		; C7 50 ; Compare accumulator (long) [$50.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $C7.b,S		; 83 C7 ; Store accumulator (stack relative) $C7.b,S [Reads: Stack Pointer, Accumulator]
	.db $50, $C7		; 50 C7 ; Branch if overflow clear to $50, $C7 [Flow: branch]
	eor [$7C.b]		; 47 7C ; Exclusive OR accumulator with memory (long) [$7C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp [$89.b]		; C7 89 ; Compare accumulator (long) [$89.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jmp ($477F.w,X)		; 7C 7F 47 ; Jump indirect indexed to ($477F.w,X) [Reads: X Index] [Flow: jump]
	jmp ($897F.w,X)		; 7C 7F 89 ; Jump indirect indexed to ($897F.w,X) [Reads: X Index] [Flow: jump]
	jmp ($7F3F.w,X)		; 7C 3F 7F ; Jump indirect indexed to ($7F3F.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $83		; 50 83 ; Branch if overflow clear to $50, $83 [Flow: branch]
	adc $413950.l,X		; 7F 50 39 41 ; Add long $413950.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc $F842.w,X		; 7D 42 F8 ; Add $F842.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$41.b]		; C7 41 ; Compare accumulator (long) [$41.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $7CF8.w,X		; 7E F8 7C ; Rotate right $7CF8.w,X [Reads: X Index] [Flags: NCZ]
	adc $C4F8.w,X		; 7D F8 C4 ; Add $C4F8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $C53AF8.l,X		; 7F F8 3A C5 ; Add long $C53AF8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ror $F8C6.w,X		; 7E C6 F8 ; Rotate right $F8C6.w,X [Reads: X Index] [Flags: NCZ]
	cpy $C6.b		; C4 C6 ; Compare $C6.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	lsr $43.b,X		; 56 43 ; Logical shift right $43.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldx $43.b		; A6 43 ; Load $43.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor [$F8.b],Y		; 57 F8 ; Exclusive OR accumulator with memory (long indexed) [$F8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $C756F8.l		; AF F8 56 C7 ; Load long $C756F8.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldx $C7.b		; A6 C7 ; Load $C7.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	dec $AF.b		; C6 AF ; Decrement $AF.b [Reads: Direct Page] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	dec $57.b		; C6 57 ; Decrement $57.b [Reads: Direct Page] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $C418.w,Y		; 39 18 C4 ; AND accumulator with memory $C418.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $19		; 50 19 ; Branch if overflow clear to $50, $19 [Flow: branch]
	cpy $39.b		; C4 39 ; Compare $39.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $1C.b,X		; 34 1C ; Test bits $1C.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	adc #$2B34.w		; 69 34 2B ; Add #$2B34.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $2A3B4C.l		; 22 4C 3B 2A ; Jump to subroutine long $2A3B4C.l [Writes: Stack Pointer] [Flow: call]
	jmp $6928.w		; 4C 28 69 ; Jump to $6928.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $19A069.l,X		; 1F 69 A0 19 ; Logical OR long $19A069.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy $A9.b		; C4 A9 ; Compare $A9.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	clc		; [PATTERN: Memory clearing operation] 18 ; Clear carry flag [Flags: C]
	cpy $A1.b		; C4 A1 ; Compare $A1.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $2A3B.w		; 9C 3B 2A ; Store zero to $2A3B.w
	stz $691F.w		; 9C 1F 69 ; Store zero to $691F.w
	.db $B0, $28		; B0 28 ; Branch if carry set to $B0, $28 [Flow: branch]
	adc #$2BB0.w		; 69 B0 2B ; Add #$2BB0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $691CC8.l		; 22 C8 1C 69 ; Jump to subroutine long $691CC8.l [Writes: Stack Pointer] [Flow: call]
	cpx #$C439.w		; E0 39 C4 ; Compare #$C439.w with X register [Reads: X Index] [Flags: NCZ]
	cmp ($50.b),Y		; D1 50 ; Compare accumulator ($50.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cpy $E9.b		; C4 E9 ; Compare $E9.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	and $DC62.w,Y		; 39 62 DC ; AND accumulator with memory $DC62.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	jsl $693ADC.l		; 22 DC 3A 69 ; Jump to subroutine long $693ADC.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $4C		; D0 4C ; Branch if not equal to $D0, $4C [Flow: branch]
	jsl $6B53CC.l		; 22 CC 53 6B ; Jump to subroutine long $6B53CC.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $63		; D0 63 ; Branch if not equal to $D0, $63 [Flow: branch]
	jsl $C4A8D1.l		; 22 D1 A8 C4 ; Jump to subroutine long $C4A8D1.l [Writes: Stack Pointer] [Flow: call]
	cpx #$C4C0.w		; E0 C0 C4 ; Compare #$C4C0.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$C4A9.w		; E0 A9 C4 ; Compare #$C4A9.w with X register [Reads: X Index] [Flags: NCZ]
	sbc #$62A9.w		; E9 A9 62 ; Subtract #$62A9.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $A7		; D0 A7 ; Branch if not equal to $D0, $A7 [Flow: branch]
	jsl $6BABCC.l		; 22 CC AB 6B ; Jump to subroutine long $6BABCC.l [Writes: Stack Pointer] [Flow: call]
	.db $D0, $B8		; D0 B8 ; Branch if not equal to $D0, $B8 [Flow: branch]
	jsl $69BADC.l		; 22 DC BA 69 ; Jump to subroutine long $69BADC.l [Writes: Stack Pointer] [Flow: call]
	jmp.w [$22CC]		; DC CC 22 ; Jump long indirect [$22CC] [Flow: jump]
	ldy #$C4D1.w		; A0 D1 C4 ; Load #$C4D1.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$C4E0.w		; A9 E0 C4 ; Load #$C4E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($E9.b,X)		; A1 E9 ; Load accumulator ($E9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $9C.b		; 02 9C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $D39C29.l		; CF 29 9C D3 ; Compare accumulator (long) $D39C29.l [Reads: Accumulator] [Flags: NCZ]
	adc #$D0B0.w		; 69 B0 D0 ; Add #$D0B0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$DFB0.w		; 69 B0 DF ; Add #$DFB0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $69DCC8.l		; 22 C8 DC 69 ; Jump to subroutine long $69DCC8.l [Writes: Stack Pointer] [Flow: call]
	.db $50, $D1		; 50 D1 ; Branch if overflow clear to $50, $D1 [Flow: branch]
	cpy $39.b		; C4 39 ; Compare $39.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cpx #$39C4.w		; E0 C4 39 ; Compare #$39C4.w with X register [Reads: X Index] [Flags: NCZ]
	sbc #$3402.w		; E9 02 34 ; Subtract #$3402.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	jmp.w [$3469]		; DC 69 34 ; Jump long indirect [$3469] [Flow: jump]
	cmp $CF4C22.l,X		; DF 22 4C CF ; Compare accumulator (long,X) $CF4C22.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	and #$D04C.w		; 29 4C D0 ; Logical AND #$D04C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$D360.w		; 69 60 D3 ; Add #$D360.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$A811.w		; 69 11 A8 ; Add #$A811.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cpy $10.b		; C4 10 ; Compare $10.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	lda ($C4.b),Y		; B1 C4 ; Load accumulator ($C4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$61A9.w		; 09 A9 61 ; Logical OR #$61A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	trb $A7.b		; 14 A7 ; Test and reset bits $A7.b [Reads: Accumulator] [Flags: Z]
	jsl $22D014.l		; 22 14 D0 22 ; Jump to subroutine long $22D014.l [Writes: Stack Pointer] [Flow: call]
	jsr $69BB.w		; 20 BB 69 ; Jump to subroutine at $69BB.w [Writes: Stack Pointer] [Flow: call]
	jsr $22B8.w		; 20 B8 22 ; Jump to subroutine at $22B8.w [Writes: Stack Pointer] [Flow: call]
	.db $30, $AB		; 30 AB ; Branch if minus to $30, $AB [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $39		; 10 39 ; Branch if plus to $10, $39 [Flow: branch]
	cpy $11.b		; C4 11 ; Compare $11.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $50, $C4		; 50 C4 ; Branch if overflow clear to $50, $C4 [Flow: branch]
	ora #$6139.w		; 09 39 61 ; Logical OR #$6139.w with accumulator [Writes: Accumulator] [Flags: NZ]
	trb $34.b		; 14 34 ; Test and reset bits $34.b [Reads: Accumulator] [Flags: Z]
	jsl $693720.l		; 22 20 37 69 ; Jump to subroutine long $693720.l [Writes: Stack Pointer] [Flow: call]
	jsr $224C.w		; 20 4C 22 ; Jump to subroutine at $224C.w [Writes: Stack Pointer] [Flow: call]
	trb $63.b		; 14 63 ; Test and reset bits $63.b [Reads: Accumulator] [Flags: Z]
	jsl $6A5330.l		; 22 30 53 6A ; Jump to subroutine long $6A5330.l [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	wai		; CB ; Wait for interrupt
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $6300.w		; 20 00 63 ; Jump to subroutine at $6300.w [Writes: Stack Pointer] [Flow: call]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $271CE1.l,X		; FF E1 1C 27 ; Subtract with carry (long,X) $271CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $1EA503.l,X		; 1F 03 A5 1E ; Logical OR long $1EA503.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DD642F.l,X		; DF 2F 64 DD ; Compare accumulator (long,X) $DD642F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda $FF64.w		; AD 64 FF ; Load $FF64.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $27CB.w,X		; 7D CB 27 ; Add $27CB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DEA504.l,X		; DF 04 A5 DE ; Compare accumulator (long,X) $DEA504.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tsb $17.b		; 04 17 ; Test and set bits $17.b [Reads: Accumulator] [Flags: Z]
	and $AD1563.l		; 2F 63 15 AD ; AND accumulator with memory (long) $AD1563.l [Writes: Accumulator] [Flags: NZ]
	adc $2B.b,S		; 63 2B ; Add with carry (stack relative) $2B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora [$A9.b]		; 07 A9 ; OR accumulator with memory (long) [$A9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF07.w		; 29 07 FF ; Logical AND #$FF07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $62, $9A, $DB		; 62 9A DB ; Push effective relative address $62, $9A, $DB [Writes: Stack Pointer]
	and ($68.b,S),Y		; 33 68 ; AND accumulator (stack relative indirect indexed) ($68.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $68B0.w,Y		; D9 B0 68 ; Compare accumulator $68B0.w,Y [Reads: Y Index] [Flags: NCZ]
	sbc $2B9B6D.l,X		; FF 6D 9B 2B ; Subtract with carry (long,X) $2B9B6D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$08D9.w		; A9 D9 08 ; Load #$08D9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($998D.w,X)		; FC 8D 99 ; Jump to subroutine indirect indexed ($998D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc [$21.b]		; 67 21 ; Add with carry (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $67		; B0 67 ; Branch if carry set to $B0, $67 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$6B		; C2 6B
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$AA		; C2 AA
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$60		; C2 60
	eor $29.b		; 45 29 ; Exclusive OR $29.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor #$606B.w		; 49 6B 60 ; Exclusive OR #$606B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($2A.b),Y		; 51 2A ; Exclusive OR accumulator with memory ($2A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($6A49.w)		; 6C 49 6A ; Jump indirect to ($6A49.w) [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc #$6029.w		; 69 29 60 ; Add #$6029.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $606B.w		; 6D 6B 60 ; Add $606B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $2A.b,X		; 75 2A ; Add $2A.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($6A6D.w)		; 6C 6D 6A ; Jump indirect to ($6A6D.w) [Flow: jump]
	.db $90, $45		; 90 45 ; Branch if carry clear to $90, $45 [Flow: branch]
	and #$4990.w		; 29 90 49 ; Logical AND #$4990.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $51		; 90 51 ; Branch if carry clear to $90, $51 [Flow: branch]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stz $6A49.w		; 9C 49 6A ; Store zero to $6A49.w
	.db $90, $69		; 90 69 ; Branch if carry clear to $90, $69 [Flow: branch]
	and #$6D90.w		; 29 90 6D ; Logical AND #$6D90.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $75		; 90 75 ; Branch if carry clear to $90, $75 [Flow: branch]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stz $6A6D.w		; 9C 6D 6A ; Store zero to $6A6D.w
	and $3B503B.l,X		; 3F 3B 50 3B ; AND accumulator with memory (long,X) $3B503B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $81397C.l,X		; 3F 7C 39 81 ; AND accumulator with memory (long,X) $81397C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($9F3F.w,X)		; 7C 3F 9F ; Jump indirect indexed to ($9F3F.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $82		; 50 82 ; Branch if overflow clear to $50, $82 [Flow: branch]
	stz $AD50.w		; 9C 50 AD ; Store zero to $AD50.w
	sta $CA50.w,X		; 9D 50 CA ; Store accumulator to $CA50.w,X [Reads: Accumulator, X Index]
	lda ($7C.b,X)		; A1 7C ; Load accumulator ($7C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $50CD.w		; AD CD 50 ; Load $50CD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda ($7C.b,X)		; A1 7C ; Load accumulator ($7C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	adc ($7C.b,X)		; 61 7C ; Add with carry ($7C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	eor $5D9C50.l,X		; 5F 50 9C 5D ; Exclusive OR accumulator with memory (long,X) $5D9C50.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $56		; 50 56 ; Branch if overflow clear to $50, $56 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp ($885A.w,X)		; 7C 5A 88 ; Jump indirect indexed to ($885A.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $83		; 50 83 ; Branch if overflow clear to $50, $83 [Flow: branch]
	and $80807C.l,X		; 3F 7C 80 80 ; AND accumulator with memory (long,X) $80807C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($305C.w,X)		; 7C 5C 30 ; Jump indirect indexed to ($305C.w,X) [Reads: X Index] [Flow: jump]
	jmp ($3070.w,X)		; 7C 70 30 ; Jump indirect indexed to ($3070.w,X) [Reads: X Index] [Flow: jump]
	jmp ($2E60.w,X)		; 7C 60 2E ; Jump indirect indexed to ($2E60.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $39		; 50 39 ; Branch if overflow clear to $50, $39 [Flow: branch]
	and $5DF8.w,Y		; 39 F8 5D ; AND accumulator with memory $5DF8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $3AF8.w		; 2D F8 3A ; Logical AND $3AF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $55F8.w,X		; 9D F8 55 ; Store accumulator to $55F8.w,X [Reads: Accumulator, X Index]
	eor $56F8.w,X		; 5D F8 56 ; Exclusive OR accumulator with memory $56F8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit #$83F8.w		; 89 F8 83 ; Test bits #$83F8.w with accumulator [Reads: Accumulator] [Flags: Z]
	and $ABF8.w,Y		; 39 F8 AB ; AND accumulator with memory $ABF8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $80F8.w,X		; 5D F8 80 ; Exclusive OR accumulator with memory $80F8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sta $CBF8.w,X		; 9D F8 CB ; Store accumulator to $CBF8.w,X [Reads: Accumulator, X Index]
	sta $AAF8.w,X		; 9D F8 AA ; Store accumulator to $AAF8.w,X [Reads: Accumulator, X Index]
	cmp $C8F8.w		; CD F8 C8 ; Compare $C8F8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	dec $73F8.w		; CE F8 73 ; Decrement $73F8.w [Flags: NZ]
	and $5EF8.w		; 2D F8 5E ; Logical AND $5EF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc ($3A.b)		; 72 3A ; Add with carry (indirect) ($3A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $5F.b,S		; 83 5F ; Store accumulator (stack relative) $5F.b,S [Reads: Stack Pointer, Accumulator]
	sed		; F8 ; Set decimal flag [Flags: D]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor [$F8.b]		; 47 F8 ; Exclusive OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy $29.b		; C4 29 ; Compare $29.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpy $0A.b		; C4 0A ; Compare $0A.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	jsr $2161.w		; 20 61 21 ; Jump to subroutine at $2161.w [Writes: Stack Pointer] [Flow: call]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	trb $3069.w		; 1C 69 30 ; Test and reset bits $3069.w [Reads: Accumulator] [Flags: Z]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	jsl $6A2C32.l		; 22 32 2C 6A ; Jump to subroutine long $6A2C32.l [Writes: Stack Pointer] [Flow: call]
	jsr $2250.w		; 20 50 22 ; Jump to subroutine at $2250.w [Writes: Stack Pointer] [Flow: call]
	jsr $6951.w		; 20 51 69 ; Jump to subroutine at $6951.w [Writes: Stack Pointer] [Flow: call]
	trb $60.b		; 14 60 ; Test and reset bits $60.b [Reads: Accumulator] [Flags: Z]
	jsl $FA531B.l		; 22 1B 53 FA ; Jump to subroutine long $FA531B.l [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr $5517.w		; 20 17 55 ; Jump to subroutine at $5517.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $B2		; 10 B2 ; Branch if plus to $10, $B2 [Flow: branch]
	cpy $09.b		; C4 09 ; Compare $09.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	lda ($61.b)		; B2 61 ; Load accumulator (indirect) ($61.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $AC.b		; 14 AC ; Test and reset bits $AC.b [Reads: Accumulator] [Flags: Z]
	jsl $69AC23.l		; 22 23 AC 69 ; Jump to subroutine long $69AC23.l [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda ($FA.b,S),Y		; B3 FA ; Load accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FFFF00.l		; 22 00 FF FF ; Jump to subroutine long $FFFF00.l [Writes: Stack Pointer] [Flow: call]
	sbc ($04.b,X)		; E1 04 ; Subtract with carry ($04.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($00A1.w,X)		; FC A1 00 ; Jump to subroutine indirect indexed ($00A1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $FC61.w		; 20 61 FC ; Jump to subroutine at $FC61.w [Writes: Stack Pointer] [Flow: call]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $62, $01, $FC		; 62 01 FC ; Push effective relative address $62, $01, $FC [Writes: Stack Pointer]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	jsr ($812B.w,X)		; FC 2B 81 ; Jump to subroutine indirect indexed ($812B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sta $FD.b,S		; 83 FD ; Store accumulator (stack relative) $FD.b,S [Reads: Stack Pointer, Accumulator]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $62, $01, $FD		; 62 01 FD ; Push effective relative address $62, $01, $FD [Writes: Stack Pointer]
	rol $06.b		; 26 06 ; Rotate left $06.b [Reads: Direct Page] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $FD62.w		; 20 62 FD ; Jump to subroutine at $FD62.w [Writes: Stack Pointer] [Flow: call]
	and ($02.b,X)		; 21 02 ; Logical AND ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $DF70.w,Y		; 19 70 DF ; OR accumulator with memory $DF70.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $82, $DF, $1B		; 82 DF 1B ; Branch always long to $82, $DF, $1B [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp $DF7049.l,X		; DF 49 70 DF ; Compare accumulator (long,X) $DF7049.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $82, $DF, $58		; 82 DF 58 ; Branch always long to $82, $DF, $58 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp $717138.l,X		; DF 38 71 71 ; Compare accumulator (long,X) $717138.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	mvp $71,$71		; 44 71 71 ; Move block positive $71,$71 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $80, $34		; 80 34 ; Branch always to $80, $34 [Flow: branch]
	and #$7185.w		; 29 85 71 ; Logical AND #$7185.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $34A6.w		; 2D A6 34 ; Logical AND $34A6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $82.b,X		; 55 82 ; Exclusive OR accumulator with memory $82.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $34		; 80 34 ; Branch always to $80, $34 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda ($FA.b,S),Y		; B3 FA ; Load accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $B3.b,S		; C3 B3 ; Compare accumulator (stack relative) $B3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $F992.w,X		; 3D 92 F9 ; AND accumulator with memory $F992.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	lda ($FE.b),Y		; B1 FE ; Load accumulator ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($FE.b),Y		; B1 FE ; Load accumulator ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $812A.w,X		; FE 2A 81 ; Increment memory $812A.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sta $A8.b		; 85 A8 ; Store accumulator to $A8.b [Reads: Accumulator]
	lda $FE61.w,Y		; B9 61 FE ; Load $FE61.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $9804.w		; AC 04 98 ; Load $9804.w into Y register [Writes: Y Index] [Flags: NZ]
	rep #$01		; C2 01 ; Reset processor status bits #$01 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	inc $002C.w,X		; FE 2C 00 ; Increment memory $002C.w,X [Reads: X Index] [Flags: NZ]
	inc $812D.w,X		; FE 2D 81 ; Increment memory $812D.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $FE02.w,Y		; D9 02 FE ; Compare accumulator $FE02.w,Y [Reads: Y Index] [Flags: NCZ]
	sta $FE85.w		; 8D 85 FE ; Store accumulator to $FE85.w [Reads: Accumulator]
	stx $FF81.w		; 8E 81 FF ; Store X register to $FF81.w [Reads: X Index]
	lsr $FF83.w		; 4E 83 FF ; Logical shift right $FF83.w [Flags: NCZ]
	eor $E087.w		; 4D 87 E0 ; Exclusive OR $E087.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $FF02.w,Y		; D9 02 FF ; Compare accumulator $FF02.w,Y [Reads: Y Index] [Flags: NCZ]
	lda $FF83.w		; AD 83 FF ; Load $FF83.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sta $D8.b,S		; 83 D8 ; Store accumulator (stack relative) $D8.b,S [Reads: Stack Pointer, Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta [$C8.b]		; 87 C8 ; Store accumulator (long) [$C8.b] [Reads: Direct Page, Accumulator]
	lda $FF62.w,Y		; B9 62 FF ; Load $FF62.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $D806.w		; 2C 06 D8 ; Test bits $D806.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	rep #$01		; C2 01 ; Reset processor status bits #$01 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $FE02AC.l,X		; FF AC 02 FE ; Subtract with carry (long,X) $FE02AC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $1E.b		; A5 1E ; Load $1E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$2D.b],Y		; 97 2D ; Store accumulator (long indexed) [$2D.b],Y [Reads: Direct Page, Y Index, Accumulator]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $A5C9.w,Y		; 59 C9 A5 ; Exclusive OR accumulator with memory $A5C9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $FF04.w,X		; 9E 04 FF ; Store zero to $FF04.w,X [Reads: X Index]
	adc $DFCB.w,Y		; 79 CB DF ; Add $DFCB.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FE64.w		; 2D 64 FE ; Logical AND $FE64.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $82, $98, $A9		; 82 98 A9 ; Branch always long to $82, $98, $A9 [Flow: branch]
	and #$FF07.w		; 29 07 FF ; Logical AND #$FF07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $62, $9A, $A3		; 62 9A A3 ; Push effective relative address $62, $9A, $A3 [Writes: Stack Pointer]
	.db $30, $67		; 30 67 ; Branch if minus to $30, $67 [Flow: branch]
	inc $9989.w,X		; FE 89 99 ; Increment memory $9989.w,X [Reads: X Index] [Flags: NZ]
	lda #$0899.w		; A9 99 08 ; Load #$0899.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $DB9B69.l,X		; FF 69 9B DB ; Subtract with carry (long,X) $DB9B69.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $68		; 30 68 ; Branch if minus to $30, $68 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.ACCU 16
.INDEX 16
	rep #$B8		; C2 B8
	ora $B8C4.w,Y		; 19 C4 B8 ; OR accumulator with memory $B8C4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $3B.b,X		; B4 3B ; Load Y register $3B.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	and [$B5.b]		; 27 B5 ; AND accumulator with memory (long) [$B5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $C969.w		; 1C 69 C9 ; Test and reset bits $C969.w [Reads: Accumulator] [Flags: Z]
	trb $BF69.w		; 1C 69 BF ; Test and reset bits $BF69.w [Reads: Accumulator] [Flags: Z]
	lsr $7C.b		; 46 7C ; Logical shift right $7C.b [Reads: Direct Page] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cpy $F9.b		; C4 F9 ; Compare $F9.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	lda $BFF840.l,X		; BF 40 F8 BF ; Load long $BFF840.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $F8.b		; 84 F8 ; Store Y register to $F8.b [Reads: Y Index]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sta ($C4.b),Y		; 91 C4 ; Store accumulator ($C4.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy $8F.b,X		; B4 8F ; Load Y register $8F.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda $8C.b,X		; B5 8C ; Load $8C.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$8CC9.w		; 69 C9 8C ; Add #$8CC9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$1309.w		; 69 09 13 ; Add #$1309.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cpy #$5009.w		; C0 09 50 ; Compare #$5009.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$1359.w		; C0 59 13 ; Compare #$1359.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$5059.w		; C0 59 50 ; Compare #$5059.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$CA0B.w		; C0 0B CA ; Compare #$CA0B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$CA4A.w		; C0 4A CA ; Compare #$CA4A.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$B889.w		; C0 89 B8 ; Compare #$B889.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpy #$E8E1.w		; C0 E1 E8 ; Compare #$E8E1.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($0A.b,X)		; 81 0A ; Store accumulator ($0A.b,X) [Reads: Direct Page, Accumulator, X Index]
	jsr $FF00.w		; 20 00 FF ; Jump to subroutine at $FF00.w [Writes: Stack Pointer] [Flow: call]
	sbc $9B00E1.l,X		; FF E1 00 9B ; Subtract with carry (long,X) $9B00E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
.INDEX 8
	sep #$D8		; E2 D8
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
.INDEX 8
	sep #$9B		; E2 9B
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
.INDEX 8
	sep #$D8		; E2 D8
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
.ACCU 8
.INDEX 8
	sep #$FE		; E2 FE
	jsr $9AC0.w		; 20 C0 9A ; Jump to subroutine at $9AC0.w [Writes: Stack Pointer] [Flow: call]
	asl $FF01.w		; 0E 01 FF ; Arithmetic shift left $FF01.w [Flags: NCZ]
	.db $90, $C2		; 90 C2 ; Branch if carry clear to $90, $C2 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $E661.w,X		; 1D 61 E6 ; OR accumulator with memory $E661.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $FF62.w,X		; 1E 62 FF ; Arithmetic shift left $FF62.w,X [Reads: X Index] [Flags: NCZ]
	stx $83.b,Y		; 96 83 ; Store X register $83.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	and ($30.b,X)		; 21 30 ; Logical AND ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $5821.w,X		; 5E 21 58 ; Logical shift right $5821.w,X [Reads: X Index] [Flags: NCZ]
	lsr $3820.w,X		; 5E 20 38 ; Logical shift right $3820.w,X [Reads: X Index] [Flags: NCZ]
	lsr $5020.w,X		; 5E 20 50 ; Logical shift right $5020.w,X [Reads: X Index] [Flags: NCZ]
	lsr $3019.w,X		; 5E 19 30 ; Logical shift right $3019.w,X [Reads: X Index] [Flags: NCZ]
	lsr $5819.w,X		; 5E 19 58 ; Logical shift right $5819.w,X [Reads: X Index] [Flags: NCZ]
	lsr $3240.w,X		; 5E 40 32 ; Logical shift right $3240.w,X [Reads: X Index] [Flags: NCZ]
	lda $5A40.w,Y		; B9 40 5A ; Load $5A40.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $4220.w,Y		; B9 20 42 ; Load $4220.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($19.b)		; 92 19 ; Store accumulator (indirect) ($19.b) [Reads: Direct Page, Accumulator]
	.db $42, $F9		; 42 F9 ; Reserved instruction
	asl $30.b,X		; 16 30 ; Arithmetic shift left $30.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc #$6A.b		; 69 6A ; Add #$6A.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $69		; 30 69 ; Branch if minus to $30, $69 [Flow: branch]
	and ($B7.b,S),Y		; 33 B7 ; AND accumulator (stack relative indirect indexed) ($B7.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor [$B7.b]		; 47 B7 ; Exclusive OR accumulator with memory (long) [$B7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and ($CF.b,S),Y		; 33 CF ; AND accumulator (stack relative indirect indexed) ($CF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor [$CF.b]		; 47 CF ; Exclusive OR accumulator with memory (long) [$CF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $F920.w,X		; 9E 20 F9 ; Store zero to $F920.w,X [Reads: X Index]
	ldx $20.b,Y		; B6 20 ; Load X register $20.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sbc $20CE.w,Y		; F9 CE 20 ; Subtract with carry $20CE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $449E.w,Y		; F9 9E 44 ; Subtract with carry $449E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $44B6.w,Y		; F9 B6 44 ; Subtract with carry $44B6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $44CE.w,Y		; F9 CE 44 ; Subtract with carry $44CE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9DA2.w,Y		; F9 A2 9D ; Subtract with carry $9DA2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$DE.b		; 69 DE ; Add #$DE.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $A069.w,X		; 9D 69 A0 ; Store accumulator to $A069.w,X [Reads: Accumulator, X Index]
	cmp $CFC422.l		; CF 22 C4 CF ; Compare accumulator (long) $CFC422.l [Reads: Accumulator] [Flags: NCZ]
	jsl $FA9F9B.l		; 22 9B 9F FA ; Jump to subroutine long $FA9F9B.l [Writes: Stack Pointer] [Flow: call]
	sbc $9F.b,S		; E3 9F ; Subtract stack-relative $9F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy $5ED8.w,X		; BC D8 5E ; Load Y register $5ED8.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda [$A2.b]		; A7 A2 ; Load accumulator (long) [$A2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $A2CF.w,X		; FE CF A2 ; Increment memory $A2CF.w,X [Reads: X Index] [Flags: NZ]
	inc $E1FC.w,X		; FE FC E1 ; Increment memory $E1FC.w,X [Reads: X Index] [Flags: NZ]
	and $11F7.w,Y		; 39 F7 11 ; AND accumulator with memory $11F7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $82, $28, $80		; 82 28 80 ; Branch always long to $82, $28, $80 [Flow: branch]
	rol $61.b,X		; 36 61 ; Rotate left $61.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF04E1.l,X		; FF E1 04 FF ; Subtract with carry (long,X) $FF04E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp ($51.b,X)		; C1 51 ; Compare accumulator ($51.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $07.b		; C5 07 ; Compare $07.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	lda ($63.b),Y		; B1 63 ; Load accumulator ($63.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FE, $C9		; 62 FE C9 ; Push effective relative address $62, $FE, $C9 [Writes: Stack Pointer]
	stx $C1.b		; 86 C1 ; Store X register to $C1.b [Reads: X Index]
	sta $FF01.w,Y		; 99 01 FF ; Store accumulator to $FF01.w,Y [Reads: Y Index, Accumulator]
	lda #$82.b		; A9 82 ; Load #$82.b into accumulator [Writes: Accumulator] [Flags: NZ]
	inc $012E.w,X		; FE 2E 01 ; Increment memory $012E.w,X [Reads: X Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sep #$02		; E2 02 ; Set processor status bits #$02 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $9603AE.l,X		; FF AE 03 96 ; Subtract with carry (long,X) $9603AE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($22.b),Y		; 31 22 ; AND accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cmp $62.b,S		; C3 62 ; Compare accumulator (stack relative) $62.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cpy #$C1.b		; C0 C1 ; Compare #$C1.b with Y register [Reads: Y Index] [Flags: NCZ]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sbc ($00.b)		; F2 00 ; Subtract with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta $1C.b,S		; 83 1C ; Store accumulator (stack relative) $1C.b,S [Reads: Stack Pointer, Accumulator]
	adc $00.b,S		; 63 00 ; Add with carry (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1CB1FF.l,X		; FF FF B1 1C ; Subtract with carry (long,X) $1CB1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$1F.b]		; 27 1F ; AND accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $FF03.w,X		; 1E 03 FF ; Arithmetic shift left $FF03.w,X [Reads: X Index] [Flags: NCZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DD642F.l,X		; DF 2F 64 DD ; Compare accumulator (long,X) $DD642F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda $FF64.w		; AD 64 FF ; Load $FF64.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $27CB.w,X		; 7D CB 27 ; Add $27CB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DEA504.l,X		; DF 04 A5 DE ; Compare accumulator (long,X) $DEA504.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	eor $17C9.w,X		; 5D C9 17 ; Exclusive OR accumulator with memory $17C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $AD1563.l		; 2F 63 15 AD ; AND accumulator with memory (long) $AD1563.l [Writes: Accumulator] [Flags: NZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($9882.w,X)		; FC 82 98 ; Jump to subroutine indirect indexed ($9882.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora [$A9.b]		; 07 A9 ; OR accumulator with memory (long) [$A9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $DB9A62.l,X		; FF 62 9A DB ; Subtract with carry (long,X) $DB9A62.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($68.b,S),Y		; 33 68 ; AND accumulator (stack relative indirect indexed) ($68.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $68B0.w,Y		; D9 B0 68 ; Compare accumulator $68B0.w,Y [Reads: Y Index] [Flags: NCZ]
	sbc $2B9B6D.l,X		; FF 6D 9B 2B ; Subtract with carry (long,X) $2B9B6D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$D9.b		; A9 D9 ; Load #$D9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr ($998D.w,X)		; FC 8D 99 ; Jump to subroutine indirect indexed ($998D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc [$21.b]		; 67 21 ; Add with carry (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $67		; B0 67 ; Branch if carry set to $B0, $67 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc #$59.b		; 69 59 ; Add #$59.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cpy $6B.b		; C4 6B ; Compare $6B.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$6B		; C2 6B
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$AA		; C2 AA
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$38		; C2 38
	jsr $39C4.w		; 20 C4 39 ; Jump to subroutine at $39C4.w [Writes: Stack Pointer] [Flow: call]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $1E.b,X		; 34 1E ; Test bits $1E.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	adc #$3335.w		; 69 35 33 ; Add #$3335.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $C422C2.l		; 22 C2 22 C4 ; Jump to subroutine long $C422C2.l [Writes: Stack Pointer] [Flow: call]
	cmp ($11.b,X)		; C1 11 ; Compare accumulator ($11.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($02.b,X)		; A1 02 ; Load accumulator ($02.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	nop		; EA ; No operation
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
.INDEX 16
	rep #$1D		; C2 1D
	adc #$38D6.w		; 69 D6 38 ; Add #$38D6.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$B8D8.w		; 69 D8 B8 ; Add #$B8D8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cpy $D8.b		; C4 D8 ; Compare $D8.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cpy #$E8C4.w		; C0 C4 E8 ; Compare #$E8C4.w with Y register [Reads: Y Index] [Flags: NCZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	.db $62, $C1, $BB		; 62 C1 BB ; Push effective relative address $62, $C1, $BB [Writes: Stack Pointer]
	jsl $22CFC1.l		; 22 C1 CF 22 ; Jump to subroutine long $22CFC1.l [Writes: Stack Pointer] [Flow: call]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpy $A1.b		; C4 A1 ; Compare $A1.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sbc #$A102.w		; E9 02 A1 ; Subtract #$A102.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp [$22.b],Y		; D7 22 ; Compare accumulator (long indexed) [$22.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $69.b,X		; D6 69 ; Decrement memory $69.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpy $39.b		; C4 39 ; Compare $39.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sbc #$3502.w		; E9 02 35 ; Subtract #$3502.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp [$22.b],Y		; D7 22 ; Compare accumulator (long indexed) [$22.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	bit $D6.b,X		; 34 D6 ; Test bits $D6.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	adc #$B818.w		; 69 18 B8 ; Add #$B818.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cpy $18.b		; C4 18 ; Compare $18.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cpy #$08C4.w		; C0 C4 08 ; Compare #$08C4.w with Y register [Reads: Y Index] [Flags: NCZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc ($15.b,X)		; 61 15 ; Add with carry ($15.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsl $22CF15.l		; 22 15 CF 22 ; Jump to subroutine long $22CF15.l [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $09C4.w,Y		; 39 C4 09 ; AND accumulator with memory $09C4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	adc ($14.b,X)		; 61 14 ; Add with carry ($14.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsl $69382A.l		; [PATTERN: Memory clearing operation] 22 2A 38 69 ; Jump to subroutine long $69382A.l [Writes: Stack Pointer] [Flow: call]
	adc #$C470.w		; 69 70 C4 ; Add #$C470.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	stz $58.b		; 64 58 ; Store zero to $58.b
	jsl $695A65.l		; 22 65 5A 69 ; Jump to subroutine long $695A65.l [Writes: Stack Pointer] [Flow: call]
	stz $7C.b		; 64 7C ; Store zero to $7C.b
	jsl $697F70.l		; 22 70 7F 69 ; Jump to subroutine long $697F70.l [Writes: Stack Pointer] [Flow: call]
	sta [$58.b]		; 87 58 ; Store accumulator (long) [$58.b] [Reads: Direct Page, Accumulator]
	adc #$6269.w		; 69 69 62 ; Add #$6269.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $2348.w,Y		; F9 48 23 ; Subtract with carry $2348.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	dec $3A.b		; C6 3A ; Decrement $3A.b [Reads: Direct Page] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor ($FB.b)		; 52 FB ; Exclusive OR accumulator with memory (indirect) ($FB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp ($BF.b,X)		; C1 BF ; Compare accumulator ($BF.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda ($DB.b,X)		; A1 DB ; Load accumulator ($DB.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda $521AFB.l,X		; BF FB 1A 52 ; Load long $521AFB.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ror $82.b,X		; 76 82 ; Rotate right $82.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	adc [$5A.b],Y		; 77 5A ; Add with carry (long indexed) [$5A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $53.b		; 24 53 ; Test bits $53.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	adc $4B70.w,X		; 7D 70 4B ; Add $4B70.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($93.b,S),Y		; 53 93 ; XOR accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($7D.b,S),Y		; 53 7D ; XOR accumulator (stack relative indirect indexed) ($7D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $90, $D1		; 90 D1 ; Branch if carry clear to $90, $D1 [Flow: branch]
	adc $DC98.w,X		; 7D 98 DC ; Add $DC98.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($78.b,S),Y		; 53 78 ; XOR accumulator (stack relative indirect indexed) ($78.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $42, $7D		; 42 7D ; Reserved instruction
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor ($5B.b,S),Y		; 53 5B ; XOR accumulator (stack relative indirect indexed) ($5B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $7D.b,S		; 43 7D ; Exclusive OR accumulator with stack relative $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

.INDEX 16
	rep #$53		; C2 53
	trb $7D69.w		; 1C 69 7D ; Test and reset bits $7D69.w [Reads: Accumulator] [Flags: Z]
	and ($78.b,X)		; 21 78 ; Logical AND ($78.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor ($49.b,S),Y		; 53 49 ; XOR accumulator (stack relative indirect indexed) ($49.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($7D.b,X)		; 81 7D ; Store accumulator ($7D.b,X) [Reads: Direct Page, Accumulator, X Index]
	eor ($B3.b)		; 52 B3 ; Exclusive OR accumulator with memory (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($B1.b,S),Y		; 53 B1 ; XOR accumulator (stack relative indirect indexed) ($B1.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($7D.b,X)		; 81 7D ; Store accumulator ($7D.b,X) [Reads: Direct Page, Accumulator, X Index]
	lda $5378.w,Y		; B9 78 53 ; Load $5378.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$7D69]		; DC 69 7D ; Jump long indirect [$7D69] [Flow: jump]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor ($7D.b),Y		; 51 7D ; Exclusive OR accumulator with memory ($7D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	adc $53.b,S		; 63 53 ; Add with carry (stack relative) $53.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lda ($6A.b,X)		; A1 6A ; Load accumulator ($6A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $A171.w,X		; 7D 71 A1 ; Add $A171.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($69.b,S),Y		; 53 69 ; XOR accumulator (stack relative indirect indexed) ($69.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	adc $DC60.w,X		; 7D 60 DC ; Add $DC60.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($79.b,S),Y		; 53 79 ; XOR accumulator (stack relative indirect indexed) ($79.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $C381.w,X		; 7D 81 C3 ; Add $C381.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($68.b,S),Y		; 53 68 ; XOR accumulator (stack relative indirect indexed) ($68.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and $78FC.w,Y		; 39 FC 78 ; AND accumulator with memory $78FC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	jsr ($497A.w,X)		; FC 7A 49 ; Jump to subroutine indirect indexed ($497A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($4B6B.w,X)		; FC 6B 4B ; Jump to subroutine indirect indexed ($4B6B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda ($FC.b),Y		; B1 FC ; Load accumulator ($FC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $FCC0.w,Y		; 59 C0 FC ; Exclusive OR accumulator with memory $FCC0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda ($FB.b,S),Y		; B3 FB ; Load accumulator (stack relative indirect indexed) ($FB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($7B1F.w,X)		; FC 1F 7B ; Jump to subroutine indirect indexed ($7B1F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $FB.b,S		; A3 FB ; Load accumulator (stack relative) $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc #$FCDC.w		; 69 DC FC ; Add #$FCDC.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda ($FC.b,X)		; A1 FC ; Load accumulator ($FC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda ($FC.b),Y		; B1 FC ; Load accumulator ($FC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $FB.b,S		; C3 FB ; Compare accumulator (stack relative) $FB.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta ($A1.b)		; 92 A1 ; Store accumulator (indirect) ($A1.b) [Reads: Direct Page, Accumulator]
	jsr ($B192.w,X)		; FC 92 B1 ; Jump to subroutine indirect indexed ($B192.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($C192.w,X)		; FC 92 C1 ; Jump to subroutine indirect indexed ($C192.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($DF93.w,X)		; FC 93 DF ; Jump to subroutine indirect indexed ($DF93.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda ($A0.b,X)		; A1 A0 ; Load accumulator ($A0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($B0B1.w,X)		; FC B1 B0 ; Jump to subroutine indirect indexed ($B0B1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($63A2.w,X)		; FC A2 63 ; Jump to subroutine indirect indexed ($63A2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda ($7B.b)		; B2 7B ; Load accumulator (indirect) ($7B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cmp $FC78.w,X		; DD 78 FC ; Compare accumulator $FC78.w,X [Reads: X Index] [Flags: NCZ]
	cmp #$FC60.w		; C9 60 FC ; Compare #$FC60.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $48		; 90 48 ; Branch if carry clear to $90, $48 [Flow: branch]
	jsr ($FFFF.w,X)		; FC FF FF ; Jump to subroutine indirect indexed ($FFFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($19.b,S),Y		; 13 19 ; OR accumulator (stack relative indirect indexed) ($19.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	eor ($19.b,S),Y		; 53 19 ; XOR accumulator (stack relative indirect indexed) ($19.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta ($19.b,S),Y		; 93 19 ; Store accumulator (stack relative indirect indexed) ($19.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp ($1B.b),Y		; D1 1B ; Compare accumulator ($1B.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp ($5B.b),Y		; D1 5B ; Compare accumulator ($5B.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp ($9B.b),Y		; D1 9B ; Compare accumulator ($9B.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora ($3B.b),Y		; 11 3B ; OR accumulator with memory ($3B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora ($7B.b),Y		; 11 7B ; OR accumulator with memory ($7B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora ($BB.b,S),Y		; 13 BB ; OR accumulator (stack relative indirect indexed) ($BB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	eor ($D9.b,S),Y		; 53 D9 ; XOR accumulator (stack relative indirect indexed) ($D9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta ($D9.b,S),Y		; 93 D9 ; Store accumulator (stack relative indirect indexed) ($D9.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp ($D9.b),Y		; D1 D9 ; Compare accumulator ($D9.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($1C.b,X)		; 81 1C ; Store accumulator ($1C.b,X) [Reads: Direct Page, Accumulator, X Index]
	jsl $00001C.l		; 22 1C 00 00 ; Jump to subroutine long $00001C.l [Writes: Stack Pointer] [Flow: call]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $00.b,S		; 63 00 ; Add with carry (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	sbc $1C51FF.l,X		; FF FF 51 1C ; Subtract with carry (long,X) $1C51FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($00A1.w,X)		; FC A1 00 ; Jump to subroutine indirect indexed ($00A1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($04A2.w,X)		; FC A2 04 ; Jump to subroutine indirect indexed ($04A2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $22FC01.l		; 22 01 FC 22 ; Jump to subroutine long $22FC01.l [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $53		; D0 53 ; Branch if not equal to $D0, $53 [Flow: branch]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp ($60.b,X)		; C1 60 ; Compare accumulator ($60.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	.db $62, $FF, $08		; 62 FF 08 ; Push effective relative address $62, $FF, $08 [Writes: Stack Pointer]
	asl $D0.b		; 06 D0 ; Arithmetic shift left $D0.b [Reads: Direct Page] [Flags: NCZ]
	sta $01.b,S		; 83 01 ; Store accumulator (stack relative) $01.b,S [Reads: Stack Pointer, Accumulator]
	sbc $FD02A8.l,X		; FF A8 02 FD ; Subtract with carry (long,X) $FD02A8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($CC.b)		; 72 CC ; Add with carry (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	mvp $03,$2E		; 44 2E 03 ; Move block positive $03,$2E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jsr ($C8D2.w,X)		; FC D2 C8 ; Jump to subroutine indirect indexed ($C8D2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $3D.b,X		; 35 3D ; Logical AND $3D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	dec $8C.b,X		; D6 8C ; Decrement memory $8C.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	bit $69.b		; 24 69 ; Test bits $69.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $88.b,X		; 56 88 ; Logical shift right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $79.b,X		; 15 79 ; OR accumulator with memory $79.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	bit #$A924.w		; 89 24 A9 ; Test bits #$A924.w with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $B835.w		; 8D 35 B8 ; Store accumulator to $B835.w [Reads: Accumulator]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp $46C9.w,X		; DD C9 46 ; Compare accumulator $46C9.w,X [Reads: X Index] [Flags: NCZ]
	cmp $8DFE04.l,X		; DF 04 FE 8D ; Compare accumulator (long,X) $8DFE04.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	wai		; CB ; Wait for interrupt
	ldy #$64D4.w		; A0 D4 64 ; Load #$64D4.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $4F8C.w,X		; FE 8C 4F ; Increment memory $4F8C.w,X [Reads: X Index] [Flags: NZ]
	lda ($C5.b),Y		; B1 C5 ; Load accumulator ($C5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	jmp ($DD4B.w,X)		; 7C 4B DD ; Jump indirect indexed to ($DD4B.w,X) [Reads: X Index] [Flow: jump]
	stz $FF64.w		; 9C 64 FF ; Store zero to $FF64.w
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpy $8E.b		; C4 8E ; Compare $8E.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	dec $56B5.w		; CE B5 56 ; Decrement $56B5.w [Flags: NZ]
	stz $FE.b		; [PATTERN: Memory clearing operation] 64 FE ; Store zero to $FE.b
	pei ($4F.b)		; D4 4F ; Push effective indirect address ($4F.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cpy $46.b		; C4 46 ; Compare $46.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	stz $4B.b,X		; 74 4B ; Store zero to $4B.b,X [Reads: X Index]
	jmp.w [$643C]		; DC 3C 64 ; Jump long indirect [$643C] [Flow: jump]
	sbc $9DCA72.l,X		; FF 72 CA 9D ; Subtract with carry (long,X) $9DCA72.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $32FE03.l		; 2F 03 FE 32 ; AND accumulator with memory (long) $32FE03.l [Writes: Accumulator] [Flags: NZ]
	dec $31FE.w		; CE FE 31 ; Decrement $31FE.w [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $C871.w,X		; FD 71 C8 ; Subtract with carry $C871.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($031F.w)		; 6C 1F 03 ; Jump indirect to ($031F.w) [Flow: jump]
	sbc $8768.w,X		; FD 68 87 ; Subtract with carry $8768.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta $59.b		; 85 59 ; Store accumulator to $59.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $62, $FD, $6B		; 62 FD 6B ; Push effective relative address $62, $FD, $6B [Writes: Stack Pointer]
	stx $68.b		; 86 68 ; Store X register to $68.b [Reads: X Index]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sty $79.b		; 84 79 ; Store Y register to $79.b [Reads: Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	pei ($4F.b)		; D4 4F ; Push effective indirect address ($4F.b) [Reads: Direct Page] [Writes: Stack Pointer]
	sty $46.b		; [PATTERN: Memory clearing operation] 84 46 ; Store Y register to $46.b [Reads: Y Index]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	stz $4D.b,X		; 74 4D ; Store zero to $4D.b,X [Reads: X Index]
	adc $54.b,X		; 75 54 ; Add $54.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $FD.b		; 64 FD ; Store zero to $FD.b
	cmp [$CB.b],Y		; D7 CB ; Compare accumulator (long indexed) [$CB.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	jmp $FD047E.l		; 5C 7E 04 FD ; Jump long to $FD047E.l [Flow: jump]
	and [$CF.b],Y		; 37 CF ; AND accumulator with memory (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $648E.w		; 4D 8E 64 ; Exclusive OR $648E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $4E3C.w,X		; FD 3C 4E ; Subtract with carry $4E3C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $03C4.w,X		; 5D C4 03 ; Exclusive OR accumulator with memory $03C4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $4C1C.w,X		; FE 1C 4C ; Increment memory $4C1C.w,X [Reads: X Index] [Flags: NZ]
	sta $9C.b		; 85 9C ; Store accumulator to $9C.b [Reads: Accumulator]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $8C.b,X		; 94 8C ; Store Y register $8C.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpy $569D.w		; CC 9D 56 ; Compare $569D.w with Y register [Reads: Y Index] [Flags: NCZ]
	adc $8F.b,S		; 63 8F ; Add with carry (stack relative) $8F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $23.b,S		; C3 23 ; Compare accumulator (stack relative) $23.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($23.b,S),Y		; D3 23 ; Compare accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr ($38E1.w,X)		; FC E1 38 ; Jump to subroutine indirect indexed ($38E1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $F122.w,X		; FD 22 F1 ; Subtract with carry $F122.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $F182.w,X		; FE 82 F1 ; Increment memory $F182.w,X [Reads: X Index] [Flags: NZ]
	cpy $F9C7.w		; CC C7 F9 ; Compare $F9C7.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora #$C010.w		; 09 10 C0 ; Logical OR #$C010.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($61.b)		; D2 61 ; Compare accumulator (indirect) ($61.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $68.b		; C5 68 ; Compare $68.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $F9C5.w,Y		; 99 C5 F9 ; Store accumulator to $F9C5.w,Y [Reads: Y Index, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $3BC622.l,X		; 5F 22 C6 3B ; Exclusive OR accumulator with memory (long,X) $3BC622.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($C6.b,S),Y		; 33 C6 ; AND accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc $A41BC6.l		; 6F C6 1B A4 ; Add with carry (long) $A41BC6.l [Writes: Accumulator] [Flags: NCVZ]
	dec $39.b		; C6 39 ; Decrement $39.b [Reads: Direct Page] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	dec $52.b		; C6 52 ; Decrement $52.b [Reads: Direct Page] [Flags: NZ]
	eor $3183C6.l		; 4F C6 83 31 ; Exclusive OR accumulator with memory (long) $3183C6.l [Writes: Accumulator] [Flags: NZ]
	dec $BA.b		; C6 BA ; Decrement $BA.b [Reads: Direct Page] [Flags: NZ]
	and ($C6.b),Y		; 31 C6 ; AND accumulator with memory ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($53.b,X)		; A1 53 ; Load accumulator ($53.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	dec $8B.b		; C6 8B ; Decrement $8B.b [Reads: Direct Page] [Flags: NZ]
	sta ($C6.b,S),Y		; 93 C6 ; Store accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp #$C693.w		; C9 93 C6 ; Compare #$C693.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	cmp #$8DC6.w		; C9 C6 8D ; Compare #$8DC6.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$24C6.w		; C9 C6 24 ; Compare #$24C6.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $7D.b,S		; 63 7D ; Add with carry (stack relative) $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	bit $5381.w		; 2C 81 53 ; Test bits $5381.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $7D8A.w,X		; 3C 8A 7D ; Test bits $7D8A.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	mvp $53,$9E		; 44 9E 53 ; Move block positive $53,$9E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and #$53AE.w		; 29 AE 53 ; Logical AND #$53AE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $B4.b		; 24 B4 ; Test bits $B4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc $536D.w,X		; 7D 6D 53 ; Add $536D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $4B76.w,X		; 7D 76 4B ; Add $4B76.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($D4.b,S),Y		; 53 D4 ; XOR accumulator (stack relative indirect indexed) ($D4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $7D		; 50 7D ; Branch if overflow clear to $50, $7D [Flow: branch]
	jmp ($7DC3.w)		; 6C C3 7D ; Jump indirect to ($7DC3.w) [Flow: jump]
	adc $DF.b,X		; 75 DF ; Add $DF.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($84.b,S),Y		; 53 84 ; XOR accumulator (stack relative indirect indexed) ($84.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $8D53.w		; AC 53 8D ; Load $8D53.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc $9D86.w,X		; 7D 86 9D ; Add $9D86.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($D4.b,S),Y		; 53 D4 ; XOR accumulator (stack relative indirect indexed) ($D4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $227D.w		; 8D 7D 22 ; Store accumulator to $227D.w [Reads: Accumulator]
	lsr $23FB.w		; 4E FB 23 ; Logical shift right $23FB.w [Flags: NCZ]
	ldx $8AFB.w,Y		; BE FB 8A ; Load X register $8AFB.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc ($FB.b)		; 72 FB ; Add with carry (indirect) ($FB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda $DB.b,X		; B5 DB ; Load $DB.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	and [$83.b]		; 27 83 ; AND accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	bit $FC80.w,X		; 3C 80 FC ; Test bits $FC80.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	and $5DFB9F.l,X		; 3F 9F FB 5D ; AND accumulator with memory (long,X) $5DFB9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $5DFC.w,X		; 9D FC 5D ; Store accumulator to $5DFC.w,X [Reads: Accumulator, X Index]
	lda $26FC.w		; AD FC 26 ; Load $26FC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $DF6FFB.l		; AF FB 6F DF ; Load long $DF6FFB.l into accumulator [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ror $FCBC.w		; 6E BC FC ; Rotate right $FCBC.w [Flags: NCZ]
	jmp ($FCAD.w,X)		; 7C AD FC ; Jump indirect indexed to ($FCAD.w,X) [Reads: X Index] [Flow: jump]
	jmp ($FC9D.w,X)		; 7C 9D FC ; Jump indirect indexed to ($FC9D.w,X) [Reads: X Index] [Flow: jump]
	sta $FCAC.w		; 8D AC FC ; Store accumulator to $FCAC.w [Reads: Accumulator]
	stx $FC9D.w		; 8E 9D FC ; Store X register to $FC9D.w [Reads: X Index]
	cmp $9C.b,X		; D5 9C ; Compare accumulator $9C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	jsr ($84D6.w,X)		; FC D6 84 ; Jump to subroutine indirect indexed ($84D6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($8C6F.w,X)		; FC 6F 8C ; Jump to subroutine indirect indexed ($8C6F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($4B6E.w,X)		; FC 6E 4B ; Jump to subroutine indirect indexed ($4B6E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	pei ($48.b)		; D4 48 ; Push effective indirect address ($48.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsr ($54D7.w,X)		; FC D7 54 ; Jump to subroutine indirect indexed ($54D7.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($1C9C.w,X)		; FC 9C 1C ; Jump to subroutine indirect indexed ($1C9C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc #$2BB2.w		; 69 B2 2B ; Add #$2BB2.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $691C58.l		; 22 58 1C 69 ; Jump to subroutine long $691C58.l [Writes: Stack Pointer] [Flow: call]
	bit $29.b,X		; 34 29 ; Test bits $29.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	jsl $692F32.l		; 22 32 2F 69 ; Jump to subroutine long $692F32.l [Writes: Stack Pointer] [Flow: call]
	trb $64.b		; 14 64 ; Test and reset bits $64.b [Reads: Accumulator] [Flags: Z]
	jsl $22B814.l		; 22 14 B8 22 ; Jump to subroutine long $22B814.l [Writes: Stack Pointer] [Flow: call]
	and ($B9.b)		; 32 B9 ; AND accumulator with memory (indirect) ($B9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$5686.w		; 69 86 56 ; Add #$5686.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$5684.w		; 69 84 56 ; Add #$5684.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $695498.l		; 22 98 54 69 ; Jump to subroutine long $695498.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($69.b,S),Y		; 73 69 ; Add with carry (stack relative indirect indexed) ($69.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $D7		; B0 D7 ; Branch if carry set to $B0, $D7 [Flow: branch]
	jsl $22D4DC.l		; 22 DC D4 22 ; Jump to subroutine long $22D4DC.l [Writes: Stack Pointer] [Flow: call]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsl $000218.l		; 22 18 02 00 ; Jump to subroutine long $000218.l [Writes: Stack Pointer] [Flow: call]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $23.b,S		; 63 23 ; Add with carry (stack relative) $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc $FA.b,S		; 63 FA ; Add with carry (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	eor ($FE.b,X)		; 41 FE ; Exclusive OR accumulator with memory ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($FE.b,X)		; 21 FE ; Logical AND ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpx #$FE21.w		; E0 21 FE ; Compare #$FE21.w with X register [Reads: X Index] [Flags: NCZ]
	ldy $1D.b,X		; B4 1D ; Load Y register $1D.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	adc #$1DC8.w		; 69 C8 1D ; Add #$1DC8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$50B8.w		; 69 B8 50 ; Add #$50B8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $00A9FC.l		; 22 FC A9 00 ; Jump to subroutine long $00A9FC.l [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldx #$FC61.w		; A2 61 FC ; Load #$FC61.w into X register [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cpy $18.b		; C4 18 ; Compare $18.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ldx $FC01.w		; AE 01 FC ; Load $FC01.w into X register [Writes: X Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpy #$2CFC.w		; C0 FC 2C ; Compare #$2CFC.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp ($1A.b,X)		; C1 1A ; Compare accumulator ($1A.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	dec $FD02.w		; CE 02 FD ; Decrement $FD02.w [Flags: NZ]
	ldy $58C3.w		; AC C3 58 ; Load $58C3.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $FD01.w		; AE 01 FD ; Load $FD01.w into X register [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	rep #$48		; C2 48 ; Reset processor status bits #$48 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ldx #$FD62.w		; A2 62 FD ; Load #$FD62.w into X register [Writes: X Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dec $FD.b		; C6 FD ; Decrement $FD.b [Reads: Direct Page] [Flags: NZ]
	and #$FE02.w		; 29 02 FE ; Logical AND #$FE02.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpy #$AD98.w		; C0 98 AD ; Compare #$AD98.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora ($9C.b,X)		; 01 9C ; Logical OR ($9C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldx #$FE61.w		; A2 61 FE ; Load #$FE61.w into X register [Writes: X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cpy $FE.b		; C4 FE ; Compare $FE.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	adc $FF00.w,Y		; 79 00 FF ; Add $FF00.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $D602.w,Y		; 59 02 D6 ; Exclusive OR accumulator with memory $D602.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($62.b,X)		; A1 62 ; Load accumulator ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $9C835E.l,X		; FF 5E 83 9C ; Subtract with carry (long,X) $9C835E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $61.b		; E5 61 ; Subtract $61.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $817E.w,X		; FE 7E 81 ; Increment memory $817E.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $02.b,X		; D5 02 ; Compare accumulator $02.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	inc $457D.w,X		; FE 7D 45 ; Increment memory $457D.w,X [Reads: X Index] [Flags: NZ]
	inc $412D.w,X		; FE 2D 41 ; Increment memory $412D.w,X [Reads: X Index] [Flags: NZ]
	lda $FBAC.w,Y		; B9 AC FB ; Load $FBAC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$69B8.w		; A9 B8 69 ; Load #$69B8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($C8.b)		; B2 C8 ; Load accumulator (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $AE.b,S		; C3 AE ; Compare accumulator (stack relative) $AE.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cpy $27.b		; C4 27 ; Compare $27.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ldy $6ACA.w		; AC CA 6A ; Load $6ACA.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $28D4.w		; AE D4 28 ; Load $28D4.w into X register [Writes: X Index] [Flags: NZ]
	pei ($CA.b)		; D4 CA ; Push effective indirect address ($CA.b) [Reads: Direct Page] [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $CC.b,S		; C3 CC ; Compare accumulator (stack relative) $CC.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora #$C08D.w		; 09 8D C0 ; Logical OR #$C08D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $C08D.w,Y		; 59 8D C0 ; Exclusive OR accumulator with memory $C08D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $4AC0.w,X		; DD C0 4A ; Compare accumulator $4AC0.w,X [Reads: X Index] [Flags: NCZ]
	cmp $7DC0.w,X		; DD C0 7D ; Compare accumulator $7DC0.w,X [Reads: X Index] [Flags: NCZ]
	cpx $C0.b		; E4 C0 ; Compare $C0.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	sty $F3.b		; 84 F3 ; Store Y register to $F3.b [Reads: Y Index]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $E7C0.w		; 8D C0 E7 ; Store accumulator to $E7C0.w [Reads: Accumulator]
	sta ($60.b),Y		; 91 60 ; Store accumulator ($60.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sbc $F36091.l		; EF 91 60 F3 ; Subtract with carry (long) $F36091.l [Writes: Accumulator] [Flags: NCVZ]
	sta ($60.b),Y		; 91 60 ; Store accumulator ($60.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr $621E.w		; 20 1E 62 ; Jump to subroutine at $621E.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	.db $80, $38		; 80 38 ; Branch always to $80, $38 [Flow: branch]
	sta ($0A.b,X)		; 81 0A ; Store accumulator ($0A.b,X) [Reads: Direct Page, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl L000200.l		; 22 00 82 00 ; Jump to subroutine long L000200.l [Writes: Stack Pointer] [Flow: call]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0008.w,X)		; FC 08 00 ; Jump to subroutine indirect indexed ($0008.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($80.b,S),Y		; 13 80 ; OR accumulator (stack relative indirect indexed) ($80.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($FD.b,X)		; 01 FD ; Logical OR ($FD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($61.b,S),Y		; 93 61 ; Store accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	jsr ($810E.w,X)		; FC 0E 81 ; Jump to subroutine indirect indexed ($810E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($E8.b,S),Y		; 13 E8 ; OR accumulator (stack relative indirect indexed) ($E8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $7283.w		; CE 83 72 ; Decrement $7283.w [Flags: NZ]
	sta ($62.b,S),Y		; 93 62 ; Store accumulator (stack relative indirect indexed) ($62.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora ($93.b,S),Y		; 13 93 ; OR accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy $51.b		; C4 51 ; Compare $51.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sta ($C4.b,S),Y		; 93 C4 ; Store accumulator (stack relative indirect indexed) ($C4.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	eor ($C9.b),Y		; 51 C9 ; Exclusive OR accumulator with memory ($C9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy $10.b		; C4 10 ; Compare $10.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cmp #$0EC4.w		; C9 C4 0E ; Compare #$0EC4.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $0DDE.w		; 8D DE 0D ; Store accumulator to $0DDE.w [Reads: Accumulator]
	stz $0CDE.w		; 9C DE 0C ; Store zero to $0CDE.w
	lda $DE.b		; A5 DE ; Load $DE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $DE8C.w,X		; 5E 8C DE ; Logical shift right $DE8C.w,X [Reads: X Index] [Flags: NCZ]
	adc $94.b		; 65 94 ; Add $94.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dec $9C6C.w,X		; DE 6C 9C ; Decrement memory $9C6C.w,X [Reads: X Index] [Flags: NZ]
	dec $FFFF.w,X		; DE FF FF ; Decrement memory $FFFF.w,X [Reads: X Index] [Flags: NZ]
	rol $FF98.w		; 2E 98 FF ; Rotate left $FF98.w [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1CE2FF.l,X		; FF FF E2 1C ; Subtract with carry (long,X) $1CE2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $1F8303.l,X		; 1F 03 83 1F ; Logical OR long $1F8303.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora [$83.b]		; 07 83 ; OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $DF8304.l,X		; DF 04 83 DF ; Compare accumulator (long,X) $DF8304.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $DB.b,S		; 83 DB ; Store accumulator (stack relative) $DB.b,S [Reads: Stack Pointer, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rep #$43		; C2 43 ; Reset processor status bits #$43 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $33.b,S		; 83 33 ; Store accumulator (stack relative) $33.b,S [Reads: Stack Pointer, Accumulator]
	rep #$C3		; C2 C3 ; Reset processor status bits #$C3 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $73.b,S		; 03 73 ; OR accumulator with stack relative $73.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rep #$43		; C2 43 ; Reset processor status bits #$43 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sta $73.b,S		; 83 73 ; Store accumulator (stack relative) $73.b,S [Reads: Stack Pointer, Accumulator]
	rep #$C3		; C2 C3 ; Reset processor status bits #$C3 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $AA.b,S		; 03 AA ; OR accumulator with stack relative $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rep #$43		; C2 43 ; Reset processor status bits #$43 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	rep #$83		; C2 83 ; Reset processor status bits #$83 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	rep #$C3		; C2 C3 ; Reset processor status bits #$C3 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	rep #$43		; C2 43 ; Reset processor status bits #$43 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sec		; 38 ; Set carry flag [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor $3F.b,S		; 43 3F ; Exclusive OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp ($8343.w,X)		; 7C 43 83 ; Jump indirect indexed to ($8343.w,X) [Reads: X Index] [Flow: jump]
	jmp ($C440.w,X)		; 7C 40 C4 ; Jump indirect indexed to ($C440.w,X) [Reads: X Index] [Flow: jump]
	jmp ($CC43.w,X)		; 7C 43 CC ; Jump indirect indexed to ($CC43.w,X) [Reads: X Index] [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	and ($10.b),Y		; 31 10 ; AND accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b,X)		; 01 2D ; Logical OR ($2D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($27.b,S),Y		; 33 27 ; AND accumulator (stack relative indirect indexed) ($27.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $30, $11		; 30 11 ; Branch if minus to $30, $11 [Flow: branch]
	sbc $691E2C.l,X		; FF 2C 1E 69 ; Subtract with carry (long,X) $691E2C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $1E		; 50 1E ; Branch if overflow clear to $50, $1E [Flow: branch]
	adc #$1520.w		; 69 20 15 ; Add #$1520.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $33.b,X		; 55 33 ; Exclusive OR accumulator with memory $33.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpy $71.b		; C4 71 ; Compare $71.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpy $36.b		; C4 36 ; Compare $36.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cop $78.b		; 02 78 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	adc $E3.b,S		; 63 E3 ; Add with carry (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and ($D5.b),Y		; 31 D5 ; AND accumulator with memory ($D5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $30, $D6		; 30 D6 ; Branch if minus to $30, $D6 [Flow: branch]
	adc #$D44F.w		; 69 4F D4 ; Add #$D44F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $69D68C.l		; 22 8C D6 69 ; Jump to subroutine long $69D68C.l [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $6C28.w,X		; 3D 28 6C ; AND accumulator with memory $6C28.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $9828.w,X		; 3D 28 98 ; AND accumulator with memory $9828.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $4054.w,X		; 3D 54 40 ; AND accumulator with memory $4054.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $6C54.w,X		; 3D 54 6C ; AND accumulator with memory $6C54.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $9854.w,X		; 3D 54 98 ; AND accumulator with memory $9854.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $5028.w,X		; 3D 28 50 ; AND accumulator with memory $5028.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $28.b,S		; 03 28 ; OR accumulator with stack relative $28.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp ($2803.w,X)		; 7C 03 28 ; Jump indirect indexed to ($2803.w,X) [Reads: X Index] [Flow: jump]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora $54.b,S		; 03 54 ; OR accumulator with stack relative $54.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $03		; 50 03 ; Branch if overflow clear to $50, $03 [Flow: branch]
	mvn $03,$7C		; 54 7C 03 ; Move block negative $03,$7C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $03,$A8		; 54 A8 03 ; Move block negative $03,$A8 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jmp $882807.l		; 5C 07 28 88 ; Jump long to $882807.l [Flow: jump]
	ora [$28.b]		; 07 28 ; OR accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $07.b,X		; B4 07 ; Load Y register $07.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	mvn $07,$5C		; 54 5C 07 ; Move block negative $07,$5C [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $07,$88		; 54 88 07 ; Move block negative $07,$88 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $07,$B4		; 54 B4 07 ; Move block negative $07,$B4 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $142BFF.l,X		; FF FF 2B 14 ; Subtract with carry (long,X) $142BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF1E00.l,X		; FF 00 1E FF ; Subtract with carry (long,X) $FF1E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $271CE2.l,X		; FF E2 1C 27 ; Subtract with carry (long,X) $271CE2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $1EA503.l,X		; 1F 03 A5 1E ; Logical OR long $1EA503.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DD642F.l,X		; DF 2F 64 DD ; Compare accumulator (long,X) $DD642F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda $FF64.w		; AD 64 FF ; Load $FF64.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $27CB.w,X		; 7D CB 27 ; Add $27CB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DEA504.l,X		; DF 04 A5 DE ; Compare accumulator (long,X) $DEA504.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	eor $17C9.w,X		; 5D C9 17 ; Exclusive OR accumulator with memory $17C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $AD1563.l		; 2F 63 15 AD ; AND accumulator with memory (long) $AD1563.l [Writes: Accumulator] [Flags: NZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($9882.w,X)		; FC 82 98 ; Jump to subroutine indirect indexed ($9882.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora [$A9.b]		; 07 A9 ; OR accumulator with memory (long) [$A9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF07.w		; 29 07 FF ; Logical AND #$FF07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $62, $9A, $DB		; 62 9A DB ; Push effective relative address $62, $9A, $DB [Writes: Stack Pointer]
	and ($68.b,S),Y		; 33 68 ; AND accumulator (stack relative indirect indexed) ($68.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $68B0.w,Y		; D9 B0 68 ; Compare accumulator $68B0.w,Y [Reads: Y Index] [Flags: NCZ]
	sbc $2B9B6D.l,X		; FF 6D 9B 2B ; Subtract with carry (long,X) $2B9B6D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$08D9.w		; A9 D9 08 ; Load #$08D9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($998D.w,X)		; FC 8D 99 ; Jump to subroutine indirect indexed ($998D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc [$21.b]		; 67 21 ; Add with carry (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $67		; B0 67 ; Branch if carry set to $B0, $67 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$6B		; C2 6B
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$AA		; C2 AA
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$3C		; C2 3C
	and $337C.w,X		; 3D 7C 33 ; AND accumulator with memory $337C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $50, $76		; 50 76 ; Branch if overflow clear to $50, $76 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $50, $2F		; 50 2F ; Branch if overflow clear to $50, $2F [Flow: branch]
	eor $912E7C.l		; 4F 7C 2E 91 ; Exclusive OR accumulator with memory (long) $912E7C.l [Writes: Accumulator] [Flags: NZ]
	jmp ($BF33.w,X)		; 7C 33 BF ; Jump indirect indexed to ($BF33.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $76		; 50 76 ; Branch if overflow clear to $50, $76 [Flow: branch]
	ldx $3350.w,Y		; BE 50 33 ; Load X register $3350.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	eor [$50.b],Y		; 57 50 ; Exclusive OR accumulator with memory (long indexed) [$50.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $54.b,X		; 75 54 ; Add $54.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $30		; 50 30 ; Branch if overflow clear to $50, $30 [Flow: branch]
	adc $3050.w		; 6D 50 30 ; Add $3050.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	and ($9B.b,S),Y		; 33 9B ; AND accumulator (stack relative indirect indexed) ($9B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $74		; 50 74 ; Branch if overflow clear to $50, $74 [Flow: branch]
	sta $3F50.w,Y		; 99 50 3F ; Store accumulator to $3F50.w,Y [Reads: Y Index, Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jmp ($9C3C.w,X)		; 7C 3C 9C ; Jump indirect indexed to ($9C3C.w,X) [Reads: X Index] [Flow: jump]
	jmp ($A541.w,X)		; 7C 41 A5 ; Jump indirect indexed to ($A541.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $41		; 50 41 ; Branch if overflow clear to $50, $41 [Flow: branch]
	sta DMAP5.w		; 8D 50 43 ; Store accumulator to DMAP5.w [Reads: Accumulator]
	lda ($50.b,S),Y		; B3 50 ; Load accumulator (stack relative indirect indexed) ($50.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $B2.b		; 85 B2 ; Store accumulator to $B2.b [Reads: Accumulator]
	.db $50, $3D		; 50 3D ; Branch if overflow clear to $50, $3D [Flow: branch]
	ldy $7C.b,X		; B4 7C ; Load Y register $7C.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	eor $5F7C43.l,X		; 5F 43 7C 5F ; Exclusive OR accumulator with memory (long,X) $5F7C43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$7C.b]		; 87 7C ; Store accumulator (long) [$7C.b] [Reads: Direct Page, Accumulator]
	jmp $4C7CCC.l		; 5C CC 7C 4C ; Jump long to $4C7CCC.l [Flow: jump]
	.db $90, $7C		; 90 7C ; Branch if carry clear to $90, $7C [Flow: branch]
	jmp $7CC0.w		; 4C C0 7C ; Jump to $7CC0.w [Flow: jump]
	.db $50, $C9		; 50 C9 ; Branch if overflow clear to $50, $C9 [Flow: branch]
	.db $50, $4D		; 50 4D ; Branch if overflow clear to $50, $4D [Flow: branch]
	lsr $527C.w		; 4E 7C 52 ; Logical shift right $527C.w [Flags: NCZ]
	ror $5150.w		; 6E 50 51 ; Rotate right $5150.w [Flags: NCZ]
	adc ($50.b,X)		; 61 50 ; Add with carry ($50.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($7C4F.w)		; 6C 4F 7C ; Jump indirect to ($7C4F.w) [Flow: jump]
	sta ($4E.b,X)		; 81 4E ; Store accumulator ($4E.b,X) [Reads: Direct Page, Accumulator, X Index]
	jmp ($3D62.w,X)		; 7C 62 3D ; Jump indirect indexed to ($3D62.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $8D		; 50 8D ; Branch if overflow clear to $50, $8D [Flow: branch]
	rol $7C.b,X		; 36 7C ; Rotate left $7C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sta ($33.b),Y		; 91 33 ; Store accumulator ($33.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $50, $B4		; 50 B4 ; Branch if overflow clear to $50, $B4 [Flow: branch]
	bit $7C.b,X		; 34 7C ; Test bits $7C.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	lda #$503C.w		; A9 3C 50 ; Load #$503C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta [$61.b]		; 87 61 ; Store accumulator (long) [$61.b] [Reads: Direct Page, Accumulator]
	.db $50, $C3		; 50 C3 ; Branch if overflow clear to $50, $C3 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jmp ($42A5.w,X)		; 7C A5 42 ; Jump indirect indexed to ($42A5.w,X) [Reads: X Index] [Flow: jump]
	jmp ($4F98.w,X)		; 7C 98 4F ; Jump indirect indexed to ($4F98.w,X) [Reads: X Index] [Flow: jump]
	jmp ($3ECE.w,X)		; 7C CE 3E ; Jump indirect indexed to ($3ECE.w,X) [Reads: X Index] [Flow: jump]
	jmp ($6FB8.w,X)		; 7C B8 6F ; Jump indirect indexed to ($6FB8.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $C4		; 50 C4 ; Branch if overflow clear to $50, $C4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $50, $B8		; 50 B8 ; Branch if overflow clear to $50, $B8 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $50, $B7		; 50 B7 ; Branch if overflow clear to $50, $B7 [Flow: branch]
	ror $7C.b		; 66 7C ; Rotate right $7C.b [Reads: Direct Page] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	jmp ($7C73.w)		; 6C 73 7C ; Jump indirect to ($7C73.w) [Flow: jump]
	.db $70, $87		; 70 87 ; Branch if overflow set to $70, $87 [Flow: branch]
	.db $50, $73		; 50 73 ; Branch if overflow clear to $50, $73 [Flow: branch]
	lda [$50.b]		; A7 50 ; Load accumulator (long) [$50.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $9C		; 80 9C ; Branch always to $80, $9C [Flow: branch]
	jmp ($AA6D.w,X)		; 7C 6D AA ; Jump indirect indexed to ($AA6D.w,X) [Reads: X Index] [Flow: jump]
	jmp ($CB71.w,X)		; 7C 71 CB ; Jump indirect indexed to ($CB71.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $81		; 50 81 ; Branch if overflow clear to $50, $81 [Flow: branch]
	ldx $7C.b,Y		; B6 7C ; Load X register $7C.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	adc ($D6.b,X)		; 61 D6 ; Add with carry ($D6.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $95		; 50 95 ; Branch if overflow clear to $50, $95 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($AAA5.w,X)		; 7C A5 AA ; Jump indirect indexed to ($AAA5.w,X) [Reads: X Index] [Flow: jump]
	jmp ($C8A9.w,X)		; 7C A9 C8 ; Jump indirect indexed to ($C8A9.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $C1		; 50 C1 ; Branch if overflow clear to $50, $C1 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($A7B8.w,X)		; 7C B8 A7 ; Jump indirect indexed to ($A7B8.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $CD		; 50 CD ; Branch if overflow clear to $50, $CD [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jmp ($BCC4.w,X)		; 7C C4 BC ; Jump indirect indexed to ($BCC4.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $3F		; 50 3F ; Branch if overflow clear to $50, $3F [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $87F8CC.l,X		; 3F CC F8 87 ; AND accumulator with memory (long,X) $87F8CC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $F8.b		; 84 F8 ; Store Y register to $F8.b [Reads: Y Index]
	cmp [$84.b]		; C7 84 ; Compare accumulator (long) [$84.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp $CFF838.l		; CF 38 F8 CF ; Compare accumulator (long) $CFF838.l [Reads: Accumulator] [Flags: NCZ]
	cpy $2DF8.w		; CC F8 2D ; Compare $2DF8.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor #$2FF8.w		; 49 F8 2F ; Exclusive OR #$2FF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $F8.b,X		; 56 F8 ; Logical shift right $F8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and $2FF86E.l		; 2F 6E F8 2F ; AND accumulator with memory (long) $2FF86E.l [Writes: Accumulator] [Flags: NZ]
	stx $F8.b		; 86 F8 ; Store X register to $F8.b [Reads: X Index]
	and $2EF89A.l		; 2F 9A F8 2E ; AND accumulator with memory (long) $2EF89A.l [Writes: Accumulator] [Flags: NZ]
	lda $3EF8.w,X		; BD F8 3E ; Load $3EF8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $F856.w,X		; 3D 56 F8 ; AND accumulator with memory $F856.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $F86F.w,X		; 3C 6F F8 ; Test bits $F86F.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $F887.w,X		; 3C 87 F8 ; Test bits $F887.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	and $3FF88E.l,X		; 3F 8E F8 3F ; AND accumulator with memory (long,X) $3FF88E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol $F8A5.w,X		; 3E A5 F8 ; Rotate left $F8A5.w,X [Reads: X Index] [Flags: NCZ]
	and $F8B1.w,X		; 3D B1 F8 ; AND accumulator with memory $F8B1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $4DF8BF.l,X		; 3F BF F8 4D ; AND accumulator with memory (long,X) $4DF8BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor $4FF857.l		; 4F 57 F8 4F ; Exclusive OR accumulator with memory (long) $4FF857.l [Writes: Accumulator] [Flags: NZ]
	.db $62, $F8, $4E		; 62 F8 4E ; Push effective relative address $62, $F8, $4E [Writes: Stack Pointer]
	adc $4DF8.w		; 6D F8 4D ; Add $4DF8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	stx $4EF8.w		; 8E F8 4E ; Store X register to $4EF8.w [Reads: X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor $F8BE.w		; 4D BE F8 ; Exclusive OR $F8BE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $F8C9.w		; 4E C9 F8 ; Logical shift right $F8C9.w [Flags: NCZ]
	eor $F83D.w,X		; 5D 3D F8 ; Exclusive OR accumulator with memory $F83D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $5CF84B.l,X		; 5F 4B F8 5C ; Exclusive OR accumulator with memory (long,X) $5CF84B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $F8.b,X		; 55 F8 ; Exclusive OR accumulator with memory $F8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $5FF863.l,X		; 5F 63 F8 5F ; Exclusive OR accumulator with memory (long,X) $5FF863.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $8F5CF8.l		; 6F F8 5C 8F ; Add with carry (long) $8F5CF8.l [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor $5CF89B.l,X		; 5F 9B F8 5C ; Exclusive OR accumulator with memory (long,X) $5CF89B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda [$F8.b]		; A7 F8 ; Load accumulator (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $5CF8B3.l,X		; 5F B3 F8 5C ; Exclusive OR accumulator with memory (long,X) $5CF8B3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $5CF8.w,X		; BD F8 5C ; Load $5CF8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	sed		; F8 ; Set decimal flag [Flags: D]
	lsr $F8D5.w,X		; 5E D5 F8 ; Logical shift right $F8D5.w,X [Reads: X Index] [Flags: NCZ]
	adc $F84A.w		; 6D 4A F8 ; Add $F84A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $6CF857.l		; 6F 57 F8 6C ; Add with carry (long) $6CF857.l [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $F8, $6D		; 62 F8 6D ; Push effective relative address $62, $F8, $6D [Writes: Stack Pointer]
	ror $6EF8.w		; 6E F8 6E ; Rotate right $6EF8.w [Flags: NCZ]
	sta $F8.b		; 85 F8 ; Store accumulator to $F8.b [Reads: Accumulator]
	adc $F8A5.w		; 6D A5 F8 ; Add $F8A5.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jmp ($F8B1.w)		; 6C B1 F8 ; Jump indirect to ($F8B1.w) [Flow: jump]
	adc $6EF8BF.l		; 6F BF F8 6E ; Add with carry (long) $6EF8BF.l [Writes: Accumulator] [Flags: NCVZ]
	cmp #$81F8.w		; C9 F8 81 ; Compare #$81F8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $57.b,S		; 83 57 ; Store accumulator (stack relative) $57.b,S [Reads: Stack Pointer, Accumulator]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $62.b,S		; 83 62 ; Store accumulator (stack relative) $62.b,S [Reads: Stack Pointer, Accumulator]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $80, $6E		; 80 6E ; Branch always to $80, $6E [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $99.b,S		; 83 99 ; Store accumulator (stack relative) $99.b,S [Reads: Stack Pointer, Accumulator]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $82, $A6, $F8		; 82 A6 F8 ; Branch always long to $82, $A6, $F8 [Flow: branch]
	sta ($B2.b,X)		; 81 B2 ; Store accumulator ($B2.b,X) [Reads: Direct Page, Accumulator, X Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $80, $BD		; 80 BD ; Branch always to $80, $BD [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $CB.b,S		; 83 CB ; Store accumulator (stack relative) $CB.b,S [Reads: Stack Pointer, Accumulator]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $80, $D6		; 80 D6 ; Branch always to $80, $D6 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $F831.w		; 8D 31 F8 ; Store accumulator to $F831.w [Reads: Accumulator]
	sty $F83F.w		; 8C 3F F8 ; Store Y register to $F83F.w [Reads: Y Index]
	sta $8CF84B.l		; 8F 4B F8 8C ; Store accumulator (long) $8CF84B.l [Reads: Accumulator]
	lsr $F8.b,X		; 56 F8 ; Logical shift right $F8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sta $F84A.w,Y		; 99 4A F8 ; Store accumulator to $F84A.w,Y [Reads: Y Index, Accumulator]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $F8, $95		; 62 F8 95 ; Push effective relative address $62, $F8, $95 [Writes: Stack Pointer]
	ldx $F8.b		; A6 F8 ; Load $F8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sta [$B3.b],Y		; 97 B3 ; Store accumulator (long indexed) [$B3.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sed		; F8 ; Set decimal flag [Flags: D]
	sty $BD.b,X		; 94 BD ; Store Y register $BD.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	sty $CA.b,X		; 94 CA ; Store Y register $CA.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $3D.b		; A5 3D ; Load $3D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldy $4B.b		; A4 4B ; Load $4B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldx $62.b		; A6 62 ; Load $62.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $A6.b		; A5 A6 ; Load $A6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldy $B3.b		; A4 B3 ; Load $B3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldy $BF.b		; A4 BF ; Load $BF.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldx $C9.b		; A6 C9 ; Load $C9.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda [$31.b],Y		; B7 31 ; Load accumulator (long indexed) [$31.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldx $3E.b,Y		; B6 3E ; Load X register $3E.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $62.b,X		; B5 62 ; Load $62.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda [$6E.b],Y		; B7 6E ; Load accumulator (long indexed) [$6E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda [$7A.b],Y		; B7 7A ; Load accumulator (long indexed) [$7A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda [$86.b],Y		; B7 86 ; Load accumulator (long indexed) [$86.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldx $A6.b,Y		; B6 A6 ; Load X register $A6.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp $3D.b,S		; C3 3D ; Compare accumulator (stack relative) $3D.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp $4A.b,S		; C3 4A ; Compare accumulator (stack relative) $4A.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpy #$F863.w		; C0 63 F8 ; Compare #$F863.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$F86D.w		; C0 6D F8 ; Compare #$F86D.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$F87A.w		; C0 7A F8 ; Compare #$F87A.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp ($A6.b,X)		; C1 A6 ; Compare accumulator ($A6.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp $BE.b,S		; C3 BE ; Compare accumulator (stack relative) $BE.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpy #$F8CA.w		; C0 CA F8 ; Compare #$F8CA.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $F84B.w		; CC 4B F8 ; Compare $F84B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $F86E.w		; CC 6E F8 ; Compare $F86E.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $CCF8A5.l		; CF A5 F8 CC ; Compare accumulator (long) $CCF8A5.l [Reads: Accumulator] [Flags: NCZ]
	lda $FFFFF8.l,X		; BF F8 FF FF ; Load long $FFFFF8.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $FA.b,X		; 16 FA ; Arithmetic shift left $FA.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $2031FF.l,X		; FF FF 31 20 ; Subtract with carry (long,X) $2031FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $31.b		; C4 31 ; Compare $31.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	jsr ($38E1.w,X)		; FC E1 38 ; Jump to subroutine indirect indexed ($38E1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$30.b]		; 27 30 ; AND accumulator with memory (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $4C69.w,X		; 1E 69 4C ; Arithmetic shift left $4C69.w,X [Reads: X Index] [Flags: NCZ]
	asl $C969.w,X		; 1E 69 C9 ; Arithmetic shift left $C969.w,X [Reads: X Index] [Flags: NCZ]
	jsr $C9C4.w		; 20 C4 C9 ; Jump to subroutine at $C9C4.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	sbc $E802A1.l,X		; FF A1 02 E8 ; Subtract with carry (long,X) $E802A1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $33C462.l		; 22 62 C4 33 ; Jump to subroutine long $33C462.l [Writes: Stack Pointer] [Flow: call]
	and [$C4.b]		; 27 C4 ; AND accumulator with memory (long) [$C4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $D869.w,X		; 1E 69 D8 ; Arithmetic shift left $D869.w,X [Reads: X Index] [Flags: NCZ]
	and ($22.b),Y		; 31 22 ; AND accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $90, $78		; 90 78 ; Branch if carry clear to $90, $78 [Flow: branch]
	cpy $98.b		; C4 98 ; Compare $98.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpy $90.b		; C4 90 ; Compare $90.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $80, $C4		; 80 C4 ; Branch always to $80, $C4 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $C4		; 80 C4 ; Branch always to $80, $C4 [Flow: branch]
	sta $2274.w		; 8D 74 22 ; Store accumulator to $2274.w [Reads: Accumulator]
	sta $2290.w		; 8D 90 22 ; Store accumulator to $2290.w [Reads: Accumulator]
	lda #$6974.w		; A9 74 69 ; Load #$6974.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $6B79.w		; 8D 79 6B ; Store accumulator to $6B79.w [Reads: Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta $FA.b,S		; 83 FA ; Store accumulator (stack relative) $FA.b,S [Reads: Stack Pointer, Accumulator]
	ldy $294D.w		; AC 4D 29 ; Load $294D.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $6B51.w		; AC 51 6B ; Load $6B51.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $2A59.w		; AC 59 2A ; Load $2A59.w into Y register [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor ($6A.b),Y		; 51 6A ; Exclusive OR accumulator with memory ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $51		; B0 51 ; Branch if carry set to $B0, $51 [Flow: branch]
	inc $7544.w,X		; FE 44 75 ; Increment memory $7544.w,X [Reads: X Index] [Flags: NZ]
	and #$7944.w		; 29 44 79 ; Logical AND #$7944.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvp $2A,$81		; 44 81 2A ; Move block positive $2A,$81 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $50, $79		; 50 79 ; Branch if overflow clear to $50, $79 [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $ACFE.w,Y		; 79 FE AC ; Add $ACFE.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $AC29.w		; AD 29 AC ; Load $AC29.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($6B.b),Y		; B1 6B ; Load accumulator ($6B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $2AB9.w		; AC B9 2A ; Load $2AB9.w into Y register [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda ($6A.b),Y		; B1 6A ; Load accumulator ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $B1		; B0 B1 ; Branch if carry set to $B0, $B1 [Flow: branch]
	inc $78D1.w,X		; FE D1 78 ; Increment memory $78D1.w,X [Reads: X Index] [Flags: NZ]
	cpy $D1.b		; C4 D1 ; Compare $D1.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $80, $C4		; 80 C4 ; Branch always to $80, $C4 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $CD, $79		; 62 CD 79 ; Push effective relative address $62, $CD, $79 [Writes: Stack Pointer]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $2274.w		; CD 74 22 ; Compare $2274.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $2290.w		; CD 90 22 ; Compare $2290.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $7B.b,S		; E3 7B ; Subtract stack-relative $7B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $83.b,S		; E3 83 ; Subtract stack-relative $83.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $8B.b,S		; E3 8B ; Subtract stack-relative $8B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp #$C4D8.w		; C9 D8 C4 ; Compare #$C4D8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $FF, $AE		; 62 FF AE ; Push effective relative address $62, $FF, $AE [Writes: Stack Pointer]
	sta $C9.b,S		; 83 C9 ; Store accumulator (stack relative) $C9.b,S [Reads: Stack Pointer, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cop $C4.b		; 02 C4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$28.b],Y		; D7 28 ; Compare accumulator (long indexed) [$28.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cpy $D6.b		; C4 D6 ; Compare $D6.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	adc #$D5D8.w		; 69 D8 D5 ; Add #$D5D8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $FAE3E3.l		; 22 E3 E3 FA ; Jump to subroutine long $FAE3E3.l [Writes: Stack Pointer] [Flow: call]
	and ($D8.b),Y		; 31 D8 ; AND accumulator with memory ($D8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy $31.b		; C4 31 ; Compare $31.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cop $31.b		; 02 31 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $28.b,X		; D5 28 ; Compare accumulator $28.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $30, $D6		; 30 D6 ; Branch if minus to $30, $D6 [Flow: branch]
	adc #$D64C.w		; 69 4C D6 ; Add #$D64C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$FFF0.w		; 69 F0 FF ; Add #$FFF0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1CE2FF.l,X		; FF FF E2 1C ; Subtract with carry (long,X) $1CE2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0091.w,X		; FD 91 00 ; Subtract with carry $0091.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($C4.b,S),Y		; 93 C4 ; Store accumulator (stack relative indirect indexed) ($C4.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	mvn $01,$3E		; 54 3E 01 ; Move block negative $01,$3E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $C013.w,X		; FD 13 C0 ; Subtract with carry $C013.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $61,$4F		; 44 4F 61 ; Move block positive $61,$4F [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $4416.w,X		; FD 16 44 ; Subtract with carry $4416.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $66.b,X		; 34 66 ; Test bits $66.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stx $40.b,Y		; 96 40 ; Store X register $40.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	bit $77.b		; 24 77 ; Test bits $77.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $FC01.w		; 8E 01 FC ; Store X register to $FC01.w [Reads: X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy $FC.b		; C4 FC ; Compare $FC.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cpy #$2EFC.w		; C0 FC 2E ; Compare #$2EFC.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor ($1B.b,X)		; 41 1B ; Exclusive OR accumulator with memory ($1B.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$02.b]		; E7 02 ; Subtract with carry (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta ($E7.b)		; 92 E7 ; Store accumulator (indirect) ($E7.b) [Reads: Direct Page, Accumulator]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $FE43.w		; AE 43 FE ; Load $FE43.w into X register [Writes: X Index] [Flags: NZ]
	and ($02.b),Y		; 31 02 ; AND accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $6220.w		; 8D 20 62 ; Store accumulator to $6220.w [Reads: Accumulator]
	inc $C633.w,X		; FE 33 C6 ; Increment memory $C633.w,X [Reads: X Index] [Flags: NZ]
	stz $013E.w		; 9C 3E 01 ; Store zero to $013E.w
	inc $C2B3.w,X		; FE B3 C2 ; Increment memory $C2B3.w,X [Reads: X Index] [Flags: NZ]
	ldy $624F.w		; AC 4F 62 ; Load $624F.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $46B6.w,X		; FE B6 46 ; Increment memory $46B6.w,X [Reads: X Index] [Flags: NZ]
	ldy $0166.w,X		; BC 66 01 ; Load Y register $0166.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $CC4236.l,X		; FF 36 42 CC ; Subtract with carry (long,X) $CC4236.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$62.b],Y		; 77 62 ; Add with carry (long indexed) [$62.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DCC638.l,X		; FF 38 C6 DC ; Subtract with carry (long,X) $DCC638.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $FF01.w		; 8E 01 FF ; Store X register to $FF01.w [Reads: X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$7B		; C2 7B
	ora ($F9.b,S),Y		; 13 F9 ; OR accumulator (stack relative indirect indexed) ($F9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $34C4.w,X		; FD C4 34 ; Subtract with carry $34C4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $3424.w,X		; FE 24 34 ; Increment memory $3424.w,X [Reads: X Index] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor #$6A89.w		; 49 89 6A ; Exclusive OR #$6A89.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($89.b),Y		; 51 89 ; Exclusive OR accumulator with memory ($89.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($49.b)		; 92 49 ; Store accumulator (indirect) ($49.b) [Reads: Direct Page, Accumulator]
	bit #$5192.w		; 89 92 51 ; Test bits #$5192.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$7349.w		; 89 49 73 ; Test bits #$7349.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$7A49.w		; 89 49 7A ; Test bits #$7A49.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$73B1.w		; 89 B1 73 ; Test bits #$73B1.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$7AB1.w		; 89 B1 7A ; Test bits #$7AB1.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$9829.w		; 89 29 98 ; Test bits #$9829.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$A029.w		; 89 29 A0 ; Test bits #$A029.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$98D1.w		; 89 D1 98 ; Test bits #$98D1.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$A0D1.w		; 89 D1 A0 ; Test bits #$A0D1.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$6951.w		; 89 51 69 ; Test bits #$6951.w with accumulator [Reads: Accumulator] [Flags: Z]
	lsr $6959.w,X		; 5E 59 69 ; Logical shift right $6959.w,X [Reads: X Index] [Flags: NCZ]
	lsr $9132.w,X		; 5E 32 91 ; Logical shift right $9132.w,X [Reads: X Index] [Flags: NCZ]
	lsr $913A.w,X		; 5E 3A 91 ; Logical shift right $913A.w,X [Reads: X Index] [Flags: NCZ]
	lsr $C132.w,X		; 5E 32 C1 ; Logical shift right $C132.w,X [Reads: X Index] [Flags: NCZ]
	lsr $C13A.w,X		; 5E 3A C1 ; Logical shift right $C13A.w,X [Reads: X Index] [Flags: NCZ]
	lsr $4278.w,X		; 5E 78 42 ; Logical shift right $4278.w,X [Reads: X Index] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sec		; 38 ; Set carry flag [Flags: C]
	sta ($B8.b),Y		; 91 B8 ; Store accumulator ($B8.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta ($B8.b),Y		; 91 B8 ; Store accumulator ($B8.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy #$B8C1.w		; A0 C1 B8 ; Load #$B8C1.w into Y register [Writes: Y Index] [Flags: NZ]
	cpy #$B891.w		; C0 91 B8 ; Compare #$B891.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$B8C1.w		; C0 C1 B8 ; Compare #$B8C1.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $52		; 90 52 ; Branch if carry clear to $90, $52 [Flow: branch]
	sta ($48.b)		; 92 48 ; Store accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sta ($B0.b)		; 92 B0 ; Store accumulator (indirect) ($B0.b) [Reads: Direct Page, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sta ($28.b)		; 92 28 ; Store accumulator (indirect) ($28.b) [Reads: Direct Page, Accumulator]
	lda $92.b,S		; A3 92 ; Load accumulator (stack relative) $92.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lda $92.b,S		; A3 92 ; Load accumulator (stack relative) $92.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $A3		; B0 A3 ; Branch if carry set to $B0, $A3 [Flow: branch]
	sta ($D0.b)		; 92 D0 ; Store accumulator (indirect) ($D0.b) [Reads: Direct Page, Accumulator]
	lda $92.b,S		; A3 92 ; Load accumulator (stack relative) $92.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp ($92.b)		; D2 92 ; Compare accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cmp ($92.b)		; D2 92 ; Compare accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $D2		; 90 D2 ; Branch if carry clear to $90, $D2 [Flow: branch]
	sta ($68.b)		; 92 68 ; Store accumulator (indirect) ($68.b) [Reads: Direct Page, Accumulator]
	eor ($93.b)		; 52 93 ; Exclusive OR accumulator with memory (indirect) ($93.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc #$A093.w		; 69 93 A0 ; Add #$A093.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$6893.w		; 69 93 68 ; Add #$6893.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sta ($90.b,S),Y		; 93 90 ; Store accumulator (stack relative indirect indexed) ($90.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sta ($A0.b,S),Y		; 93 A0 ; Store accumulator (stack relative indirect indexed) ($A0.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($93.b),Y		; 91 93 ; Store accumulator ($93.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta ($B9.b)		; 92 B9 ; Store accumulator (indirect) ($B9.b) [Reads: Direct Page, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $93.b,S		; A3 93 ; Load accumulator (stack relative) $93.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $90, $A3		; 90 A3 ; Branch if carry clear to $90, $A3 [Flow: branch]
	sta ($28.b,S),Y		; 93 28 ; Store accumulator (stack relative indirect indexed) ($28.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp ($93.b)		; D2 93 ; Compare accumulator (indirect) ($93.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $B0, $D2		; B0 D2 ; Branch if carry set to $B0, $D2 [Flow: branch]
	sta ($D0.b,S),Y		; 93 D0 ; Store accumulator (stack relative indirect indexed) ($D0.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp ($93.b)		; D2 93 ; Compare accumulator (indirect) ($93.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp ($93.b,X)		; C1 93 ; Compare accumulator ($93.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp ($93.b,X)		; C1 93 ; Compare accumulator ($93.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
.ACCU 16
.INDEX 16
	rep #$B9		; C2 B9
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and ($73.b,S),Y		; 33 73 ; AND accumulator (stack relative indirect indexed) ($73.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc ($8B.b,S),Y		; 73 8B ; Add with carry (stack relative indirect indexed) ($8B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp ($FA.b,S),Y		; D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	adc $CB.b,S		; 63 CB ; Add with carry (stack relative) $CB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $0E.b		; 45 0E ; Exclusive OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$4507.w		; C0 07 45 ; Compare #$4507.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$5E05.w		; C0 05 5E ; Compare #$5E05.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$0E9F.w		; C0 9F 0E ; Compare #$0E9F.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$13BF.w		; C0 BF 13 ; Compare #$13BF.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$45BF.w		; C0 BF 45 ; Compare #$45BF.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$5EDD.w		; C0 DD 5E ; Compare #$5EDD.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $1C.b,S		; 83 1C ; Store accumulator (stack relative) $1C.b,S [Reads: Stack Pointer, Accumulator]
	sbc $04E2FF.l,X		; FF FF E2 04 ; Subtract with carry (long,X) $04E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($C851.w,X)		; FC 51 C8 ; Jump to subroutine indirect indexed ($C851.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $1E.b		; 25 1E ; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$2F.b],Y		; 17 2F ; OR accumulator with memory (long indexed) [$2F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $15.b,S		; 63 15 ; Add with carry (stack relative) $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lda $FC63.w		; AD 63 FC ; Load $FC63.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $24C9.w,X		; 5D C9 24 ; Exclusive OR accumulator with memory $24C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $5804.w,X		; DD 04 58 ; Compare accumulator $5804.w,X [Reads: X Index] [Flags: NCZ]
	jmp.w [$FD04]		; DC 04 FD ; Jump long indirect [$FD04] [Flow: jump]
	adc $5FCB.w,X		; 7D CB 5F ; Add $5FCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $AD5D64.l		; 2F 64 5D AD ; AND accumulator with memory (long) $AD5D64.l [Writes: Accumulator] [Flags: NZ]
	stz $FC.b		; 64 FC ; Store zero to $FC.b
	.db $82, $98, $29		; 82 98 29 ; Branch always long to $82, $98, $29 [Flow: branch]
	and #$FD07.w		; 29 07 FD ; Logical AND #$FD07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $62, $9A, $23		; 62 9A 23 ; Push effective relative address $62, $9A, $23 [Writes: Stack Pointer]
	and ($67.b,S),Y		; 33 67 ; AND accumulator (stack relative indirect indexed) ($67.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rol $D0.b		; 26 D0 ; Rotate left $D0.b [Reads: Direct Page] [Flags: NCZ]
	cmp $21.b,S		; C3 21 ; Compare accumulator (stack relative) $21.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	.db $B0, $67		; B0 67 ; Branch if carry set to $B0, $67 [Flow: branch]
	jsr ($998D.w,X)		; FC 8D 99 ; Jump to subroutine indirect indexed ($998D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp $5908.w,Y		; D9 08 59 ; Compare accumulator $5908.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $B0, $68		; B0 68 ; Branch if carry set to $B0, $68 [Flow: branch]
	sbc $9B6D.w,X		; FD 6D 9B ; Subtract with carry $9B6D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	and ($68.b,S),Y		; 33 68 ; AND accumulator (stack relative indirect indexed) ($68.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc ($C2.b,S),Y		; 73 C2 ; Add with carry (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$38		; C2 38
	and $C4.b,S		; 23 C4 ; AND accumulator with stack relative $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $C4.b,S		; 63 C4 ; Add with carry (stack relative) $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ldx #$38C4.w		; A2 C4 38 ; Load #$38C4.w into X register [Writes: X Index] [Flags: NZ]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cpy $18.b		; C4 18 ; Compare $18.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cpy #$08C4.w		; C0 C4 08 ; Compare #$08C4.w with Y register [Reads: Y Index] [Flags: NCZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc ($34.b,X)		; 61 34 ; Add with carry ($34.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $4869.w,X		; 1D 69 48 ; OR accumulator with memory $4869.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $3869.w,X		; 1D 69 38 ; OR accumulator with memory $3869.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc #$2844.w		; 69 44 28 ; Add #$2844.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$3B3B.w		; 69 3B 3B ; Add #$3B3B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor [$3B.b]		; 47 3B ; Exclusive OR accumulator with memory (long) [$3B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor [$7B.b]		; 47 7B ; Exclusive OR accumulator with memory (long) [$7B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and $CF.b		; 25 CF ; Logical AND $CF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $D148.w		; 2D 48 D1 ; Logical AND $D148.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $DB.b,X		; 34 DB ; Test bits $DB.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	mvp $2C,$BA		; 44 BA 2C ; Move block positive $2C,$BA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $BE.b,X		; 55 BE ; Exclusive OR accumulator with memory $BE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	mvn $69,$D9		; 54 D9 69 ; Move block negative $69,$D9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	bit $D9.b,X		; 34 D9 ; Test bits $D9.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	adc #$BB24.w		; 69 24 BB ; Add #$BB24.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	trb $B9.b		; 14 B9 ; Test and reset bits $B9.b [Reads: Accumulator] [Flags: Z]
	jsl $22CD14.l		; 22 14 CD 22 ; Jump to subroutine long $22CD14.l [Writes: Stack Pointer] [Flow: call]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsl $00001C.l		; 22 1C 00 00 ; Jump to subroutine long $00001C.l [Writes: Stack Pointer] [Flow: call]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00E1FF.l,X		; FF FF E1 00 ; Subtract with carry (long,X) $00E1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$FE01.w		; A0 01 FE ; Load #$FE01.w into Y register [Writes: Y Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($61.b),Y		; B1 61 ; Load accumulator ($61.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $817E.w,X		; FE 7E 81 ; Increment memory $817E.w,X [Reads: X Index] [Flags: NZ]
	sbc $E402AA.l,X		; FF AA 02 E4 ; Subtract with carry (long,X) $E402AA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$FF02.w		; C9 02 FF ; Compare #$FF02.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy $FF83.w		; AC 83 FF ; Load $FF83.w into Y register [Writes: Y Index] [Flags: NZ]
	jmp $DAD487.l		; 5C 87 D4 DA ; Jump long to $DAD487.l [Flow: jump]
	.db $62, $FF, $5E		; 62 FF 5E ; Push effective relative address $62, $FF, $5E [Writes: Stack Pointer]
	sta $AF.b,S		; 83 AF ; Store accumulator (stack relative) $AF.b,S [Reads: Stack Pointer, Accumulator]
	cmp ($FA.b,S),Y		; D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	lda [$D3.b],Y		; B7 D3 ; Load accumulator (long indexed) [$D3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $C7FAD3.l,X		; BF D3 FA C7 ; Load long $C7FAD3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($FA.b,S),Y		; D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp $8BFAD3.l		; CF D3 FA 8B ; Compare accumulator (long) $8BFAD3.l [Reads: Accumulator] [Flags: NCZ]
	sta ($00.b)		; 92 00 ; Store accumulator (indirect) ($00.b) [Reads: Direct Page, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $C0.b,S		; A3 C0 ; Load accumulator (stack relative) $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $C0E1.w,X		; 7D E1 C0 ; Add $C0E1.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $D9.b		; E4 D9 ; Compare $D9.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpy #$D8F1.w		; C0 F1 D8 ; Compare #$D8F1.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta ($2A.b,X)		; 81 2A ; Store accumulator ($2A.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	sbc $04E2FF.l,X		; FF FF E2 04 ; Subtract with carry (long,X) $04E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($012D.w,X)		; FC 2D 01 ; Jump to subroutine indirect indexed ($012D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp ($02.b),Y		; D1 02 ; Compare accumulator ($02.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	jsr ($058D.w,X)		; FC 8D 05 ; Jump to subroutine indirect indexed ($058D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr $61E1.w		; 20 E1 61 ; Jump to subroutine at $61E1.w [Writes: Stack Pointer] [Flow: call]
	jsr ($818E.w,X)		; FC 8E 81 ; Jump to subroutine indirect indexed ($818E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $834E.w,X		; FD 4E 83 ; Subtract with carry $834E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $E1		; 50 E1 ; Branch if overflow clear to $50, $E1 [Flow: branch]
	.db $62, $FD, $4D		; 62 FD 4D ; Push effective relative address $62, $FD, $4D [Writes: Stack Pointer]
	ora [$60.b]		; 07 60 ; OR accumulator with memory (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp ($02.b),Y		; D1 02 ; Compare accumulator ($02.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc $03AD.w,X		; FD AD 03 ; Subtract with carry $03AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($C851.w,X)		; FC 51 C8 ; Jump to subroutine indirect indexed ($C851.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $1D.b		; 24 1D ; Test bits $1D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $15.b,S		; 03 15 ; OR accumulator with stack relative $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $1463.w		; 2C 63 14 ; Test bits $1463.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	adc [$63.b],Y		; 77 63 ; Add with carry (long indexed) [$63.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $B5.b		; 14 B5 ; Test and reset bits $B5.b [Reads: Accumulator] [Flags: Z]
	adc $20.b,S		; 63 20 ; Add with carry (stack relative) $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	dec $04.b		; C6 04 ; Decrement $04.b [Reads: Direct Page] [Flags: NZ]
	jsr ($495C.w,X)		; FC 5C 49 ; Jump to subroutine indirect indexed ($495C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec $04.b		; C6 04 ; Decrement $04.b [Reads: Direct Page] [Flags: NZ]
	sbc $4B7C.w,X		; FD 7C 4B ; Subtract with carry $4B7C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $6495.w,X		; 5D 95 64 ; Exclusive OR accumulator with memory $6495.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp $FD6457.l		; 5C 57 64 FD ; Jump long to $FD6457.l [Flow: jump]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $4C642C.l		; 5C 2C 64 4C ; Jump long to $4C642C.l [Flow: jump]
	ora $2403.w,X		; 1D 03 24 ; OR accumulator with memory $2403.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$2107.w		; 29 07 21 ; Logical AND #$2107.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol $FC67.w		; 2E 67 FC ; Rotate left $FC67.w [Flags: NCZ]
	.db $82, $98, $21		; 82 98 21 ; Branch always long to $82, $98, $21 [Flow: branch]
	adc $67.b,X		; 75 67 ; Add $67.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $67B5.w		; 20 B5 67 ; Jump to subroutine at $67B5.w [Writes: Stack Pointer] [Flow: call]
	jsr ($198C.w,X)		; FC 8C 19 ; Jump to subroutine indirect indexed ($198C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldy $C2.b,X		; B4 C2 ; Load Y register $C2.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp ($08.b,X)		; C1 08 ; Compare accumulator ($08.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stx $C2.b,Y		; 96 C2 ; Store X register $C2.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp ($08.b,X)		; C1 08 ; Compare accumulator ($08.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	eor $6895.w,Y		; 59 95 68 ; Exclusive OR accumulator with memory $6895.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $1B6C.w,X		; FD 6C 1B ; Subtract with carry $1B6C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $6855.w,Y		; 59 55 68 ; Exclusive OR accumulator with memory $6855.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rol $4C68.w		; 2E 68 4C ; Rotate left $4C68.w [Flags: NCZ]
	and #$FD07.w		; 29 07 FD ; Logical AND #$FD07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $62, $9A, $28		; 62 9A 28 ; Push effective relative address $62, $9A, $28 [Writes: Stack Pointer]
	and ($C2.b)		; 32 C2 ; AND accumulator with memory (indirect) ($C2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	mvn $28,$C2		; 54 C2 28 ; Move block negative $28,$C2 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ror $C2.b,X		; 76 C2 ; Rotate right $C2.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $C2.b,X		; 56 C2 ; Logical shift right $C2.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $30, $C2		; 30 C2 ; Branch if minus to $30, $C2 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	bit $C2.b,X		; 34 C2 ; Test bits $C2.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $1D.b,X		; 34 1D ; Test bits $1D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	adc #$1D48.w		; 69 48 1D ; Add #$1D48.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$2838.w		; 69 38 28 ; Add #$2838.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$2844.w		; 69 44 28 ; Add #$2844.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$3A3A.w		; 69 3A 3A ; Add #$3A3A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($64.b,X)		; 21 64 ; Logical AND ($64.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($70.b,X)		; 21 70 ; Logical AND ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $773A.w		; 2D 3A 77 ; Logical AND $773A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($A4.b,X)		; 21 A4 ; Logical AND ($A4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($B0.b,X)		; 21 B0 ; Logical AND ($B0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $B638.w		; 2D 38 B6 ; Logical AND $B638.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr $96.b		; 46 96 ; Logical shift right $96.b [Reads: Direct Page] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $90.b		; 45 90 ; Exclusive OR $90.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $8445.w		; 2E 45 84 ; Rotate left $8445.w [Flags: NCZ]
	bit $5746.w		; 2C 46 57 ; Test bits $5746.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $50.b		; 45 50 ; Exclusive OR $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $4445.w		; 2E 45 44 ; Rotate left $4445.w [Flags: NCZ]
	bit $3A44.w		; 2C 44 3A ; Test bits $3A44.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	trb $54.b		; 14 54 ; Test and reset bits $54.b [Reads: Accumulator] [Flags: Z]
	jsl $695520.l		; 22 20 55 69 ; Jump to subroutine long $695520.l [Writes: Stack Pointer] [Flow: call]
	trb $70.b		; 14 70 ; Test and reset bits $70.b [Reads: Accumulator] [Flags: Z]
	jsl $229414.l		; 22 14 94 22 ; Jump to subroutine long $229414.l [Writes: Stack Pointer] [Flow: call]
	jsr $6995.w		; 20 95 69 ; Jump to subroutine at $6995.w [Writes: Stack Pointer] [Flow: call]
	trb $B0.b		; 14 B0 ; Test and reset bits $B0.b [Reads: Accumulator] [Flags: Z]
	jsl $69C238.l		; 22 38 C2 69 ; Jump to subroutine long $69C238.l [Writes: Stack Pointer] [Flow: call]
	mvp $69,$C2		; 44 C2 69 ; Move block positive $69,$C2 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	bit $22D4.w		; 2C D4 22 ; Test bits $22D4.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	mvp $22,$D4		; 44 D4 22 ; Move block positive $22,$D4 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp $5C2290.l		; 5C 90 22 5C ; Jump long to $5C2290.l [Flow: jump]
	adc $69.b,X		; 75 69 ; Add $69.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $5C2274.l		; 5C 74 22 5C ; Jump long to $5C2274.l [Flow: jump]
	bit $22.b,X		; 34 22 ; Test bits $22.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	jmp $5C6935.l		; 5C 35 69 5C ; Jump long to $5C6935.l [Flow: jump]
	.db $50, $22		; 50 22 ; Branch if overflow clear to $50, $22 [Flow: branch]
	adc ($3A.b,X)		; 61 3A ; Add with carry ($3A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $5A19.w,Y		; F9 19 5A ; Subtract with carry $5A19.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7A61.w,Y		; F9 61 7A ; Subtract with carry $7A61.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9A19.w,Y		; F9 19 9A ; Subtract with carry $9A19.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E101.w,Y		; F9 01 E1 ; Subtract with carry $E101.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$E161.w		; C0 61 E1 ; Compare #$E161.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FFFF.w		; C0 FF FF ; Compare #$FFFF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($2A.b,X)		; 61 2A ; Add with carry ($2A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1C62FF.l,X		; FF FF 62 1C ; Subtract with carry (long,X) $1C62FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$0D34.w		; 09 34 0D ; Logical OR #$0D34.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	adc ($09.b,X)		; 61 09 ; Add with carry ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$080E.w		; C0 0E 08 ; Compare #$080E.w with Y register [Reads: Y Index] [Flags: NCZ]
.ACCU 16
	rep #$61		; C2 61
	cmp ($10.b),Y		; D1 10 ; Compare accumulator ($10.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ora $623AE8.l		; 0F E8 3A 62 ; OR accumulator with memory (long) $623AE8.l [Writes: Accumulator] [Flags: NZ]
	cmp ($E4.b),Y		; D1 E4 ; Compare accumulator ($E4.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	.db $10, $E8		; 10 E8 ; Branch if plus to $10, $E8 [Flow: branch]
.ACCU 16
	rep #$62		; C2 62
	trb $35.b		; 14 35 ; Test and reset bits $35.b [Reads: Accumulator] [Flags: Z]
	ora $C114.w,Y		; 19 14 C1 ; OR accumulator with memory $C114.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora [$3B.b],Y		; 17 3B ; OR accumulator with memory (long indexed) [$3B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $14.b,S		; 63 14 ; Add with carry (stack relative) $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	adc $31.b,S		; 63 31 ; Add with carry (stack relative) $31.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	trb $5803.w		; 1C 03 58 ; Test and reset bits $5803.w [Reads: Accumulator] [Flags: Z]
	and #$FD64.w		; 29 64 FD ; Logical AND #$FD64.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b,X)		; 61 CA ; Add with carry ($CA.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8E63.w,X		; FD 63 8E ; Subtract with carry $8E63.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$0339.w		; 69 39 03 ; Add #$0339.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	inc $8C63.w,X		; FE 63 8C ; Increment memory $8C63.w,X [Reads: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$FE63.w		; 29 63 FE ; Logical AND #$FE63.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($C8.b,X)		; 61 C8 ; Add with carry ($C8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$031C.w		; A9 1C 03 ; Load #$031C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $D0643B.l,X		; DF 3B 64 D0 ; Compare accumulator (long,X) $D0643B.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cmp $DC1C.w,Y		; D9 1C DC ; Compare accumulator $DC1C.w,Y [Reads: Y Index] [Flags: NCZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	stz $C0.b		; 64 C0 ; Store zero to $C0.b
	cmp $B404.w,X		; DD 04 B4 ; Compare accumulator $B404.w,X [Reads: X Index] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FEC9.w,X		; DD C9 FE ; Compare accumulator $FEC9.w,X [Reads: X Index] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sta $B84F.w		; 8D 4F B8 ; Store accumulator to $B84F.w [Reads: Accumulator]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sta $64CA3C.l		; 8F 3C CA 64 ; Store accumulator (long) $64CA3C.l [Reads: Accumulator]
	.db $30, $DD		; 30 DD ; Branch if minus to $30, $DD [Flow: branch]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	sbc $68CB.w,X		; FD CB 68 ; Subtract with carry $68CB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $346869.l,X		; 1F 69 68 34 ; Logical OR long $346869.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $223488.l		; 22 88 34 22 ; Jump to subroutine long $223488.l [Writes: Stack Pointer] [Flow: call]
	sty $1F.b,X		; 94 1F ; Store Y register $1F.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	adc #$E1FD.w		; 69 FD E1 ; Add #$E1FD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $B1E3.w,X		; FD E3 B1 ; Subtract with carry $B1E3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $BB		; 50 BB ; Branch if overflow clear to $50, $BB [Flow: branch]
	sbc $BBA0.w,Y		; F9 A0 BB ; Subtract with carry $BBA0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1168.w,Y		; F9 68 11 ; Subtract with carry $1168.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsb $7F4A.w		; 0C 4A 7F ; Test and set bits $7F4A.w [Reads: Accumulator] [Flags: Z]
	cpx $804A.w		; EC 4A 80 ; Compare $804A.w with X register [Reads: X Index] [Flags: NCZ]
	eor $69C9.w		; 4D C9 69 ; Exclusive OR $69C9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($C9.b),Y		; B1 C9 ; Load accumulator ($C9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc #$1109.w		; 69 09 11 ; Add #$1109.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy #$D509.w		; A0 09 D5 ; Load #$D509.w into Y register [Writes: Y Index] [Flags: NZ]
	lda ($D5.b,X)		; A1 D5 ; Load accumulator ($D5.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A2.b),Y		; 11 A2 ; OR accumulator with memory ($A2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $F5.b,X		; D5 F5 ; Compare accumulator $F5.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $FF.b,S		; A3 FF ; Load accumulator (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $C52D31.l,X		; FF 31 2D C5 ; Subtract with carry (long,X) $C52D31.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($2D.b),Y		; B1 2D ; Load accumulator ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $FC.b		; C5 FC ; Compare $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpy $60.b		; C4 60 ; Compare $60.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sbc $6024.w,X		; FD 24 60 ; Subtract with carry $6024.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $60C4.w,X		; FE C4 60 ; Increment memory $60C4.w,X [Reads: X Index] [Flags: NZ]
	sbc $636024.l,X		; FF 24 60 63 ; Subtract with carry (long,X) $636024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C5.b,S),Y		; 53 C5 ; XOR accumulator (stack relative indirect indexed) ($C5.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $91.b,S		; 63 91 ; Add with carry (stack relative) $91.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp $6B.b		; C5 6B ; Compare $6B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	inc $5A8B.w,X		; FE 8B 5A ; Increment memory $5A8B.w,X [Reads: X Index] [Flags: NZ]
	inc $7A6B.w,X		; FE 6B 7A ; Increment memory $7A6B.w,X [Reads: X Index] [Flags: NZ]
	inc $7A8B.w,X		; FE 8B 7A ; Increment memory $7A8B.w,X [Reads: X Index] [Flags: NZ]
	inc $9A6B.w,X		; FE 6B 9A ; Increment memory $9A6B.w,X [Reads: X Index] [Flags: NZ]
	inc $9A8B.w,X		; FE 8B 9A ; Increment memory $9A8B.w,X [Reads: X Index] [Flags: NZ]
	inc $E1FC.w,X		; FE FC E1 ; Increment memory $E1FC.w,X [Reads: X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inc $FBE1.w,X		; FE E1 FB ; Increment memory $FBE1.w,X [Reads: X Index] [Flags: NZ]
	sbc $3815FF.l,X		; FF FF 15 38 ; Subtract with carry (long,X) $3815FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $CC15.w		; AC 15 CC ; Load $CC15.w into Y register [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cmp $AA1C.w		; CD 1C AA ; Compare $AA1C.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $A9CC.w		; CD CC A9 ; Compare $A9CC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	rol $1F.b,X		; 36 1F ; Rotate left $1F.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dec $17.b		; C6 17 ; Decrement $17.b [Reads: Direct Page] [Flags: NZ]
	and $7F17C6.l,X		; 3F C6 17 7F ; AND accumulator with memory (long,X) $7F17C6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $16.b		; C6 16 ; Decrement $16.b [Reads: Direct Page] [Flags: NZ]
	ldy $2DC6.w,X		; BC C6 2D ; Load Y register $2DC6.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	dec $4F.b		; C6 4F ; Decrement $4F.b [Reads: Direct Page] [Flags: NZ]
	ldy $C6.b,X		; B4 C6 ; Load Y register $C6.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	eor [$3F.b],Y		; 57 3F ; Exclusive OR accumulator with memory (long indexed) [$3F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $57.b		; C6 57 ; Decrement $57.b [Reads: Direct Page] [Flags: NZ]
	adc $1F9EC6.l,X		; 7F C6 9E 1F ; Add long $1F9EC6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $97.b		; C6 97 ; Decrement $97.b [Reads: Direct Page] [Flags: NZ]
	and $3FCDC6.l,X		; 3F C6 CD 3F ; AND accumulator with memory (long,X) $3FCDC6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $97.b		; C6 97 ; Decrement $97.b [Reads: Direct Page] [Flags: NZ]
	adc $7FCDC6.l,X		; 7F C6 CD 7F ; Add long $7FCDC6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $8F.b		; C6 8F ; Decrement $8F.b [Reads: Direct Page] [Flags: NZ]
	ldy $C6.b,X		; B4 C6 ; Load Y register $C6.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $BA.b,X		; B5 BA ; Load $BA.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	dec $CD.b		; C6 CD ; Decrement $CD.b [Reads: Direct Page] [Flags: NZ]
	ldy $F0C6.w,X		; BC C6 F0 ; Load Y register $F0C6.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $FF0A71.l,X		; FF 71 0A FF ; Subtract with carry (long,X) $FF0A71.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FC18E1.l,X		; FF E1 18 FC ; Subtract with carry (long,X) $FC18E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $2E1AC0.l		; 22 C0 1A 2E ; Jump to subroutine long $2E1AC0.l [Writes: Stack Pointer] [Flow: call]
	ora ($68.b,X)		; 01 68 ; Logical OR ($68.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $A2FD61.l		; 22 61 FD A2 ; Jump to subroutine long $A2FD61.l [Writes: Stack Pointer] [Flow: call]
	cpy $FD.b		; C4 FD ; Compare $FD.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inc $0221.w,X		; FE 21 02 ; Increment memory $0221.w,X [Reads: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsl $22FE62.l		; 22 62 FE 22 ; Jump to subroutine long $22FE62.l [Writes: Stack Pointer] [Flow: call]
	dec $9A.b		; C6 9A ; Decrement $9A.b [Reads: Direct Page] [Flags: NZ]
	rol $FF01.w		; 2E 01 FF ; Rotate left $FF01.w [Flags: NCZ]
	ldx #$FCC2.w		; A2 C2 FC ; Load #$FCC2.w into X register [Writes: X Index] [Flags: NZ]
	and $41.b		; 25 41 ; Logical AND $41.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$02.b],Y		; 57 02 ; Exclusive OR accumulator with memory (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($57.b)		; 92 57 ; Store accumulator (indirect) ($57.b) [Reads: Direct Page, Accumulator]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $43.b		; A5 43 ; Load $43.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $43.b,S		; 23 43 ; AND accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($3832.w,X)		; FC 32 38 ; Jump to subroutine indirect indexed ($3832.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $32.b		; E5 32 ; Subtract $32.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor #$42FE.w		; 49 FE 42 ; Exclusive OR #$42FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$52FE.w		; 49 FE 52 ; Exclusive OR #$52FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$FDFE.w		; 49 FE FD ; Exclusive OR #$FDFE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9F.b,S		; 83 9F ; Store accumulator (stack relative) $9F.b,S [Reads: Stack Pointer, Accumulator]
	sbc $1F84.w,X		; FD 84 1F ; Subtract with carry $1F84.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	inc $63.b		; E6 63 ; Increment $63.b [Reads: Direct Page] [Flags: NZ]
	eor ($FA.b,S),Y		; 53 FA ; XOR accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($53.b,S),Y		; B3 53 ; Load accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	trb $55.b		; 14 55 ; Test and reset bits $55.b [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($05.b,S),Y		; 93 05 ; Store accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $7B.b		; 06 7B ; Arithmetic shift left $7B.b [Reads: Direct Page] [Flags: NCZ]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $23.b,S		; 83 23 ; Store accumulator (stack relative) $23.b,S [Reads: Stack Pointer, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $9E64.w,X		; FE 64 9E ; Increment memory $9E64.w,X [Reads: X Index] [Flags: NZ]
	inc $1E65.w,X		; FE 65 1E ; Increment memory $1E65.w,X [Reads: X Index] [Flags: NZ]
	ldy #$E438.w		; A0 38 E4 ; Load #$E438.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$FE49.w		; A2 49 FE ; Load #$FE49.w into X register [Writes: X Index] [Flags: NZ]
	inc $9FC3.w,X		; FE C3 9F ; Increment memory $9FC3.w,X [Reads: X Index] [Flags: NZ]
	inc $1FC4.w,X		; FE C4 1F ; Increment memory $1FC4.w,X [Reads: X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $19.b,S		; E3 19 ; Subtract stack-relative $19.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	ldx #$61F9.w		; A2 F9 61 ; Load #$61F9.w into X register [Writes: X Index] [Flags: NZ]
	ldx #$19F9.w		; A2 F9 19 ; Load #$19F9.w into X register [Writes: X Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$F9		; C2 F9
	adc ($C2.b,X)		; 61 C2 ; Add with carry ($C2.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A921.w,Y		; F9 21 A9 ; Subtract with carry $A921.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $B949.w,X		; FE 49 B9 ; Increment memory $B949.w,X [Reads: X Index] [Flags: NZ]
	inc $D129.w,X		; FE 29 D1 ; Increment memory $D129.w,X [Reads: X Index] [Flags: NZ]
	inc $D959.w,X		; FE 59 D9 ; Increment memory $D959.w,X [Reads: X Index] [Flags: NZ]
	inc $B898.w,X		; FE 98 B8 ; Increment memory $B898.w,X [Reads: X Index] [Flags: NZ]
	lsr $6CFE.w,X		; 5E FE 6C ; Logical shift right $6CFE.w,X [Reads: X Index] [Flags: NCZ]
	ora $C2A8A7.l,X		; 1F A7 A8 C2 ; Logical OR long $C2A8A7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B9.b		; A4 B9 ; Load $B9.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$A7		; C2 A7
	.db $D0, $C2		; D0 C2 ; Branch if not equal to $D0, $C2 [Flow: branch]
	pei ($B9.b)		; D4 B9 ; Push effective indirect address ($B9.b) [Reads: Direct Page] [Writes: Stack Pointer]
.ACCU 16
	rep #$A7		; C2 A7
	lda #$A627.w		; A9 27 A6 ; Load #$A627.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $DDA76A.l		; AF 6A A7 DD ; Load long $DDA76A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
.ACCU 8
	sep #$AF		; E2 AF
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($B7.b),Y		; B1 B7 ; Load accumulator ($B7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$B1.b		; 29 B1 ; Logical AND #$B1.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($2A.b,S),Y		; D3 2A ; Compare accumulator (stack relative indirect indexed) ($2A.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	lda ($B9.b),Y		; B1 B9 ; Load accumulator ($B9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $B9.b,X		; D5 B9 ; Compare accumulator $B9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	rep #$C2		; C2 C2 ; Reset processor status bits #$C2 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	jsr ($0D0B.w,X)		; FC 0B 0D ; Jump to subroutine indirect indexed ($0D0B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$0D49.w		; C0 49 0D ; Compare #$0D49.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$0D9B.w		; C0 9B 0D ; Compare #$0D9B.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$0DD9.w		; C0 D9 0D ; Compare #$0DD9.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$6400.w		; C0 00 64 ; Compare #$6400.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($0000.w)		; 6C 00 00 ; Jump indirect to ($0000.w) [Flow: jump]
	stz $00.b,X		; 74 00 ; Store zero to $00.b,X [Reads: X Index]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $1C.b,S		; 63 1C ; Add with carry (stack relative) $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	sbc $0CE1FF.l,X		; FF FF E1 0C ; Subtract with carry (long,X) $0CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($C851.w,X)		; FC 51 C8 ; Jump to subroutine indirect indexed ($C851.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $1D.b		; 24 1D ; Test bits $1D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $2063.w		; 2D 63 20 ; Logical AND $2063.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $88.b,X		; 56 88 ; Logical shift right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $7B.b,X		; 15 7B ; OR accumulator with memory $7B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $4C.b,S		; 63 4C ; Add with carry (stack relative) $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $FD03.w,X		; 1D 03 FD ; OR accumulator with memory $FD03.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $28642E.l,X		; 5F 2E 64 28 ; Exclusive OR accumulator with memory (long,X) $28642E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.ACCU 16
	rep #$28		; C2 28
	and #$2007.w		; 29 07 20 ; Logical AND #$2007.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $67		; 30 67 ; Branch if minus to $30, $67 [Flow: branch]
	jsr ($9882.w,X)		; FC 82 98 ; Jump to subroutine indirect indexed ($9882.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$FD07.w		; 29 07 FD ; Logical AND #$FD07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $62, $9A, $5B		; 62 9A 5B ; Push effective relative address $62, $9A, $5B [Writes: Stack Pointer]
	and ($68.b),Y		; 31 68 ; AND accumulator with memory ($68.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($74.b,X)		; 21 74 ; Logical AND ($74.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp $28.b,S		; C3 28 ; Compare accumulator (stack relative) $28.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	adc $07.b,X		; 75 07 ; Add $07.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($5887.w,X)		; FC 87 58 ; Jump to subroutine indirect indexed ($5887.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($7E.b,X)		; 21 7E ; Logical AND ($7E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc [$48.b]		; 67 48 ; Add with carry (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $70, $C2		; 70 C2 ; Branch if overflow set to $70, $C2 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rep #$48		; C2 48 ; Reset processor status bits #$48 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	.db $90, $C2		; 90 C2 ; Branch if carry clear to $90, $C2 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
.ACCU 16
	rep #$28		; C2 28
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rep #$48		; C2 48 ; Reset processor status bits #$48 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	lda ($C2.b),Y		; B1 C2 ; Load accumulator ($C2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$34		; C2 34
	ora $4869.w,X		; 1D 69 48 ; OR accumulator with memory $4869.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $3B69.w,X		; 1D 69 3B ; OR accumulator with memory $3B69.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $23.b,S		; 43 23 ; Exclusive OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and ($5B.b,S),Y		; 33 5B ; AND accumulator (stack relative indirect indexed) ($5B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $30, $60		; 30 60 ; Branch if minus to $30, $60 [Flow: branch]
	lsr $3914.w,X		; 5E 14 39 ; Logical shift right $3914.w,X [Reads: X Index] [Flags: NCZ]
	jsl $226714.l		; 22 14 67 22 ; Jump to subroutine long $226714.l [Writes: Stack Pointer] [Flow: call]
	trb $B5.b		; 14 B5 ; Test and reset bits $B5.b [Reads: Accumulator] [Flags: Z]
	jsl $5EA048.l		; 22 48 A0 5E ; Jump to subroutine long $5EA048.l [Writes: Stack Pointer] [Flow: call]
	.db $50, $A3		; 50 A3 ; Branch if overflow clear to $50, $A3 [Flow: branch]
	jsl $FAAB4B.l		; 22 4B AB FA ; Jump to subroutine long $FAAB4B.l [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsl $051398.l		; 22 98 13 05 ; Jump to subroutine long $051398.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $AB.b		; 06 AB ; Arithmetic shift left $AB.b [Reads: Direct Page] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	inc $2ACB.w,X		; FE CB 2A ; Increment memory $2ACB.w,X [Reads: X Index] [Flags: NZ]
	inc $41A0.w,X		; FE A0 41 ; Increment memory $41A0.w,X [Reads: X Index] [Flags: NZ]
	sta [$D8.b]		; 87 D8 ; Store accumulator (long) [$D8.b] [Reads: Direct Page, Accumulator]
	eor ($87.b,X)		; 41 87 ; Exclusive OR accumulator with memory ($87.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($42.b),Y		; B1 42 ; Load accumulator ($42.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $42C9.w,Y		; F9 C9 42 ; Subtract with carry $42C9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $5AB1.w,Y		; F9 B1 5A ; Subtract with carry $5AB1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $5AC9.w,Y		; F9 C9 5A ; Subtract with carry $5AC9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $AAA8.w,Y		; F9 A8 AA ; Subtract with carry $AAA8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	.db $B0, $B2		; B0 B2 ; Branch if carry set to $B0, $B2 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy #$BBC3.w		; A0 C3 BB ; Load #$BBC3.w into Y register [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy #$BBD3.w		; A0 D3 BB ; Load #$BBD3.w into Y register [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy #$FDB0.w		; A0 B0 FD ; Load #$FDB0.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $142BFF.l,X		; FF FF 2B 14 ; Subtract with carry (long,X) $142BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $833020.l,X		; FF 20 30 83 ; Subtract with carry (long,X) $833020.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $1C02.w		; 2E 02 1C ; Rotate left $1C02.w [Flags: NCZ]
	jsl $FFFF00.l		; 22 00 FF FF ; Jump to subroutine long $FFFF00.l [Writes: Stack Pointer] [Flow: call]
	sbc ($18.b,X)		; E1 18 ; Subtract with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($00A2.w,X)		; FC A2 00 ; Jump to subroutine indirect indexed ($00A2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $01.b,S		; 23 01 ; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($23.b),Y		; B1 23 ; Load accumulator ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldx #$2902.w		; A2 02 29 ; Load #$2902.w into X register [Writes: X Index] [Flags: NZ]
	and ($61.b,S),Y		; 33 61 ; AND accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($81A6.w,X)		; FC A6 81 ; Jump to subroutine indirect indexed ($81A6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and $605E.w,Y		; 39 5E 60 ; AND accumulator with memory $605E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $885E.w,Y		; 39 5E 88 ; AND accumulator with memory $885E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr $4958.w,X		; 5E 58 49 ; Logical shift right $4958.w,X [Reads: X Index] [Flags: NCZ]
	bit #$4960.w		; 89 60 49 ; Test bits #$4960.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$3A90.w		; 89 90 3A ; Test bits #$3A90.w with accumulator [Reads: Accumulator] [Flags: Z]
	lsr $4A80.w,X		; 5E 80 4A ; Logical shift right $4A80.w,X [Reads: X Index] [Flags: NCZ]
	lsr $4988.w,X		; 5E 88 49 ; Logical shift right $4988.w,X [Reads: X Index] [Flags: NCZ]
	lsr $30D8.w,X		; 5E D8 30 ; Logical shift right $30D8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $38C8.w,X		; 5E C8 38 ; Logical shift right $38C8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $49B8.w,X		; 5E B8 49 ; Logical shift right $49B8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $48C0.w,X		; 5E C0 48 ; Logical shift right $48C0.w,X [Reads: X Index] [Flags: NCZ]
	lsr $39D0.w,X		; 5E D0 39 ; Logical shift right $39D0.w,X [Reads: X Index] [Flags: NCZ]
	bit #$41D0.w		; 89 D0 41 ; Test bits #$41D0.w with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$5A69.w		; 89 69 5A ; Test bits #$5A69.w with accumulator [Reads: Accumulator] [Flags: Z]
	lsr $5880.w,X		; 5E 80 58 ; Logical shift right $5880.w,X [Reads: X Index] [Flags: NCZ]
	lsr $59A0.w,X		; 5E A0 59 ; Logical shift right $59A0.w,X [Reads: X Index] [Flags: NCZ]
	lsr $59D0.w,X		; 5E D0 59 ; Logical shift right $59D0.w,X [Reads: X Index] [Flags: NCZ]
	lsr $2F37.w,X		; 5E 37 2F ; Logical shift right $2F37.w,X [Reads: X Index] [Flags: NCZ]
	eor $222EC5.l,X		; 5F C5 2E 22 ; Exclusive OR accumulator with memory (long,X) $222EC5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $4B69.w		; 2C 69 4B ; Test bits $4B69.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $2269D8.l,X		; 5F D8 69 22 ; Exclusive OR accumulator with memory (long,X) $2269D8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	adc $FA.b,S		; 63 FA ; Add with carry (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and $F942.w,Y		; 39 42 F9 ; AND accumulator with memory $F942.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	rol $C2.b,X		; 36 C2 ; Rotate left $C2.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and ($27.b),Y		; 31 27 ; AND accumulator with memory ($27.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and [$6A.b],Y		; 37 6A ; AND accumulator with memory (long indexed) [$6A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $28.b		; 65 28 ; Add $28.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lsr $37.b,X		; 56 37 ; Logical shift right $37.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $33.b,S		; E3 33 ; Subtract stack-relative $33.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $43.b,S		; E3 43 ; Subtract stack-relative $43.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	jsr ($AB1B.w,X)		; FC 1B AB ; Jump to subroutine indirect indexed ($AB1B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($BB63.w,X)		; FC 63 BB ; Jump to subroutine indirect indexed ($BB63.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CB4B.w,X)		; FC 4B CB ; Jump to subroutine indirect indexed ($CB4B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CB33.w,X)		; FC 33 CB ; Jump to subroutine indirect indexed ($CB33.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CA1A.w,X)		; FC 1A CA ; Jump to subroutine indirect indexed ($CA1A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($E21A.w,X)		; FC 1A E2 ; Jump to subroutine indirect indexed ($E21A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CA3A.w,X)		; FC 3A CA ; Jump to subroutine indirect indexed ($CA3A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CA42.w,X)		; FC 42 CA ; Jump to subroutine indirect indexed ($CA42.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($AA32.w,X)		; FC 32 AA ; Jump to subroutine indirect indexed ($AA32.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($AA4A.w,X)		; FC 4A AA ; Jump to subroutine indirect indexed ($AA4A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A262.w,X)		; FC 62 A2 ; Jump to subroutine indirect indexed ($A262.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CA62.w,X)		; FC 62 CA ; Jump to subroutine indirect indexed ($CA62.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($9F2E.w,X)		; FC 2E 9F ; Jump to subroutine indirect indexed ($9F2E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc #$D714.w		; 69 14 D7 ; Add #$D714.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $22B22D.l		; 22 2D B2 22 ; Jump to subroutine long $22B22D.l [Writes: Stack Pointer] [Flow: call]
	.db $50, $9E		; 50 9E ; Branch if overflow clear to $50, $9E [Flow: branch]
	adc #$B240.w		; 69 40 B2 ; Add #$B240.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$D63C.w		; 69 3C D6 ; Add #$D63C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$C65C.w		; 69 5C C6 ; Add #$C65C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$B05C.w		; 69 5C B0 ; Add #$B05C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $22AAA0.l		; 22 A0 AA 22 ; Jump to subroutine long $22AAA0.l [Writes: Stack Pointer] [Flow: call]
	ldy #$69AA.w		; A0 AA 69 ; Load #$69AA.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$22BE.w		; A0 BE 22 ; Load #$22BE.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $AA.b,X		; B4 AA ; Load Y register $AA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	adc #$CA94.w		; 69 94 CA ; Add #$CA94.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $69CA94.l		; 22 94 CA 69 ; Jump to subroutine long $69CA94.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	adc #$DE94.w		; 69 94 DE ; Add #$DE94.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $22CAB4.l		; 22 B4 CA 22 ; Jump to subroutine long $22CAB4.l [Writes: Stack Pointer] [Flow: call]
	ldy $CA.b,X		; B4 CA ; Load Y register $CA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	adc #$DEB4.w		; 69 B4 DE ; Add #$DEB4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $69CAC8.l		; 22 C8 CA 69 ; Jump to subroutine long $69CAC8.l [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $9EC822.l,X		; 9F 22 C8 9E ; Store accumulator (long,X) $9EC822.l,X [Reads: Accumulator, X Index]
	adc #$B3C8.w		; 69 C8 B3 ; Add #$B3C8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $699EE0.l		; 22 E0 9E 69 ; Jump to subroutine long $699EE0.l [Writes: Stack Pointer] [Flow: call]
	pei ($D6.b)		; D4 D6 ; Push effective indirect address ($D6.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $69D6D4.l		; 22 D4 D6 69 ; Jump to subroutine long $69D6D4.l [Writes: Stack Pointer] [Flow: call]
	pei ($EA.b)		; D4 EA ; Push effective indirect address ($EA.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $69D6E8.l		; 22 E8 D6 69 ; Jump to subroutine long $69D6E8.l [Writes: Stack Pointer] [Flow: call]
	cmp ($B9.b,X)		; C1 B9 ; Compare accumulator ($B9.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	inc $A3DB.w,X		; FE DB A3 ; Increment memory $A3DB.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc [$A3.b]		; E7 A3 ; Subtract with carry (long) [$A3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp ($A2.b)		; D2 A2 ; Compare accumulator (indirect) ($A2.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jsr ($ABD3.w,X)		; FC D3 AB ; Jump to subroutine indirect indexed ($ABD3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($1000.w,X)		; FC 00 10 ; Jump to subroutine indirect indexed ($1000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $C0.b,S		; 23 C0 ; AND accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$C061.w		; 09 61 C0 ; Logical OR #$C061.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sta ($18.b,X)		; 81 18 ; Store accumulator ($18.b,X) [Reads: Direct Page, Accumulator, X Index]
	jsl $1C602E.l		; 22 2E 60 1C ; Jump to subroutine long $1C602E.l [Writes: Stack Pointer] [Flow: call]
	sbc $0CE1FF.l,X		; FF FF E1 0C ; Subtract with carry (long,X) $0CE1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $19C2.w		; 20 C2 19 ; Jump to subroutine at $19C2.w [Writes: Stack Pointer] [Flow: call]
	and ($C3.b,S),Y		; 33 C3 ; AND accumulator (stack relative indirect indexed) ($C3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($C3.b),Y		; 51 C3 ; Exclusive OR accumulator with memory ($C3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $30, $C2		; 30 C2 ; Branch if minus to $30, $C2 [Flow: branch]
	eor ($21.b),Y		; 51 21 ; Exclusive OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $48.b,S		; C3 48 ; Compare accumulator (stack relative) $48.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	and ($C2.b)		; 32 C2 ; AND accumulator with memory (indirect) ($C2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $50, $C2		; 50 C2 ; Branch if overflow clear to $50, $C2 [Flow: branch]
	ora [$78.b],Y		; 17 78 ; OR accumulator with memory (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$38		; C2 38
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rep #$4A		; C2 4A ; Reset processor status bits #$4A [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	adc ($C3.b),Y		; 71 C3 ; Add with carry ($C3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$58C2.w		; A0 C2 58 ; Load #$58C2.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$14C2.w		; A0 C2 14 ; Load #$14C2.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $231727.l,X		; 1F 27 17 23 ; Logical OR long $231727.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	trb $60.b		; 14 60 ; Test and reset bits $60.b [Reads: Accumulator] [Flags: Z]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $67.b,X		; 15 67 ; OR accumulator with memory $67.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	bit $6B38.w		; 2C 38 6B ; Test bits $6B38.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $7B.b,X		; 15 7B ; OR accumulator with memory $7B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rol $7D14.w		; 2E 14 7D ; Rotate left $7D14.w [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$87.b],Y		; 17 87 ; OR accumulator with memory (long indexed) [$87.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	mvn $28,$87		; 54 87 28 ; Move block negative $28,$87 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc [$6B.b],Y		; 77 6B ; Add with carry (long indexed) [$6B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $73.b		; 45 73 ; Exclusive OR $73.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $6344.w		; 2D 44 63 ; Logical AND $6344.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $5F.b		; 45 5F ; Exclusive OR $5F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	eor $6B.b,X		; 55 6B ; Exclusive OR accumulator with memory $6B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	mvn $2D,$53		; 54 53 2D ; Move block negative $2D,$53 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $39.b,X		; 55 39 ; Exclusive OR accumulator with memory $39.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvn $2B,$37		; 54 37 2B ; Move block negative $2B,$37 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc #$6B20.w		; 69 20 6B ; Add #$6B20.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $271D.w		; 4D 1D 27 ; Exclusive OR $271D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $6A23.w		; 4C 23 6A ; Jump to $6A23.w [Flow: jump]
	and #$2A33.w		; 29 33 2A ; Logical AND #$2A33.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $6B.b,S		; 23 6B ; AND accumulator with stack relative $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $293D.w		; 2D 3D 29 ; Logical AND $293D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $6B43.w		; 2C 43 6B ; Test bits $6B43.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $2A51.w		; 2D 51 2A ; Logical AND $2A51.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $6A.b,S		; 43 6A ; Exclusive OR accumulator with stack relative $6A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$A3.b],Y		; 17 A3 ; OR accumulator with memory (long indexed) [$A3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$54.b]		; 27 54 ; AND accumulator with memory (long) [$54.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $27.b,S		; A3 27 ; Load accumulator (stack relative) $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$AF.b],Y		; 17 AF ; OR accumulator with memory (long indexed) [$AF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	mvn $28,$AF		; 54 AF 28 ; Move block negative $28,$AF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	lsr $3858.w,X		; 5E 58 38 ; Logical shift right $3858.w,X [Reads: X Index] [Flags: NCZ]
	lsr $4038.w,X		; 5E 38 40 ; Logical shift right $4038.w,X [Reads: X Index] [Flags: NCZ]
	lsr $6850.w,X		; 5E 50 68 ; Logical shift right $6850.w,X [Reads: X Index] [Flags: NCZ]
	lsr $6820.w,X		; 5E 20 68 ; Logical shift right $6820.w,X [Reads: X Index] [Flags: NCZ]
	lsr $7030.w,X		; 5E 30 70 ; Logical shift right $7030.w,X [Reads: X Index] [Flags: NCZ]
	lsr $8818.w,X		; 5E 18 88 ; Logical shift right $8818.w,X [Reads: X Index] [Flags: NCZ]
	lsr $9860.w,X		; 5E 60 98 ; Logical shift right $9860.w,X [Reads: X Index] [Flags: NCZ]
	lsr $C028.w,X		; 5E 28 C0 ; Logical shift right $C028.w,X [Reads: X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	trb $CD.b		; 14 CD ; Test and reset bits $CD.b [Reads: Accumulator] [Flags: Z]
	eor $C050.w,X		; 5D 50 C0 ; Exclusive OR accumulator with memory $C050.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $50, $CD		; 50 CD ; Branch if overflow clear to $50, $CD [Flow: branch]
	eor $D031.w,X		; 5D 31 D0 ; Exclusive OR accumulator with memory $D031.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor $4B.b,S		; 43 4B ; Exclusive OR accumulator with stack relative $4B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $BB.b,S		; 43 BB ; Exclusive OR accumulator with stack relative $BB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $50, $E6		; 50 E6 ; Branch if overflow clear to $50, $E6 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpx $B2.b		; E4 B2 ; Compare $B2.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $D0.b		; E5 D0 ; Subtract $D0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and ($E3.b)		; 32 E3 ; AND accumulator with memory (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $E650.w,Y		; B9 50 E6 ; Load $E650.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor ($F9.b,X)		; 41 F9 ; Exclusive OR accumulator with memory ($F9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$39		; C2 39
	sbc $41BA.w,Y		; F9 BA 41 ; Subtract with carry $41BA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $49C2.w,Y		; F9 C2 49 ; Subtract with carry $49C2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $40A0.w,Y		; F9 A0 40 ; Subtract with carry $40A0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $39B8.w,X		; 5E B8 39 ; Logical shift right $39B8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $49B8.w,X		; 5E B8 49 ; Logical shift right $49B8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $04FF.w,X		; 5E FF 04 ; Logical shift right $04FF.w,X [Reads: X Index] [Flags: NCZ]
	ora $FE319A.l,X		; 1F 9A 31 FE ; Logical OR long $FE319A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	eor #$9BFE.w		; 49 FE 9B ; Exclusive OR #$9BFE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $FA.b,S		; 63 FA ; Add with carry (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $63.b,S		; E3 63 ; Subtract stack-relative $63.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $FF9F0B.l,X		; FF 0B 9F FF ; Subtract with carry (long,X) $FF9F0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $C19E.w		; 0C 9E C1 ; Test and set bits $C19E.w [Reads: Accumulator] [Flags: Z]
.ACCU 16
.INDEX 16
	rep #$F9		; C2 F9
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $9B5E.w		; 20 5E 9B ; Jump to subroutine at $9B5E.w [Writes: Stack Pointer] [Flow: call]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda ($C2.b,X)		; A1 C2 ; Load accumulator ($C2.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$C2C9.w		; A0 C9 C2 ; Load #$C2C9.w into Y register [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $DAFE.w,Y		; D9 FE DA ; Compare accumulator $DAFE.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $A2FE.w,Y		; D9 FE A2 ; Compare accumulator $A2FE.w,Y [Reads: Y Index] [Flags: NCZ]
	lda ($FE.b,X)		; A1 FE ; Load accumulator ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A1.b)		; B2 A1 ; Load accumulator (indirect) ($A1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $C9A0.w,X		; FE A0 C9 ; Increment memory $C9A0.w,X [Reads: X Index] [Flags: NZ]
	and [$A1.b]		; 27 A1 ; AND accumulator with memory (long) [$A1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $A06A.w		; CD 6A A0 ; Compare $A06A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $28.b		; E5 28 ; Subtract $28.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda $6BCD.w		; AD CD 6B ; Load $6BCD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda ($27.b,X)		; A1 27 ; Load accumulator ($27.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $6AA5.w,Y		; D9 A5 6A ; Compare accumulator $6AA5.w,Y [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda $E528.w,X		; BD 28 E5 ; Load $E528.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $62, $36, $82		; 62 36 82 ; Push effective relative address $62, $36, $82 [Writes: Stack Pointer]
	trb $0063.w		; 1C 63 00 ; Test and reset bits $0063.w [Reads: Accumulator] [Flags: Z]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0081FF.l,X		; FF FF 81 00 ; Subtract with carry (long,X) $0081FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($D9.b,S),Y		; D3 D9 ; Compare accumulator (stack relative indirect indexed) ($D9.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	jsr ($E1FC.w,X)		; FC FC E1 ; Jump to subroutine indirect indexed ($E1FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	inc $38E1.w,X		; FE E1 38 ; Increment memory $38E1.w,X [Reads: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $30, $39		; 30 39 ; Branch if minus to $30, $39 [Flow: branch]
	and $31A0.w,X		; 3D A0 31 ; AND accumulator with memory $31A0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $31C8.w,X		; 5E C8 31 ; Logical shift right $31C8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $5098.w,X		; 5E 98 50 ; Logical shift right $5098.w,X [Reads: X Index] [Flags: NCZ]
	lsr $51A0.w,X		; 5E A0 51 ; Logical shift right $51A0.w,X [Reads: X Index] [Flags: NCZ]
	lsr $51C8.w,X		; 5E C8 51 ; Logical shift right $51C8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $50E0.w,X		; 5E E0 50 ; Logical shift right $50E0.w,X [Reads: X Index] [Flags: NCZ]
	lsr $40A8.w,X		; 5E A8 40 ; Logical shift right $40A8.w,X [Reads: X Index] [Flags: NCZ]
	dec $40D0.w,X		; DE D0 40 ; Decrement memory $40D0.w,X [Reads: X Index] [Flags: NZ]
	dec $639B.w,X		; DE 9B 63 ; Decrement memory $639B.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $63.b,S		; E3 63 ; Subtract stack-relative $63.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	stz $1422.w		; 9C 22 14 ; Store zero to $1422.w
	sta $A81869.l,X		; 9F 69 18 A8 ; Store accumulator (long,X) $A81869.l,X [Reads: Accumulator, X Index]
	lsr $A820.w,X		; 5E 20 A8 ; Logical shift right $A820.w,X [Reads: X Index] [Flags: NCZ]
	lsr $B028.w,X		; 5E 28 B0 ; Logical shift right $B028.w,X [Reads: X Index] [Flags: NCZ]
	dec $B050.w,X		; DE 50 B0 ; Decrement memory $B050.w,X [Reads: X Index] [Flags: NZ]
	dec $D028.w,X		; DE 28 D0 ; Decrement memory $D028.w,X [Reads: X Index] [Flags: NZ]
	dec $D050.w,X		; DE 50 D0 ; Decrement memory $D050.w,X [Reads: X Index] [Flags: NZ]
	dec $69FC.w,X		; DE FC 69 ; Decrement memory $69FC.w,X [Reads: X Index] [Flags: NZ]
	and $9C58.w,Y		; 39 58 9C ; AND accumulator with memory $9C58.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $B814.w,X		; DE 14 B8 ; Decrement memory $B814.w,X [Reads: X Index] [Flags: NZ]
	dec $BC39.w,X		; [PATTERN: Memory clearing operation] DE 39 BC ; Decrement memory $BC39.w,X [Reads: X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	dec $CEFC.w,X		; DE FC CE ; Decrement memory $CEFC.w,X [Reads: X Index] [Flags: NZ]
	stz $FD.b,X		; 74 FD ; Store zero to $FD.b,X [Reads: X Index]
	rol $9974.w		; 2E 74 99 ; Rotate left $9974.w [Flags: NCZ]
	jsl $22E1F9.l		; 22 F9 E1 22 ; Jump to subroutine long $22E1F9.l [Writes: Stack Pointer] [Flow: call]
	sbc $A2A0.w,Y		; F9 A0 A2 ; Subtract with carry $A2A0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($A2D0.w,X)		; FC D0 A2 ; Jump to subroutine indirect indexed ($A2D0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($DAA0.w,X)		; FC A0 DA ; Jump to subroutine indirect indexed ($DAA0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A39B.w,X)		; FC 9B A3 ; Jump to subroutine indirect indexed ($A39B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda ($DB.b,S),Y		; B3 DB ; Load accumulator (stack relative indirect indexed) ($DB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($5E.b),Y		; B1 5E ; Load accumulator ($5E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $A9		; B0 A9 ; Branch if carry set to $B0, $A9 [Flow: branch]
	lsr $B1C8.w,X		; 5E C8 B1 ; Logical shift right $B1C8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $D198.w,X		; 5E 98 D1 ; Logical shift right $D198.w,X [Reads: X Index] [Flags: NCZ]
	lsr $D1C8.w,X		; 5E C8 D1 ; Logical shift right $D1C8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $D8C8.w,X		; 5E C8 D8 ; Logical shift right $D8C8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $E0C8.w,X		; 5E C8 E0 ; Logical shift right $E0C8.w,X [Reads: X Index] [Flags: NCZ]
	lsr $D0E0.w,X		; 5E E0 D0 ; Logical shift right $D0E0.w,X [Reads: X Index] [Flags: NCZ]
	lsr $D1B0.w,X		; 5E B0 D1 ; Logical shift right $D1B0.w,X [Reads: X Index] [Flags: NCZ]
	bit #$D3D3.w		; 89 D3 D3 ; Test bits #$D3D3.w with accumulator [Reads: Accumulator] [Flags: Z]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	inc $DAE1.w,X		; FE E1 DA ; Increment memory $DAE1.w,X [Reads: X Index] [Flags: NZ]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $18.b,S		; 63 18 ; Add with carry (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	.db $62, $1C, $02		; 62 1C 02 ; Push effective relative address $62, $1C, $02 [Writes: Stack Pointer]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF08E1.l,X		; FF E1 08 FF ; Subtract with carry (long,X) $FF08E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx #$B183.w		; A2 83 B1 ; Load #$B183.w into X register [Writes: X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $87, $A0		; 82 87 A0 ; Branch always long to $82, $87, $A0 [Flow: branch]
	and $FE62.w,Y		; 39 62 FE ; AND accumulator with memory $FE62.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sty $06.b		; 84 06 ; Store Y register to $06.b [Reads: Y Index]
	lda ($43.b),Y		; B1 43 ; Load accumulator ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc $D083A8.l,X		; FF A8 83 D0 ; Subtract with carry (long,X) $D083A8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta [$C4.b]		; 87 C4 ; Store accumulator (long) [$C4.b] [Reads: Direct Page, Accumulator]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $62, $D0, $AB		; 62 D0 AB ; Push effective relative address $62, $D0, $AB [Writes: Stack Pointer]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	stx $FF.b		; 86 FF ; Store X register to $FF.b [Reads: X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $82, $FE, $2A		; 82 FE 2A ; Branch always long to $82, $FE, $2A [Flow: branch]
	.db $80, $98		; 80 98 ; Branch always to $80, $98 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sty $AC.b		; 84 AC ; Store Y register to $AC.b [Reads: Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc ($98.b,X)		; 61 98 ; Add with carry ($98.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sta $FE.b		; 85 FE ; Store accumulator to $FE.b [Reads: Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sta ($FE.b,X)		; 81 FE ; Store accumulator ($FE.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta $87.b		; 85 87 ; Store accumulator to $87.b [Reads: Accumulator]
	lda ($58.b),Y		; B1 58 ; Load accumulator ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $85.b		; 45 85 ; Exclusive OR $85.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$6269.w		; A0 69 62 ; Load #$6269.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $0687.w,X		; FE 87 06 ; Increment memory $0687.w,X [Reads: X Index] [Flags: NZ]
	lda ($70.b),Y		; B1 70 ; Load accumulator ($70.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor [$04.b]		; 47 04 ; Exclusive OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $69		; D0 69 ; Branch if not equal to $D0, $69 [Flow: branch]
	adc ($1B.b,X)		; 61 1B ; Add with carry ($1B.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $E1.b,S		; 23 E1 ; AND accumulator with stack relative $E1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and $E1.b,S		; 23 E1 ; AND accumulator with stack relative $E1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc ($58.b,X)		; E1 58 ; Subtract with carry ($58.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc ($39.b,X)		; E1 39 ; Subtract with carry ($39.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($FE.b,X)		; 21 FE ; Logical AND ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor #$FE61.w		; 49 61 FE ; Exclusive OR #$FE61.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($22.b,X)		; 41 22 ; Exclusive OR accumulator with memory ($22.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $B228.w,Y		; F9 28 B2 ; Subtract with carry $B228.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $C128.w,X		; 5E 28 C1 ; Logical shift right $C128.w,X [Reads: X Index] [Flags: NCZ]
	lsr $D228.w,X		; 5E 28 D2 ; Logical shift right $D228.w,X [Reads: X Index] [Flags: NCZ]
	lsr $B950.w,X		; 5E 50 B9 ; Logical shift right $B950.w,X [Reads: X Index] [Flags: NCZ]
	bit #$BB3B.w		; 89 3B BB ; Test bits #$BB3B.w with accumulator [Reads: Accumulator] [Flags: Z]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $C3.b,S		; 43 C3 ; Exclusive OR accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sta $E61C.w,Y		; 99 1C E6 ; Store accumulator to $E61C.w,Y [Reads: Y Index, Accumulator]
	clv		; B8 ; Clear overflow flag [Flags: V]
	trb $9471.w		; 1C 71 94 ; Test and reset bits $9471.w [Reads: Accumulator] [Flags: Z]
	bit $B834.w		; 2C 34 B8 ; Test bits $B834.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jmp $74B856.l		; 5C 56 B8 74 ; Jump long to $74B856.l [Flow: jump]
	eor $A0.b,X		; 55 A0 ; Exclusive OR accumulator with memory $A0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $9B56.w		; ED 56 9B ; Subtract $9B56.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $779BFA.l,X		; 5F FA 9B 77 ; Exclusive OR accumulator with memory (long,X) $779BFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sty $1C.b,X		; 94 1C ; Store Y register $1C.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	adc ($AA.b),Y		; 71 AA ; Add with carry ($AA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $A4E5.w		; 4C E5 A4 ; Jump to $A4E5.w [Flow: jump]
	jmp $D871.w		; 4C 71 D8 ; Jump to $D871.w [Flow: jump]
	jmp $E471.w		; 4C 71 E4 ; Jump to $E471.w [Flow: jump]
	jmp $B15E.w		; 4C 5E B1 ; Jump to $B15E.w [Flow: jump]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sbc $AE.b,S		; E3 AE ; Subtract stack-relative $AE.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	lda $71.b,X		; B5 71 ; Load $71.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B4.b),Y		; B1 B4 ; Load accumulator ($B4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $D0.b,X		; 34 D0 ; Test bits $D0.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
.INDEX 16
	rep #$D0		; C2 D0
	lda $27.b,X		; B5 27 ; Load $27.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($BB.b)		; D2 BB ; Compare accumulator (indirect) ($BB.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $D0, $E9		; D0 E9 ; Branch if not equal to $D0, $E9 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	dec $6BBB.w,X		; DE BB 6B ; Decrement memory $6BBB.w,X [Reads: X Index] [Flags: NZ]
	sty $D6.b,X		; 94 D6 ; Store Y register $D6.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	jsl $69D6A8.l		; 22 A8 D6 69 ; Jump to subroutine long $69D6A8.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $34E9.w		; AD E9 34 ; Load $34E9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($39.b)		; B2 39 ; Load accumulator (indirect) ($39.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$98D5.w		; C0 D5 98 ; Compare #$98D5.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$9AF0.w		; C0 F0 9A ; Compare #$9AF0.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($68.b),Y		; B1 68 ; Load accumulator ($68.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $621881.l,X		; FF 81 18 62 ; Subtract with carry (long,X) $621881.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $0002.w		; 1C 02 00 ; Test and reset bits $0002.w [Reads: Accumulator] [Flags: Z]
	jsr $8200.w		; 20 00 82 ; Jump to subroutine at $8200.w [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $2814E1.l,X		; FF E1 14 28 ; Subtract with carry (long,X) $2814E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $225093.l		; 22 93 50 22 ; Jump to subroutine long $225093.l [Writes: Stack Pointer] [Flow: call]
	sta ($50.b,S),Y		; 93 50 ; Store accumulator (stack relative indirect indexed) ($50.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sta ($50.b,S),Y		; 93 50 ; Store accumulator (stack relative indirect indexed) ($50.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	and ($B8.b,S),Y		; 33 B8 ; AND accumulator (stack relative indirect indexed) ($B8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $53		; 50 53 ; Branch if overflow clear to $50, $53 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $FE41.w,Y		; 19 41 FE ; OR accumulator with memory $FE41.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $32		; 30 32 ; Branch if minus to $30, $32 [Flow: branch]
	eor $3049.w,X		; 5D 49 30 ; Exclusive OR accumulator with memory $3049.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $4E		; 30 4E ; Branch if minus to $30, $4E [Flow: branch]
	eor $2363.w,X		; 5D 63 23 ; Exclusive OR accumulator with memory $2363.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$B829.w		; A0 29 B8 ; Load #$B829.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$B859.w		; A0 59 B8 ; Load #$B859.w into Y register [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor ($B8.b,X)		; 41 B8 ; Exclusive OR accumulator with memory ($B8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$B921.w		; C0 21 B9 ; Compare #$B921.w with Y register [Reads: Y Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and #$D0B9.w		; 29 B9 D0 ; Logical AND #$D0B9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($B9.b),Y		; 31 B9 ; AND accumulator with memory ($B9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $D0B9.w,Y		; 39 B9 D0 ; AND accumulator with memory $D0B9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($B9.b,X)		; 41 B9 ; Exclusive OR accumulator with memory ($B9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	eor #$D0B9.w		; 49 B9 D0 ; Exclusive OR #$D0B9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($B9.b),Y		; 51 B9 ; Exclusive OR accumulator with memory ($B9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor $C0B9.w,Y		; 59 B9 C0 ; Exclusive OR accumulator with memory $C0B9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($B9.b,X)		; 61 B9 ; Add with carry ($B9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $E869.w,X		; 1E 69 E8 ; Arithmetic shift left $E869.w,X [Reads: X Index] [Flags: NCZ]
	jmp $42E269.l		; 5C 69 E2 42 ; Jump long to $42E269.l [Flow: jump]
	jsr ($C33B.w,X)		; FC 3B C3 ; Jump to subroutine indirect indexed ($C33B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $C3.b,S		; 43 C3 ; Exclusive OR accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($CA32.w,X)		; FC 32 CA ; Jump to subroutine indirect indexed ($CA32.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CA4A.w,X)		; FC 4A CA ; Jump to subroutine indirect indexed ($CA4A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($BA62.w,X)		; FC 62 BA ; Jump to subroutine indirect indexed ($BA62.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($AAD2.w,X)		; FC D2 AA ; Jump to subroutine indirect indexed ($AAD2.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A3D3.w,X)		; FC D3 A3 ; Jump to subroutine indirect indexed ($A3D3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CB1B.w,X)		; FC 1B CB ; Jump to subroutine indirect indexed ($CB1B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($E31B.w,X)		; FC 1B E3 ; Jump to subroutine indirect indexed ($E31B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CB3B.w,X)		; FC 3B CB ; Jump to subroutine indirect indexed ($CB3B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CB43.w,X)		; FC 43 CB ; Jump to subroutine indirect indexed ($CB43.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($AB33.w,X)		; FC 33 AB ; Jump to subroutine indirect indexed ($AB33.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($AB4B.w,X)		; FC 4B AB ; Jump to subroutine indirect indexed ($AB4B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($A363.w,X)		; FC 63 A3 ; Jump to subroutine indirect indexed ($A363.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($CB63.w,X)		; FC 63 CB ; Jump to subroutine indirect indexed ($CB63.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($B615.w,X)		; FC 15 B6 ; Jump to subroutine indirect indexed ($B615.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $983D.w,X		; 5D 3D 98 ; Exclusive OR accumulator with memory $983D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor [$98.b],Y		; 57 98 ; Exclusive OR accumulator with memory (long indexed) [$98.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora [$D4.b],Y		; 17 D4 ; OR accumulator with memory (long indexed) [$D4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $D554.w,X		; 5D 54 D5 ; Exclusive OR accumulator with memory $D554.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A86A.w,X		; 5D 6A A8 ; Exclusive OR accumulator with memory $A86A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A89A.w,X		; 5D 9A A8 ; Exclusive OR accumulator with memory $A89A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A86A.w,X		; 5D 6A A8 ; Exclusive OR accumulator with memory $A86A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $DA88.w,Y		; 99 88 DA ; Store accumulator to $DA88.w,Y [Reads: Y Index, Accumulator]
	.db $B0, $88		; B0 88 ; Branch if carry set to $B0, $88 [Flow: branch]
	.db $80, $B8		; 80 B8 ; Branch always to $80, $B8 [Flow: branch]
	ldy $98.b		; A4 98 ; Load $98.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $B0.b		; A4 B0 ; Load $B0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ldy $B0.b		; A4 B0 ; Load $B0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ldy $C8.b		; A4 C8 ; Load $C8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $80.b		; A4 80 ; Load $80.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ldy $FF.b		; A4 FF ; Load $FF.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $001C62.l,X		; FF 62 1C 00 ; Subtract with carry (long,X) $001C62.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC1CE1.l,X		; FF E1 1C FC ; Subtract with carry (long,X) $FC1CE1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C8.b),Y		; 51 C8 ; Exclusive OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$1F.b]		; 27 1F ; AND accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $FF03.w,X		; 1E 03 FF ; Arithmetic shift left $FF03.w,X [Reads: X Index] [Flags: NCZ]
	adc ($CA.b),Y		; 71 CA ; Add with carry ($CA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$2F.b],Y		; 17 2F ; OR accumulator with memory (long indexed) [$2F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	bit #$A824.w		; 89 24 A8 ; Test bits #$A824.w with accumulator [Reads: Accumulator] [Flags: Z]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sta $B928.w		; 8D 28 B9 ; Store accumulator to $B928.w [Reads: Accumulator]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ldy $3B89.w		; AC 89 3B ; Load $3B89.w into Y register [Writes: Y Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	tsb $B8.b		; 04 B8 ; Test and set bits $B8.b [Reads: Accumulator] [Flags: Z]
	cmp #$FF04.w		; C9 04 FF ; Compare #$FF04.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit $C88B.w		; 2C 8B C8 ; Test bits $C88B.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	lda ($64.b)		; B2 64 ; Load accumulator (indirect) ($64.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $D80F2A.l,X		; FF 2A 0F D8 ; Subtract with carry (long,X) $D80F2A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$DF04.w		; A0 04 DF ; Load #$DF04.w into Y register [Writes: Y Index] [Flags: NZ]
	rol $FF64.w		; 2E 64 FF ; Rotate left $FF64.w [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr ($9882.w,X)		; FC 82 98 ; Jump to subroutine indirect indexed ($9882.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora [$A9.b]		; 07 A9 ; OR accumulator with memory (long) [$A9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF07.w		; 29 07 FF ; Logical AND #$FF07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $62, $9A, $23		; 62 9A 23 ; Push effective relative address $62, $9A, $23 [Writes: Stack Pointer]
	and ($67.b)		; 32 67 ; AND accumulator with memory (indirect) ($67.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($598A.w,X)		; FC 8A 59 ; Jump to subroutine indirect indexed ($598A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$A4.b],Y		; 37 A4 ; AND accumulator with memory (long indexed) [$A4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	bit $AE.b,X		; 34 AE ; Test bits $AE.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	adc [$FC.b]		; 67 FC ; Add with carry (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jmp.w [$3F59]		; DC 59 3F ; Jump long indirect [$3F59] [Flow: jump]
	cmp [$08.b]		; C7 08 ; Compare accumulator (long) [$08.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ldy $08C4.w,X		; BC C4 08 ; Load Y register $08C4.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $C45B1C.l,X		; FF 1C 5B C4 ; Subtract with carry (long,X) $C45B1C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$68.b]		; A7 68 ; Load accumulator (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $9D.b		; C5 9D ; Compare $9D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cpy $089D.w		; CC 9D 08 ; Compare $089D.w with Y register [Reads: Y Index] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and ($68.b),Y		; 31 68 ; AND accumulator with memory ($68.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $2BDB69.l,X		; FF 69 DB 2B ; Subtract with carry (long,X) $2BDB69.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	and ($C2.b,S),Y		; 33 C2 ; AND accumulator (stack relative indirect indexed) ($C2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	adc [$C2.b]		; 67 C2 ; Add with carry (long) [$C2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $6BC2A5.l,X		; 3F A5 C2 6B ; AND accumulator with memory (long,X) $6BC2A5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc [$C2.b]		; 67 C2 ; Add with carry (long) [$C2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ror $7BC2.w		; 6E C2 7B ; Rotate right $7BC2.w [Flags: NCZ]
	stx $C2.b,Y		; 96 C2 ; Store X register $C2.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldy $96.b,X		; B4 96 ; Load Y register $96.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$3B		; C2 3B
	jsr $38C4.w		; 20 C4 38 ; Jump to subroutine at $38C4.w [Writes: Stack Pointer] [Flow: call]
	and ($C4.b,S),Y		; 33 C4 ; AND accumulator (stack relative indirect indexed) ($C4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	adc #$48C4.w		; 69 C4 48 ; Add #$48C4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpy $59.b		; C4 59 ; Compare $59.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy $58.b		; C4 58 ; Compare $58.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	eor ($C4.b,S),Y		; 53 C4 ; XOR accumulator (stack relative indirect indexed) ($C4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $C4		; 90 C4 ; Branch if carry clear to $90, $C4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $C4.b,S		; A3 C4 ; Load accumulator (stack relative) $C4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $90, $21		; 90 21 ; Branch if carry clear to $90, $21 [Flow: branch]
	cpy $9A.b		; C4 9A ; Compare $9A.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	jsr $A8C4.w		; 20 C4 A8 ; Jump to subroutine at $A8C4.w [Writes: Stack Pointer] [Flow: call]
	cmp ($C4.b,X)		; C1 C4 ; Compare accumulator ($C4.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	sta ($13.b),Y		; 91 13 ; Store accumulator ($13.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $42, $94		; 42 94 ; Reserved instruction
	.db $70, $69		; 70 69 ; Branch if overflow set to $70, $69 [Flow: branch]
	sty $80.b,X		; 94 80 ; Store Y register $80.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sty $88.b,X		; 94 88 ; Store Y register $88.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	lda ($BA.b,X)		; A1 BA ; Load accumulator ($BA.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($94.b,X)		; 81 94 ; Store accumulator ($94.b,X) [Reads: Direct Page, Accumulator, X Index]
	ldy #$BA89.w		; A0 89 BA ; Load #$BA89.w into Y register [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor ($BA.b,X)		; 41 BA ; Exclusive OR accumulator with memory ($BA.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$9443.w		; C0 43 94 ; Compare #$9443.w with Y register [Reads: Y Index] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	adc ($94.b),Y		; 71 94 ; Add with carry ($94.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$BA60.w		; A0 60 BA ; Load #$BA60.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($BA.b),Y		; 51 BA ; Exclusive OR accumulator with memory ($BA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $41		; 90 41 ; Branch if carry clear to $90, $41 [Flow: branch]
	sty $A8.b,X		; 94 A8 ; Store Y register $A8.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	.db $B0, $94		; B0 94 ; Branch if carry set to $B0, $94 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora ($3A.b),Y		; 11 3A ; OR accumulator with memory ($3A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $06E8.w,X		; 1E E8 06 ; Arithmetic shift left $06E8.w,X [Reads: X Index] [Flags: NCZ]
	bit $1D.b,X		; 34 1D ; Test bits $1D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	adc #$1D74.w		; 69 74 1D ; Add #$1D74.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$1D90.w		; 69 90 1D ; Add #$1D90.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$1DC8.w		; 69 C8 1D ; Add #$1DC8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$4373.w		; 69 73 43 ; Add #$4373.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc ($4B.b,S),Y		; 73 4B ; Add with carry (stack relative indirect indexed) ($4B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpx $5E.b		; E4 5E ; Compare $5E.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	trb $B9.b		; 14 B9 ; Test and reset bits $B9.b [Reads: Accumulator] [Flags: Z]
	jsl $69B925.l		; 22 25 B9 69 ; Jump to subroutine long $69B925.l [Writes: Stack Pointer] [Flow: call]
	and $D9.b		; 25 D9 ; Logical AND $D9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $69C644.l		; 22 44 C6 69 ; Jump to subroutine long $69C644.l [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	dec $69.b		; C6 69 ; Decrement $69.b [Reads: Direct Page] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $22D898.l		; 22 98 D8 22 ; Jump to subroutine long $22D898.l [Writes: Stack Pointer] [Flow: call]
	ldy $C3.b		; A4 C3 ; Load $C3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	adc #$C3B8.w		; 69 B8 C3 ; Add #$C3B8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$D9B9.w		; 69 B9 D9 ; Add #$D9B9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $69B3D9.l		; 22 D9 B3 69 ; Jump to subroutine long $69B3D9.l [Writes: Stack Pointer] [Flow: call]
	cld		; D8 ; Clear decimal flag [Flags: D]
	lda ($22.b),Y		; B1 22 ; Load accumulator ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $142BFF.l,X		; FF FF 2B 14 ; Subtract with carry (long,X) $142BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $001883.l,X		; FF 83 18 00 ; Subtract with carry (long,X) $001883.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $3114E1.l,X		; FF E1 14 31 ; Subtract with carry (long,X) $3114E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($F9.b)		; 32 F9 ; AND accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$F932.w		; 49 32 F9 ; Exclusive OR #$F932.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($52.b),Y		; 31 52 ; AND accumulator with memory ($52.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $5249.w,Y		; F9 49 52 ; Subtract with carry $5249.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3060.w,Y		; F9 60 30 ; Subtract with carry $3060.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $4222.w,X		; 5E 22 42 ; Logical shift right $4222.w,X [Reads: X Index] [Flags: NCZ]
	jsr ($4B53.w,X)		; FC 53 4B ; Jump to subroutine indirect indexed ($4B53.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $3B.b,S		; 43 3B ; Exclusive OR accumulator with stack relative $3B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	and $FA.b,S		; 23 FA ; AND accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($B9.b,S),Y		; 53 B9 ; XOR accumulator (stack relative indirect indexed) ($B9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sta ($CC.b)		; 92 CC ; Store accumulator (indirect) ($CC.b) [Reads: Direct Page, Accumulator]
	eor $D869.w,Y		; 59 69 D8 ; Exclusive OR accumulator with memory $D869.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc $B2.b,S		; E3 B2 ; Subtract stack-relative $B2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($B0.b,S),Y		; 33 B0 ; AND accumulator (stack relative indirect indexed) ($B0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $33.b,S		; C3 33 ; Compare accumulator (stack relative) $33.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cpy $63C3.w		; CC C3 63 ; Compare $63C3.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $B0, $C3		; B0 C3 ; Branch if carry set to $B0, $C3 [Flow: branch]
	adc $CC.b,S		; 63 CC ; Add with carry (stack relative) $CC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp $91.b,S		; C3 91 ; Compare accumulator (stack relative) $91.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	.db $B0, $C3		; B0 C3 ; Branch if carry set to $B0, $C3 [Flow: branch]
	sta ($CC.b),Y		; 91 CC ; Store accumulator ($CC.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cmp $9B.b,S		; C3 9B ; Compare accumulator (stack relative) $9B.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ldy #$D8C2.w		; A0 C2 D8 ; Load #$D8C2.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $C2.b,S		; A3 C2 ; Load accumulator (stack relative) $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
.INDEX 16
	rep #$D8		; C2 D8
	cld		; D8 ; Clear decimal flag [Flags: D]
	rep #$41		; C2 41 ; Reset processor status bits #$41 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ldy #$41BA.w		; A0 BA 41 ; Load #$41BA.w into Y register [Writes: Y Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy #$40BA.w		; A0 BA 40 ; Load #$40BA.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx $68BA.w,Y		; BE BA 68 ; Load X register $68BA.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy $88BA.w,X		; BC BA 88 ; Load Y register $88BA.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $C3BA.w,X		; BD BA C3 ; Load $C3BA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $FC.b,S		; C3 FC ; Compare accumulator (stack relative) $FC.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr $2200.w		; 20 00 22 ; Jump to subroutine at $2200.w [Writes: Stack Pointer] [Flow: call]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $2D00E1.l,X		; FF E1 00 2D ; Subtract with carry (long,X) $2D00E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($A4.b)		; 32 A4 ; AND accumulator with memory (indirect) ($A4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$DC1E.w		; A9 1E DC ; Load #$DC1E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sta ($3A.b),Y		; 91 3A ; Store accumulator ($3A.b),Y [Reads: Direct Page, Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $EC76.w		; AD 76 EC ; Load $EC76.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $A877.w		; AD 77 A8 ; Load $A877.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $50, $3D		; 50 3D ; Branch if overflow clear to $50, $3D [Flow: branch]
	.db $D0, $50		; D0 50 ; Branch if not equal to $D0, $50 [Flow: branch]
	and $A930.w,X		; 3D 30 A9 ; AND accumulator with memory $A930.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $C130.w,X		; 3D 30 C1 ; AND accumulator with memory $C130.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $69FC.w,X		; 3D FC 69 ; AND accumulator with memory $69FC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sta [$9F.b],Y		; 97 9F ; Store accumulator (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp ($CD.b),Y		; D1 CD ; Compare accumulator ($CD.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sta $DC97D1.l,X		; 9F D1 97 DC ; Store accumulator (long,X) $DC97D1.l,X [Reads: Accumulator, X Index]
	cmp ($CD.b),Y		; D1 CD ; Compare accumulator ($CD.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	jmp.w [$BDD1]		; DC D1 BD ; Jump long indirect [$BDD1] [Flow: jump]
	and ($F9.b)		; 32 F9 ; AND accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($22.b),Y		; B1 22 ; Load accumulator ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $22C9.w,Y		; F9 C9 22 ; Subtract with carry $22C9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFF.w,Y		; F9 FF FF ; Subtract with carry $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $36		; 80 36 ; Branch always to $80, $36 [Flow: branch]
	.db $82, $18, $60		; 82 18 60 ; Branch always long to $82, $18, $60 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $18E2FF.l,X		; FF FF E2 18 ; Subtract with carry (long,X) $18E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0221.w,X		; FE 21 02 ; Increment memory $0221.w,X [Reads: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($62.b,X)		; 21 62 ; Logical AND ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $8326.w,X		; FE 26 83 ; Increment memory $8326.w,X [Reads: X Index] [Flags: NZ]
	inc $00A1.w,X		; FE A1 00 ; Increment memory $00A1.w,X [Reads: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	and ($61.b,X)		; 21 61 ; Logical AND ($61.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $81A6.w,X		; FE A6 81 ; Increment memory $81A6.w,X [Reads: X Index] [Flags: NZ]
	sbc $39E1.w,X		; FD E1 39 ; Subtract with carry $39E1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $1F.b,S		; 23 1F ; AND accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $DF5C20.l,X		; DF 20 5C DF ; Compare accumulator (long,X) $DF5C20.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jmp $5C4ADF.l		; 5C DF 4A 5C ; Jump long to $5C4ADF.l [Flow: jump]
	cmp $DF1F59.l,X		; DF 59 1F DF ; Compare accumulator (long,X) $DF1F59.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ora [$1E.b],Y		; 17 1E ; OR accumulator with memory (long indexed) [$1E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc #$5C14.w		; 69 14 5C ; Add #$5C14.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$2B22.w		; 69 22 2B ; Add #$2B22.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and ($43.b,X)		; 21 43 ; Logical AND ($43.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $5B22.w,Y		; B9 22 5B ; Load $5B22.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($93.b)		; 32 93 ; AND accumulator with memory (indirect) ($93.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta ($59.b)		; 92 59 ; Store accumulator (indirect) ($59.b) [Reads: Direct Page, Accumulator]
	and ($92.b),Y		; 31 92 ; AND accumulator with memory ($92.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	eor $FA.b,S		; 43 FA ; Exclusive OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	lda $4360.w,Y		; B9 60 43 ; Load $4360.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda $5018.w,Y		; B9 18 50 ; Load $5018.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $E41D.w,X		; 5E 1D E4 ; Logical shift right $E41D.w,X [Reads: X Index] [Flags: NCZ]
	lsr $9F14.w,X		; 5E 14 9F ; Logical shift right $9F14.w,X [Reads: X Index] [Flags: NCZ]
	eor $9F48.w,X		; 5D 48 9F ; Exclusive OR accumulator with memory $9F48.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $B715.w,X		; 5D 15 B7 ; Exclusive OR accumulator with memory $B715.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $CD14.w,X		; 5D 14 CD ; Exclusive OR accumulator with memory $CD14.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $CD41.w,X		; 5D 41 CD ; Exclusive OR accumulator with memory $CD41.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $BAAC.w,X		; 5D AC BA ; Exclusive OR accumulator with memory $BAAC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $CBB7.w,X		; 5E B7 CB ; Logical shift right $CBB7.w,X [Reads: X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp [$CB.b]		; C7 CB ; Compare accumulator (long) [$CB.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	and $70.b,S		; 23 70 ; AND accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	.db $70, $B7		; 70 B7 ; Branch if overflow set to $70, $B7 [Flow: branch]
	jsl $22CB71.l		; 22 71 CB 22 ; Jump to subroutine long $22CB71.l [Writes: Stack Pointer] [Flow: call]
	adc ($D3.b),Y		; 71 D3 ; Add with carry ($D3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($FE.b)		; 32 FE ; AND accumulator with memory (indirect) ($FE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp ($4A.b,S),Y		; D3 4A ; Compare accumulator (stack relative indirect indexed) ($4A.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	inc $119B.w,X		; FE 9B 11 ; Increment memory $119B.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b,S		; A3 11 ; Load accumulator (stack relative) $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsr $801E.w		; 20 1E 80 ; Jump to subroutine at $801E.w [Writes: Stack Pointer] [Flow: call]
	rol $82.b,X		; 36 82 ; Rotate left $82.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $0462FF.l,X		; FF FF 62 04 ; Subtract with carry (long,X) $0462FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	wai		; CB ; Wait for interrupt
	sbc $3689.w,Y		; F9 89 36 ; Subtract with carry $3689.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $E9.b		; 65 E9 ; Add $E9.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rol $66.b,X		; 36 66 ; Rotate left $66.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $51FEFF.l,X		; FF FF FE 51 ; Subtract with carry (long,X) $51FEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $A5		; 80 A5 ; Branch always to $80, $A5 [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc ($82.b),Y		; 71 82 ; Add with carry ($82.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$2B.b],Y		; 97 2B ; Store accumulator (long indexed) [$2B.b],Y [Reads: Direct Page, Y Index, Accumulator]
	adc ($96.b,X)		; 61 96 ; Add with carry ($96.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$FE61.w		; A0 61 FE ; Load #$FE61.w into Y register [Writes: Y Index] [Flags: NZ]
	eor $A5C1.w,X		; 5D C1 A5 ; Exclusive OR accumulator with memory $A5C1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $2BDF02.l,X		; DF 02 DF 2B ; Compare accumulator (long,X) $2BDF02.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $62, $DE, $A0		; 62 DE A0 ; Push effective relative address $62, $DE, $A0 [Writes: Stack Pointer]
	.db $62, $FF, $7D		; 62 FF 7D ; Push effective relative address $62, $FF, $7D [Writes: Stack Pointer]
	cmp $A9.b,S		; C3 A9 ; Compare accumulator (stack relative) $A9.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	eor ($B9.b)		; 52 B9 ; Exclusive OR accumulator with memory (indirect) ($B9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sta ($D2.b,S),Y		; 93 D2 ; Store accumulator (stack relative indirect indexed) ($D2.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sta ($A0.b,S),Y		; 93 A0 ; Store accumulator (stack relative indirect indexed) ($A0.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda ($B9.b)		; B2 B9 ; Load accumulator (indirect) ($B9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $B2		; D0 B2 ; Branch if not equal to $D0, $B2 [Flow: branch]
	lda $2FB7.w,Y		; B9 B7 2F ; Load $2FB7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $C7FA2F.l,X		; BF 2F FA C7 ; Load long $C7FA2F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $CAB4FA.l		; 2F FA B4 CA ; AND accumulator with memory (long) $CAB4FA.l [Writes: Accumulator] [Flags: NZ]
	adc #$CAC8.w		; 69 C8 CA ; Add #$CAC8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$FFFF.w		; 69 FF FF ; Add #$FFFF.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda $2C.b,S		; A3 2C ; Load accumulator (stack relative) $2C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $B8.b		; C6 B8 ; Decrement $B8.b [Reads: Direct Page] [Flags: NZ]
	bit $AAC6.w,X		; 3C C6 AA ; Test bits $AAC6.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $8FAAC6.l		; 4F C6 AA 8F ; Exclusive OR accumulator with memory (long) $8FAAC6.l [Writes: Accumulator] [Flags: NZ]
	dec $AA.b		; C6 AA ; Decrement $AA.b [Reads: Direct Page] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $A3.b		; C6 A3 ; Decrement $A3.b [Reads: Direct Page] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jsl $6929A0.l		; 22 A0 29 69 ; Jump to subroutine long $6929A0.l [Writes: Stack Pointer] [Flow: call]
	ldy #$223A.w		; A0 3A 22 ; Load #$223A.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsl $6929DC.l		; 22 DC 29 69 ; Jump to subroutine long $6929DC.l [Writes: Stack Pointer] [Flow: call]
	ldy $39.b,X		; B4 39 ; Load Y register $39.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	adc #$39C8.w		; 69 C8 39 ; Add #$39C8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$48A8.w		; 69 A8 48 ; Add #$48A8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $2248C8.l		; 22 C8 48 22 ; Jump to subroutine long $2248C8.l [Writes: Stack Pointer] [Flow: call]
	lda #$694A.w		; A9 4A 69 ; Load #$694A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $4A.b,X		; D5 4A ; Compare accumulator $4A.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc #$73AB.w		; 69 AB 73 ; Add #$73AB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $94A8.w		; 8C A8 94 ; Store Y register to $94A8.w [Reads: Y Index]
	adc #$B4A8.w		; 69 A8 B4 ; Add #$B4A8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sty $73D7.w		; 8C D7 73 ; Store Y register to $73D7.w [Reads: Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	pei ($94.b)		; D4 94 ; Push effective indirect address ($94.b) [Reads: Direct Page] [Writes: Stack Pointer]
	adc #$B4D4.w		; 69 D4 B4 ; Add #$B4D4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pei ($22.b)		; D4 22 ; Push effective indirect address ($22.b) [Reads: Direct Page] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pei ($22.b)		; D4 22 ; Push effective indirect address ($22.b) [Reads: Direct Page] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc #$C8B4.w		; 69 B4 C8 ; Add #$C8B4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$C8D4.w		; 69 D4 C8 ; Add #$C8D4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$C8C8.w		; 69 C8 C8 ; Add #$C8C8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$FFF0.w		; 69 F0 FF ; Add #$FFF0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta ($1C.b,X)		; 81 1C ; Store accumulator ($1C.b,X) [Reads: Direct Page, Accumulator, X Index]
	adc $18.b,S		; 63 18 ; Add with carry (stack relative) $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $18E2FF.l,X		; FF FF E2 18 ; Subtract with carry (long,X) $18E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($C851.w,X)		; FC 51 C8 ; Jump to subroutine indirect indexed ($C851.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and [$1F.b]		; 27 1F ; AND accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,S		; 03 A4 ; OR accumulator with stack relative $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1403.w,X		; 1D 03 14 ; OR accumulator with memory $1403.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $1463.w		; 2D 63 14 ; Logical AND $1463.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $FC63.w		; 4D 63 FC ; Exclusive OR $FC63.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $C9.b,X		; 55 C9 ; Exclusive OR accumulator with memory $C9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and [$5F.b]		; 27 5F ; AND accumulator with memory (long) [$5F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $A4.b		; 04 A4 ; Test and set bits $A4.b [Reads: Accumulator] [Flags: Z]
	eor $DD04.w,X		; 5D 04 DD ; Exclusive OR accumulator with memory $DD04.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $FF64.w		; 2D 64 FF ; Logical AND $FF64.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $CB.b,X		; 75 CB ; Add $CB.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $CCCA71.l,X		; FF 71 CA CC ; Subtract with carry (long,X) $CCCA71.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $2003.w,X		; 1D 03 20 ; OR accumulator with memory $2003.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $2B67.w		; 2D 67 2B ; Logical AND $2B67.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $6BC2.w		; 2C C2 6B ; Test bits $6BC2.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $A8C2.w		; 2C C2 A8 ; Test bits $A8C2.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $BAC2.w		; 2C C2 BA ; Test bits $BAC2.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jmp $C8C3.w		; 4C C3 C8 ; Jump to $C8C3.w [Flow: jump]
	bit $2BC2.w		; 2C C2 2B ; Test bits $2BC2.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jmp $6BC2.w		; 4C C2 6B ; Jump to $6BC2.w [Flow: jump]
	jmp $A8C2.w		; 4C C2 A8 ; Jump to $A8C2.w [Flow: jump]
	jmp $FCC2.w		; 4C C2 FC ; Jump to $FCC2.w [Flow: jump]
	.db $82, $98, $20		; 82 98 20 ; Branch always long to $82, $98, $20 [Flow: branch]
	eor $FC67.w		; 4D 67 FC ; Exclusive OR $FC67.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora [$A8.b]		; 07 A8 ; OR accumulator with memory (long) [$A8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$C807.w		; 29 07 C8 ; Logical AND #$C807.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$D907.w		; 29 07 D9 ; Logical AND #$D907.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $68		; 30 68 ; Branch if minus to $30, $68 [Flow: branch]
	sbc $FF9B65.l,X		; FF 65 9B FF ; Subtract with carry (long,X) $FF9B65.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $9A, $2B		; 62 9A 2B ; Push effective relative address $62, $9A, $2B [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor $1408.w,Y		; 59 08 14 ; Exclusive OR accumulator with memory $1408.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	jsl $224C14.l		; 22 14 4C 22 ; Jump to subroutine long $224C14.l [Writes: Stack Pointer] [Flow: call]
	ldy $1C.b,X		; B4 1C ; Load Y register $1C.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	adc #$1CC8.w		; 69 C8 1C ; Add #$1CC8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$11A8.w		; 69 A8 11 ; Add #$11A8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc $38E1.w,X		; FE E1 38 ; Increment memory $38E1.w,X [Reads: X Index] [Flags: NZ]
	ldy $59.b,X		; B4 59 ; Load Y register $59.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	adc #$59D8.w		; 69 D8 59 ; Add #$59D8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$91A8.w		; 69 A8 91 ; Add #$91A8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $D05E.w,X		; 3C 5E D0 ; Test bits $D05E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $BF5E.w,X		; 3C 5E BF ; Test bits $BF5E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	lda ($FA.b,S),Y		; B3 FA ; Load accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B7.b,S),Y		; B3 B7 ; Load accumulator (stack relative indirect indexed) ($B7.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cmp $FA.b,S		; C3 FA ; Compare accumulator (stack relative) $FA.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	lda ($CF.b,S),Y		; B3 CF ; Load accumulator (stack relative indirect indexed) ($CF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $CBFAD3.l,X		; BF D3 FA CB ; Load long $CBFAD3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $C3D3FA.l		; CF FA D3 C3 ; Compare accumulator (long) $C3D3FA.l [Reads: Accumulator] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	lda [$FA.b],Y		; B7 FA ; Load accumulator (long indexed) [$FA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $142BFF.l,X		; FF FF 2B 14 ; Subtract with carry (long,X) $142BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $022E80.l,X		; FF 80 2E 02 ; Subtract with carry (long,X) $022E80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $2400E2.l,X		; FF E2 00 24 ; Subtract with carry (long,X) $2400E2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $E4		; 30 E4 ; Branch if minus to $30, $E4 [Flow: branch]
	rol $E530.w		; 2E 30 E5 ; Rotate left $E530.w [Flags: NCZ]
	jmp $E339.w		; 4C 39 E3 ; Jump to $E339.w [Flow: jump]
	rol $48.b		; 26 48 ; Rotate left $48.b [Reads: Direct Page] [Flags: NCZ]
	inc $24.b		; E6 24 ; Increment $24.b [Reads: Direct Page] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpx $18.b		; E4 18 ; Compare $18.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $98.b		; 06 98 ; Arithmetic shift left $98.b [Reads: Direct Page] [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: NCZ]
	sta ($05.b,S),Y		; 93 05 ; Store accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $23.b		; 06 23 ; Arithmetic shift left $23.b [Reads: Direct Page] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $5B.b,S		; 23 5B ; AND accumulator with stack relative $5B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $D8.b,S		; E3 D8 ; Subtract stack-relative $D8.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $A1.b,S		; E3 A1 ; Subtract stack-relative $A1.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lsr $E1FE.w,X		; 5E FE E1 ; Logical shift right $E1FE.w,X [Reads: X Index] [Flags: NCZ]
	and $D02B.w,Y		; 39 2B D0 ; AND accumulator with memory $D02B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $58.b		; E5 58 ; Subtract $58.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cpx $1B.b		; E4 1B ; Compare $1B.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	inc $50.b		; E6 50 ; Increment $50.b [Reads: Direct Page] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	inc $18.b		; E6 18 ; Increment $18.b [Reads: Direct Page] [Flags: NZ]
	lda ($E3.b)		; B2 E3 ; Load accumulator (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $E5D0.w		; 20 D0 E5 ; Jump to subroutine at $E5D0.w [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	lda $FA.b,S		; A3 FA ; Load accumulator (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $A3.b,S		; 63 A3 ; Add with carry (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $FA.b,S		; E3 FA ; Subtract stack-relative $FA.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	adc $E3.b,S		; 63 E3 ; Add with carry (stack relative) $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and $DEB9.w		; 2D B9 DE ; Logical AND $DEB9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $B9.b		; 45 B9 ; Exclusive OR $B9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $FFFF.w,X		; DE FF FF ; Decrement memory $FFFF.w,X [Reads: X Index] [Flags: NZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($18.b,X)		; 61 18 ; Add with carry ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $18, $FF		; 62 18 FF ; Push effective relative address $62, $18, $FF [Writes: Stack Pointer]
	sbc $1708E2.l,X		; FF E2 08 17 ; Subtract with carry (long,X) $1708E2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $1F4DD1.l,X		; 1F D1 4D 1F ; Logical OR long $1F4DD1.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($17.b),Y		; D1 17 ; Compare accumulator ($17.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	jmp $5C4DD1.l		; 5C D1 4D 5C ; Jump long to $5C4DD1.l [Flow: jump]
	cmp ($17.b),Y		; D1 17 ; Compare accumulator ($17.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sta $9F4DD1.l,X		; 9F D1 4D 9F ; Store accumulator (long,X) $9F4DD1.l,X [Reads: Accumulator, X Index]
	cmp ($17.b),Y		; D1 17 ; Compare accumulator ($17.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	jmp.w [$4DD1]		; DC D1 4D ; Jump long indirect [$4DD1] [Flow: jump]
	jmp.w [$34D1]		; DC D1 34 ; Jump long indirect [$34D1] [Flow: jump]
	jmp $5C3CC4.l		; 5C C4 3C 5C ; Jump long to $5C3CC4.l [Flow: jump]
	cpy $34.b		; C4 34 ; Compare $34.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $1C.b		; 02 1C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $27,$E3		; 44 E3 27 ; Move block positive $27,$E3 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $54,$E5		; 44 E5 54 ; Move block positive $54,$E5 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and $1FE4.w		; 2D E4 1F ; Logical AND $1FE4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $14E6.w		; 2C E6 14 ; Test bits $14E6.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	trb $1CDE.w		; 1C DE 1C ; Test and reset bits $1CDE.w [Reads: Accumulator] [Flags: Z]
	bit $E3.b,X		; 34 E3 ; Test bits $E3.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $DE3C.w		; 2C 3C DE ; Test bits $DE3C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jmp $DE3C.w		; 4C 3C DE ; Jump to $DE3C.w [Flow: jump]
	stz $1C.b		; 64 1C ; Store zero to $1C.b
	dec $3C14.w,X		; DE 14 3C ; Decrement memory $3C14.w,X [Reads: X Index] [Flags: NZ]
	dec $3C64.w,X		; DE 64 3C ; Decrement memory $3C64.w,X [Reads: X Index] [Flags: NZ]
	dec $5D15.w,X		; DE 15 5D ; Decrement memory $5D15.w,X [Reads: X Index] [Flags: NZ]
	dec $5D5D.w,X		; DE 5D 5D ; Decrement memory $5D5D.w,X [Reads: X Index] [Flags: NZ]
	dec $A920.w,X		; DE 20 A9 ; Decrement memory $A920.w,X [Reads: X Index] [Flags: NZ]
	inc $BC14.w,X		; FE 14 BC ; Increment memory $BC14.w,X [Reads: X Index] [Flags: NZ]
	cpy $08.b		; C4 08 ; Compare $08.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ldx $3B61.w,Y		; BE 61 3B ; Load X register $3B61.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cmp ($FA.b,S),Y		; D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	eor $D3.b,S		; 43 D3 ; Exclusive OR accumulator with stack relative $D3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $DB.b,S		; 43 DB ; Exclusive OR accumulator with stack relative $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $FFFF18.l		; 22 18 FF FF ; Jump to subroutine long $FFFF18.l [Writes: Stack Pointer] [Flow: call]
	sep #$00		; E2 00 ; Set processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ora [$9F.b],Y		; 17 9F ; OR accumulator with memory (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $E89F.w		; 4D 9F E8 ; Exclusive OR $E89F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$DC.b],Y		; 17 DC ; OR accumulator with memory (long indexed) [$DC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $E8DC.w		; 4D DC E8 ; Exclusive OR $E8DC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $9976.w		; AD 76 99 ; Load $9976.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $9B33.w,X		; BC 33 9B ; Load Y register $9B33.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	bit $9B.b,X		; 34 9B ; Test bits $9B.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	cmp $B8D834.l		; CF 34 D8 B8 ; Compare accumulator (long) $B8D834.l [Reads: Accumulator] [Flags: NCZ]
	bit $D8.b,X		; 34 D8 ; Test bits $D8.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	cpy $AF34.w		; CC 34 AF ; Compare $AF34.w with Y register [Reads: Y Index] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	inc $AAC7.w,X		; FE C7 AA ; Increment memory $AAC7.w,X [Reads: X Index] [Flags: NZ]
	inc $D2AF.w,X		; FE AF D2 ; Increment memory $D2AF.w,X [Reads: X Index] [Flags: NZ]
	inc $D2C7.w,X		; FE C7 D2 ; Increment memory $D2C7.w,X [Reads: X Index] [Flags: NZ]
	inc $1128.w,X		; FE 28 11 ; Increment memory $1128.w,X [Reads: X Index] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sta ($3A.b),Y		; 91 3A ; Store accumulator ($3A.b),Y [Reads: Direct Page, Y Index, Accumulator]
	jsr ($38E1.w,X)		; FC E1 38 ; Jump to subroutine indirect indexed ($38E1.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($FA.b,S),Y		; 33 FA ; AND accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($33.b,S),Y		; 53 33 ; XOR accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	eor ($FA.b,S),Y		; 53 FA ; XOR accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $82, $38, $60		; 82 38 60 ; Branch always long to $82, $38, $60 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	sbc $14E2FF.l,X		; FF FF E2 14 ; Subtract with carry (long,X) $14E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $D4.b		; 14 D4 ; Test and reset bits $D4.b [Reads: Accumulator] [Flags: Z]
	adc $FC.b,S		; 63 FC ; Add with carry (stack relative) $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $27C9.w,X		; 5D C9 27 ; Exclusive OR accumulator with memory $27C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $DEA504.l,X		; DF 04 A5 DE ; Compare accumulator (long,X) $DEA504.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	adc $DDCB.w,X		; 7D CB DD ; Add $DDCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $FF64.w		; AD 64 FF ; Load $FF64.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $CCCA.w,Y		; 79 CA CC ; Add $CCCA.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $4F03.w,X		; 9D 03 4F ; Store accumulator to $4F03.w,X [Reads: Accumulator, X Index]
	stz $2E03.w		; 9C 03 2E ; Store zero to $2E03.w
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp $53.b,S		; C3 53 ; Compare accumulator (stack relative) $53.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rep #$86		; C2 86 ; Reset processor status bits #$86 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$2B		; C2 2B
	.db $D0, $C2		; D0 C2 ; Branch if not equal to $D0, $C2 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $D0, $C2		; D0 C2 ; Branch if not equal to $D0, $C2 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $D0, $C2		; D0 C2 ; Branch if not equal to $D0, $C2 [Flow: branch]
	cpy $C2B1.w		; CC B1 C2 ; Compare $C2B1.w with Y register [Reads: Y Index] [Flags: NCZ]
	jsr $67D4.w		; 20 D4 67 ; Jump to subroutine at $67D4.w [Writes: Stack Pointer] [Flow: call]
	jsr ($998D.w,X)		; FC 8D 99 ; Jump to subroutine indirect indexed ($998D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$08D9.w		; A9 D9 08 ; Load #$08D9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $D99B6D.l,X		; FF 6D 9B D9 ; Subtract with carry (long,X) $D99B6D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $68		; B0 68 ; Branch if carry set to $B0, $68 [Flow: branch]
	cpy $07A9.w		; CC A9 07 ; Compare $07A9.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $2F9A6A.l,X		; FF 6A 9A 2F ; Subtract with carry (long,X) $2F9A6A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ora [$AC.b]		; 07 AC ; OR accumulator with memory (long) [$AC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora [$48.b]		; 07 48 ; OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $2969.w		; 9C 69 29 ; Store zero to $2969.w
	lda #$2B22.w		; A9 22 2B ; Load #$2B22.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$29.b],Y		; B7 29 ; Load accumulator (long indexed) [$29.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda [$29.b],Y		; B7 29 ; Load accumulator (long indexed) [$29.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B6.b		; A4 B6 ; Load $B6.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	and #$A828.w		; 29 28 A8 ; Logical AND #$A828.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$9FB4.w		; 69 B4 9F ; Add #$9FB4.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$D32B.w		; 69 2B D3 ; Add #$D32B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp ($2A.b,S),Y		; D3 2A ; Compare accumulator (stack relative indirect indexed) ($2A.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	lda #$2AD2.w		; A9 D2 2A ; Load #$2AD2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$6AB9.w		; C9 B9 6A ; Compare #$6AB9.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $D21469.l,X		; 9F 69 14 D2 ; Store accumulator (long,X) $D21469.l,X [Reads: Accumulator, X Index]
	jsl $652A88.l		; 22 88 2A 65 ; Jump to subroutine long $652A88.l [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $19.b		; 66 19 ; Rotate right $19.b [Reads: Direct Page] [Flags: NCZ]
	and $C2.b,S		; 23 C2 ; AND accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $C258.w,Y		; 19 58 C2 ; OR accumulator with memory $C258.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	rep #$49		; C2 49 ; Reset processor status bits #$49 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	and $C2.b,S		; 23 C2 ; AND accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor #$C258.w		; 49 58 C2 ; Exclusive OR #$C258.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1F.b,X		; 15 1F ; OR accumulator with memory $1F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and [$45.b]		; 27 45 ; AND accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $231727.l,X		; 1F 27 17 23 ; Logical OR long $231727.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	trb $61.b		; 14 61 ; Test and reset bits $61.b [Reads: Accumulator] [Flags: Z]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $6B.b,X		; 15 6B ; OR accumulator with memory $6B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	eor $6B.b		; 45 6B ; Exclusive OR $6B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $6B.b,S		; 23 6B ; AND accumulator with stack relative $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc ($6B.b,X)		; 61 6B ; Add with carry ($6B.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $5515.w		; 20 15 55 ; Jump to subroutine at $5515.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $38.b		; 02 38 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$2894.w		; 29 94 28 ; Logical AND #$2894.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($94.b,X)		; 41 94 ; Exclusive OR accumulator with memory ($94.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $52		; 30 52 ; Branch if minus to $30, $52 [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	.db $50, $39		; 50 39 ; Branch if overflow clear to $50, $39 [Flow: branch]
	sty $FC.b,X		; 94 FC ; Store Y register $FC.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sbc ($39.b,X)		; E1 39 ; Subtract with carry ($39.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $BA39.w		; 20 39 BA ; Jump to subroutine at $BA39.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sty $9B.b,X		; 94 9B ; Store Y register $9B.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	and #$D8E4.w		; 29 E4 D8 ; Logical AND #$D8E4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$9BE4.w		; 29 E4 9B ; Logical AND #$9BE4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($E3.b,X)		; 41 E3 ; Exclusive OR accumulator with memory ($E3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	eor ($E3.b,X)		; 41 E3 ; Exclusive OR accumulator with memory ($E3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $142BFF.l,X		; FF FF 2B 14 ; Subtract with carry (long,X) $142BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $801820.l,X		; FF 20 18 80 ; Subtract with carry (long,X) $801820.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04E2FF.l,X		; FF FF E2 04 ; Subtract with carry (long,X) $04E2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $C851.w,X		; FE 51 C8 ; Increment memory $C851.w,X [Reads: X Index] [Flags: NZ]
	ldy $1C.b		; A4 1C ; Load $1C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ora $97.b,S		; 03 97 ; OR accumulator with stack relative $97.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $AD9563.l		; 2F 63 95 AD ; AND accumulator with memory (long) $AD9563.l [Writes: Accumulator] [Flags: NZ]
	adc $FE.b,S		; 63 FE ; Add with carry (stack relative) $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $A4C9.w,X		; 5D C9 A4 ; Exclusive OR accumulator with memory $A4C9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$D404]		; DC 04 D4 ; Jump long indirect [$D404] [Flow: jump]
	jmp.w [$DF04]		; DC 04 DF ; Jump long indirect [$DF04] [Flow: jump]
	eor ($64.b,S),Y		; 53 64 ; XOR accumulator (stack relative indirect indexed) ($64.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$64D1]		; DC D1 64 ; Jump long indirect [$64D1] [Flow: jump]
	sbc $A8CB7D.l,X		; FF 7D CB A8 ; Subtract with carry (long,X) $A8CB7D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($E3.b,S),Y		; 33 E3 ; AND accumulator (stack relative indirect indexed) ($E3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	adc ($E3.b,S),Y		; 73 E3 ; Add with carry (stack relative indirect indexed) ($E3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sbc $C8.b,S		; E3 C8 ; Subtract stack-relative $C8.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	and ($E4.b,S),Y		; 33 E4 ; AND accumulator (stack relative indirect indexed) ($E4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($E4.b,S),Y		; 73 E4 ; Add with carry (stack relative indirect indexed) ($E4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cpx $A0.b		; E4 A0 ; Compare $A0.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
.ACCU 16
	rep #$A0		; C2 A0
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$A0		; C2 A0
	lda $C2.b,S		; A3 C2 ; Load accumulator (stack relative) $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $37		; D0 37 ; Branch if not equal to $D0, $37 [Flow: branch]
.INDEX 16
	rep #$D0		; C2 D0
	adc [$C2.b],Y		; 77 C2 ; Add with carry (long indexed) [$C2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $B2		; D0 B2 ; Branch if not equal to $D0, $B2 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$FE		; C2 FE
	.db $82, $98, $A8		; 82 98 A8 ; Branch always long to $82, $98, $A8 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora [$A3.b]		; 07 A3 ; OR accumulator with memory (long) [$A3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($67.b,S),Y		; 33 67 ; AND accumulator (stack relative indirect indexed) ($67.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($B0.b,X)		; A1 B0 ; Load accumulator ($B0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc [$FE.b]		; 67 FE ; Add with carry (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $A899.w		; 8D 99 A8 ; Store accumulator to $A899.w [Reads: Accumulator]
	cld		; D8 ; Clear decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and [$68.b],Y		; 37 68 ; AND accumulator with memory (long indexed) [$68.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $68B4.w,Y		; D9 B4 68 ; Compare accumulator $68B4.w,Y [Reads: Y Index] [Flags: NCZ]
	sbc $AC9B6D.l,X		; FF 6D 9B AC ; Subtract with carry (long,X) $AC9B6D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $D069.w,X		; 1E 69 D0 ; Arithmetic shift left $D069.w,X [Reads: X Index] [Flags: NCZ]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	cmp $6930.w,X		; DD 30 69 ; Compare accumulator $6930.w,X [Reads: X Index] [Flags: NCZ]
	jmp.w [$224C]		; DC 4C 22 ; Jump long indirect [$224C] [Flow: jump]
	ldy $69D9.w		; AC D9 69 ; Load $69D9.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $D9		; D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	adc #$FFFF.w		; 69 FF FF ; Add #$FFFF.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	adc $00.b,S		; 63 00 ; Add with carry (stack relative) $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0CE2FF.l,X		; FF FF E2 0C ; Subtract with carry (long,X) $0CE2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($3A.b)		; 92 3A ; Store accumulator (indirect) ($3A.b) [Reads: Direct Page, Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $AB.b,S		; E3 AB ; Subtract stack-relative $AB.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $ADEC.w,X		; FE EC AD ; Increment memory $ADEC.w,X [Reads: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $29C2.w		; 20 C2 29 ; Jump to subroutine at $29C2.w [Writes: Stack Pointer] [Flow: call]
	and $C3.b,S		; 23 C3 ; AND accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	rep #$49		; C2 49 ; Reset processor status bits #$49 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	jsl $4C51C2.l		; 22 C2 51 4C ; Jump to subroutine long $4C51C2.l [Writes: Stack Pointer] [Flow: call]
	cmp $28.b,S		; C3 28 ; Compare accumulator (stack relative) $28.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$29		; C2 29
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $2B.b,S		; C3 2B ; Compare accumulator (stack relative) $2B.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta $51C2.w,Y		; 99 C2 51 ; Store accumulator to $51C2.w,Y [Reads: Y Index, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $49.b,S		; C3 49 ; Compare accumulator (stack relative) $49.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.INDEX 16
	rep #$1B		; C2 1B
	cmp ($C3.b),Y		; D1 C3 ; Compare accumulator ($C3.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	lsr $D1.b		; 46 D1 ; Logical shift right $D1.b [Reads: Direct Page] [Flags: NCZ]
	cmp $17.b,S		; C3 17 ; Compare accumulator (stack relative) $17.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ora $1F5427.l,X		; 1F 27 54 1F ; Logical OR long $1F5427.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$14.b]		; 27 14 ; AND accumulator with memory (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $6A.b,S		; 23 6A ; AND accumulator with stack relative $6A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($6B.b,X)		; 21 6B ; Logical AND ($6B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc #$6BA1.w		; 69 A1 6B ; Add #$6BA1.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$6BD1.w		; 69 D1 6B ; Add #$6BD1.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora $D1.b,X		; 15 D1 ; OR accumulator with memory $D1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$EB.b],Y		; 17 EB ; OR accumulator with memory (long indexed) [$EB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	mvn $28,$EB		; 54 EB 28 ; Move block negative $28,$EB [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $2B.b,S		; 43 2B ; Exclusive OR accumulator with stack relative $2B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor $43FA5B.l,X		; 5F 5B FA 43 ; Exclusive OR accumulator with memory (long,X) $43FA5B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lsr $931F.w,X		; 5E 1F 93 ; Logical shift right $931F.w,X [Reads: X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora $43FAC3.l,X		; 1F C3 FA 43 ; Logical OR long $43FAC3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $FA.b,S		; C3 FA ; Compare accumulator (stack relative) $FA.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $82, $38, $02		; 82 38 02 ; Branch always long to $82, $38, $02 [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FD0082.l,X		; FF 82 00 FD ; Subtract with carry (long,X) $FD0082.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor ($20.b,X)		; 41 20 ; Exclusive OR accumulator with memory ($20.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($FD.b,X)		; 61 FD ; Add with carry ($FD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $0141.w,Y		; 19 41 01 ; OR accumulator with memory $0141.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($0024.w,X)		; FC 24 00 ; Jump to subroutine indirect indexed ($0024.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora [$4D.b],Y		; 17 4D ; OR accumulator with memory (long indexed) [$4D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $4D.b		; E5 4D ; Subtract $4D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor $AAE5.w		; 4D E5 AA ; Exclusive OR $AAE5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp $DF50AA.l,X		; DF AA 50 DF ; Compare accumulator (long,X) $DF50AA.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	adc $FA.b,S		; 63 FA ; Add with carry (stack relative) $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $63.b,S		; E3 63 ; Subtract stack-relative $63.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor ($FE.b,X)		; 41 FE ; Exclusive OR accumulator with memory ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $41		; D0 41 ; Branch if not equal to $D0, $41 [Flow: branch]
	inc $9C14.w,X		; FE 14 9C ; Increment memory $9C14.w,X [Reads: X Index] [Flags: NZ]
	jsl $699D14.l		; 22 14 9D 69 ; Jump to subroutine long $699D14.l [Writes: Stack Pointer] [Flow: call]
	jmp $68229C.l		; 5C 9C 22 68 ; Jump long to $68229C.l [Flow: jump]
	sta $1469.w,X		; 9D 69 14 ; Store accumulator to $1469.w,X [Reads: Accumulator, X Index]
	cmp $1469.w,Y		; D9 69 14 ; Compare accumulator $1469.w,Y [Reads: Y Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	jsl $22E85C.l		; 22 5C E8 22 ; Jump to subroutine long $22E85C.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cmp $1869.w,Y		; D9 69 18 ; Compare accumulator $1869.w,Y [Reads: Y Index] [Flags: NCZ]
	ldx #$6092.w		; A2 92 60 ; Load #$6092.w into X register [Writes: X Index] [Flags: NZ]
	ldx #$1892.w		; A2 92 18 ; Load #$1892.w into X register [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta ($60.b)		; 92 60 ; Store accumulator (indirect) ($60.b) [Reads: Direct Page, Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta ($29.b)		; 92 29 ; Store accumulator (indirect) ($29.b) [Reads: Direct Page, Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $DA29.w,Y		; B9 29 DA ; Load $DA29.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $B121.w,Y		; B9 21 B1 ; Load $B121.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($59.b,S),Y		; 93 59 ; Store accumulator (stack relative indirect indexed) ($59.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda ($93.b),Y		; B1 93 ; Load accumulator ($93.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	lda ($B8.b)		; B2 B8 ; Load accumulator (indirect) ($B8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp ($B8.b)		; D2 B8 ; Compare accumulator (indirect) ($B8.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $30, $BB		; 30 BB ; Branch if minus to $30, $BB [Flow: branch]
	sta ($48.b)		; 92 48 ; Store accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sta ($33.b)		; 92 33 ; Store accumulator (indirect) ($33.b) [Reads: Direct Page, Accumulator]
	lda ($FA.b,S),Y		; B3 FA ; Load accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($B3.b,S),Y		; 53 B3 ; XOR accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($05.b,S),Y		; 13 05 ; OR accumulator (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $99.b		; 06 99 ; Arithmetic shift left $99.b [Reads: Direct Page] [Flags: NCZ]
	jsl $22E1F9.l		; 22 F9 E1 22 ; Jump to subroutine long $22E1F9.l [Writes: Stack Pointer] [Flow: call]
	sbc $C239.w,Y		; F9 39 C2 ; Subtract with carry $C239.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C343.w,Y		; F9 43 C3 ; Subtract with carry $C343.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	cmp ($FA.b,S),Y		; D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp ($FA.b,S),Y		; [PATTERN: Memory clearing operation] D3 FA ; Compare accumulator (stack relative indirect indexed) ($FA.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $A13B.w		; ED 3B A1 ; Subtract $A13B.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	stz $C9C3.w		; 9C C3 C9 ; Store zero to $C9C3.w
	stz $94C3.w		; 9C C3 94 ; Store zero to $94C3.w
	lda ($C3.b,S),Y		; B3 C3 ; Load accumulator (stack relative indirect indexed) ($C3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$C3B3.w		; E0 B3 C3 ; Compare #$C3B3.w with X register [Reads: X Index] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $B0, $C2		; B0 C2 ; Branch if carry set to $B0, $C2 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $B0, $C2		; B0 C2 ; Branch if carry set to $B0, $C2 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsl $69C8A8.l		; 22 A8 C8 69 ; Jump to subroutine long $69C8A8.l [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pei ($22.b)		; D4 22 ; Push effective indirect address ($22.b) [Reads: Direct Page] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsl $69C8D4.l		; 22 D4 C8 69 ; Jump to subroutine long $69C8D4.l [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pei ($22.b)		; D4 22 ; Push effective indirect address ($22.b) [Reads: Direct Page] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cpx #$FE22.w		; E0 22 FE ; Compare #$FE22.w with X register [Reads: X Index] [Flags: NCZ]
	cpx $03AE.w		; EC AE 03 ; Compare $03AE.w with X register [Reads: X Index] [Flags: NCZ]
	ora ($C0.b)		; 12 C0 ; OR accumulator with memory (indirect) ($C0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $80, $36		; 80 36 ; Branch always to $80, $36 [Flow: branch]
	.db $62, $1C, $61		; 62 1C 61 ; Push effective relative address $62, $1C, $61 [Writes: Stack Pointer]
	trb $2E60.w		; 1C 60 2E ; Test and reset bits $2E60.w [Reads: Accumulator] [Flags: Z]
	sbc $1C82FF.l,X		; FF FF 82 1C ; Subtract with carry (long,X) $1C82FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$0D34.w		; 09 34 0D ; Logical OR #$0D34.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	adc ($09.b,X)		; 61 09 ; Add with carry ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$080E.w		; C0 0E 08 ; Compare #$080E.w with Y register [Reads: Y Index] [Flags: NCZ]
.ACCU 16
	rep #$61		; C2 61
	cmp ($10.b),Y		; D1 10 ; Compare accumulator ($10.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ora $623AE8.l		; 0F E8 3A 62 ; OR accumulator with memory (long) $623AE8.l [Writes: Accumulator] [Flags: NZ]
	lsr $031C.w,X		; 5E 1C 03 ; Logical shift right $031C.w,X [Reads: X Index] [Flags: NCZ]
	ora [$49.b],Y		; 17 49 ; OR accumulator with memory (long indexed) [$49.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $DF.b,S		; [PATTERN: Memory clearing operation] 63 DF ; Add with carry (stack relative) $DF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	stz $DC.b		; 64 DC ; Store zero to $DC.b
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stz $FF.b		; 64 FF ; Store zero to $FF.b
	adc $9DCB.w,X		; 7D CB 9D ; Add $9DCB.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $5B3B04.l,X		; DF 04 3B 5B ; Compare accumulator (long,X) $5B3B04.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cpx #$5B7B.w		; E0 7B 5B ; Compare #$5B7B.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$5BB8.w		; E0 B8 5B ; Compare #$5BB8.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$B16A.w		; E0 6A B1 ; Compare #$B16A.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$5478.w		; E0 78 54 ; Compare #$5478.w with X register [Reads: X Index] [Flags: NCZ]
.INDEX 16
	rep #$5B		; C2 5B
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.INDEX 16
	rep #$98		; C2 98
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.ACCU 16
	rep #$21		; C2 21
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp $21.b,S		; C3 21 ; Compare accumulator (stack relative) $21.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $21.b,S		; C3 21 ; Compare accumulator (stack relative) $21.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	lda ($C3.b,X)		; A1 C3 ; Load accumulator ($C3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rep #$48		; C2 48 ; Reset processor status bits #$48 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$3A		; C2 3A
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.INDEX 16
	rep #$5B		; C2 5B
	stz $C9C2.w		; 9C C2 C9 ; Store zero to $C9C2.w
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp $C9.b,S		; C3 C9 ; Compare accumulator (stack relative) $C9.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $B8.b,S		; C3 B8 ; Compare accumulator (stack relative) $B8.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	adc $A8C2.w,Y		; 79 C2 A8 ; Add $A8C2.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
.INDEX 16
	rep #$9B		; C2 9B
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
.INDEX 16
	rep #$9B		; C2 9B
	.db $D0, $C2		; D0 C2 ; Branch if not equal to $D0, $C2 [Flow: branch]
	.db $D0, $A3		; D0 A3 ; Branch if not equal to $D0, $A3 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$78		; C2 78
	sty $15C2.w		; 8C C2 15 ; Store Y register to $15C2.w [Reads: Y Index]
	eor $22.b		; 45 22 ; Exclusive OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $691F.w,Y		; 59 1F 69 ; Exclusive OR accumulator with memory $691F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $1F.b		; A5 1F ; Load $1F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$45C9.w		; 69 C9 45 ; Add #$45C9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $5EE468.l		; 22 68 E4 5E ; Jump to subroutine long $5EE468.l [Writes: Stack Pointer] [Flow: call]
	ora $B9.b,X		; 15 B9 ; OR accumulator with memory $B9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $69B935.l		; 22 35 B9 69 ; Jump to subroutine long $69B935.l [Writes: Stack Pointer] [Flow: call]
	and [$D9.b],Y		; 37 D9 ; AND accumulator with memory (long indexed) [$D9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $22D988.l		; 22 88 D9 22 ; Jump to subroutine long $22D988.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $6669.w,Y		; D9 69 66 ; Compare accumulator $6669.w,Y [Reads: Y Index] [Flags: NCZ]
	wai		; CB ; Wait for interrupt
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$04C9.w		; 69 C9 04 ; Add #$04C9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $F9CB.w,Y		; 79 CB F9 ; Add $F9CB.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $F9BA.w		; 8D BA F9 ; Store accumulator to $F9BA.w [Reads: Accumulator]
	and [$57.b],Y		; 37 57 ; AND accumulator with memory (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$5787.w		; 29 87 57 ; Logical AND #$5787.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$5A78.w		; 29 78 5A ; Logical AND #$5A78.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sty $5A.b		; 84 5A ; Store Y register to $5A.b [Reads: Y Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc $28.b		; 65 28 ; Add $28.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $5B.b,X		; 35 5B ; Logical AND $5B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $7A.b,X		; 34 7A ; Test bits $7A.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	and $7E44.w		; 2D 44 7E ; Logical AND $7E44.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvp $2D,$8A		; 44 8A 2D ; Move block positive $2D,$8A [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $6B,$8E		; 54 8E 6B ; Move block negative $6B,$8E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $9B.b,X		; 55 9B ; Exclusive OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	stx $786A.w		; 8E 6A 78 ; Store X register to $786A.w [Reads: X Index]
	bit #$8427.w		; 89 27 84 ; Test bits #$8427.w with accumulator [Reads: Accumulator] [Flags: Z]
	stx $856B.w		; 8E 6B 85 ; Store X register to $856B.w [Reads: X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	stx $A86A.w		; 8E 6A A8 ; Store X register to $A86A.w [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $7EB8.w		; 2E B8 7E ; Rotate left $7EB8.w [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rol $5BC9.w		; 2E C9 5B ; Rotate left $5BC9.w [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $AF.b		; 66 AF ; Rotate right $AF.b [Reads: Direct Page] [Flags: NCZ]
	and #$B165.w		; 29 65 B1 ; Logical AND #$B165.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $6AB1.w,Y		; 99 B1 6A ; Store accumulator to $6AB1.w,Y [Reads: Y Index, Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora $A8.b,S		; 03 A8 ; OR accumulator with stack relative $A8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora $48.b,S		; 03 48 ; OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($3A.b,S),Y		; 13 3A ; OR accumulator (stack relative indirect indexed) ($3A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $7F4A.w		; 0C 4A 7F ; Test and set bits $7F4A.w [Reads: Accumulator] [Flags: Z]
	cpx $804A.w		; EC 4A 80 ; Compare $804A.w with X register [Reads: X Index] [Flags: NCZ]
	inc $39E1.w,X		; FE E1 39 ; Increment memory $39E1.w,X [Reads: X Index] [Flags: NZ]
	ora #$A011.w		; 09 11 A0 ; Logical OR #$A011.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $11.b,X		; D5 11 ; Compare accumulator $11.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldx #$D509.w		; A2 09 D5 ; Load #$D509.w into X register [Writes: X Index] [Flags: NZ]
	lda ($FF.b,X)		; A1 FF ; Load accumulator ($FF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $DB195B.l,X		; FF 5B 19 DB ; Subtract with carry (long,X) $DB195B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $11DB.w,Y		; 19 DB 11 ; OR accumulator with memory $11DB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora ($8A.b),Y		; 11 8A ; OR accumulator with memory ($8A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and $DB48.w,Y		; 39 48 DB ; AND accumulator with memory $DB48.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$DB48.w		; A9 48 DB ; Load #$DB48.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $DB4B.w,Y		; D9 4B DB ; Compare accumulator $DB4B.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $DB8B.w,Y		; D9 8B DB ; Compare accumulator $DB8B.w,Y [Reads: Y Index] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp $DBCA.w,Y		; D9 CA DB ; Compare accumulator $DBCA.w,Y [Reads: Y Index] [Flags: NCZ]
	sbc $FFF0FF.l,X		; FF FF F0 FF ; Subtract with carry (long,X) $FFF0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FFFF00.l		; 22 00 FF FF ; Jump to subroutine long $FFFF00.l [Writes: Stack Pointer] [Flow: call]
	sep #$04		; E2 04 ; Set processor status bits #$04 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora ($3A.b),Y		; 11 3A ; OR accumulator with memory ($3A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $38E1.w,X		; FE E1 38 ; Increment memory $38E1.w,X [Reads: X Index] [Flags: NZ]
	ldx $1F.b		; A6 1F ; Load $1F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp ($CC.b),Y		; D1 CC ; Compare accumulator ($CC.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ora $56A6D1.l,X		; 1F D1 A6 56 ; Logical OR long $56A6D1.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($CC.b),Y		; D1 CC ; Compare accumulator ($CC.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	lsr $D1.b,X		; 56 D1 ; Logical shift right $D1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sta $E4.b		; 85 E4 ; Store accumulator to $E4.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	stz $B2E6.w		; 9C E6 B2 ; Store zero to $B2E6.w
	sty $E5.b		; 84 E5 ; Store Y register to $E5.b [Reads: Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $B8E3.w		; 8D E3 B8 ; Store accumulator to $B8E3.w [Reads: Accumulator]
	sty $E6.b,X		; 94 E6 ; Store Y register $E6.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	cpy #$E694.w		; C0 94 E6 ; Compare #$E694.w with Y register [Reads: Y Index] [Flags: NCZ]
	sta $D4D1A4.l,X		; 9F A4 D1 D4 ; Store accumulator (long,X) $D4D1A4.l,X [Reads: Accumulator, X Index]
	ldy $D1.b		; A4 D1 ; Load $D1.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta [$CC.b],Y		; 97 CC ; Store accumulator (long indexed) [$CC.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp ($CD.b),Y		; D1 CD ; Compare accumulator ($CD.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cpy $94D1.w		; CC D1 94 ; Compare $94D1.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $5694DF.l,X		; 1F DF 94 56 ; Logical OR long $5694DF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $DF1FDC.l,X		; DF DC 1F DF ; Compare accumulator (long,X) $DF1FDC.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	jmp.w [$DF56]		; DC 56 DF ; Jump long indirect [$DF56] [Flow: jump]
	sta $DE87.w,Y		; 99 87 DE ; Store accumulator to $DE87.w,Y [Reads: Y Index, Accumulator]
	cmp $DE87.w,Y		; D9 87 DE ; Compare accumulator $DE87.w,Y [Reads: Y Index] [Flags: NCZ]
	sty $A5.b,X		; 94 A5 ; Store Y register $A5.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	dec $A5E4.w,X		; DE E4 A5 ; Decrement memory $A5E4.w,X [Reads: X Index] [Flags: NZ]
	dec $A4B4.w,X		; DE B4 A4 ; Decrement memory $A4B4.w,X [Reads: X Index] [Flags: NZ]
	sbc $BC.b,S		; E3 BC ; Subtract stack-relative $BC.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	ldy $E3.b		; A4 E3 ; Load $E3.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta [$B5.b],Y		; 97 B5 ; Store accumulator (long indexed) [$B5.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cpx $CD.b		; E4 CD ; Compare $CD.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $E4.b,X		; B5 E4 ; Load $E4.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$DC.b],Y		; 97 DC ; Store accumulator (long indexed) [$DC.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp $DFDCCD.l,X		; DF CD DC DF ; Compare accumulator (long,X) $DFDCCD.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ldy $25.b,X		; B4 25 ; Load Y register $25.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpx $BC.b		; E4 BC ; Compare $BC.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	and $E4.b		; 25 E4 ; Logical AND $E4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $E546.w		; AC 46 E5 ; Load $E546.w into Y register [Writes: Y Index] [Flags: NZ]
	cpy $46.b		; C4 46 ; Compare $46.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	inc $FF.b		; E6 FF ; Increment $FF.b [Reads: Direct Page] [Flags: NZ]
	sbc $F0FFFF.l,X		; FF FF FF F0 ; Subtract with carry (long,X) $F0FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF1883.l,X		; FF 83 18 FF ; Subtract with carry (long,X) $FF1883.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FE10E2.l,X		; FF E2 10 FE ; Subtract with carry (long,X) $FE10E2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($39.b,X)		; E1 39 ; Subtract with carry ($39.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $EC76.w		; 2D 76 EC ; Logical AND $EC76.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $2477.w		; 2D 77 24 ; Logical AND $2477.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $523587.l		; 22 87 35 52 ; Jump to subroutine long $523587.l [Writes: Stack Pointer] [Flow: call]
	and $22D4.w,X		; 3D D4 22 ; AND accumulator with memory $22D4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$54.b]		; 87 54 ; Store accumulator (long) [$54.b] [Reads: Direct Page, Accumulator]
	jsr $703D.w		; 20 3D 70 ; Jump to subroutine at $703D.w [Writes: Stack Pointer] [Flow: call]
	and #$A43D.w		; 29 3D A4 ; Logical AND #$A43D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $383D.w		; 20 3D 38 ; Jump to subroutine at $383D.w [Writes: Stack Pointer] [Flow: call]
	and $4970.w		; 2D 70 49 ; Logical AND $4970.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $21B833.l,X		; 3F 33 B8 21 ; AND accumulator with memory (long,X) $21B833.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $48		; 70 48 ; Branch if overflow set to $70, $48 [Flow: branch]
	bit $3571.w		; 2C 71 35 ; Test bits $3571.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $3B71.w		; 2D 71 3B ; Logical AND $3B71.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $4E8734.l		; 4F 34 87 4E ; Exclusive OR accumulator with memory (long) $4E8734.l [Writes: Accumulator] [Flags: NZ]
	bit $4F.b,X		; 34 4F ; Test bits $4F.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $99.b,X		; 34 99 ; Test bits $99.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $B4.b,X		; 34 B4 ; Test bits $B4.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	jsl $23C971.l		; 22 71 C9 23 ; Jump to subroutine long $23C971.l [Writes: Stack Pointer] [Flow: call]
	adc ($30.b),Y		; 71 30 ; Add with carry ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1CE2FF.l,X		; FF FF E2 1C ; Subtract with carry (long,X) $1CE2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $38E1.w,X		; FE E1 38 ; Increment memory $38E1.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor #$68DF.w		; 49 DF 68 ; Exclusive OR #$68DF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$78DF.w		; 49 DF 78 ; Exclusive OR #$78DF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cmp $DF5889.l,X		; DF 89 58 DF ; Compare accumulator (long,X) $DF5889.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	bit #$DF40.w		; 89 40 DF ; Test bits #$DF40.w with accumulator [Reads: Accumulator] [Flags: Z]
	cpy #$DF59.w		; C0 59 DF ; Compare #$DF59.w with Y register [Reads: Y Index] [Flags: NCZ]
	ldy #$DF80.w		; A0 80 DF ; Load #$DF80.w into Y register [Writes: Y Index] [Flags: NZ]
	adc $DF88.w,Y		; 79 88 DF ; Add $DF88.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $DF90.w,Y		; 79 90 DF ; Add $DF90.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $99		; 50 99 ; Branch if overflow clear to $50, $99 [Flow: branch]
	cmp $DF9958.l,X		; DF 58 99 DF ; Compare accumulator (long,X) $DF9958.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	and #$DF69.w		; 29 69 DF ; Logical AND #$DF69.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 0FFFFC. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 0FFFFD. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 0FFFFE. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 0FFFFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.ENDS
