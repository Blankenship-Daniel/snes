.BANK 14 SLOT 0
.ORG $0000

.SECTION "Bank14" FORCE

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sty $78.b		; 84 78 ; Store Y register to $78.b [Reads: Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $B4		; 70 B4 ; Branch if overflow set to $70, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sty $0070.w		; 8C 70 00 ; Store Y register to $0070.w [Reads: Y Index]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $A040.w,X		; BC 40 A0 ; Load Y register $A040.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $B4		; 70 B4 ; Branch if overflow set to $70, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($8400.w,X)		; FC 00 84 ; Jump to subroutine indirect indexed ($8400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ldy $A040.w,X		; BC 40 A0 ; Load Y register $A040.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ldy $A040.w,X		; BC 40 A0 ; Load Y register $A040.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $BC40.w,X		; BC 40 BC ; Load Y register $BC40.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($B400.w,X)		; FC 00 B4 ; Jump to subroutine indirect indexed ($B400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sty $78.b		; 84 78 ; Store Y register to $78.b [Reads: Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $1400.w		; 1C 00 14 ; Test and reset bits $1400.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($B400.w,X)		; FC 00 B4 ; Jump to subroutine indirect indexed ($B400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $A850.w		; AC 50 A8 ; Load $A850.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $50, $98		; 50 98 ; Branch if overflow clear to $50, $98 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $BA00.w		; EE 00 BA ; Increment $BA00.w [Flags: NZ]
	mvp $6C,$92		; 44 92 6C ; Move block positive $6C,$92 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($B400.w,X)		; FC 00 B4 ; Jump to subroutine indirect indexed ($B400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sty $68.b,X		; 94 68 ; Store Y register $68.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $68.b,X		; 94 68 ; Store Y register $68.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $68.b,X		; 94 68 ; Store Y register $68.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $B4		; 70 B4 ; Branch if overflow set to $70, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sty $B470.w		; 8C 70 B4 ; Store Y register to $B470.w [Reads: Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sty $F870.w		; 8C 70 F8 ; Store Y register to $F870.w [Reads: Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sty $F870.w		; 8C 70 F8 ; Store Y register to $F870.w [Reads: Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy $8440.w,X		; BC 40 84 ; Load Y register $8440.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $38.b		; C4 38 ; Compare $38.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	jmp ($0000.w,X)		; 7C 00 00 ; Jump indirect indexed to ($0000.w,X) [Reads: X Index] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	pea $B408.w		; F4 08 B4 ; Push absolute address $B408.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $AC		; 50 AC ; Branch if overflow clear to $50, $AC [Flow: branch]
	.db $50, $B4		; 50 B4 ; Branch if overflow clear to $50, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy $8440.w,X		; BC 40 84 ; Load Y register $8440.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $00,$FE		; 54 FE 00 ; Move block negative $00,$FE [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $B4		; 70 B4 ; Branch if overflow set to $70, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sty $0070.w		; 8C 70 00 ; Store Y register to $0070.w [Reads: Y Index]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B840.w,X		; BC 40 B8 ; Load Y register $B840.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy $0030.w		; CC 30 00 ; Compare $0030.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($10EE.w,X)		; 7C EE 10 ; Jump indirect indexed to ($10EE.w,X) [Reads: X Index] [Flow: jump]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $AA00.w		; EE 00 AA ; Increment $AA00.w [Flags: NZ]
	mvp $44,$AA		; 44 AA 44 ; Move block positive $44,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvp $44,$AA		; 44 AA 44 ; Move block positive $44,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	mvp $28,$D6		; 44 D6 28 ; Move block positive $28,$D6 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $AA00.w,X		; FE 00 AA ; Increment memory $AA00.w,X [Reads: X Index] [Flags: NZ]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $AA00.w		; EE 00 AA ; Increment $AA00.w [Flags: NZ]
	mvp $44,$BA		; 44 BA 44 ; Move block positive $44,$BA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	dec $28.b,X		; D6 28 ; Decrement memory $28.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	mvn $6C,$28		; 54 28 6C ; Move block negative $6C,$28 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $44,$AA		; 44 AA 44 ; Move block positive $44,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	mvp $28,$D6		; 44 D6 28 ; Move block positive $28,$D6 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $54,$28		; 54 28 54 ; Move block negative $54,$28 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($8400.w,X)		; FC 00 84 ; Jump to subroutine indirect indexed ($8400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pea $2C08.w		; F4 08 2C ; Push absolute address $2C08.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $10, $2C		; 10 2C ; Branch if plus to $10, $2C [Flow: branch]
	.db $10, $68		; 10 68 ; Branch if plus to $10, $68 [Flow: branch]
	.db $10, $58		; 10 58 ; Branch if plus to $10, $58 [Flow: branch]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pea $0008.w		; F4 08 00 ; Push absolute address $0008.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy $9450.w		; AC 50 94 ; Load $9450.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $1400.w		; 1C 00 14 ; Test and reset bits $1400.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	stz $08.b,X		; 74 08 ; Store zero to $08.b,X [Reads: X Index]
	pei ($28.b)		; D4 28 ; Push effective indirect address ($28.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $6400.w,X		; 3C 00 64 ; Test bits $6400.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	jmp $205820.l		; 5C 20 58 20 ; Jump long to $205820.l [Flow: jump]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	jsr $20DC.w		; 20 DC 20 ; Jump to subroutine at $20DC.w [Writes: Stack Pointer] [Flow: call]
	sty $78.b		; 84 78 ; Store Y register to $78.b [Reads: Y Index]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B450.w		; AC 50 B4 ; Load $B450.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $7C.b,X		; 34 7C ; Test bits $7C.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $B4		; 50 B4 ; Branch if overflow clear to $50, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pea $B408.w		; F4 08 B4 ; Push absolute address $B408.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	mvn $54,$28		; 54 28 54 ; Move block negative $54,$28 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $28,$D6		; 54 D6 28 ; Move block negative $28,$D6 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvn $7C,$28		; 54 28 7C ; Move block negative $7C,$28 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $54		; 10 54 ; Branch if plus to $10, $54 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	dec $28.b,X		; D6 28 ; Decrement memory $28.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	mvp $44,$AA		; 44 AA 44 ; Move block positive $44,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	inc $0000.w		; EE 00 00 ; Increment $0000.w [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $20D0.w		; 20 D0 20 ; Jump to subroutine at $20D0.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	ldy $8440.w,X		; BC 40 84 ; Load Y register $8440.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	pei ($28.b)		; D4 28 ; Push effective indirect address ($28.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jmp ($0000.w,X)		; 7C 00 00 ; Jump indirect indexed to ($0000.w,X) [Reads: X Index] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sty $68.b,X		; 94 68 ; Store Y register $68.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ldy $7850.w		; AC 50 78 ; Load $7850.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy $B440.w,X		; BC 40 B4 ; Load Y register $B440.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	pei ($28.b)		; D4 28 ; Push effective indirect address ($28.b) [Reads: Direct Page] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ldy $B440.w,X		; BC 40 B4 ; Load Y register $B440.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DC.b		; 00 DC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2050.w		; 20 50 20 ; Jump to subroutine at $2050.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $D4.b		; 00 D4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy $9450.w		; AC 50 94 ; Load $9450.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy $B440.w,X		; BC 40 B4 ; Load Y register $B440.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $9850.w		; AC 50 98 ; Load $9850.w into Y register [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($9600.w,X)		; FC 00 96 ; Jump to subroutine indirect indexed ($9600.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $94		; 50 94 ; Branch if overflow clear to $50, $94 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $94		; 50 94 ; Branch if overflow clear to $50, $94 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($D400.w,X)		; 7C 00 D4 ; Jump indirect indexed to ($D400.w,X) [Reads: X Index] [Flow: jump]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $98		; 50 98 ; Branch if overflow clear to $50, $98 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $0040.w,X		; BC 40 00 ; Load Y register $0040.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2050.w		; 20 50 20 ; Jump to subroutine at $2050.w [Writes: Stack Pointer] [Flow: call]
	jmp.w [$8420]		; DC 20 84 ; Jump long indirect [$8420] [Flow: jump]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jmp.w [$5020]		; DC 20 50 ; Jump long indirect [$5020] [Flow: jump]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($B400.w,X)		; FC 00 B4 ; Jump to subroutine indirect indexed ($B400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $AA00.w		; EE 00 AA ; Increment $AA00.w [Flags: NZ]
	mvp $44,$AA		; 44 AA 44 ; Move block positive $44,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	mvp $48,$B4		; 44 B4 48 ; Move block positive $48,$B4 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	pei ($28.b)		; D4 28 ; Push effective indirect address ($28.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pea $8C08.w		; F4 08 8C ; Push absolute address $8C08.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $70, $F8		; 70 F8 ; Branch if overflow set to $70, $F8 [Flow: branch]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $E8		; 10 E8 ; Branch if plus to $10, $E8 [Flow: branch]
	.db $10, $98		; 10 98 ; Branch if plus to $10, $98 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $50, $A8		; 50 A8 ; Branch if overflow clear to $50, $A8 [Flow: branch]
	.db $50, $AC		; 50 AC ; Branch if overflow clear to $50, $AC [Flow: branch]
	.db $50, $B4		; 50 B4 ; Branch if overflow clear to $50, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $00,$FE		; 54 FE 00 ; Move block negative $00,$FE [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sty $68.b,X		; 94 68 ; Store Y register $68.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ldy $B850.w		; AC 50 B8 ; Load $B850.w into Y register [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	pei ($28.b)		; D4 28 ; Push effective indirect address ($28.b) [Reads: Direct Page] [Writes: Stack Pointer]
	stz $08.b,X		; 74 08 ; Store zero to $08.b,X [Reads: X Index]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $A000.w		; 1C 00 A0 ; Test and reset bits $A000.w [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $F430.w		; CC 30 F4 ; Compare $F430.w with Y register [Reads: Y Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2050.w		; 20 50 20 ; Jump to subroutine at $2050.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	jmp $186420.l		; 5C 20 64 18 ; Jump long to $186420.l [Flow: jump]
	bit $0000.w,X		; 3C 00 00 ; Test bits $0000.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $58.b		; A4 58 ; Load $58.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	pei ($28.b)		; D4 28 ; Push effective indirect address ($28.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jmp ($0000.w,X)		; 7C 00 00 ; Jump indirect indexed to ($0000.w,X) [Reads: X Index] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D6.b		; 00 D6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	mvn $54,$28		; 54 28 54 ; Move block negative $54,$28 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jmp ($2810.w)		; 6C 10 28 ; Jump indirect to ($2810.w) [Flow: jump]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $00,$00		; 54 00 00 ; Move block negative $00,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $AA00.w		; EE 00 AA ; Increment $AA00.w [Flags: NZ]
	mvp $44,$BA		; 44 BA 44 ; Move block positive $44,$BA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	dec $28.b,X		; D6 28 ; Decrement memory $28.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $AA00.w		; EE 00 AA ; Increment $AA00.w [Flags: NZ]
	mvp $44,$AA		; 44 AA 44 ; Move block positive $44,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($8400.w,X)		; FC 00 84 ; Jump to subroutine indirect indexed ($8400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pea $2C08.w		; F4 08 2C ; Push absolute address $2C08.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	pea $2C08.w		; F4 08 2C ; Push absolute address $2C08.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $10, $68		; 10 68 ; Branch if plus to $10, $68 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	pea $7408.w		; F4 08 74 ; Push absolute address $7408.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jmp $0030.w		; 4C 30 00 ; Jump to $0030.w [Flow: jump]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	.db $50, $A8		; 50 A8 ; Branch if overflow clear to $50, $A8 [Flow: branch]
	.db $50, $A8		; 50 A8 ; Branch if overflow clear to $50, $A8 [Flow: branch]
	.db $50, $A8		; 50 A8 ; Branch if overflow clear to $50, $A8 [Flow: branch]
	.db $50, $00		; 50 00 ; Branch if overflow clear to $50, $00 [Flow: branch]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ldy $A040.w,X		; BC 40 A0 ; Load Y register $A040.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clv		; B8 ; Clear overflow flag [Flags: V]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sty $B470.w		; 8C 70 B4 ; Store Y register to $B470.w [Reads: Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $8C40.w,X		; BC 40 8C ; Load Y register $8C40.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $70, $B4		; 70 B4 ; Branch if overflow set to $70, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($8400.w,X)		; FC 00 84 ; Jump to subroutine indirect indexed ($8400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pea $1408.w		; F4 08 14 ; Push absolute address $1408.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $08.b,X		; 34 08 ; Test bits $08.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $2810.w		; 2C 10 28 ; Test bits $2810.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $0030.w		; CC 30 00 ; Compare $0030.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($C600.w,X)		; 7C 00 C6 ; Jump indirect indexed to ($C600.w,X) [Reads: X Index] [Flow: jump]
	sec		; 38 ; Set carry flag [Flags: C]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	mvp $44,$BA		; 44 BA 44 ; Move block positive $44,$BA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	mvp $44,$BA		; 44 BA 44 ; Move block positive $44,$BA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	inc $08.b,X		; F6 08 ; Increment memory $08.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	mvn $54,$AA		; 54 AA 54 ; Move block negative $54,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	stx $68.b,Y		; 96 68 ; Store X register $68.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $54		; 10 54 ; Branch if plus to $10, $54 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	dec $28.b,X		; D6 28 ; Decrement memory $28.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	mvp $44,$AA		; 44 AA 44 ; Move block positive $44,$AA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	inc $0000.w		; EE 00 00 ; Increment $0000.w [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D6.b		; 00 D6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	mvn $54,$28		; 54 28 54 ; Move block negative $54,$28 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jmp ($2810.w)		; 6C 10 28 ; Jump indirect to ($2810.w) [Flow: jump]
	.db $10, $E8		; 10 E8 ; Branch if plus to $10, $E8 [Flow: branch]
	.db $10, $98		; 10 98 ; Branch if plus to $10, $98 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	.db $10, $58		; 10 58 ; Branch if plus to $10, $58 [Flow: branch]
	jsr $20D0.w		; 20 D0 20 ; Jump to subroutine at $20D0.w [Writes: Stack Pointer] [Flow: call]
	ldy $8440.w,X		; BC 40 84 ; Load Y register $8440.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2050.w		; 20 50 20 ; Jump to subroutine at $2050.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	jsr $20D0.w		; 20 D0 20 ; Jump to subroutine at $20D0.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	ldy $8440.w,X		; BC 40 84 ; Load Y register $8440.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pea $B408.w		; F4 08 B4 ; Push absolute address $B408.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $84		; 50 84 ; Branch if overflow clear to $50, $84 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpx $2810.w		; EC 10 28 ; Compare $2810.w with X register [Reads: X Index] [Flags: NCZ]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	pea $B408.w		; F4 08 B4 ; Push absolute address $B408.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $58		; 10 58 ; Branch if plus to $10, $58 [Flow: branch]
	jsr $2050.w		; 20 50 20 ; Jump to subroutine at $2050.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	pea $B408.w		; F4 08 B4 ; Push absolute address $B408.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $2810.w		; 2C 10 28 ; Test bits $2810.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $1C70.w		; 8C 70 1C ; Store Y register to $1C70.w [Reads: Y Index]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $18.b		; 64 18 ; Store zero to $18.b
	cpy $38.b		; C4 38 ; Compare $38.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sty $9870.w		; 8C 70 98 ; Store Y register to $9870.w [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $C470.w		; 8C 70 C4 ; Store Y register to $C470.w [Reads: Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	stz $18.b		; 64 18 ; Store zero to $18.b
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $54		; 10 54 ; Branch if plus to $10, $54 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	mvn $54,$28		; 54 28 54 ; Move block negative $54,$28 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	mvn $EC,$28		; 54 28 EC ; Move block negative $EC,$28 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D4.b		; 00 D4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldy $F850.w		; AC 50 F8 ; Load $F850.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $74		; 30 74 ; Branch if minus to $30, $74 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	mvn $54,$28		; 54 28 54 ; Move block negative $54,$28 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	stz $08.b,X		; 74 08 ; Store zero to $08.b,X [Reads: X Index]
	jmp ($0710.w)		; 6C 10 07 ; Jump indirect to ($0710.w) [Flow: jump]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $22.b		; 06 22 ; Arithmetic shift left $22.b [Reads: Direct Page] [Flags: NCZ]
	ora $3B44.w,X		; 1D 44 3B ; OR accumulator with memory $3B44.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and [$B9.b],Y		; 37 B9 ; AND accumulator with memory (long indexed) [$B9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $AB.b		; 46 AB ; Logical shift right $AB.b [Reads: Direct Page] [Flags: NCZ]
	mvn $50,$AF		; 54 AF 50 ; Move block negative $50,$AF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $FFC0.w,X		; 3E C0 FF ; Rotate left $FFC0.w,X [Reads: X Index] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $6A		; 10 6A ; Branch if plus to $10, $6A [Flow: branch]
	sty $F8.b,X		; 94 F8 ; Store Y register $F8.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $A8		; 50 A8 ; Branch if overflow clear to $50, $A8 [Flow: branch]
	.db $50, $F8		; 50 F8 ; Branch if overflow clear to $50, $F8 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $C6		; 10 C6 ; Branch if plus to $10, $C6 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $EE		; 10 EE ; Branch if plus to $10, $EE [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $CE		; 10 CE ; Branch if plus to $10, $CE [Flow: branch]
	.db $30, $84		; 30 84 ; Branch if minus to $30, $84 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($5400.w,X)		; FC 00 54 ; Jump to subroutine indirect indexed ($5400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	mvn $FC,$A8		; 54 A8 FC ; Move block negative $FC,$A8 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sty $9870.w		; 8C 70 98 ; Store Y register to $9870.w [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $C470.w		; 8C 70 C4 ; Store Y register to $C470.w [Reads: Y Index]
	sec		; 38 ; Set carry flag [Flags: C]
	stz $18.b		; 64 18 ; Store zero to $18.b
	bit $08.b,X		; 34 08 ; Test bits $08.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	trb $0000.w		; 1C 00 00 ; Test and reset bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $18.b		; 64 18 ; Store zero to $18.b
	cpy $38.b		; C4 38 ; Compare $38.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sty $9870.w		; 8C 70 98 ; Store Y register to $9870.w [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $C450.w		; AC 50 C4 ; Load $C450.w into Y register [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ldy $E850.w		; AC 50 E8 ; Load $E850.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D4.b		; 00 D4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldy $F850.w		; AC 50 F8 ; Load $F850.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D4.b		; 00 D4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldy $F850.w		; AC 50 F8 ; Load $F850.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $40BC.w		; 20 BC 40 ; Jump to subroutine at $40BC.w [Writes: Stack Pointer] [Flow: call]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $B440.w,X		; BC 40 B4 ; Load Y register $B440.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta ($6D.b)		; 92 6D ; Store accumulator (indirect) ($6D.b) [Reads: Direct Page, Accumulator]
	sta ($6D.b)		; 92 6D ; Store accumulator (indirect) ($6D.b) [Reads: Direct Page, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$BE.b]		; 67 BE ; Add with carry (long) [$BE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $41		; 90 41 ; Branch if carry clear to $90, $41 [Flow: branch]
	ldx $F00F.w,Y		; BE 0F F0 ; Load X register $F00F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsb $F8.b		; 04 F8 ; Test and set bits $F8.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($10EE.w,X)		; 7C EE 10 ; Jump indirect indexed to ($10EE.w,X) [Reads: X Index] [Flow: jump]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($38C6.w,X)		; 7C C6 38 ; Jump indirect indexed to ($38C6.w,X) [Reads: X Index] [Flow: jump]
	jmp ($3810.w)		; 6C 10 38 ; Jump indirect to ($3810.w) [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($30CE.w,X)		; 7C CE 30 ; Jump indirect indexed to ($30CE.w,X) [Reads: X Index] [Flow: jump]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $E6		; 10 E6 ; Branch if plus to $10, $E6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $2200.w		; 1C 00 22 ; Test and reset bits $2200.w [Reads: Accumulator] [Flags: Z]
	trb $3E5D.w		; 1C 5D 3E ; Test and reset bits $3E5D.w [Reads: Accumulator] [Flags: Z]
	ldx $BE7F.w,Y		; BE 7F BE ; Load X register $BE7F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc $BE7FBE.l,X		; 7F BE 7F BE ; Add long $BE7FBE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $383F40.l,X		; 7F 40 3F 38 ; Add long $383F40.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	mvp $82,$7D		; 44 7D 82 ; Move block positive $82,$7D [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $FD02.w,X		; FD 02 FD ; Subtract with carry $FD02.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FA.b		; 02 FA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1C.b		; 04 1C ; Test and set bits $1C.b [Reads: Accumulator] [Flags: Z]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $3E5D.w		; 1C 5D 3E ; Test and reset bits $3E5D.w [Reads: Accumulator] [Flags: Z]
	ldx $BE7F.w,Y		; BE 7F BE ; Load X register $BE7F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc $BE7FBE.l,X		; 7F BE 7F BE ; Add long $BE7FBE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $1C3F5E.l,X		; 7F 5E 3F 1C ; Add long $1C3F5E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $3E5D.w		; 1C 5D 3E ; Test and reset bits $3E5D.w [Reads: Accumulator] [Flags: Z]
	ldx $BF7F.w,Y		; BE 7F BF ; Load X register $BF7F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc $BF7FBF.l,X		; 7F BF 7F BF ; Add long $BF7FBF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $383F5F.l,X		; 7F 5F 3F 38 ; Add long $383F5F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	jmp ($FE7D.w,X)		; 7C 7D FE ; Jump indirect indexed to ($FE7D.w,X) [Reads: X Index] [Flow: jump]
	sbc $FDFE.w,X		; FD FE FD ; Subtract with carry $FDFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FE01.w,X		; FE 01 FE ; Increment memory $FE01.w,X [Reads: X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sty $1C.b		; 84 1C ; Store Y register to $1C.b [Reads: Y Index]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $3E5D.w		; 1C 5D 3E ; Test and reset bits $3E5D.w [Reads: Accumulator] [Flags: Z]
	ldx $BF7F.w,Y		; BE 7F BF ; Load X register $BF7F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc $BF7FBF.l,X		; 7F BF 7F BF ; Add long $BF7FBF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $383F5F.l,X		; 7F 5F 3F 38 ; Add long $383F5F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	jmp ($FE7D.w,X)		; 7C 7D FE ; Jump indirect indexed to ($FE7D.w,X) [Reads: X Index] [Flow: jump]
	sbc $FDFE.w,X		; FD FE FD ; Subtract with carry $FDFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FEFD.w,X		; FE FD FE ; Increment memory $FEFD.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $3400.w		; 1C 00 34 ; Test and reset bits $3400.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $18.b		; 64 18 ; Store zero to $18.b
	cpy $38.b		; C4 38 ; Compare $38.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sty $78.b		; 84 78 ; Store Y register to $78.b [Reads: Y Index]
	ror $C300.w,X		; 7E 00 C3 ; Rotate right $C300.w,X [Reads: X Index] [Flags: NCZ]
	bit $6699.w,X		; 3C 99 66 ; Test bits $6699.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sta $9966.w,Y		; 99 66 99 ; Store accumulator to $9966.w,Y [Reads: Y Index, Accumulator]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: NCZ]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: NCZ]
	ror $81.b		; 66 81 ; Rotate right $81.b [Reads: Direct Page] [Flags: NCZ]
	ror $00FE.w,X		; 7E FE 00 ; Rotate right $00FE.w,X [Reads: X Index] [Flags: NCZ]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Stack Pointer, Accumulator]
	sta $9966.w,Y		; 99 66 99 ; Store accumulator to $9966.w,Y [Reads: Y Index, Accumulator]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: NCZ]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: NCZ]
	ror $83.b		; 66 83 ; Rotate right $83.b [Reads: Direct Page] [Flags: NCZ]
	jmp ($6699.w,X)		; 7C 99 66 ; Jump indirect indexed to ($6699.w,X) [Reads: X Index] [Flow: jump]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $62.b,X		; 95 62 ; Store accumulator to $62.b,X [Reads: Accumulator, X Index]
	sta $9D62.w,X		; 9D 62 9D ; Store accumulator to $9D62.w,X [Reads: Accumulator, X Index]
	.db $62, $CB, $34		; 62 CB 34 ; Push effective relative address $62, $CB, $34 [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $66.b,X		; 34 66 ; Test bits $66.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $18.b		; 66 18 ; Rotate right $18.b [Reads: Direct Page] [Flags: NCZ]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $62.b,X		; 95 62 ; Store accumulator to $62.b,X [Reads: Accumulator, X Index]
	sta $62.b,X		; 95 62 ; Store accumulator to $62.b,X [Reads: Accumulator, X Index]
	sta $62.b,X		; 95 62 ; Store accumulator to $62.b,X [Reads: Accumulator, X Index]
	sta $CB62.w,X		; 9D 62 CB ; Store accumulator to $CB62.w,X [Reads: Accumulator, X Index]
	bit $4A.b,X		; 34 4A ; Test bits $4A.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $66.b,X		; 34 66 ; Test bits $66.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $82		; 10 82 ; Branch if plus to $10, $82 [Flow: branch]
	jmp ($18E6.w,X)		; 7C E6 18 ; Jump indirect indexed to ($18E6.w,X) [Reads: X Index] [Flow: jump]
	bit $3810.w		; 2C 10 38 ; Test bits $3810.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $17		; 10 17 ; Branch if plus to $10, $17 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $D0		; 10 D0 ; Branch if plus to $10, $D0 [Flow: branch]
	jsr $40A0.w		; 20 A0 40 ; Jump to subroutine at $40A0.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0A0F16.l,X		; 1F 16 0F 0A ; Logical OR long $0A0F16.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0B0F17.l,X		; 1F 17 0F 0B ; Logical OR long $0B0F17.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	.db $90, $50		; 90 50 ; Branch if carry clear to $90, $50 [Flow: branch]
	ldy #$20.b		; A0 20 ; Load #$20.b into Y register [Writes: Y Index] [Flags: NZ]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0B0F17.l,X		; 1F 17 0F 0B ; Logical OR long $0B0F17.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $F0, $D0		; F0 D0 ; Branch if equal to $F0, $D0 [Flow: branch]
	cpx #$A0.b		; E0 A0 ; Compare #$A0.b with X register [Reads: X Index] [Flags: NCZ]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	stz $18.b		; 64 18 ; Store zero to $18.b
	bit $08.b,X		; 34 08 ; Test bits $08.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	trb $0000.w		; 1C 00 00 ; Test and reset bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: NCZ]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: NCZ]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: NCZ]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: NCZ]
	ror $FF.b		; 66 FF ; Rotate right $FF.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: NCZ]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: NCZ]
	ror $99.b		; 66 99 ; Rotate right $99.b [Reads: Direct Page] [Flags: NCZ]
	ror $83.b		; 66 83 ; Rotate right $83.b [Reads: Direct Page] [Flags: NCZ]
	jmp ($00FE.w,X)		; 7C FE 00 ; Jump indirect indexed to ($00FE.w,X) [Reads: X Index] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($2C.b)		; 52 2C ; Exclusive OR accumulator with memory (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp ($2C.b,S),Y		; D3 2C ; Compare accumulator (stack relative indirect indexed) ($2C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	lda $B946.w,Y		; B9 46 B9 ; Load $B946.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $B9.b		; 46 B9 ; Logical shift right $B9.b [Reads: Direct Page] [Flags: NCZ]
	lsr $EF.b		; 46 EF ; Logical shift right $EF.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $0000.w,X		; 3C 00 00 ; Test bits $0000.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $7E66.w,X		; 3C 66 7E ; Test bits $7E66.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc $99FF99.l,X		; FF 99 FF 99 ; Subtract with carry (long,X) $99FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $99FF81.l,X		; FF 81 FF 99 ; Subtract with carry (long,X) $99FF81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FEFFFF.l,X		; FF FF FF FE ; Subtract with carry (long,X) $FEFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FF83.w,X		; FE 83 FF ; Increment memory $FF83.w,X [Reads: X Index] [Flags: NZ]
	sta $83FF.w,Y		; 99 FF 83 ; Store accumulator to $83FF.w,Y [Reads: Y Index, Accumulator]
	sbc $99FF99.l,X		; FF 99 FF 99 ; Subtract with carry (long,X) $99FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FEFF83.l,X		; FF 83 FF FE ; Subtract with carry (long,X) $FEFF83.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $7E7E.w,X		; FE 7E 7E ; Increment memory $7E7E.w,X [Reads: X Index] [Flags: NZ]
	cmp $FF.b,S		; C3 FF ; Compare accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta $9FFF.w,Y		; 99 FF 9F ; Store accumulator to $9FFF.w,Y [Reads: Y Index, Accumulator]
	sbc $99FF9F.l,X		; FF 9F FF 99 ; Subtract with carry (long,X) $99FF9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7EFFC3.l,X		; FF C3 FF 7E ; Subtract with carry (long,X) $7EFFC3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $FCFC.w,X		; 7E FC FC ; Rotate right $FCFC.w,X [Reads: X Index] [Flags: NCZ]
	stx $FE.b		; 86 FE ; Store X register to $FE.b [Reads: X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $99FF99.l,X		; FF 99 FF 99 ; Subtract with carry (long,X) $99FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $86FF9B.l,X		; FF 9B FF 86 ; Subtract with carry (long,X) $86FF9B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FCFC.w,X		; FE FC FC ; Increment memory $FCFC.w,X [Reads: X Index] [Flags: NZ]
	sbc $FF81FF.l,X		; FF FF 81 FF ; Subtract with carry (long,X) $FF81FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $FE82FF.l,X		; 9F FF 82 FE ; Store accumulator (long,X) $FE82FF.l,X [Reads: Accumulator, X Index]
	stz $9FFE.w,X		; 9E FE 9F ; Store zero to $9FFE.w,X [Reads: X Index]
	sbc $FFFF81.l,X		; FF 81 FF FF ; Subtract with carry (long,X) $FFFF81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $81FFFF.l,X		; FF FF FF 81 ; Subtract with carry (long,X) $81FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $82FF9F.l,X		; FF 9F FF 82 ; Subtract with carry (long,X) $82FF9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FE9E.w,X		; FE 9E FE ; Increment memory $FE9E.w,X [Reads: X Index] [Flags: NZ]
	.db $90, $F0		; 90 F0 ; Branch if carry clear to $90, $F0 [Flow: branch]
	.db $90, $F0		; 90 F0 ; Branch if carry clear to $90, $F0 [Flow: branch]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	ror $C37E.w,X		; 7E 7E C3 ; Rotate right $C37E.w,X [Reads: X Index] [Flags: NCZ]
	sbc $9FFF99.l,X		; FF 99 FF 9F ; Subtract with carry (long,X) $9FFF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $99FF91.l,X		; FF 91 FF 99 ; Subtract with carry (long,X) $99FF91.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7FFFC1.l,X		; FF C1 FF 7F ; Subtract with carry (long,X) $7FFFC1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $99FFFF.l,X		; 7F FF FF 99 ; Add long $99FFFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $81FF99.l,X		; FF 99 FF 81 ; Subtract with carry (long,X) $81FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $99FF99.l,X		; FF 99 FF 99 ; Subtract with carry (long,X) $99FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFF99.l,X		; FF 99 FF FF ; Subtract with carry (long,X) $FFFF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $427E7E.l,X		; FF 7E 7E 42 ; Subtract with carry (long,X) $427E7E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $7E66.w,X		; 7E 66 7E ; Rotate right $7E66.w,X [Reads: X Index] [Flags: NCZ]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ror $7E.b		; 66 7E ; Rotate right $7E.b [Reads: Direct Page] [Flags: NCZ]
	.db $42, $7E		; 42 7E ; Reserved instruction
	ror $287E.w,X		; 7E 7E 28 ; Rotate right $287E.w,X [Reads: X Index] [Flags: NCZ]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1E12.w,X		; 1E 12 1E ; Arithmetic shift left $1E12.w,X [Reads: X Index] [Flags: NCZ]
	ora ($1E.b)		; 12 1E ; OR accumulator with memory (indirect) ($1E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $001E.w,X		; 1E 1E 00 ; Arithmetic shift left $001E.w,X [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $333F21.l,X		; 3F 21 3F 33 ; AND accumulator with memory (long,X) $333F21.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $F21E12.l,X		; 3F 12 1E F2 ; AND accumulator with memory (long,X) $F21E12.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FE92.w,X		; FE 92 FE ; Increment memory $FE92.w,X [Reads: X Index] [Flags: NZ]
	dec $FE.b		; C6 FE ; Decrement $FE.b [Reads: Direct Page] [Flags: NZ]
	jmp ($FF7C.w,X)		; 7C 7C FF ; Jump indirect indexed to ($FF7C.w,X) [Reads: X Index] [Flow: jump]
	sbc $93FF99.l,X		; FF 99 FF 93 ; Subtract with carry (long,X) $93FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $86FE86.l,X		; FF 86 FE 86 ; Subtract with carry (long,X) $86FE86.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FF93.w,X		; FE 93 FF ; Increment memory $FF93.w,X [Reads: X Index] [Flags: NZ]
	sta $FFFF.w,Y		; 99 FF FF ; Store accumulator to $FFFF.w,Y [Reads: Y Index, Accumulator]
	sbc $90F0F0.l,X		; FF F0 F0 90 ; Subtract with carry (long,X) $90F0F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $90		; F0 90 ; Branch if equal to $F0, $90 [Flow: branch]
	.db $F0, $90		; F0 90 ; Branch if equal to $F0, $90 [Flow: branch]
	.db $F0, $90		; F0 90 ; Branch if equal to $F0, $90 [Flow: branch]
	.db $F0, $9F		; F0 9F ; Branch if equal to $F0, $9F [Flow: branch]
	sbc $FFFF81.l,X		; FF 81 FF FF ; Subtract with carry (long,X) $FFFF81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9DF7F7.l,X		; FF F7 F7 9D ; Subtract with carry (long,X) $9DF7F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $81FF89.l,X		; FF 89 FF 81 ; Subtract with carry (long,X) $81FF89.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9DFF95.l,X		; FF 95 FF 9D ; Subtract with carry (long,X) $9DFF95.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F7F795.l,X		; FF 95 F7 F7 ; Subtract with carry (long,X) $F7F795.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$9D.b],Y		; F7 9D ; Subtract with carry (long indexed) [$9D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $85FF8D.l,X		; FF 8D FF 85 ; Subtract with carry (long,X) $85FF8D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $99FF91.l,X		; FF 91 FF 99 ; Subtract with carry (long,X) $99FF91.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F7FF9D.l,X		; FF 9D FF F7 ; Subtract with carry (long,X) $F7FF9D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$7E.b],Y		; F7 7E ; Subtract with carry (long indexed) [$7E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $FFC3.w,X		; 7E C3 FF ; Rotate right $FFC3.w,X [Reads: X Index] [Flags: NCZ]
	sta $99FF.w,Y		; 99 FF 99 ; Store accumulator to $99FF.w,Y [Reads: Y Index, Accumulator]
	sbc $99FF99.l,X		; FF 99 FF 99 ; Subtract with carry (long,X) $99FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7EFFC3.l,X		; FF C3 FF 7E ; Subtract with carry (long,X) $7EFFC3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $FEFE.w,X		; 7E FE FE ; Rotate right $FEFE.w,X [Reads: X Index] [Flags: NCZ]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator]
	sta $99FF.w,Y		; 99 FF 99 ; Store accumulator to $99FF.w,Y [Reads: Y Index, Accumulator]
	sbc $9EFF83.l,X		; FF 83 FF 9E ; Subtract with carry (long,X) $9EFF83.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $F090.w,X		; FE 90 F0 ; Increment memory $F090.w,X [Reads: X Index] [Flags: NZ]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	ror $C37E.w,X		; 7E 7E C3 ; Rotate right $C37E.w,X [Reads: X Index] [Flags: NCZ]
	sbc $99FF99.l,X		; FF 99 FF 99 ; Subtract with carry (long,X) $99FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9BFF81.l,X		; FF 81 FF 9B ; Subtract with carry (long,X) $9BFF81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7FFFC1.l,X		; FF C1 FF 7F ; Subtract with carry (long,X) $7FFFC1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $83FEFE.l,X		; 7F FE FE 83 ; Add long $83FEFE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $99FF99.l,X		; FF 99 FF 99 ; Subtract with carry (long,X) $99FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $93FF83.l,X		; FF 83 FF 93 ; Subtract with carry (long,X) $93FF83.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFF99.l,X		; FF 99 FF FF ; Subtract with carry (long,X) $FFFF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C27E7E.l,X		; FF 7E 7E C2 ; Subtract with carry (long,X) $C27E7E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FE9E.w,X		; FE 9E FE ; Increment memory $FE9E.w,X [Reads: X Index] [Flags: NZ]
	cmp $FF.b,S		; C3 FF ; Compare accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sbc $99FF.w,Y		; F9 FF 99 ; Subtract with carry $99FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7EFFC3.l,X		; FF C3 FF 7E ; Subtract with carry (long,X) $7EFFC3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $FFFF.w,X		; 7E FF FF ; Rotate right $FFFF.w,X [Reads: X Index] [Flags: NCZ]
	sta ($FF.b,X)		; 81 FF ; Store accumulator ($FF.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FF3C.w,X		; 3C 3C FF ; Test bits $FF3C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $99FF99.l,X		; FF 99 FF 99 ; Subtract with carry (long,X) $99FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $99FF99.l,X		; FF 99 FF 99 ; Subtract with carry (long,X) $99FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C3FF99.l,X		; FF 99 FF C3 ; Subtract with carry (long,X) $C3FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF7E7E.l,X		; FF 7E 7E FF ; Subtract with carry (long,X) $FF7E7E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $99FF99.l,X		; FF 99 FF 99 ; Subtract with carry (long,X) $99FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DBFF99.l,X		; FF 99 FF DB ; Subtract with carry (long,X) $DBFF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $667E42.l,X		; FF 42 7E 66 ; Subtract with carry (long,X) $667E42.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $3C3C.w,X		; 7E 3C 3C ; Rotate right $3C3C.w,X [Reads: X Index] [Flags: NCZ]
	sbc $FF95FF.l,X		; FF FF 95 FF ; Subtract with carry (long,X) $FF95FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $FF.b,X		; 95 FF ; Store accumulator to $FF.b,X [Reads: Accumulator, X Index]
	sta $FF.b,X		; 95 FF ; Store accumulator to $FF.b,X [Reads: Accumulator, X Index]
	sta $FF.b,X		; 95 FF ; Store accumulator to $FF.b,X [Reads: Accumulator, X Index]
	sta ($FF.b,X)		; 81 FF ; Store accumulator ($FF.b,X) [Reads: Direct Page, Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc $003C3C.l,X		; FF 3C 3C 00 ; Subtract with carry (long,X) $003C3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $3400.w		; 1C 00 34 ; Test and reset bits $3400.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $08.b,X		; 34 08 ; Test bits $08.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	pea $2C08.w		; F4 08 2C ; Push absolute address $2C08.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $10, $68		; 10 68 ; Branch if plus to $10, $68 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	pea $7408.w		; F4 08 74 ; Push absolute address $7408.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jmp $0030.w		; 4C 30 00 ; Jump to $0030.w [Flow: jump]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	.db $30, $A8		; 30 A8 ; Branch if minus to $30, $A8 [Flow: branch]
	.db $50, $A8		; 50 A8 ; Branch if overflow clear to $50, $A8 [Flow: branch]
	.db $50, $A8		; 50 A8 ; Branch if overflow clear to $50, $A8 [Flow: branch]
	.db $50, $A8		; 50 A8 ; Branch if overflow clear to $50, $A8 [Flow: branch]
	.db $50, $00		; 50 00 ; Branch if overflow clear to $50, $00 [Flow: branch]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ldy $A040.w,X		; BC 40 A0 ; Load Y register $A040.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clv		; B8 ; Clear overflow flag [Flags: V]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sty $B470.w		; 8C 70 B4 ; Store Y register to $B470.w [Reads: Y Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $8C40.w,X		; BC 40 8C ; Load Y register $8C40.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $70, $B4		; 70 B4 ; Branch if overflow set to $70, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($8400.w,X)		; FC 00 84 ; Jump to subroutine indirect indexed ($8400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pea $1408.w		; F4 08 14 ; Push absolute address $1408.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $08.b,X		; 34 08 ; Test bits $08.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $2810.w		; 2C 10 28 ; Test bits $2810.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $0030.w		; CC 30 00 ; Compare $0030.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $B4		; 30 B4 ; Branch if minus to $30, $B4 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $8BFF.w,X		; 9D FF 8B ; Store accumulator to $8BFF.w,X [Reads: Accumulator, X Index]
	sbc $63FEC6.l,X		; FF C6 FE 63 ; Subtract with carry (long,X) $63FEC6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $B9FFD1.l,X		; 7F D1 FF B9 ; Add long $B9FFD1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFEFEF.l,X		; FF EF EF FF ; Subtract with carry (long,X) $FFEFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $99FF99.l,X		; FF 99 FF 99 ; Subtract with carry (long,X) $99FF99.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $66FFC3.l,X		; FF C3 FF 66 ; Subtract with carry (long,X) $66FFC3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $3C24.w,X		; 7E 24 3C ; Rotate right $3C24.w,X [Reads: X Index] [Flags: NCZ]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FF3C.w,X		; 3C 3C FF ; Test bits $FF3C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $F1FF81.l,X		; FF 81 FF F1 ; Subtract with carry (long,X) $F1FF81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C67F63.l,X		; FF 63 7F C6 ; Subtract with carry (long,X) $C67F63.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FF8F.w,X		; FE 8F FF ; Increment memory $FF8F.w,X [Reads: X Index] [Flags: NZ]
	sta ($FF.b,X)		; 81 FF ; Store accumulator ($FF.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF81FF.l,X		; FF FF 81 FF ; Subtract with carry (long,X) $FF81FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $0000.w		; 1C 00 00 ; Test and reset bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $20D0.w		; 20 D0 20 ; Jump to subroutine at $20D0.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	ldy $8440.w,X		; BC 40 84 ; Load Y register $8440.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pea $B408.w		; F4 08 B4 ; Push absolute address $B408.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $84		; 50 84 ; Branch if overflow clear to $50, $84 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpx $2810.w		; EC 10 28 ; Compare $2810.w with X register [Reads: X Index] [Flags: NCZ]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	pea $B408.w		; F4 08 B4 ; Push absolute address $B408.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $58		; 10 58 ; Branch if plus to $10, $58 [Flow: branch]
	jsr $2050.w		; 20 50 20 ; Jump to subroutine at $2050.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	pea $B408.w		; F4 08 B4 ; Push absolute address $B408.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cpy $7830.w		; CC 30 78 ; Compare $7830.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $6E.b		; 02 6E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $026C01.l		; 6F 01 6C 02 ; Add with carry (long) $026C01.l [Writes: Accumulator] [Flags: NCVZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($6E.b,X)		; 01 6E ; Logical OR ($6E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $026C01.l		; 6F 01 6C 02 ; Add with carry (long) $026C01.l [Writes: Accumulator] [Flags: NCVZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000000.l		; 22 00 00 00 ; Jump to subroutine long $000000.l [Writes: Stack Pointer] [Flow: call]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000000.l		; 22 00 00 00 ; Jump to subroutine long $000000.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000000.l		; 22 00 00 00 ; Jump to subroutine long $000000.l [Writes: Stack Pointer] [Flow: call]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $000000.l		; 0F 00 00 00 ; OR accumulator with memory (long) $000000.l [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $0E0E.w		; 0E 0E 0E ; Arithmetic shift left $0E0E.w [Flags: NCZ]
	asl $0000.w		; 0E 00 00 ; Arithmetic shift left $0000.w [Flags: NCZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000000.l		; 22 00 00 00 ; Jump to subroutine long $000000.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0D.b		; 02 0D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0202.w		; 0D 02 02 ; Logical OR $0202.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $020D.w		; 0D 0D 02 ; Logical OR $020D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy $B1.b,X		; B4 B1 ; Load Y register $B1.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($B5.b,S),Y		; B3 B5 ; Load accumulator (stack relative indirect indexed) ($B5.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $B6		; B0 B6 ; Branch if carry set to $B0, $B6 [Flow: branch]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000000.l		; 22 00 00 00 ; Jump to subroutine long $000000.l [Writes: Stack Pointer] [Flow: call]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($B2.b),Y		; B1 B2 ; Load accumulator ($B2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B4.b,S),Y		; B3 B4 ; Load accumulator (stack relative indirect indexed) ($B4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $B1.b,X		; B5 B1 ; Load $B1.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldx $0202.w,Y		; BE 02 02 ; Load X register $0202.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B7.b		; 02 B7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $B0, $B2		; B0 B2 ; Branch if carry set to $B0, $B2 [Flow: branch]
	lda ($B4.b,S),Y		; B3 B4 ; Load accumulator (stack relative indirect indexed) ($B4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $02.b,X		; B5 02 ; Load $02.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($BE.b),Y		; B1 BE ; Load accumulator ($BE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $02BA.w,Y		; B9 BA 02 ; Load $02BA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $B1.b		; 02 B1 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $0202.w,X		; BC 02 02 ; Load Y register $0202.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000000.l		; 22 00 00 00 ; Jump to subroutine long $000000.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($6B.b,X)		; 01 6B ; Logical OR ($6B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $0E0E.w		; 0E 0E 0E ; Arithmetic shift left $0E0E.w [Flags: NCZ]
	asl $6968.w		; 0E 68 69 ; Arithmetic shift left $6968.w [Flags: NCZ]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0AA2.w		; AD A2 0A ; Load $0AA2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9000.w,X		; BD 00 90 ; Load $9000.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $902A.w,Y		; B9 2A 90 ; Load $902A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EFF40.l,X		; 9F 40 FF 7E ; Store accumulator (long,X) $7EFF40.l,X [Reads: Accumulator, X Index]
	lda $906A.w,Y		; B9 6A 90 ; Load $906A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EFF80.l,X		; 9F 80 FF 7E ; Store accumulator (long,X) $7EFF80.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0040.w		; E0 40 00 ; Compare #$0040.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $E9		; D0 E9 ; Branch if not equal to $D0, $E9 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $0201.w		; 20 01 02 ; Jump to subroutine at $0201.w [Writes: Stack Pointer] [Flow: call]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $0202.w		; 20 02 02 ; Jump to subroutine at $0202.w [Writes: Stack Pointer] [Flow: call]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rol $2B2A.w		; 2E 2A 2B ; Rotate left $2B2A.w [Flags: NCZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $2D02.w		; 2C 02 2D ; Test bits $2D02.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and #$2F.b		; 29 2F ; Logical AND #$2F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $2E.b		; 02 2E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $4E00.w		; 2C 00 4E ; Test bits $4E00.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor $010101.l		; 4F 01 01 01 ; Exclusive OR accumulator with memory (long) $010101.l [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020101.l		; 22 01 01 02 ; Jump to subroutine long $020101.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $10, $1A		; 10 1A ; Branch if plus to $10, $1A [Flow: branch]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($2B.b,X)		; 01 2B ; Logical OR ($2B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $01.b		; 46 01 ; Logical shift right $01.b [Reads: Direct Page] [Flags: NCZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $42.b		; 02 42 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $29.b		; 02 29 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000000.l		; 22 00 00 00 ; Jump to subroutine long $000000.l [Writes: Stack Pointer] [Flow: call]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $29.b		; 02 29 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $000000.l		; 22 00 00 00 ; Jump to subroutine long $000000.l [Writes: Stack Pointer] [Flow: call]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $01,$01		; 44 01 01 ; Move block positive $01,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $44.b		; 02 44 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $02		; 50 02 ; Branch if overflow clear to $50, $02 [Flow: branch]
	mvn $57,$51		; 54 51 57 ; Move block negative $57,$51 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor [$56.b],Y		; 57 56 ; Exclusive OR accumulator with memory (long indexed) [$56.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $27.b,X		; 56 27 ; Logical shift right $27.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $50, $02		; 50 02 ; Branch if overflow clear to $50, $02 [Flow: branch]
	mvn $57,$51		; 54 51 57 ; Move block negative $57,$51 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr $56.b,X		; 56 56 ; Logical shift right $56.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor [$48.b],Y		; 57 48 ; Exclusive OR accumulator with memory (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($53.b)		; 52 53 ; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $52.b		; 02 52 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($09.b,S),Y		; 53 09 ; XOR accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($1A.b,X)		; 01 1A ; Logical OR ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $10, $55		; 10 55 ; Branch if plus to $10, $55 [Flow: branch]
	eor $00.b,X		; 55 00 ; Exclusive OR accumulator with memory $00.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $18.b		; 02 18 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$48.b		; 09 48 ; Logical OR #$48.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$29.b		; 09 29 ; Logical OR #$29.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	trb $2801.w		; 1C 01 28 ; Test and reset bits $2801.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora ($0A.b,X)		; 01 0A ; Logical OR ($0A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $0202.w		; 0C 02 02 ; Test and set bits $0202.w [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0200.w		; 20 00 02 ; Jump to subroutine at $0200.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $00, $00		; 62 00 00 ; Push effective relative address $62, $00, $00 [Writes: Stack Pointer]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $62, $27		; 62 62 27 ; Push effective relative address $62, $62, $27 [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $0202.w		; 20 02 02 ; Jump to subroutine at $0202.w [Writes: Stack Pointer] [Flow: call]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$20.b]		; 27 20 ; AND accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $54.b		; 02 54 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $54.b		; 02 54 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0000.w		; 0D 00 00 ; Logical OR $0000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	adc [$67.b]		; 67 67 ; Add with carry (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc [$67.b]		; 67 67 ; Add with carry (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: NCZ]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	and [$63.b]		; 27 63 ; AND accumulator with memory (long) [$63.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$55.b]		; 27 55 ; AND accumulator with memory (long) [$55.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $01.b,X		; 55 01 ; Exclusive OR accumulator with memory $01.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	mvp $01,$00		; 44 00 01 ; Move block positive $01,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jsr $0202.w		; 20 02 02 ; Jump to subroutine at $0202.w [Writes: Stack Pointer] [Flow: call]
	trb $3B3A.w		; 1C 3A 3B ; Test and reset bits $3B3A.w [Reads: Accumulator] [Flags: Z]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $27.b,S		; 63 27 ; Add with carry (stack relative) $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor ($53.b,S),Y		; 53 53 ; XOR accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$C2.b		; 09 C2 ; Logical OR #$C2.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $3EA2.w		; 20 A2 3E ; Jump to subroutine at $3EA2.w [Writes: Stack Pointer] [Flow: call]
	lda $0E9659.l,X		; BF 59 96 0E ; Load long $0E9659.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EFE00.l,X		; 9F 00 FE 7E ; Store accumulator (long,X) $7EFE00.l,X [Reads: Accumulator, X Index]
	lda $0E9699.l,X		; BF 99 96 0E ; Load long $0E9699.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EFE40.l,X		; 9F 40 FE 7E ; Store accumulator (long,X) $7EFE40.l,X [Reads: Accumulator, X Index]
	lda $0E96D9.l,X		; BF D9 96 0E ; Load long $0E96D9.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EFE80.l,X		; 9F 80 FE 7E ; Store accumulator (long,X) $7EFE80.l,X [Reads: Accumulator, X Index]
	lda $0E9719.l,X		; BF 19 97 0E ; Load long $0E9719.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EFEC0.l,X		; 9F C0 FE 7E ; Store accumulator (long,X) $7EFEC0.l,X [Reads: Accumulator, X Index]
	lda $0E9759.l,X		; BF 59 97 0E ; Load long $0E9759.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EFF00.l,X		; 9F 00 FF 7E ; Store accumulator (long,X) $7EFF00.l,X [Reads: Accumulator, X Index]
	lda $0E9799.l,X		; BF 99 97 0E ; Load long $0E9799.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EFFC0.l,X		; 9F C0 FF 7E ; Store accumulator (long,X) $7EFFC0.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $CC		; 10 CC ; Branch if plus to $10, $CC [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit #$98.b		; 89 98 ; Test bits #$98.b with accumulator [Reads: Accumulator] [Flags: Z]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $9891.w,Y		; 99 91 98 ; Store accumulator to $9891.w,Y [Reads: Y Index, Accumulator]
	cmp $99.b		; C5 99 ; Compare $99.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	bit #$98.b		; 89 98 ; Test bits #$98.b with accumulator [Reads: Accumulator] [Flags: Z]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $9889.w,Y		; 99 89 98 ; Store accumulator to $9889.w,Y [Reads: Y Index, Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $9889.w,Y		; 99 89 98 ; Store accumulator to $9889.w,Y [Reads: Y Index, Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $9889.w,Y		; 99 89 98 ; Store accumulator to $9889.w,Y [Reads: Y Index, Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $9889.w,Y		; 99 89 98 ; Store accumulator to $9889.w,Y [Reads: Y Index, Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $9889.w,Y		; 99 89 98 ; Store accumulator to $9889.w,Y [Reads: Y Index, Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $9889.w,Y		; 99 89 98 ; Store accumulator to $9889.w,Y [Reads: Y Index, Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $9889.w,Y		; 99 89 98 ; Store accumulator to $9889.w,Y [Reads: Y Index, Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $9891.w,Y		; 99 91 98 ; Store accumulator to $9891.w,Y [Reads: Y Index, Accumulator]
	cmp $99.b		; C5 99 ; Compare $99.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta ($98.b),Y		; 91 98 ; Store accumulator ($98.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cmp $99.b		; C5 99 ; Compare $99.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	bit #$98.b		; 89 98 ; Test bits #$98.b with accumulator [Reads: Accumulator] [Flags: Z]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $9889.w,Y		; 99 89 98 ; Store accumulator to $9889.w,Y [Reads: Y Index, Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $9889.w,Y		; 99 89 98 ; Store accumulator to $9889.w,Y [Reads: Y Index, Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $9889.w,Y		; 99 89 98 ; Store accumulator to $9889.w,Y [Reads: Y Index, Accumulator]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta $BC6D.w,Y		; 99 6D BC ; Store accumulator to $BC6D.w,Y [Reads: Y Index, Accumulator]
	jmp ($8BC3.w,X)		; 7C C3 8B ; Jump indirect indexed to ($8BC3.w,X) [Reads: X Index] [Flow: jump]
	lda $C391.w,X		; BD 91 C3 ; Load $C391.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cmp $D5.b,S		; C3 D5 ; Compare accumulator (stack relative) $D5.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp $1A.b,S		; C3 1A ; Compare accumulator (stack relative) $1A.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cpy $C2.b		; C4 C2 ; Compare $C2.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	jsr $30A9.w		; 20 A9 30 ; Jump to subroutine at $30A9.w [Writes: Stack Pointer] [Flow: call]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($8D.b,X)		; 01 8D ; Logical OR ($8D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sep #$0F		; E2 0F ; Set processor status bits #$0F [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	stz $0FE4.w		; 9C E4 0F ; Store zero to $0FE4.w
.ACCU 8
	sep #$20		; E2 20
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($9820.w,X)		; FC 20 98 ; Jump to subroutine indirect indexed ($9820.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0285BA.l		; 22 BA 85 02 ; Jump to subroutine long $0285BA.l [Writes: Stack Pointer] [Flow: call]
	jsr $C303.w		; 20 03 C3 ; Jump to subroutine at $C303.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0286FD.l		; 22 FD 86 02 ; Jump to subroutine long $0286FD.l [Writes: Stack Pointer] [Flow: call]
	jsr $C303.w		; 20 03 C3 ; Jump to subroutine at $C303.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $849C.w,X		; FE 9C 84 ; Increment memory $849C.w,X [Reads: X Index] [Flags: NZ]
	sta $9C27.w,X		; 9D 27 9C ; Store accumulator to $9C27.w,X [Reads: Accumulator, X Index]
	and $9CFE9C.l		; [PATTERN: Memory clearing operation] 2F 9C FE 9C ; AND accumulator with memory (long) $9CFE9C.l [Writes: Accumulator] [Flags: NZ]
	inc $1A9C.w,X		; FE 9C 1A ; Increment memory $1A9C.w,X [Reads: X Index] [Flags: NZ]
	stz $9CCA.w		; 9C CA 9C ; Store zero to $9CCA.w
	inc $5B9C.w,X		; FE 9C 5B ; Increment memory $5B9C.w,X [Reads: X Index] [Flags: NZ]
	stz $9D5C.w		; 9C 5C 9D ; Store zero to $9D5C.w
	.db $70, $9D		; 70 9D ; Branch if overflow set to $70, $9D [Flow: branch]
	cmp ($9C.b),Y		; D1 9C ; Compare accumulator ($9C.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	inc $929C.w,X		; FE 9C 92 ; Increment memory $929C.w,X [Reads: X Index] [Flags: NZ]
	stz $9CB4.w		; 9C B4 9C ; Store zero to $9CB4.w
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx #$0F.b		; [PATTERN: Memory clearing operation] A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: NZ]
	jsl $0DB871.l		; 22 71 B8 0D ; Jump to subroutine long $0DB871.l [Writes: Stack Pointer] [Flow: call]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	stz $0BE0.w,X		; 9E E0 0B ; Store zero to $0BE0.w,X [Reads: X Index]
	stz $0CAA.w,X		; 9E AA 0C ; Store zero to $0CAA.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($9899.w,X)		; FC 99 98 ; Jump to subroutine indirect indexed ($9899.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc ($06.b)		; F2 06 ; Subtract with carry (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	bit $0007.w		; 2C 07 00 ; Test bits $0007.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	tsb $010C.w		; 0C 0C 01 ; Test and set bits $010C.w [Reads: Accumulator] [Flags: Z]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	bit #$00.b		; 89 00 ; Test bits #$00.b with accumulator [Reads: Accumulator] [Flags: Z]
	stx $2C0A.w		; 8E 0A 2C ; Store X register to $2C0A.w [Reads: X Index]
	jsl $262510.l		; 22 10 25 26 ; Jump to subroutine long $262510.l [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jmp $020A00.l		; 5C 00 0A 02 ; Jump long to $020A00.l [Flow: jump]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	adc $048007.l,X		; 7F 07 80 04 ; Add long $048007.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($01.b,S),Y		; 93 01 ; Store accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor [$08.b]		; 47 08 ; Exclusive OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $5704.w,X		; FD 04 57 ; Subtract with carry $5704.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $040F.w		; 0C 0F 04 ; Test and set bits $040F.w [Reads: Accumulator] [Flags: Z]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($0A.b,X)		; A1 0A ; Load accumulator ($0A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $000002.l		; 6F 02 00 00 ; Add with carry (long) $000002.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $0001FF.l,X		; FF FF 01 00 ; Subtract with carry (long,X) $0001FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0001FF.l,X		; FF FF 01 00 ; Subtract with carry (long,X) $0001FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $0001FF.l,X		; FF FF 01 00 ; Subtract with carry (long,X) $0001FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: NZ]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0DF0.w,X		; DE F0 0D ; Decrement memory $0DF0.w,X [Reads: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	lda $11.b		; [PATTERN: Memory clearing operation] A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $30.b		; 64 30 ; Store zero to $30.b
	stz $31.b		; 64 31 ; Store zero to $31.b
.ACCU 16
	rep #$20		; C2 20
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $1D		; 90 1D ; Branch if carry clear to $90, $1D [Flow: branch]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $98D8.w,X		; DD D8 98 ; Compare accumulator $98D8.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	ldy $9918.w,X		; BC 18 99 ; Load Y register $9918.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sty $30.b		; 84 30 ; Store Y register to $30.b [Reads: Y Index]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $98F8.w,X		; DD F8 98 ; Compare accumulator $98F8.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	ldy $9938.w,X		; BC 38 99 ; Load Y register $9938.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sty $31.b		; 84 31 ; Store Y register to $31.b [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0286B3.l		; 22 B3 86 02 ; Jump to subroutine long $0286B3.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsr ($99A5.w,X)		; FC A5 99 ; Jump to subroutine indirect indexed ($99A5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jmp $9A2A.w		; 4C 2A 9A ; Jump to $9A2A.w [Flow: jump]
	stz $AD9E.w		; 9C 9E AD ; Store zero to $AD9E.w
	lda #$E2.b		; A9 E2 ; Load #$E2.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$41.b		; A0 41 ; Load #$41.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$53.b		; A9 53 ; Load #$53.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4CA27C.l,X		; 9F 7C A2 4C ; Store accumulator (long,X) $4CA27C.l,X [Reads: Accumulator, X Index]
	lda [$D3.b]		; A7 D3 ; Load accumulator (long) [$D3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$93.b		; A9 93 ; Load #$93.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $91.b,S		; A3 91 ; Load accumulator (stack relative) $91.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cmp [$A3.b]		; C7 A3 ; Compare accumulator (long) [$A3.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cop $A8.b		; 02 A8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $A358A5.l		; 4F A5 58 A3 ; Exclusive OR accumulator with memory (long) $A358A5.l [Writes: Accumulator] [Flags: NZ]
	sbc $AB.b,X		; F5 AB ; Subtract $AB.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $4B8BAD.l		; 22 AD 8B 4B ; Jump to subroutine long $4B8BAD.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: NZ]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0DF0.w,X		; DE F0 0D ; Decrement memory $0DF0.w,X [Reads: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0040.w		; C9 40 00 ; Compare #$0040.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $1F		; 90 1F ; Branch if carry clear to $90, $1F [Flow: branch]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $98D8.w,X		; DD D8 98 ; Compare accumulator $98D8.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9918.w,X		; 7D 18 99 ; Add $9918.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $98F8.w,X		; DD F8 98 ; Compare accumulator $98F8.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $9938.w,X		; 7D 38 99 ; Add $9938.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr ($99A5.w,X)		; FC A5 99 ; Jump to subroutine indirect indexed ($99A5.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jmp $9A2A.w		; 4C 2A 9A ; Jump to $9A2A.w [Flow: jump]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	.db $50, $02		; 50 02 ; Branch if overflow clear to $50, $02 [Flow: branch]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	.db $50, $02		; 50 02 ; Branch if overflow clear to $50, $02 [Flow: branch]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $50, $02		; 50 02 ; Branch if overflow clear to $50, $02 [Flow: branch]
	.db $50, $02		; 50 02 ; Branch if overflow clear to $50, $02 [Flow: branch]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	.db $50, $02		; 50 02 ; Branch if overflow clear to $50, $02 [Flow: branch]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $02		; 50 02 ; Branch if overflow clear to $50, $02 [Flow: branch]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $9A0A.w,X		; DD 0A 9A ; Compare accumulator $9A0A.w,X [Reads: X Index] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	dec $13.b		; C6 13 ; Decrement $13.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $13.b		; A5 13 ; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inc $13.b		; E6 13 ; Increment $13.b [Reads: Direct Page] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	inc $C8.b		; E6 C8 ; Increment $C8.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
.ACCU 16
	rep #$20		; C2 20
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0301.w		; ED 01 03 ; Subtract $0301.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cop $DA.b		; 02 DA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($16.b,X)		; 01 16 ; Logical OR ($16.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $C8.b		; 02 C8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $C0.b		; 02 C0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $28.b		; 02 28 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $58.b		; 02 58 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($58.b,X)		; 01 58 ; Logical OR ($58.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($50.b,X)		; 01 50 ; Logical OR ($50.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($50.b,X)		; 01 50 ; Logical OR ($50.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $98.b		; 02 98 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $88.b		; 02 88 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E2.b		; 02 E2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C2.b,X)		; 01 C2 ; Logical OR ($C2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($6C.b,X)		; 01 6C ; Logical OR ($6C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($6B.b,X)		; 01 6B ; Logical OR ($6B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($B8.b,X)		; 01 B8 ; Logical OR ($B8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($35.b,X)		; 01 35 ; Logical OR ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $35.b,S		; 03 35 ; OR accumulator with stack relative $35.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $28.b,S		; 03 28 ; OR accumulator with stack relative $28.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($6F.b,X)		; 01 6F ; Logical OR ($6F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($B8.b,X)		; 01 B8 ; Logical OR ($B8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D8.b,X)		; 01 D8 ; Logical OR ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $58.b		; 02 58 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $D8.b		; 02 D8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $50.b		; 02 50 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B0.b		; 02 B0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B0.b		; 02 B0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B0.b		; 02 B0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B0.b		; 02 B0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B8.b		; 02 B8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B0.b		; 02 B0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $90.b,S		; 03 90 ; OR accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $D0.b,S		; 03 D0 ; OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $40.b,S		; 03 40 ; OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($6C.b,X)		; 01 6C ; Logical OR ($6C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($74.b,X)		; 01 74 ; Logical OR ($74.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($74.b,X)		; 01 74 ; Logical OR ($74.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($75.b,X)		; 01 75 ; Logical OR ($75.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($75.b,X)		; 01 75 ; Logical OR ($75.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E8.b,X)		; 01 E8 ; Logical OR ($E8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($46.b,X)		; 01 46 ; Logical OR ($46.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($C6.b,X)		; 01 C6 ; Logical OR ($C6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($58.b,X)		; 01 58 ; Logical OR ($58.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D8.b,X)		; 01 D8 ; Logical OR ($D8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $70.b		; 02 70 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $70.b		; 02 70 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A4.b		; 02 A4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $4B.b		; 02 4B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B0.b		; 02 B0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($B0.b,X)		; 01 B0 ; Logical OR ($B0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $76.b		; 02 76 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($76.b,X)		; 01 76 ; Logical OR ($76.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldx $9A.b		; A6 9A ; Load $9A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	rol $C29B.w,X		; 3E 9B C2 ; Rotate left $C29B.w,X [Reads: X Index] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	dec $1A9A.w		; CE 9A 1A ; Decrement $1A9A.w [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $62, $9B, $E2		; 62 9B E2 ; Push effective relative address $62, $9B, $E2 [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	inc $9A.b		; E6 9A ; Increment $9A.b [Reads: Direct Page] [Flags: NZ]
	rol $9B.b		; 26 9B ; Rotate left $9B.b [Reads: Direct Page] [Flags: NCZ]
	inc $DE9A.w,X		; FE 9A DE ; Increment memory $DE9A.w,X [Reads: X Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	stx $9B.b,Y		; 96 9B ; Store X register $9B.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	lda ($9B.b)		; B2 9B ; Load accumulator (indirect) ($9B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $5E9A.w		; 8E 9A 5E ; Store X register to $5E9A.w [Reads: X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy $9A.b,X		; B4 9A ; Load Y register $9A.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	jmp $C89B.w		; 4C 9B C8 ; Jump to $C89B.w [Flow: jump]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	dec $9A.b,X		; D6 9A ; Decrement memory $9A.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	jsr $669B.w		; 20 9B 66 ; Jump to subroutine at $669B.w [Writes: Stack Pointer] [Flow: call]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cpx $9A.b		; E4 9A ; Compare $9A.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $80, $9B		; 80 9B ; Branch always to $80, $9B [Flow: branch]
	sbc ($9A.b)		; F2 9A ; Subtract with carry (indirect) ($9A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and ($9B.b)		; 32 9B ; AND accumulator with memory (indirect) ($9B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $E09B.w		; 0C 9B E0 ; Test and set bits $E09B.w [Reads: Accumulator] [Flags: Z]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ldy $9B.b		; A4 9B ; Load $9B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx $0B9B.w,Y		; BE 9B 0B ; Load X register $0B9B.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: NCZ]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w		; 8D F0 0D ; Store accumulator to $0DF0.w [Reads: Accumulator]
	sta $0DF1.w		; 8D F1 0D ; Store accumulator to $0DF1.w [Reads: Accumulator]
	sta $0DF2.w		; 8D F2 0D ; Store accumulator to $0DF2.w [Reads: Accumulator]
	.db $80, $2D		; 80 2D ; Branch always to $80, $2D [Flow: branch]
	lda $AE62.w		; AD 62 AE ; Load $AE62.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D46.w		; 8D 46 0D ; Store accumulator to $0D46.w [Reads: Accumulator]
	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D95.w		; 8D 95 0D ; Store accumulator to $0D95.w [Reads: Accumulator]
	lda $AE62.w		; AD 62 AE ; Load $AE62.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D40.w		; 8D 40 0D ; Store accumulator to $0D40.w [Reads: Accumulator]
	lda $AE61.w		; AD 61 AE ; Load $AE61.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D41.w		; 8D 41 0D ; Store accumulator to $0D41.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0EB1.w		; 8D B1 0E ; Store accumulator to $0EB1.w [Reads: Accumulator]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$57.b		; A9 57 ; Load #$57.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E22.w,Y		; 99 22 0E ; Store accumulator to $0E22.w,Y [Reads: Y Index, Accumulator]
	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F52.w,Y		; 99 52 0F ; Store accumulator to $0F52.w,Y [Reads: Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
	.db $80, $3A		; 80 3A ; Branch always to $80, $3A [Flow: branch]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $39.b		; 26 39 ; Rotate left $39.b [Reads: Direct Page] [Flags: NCZ]
	jmp $04A0.w		; 4C A0 04 ; Jump to $04A0.w [Flow: jump]
	lda $9C56.w,Y		; B9 56 9C ; Load $9C56.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,Y		; 99 F0 0D ; Store accumulator to $0DF0.w,Y [Reads: Y Index, Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DD0.w,Y		; 99 D0 0D ; Store accumulator to $0DD0.w,Y [Reads: Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F2		; 10 F2 ; Branch if plus to $10, $F2 [Flow: branch]
	lda #$2E.b		; A9 2E ; Load #$2E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E25.w		; 8D 25 0E ; Store accumulator to $0E25.w [Reads: Accumulator]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$9F.b		; A9 9F ; Load #$9F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E27.w,Y		; 99 27 0E ; Store accumulator to $0E27.w,Y [Reads: Y Index, Accumulator]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E29.w,Y		; 99 29 0E ; Store accumulator to $0E29.w,Y [Reads: Y Index, Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E47.w,Y		; 99 47 0E ; Store accumulator to $0E47.w,Y [Reads: Y Index, Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0E49.w,Y		; 99 49 0E ; Store accumulator to $0E49.w,Y [Reads: Y Index, Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E67.w,Y		; 99 67 0E ; Store accumulator to $0E67.w,Y [Reads: Y Index, Accumulator]
	sta $0E69.w,Y		; 99 69 0E ; Store accumulator to $0E69.w,Y [Reads: Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $E2		; 10 E2 ; Branch if plus to $10, $E2 [Flow: branch]
	.db $80, $6C		; 80 6C ; Branch always to $80, $6C [Flow: branch]
	lda $AE62.w		; AD 62 AE ; Load $AE62.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D45.w		; 8D 45 0D ; Store accumulator to $0D45.w [Reads: Accumulator]
	lda $AE61.w		; AD 61 AE ; Load $AE61.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D46.w		; 8D 46 0D ; Store accumulator to $0D46.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0EB6.w		; 8D B6 0E ; Store accumulator to $0EB6.w [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D90.w		; 8D 90 0D ; Store accumulator to $0D90.w [Reads: Accumulator]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D41.w,Y		; 99 41 0D ; Store accumulator to $0D41.w,Y [Reads: Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	.db $80, $4A		; 80 4A ; Branch always to $80, $4A [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DB4.w		; 8D B4 0D ; Store accumulator to $0DB4.w [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D45.w		; 8D 45 0D ; Store accumulator to $0D45.w [Reads: Accumulator]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF1.w		; 8D F1 0D ; Store accumulator to $0DF1.w [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF4.w		; 8D F4 0D ; Store accumulator to $0DF4.w [Reads: Accumulator]
	.db $80, $34		; 80 34 ; Branch always to $80, $34 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF1.w		; 8D F1 0D ; Store accumulator to $0DF1.w [Reads: Accumulator]
	.db $80, $2D		; 80 2D ; Branch always to $80, $2D [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$39.b		; A9 39 ; Load #$39.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F53.w,Y		; 99 53 0F ; Store accumulator to $0F53.w,Y [Reads: Y Index, Accumulator]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E23.w,Y		; 99 23 0E ; Store accumulator to $0E23.w,Y [Reads: Y Index, Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E63.w,Y		; 99 63 0E ; Store accumulator to $0E63.w,Y [Reads: Y Index, Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E43.w,Y		; 99 43 0E ; Store accumulator to $0E43.w,Y [Reads: Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $E9		; 10 E9 ; Branch if plus to $10, $E9 [Flow: branch]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E25.w		; 8D 25 0E ; Store accumulator to $0E25.w [Reads: Accumulator]
	lda #$79.b		; A9 79 ; Load #$79.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E26.w		; 8D 26 0E ; Store accumulator to $0E26.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D86.w		; 8D 86 0D ; Store accumulator to $0D86.w [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F76.w		; 8D 76 0F ; Store accumulator to $0F76.w [Reads: Accumulator]
	lda $9BCA.w,X		; BD CA 9B ; Load $9BCA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $9BCB.w,X		; BD CB 9B ; Load $9BCB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $9BEA.w,X		; BD EA 9B ; Load $9BEA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $9BEB.w,X		; BD EB 9B ; Load $9BEB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9C0A.w,X		; BD 0A 9C ; Load $9C0A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0FBA.w		; 8D BA 0F ; Store accumulator to $0FBA.w [Reads: Accumulator]
	sta $0FB8.w		; 8D B8 0F ; Store accumulator to $0FB8.w [Reads: Accumulator]
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$0F00.w		; 29 00 0F ; Logical AND #$0F00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($04.b),Y		; 71 04 ; Add with carry ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$0E00.w		; 29 00 0E ; Logical AND #$0E00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($06.b),Y		; 71 06 ; Add with carry ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $BE		; 10 BE ; Branch if plus to $10, $BE [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF1.w		; 8D F1 0D ; Store accumulator to $0DF1.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF2.w		; 8D F2 0D ; Store accumulator to $0DF2.w [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F53.w		; 8D 53 0F ; Store accumulator to $0F53.w [Reads: Accumulator]
	sta $0F54.w		; 8D 54 0F ; Store accumulator to $0F54.w [Reads: Accumulator]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda #$79.b		; A9 79 ; Load #$79.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F54.w		; 8D 54 0F ; Store accumulator to $0F54.w [Reads: Accumulator]
	lda #$39.b		; A9 39 ; Load #$39.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F55.w		; 8D 55 0F ; Store accumulator to $0F55.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DE1.w		; 8D E1 0D ; Store accumulator to $0DE1.w [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D91.w		; 8D 91 0D ; Store accumulator to $0D91.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0FB1.w		; 8D B1 0F ; Store accumulator to $0FB1.w [Reads: Accumulator]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0FB0.w		; 8D B0 0F ; Store accumulator to $0FB0.w [Reads: Accumulator]
	lda $9BCA.w,X		; BD CA 9B ; Load $9BCA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $9BCB.w,X		; BD CB 9B ; Load $9BCB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $9BEA.w,X		; BD EA 9B ; Load $9BEA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $9BEB.w,X		; BD EB 9B ; Load $9BEB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9C0A.w,X		; BD 0A 9C ; Load $9C0A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0FB1.w		; AD B1 0F ; Load $0FB1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($06.b),Y		; 71 06 ; Add with carry ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0FB0.w		; AD B0 0F ; Load $0FB0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($04.b),Y		; 71 04 ; Add with carry ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $C8		; 10 C8 ; Branch if plus to $10, $C8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $11FF.w,X		; FD FF 11 ; Subtract with carry $11FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $3B0019.l,X		; FF 19 00 3B ; Subtract with carry (long,X) $3B0019.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rol $0000.w		; 2E 00 00 ; Rotate left $0000.w [Flags: NCZ]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	asl $48.b		; 06 48 ; Arithmetic shift left $48.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	jmp ($0001.w)		; 6C 01 00 ; Jump indirect to ($0001.w) [Flow: jump]
	cop $1E.b		; 02 1E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2222.w		; 20 22 22 ; Jump to subroutine at $2222.w [Writes: Stack Pointer] [Flow: call]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: NCZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($3D.b),Y		; 31 3D ; AND accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $373B39.l,X		; 3F 39 3B 37 ; AND accumulator with memory (long,X) $373B39.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $3739.w,X		; 3D 39 37 ; AND accumulator with memory $3739.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$39.b],Y		; 37 39 ; AND accumulator with memory (long indexed) [$39.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$0B.b		; A2 0B ; Load #$0B.b into X register [Writes: X Index] [Flags: NZ]
	lda $9E90.w,X		; BD 90 9E ; Load $9E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $9E84.w,X		; BD 84 9E ; Load $9E84.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $9E78.w,X		; BC 78 9E ; Load Y register $9E78.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $EC		; D0 EC ; Branch if not equal to $D0, $EC [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $9E90.w,X		; 1D 90 9E ; OR accumulator with memory $9E90.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $9E84.w,X		; BD 84 9E ; Load $9E84.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $9E78.w,X		; BC 78 9E ; Load Y register $9E78.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $E6		; D0 E6 ; Branch if not equal to $D0, $E6 [Flow: branch]
	lda $9E90.w,X		; BD 90 9E ; Load $9E90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $9E84.w,X		; BD 84 9E ; Load $9E84.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $9E78.w,X		; BC 78 9E ; Load Y register $9E78.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $EE		; 10 EE ; Branch if plus to $10, $EE [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	jmp $0008.w		; 4C 08 00 ; Jump to $0008.w [Flow: jump]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $0008.w		; 4C 08 00 ; Jump to $0008.w [Flow: jump]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4AFF.w,Y		; F9 FF 4A ; Subtract with carry $4AFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4AFF.w,Y		; F9 FF 4A ; Subtract with carry $4AFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $32		; 30 32 ; Branch if minus to $30, $32 [Flow: branch]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $F4F0.w		; F4 F0 F4 ; Push absolute address $F4F0.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	ora $2B2C.w,X		; 1D 2C 2B ; OR accumulator with memory $2B2C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $20		; 42 20 ; Reserved instruction
	and [$28.b]		; 27 28 ; AND accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $3A38.w		; 2E 38 3A ; Rotate left $3A38.w [Flags: NCZ]
	jmp $4432.w		; 4C 32 44 ; Jump to $4432.w [Flow: jump]
	rol $1E2F.w		; 2E 2F 1E ; Rotate left $1E2F.w [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	eor [$35.b]		; 47 35 ; Exclusive OR accumulator with memory (long) [$35.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($30.b)		; 32 30 ; AND accumulator with memory (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda #$35.b		; A9 35 ; Load #$35.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$3C.b		; A0 3C ; Load #$3C.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$71.b		; 49 71 ; Exclusive OR #$71.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $9F2D.w,Y		; D9 2D 9F ; Compare accumulator $9F2D.w,Y [Reads: Y Index] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $24		; 90 24 ; Branch if carry clear to $90, $24 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $9F3B.w,Y		; B9 3B 9F ; Load $9F3B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$F8.b		; 29 F8 ; Logical AND #$F8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $9F33.w,Y		; B9 33 9F ; Load $9F33.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $9F31.w,Y		; B9 31 9F ; Load $9F31.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	inc $0D90.w,X		; FE 90 0D ; Increment memory $0D90.w,X [Reads: X Index] [Flags: NZ]
	lda $9F2B.w,X		; BD 2B 9F ; Load $9F2B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $9F29.w,X		; BC 29 9F ; Load Y register $9F29.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	jsr $A5FD.w		; 20 FD A5 ; Jump to subroutine at $A5FD.w [Writes: Stack Pointer] [Flow: call]
	jsl $1D808C.l		; 22 8C 80 1D ; Jump to subroutine long $1D808C.l [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $A5		; 10 A5 ; Branch if plus to $10, $A5 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($01FF.w,X)		; FC FF 01 ; Jump to subroutine indirect indexed ($01FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000C40.l,X		; FF 40 0C 00 ; Subtract with carry (long,X) $000C40.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	jsr ($01FF.w,X)		; FC FF 01 ; Jump to subroutine indirect indexed ($01FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000C40.l,X		; FF 40 0C 00 ; Subtract with carry (long,X) $000C40.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00088E.l,X		; FF 8E 08 00 ; Subtract with carry (long,X) $00088E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00088E.l,X		; FF 8E 08 00 ; Subtract with carry (long,X) $00088E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00088E.l,X		; FF 8E 08 00 ; Subtract with carry (long,X) $00088E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $000A.w		; 4E 0A 00 ; Logical shift right $000A.w [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $000A.w		; 4E 0A 00 ; Logical shift right $000A.w [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $000A.w		; 4E 0A 00 ; Logical shift right $000A.w [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $000A.w		; 4E 0A 00 ; Logical shift right $000A.w [Flags: NCZ]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000869.l,X		; FF 69 08 00 ; Subtract with carry (long,X) $000869.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000804.l,X		; FF 04 08 00 ; Subtract with carry (long,X) $000804.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000867.l,X		; FF 67 08 00 ; Subtract with carry (long,X) $000867.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000804.l,X		; FF 04 08 00 ; Subtract with carry (long,X) $000804.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $01FF.w,X		; FE FF 01 ; Increment memory $01FF.w,X [Reads: X Index] [Flags: NZ]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0008C0.l,X		; FF C0 08 00 ; Subtract with carry (long,X) $0008C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $01FF.w,X		; FD FF 01 ; Subtract with carry $01FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0008C0.l,X		; FF C0 08 00 ; Subtract with carry (long,X) $0008C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0000.w		; 0E 00 00 ; Arithmetic shift left $0000.w [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $2C2E.w		; 2C 2E 2C ; Test bits $2C2E.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	lda $00001A.l		; AF 1A 00 00 ; Load long $00001A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $A0DE.w,Y		; B9 DE A0 ; Load $A0DE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AF4.w		; 8D F4 0A ; Store accumulator to $0AF4.w [Reads: Accumulator]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A0E0.w,Y		; 79 E0 A0 ; Add $A0E0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$32.b		; 09 32 ; Logical OR #$32.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$24.b		; A0 24 ; Load #$24.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	jsr $AE63.w		; 20 63 AE ; Jump to subroutine at $AE63.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $A0D0.w,Y		; B9 D0 A0 ; Load $A0D0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	ldy #$26.b		; A0 26 ; Load #$26.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	ldy $A0D2.w,X		; BC D2 A0 ; Load Y register $A0D2.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $A0D7.w,X		; BD D7 A0 ; Load $A0D7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	jsr $A5FD.w		; 20 FD A5 ; Jump to subroutine at $A5FD.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $DE		; 10 DE ; Branch if plus to $10, $DE [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0008.w		; 2C 08 00 ; Test bits $0008.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000A22.l,X		; FF 22 0A 00 ; Subtract with carry (long,X) $000A22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000A32.l,X		; FF 32 0A 00 ; Subtract with carry (long,X) $000A32.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00082A.l,X		; FF 2A 08 00 ; Subtract with carry (long,X) $00082A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($02FF.w,X)		; FC FF 02 ; Jump to subroutine indirect indexed ($02FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000A05.l,X		; FF 05 0A 00 ; Subtract with carry (long,X) $000A05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000A15.l,X		; FF 15 0A 00 ; Subtract with carry (long,X) $000A15.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $070001.l,X		; FF 01 00 07 ; Subtract with carry (long,X) $070001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $4E.b		; 02 4E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000E00.l,X		; FF 00 0E 00 ; Subtract with carry (long,X) $000E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $4E.b		; 02 4E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000E00.l,X		; FF 00 0E 00 ; Subtract with carry (long,X) $000E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $0200.w		; 4E 00 02 ; Logical shift right $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $4E.b		; 02 4E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $4E.b		; 02 4E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $C2DA.w		; 0E DA C2 ; Arithmetic shift left $C2DA.w [Flags: NCZ]
	jsr $C8A5.w		; 20 A5 C8 ; Jump to subroutine at $C8A5.w [Writes: Stack Pointer] [Flow: call]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $A0.b		; 04 A0 ; Test and set bits $A0.b [Reads: Accumulator] [Flags: Z]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$C9.b]		; 07 C9 ; OR accumulator with memory (long) [$C9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A0.b		; 05 A0 ; Logical OR $A0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $2E8C.w		; 2C 8C 2E ; Test bits $2E8C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cop $C9.b		; 02 C9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $ACE5.w		; 20 E5 AC ; Jump to subroutine at $ACE5.w [Writes: Stack Pointer] [Flow: call]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0200.w		; C9 00 02 ; Compare #$0200.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	jsr $A5FD.w		; 20 FD A5 ; Jump to subroutine at $A5FD.w [Writes: Stack Pointer] [Flow: call]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	stz $0107.w		; 9C 07 01 ; Store zero to $0107.w
	lda $A274.w,Y		; B9 74 A2 ; Load $A274.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0108.w		; 8D 08 01 ; Store accumulator to $0108.w [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $A276.w,Y		; B9 76 A2 ; Load $A276.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0100.w		; 8D 00 01 ; Store accumulator to $0100.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $A27A.w,Y		; B9 7A A2 ; Load $A27A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	jsr $A5FD.w		; 20 FD A5 ; Jump to subroutine at $A5FD.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $E8FF.w		; EE FF E8 ; Increment $E8FF.w [Flags: NZ]
	sbc $0039A4.l,X		; FF A4 39 00 ; Subtract with carry (long,X) $0039A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A8FFF0.l,X		; FF F0 FF A8 ; Subtract with carry (long,X) $A8FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $0200.w,Y		; 39 00 02 ; AND accumulator with memory $0200.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $E8FF.w		; EE FF E8 ; Increment $E8FF.w [Flags: NZ]
	sbc $0039A4.l,X		; FF A4 39 00 ; Subtract with carry (long,X) $0039A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $EE.b		; 02 EE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A4FFE8.l,X		; FF E8 FF A4 ; Subtract with carry (long,X) $A4FFE8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $0200.w,Y		; 39 00 02 ; AND accumulator with memory $0200.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	ldx $39.b		; A6 39 ; Load $39.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $E8FF.w		; EE FF E8 ; Increment $E8FF.w [Flags: NZ]
	sbc $0039A4.l,X		; FF A4 39 00 ; Subtract with carry (long,X) $0039A4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FA.b		; 02 FA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $2DFFEF.l,X		; FF EF FF 2D ; Subtract with carry (long,X) $2DFFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $0000.w,Y		; 39 00 00 ; AND accumulator with memory $0000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $0039A0.l,X		; FF A0 39 00 ; Subtract with carry (long,X) $0039A0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AAFFF0.l,X		; FF F0 FF AA ; Subtract with carry (long,X) $AAFFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $0200.w,Y		; 39 00 02 ; AND accumulator with memory $0200.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $2CFFEF.l,X		; FF EF FF 2C ; Subtract with carry (long,X) $2CFFEF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $0000.w,Y		; 39 00 00 ; AND accumulator with memory $0000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $0039A0.l,X		; FF A0 39 00 ; Subtract with carry (long,X) $0039A0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AAFFF0.l,X		; FF F0 FF AA ; Subtract with carry (long,X) $AAFFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $0200.w,Y		; 39 00 02 ; AND accumulator with memory $0200.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0200.w		; C9 00 02 ; Compare #$0200.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$FC.b		; A9 FC ; Load #$FC.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0D50.w,X		; 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	inc $0DC0.w,X		; FE C0 0D ; Increment memory $0DC0.w,X [Reads: X Index] [Flags: NZ]
	inc $0DC0.w,X		; FE C0 0D ; Increment memory $0DC0.w,X [Reads: X Index] [Flags: NZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$34.b		; A0 34 ; Load #$34.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	jsl $1D808C.l		; 22 8C 80 1D ; Jump to subroutine long $1D808C.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda #$3B.b		; A9 3B ; Load #$3B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
.INDEX 16
	rep #$10		; C2 10
	ldy $C8.b		; A4 C8 ; Load $C8.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpy #$01C0.w		; C0 C0 01 ; Compare #$01C0.w with Y register [Reads: Y Index] [Flags: NCZ]
.INDEX 8
	sep #$10		; E2 10
	.db $B0, $07		; B0 07 ; Branch if carry set to $B0, $07 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsl $068526.l		; 22 26 85 06 ; Jump to subroutine long $068526.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: NZ]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $06C309.l,X		; BF 09 C3 06 ; Load long $06C309.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FD8.w		; 6D D8 0F ; Add $0FD8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $06C311.l,X		; BF 11 C3 06 ; Load long $06C311.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0FDA.w		; 6D DA 0F ; Add $0FDA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $ACE5.w		; 20 E5 AC ; Jump to subroutine at $ACE5.w [Writes: Stack Pointer] [Flow: call]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0E00.w,X		; DE 00 0E ; Decrement memory $0E00.w,X [Reads: X Index] [Flags: NZ]
	lda #$E3.b		; A9 E3 ; Load #$E3.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $ACA2.w		; 20 A2 AC ; Jump to subroutine at $ACA2.w [Writes: Stack Pointer] [Flow: call]
	jsr $A692.w		; 20 92 A6 ; Jump to subroutine at $A692.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$05.b		; E0 05 ; Compare #$05.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $E6		; D0 E6 ; Branch if not equal to $D0, $E6 [Flow: branch]
	lda #$72.b		; A9 72 ; Load #$72.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda #$3B.b		; A9 3B ; Load #$3B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	sta $0DA0.w,X		; 9D A0 0D ; Store accumulator to $0DA0.w,X [Reads: Accumulator, X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A6B3.w		; 20 B3 A6 ; Jump to subroutine at $A6B3.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00072A.l,X		; FF 2A 07 00 ; Subtract with carry (long,X) $00072A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00072A.l,X		; FF 2A 07 00 ; Subtract with carry (long,X) $00072A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $000200.l		; 4F 00 02 00 ; Exclusive OR accumulator with memory (long) $000200.l [Writes: Accumulator] [Flags: NZ]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00072A.l,X		; FF 2A 07 00 ; Subtract with carry (long,X) $00072A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00072A.l,X		; FF 2A 07 00 ; Subtract with carry (long,X) $00072A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FE0200.l		; 0F 00 02 FE ; OR accumulator with memory (long) $FE0200.l [Writes: Accumulator] [Flags: NZ]
	sbc $770000.l,X		; FF 00 00 77 ; Subtract with carry (long,X) $770000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $000000.l		; 0F 00 00 00 ; OR accumulator with memory (long) $000000.l [Writes: Accumulator] [Flags: NZ]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00072A.l,X		; FF 2A 07 00 ; Subtract with carry (long,X) $00072A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FD0200.l		; 4F 00 02 FD ; Exclusive OR accumulator with memory (long) $FD0200.l [Writes: Accumulator] [Flags: NZ]
	sbc $660000.l,X		; FF 00 00 66 ; Subtract with carry (long,X) $660000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $000000.l		; 0F 00 00 00 ; OR accumulator with memory (long) $000000.l [Writes: Accumulator] [Flags: NZ]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00072A.l,X		; FF 2A 07 00 ; Subtract with carry (long,X) $00072A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0E0200.l		; 4F 00 02 0E ; Exclusive OR accumulator with memory (long) $0E0200.l [Writes: Accumulator] [Flags: NZ]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000D48.l,X		; FF 48 0D 00 ; Subtract with carry (long,X) $000D48.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000944.l,X		; FF 44 09 00 ; Subtract with carry (long,X) $000944.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $0D.b		; 02 0D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000D48.l,X		; FF 48 0D 00 ; Subtract with carry (long,X) $000D48.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000944.l,X		; FF 44 09 00 ; Subtract with carry (long,X) $000944.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $78FFF0.l,X		; FF F0 FF 78 ; Subtract with carry (long,X) $78FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $0000.w,X		; 3D 00 00 ; AND accumulator with memory $0000.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $003D24.l,X		; FF 24 3D 00 ; Subtract with carry (long,X) $003D24.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $003DC2.l,X		; FF C2 3D 00 ; Subtract with carry (long,X) $003DC2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $3D.b		; 02 3D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $003777.l,X		; FF 77 37 00 ; Subtract with carry (long,X) $003777.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0037C4.l,X		; FF C4 37 00 ; Subtract with carry (long,X) $0037C4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0077CA.l,X		; FF CA 77 00 ; Subtract with carry (long,X) $0077CA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00326C.l,X		; FF 6C 32 00 ; Subtract with carry (long,X) $00326C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00326C.l,X		; FF 6C 32 00 ; Subtract with carry (long,X) $00326C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $68FFF0.l,X		; FF F0 FF 68 ; Subtract with carry (long,X) $68FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $0000.w,X		; 3D 00 00 ; AND accumulator with memory $0000.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $003D24.l,X		; FF 24 3D 00 ; Subtract with carry (long,X) $003D24.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $003DC2.l,X		; FF C2 3D 00 ; Subtract with carry (long,X) $003DC2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $3D.b		; 02 3D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $003766.l,X		; FF 66 37 00 ; Subtract with carry (long,X) $003766.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0037C4.l,X		; FF C4 37 00 ; Subtract with carry (long,X) $0037C4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0077CA.l,X		; FF CA 77 00 ; Subtract with carry (long,X) $0077CA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00326C.l,X		; FF 6C 32 00 ; Subtract with carry (long,X) $00326C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00326C.l,X		; FF 6C 32 00 ; Subtract with carry (long,X) $00326C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: NCZ]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $0D10.w,X		; BC 10 0D ; Load Y register $0D10.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D50.w,X		; 7D 50 0D ; Add $0D50.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $0D00.w,X		; BC 00 0D ; Load Y register $0D00.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cpy #$B0.b		; C0 B0 ; Compare #$B0.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D40.w,X		; 7D 40 0D ; Add $0D40.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsl $1D808C.l		; 22 8C 80 1D ; Jump to subroutine long $1D808C.l [Writes: Stack Pointer] [Flow: call]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$7E.b		; 49 7E ; Exclusive OR #$7E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	jsr $A6B1.w		; 20 B1 A6 ; Jump to subroutine at $A6B1.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda #$37.b		; A9 37 ; Load #$37.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $ACA2.w		; 20 A2 AC ; Jump to subroutine at $ACA2.w [Writes: Stack Pointer] [Flow: call]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A694.w		; 20 94 A6 ; Jump to subroutine at $A694.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	jsr $A692.w		; 20 92 A6 ; Jump to subroutine at $A692.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	jsr $A692.w		; 20 92 A6 ; Jump to subroutine at $A692.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $A53D.w,X		; BD 3D A5 ; Load $A53D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $A643.w		; 20 43 A6 ; Jump to subroutine at $A643.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $29		; 80 29 ; Branch always to $80, $29 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	.db $80, $1A		; 80 1A ; Branch always to $80, $1A [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $A540.w,Y		; B9 40 A5 ; Load $A540.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $A5F8.w		; 20 F8 A5 ; Jump to subroutine at $A5F8.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $C3		; 10 C3 ; Branch if plus to $10, $C3 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $ACA2.w		; 20 A2 AC ; Jump to subroutine at $ACA2.w [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	asl $0408.w,X		; 1E 08 04 ; Arithmetic shift left $0408.w,X [Reads: X Index] [Flags: NCZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0490FF.l,X		; FF FF 90 04 ; Subtract with carry (long,X) $0490FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0302FF.l,X		; FF FF 02 03 ; Subtract with carry (long,X) $0302FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A5FA.w		; 20 FA A5 ; Jump to subroutine at $A5FA.w [Writes: Stack Pointer] [Flow: call]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$08.b		; C0 08 ; Compare #$08.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	cpy #$16.b		; C0 16 ; Compare #$16.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$15.b		; A0 15 ; Load #$15.b into Y register [Writes: Y Index] [Flags: NZ]
	cpy #$1C.b		; C0 1C ; Compare #$1C.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$1B.b		; A0 1B ; Load #$1B.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $A60C.w,Y		; B9 0C A6 ; Load $A60C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $A627.w,Y		; B9 27 A6 ; Load $A627.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	cpy #$05.b		; C0 05 ; Compare #$05.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	cpy #$0A.b		; C0 0A ; Compare #$0A.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	cpy #$0F.b		; C0 0F ; Compare #$0F.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D00.w,X		; FE 00 0D ; Increment memory $0D00.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	stx $0FA0.w		; 8E A0 0F ; Store X register to $0FA0.w [Reads: X Index]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $11.b		; 64 11 ; Store zero to $11.b
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	jsl $068526.l		; 22 26 85 06 ; Jump to subroutine long $068526.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	stx $0FA0.w		; 8E A0 0F ; Store X register to $0FA0.w [Reads: X Index]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	jsl $068526.l		; 22 26 85 06 ; Jump to subroutine long $068526.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $8DA4.w		; 2D A4 8D ; Logical AND $8DA4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $BD.b		; A4 BD ; Load $BD.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $9A.b		; A4 9A ; Load $9A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda [$64.b]		; A7 64 ; Load accumulator (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($A4.b,X)		; A1 A4 ; Load accumulator ($A4.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($95.b,X)		; A1 95 ; Load accumulator ($95.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$94.b		; A9 94 ; Load #$94.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($73.b,X)		; A1 73 ; Load accumulator ($73.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	eor ($AA.b,S),Y		; 53 AA ; XOR accumulator (stack relative indirect indexed) ($AA.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy $9E48.w		; AC 48 9E ; Load $9E48.w into Y register [Writes: Y Index] [Flags: NZ]
	eor $AB.b		; 45 AB ; Exclusive OR $AB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pea $B7A1.w		; F4 A1 B7 ; Push absolute address $B7A1.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	lda $9DF0.w		; AD F0 9D ; Load $9DF0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $389E.w		; 20 9E 38 ; Jump to subroutine at $389E.w [Writes: Stack Pointer] [Flow: call]
	stz $A0C0.w,X		; 9E C0 A0 ; Store zero to $A0C0.w,X [Reads: X Index]
	jsr $C0A0.w		; 20 A0 C0 ; Jump to subroutine at $C0A0.w [Writes: Stack Pointer] [Flow: call]
	sta $609FF0.l,X		; 9F F0 9F 60 ; Store accumulator (long,X) $609FF0.l,X [Reads: Accumulator, X Index]
	ldy #$90.b		; A0 90 ; Load #$90.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$E1.b		; A0 E1 ; Load #$E1.b into Y register [Writes: Y Index] [Flags: NZ]
	stz $9F01.w,X		; 9E 01 9F ; Store zero to $9F01.w,X [Reads: X Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldx #$88.b		; A2 88 ; Load #$88.b into X register [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $A8.b		; E5 A8 ; Subtract $A8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $A9.b		; 25 A9 ; Logical AND $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($9F.b,X)		; 21 9F ; Logical AND ($9F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda [$48.b]		; A7 48 ; Load accumulator (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	lda RDMPYL.w		; AD 16 42 ; Load RDMPYL.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $A6C3.w,Y		; B9 C3 A6 ; Load $A6C3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $4216.w		; 6D 16 42 ; Add $4216.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor ($55.b)		; 52 55 ; Exclusive OR accumulator with memory (indirect) ($55.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $20.b,X		; 55 20 ; Exclusive OR accumulator with memory $20.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $DA.b		; 06 DA ; Arithmetic shift left $DA.b [Reads: Direct Page] [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9C0A.w,X		; BD 0A 9C ; Load $9C0A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx $0FA0.w		; 8E A0 0F ; Store X register to $0FA0.w [Reads: X Index]
	lda $A73D.w,X		; BD 3D A7 ; Load $A73D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda $A740.w,X		; BD 40 A7 ; Load $A740.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda $A743.w,X		; BD 43 A7 ; Load $A743.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$026F.w		; C9 6F 02 ; Compare #$026F.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy #$21.b		; A0 21 ; Load #$21.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $012F.w		; 8C 2F 01 ; Store Y register to $012F.w [Reads: Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $A746.w,Y		; B9 46 A7 ; Load $A746.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$33.b		; A9 33 ; Load #$33.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	jsl $068526.l		; 22 26 85 06 ; Jump to subroutine long $068526.l [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $BC		; 10 BC ; Branch if plus to $10, $BC [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020000.l		; 22 00 00 02 ; Jump to subroutine long $020000.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $00.b		; 64 00 ; Store zero to $00.b
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $DA.b		; 02 DA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0170.w		; C9 70 01 ; Compare #$0170.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $41		; 90 41 ; Branch if carry clear to $90, $41 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$3E.b		; A0 3E ; Load #$3E.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$06.b		; E0 06 ; Compare #$06.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda #$39.b		; A9 39 ; Load #$39.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01C0.w		; C9 C0 01 ; Compare #$01C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda #$39.b		; A9 39 ; Load #$39.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $ACA2.w		; 20 A2 AC ; Jump to subroutine at $ACA2.w [Writes: Stack Pointer] [Flow: call]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A694.w		; 20 94 A6 ; Jump to subroutine at $A694.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF2.w,X		; 9D F2 0D ; Store accumulator to $0DF2.w,X [Reads: Accumulator, X Index]
	jsr $A8C8.w		; 20 C8 A8 ; Jump to subroutine at $A8C8.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $CB		; D0 CB ; Branch if not equal to $D0, $CB [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($AAFF.w,X)		; FC FF AA ; Jump to subroutine indirect indexed ($AAFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0030AA.l,X		; FF AA 30 00 ; Subtract with carry (long,X) $0030AA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $90FFF8.l,X		; FF F8 FF 90 ; Subtract with carry (long,X) $90FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $007090.l,X		; FF 90 70 00 ; Subtract with carry (long,X) $007090.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $91FFF6.l,X		; FF F6 FF 91 ; Subtract with carry (long,X) $91FFF6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $007091.l,X		; FF 91 70 00 ; Subtract with carry (long,X) $007091.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $A8B8.w,Y		; B9 B8 A8 ; Load $A8B8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$36.b		; A0 36 ; Load #$36.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $020007.l		; 22 07 00 02 ; Jump to subroutine long $020007.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0009C2.l,X		; FF C2 09 00 ; Subtract with carry (long,X) $0009C2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$00.b]		; 47 00 ; Exclusive OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0009C2.l,X		; FF C2 09 00 ; Subtract with carry (long,X) $0009C2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0009C4.l,X		; FF C4 09 00 ; Subtract with carry (long,X) $0009C4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000924.l,X		; FF 24 09 00 ; Subtract with carry (long,X) $000924.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $08FFF4.l,X		; FF F4 FF 08 ; Subtract with carry (long,X) $08FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $000200.l,X		; 3F 00 02 00 ; AND accumulator with memory (long,X) $000200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $003F20.l,X		; FF 20 3F 00 ; Subtract with carry (long,X) $003F20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $003F20.l,X		; FF 20 3F 00 ; Subtract with carry (long,X) $003F20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $DA.b		; 02 DA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $2F		; B0 2F ; Branch if carry set to $B0, $2F [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $ACA2.w		; 20 A2 AC ; Jump to subroutine at $ACA2.w [Writes: Stack Pointer] [Flow: call]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A95F.w,X		; 7D 5F A9 ; Add $A95F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $A93D.w,Y		; B9 3D A9 ; Load $A93D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsr $AE63.w		; 20 63 AE ; Jump to subroutine at $AE63.w [Writes: Stack Pointer] [Flow: call]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A6B3.w		; 20 B3 A6 ; Jump to subroutine at $A6B3.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A6B3.w		; 20 B3 A6 ; Jump to subroutine at $A6B3.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$05.b		; E0 05 ; Compare #$05.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $C3		; 90 C3 ; Branch if carry clear to $90, $C3 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$38.b		; A0 38 ; Load #$38.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	jsr $A643.w		; 20 43 A6 ; Jump to subroutine at $A643.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$3A.b		; A0 3A ; Load #$3A.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $06FFFE.l,X		; FF FE FF 06 ; Subtract with carry (long,X) $06FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00090E.l,X		; FF 0E 09 00 ; Subtract with carry (long,X) $00090E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000908.l,X		; FF 08 09 00 ; Subtract with carry (long,X) $000908.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $DA.b		; 02 DA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	jsr $A5F8.w		; 20 F8 A5 ; Jump to subroutine at $A5F8.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda #$73.b		; A9 73 ; Load #$73.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda #$27.b		; A9 27 ; Load #$27.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E90.w,X		; 9D 90 0E ; Store accumulator to $0E90.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A6B3.w		; 20 B3 A6 ; Jump to subroutine at $A6B3.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $ACA2.w		; 20 A2 AC ; Jump to subroutine at $ACA2.w [Writes: Stack Pointer] [Flow: call]
	lda #$E9.b		; A9 E9 ; Load #$E9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda #$37.b		; A9 37 ; Load #$37.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsl $068526.l		; 22 26 85 06 ; Jump to subroutine long $068526.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0180.w		; C9 80 01 ; Compare #$0180.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $10		; 90 10 ; Branch if carry clear to $90, $10 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$7C.b		; C9 7C ; Compare #$7C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $1D808C.l		; 22 8C 80 1D ; Jump to subroutine long $1D808C.l [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda #$36.b		; A9 36 ; Load #$36.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA80.l		; 22 80 BA 0D ; Jump to subroutine long $0DBA80.l [Writes: Stack Pointer] [Flow: call]
	lda #$39.b		; A9 39 ; Load #$39.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	jsl $0684BD.l		; 22 BD 84 06 ; Jump to subroutine long $0684BD.l [Writes: Stack Pointer] [Flow: call]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $C9.b		; A5 C9 ; Load $C9.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A9D1.w,Y		; 79 D1 A9 ; Add $A9D1.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	jsl $068526.l		; 22 26 85 06 ; Jump to subroutine long $068526.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $003704.l,X		; FF 04 37 00 ; Subtract with carry (long,X) $003704.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $64FFF0.l,X		; FF F0 FF 64 ; Subtract with carry (long,X) $64FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$00.b],Y		; 37 00 ; AND accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $62FFE8.l,X		; FF E8 FF 62 ; Subtract with carry (long,X) $62FFE8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$00.b],Y		; 37 00 ; AND accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $64FFF0.l,X		; FF F0 FF 64 ; Subtract with carry (long,X) $64FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$00.b],Y		; 37 00 ; AND accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0039AF.l,X		; FF AF 39 00 ; Subtract with carry (long,X) $0039AF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $100E10.l,X		; FF 10 0E 10 ; Subtract with carry (long,X) $100E10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($14.b)		; 12 14 ; OR accumulator with memory (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $14		; 30 14 ; Branch if minus to $30, $14 [Flow: branch]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $370C.w		; 0C 0C 37 ; Test and set bits $370C.w [Reads: Accumulator] [Flags: Z]
	and [$3B.b],Y		; 37 3B ; AND accumulator with memory (long indexed) [$3B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $0100.w,X		; 3D 00 01 ; AND accumulator with memory $0100.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	sta $0DD0.w,X		; 9D D0 0D ; Store accumulator to $0DD0.w,X [Reads: Accumulator, X Index]
	stz $0D50.w,X		; 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	lda #$EE.b		; A9 EE ; Load #$EE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D30.w,X		; 9D 30 0D ; Store accumulator to $0D30.w,X [Reads: Accumulator, X Index]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D20.w,X		; 9D 20 0D ; Store accumulator to $0D20.w,X [Reads: Accumulator, X Index]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2D		; F0 2D ; Branch if equal to $F0, $2D [Flow: branch]
	lda #$F8.b		; A9 F8 ; Load #$F8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsl $1D808C.l		; 22 8C 80 1D ; Jump to subroutine long $1D808C.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $18		; B0 18 ; Branch if carry set to $B0, $18 [Flow: branch]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AA7B.w,Y		; 79 7B AA ; Add $AA7B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	ldy #$10.b		; A0 10 ; Load #$10.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$05.b		; E0 05 ; Compare #$05.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $A5		; 90 A5 ; Branch if carry clear to $90, $A5 [Flow: branch]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda $AA7D.w,Y		; B9 7D AA ; Load $AA7D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$05.b		; E0 05 ; Compare #$05.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	lda $AA81.w,Y		; B9 81 AA ; Load $AA81.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	cpx #$05.b		; E0 05 ; Compare #$05.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A6B3.w		; 20 B3 A6 ; Jump to subroutine at $A6B3.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $80, $CB		; 80 CB ; Branch always to $80, $CB [Flow: branch]
	ldy #$12.b		; A0 12 ; Load #$12.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $AA82.w,X		; BD 82 AA ; Load $AA82.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $AA86.w,X		; BD 86 AA ; Load $AA86.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	lda $AA7E.w,X		; BD 7E AA ; Load $AA7E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $A694.w		; 20 94 A6 ; Jump to subroutine at $A694.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $E9		; 90 E9 ; Branch if carry clear to $90, $E9 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0D.b		; 06 0D ; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $4D.b		; 06 4D ; Arithmetic shift left $4D.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000D00.l,X		; FF 00 0D 00 ; Subtract with carry (long,X) $000D00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000D00.l,X		; FF 00 0D 00 ; Subtract with carry (long,X) $000D00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000D02.l,X		; FF 02 0D 00 ; Subtract with carry (long,X) $000D02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000D02.l,X		; FF 02 0D 00 ; Subtract with carry (long,X) $000D02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $00FF.w,X		; FD FF 00 ; Subtract with carry $00FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0000.w		; 0D 00 00 ; Logical OR $0000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02FF.w,Y		; F9 FF 02 ; Subtract with carry $02FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $000D.w		; 2C 0D 00 ; Test bits $000D.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cop $FB.b		; 02 FB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $2F0002.l,X		; FF 02 00 2F ; Subtract with carry (long,X) $2F0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0000.w		; 0D 00 00 ; Logical OR $0000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000D02.l,X		; FF 02 0D 00 ; Subtract with carry (long,X) $000D02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $3F0002.l,X		; FF 02 00 3F ; Subtract with carry (long,X) $3F0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0000.w		; 0D 00 00 ; Logical OR $0000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000D02.l,X		; FF 02 0D 00 ; Subtract with carry (long,X) $000D02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $0820.w		; 20 20 08 ; Jump to subroutine at $0820.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	cpx #$05.b		; E0 05 ; Compare #$05.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $32		; 90 32 ; Branch if carry clear to $90, $32 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $ACA2.w		; 20 A2 AC ; Jump to subroutine at $ACA2.w [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AC09.w,X		; 7D 09 AC ; Add $AC09.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F70.w,X		; 9D 70 0F ; Store accumulator to $0F70.w,X [Reads: Accumulator, X Index]
	jsr $AE63.w		; 20 63 AE ; Jump to subroutine at $AE63.w [Writes: Stack Pointer] [Flow: call]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$0F.b		; 49 0F ; Exclusive OR #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A6B3.w		; 20 B3 A6 ; Jump to subroutine at $A6B3.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $60		; 80 60 ; Branch always to $80, $60 [Flow: branch]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $ACA2.w		; 20 A2 AC ; Jump to subroutine at $ACA2.w [Writes: Stack Pointer] [Flow: call]
	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	.db $80, $1E		; 80 1E ; Branch always to $80, $1E [Flow: branch]
	cmp $ABF0.w,X		; DD F0 AB ; Compare accumulator $ABF0.w,X [Reads: X Index] [Flags: NCZ]
	.db $B0, $1C		; B0 1C ; Branch if carry set to $B0, $1C [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FC.b		; 69 FC ; Add #$FC.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	jsl $1D808C.l		; 22 8C 80 1D ; Jump to subroutine long $1D808C.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $ABED.w,Y		; B9 ED AB ; Load $ABED.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A6B3.w		; 20 B3 A6 ; Jump to subroutine at $A6B3.w [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $ABF8.w		; 4C F8 AB ; Jump to $ABF8.w [Flow: jump]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A645.w		; 20 45 A6 ; Jump to subroutine at $A645.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $000C.w		; 0C 0C 00 ; Test and set bits $000C.w [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $0C.b		; C5 0C ; Compare $0C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($0C.b,X)		; E1 0C ; Subtract with carry ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $0606.w,Y		; 39 06 06 ; AND accumulator with memory $0606.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $0404.w		; 20 04 04 ; Jump to subroutine at $0404.w [Writes: Stack Pointer] [Flow: call]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $76.b		; 06 76 ; Arithmetic shift left $76.b [Reads: Direct Page] [Flags: NCZ]
	adc ($71.b,S),Y		; 73 71 ; Add with carry (stack relative indirect indexed) ($71.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $8D.b,S		; 83 8D ; Store accumulator (stack relative) $8D.b,S [Reads: Stack Pointer, Accumulator]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $8C.b		; 02 8C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	ldy $0DC0.w,X		; BC C0 0D ; Load Y register $0DC0.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$06.b		; C0 06 ; Compare #$06.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D10.w,X		; 9D 10 0D ; Store accumulator to $0D10.w,X [Reads: Accumulator, X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D00.w,X		; 9D 00 0D ; Store accumulator to $0D00.w,X [Reads: Accumulator, X Index]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $ACD7.w,Y		; B9 D7 AC ; Load $ACD7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	ldy #$1C.b		; A0 1C ; Load #$1C.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx $0DB0.w		; EC B0 0D ; Compare $0DB0.w with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $CD		; 90 CD ; Branch if carry clear to $90, $CD [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy $1A.b		; A4 1A ; Load $1A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $AD25.w,Y		; B9 25 AD ; Load $AD25.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $ACDD.w,Y		; BE DD AC ; Load X register $ACDD.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda $ACE1.w,Y		; B9 E1 AC ; Load $ACE1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $ACE5.w		; 20 E5 AC ; Jump to subroutine at $ACE5.w [Writes: Stack Pointer] [Flow: call]
	lda #$62.b		; A9 62 ; Load #$62.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E20.w,X		; 9D 20 0E ; Store accumulator to $0E20.w,X [Reads: Accumulator, X Index]
	lda #$39.b		; A9 39 ; Load #$39.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $A6B3.w		; 20 B3 A6 ; Jump to subroutine at $A6B3.w [Writes: Stack Pointer] [Flow: call]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0E00.w,X		; DE 00 0E ; Decrement memory $0E00.w,X [Reads: X Index] [Flags: NZ]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $ACCB.w,Y		; 59 CB AC ; Exclusive OR accumulator with memory $ACCB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	stz $0D90.w,X		; 9E 90 0D ; Store zero to $0D90.w,X [Reads: X Index]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $AE35.w		; 20 35 AE ; Jump to subroutine at $AE35.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DA0.w,X		; 9E A0 0D ; Store zero to $0DA0.w,X [Reads: X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $ACCF.w,Y		; B9 CF AC ; Load $ACCF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	inc $0DA0.w,X		; FE A0 0D ; Increment memory $0DA0.w,X [Reads: X Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$14.b		; A0 14 ; Load #$14.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	jsr $A5FD.w		; 20 FD A5 ; Jump to subroutine at $A5FD.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $8E		; 10 8E ; Branch if plus to $10, $8E [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	jsr $ADF7.w		; 20 F7 AD ; Jump to subroutine at $ADF7.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$34.b]		; C7 34 ; Compare accumulator (long) [$34.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $34		; 80 34 ; Branch always to $80, $34 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $34.b,Y		; B6 34 ; Load X register $34.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$34.b],Y		; B7 34 ; Load accumulator (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $34.b		; A6 34 ; Load $34.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($6E01.w)		; 6C 01 6E ; Jump indirect to ($6E01.w) [Flow: jump]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($72.b,X)		; 01 72 ; Logical OR ($72.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($6C.b,X)		; 01 6C ; Logical OR ($6C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($74.b,X)		; 01 74 ; Logical OR ($74.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($76.b,X)		; 01 76 ; Logical OR ($76.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($BD.b,X)		; 01 BD ; Logical OR ($BD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $ADE7.w,Y		; B9 E7 AD ; Load $ADE7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0100.w		; 8D 00 01 ; Store accumulator to $0100.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$1A.b		; A0 1A ; Load #$1A.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $A703.w		; 20 03 A7 ; Jump to subroutine at $A703.w [Writes: Stack Pointer] [Flow: call]
	jsr $A5FD.w		; 20 FD A5 ; Jump to subroutine at $A5FD.w [Writes: Stack Pointer] [Flow: call]
	jsl $1D808C.l		; 22 8C 80 1D ; Jump to subroutine long $1D808C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E018.w		; 20 18 E0 ; Jump to subroutine at $E018.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	lda $0DB0.w,X		; BD B0 0D ; Load $0DB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DB0.w,X		; 9D B0 0D ; Store accumulator to $0DB0.w,X [Reads: Accumulator, X Index]
	inc $0D90.w,X		; FE 90 0D ; Increment memory $0D90.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0DB0.w,X		; BC B0 0D ; Load Y register $0DB0.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $AE2D.w,Y		; B9 2D AE ; Load $AE2D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	lda $AE31.w,Y		; B9 31 AE ; Load $AE31.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	jsl $1D808C.l		; 22 8C 80 1D ; Jump to subroutine long $1D808C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $10E0.w		; 20 E0 10 ; Jump to subroutine at $10E0.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $BD		; F0 BD ; Branch if equal to $F0, $BD [Flow: branch]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AE5D.w,Y		; 79 5D AE ; Add $AE5D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0D50.w,X		; 9D 50 0D ; Store accumulator to $0D50.w,X [Reads: Accumulator, X Index]
	cmp $AE5F.w,Y		; D9 5F AE ; Compare accumulator $AE5F.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0DE0.w,X		; FE E0 0D ; Increment memory $0DE0.w,X [Reads: X Index] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AE5D.w,Y		; 79 5D AE ; Add $AE5D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0D40.w,X		; 9D 40 0D ; Store accumulator to $0D40.w,X [Reads: Accumulator, X Index]
	cmp $AE61.w,Y		; D9 61 AE ; Compare accumulator $AE61.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0EB0.w,X		; FE B0 0E ; Increment memory $0EB0.w,X [Reads: X Index] [Flags: NZ]
	jsl $1D808C.l		; 22 8C 80 1D ; Jump to subroutine long $1D808C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $AF1E.w		; 4C 1E AF ; Jump to $AF1E.w [Flow: jump]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	jsr $AFF2.w		; 20 F2 AF ; Jump to subroutine at $AFF2.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $069E.w		; 8D 9E 06 ; Store accumulator to $069E.w [Reads: Accumulator]
	ldx $8C.b		; A6 8C ; Load $8C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$97.b		; E0 97 ; Compare #$97.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	cpx #$9D.b		; E0 9D ; Compare #$9D.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: NCZ]
	ldx $8C.b		; A6 8C ; Load $8C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$B5.b		; E0 B5 ; Compare #$B5.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpx #$BE.b		; E0 BE ; Compare #$BE.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: NCZ]
	cmp #$3000.w		; C9 00 30 ; Compare #$3000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	ora #$F000.w		; 09 00 F0 ; Logical OR #$F000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	cmp #$7000.w		; C9 00 70 ; Compare #$7000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$F000.w		; 09 00 F0 ; Logical OR #$F000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0622.w		; AD 22 06 ; Load $0622.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0622.w		; 8D 22 06 ; Store accumulator to $0622.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jmp $AF91.w		; 4C 91 AF ; Jump to $AF91.w [Flow: jump]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	eor #$00FF.w		; 49 FF 00 ; Exclusive OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	jsr $AFF2.w		; 20 F2 AF ; Jump to subroutine at $AFF2.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $069F.w		; 8D 9F 06 ; Store accumulator to $069F.w [Reads: Accumulator]
	ldx $8C.b		; A6 8C ; Load $8C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$97.b		; E0 97 ; Compare #$97.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	cpx #$9D.b		; E0 9D ; Compare #$9D.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: NCZ]
	ldx $8C.b		; A6 8C ; Load $8C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$95.b		; E0 95 ; Compare #$95.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpx #$9E.b		; E0 9E ; Compare #$9E.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: NCZ]
	cmp #$3000.w		; C9 00 30 ; Compare #$3000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	ora #$F000.w		; 09 00 F0 ; Logical OR #$F000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	cmp #$7000.w		; C9 00 70 ; Compare #$7000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$F000.w		; 09 00 F0 ; Logical OR #$F000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0620.w		; AD 20 06 ; Load $0620.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0620.w		; 8D 20 06 ; Store accumulator to $0620.w [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	ldx $8C.b		; A6 8C ; Load $8C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$9C.b		; E0 9C ; Compare #$9C.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	cpx #$97.b		; E0 97 ; Compare #$97.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpx #$9D.b		; E0 9D ; Compare #$9D.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	lda $0622.w		; AD 22 06 ; Load $0622.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$2000.w		; 69 00 20 ; Add #$2000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0622.w		; 8D 22 06 ; Store accumulator to $0622.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$0000.w		; 69 00 00 ; Add #$0000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $0620.w		; AD 20 06 ; Load $0620.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$2000.w		; 69 00 20 ; Add #$2000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0620.w		; 8D 20 06 ; Store accumulator to $0620.w [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$0000.w		; 69 00 00 ; Add #$0000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	lda $0622.w		; AD 22 06 ; Load $0622.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$2000.w		; E9 00 20 ; Subtract #$2000.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0622.w		; 8D 22 06 ; Store accumulator to $0622.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc #$0000.w		; E9 00 00 ; Subtract #$0000.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $069E.w		; 6D 9E 06 ; Add $069E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0181.w		; C9 81 01 ; Compare #$0181.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$0100.w		; 09 00 01 ; Logical OR #$0100.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $E0.b		; [PATTERN: Memory clearing operation] 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $04.b		; 64 04 ; Store zero to $04.b
	stz $06.b		; 64 06 ; Store zero to $06.b
	lda $E2.b,X		; B5 E2 ; Load $E2.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $E2.b,X		; 95 E2 ; Store accumulator to $E2.b,X [Reads: Accumulator, X Index]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $EC		; D0 EC ; Branch if not equal to $D0, $EC [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0624.w,Y		; B9 24 06 ; Load $0624.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0624.w,Y		; 99 24 06 ; Store accumulator to $0624.w,Y [Reads: Y Index, Accumulator]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $06.b		; 24 06 ; Test bits $06.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda $AE9E.w,Y		; B9 9E AE ; Load $AE9E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $0416.w		; 0D 16 04 ; Logical OR $0416.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0416.w		; 8D 16 04 ; Store accumulator to $0416.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0624.w,Y		; F9 24 06 ; Subtract with carry $0624.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0624.w,X		; 9D 24 06 ; Store accumulator to $0624.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	sec		; 38 ; Set carry flag [Flags: C]
	cpy $CD38.w		; CC 38 CD ; Compare $CD38.w with Y register [Reads: Y Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	dec $CF38.w		; CE 38 CF ; Decrement $CF38.w [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$38.b],Y		; D7 38 ; Compare accumulator (long indexed) [$38.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp $DA38.w,Y		; D9 38 DA ; Compare accumulator $DA38.w,Y [Reads: Y Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp.w [$DD38]		; DC 38 DD ; Jump long indirect [$DD38] [Flow: jump]
	sec		; 38 ; Set carry flag [Flags: C]
	dec $DF38.w,X		; DE 38 DF ; Decrement memory $DF38.w,X [Reads: X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cpx #$38.b		; E0 38 ; Compare #$38.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($38.b,X)		; E1 38 ; Subtract with carry ($38.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
.ACCU 8
.INDEX 8
	sep #$38		; E2 38
	sbc $38.b,S		; E3 38 ; Subtract stack-relative $38.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cpx $38.b		; E4 38 ; Compare $38.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $F0, $38		; F0 38 ; Branch if equal to $F0, $38 [Flow: branch]
	sbc ($38.b),Y		; F1 38 ; Subtract with carry ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($38.b)		; F2 38 ; Subtract with carry (indirect) ($38.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$2C.b]		; C7 2C ; Compare accumulator (long) [$2C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $2CC9.w		; 2C C9 2C ; Test bits $2CC9.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bit $2CCB.w		; 2C CB 2C ; Test bits $2CCB.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cpy $CD2C.w		; CC 2C CD ; Compare $CD2C.w with Y register [Reads: Y Index] [Flags: NCZ]
	bit $2CCE.w		; 2C CE 2C ; Test bits $2CCE.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cmp $2CD72C.l		; CF 2C D7 2C ; Compare accumulator (long) $2CD72C.l [Reads: Accumulator] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	bit $2CD9.w		; 2C D9 2C ; Test bits $2CD9.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	bit $2CDB.w		; 2C DB 2C ; Test bits $2CDB.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jmp.w [$DD2C]		; DC 2C DD ; Jump long indirect [$DD2C] [Flow: jump]
	bit $2CDE.w		; 2C DE 2C ; Test bits $2CDE.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cmp $2CE02C.l,X		; DF 2C E0 2C ; Compare accumulator (long,X) $2CE02C.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc ($2C.b,X)		; E1 2C ; Subtract with carry ($2C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
.ACCU 8
	sep #$2C		; E2 2C
	sbc $2C.b,S		; E3 2C ; Subtract stack-relative $2C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cpx $2C.b		; E4 2C ; Compare $2C.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	sbc ($2C.b),Y		; F1 2C ; Subtract with carry ($2C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($2C.b)		; F2 2C ; Subtract with carry (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b		; E5 2C ; Subtract $2C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($2C.b,S),Y		; F3 2C ; Subtract with carry (stack relative indirect indexed) ($2C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pea $C72C.w		; F4 2C C7 ; Push absolute address $C72C.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp #$28.b		; C9 28 ; Compare #$28.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	wai		; CB ; Wait for interrupt
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cpy $CD28.w		; CC 28 CD ; Compare $CD28.w with Y register [Reads: Y Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	dec $CF28.w		; CE 28 CF ; Decrement $CF28.w [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp [$28.b],Y		; D7 28 ; Compare accumulator (long indexed) [$28.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp $DA28.w,Y		; D9 28 DA ; Compare accumulator $DA28.w,Y [Reads: Y Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jmp.w [$DD28]		; DC 28 DD ; Jump long indirect [$DD28] [Flow: jump]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	dec $DF28.w,X		; DE 28 DF ; Decrement memory $DF28.w,X [Reads: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cpx #$28.b		; E0 28 ; Compare #$28.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($28.b,X)		; E1 28 ; Subtract with carry ($28.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
.ACCU 8
	sep #$28		; E2 28
	sbc $28.b,S		; E3 28 ; Subtract stack-relative $28.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cpx $28.b		; E4 28 ; Compare $28.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	sbc ($28.b),Y		; F1 28 ; Subtract with carry ($28.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($28.b)		; F2 28 ; Subtract with carry (indirect) ($28.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dec $28.b,X		; D6 28 ; Decrement memory $28.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $3C.b		; E6 3C ; Increment $3C.b [Reads: Direct Page] [Flags: NZ]
	sbc [$3C.b]		; E7 3C ; Subtract with carry (long) [$3C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bit $3CE9.w,X		; 3C E9 3C ; Test bits $3CE9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	nop		; EA ; No operation
	bit $3CEB.w,X		; 3C EB 3C ; Test bits $3CEB.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cpx $ED3C.w		; EC 3C ED ; Compare $ED3C.w with X register [Reads: X Index] [Flags: NCZ]
	bit $3CEE.w,X		; 3C EE 3C ; Test bits $3CEE.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $3C003C.l		; EF 3C 00 3C ; Subtract with carry (long) $3C003C.l [Writes: Accumulator] [Flags: NCVZ]
	ora ($3C.b,X)		; 01 3C ; Logical OR ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $3C.b		; 02 3C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3C.b,S		; 03 3C ; OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $3C.b		; 04 3C ; Test and set bits $3C.b [Reads: Accumulator] [Flags: Z]
	ora $3C.b		; 05 3C ; Logical OR $3C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: NCZ]
	ora [$3C.b]		; 07 3C ; OR accumulator with memory (long) [$3C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $3C093C.l		; AF 3C 09 3C ; Load long $3C093C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $3C0B.w,X		; 3C 0B 3C ; Test bits $3C0B.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	tsb $0D3C.w		; 0C 3C 0D ; Test and set bits $0D3C.w [Reads: Accumulator] [Flags: Z]
	bit $3C0E.w,X		; 3C 0E 3C ; Test bits $3C0E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora $3C203C.l		; 0F 3C 20 3C ; OR accumulator with memory (long) $3C203C.l [Writes: Accumulator] [Flags: NZ]
	and ($3C.b,X)		; 21 3C ; Logical AND ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $3C233C.l		; 22 3C 23 3C ; Jump to subroutine long $3C233C.l [Writes: Stack Pointer] [Flow: call]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $3C.b		; 25 3C ; Logical AND $3C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $3C.b		; 26 3C ; Rotate left $3C.b [Reads: Direct Page] [Flags: NCZ]
	and [$3C.b]		; 27 3C ; AND accumulator with memory (long) [$3C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $3C29.w,X		; 3C 29 3C ; Test bits $3C29.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	lda ($3C.b,X)		; A1 3C ; Load accumulator ($3C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ror $F63C.w		; 6E 3C F6 ; Rotate right $F63C.w [Flags: NCZ]
	bit $3CF7.w,X		; 3C F7 3C ; Test bits $3CF7.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	bit $3CF9.w,X		; 3C F9 3C ; Test bits $3CF9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	bit $3CFB.w,X		; 3C FB 3C ; Test bits $3CFB.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jsr ($FD3C.w,X)		; FC 3C FD ; Jump to subroutine indirect indexed ($FD3C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $3CFE.w,X		; 3C FE 3C ; Test bits $3CFE.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $3C103C.l,X		; FF 3C 10 3C ; Subtract with carry (long,X) $3C103C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($3C.b),Y		; 11 3C ; OR accumulator with memory ($3C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3C.b)		; 12 3C ; OR accumulator with memory (indirect) ($3C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($3C.b,S),Y		; 13 3C ; OR accumulator (stack relative indirect indexed) ($3C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $3C.b		; 14 3C ; Test and reset bits $3C.b [Reads: Accumulator] [Flags: Z]
	ora $3C.b,X		; 15 3C ; OR accumulator with memory $3C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $3C.b,X		; 16 3C ; Arithmetic shift left $3C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora [$3C.b],Y		; 17 3C ; OR accumulator with memory (long indexed) [$3C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $3C193C.l,X		; BF 3C 19 3C ; Load long $3C193C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $3C1B.w,X		; 3C 1B 3C ; Test bits $3C1B.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	trb $1D3C.w		; 1C 3C 1D ; Test and reset bits $1D3C.w [Reads: Accumulator] [Flags: Z]
	bit $3C1E.w,X		; 3C 1E 3C ; Test bits $3C1E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora $3C303C.l,X		; 1F 3C 30 3C ; Logical OR long $3C303C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($3C.b),Y		; 31 3C ; AND accumulator with memory ($3C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($3C.b)		; 32 3C ; AND accumulator with memory (indirect) ($3C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($3C.b,S),Y		; 33 3C ; AND accumulator (stack relative indirect indexed) ($3C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $3C.b,X		; 34 3C ; Test bits $3C.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	and $3C.b,X		; 35 3C ; Logical AND $3C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rol $3C.b,X		; 36 3C ; Rotate left $3C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and [$3C.b],Y		; 37 3C ; AND accumulator with memory (long indexed) [$3C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $3C39.w,X		; 3C 39 3C ; Test bits $3C39.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	lda ($3C.b),Y		; B1 3C ; Load accumulator ($3C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $A93C.w,X		; 7E 3C A9 ; Rotate right $A93C.w,X [Reads: X Index] [Flags: NCZ]
	bit $2307.w,X		; 3C 07 23 ; Test bits $2307.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $3C4F.w,X		; 3C 4F 3C ; Test bits $3C4F.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jmp $404B.w		; 4C 4B 40 ; Jump to $404B.w [Flow: jump]
	eor $9F3C.w		; 4D 3C 9F ; Exclusive OR $9F3C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor [$49.b]		; 47 49 ; Exclusive OR accumulator with memory (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $3B.b		; 46 3B ; Logical shift right $3B.b [Reads: Direct Page] [Flags: NCZ]
	jmp $3C3A.w		; 4C 3A 3C ; Jump to $3C3A.w [Flow: jump]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $6E6564.l,X		; 1F 64 65 6E ; Logical OR long $6E6564.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $9F6564.l		; 6F 64 65 9F ; Add with carry (long) $9F6564.l [Writes: Accumulator] [Flags: NCVZ]
	adc $5D.b,X		; 75 5D ; Add $5D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$5D.b		; 69 5D ; Add #$5D.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc ($5F.b),Y		; 71 5F ; Add with carry ($5F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $65.b		; 64 65 ; Store zero to $65.b
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $948B8A.l,X		; 1F 8A 8B 94 ; Logical OR long $948B8A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($95.b),Y		; 91 95 ; Store accumulator ($95.b),Y [Reads: Direct Page, Y Index, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $8F839B.l,X		; 9F 9B 83 8F ; Store accumulator (long,X) $8F839B.l,X [Reads: Accumulator, X Index]
	sta $97.b,S		; 83 97 ; Store accumulator (stack relative) $97.b,S [Reads: Stack Pointer, Accumulator]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tsb $290F.w		; 0C 0F 29 ; Test and set bits $290F.w [Reads: Accumulator] [Flags: Z]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora $1C2E.w,X		; 1D 2E 1C ; OR accumulator with memory $1C2E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $082B.w,X		; 1E 2B 08 ; Arithmetic shift left $082B.w,X [Reads: X Index] [Flags: NCZ]
	ora $65646F.l,X		; 1F 6F 64 65 ; Logical OR long $65646F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $61.b,S		; 63 61 ; Add with carry (stack relative) $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ror $9F71.w		; 6E 71 9F ; Rotate right $9F71.w [Flags: NCZ]
	adc #$65.b		; 69 65 ; Add #$65.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $5D.b,X		; 75 5D ; Add $5D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$6B.b		; 69 6B ; Add #$6B.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $6B		; 70 6B ; Branch if overflow set to $70, $6B [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $8B8A95.l,X		; 1F 95 8A 8B ; Logical OR long $8B8A95.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit #$87.b		; 89 87 ; Test bits #$87.b with accumulator [Reads: Accumulator] [Flags: Z]
	sty $97.b,X		; 94 97 ; Store Y register $97.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta $9B8B8F.l,X		; 9F 8F 8B 9B ; Store accumulator (long,X) $9B8B8F.l,X [Reads: Accumulator, X Index]
	sta $8F.b,S		; 83 8F ; Store accumulator (stack relative) $8F.b,S [Reads: Stack Pointer, Accumulator]
	sta ($96.b),Y		; 91 96 ; Store accumulator ($96.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($0C.b),Y		; 91 0C ; Store accumulator ($0C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora $110803.l		; 0F 03 08 11 ; OR accumulator with memory (long) $110803.l [Writes: Accumulator] [Flags: NZ]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($0E.b,S),Y		; 13 0E ; OR accumulator (stack relative indirect indexed) ($0E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($09.b),Y		; 11 09 ; OR accumulator with memory ($09.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $70, $5D		; 70 5D ; Branch if overflow set to $70, $5D [Flow: branch]
	adc [$5D.b]		; 67 5D ; Add with carry (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $9F6564.l		; 6F 64 65 9F ; Add with carry (long) $9F6564.l [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $61		; 70 61 ; Branch if overflow set to $70, $61 [Flow: branch]
	ror $71.b,X		; 76 71 ; Rotate right $71.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc [$5D.b]		; 67 5D ; Add with carry (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora #$1B.b		; 09 1B ; Logical OR #$1B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $83.b,Y		; 96 83 ; Store X register $83.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $9583.w		; 8D 83 95 ; Store accumulator to $9583.w [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $9C8796.l,X		; 9F 96 87 9C ; Store accumulator (long,X) $9C8796.l,X [Reads: Accumulator, X Index]
	sta [$8D.b],Y		; 97 8D ; Store accumulator (long indexed) [$8D.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta $09.b,S		; 83 09 ; Store accumulator (stack relative) $09.b,S [Reads: Stack Pointer, Accumulator]
	ora $3A4A.w,Y		; 19 4A 3A ; OR accumulator with memory $3A4A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$40.b		; 49 40 ; Exclusive OR #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor [$4B.b]		; 47 4B ; Exclusive OR accumulator with memory (long) [$4B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $40494E.l,X		; 9F 4E 49 40 ; Store accumulator (long,X) $40494E.l,X [Reads: Accumulator, X Index]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	bit $0949.w,X		; 3C 49 09 ; Test bits $0949.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc [$61.b]		; 67 61 ; Add with carry (long) [$61.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $616771.l		; 6F 71 67 61 ; Add with carry (long) $616771.l [Writes: Accumulator] [Flags: NCVZ]
	sta $6A5D70.l,X		; 9F 70 5D 6A ; Store accumulator (long,X) $6A5D70.l,X [Reads: Accumulator, X Index]
	eor $615E.w,X		; 5D 5E 61 ; Exclusive OR accumulator with memory $615E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$1B.b		; 09 1B ; Logical OR #$1B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9087.w		; 8D 87 90 ; Store accumulator to $9087.w [Reads: Accumulator]
	sta $97.b,X		; 95 97 ; Store accumulator to $97.b,X [Reads: Accumulator, X Index]
	sta $9F87.w		; 8D 87 9F ; Store accumulator to $9F87.w [Reads: Accumulator]
	stx $83.b,Y		; 96 83 ; Store X register $83.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $90, $83		; 90 83 ; Branch if carry clear to $90, $83 [Flow: branch]
	sty $87.b		; 84 87 ; Store Y register to $87.b [Reads: Y Index]
	asl $25.b		; 06 25 ; Arithmetic shift left $25.b [Reads: Direct Page] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $222C.w		; 2C 2C 22 ; Test bits $222C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $1A2D.w		; 2C 2D 1A ; Test bits $1A2D.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and [$2D.b]		; 27 2D ; AND accumulator with memory (long) [$2D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2B221D.l,X		; 9F 1D 22 2B ; Store accumulator (long,X) $2B221D.l,X [Reads: Accumulator, X Index]
	asl $2D1C.w,X		; 1E 1C 2D ; Arithmetic shift left $2D1C.w,X [Reads: X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $2107.w		; 2C 07 21 ; Test bits $2107.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	adc $5D.b,X		; 75 5D ; Add $5D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $656471.l		; 6F 71 64 65 ; Add with carry (long) $656471.l [Writes: Accumulator] [Flags: NCVZ]
	adc $759F5D.l		; 6F 5D 9F 75 ; Add with carry (long) $759F5D.l [Writes: Accumulator] [Flags: NCVZ]
	eor $5D69.w,X		; 5D 69 5D ; Exclusive OR accumulator with memory $5D69.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$71.b		; 69 71 ; Add #$71.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ror $075D.w		; 6E 5D 07 ; Rotate right $075D.w [Flags: NCZ]
	and ($9B.b,X)		; 21 9B ; Logical AND ($9B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $95.b,S		; 83 95 ; Store accumulator (stack relative) $95.b,S [Reads: Stack Pointer, Accumulator]
	sta [$8A.b],Y		; 97 8A ; Store accumulator (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $83.b,X		; 95 83 ; Store accumulator to $83.b,X [Reads: Accumulator, X Index]
	sta $8F839B.l,X		; 9F 9B 83 8F ; Store accumulator (long,X) $8F839B.l,X [Reads: Accumulator, X Index]
	sta $8F.b,S		; 83 8F ; Store accumulator (stack relative) $8F.b,S [Reads: Stack Pointer, Accumulator]
	sta [$94.b],Y		; 97 94 ; Store accumulator (long indexed) [$94.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta $09.b,S		; 83 09 ; Store accumulator (stack relative) $09.b,S [Reads: Stack Pointer, Accumulator]
	ora $6B75.w,Y		; 19 75 6B ; OR accumulator with memory $6B75.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $5F.b		; 65 5F ; Add $5F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $65.b		; 64 65 ; Store zero to $65.b
	sta $695D75.l,X		; 9F 75 5D 69 ; Store accumulator (long,X) $695D75.l,X [Reads: Accumulator, X Index]
	eor $5D60.w,X		; 5D 60 5D ; Exclusive OR accumulator with memory $5D60.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$19.b		; 09 19 ; Logical OR #$19.b with accumulator [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta ($8B.b),Y		; 91 8B ; Store accumulator ($8B.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $8F839B.l,X		; 9F 9B 83 8F ; Store accumulator (long,X) $8F839B.l,X [Reads: Accumulator, X Index]
	sta $86.b,S		; 83 86 ; Store accumulator (stack relative) $86.b,S [Reads: Stack Pointer, Accumulator]
	sta $03.b,S		; 83 03 ; Store accumulator (stack relative) $03.b,S [Reads: Stack Pointer, Accumulator]
	and ($4A.b),Y		; 31 4A ; AND accumulator with memory ($4A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor #$3C.b		; 49 3C ; Exclusive OR #$3C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $9F45.w,X		; 3C 45 9F ; Test bits $9F45.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	rol $3849.w,X		; 3E 49 38 ; Rotate left $3849.w,X [Reads: X Index] [Flags: NCZ]
	eor [$3F.b]		; 47 3F ; Exclusive OR accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $4A3C3B.l,X		; 9F 3B 3C 4A ; Store accumulator (long,X) $4A3C3B.l,X [Reads: Accumulator, X Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rol $3C45.w,X		; 3E 45 3C ; Rotate left $3C45.w,X [Reads: X Index] [Flags: NCZ]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $231B28.l,X		; 1F 28 1B 23 ; Logical OR long $231B28.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $2D1C.w,X		; 1E 1C 2D ; Arithmetic shift left $2D1C.w,X [Reads: X Index] [Flags: NCZ]
	sta $2C1E1D.l,X		; 9F 1D 1E 2C ; Store accumulator (long,X) $2C1E1D.l,X [Reads: Accumulator, X Index]
	jsl $1E2720.l		; 22 20 27 1E ; Jump to subroutine long $1E2720.l [Writes: Stack Pointer] [Flow: call]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $1D08.w		; 2C 08 1D ; Test bits $1D08.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	adc $5F656B.l		; 6F 6B 65 5F ; Add with carry (long) $5F656B.l [Writes: Accumulator] [Flags: NCVZ]
	stz $65.b		; 64 65 ; Store zero to $65.b
	ror $9F6B.w		; 6E 6B 9F ; Rotate right $9F6B.w [Flags: NCZ]
	.db $70, $6B		; 70 6B ; Branch if overflow set to $70, $6B [Flow: branch]
	adc #$65.b		; 69 65 ; Add #$65.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $5D		; 70 5D ; Branch if overflow set to $70, $5D [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $9195.w,X		; 1D 95 91 ; OR accumulator with memory $9195.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $91.b,X		; 94 91 ; Store Y register $91.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta $8F9196.l,X		; 9F 96 91 8F ; Store accumulator (long,X) $8F9196.l,X [Reads: Accumulator, X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	stx $83.b,Y		; 96 83 ; Store X register $83.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora #$1B.b		; 09 1B ; Logical OR #$1B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $70, $5D		; 70 5D ; Branch if overflow set to $70, $5D [Flow: branch]
	adc [$5D.b]		; 67 5D ; Add with carry (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $5D.b,X		; 75 5D ; Add $5D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $5D6965.l,X		; 9F 65 69 5D ; Store accumulator (long,X) $5D6965.l,X [Reads: Accumulator, X Index]
	adc #$71.b		; 69 71 ; Add #$71.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ror $095D.w		; 6E 5D 09 ; Rotate right $095D.w [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	stx $83.b,Y		; 96 83 ; Store X register $83.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $9B83.w		; 8D 83 9B ; Store accumulator to $9B83.w [Reads: Accumulator]
	sta $9F.b,S		; 83 9F ; Store accumulator (stack relative) $9F.b,S [Reads: Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $978F83.l		; 8F 83 8F 97 ; Store accumulator (long) $978F83.l [Reads: Accumulator]
	sty $83.b,X		; 94 83 ; Store Y register $83.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora $29.b		; 05 29 ; Logical OR $29.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $9F24.w		; 1C 24 9F ; Test and reset bits $9F24.w [Reads: Accumulator] [Flags: Z]
	jsr $282B.w		; 20 2B 28 ; Jump to subroutine at $282B.w [Writes: Stack Pointer] [Flow: call]
	rol $1D27.w		; 2E 27 1D ; Rotate left $1D27.w [Flags: NCZ]
	sta $2C1E1D.l,X		; 9F 1D 1E 2C ; Store accumulator (long,X) $2C1E1D.l,X [Reads: Accumulator, X Index]
	jsl $1E2720.l		; 22 20 27 1E ; Jump to subroutine long $1E2720.l [Writes: Stack Pointer] [Flow: call]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $1D08.w		; 2C 08 1D ; Test bits $1D08.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	adc #$5D.b		; 69 5D ; Add #$5D.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $5D6A5D.l		; 6F 5D 6A 5D ; Add with carry (long) $5D6A5D.l [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $656E5D.l,X		; 9F 5D 6E 65 ; Store accumulator (long,X) $656E5D.l,X [Reads: Accumulator, X Index]
	adc #$6B.b		; 69 6B ; Add #$6B.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $6B		; 70 6B ; Branch if overflow set to $70, $6B [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $838F.w,X		; 1D 8F 83 ; OR accumulator with memory $838F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $83.b,X		; 95 83 ; Store accumulator to $83.b,X [Reads: Accumulator, X Index]
	.db $90, $83		; 90 83 ; Branch if carry clear to $90, $83 [Flow: branch]
	sta ($9F.b),Y		; 91 9F ; Store accumulator ($9F.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $94.b,S		; 83 94 ; Store accumulator (stack relative) $94.b,S [Reads: Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $919691.l		; 8F 91 96 91 ; Store accumulator (long) $919691.l [Reads: Accumulator]
	ora [$21.b]		; 07 21 ; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $70, $6F		; 70 6F ; Branch if overflow set to $70, $6F [Flow: branch]
	adc ($75.b),Y		; 71 75 ; Add with carry ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $9F6564.l		; 6F 64 65 9F ; Add with carry (long) $9F6564.l [Writes: Accumulator] [Flags: NCVZ]
	adc ($5D.b,S),Y		; 73 5D ; Add with carry (stack relative indirect indexed) ($5D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $5D		; 70 5D ; Branch if overflow set to $70, $5D [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $615E.w,X		; 5D 5E 61 ; Exclusive OR accumulator with memory $615E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$21.b]		; 07 21 ; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $95.b,Y		; 96 95 ; Store X register $95.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$9B.b],Y		; 97 9B ; Store accumulator (long indexed) [$9B.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($95.b),Y		; 91 95 ; Store accumulator ($95.b),Y [Reads: Direct Page, Y Index, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $968399.l,X		; 9F 99 83 96 ; Store accumulator (long,X) $968399.l,X [Reads: Accumulator, X Index]
	sta $90.b,S		; 83 90 ; Store accumulator (stack relative) $90.b,S [Reads: Stack Pointer, Accumulator]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Stack Pointer, Accumulator]
	sta [$08.b]		; 87 08 ; Store accumulator (long) [$08.b] [Reads: Direct Page, Accumulator]
	ora $0E110F.l,X		; 1F 0F 11 0E ; Logical OR long $0E110F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $11.b		; 06 11 ; Arithmetic shift left $11.b [Reads: Direct Page] [Flags: NCZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $110803.l,X		; 9F 03 08 11 ; Store accumulator (long,X) $110803.l,X [Reads: Accumulator, X Index]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($0E.b,S),Y		; [PATTERN: Memory clearing operation] 13 0E ; OR accumulator (stack relative indirect indexed) ($0E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($08.b),Y		; 11 08 ; OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $6F6B70.l,X		; 1F 70 6B 6F ; Logical OR long $6F6B70.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $65.b		; 64 65 ; Store zero to $65.b
	stz $65.b		; 64 65 ; Store zero to $65.b
	adc [$6B.b]		; 67 6B ; Add with carry (long) [$6B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $675D6A.l,X		; 9F 6A 5D 67 ; Store accumulator (long,X) $675D6A.l,X [Reads: Accumulator, X Index]
	eor $6B63.w,X		; 5D 63 6B ; Exclusive OR accumulator with memory $6B63.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $959196.l,X		; 1F 96 91 95 ; Logical OR long $959196.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $9F91.w		; 8D 91 9F ; Store accumulator to $9F91.w [Reads: Accumulator]
	.db $90, $83		; 90 83 ; Branch if carry clear to $90, $83 [Flow: branch]
	sta $8983.w		; 8D 83 89 ; Store accumulator to $8983.w [Reads: Accumulator]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora $3844.w,X		; 1D 44 38 ; OR accumulator with memory $3844.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $9F.b		; 45 9F ; Exclusive OR $9F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$49.b]		; 47 49 ; Exclusive OR accumulator with memory (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $3E.b		; 46 3E ; Logical shift right $3E.b [Reads: Direct Page] [Flags: NCZ]
	eor #$38.b		; 49 38 ; Exclusive OR #$38.b with accumulator [Writes: Accumulator] [Flags: NZ]
	mvp $3C,$44		; 44 44 3C ; Move block positive $3C,$44 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor #$08.b		; 49 08 ; Exclusive OR #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $6F5D75.l,X		; 1F 75 5D 6F ; Logical OR long $6F5D75.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($6A.b),Y		; 71 6A ; Add with carry ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $656E.w,X		; 5D 6E 65 ; Exclusive OR accumulator with memory $656E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $616B6F.l,X		; 9F 6F 6B 61 ; Store accumulator (long,X) $616B6F.l,X [Reads: Accumulator, X Index]
	ror $65.b		; 66 65 ; Rotate right $65.b [Reads: Direct Page] [Flags: NCZ]
	adc #$5D.b		; 69 5D ; Add #$5D.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $95839B.l,X		; 1F 9B 83 95 ; Logical OR long $95839B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$90.b],Y		; 97 90 ; Store accumulator (long indexed) [$90.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta $94.b,S		; 83 94 ; Store accumulator (stack relative) $94.b,S [Reads: Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $879195.l,X		; 9F 95 91 87 ; Store accumulator (long,X) $879195.l,X [Reads: Accumulator, X Index]
	sty $8F8B.w		; 8C 8B 8F ; Store Y register to $8F8B.w [Reads: Y Index]
	sta $09.b,S		; 83 09 ; Store accumulator (stack relative) $09.b,S [Reads: Stack Pointer, Accumulator]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc [$5D.b]		; 67 5D ; Add with carry (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror $71.b,X		; 76 71 ; Rotate right $71.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $6567.w,X		; 5D 67 65 ; Exclusive OR accumulator with memory $6567.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $6E6B69.l,X		; 9F 69 6B 6E ; Store accumulator (long,X) $6E6B69.l,X [Reads: Accumulator, X Index]
	adc $70.b		; 65 70 ; Add $70.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor $1B09.w,X		; 5D 09 1B ; Exclusive OR accumulator with memory $1B09.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $9C83.w		; 8D 83 9C ; Store accumulator to $9C83.w [Reads: Accumulator]
	sta [$83.b],Y		; 97 83 ; Store accumulator (long indexed) [$83.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta $9F8B.w		; 8D 8B 9F ; Store accumulator to $9F8B.w [Reads: Accumulator]
	sta $8B9491.l		; 8F 91 94 8B ; Store accumulator (long) $8B9491.l [Reads: Accumulator]
	stx $83.b,Y		; 96 83 ; Store X register $83.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $29.b,X		; 15 29 ; OR accumulator with memory $29.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jsr $1A2B.w		; 20 2B 1A ; Jump to subroutine at $1A2B.w [Writes: Stack Pointer] [Flow: call]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: NCZ]
	asl $2C2B.w,X		; 1E 2B 2C ; Arithmetic shift left $2C2B.w,X [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $705D70.l,X		; 1F 70 5D 70 ; Logical OR long $705D70.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $9F6B71.l		; 6F 71 6B 9F ; Add with carry (long) $9F6B71.l [Writes: Accumulator] [Flags: NCVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $6F.b		; 65 6F ; Add $6F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $65.b		; 64 65 ; Store zero to $65.b
	adc $5D.b,X		; 75 5D ; Add $5D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$5D.b		; 69 5D ; Add #$5D.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $968396.l,X		; 1F 96 83 96 ; Logical OR long $968396.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $97.b,X		; 95 97 ; Store accumulator to $97.b,X [Reads: Accumulator, X Index]
	sta ($9F.b),Y		; 91 9F ; Store accumulator ($9F.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $8B		; 90 8B ; Branch if carry clear to $90, $8B [Flow: branch]
	sta $8A.b,X		; 95 8A ; Store accumulator to $8A.b,X [Reads: Accumulator, X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta $8F.b,S		; 83 8F ; Store accumulator (stack relative) $8F.b,S [Reads: Stack Pointer, Accumulator]
	sta $08.b,S		; 83 08 ; Store accumulator (stack relative) $08.b,S [Reads: Stack Pointer, Accumulator]
	ora $7175.w,X		; 1D 75 71 ; OR accumulator with memory $7175.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $5F.b		; 65 5F ; Add $5F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $65.b		; 64 65 ; Store zero to $65.b
	sta $695D75.l,X		; 9F 75 5D 69 ; Store accumulator (long,X) $695D75.l,X [Reads: Accumulator, X Index]
	eor $6B69.w,X		; 5D 69 6B ; Exclusive OR accumulator with memory $6B69.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $6B		; 70 6B ; Branch if overflow set to $70, $6B [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $979B.w,X		; 1D 9B 97 ; OR accumulator with memory $979B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $8F839B.l,X		; 9F 9B 83 8F ; Store accumulator (long,X) $8F839B.l,X [Reads: Accumulator, X Index]
	sta $8F.b,S		; 83 8F ; Store accumulator (stack relative) $8F.b,S [Reads: Stack Pointer, Accumulator]
	sta ($96.b),Y		; [PATTERN: Memory clearing operation] 91 96 ; Store accumulator ($96.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora $6F6B75.l,X		; 1F 75 6B 6F ; Logical OR long $6F6B75.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $65.b		; 64 65 ; Store zero to $65.b
	stz $65.b		; 64 65 ; Store zero to $65.b
	ror $9F6B.w		; 6E 6B 9F ; Rotate right $9F6B.w [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc #$6B.b		; 69 6B ; Add #$6B.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $6B		; 70 6B ; Branch if overflow set to $70, $6B [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $95919B.l,X		; 1F 9B 91 95 ; Logical OR long $95919B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $91.b,X		; 94 91 ; Store Y register $91.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta $8F9190.l,X		; 9F 90 91 8F ; Store accumulator (long,X) $8F9190.l,X [Reads: Accumulator, X Index]
	sta ($96.b),Y		; 91 96 ; Store accumulator ($96.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($0B.b),Y		; 91 0B ; Store accumulator ($0B.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($61.b),Y		; 11 61 ; OR accumulator with memory ($61.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $66.b		; 65 66 ; Add $66.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $9F.b		; 65 9F ; Add $9F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $6B		; 70 6B ; Branch if overflow set to $70, $6B [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($87.b),Y		; 11 87 ; OR accumulator with memory ($87.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $9F8B.w		; 8C 8B 9F ; Store Y register to $9F8B.w [Reads: Y Index]
	.db $90, $91		; 90 91 ; Branch if carry clear to $90, $91 [Flow: branch]
	stx $91.b,Y		; 96 91 ; Store X register $91.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $5D6F.w,X		; 1D 6F 5D ; OR accumulator with memory $5D6F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $6B		; 70 6B ; Branch if overflow set to $70, $6B [Flow: branch]
	ror $9F71.w		; 6E 71 9F ; Rotate right $9F71.w [Flags: NCZ]
	.db $70, $5D		; 70 5D ; Branch if overflow set to $70, $5D [Flow: branch]
	adc [$5D.b]		; 67 5D ; Add with carry (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $5D.b		; 64 5D ; Store zero to $5D.b
	.db $70, $5D		; 70 5D ; Branch if overflow set to $70, $5D [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $8395.w,X		; 1D 95 83 ; OR accumulator with memory $8395.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stx $91.b,Y		; 96 91 ; Store X register $91.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sty $97.b,X		; 94 97 ; Store Y register $97.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta $8D8396.l,X		; 9F 96 83 8D ; Store accumulator (long,X) $8D8396.l,X [Reads: Accumulator, X Index]
	sta $8A.b,S		; 83 8A ; Store accumulator (stack relative) $8A.b,S [Reads: Stack Pointer, Accumulator]
	sta $96.b,S		; 83 96 ; Store accumulator (stack relative) $96.b,S [Reads: Stack Pointer, Accumulator]
	sta $09.b,S		; 83 09 ; Store accumulator (stack relative) $09.b,S [Reads: Stack Pointer, Accumulator]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($0E.b)		; 12 0E ; OR accumulator with memory (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $0D.b		; 14 0D ; Test and reset bits $0D.b [Reads: Accumulator] [Flags: Z]
	ora $9F.b,S		; 03 9F ; OR accumulator with stack relative $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0E0F.w		; 0C 0F 0E ; Test and set bits $0E0F.w [Reads: Accumulator] [Flags: Z]
	ora ($04.b)		; 12 04 ; OR accumulator with memory (indirect) ($04.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($0B.b),Y		; 11 0B ; OR accumulator with memory ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($67.b,S),Y		; 13 67 ; OR accumulator (stack relative indirect indexed) ($67.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror $65.b		; 66 65 ; Rotate right $65.b [Reads: Direct Page] [Flags: NCZ]
	sta $6A6B67.l,X		; 9F 67 6B 6A ; Store accumulator (long,X) $6A6B67.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($8D.b,S),Y		; 13 8D ; OR accumulator (stack relative indirect indexed) ($8D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($8C.b),Y		; 91 8C ; Store accumulator ($8C.b),Y [Reads: Direct Page, Y Index, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $90918D.l,X		; 9F 8D 91 90 ; Store accumulator (long,X) $90918D.l,X [Reads: Accumulator, X Index]
	stx $91.b		; 86 91 ; Store X register to $91.b [Reads: X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$3A.b],Y		; 17 3A ; OR accumulator with memory (long indexed) [$3A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $46.b		; 46 46 ; Logical shift right $46.b [Reads: Direct Page] [Flags: NCZ]
	eor #$3B.b		; 49 3B ; Exclusive OR #$3B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $38.b		; 45 38 ; Exclusive OR $38.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lsr $49.b		; 46 49 ; Logical shift right $49.b [Reads: Direct Page] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($67.b,S),Y		; 13 67 ; OR accumulator (stack relative indirect indexed) ($67.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($65.b,X)		; 61 65 ; Add with carry ($65.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $6B.b,X		; 76 6B ; Rotate right $6B.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sta $705D67.l,X		; 9F 67 5D 70 ; Store accumulator (long,X) $705D67.l,X [Reads: Accumulator, X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($8D.b,S),Y		; 13 8D ; OR accumulator (stack relative indirect indexed) ($8D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta [$8B.b]		; 87 8B ; Store accumulator (long) [$8B.b] [Reads: Direct Page, Accumulator]
	stz $9F91.w		; 9C 91 9F ; Store zero to $9F91.w
	sta $9683.w		; 8D 83 96 ; Store accumulator to $9683.w [Reads: Accumulator]
	sta ($0A.b),Y		; 91 0A ; Store accumulator ($0A.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora $5D70.w,Y		; 19 70 5D ; OR accumulator with memory $5D70.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$5D.b]		; 67 5D ; Add with carry (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $65646F.l,X		; 9F 6F 64 65 ; Store accumulator (long,X) $65646F.l,X [Reads: Accumulator, X Index]
	adc #$65.b		; 69 65 ; Add #$65.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ror $71.b,X		; 76 71 ; Rotate right $71.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $8396.w,Y		; 19 96 83 ; OR accumulator with memory $8396.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $9183.w		; 8D 83 91 ; Store accumulator to $9183.w [Reads: Accumulator]
	sta $8B8A95.l,X		; 9F 95 8A 8B ; Store accumulator (long,X) $8B8A95.l,X [Reads: Accumulator, X Index]
	sta $979C8B.l		; 8F 8B 9C 97 ; Store accumulator (long) $979C8B.l [Reads: Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $222B29.l,X		; 1F 29 2B 22 ; Logical OR long $222B29.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$2D.b]		; 27 2D ; AND accumulator with memory (long) [$2D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $9F1D.w,X		; 1E 1D 9F ; Arithmetic shift left $9F1D.w,X [Reads: X Index] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $309F.w		; 2D 9F 30 ; Logical AND $309F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $09.b		; 24 09 ; Test bits $09.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $6B75.w,Y		; 19 75 6B ; OR accumulator with memory $6B75.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $5F.b		; 65 5F ; Add $5F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $65.b		; 64 65 ; Store zero to $65.b
	sta $706B67.l,X		; 9F 67 6B 70 ; Store accumulator (long,X) $706B67.l,X [Reads: Accumulator, X Index]
	eor $615E.w,X		; 5D 5E 61 ; Exclusive OR accumulator with memory $615E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$19.b		; 09 19 ; Logical OR #$19.b with accumulator [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta ($8B.b),Y		; 91 8B ; Store accumulator ($8B.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $96918D.l,X		; 9F 8D 91 96 ; Store accumulator (long,X) $96918D.l,X [Reads: Accumulator, X Index]
	sta $84.b,S		; 83 84 ; Store accumulator (stack relative) $84.b,S [Reads: Stack Pointer, Accumulator]
	sta [$0A.b]		; 87 0A ; Store accumulator (long) [$0A.b] [Reads: Direct Page, Accumulator]
	ora [$64.b],Y		; 17 64 ; OR accumulator with memory (long indexed) [$64.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $60.b		; 65 60 ; Add $60.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($67.b,X)		; 61 67 ; Add with carry ($67.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $9F.b		; 65 9F ; Add $9F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $71, $66		; 62 71 66 ; Push effective relative address $62, $71, $66 [Writes: Stack Pointer]
	adc $65.b		; 65 65 ; Add $65.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$8A.b],Y		; 17 8A ; OR accumulator with memory (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	stx $87.b		; 86 87 ; Store X register to $87.b [Reads: X Index]
	sta $9F8B.w		; 8D 8B 9F ; Store accumulator to $9F8B.w [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$8C.b],Y		; 97 8C ; Store accumulator (long indexed) [$8C.b],Y [Reads: Direct Page, Y Index, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $6F6B75.l,X		; 1F 75 6B 6F ; Logical OR long $6F6B75.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $65.b		; 64 65 ; Store zero to $65.b
	eor $6567.w,X		; 5D 67 65 ; Exclusive OR accumulator with memory $6567.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $656B67.l,X		; 9F 67 6B 65 ; Store accumulator (long,X) $656B67.l,X [Reads: Accumulator, X Index]
	ror $71.b,X		; 76 71 ; Rotate right $71.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc #$65.b		; 69 65 ; Add #$65.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $95919B.l,X		; 1F 9B 91 95 ; Logical OR long $95919B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $8D.b,S		; 83 8D ; Store accumulator (stack relative) $8D.b,S [Reads: Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $8B918D.l,X		; 9F 8D 91 8B ; Store accumulator (long,X) $8B918D.l,X [Reads: Accumulator, X Index]
	stz $8F97.w		; 9C 97 8F ; Store zero to $8F97.w
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora #$1B.b		; 09 1B ; Logical OR #$1B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $5D.b,X		; 75 5D ; Add $5D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $656471.l		; 6F 71 64 65 ; Add with carry (long) $656471.l [Writes: Accumulator] [Flags: NCVZ]
	ror $9F6B.w		; 6E 6B 9F ; Rotate right $9F6B.w [Flags: NCZ]
	adc $5D675D.l		; 6F 5D 67 5D ; Add with carry (long) $5D675D.l [Writes: Accumulator] [Flags: NCVZ]
	adc $09.b		; 65 09 ; Add $09.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta $95.b,S		; 83 95 ; Store accumulator (stack relative) $95.b,S [Reads: Stack Pointer, Accumulator]
	sta [$8A.b],Y		; 97 8A ; Store accumulator (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $91.b,X		; 94 91 ; Store Y register $91.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta $8D8395.l,X		; 9F 95 83 8D ; Store accumulator (long,X) $8D8395.l,X [Reads: Accumulator, X Index]
	sta $8B.b,S		; 83 8B ; Store accumulator (stack relative) $8B.b,S [Reads: Stack Pointer, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $6B70.w,X		; 1D 70 6B ; OR accumulator with memory $6B70.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$6B.b		; 69 6B ; Add #$6B.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor $6567.w,X		; 5D 67 65 ; Exclusive OR accumulator with memory $6567.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $6E7167.l,X		; 9F 67 71 6E ; Store accumulator (long,X) $6E7167.l,X [Reads: Accumulator, X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($69.b),Y		; 71 69 ; Add with carry ($69.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($08.b,X)		; 61 08 ; Add with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $9196.w,X		; 1D 96 91 ; OR accumulator with memory $9196.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $8D8391.l		; 8F 91 83 8D ; Store accumulator (long) $8D8391.l [Reads: Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $94978D.l,X		; 9F 8D 97 94 ; Store accumulator (long,X) $94978D.l,X [Reads: Accumulator, X Index]
	sta ($97.b),Y		; 91 97 ; Store accumulator ($97.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $210787.l		; 8F 87 07 21 ; Store accumulator (long) $210787.l [Reads: Accumulator]
	ora ($0F.b)		; 12 0F ; OR accumulator with memory (indirect) ($0F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $000713.l,X		; 9F 13 07 00 ; Store accumulator (long,X) $000713.l,X [Reads: Accumulator, X Index]
	ora $120A.w		; 0D 0A 12 ; Logical OR $120A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $090E13.l,X		; 9F 13 0E 09 ; Store accumulator (long,X) $090E13.l,X [Reads: Accumulator, X Index]
	ora $6B6A.w,Y		; 19 6A 6B ; OR accumulator with memory $6B6A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $6B71.w,X		; 5E 71 6B ; Logical shift right $6B71.w,X [Reads: X Index] [Flags: NCZ]
	sta $5D676B.l,X		; 9F 6B 67 5D ; Store accumulator (long,X) $5D676B.l,X [Reads: Accumulator, X Index]
	ror $65.b		; 66 65 ; Rotate right $65.b [Reads: Direct Page] [Flags: NCZ]
	adc #$5D.b		; 69 5D ; Add #$5D.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora #$19.b		; 09 19 ; Logical OR #$19.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $90, $91		; 90 91 ; Branch if carry clear to $90, $91 [Flow: branch]
	sty $97.b		; 84 97 ; Store Y register to $97.b [Reads: Y Index]
	sta ($9F.b),Y		; 91 9F ; Store accumulator ($9F.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($8D.b),Y		; 91 8D ; Store accumulator ($8D.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $8C.b,S		; 83 8C ; Store accumulator (stack relative) $8C.b,S [Reads: Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $210783.l		; 8F 83 07 21 ; Store accumulator (long) $210783.l [Reads: Accumulator]
	adc $5D.b,X		; 75 5D ; Add $5D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $6B6A71.l		; 6F 71 6A 6B ; Add with carry (long) $6B6A71.l [Writes: Accumulator] [Flags: NCVZ]
	ror $9F65.w		; 6E 65 9F ; Rotate right $9F65.w [Flags: NCZ]
	.db $70, $5D		; 70 5D ; Branch if overflow set to $70, $5D [Flow: branch]
	adc [$61.b]		; 67 61 ; Add with carry (long) [$61.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $5D		; 70 5D ; Branch if overflow set to $70, $5D [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $07.b		; 65 07 ; Add $07.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and ($9B.b,X)		; 21 9B ; Logical AND ($9B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $95.b,S		; 83 95 ; Store accumulator (stack relative) $95.b,S [Reads: Stack Pointer, Accumulator]
	sta [$90.b],Y		; 97 90 ; Store accumulator (long indexed) [$90.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($94.b),Y		; 91 94 ; Store accumulator ($94.b),Y [Reads: Direct Page, Y Index, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $8D8396.l,X		; 9F 96 83 8D ; Store accumulator (long,X) $8D8396.l,X [Reads: Accumulator, X Index]
	sta [$96.b]		; 87 96 ; Store accumulator (long) [$96.b] [Reads: Direct Page, Accumulator]
	sta $90.b,S		; 83 90 ; Store accumulator (stack relative) $90.b,S [Reads: Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$67.b],Y		; 17 67 ; OR accumulator with memory (long indexed) [$67.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $75.b		; 65 75 ; Add $75.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $9F6564.l		; 6F 64 65 9F ; Add with carry (long) $9F6564.l [Writes: Accumulator] [Flags: NCVZ]
	adc [$6B.b]		; 67 6B ; Add with carry (long) [$6B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $170A.w,X		; 5D 0A 17 ; Exclusive OR accumulator with memory $170A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $9B8B.w		; 8D 8B 9B ; Store accumulator to $9B8B.w [Reads: Accumulator]
	sta ($95.b),Y		; 91 95 ; Store accumulator ($95.b),Y [Reads: Direct Page, Y Index, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $86918D.l,X		; 9F 8D 91 86 ; Store accumulator (long,X) $86918D.l,X [Reads: Accumulator, X Index]
	sta $07.b,S		; 83 07 ; Store accumulator (stack relative) $07.b,S [Reads: Stack Pointer, Accumulator]
	and $70.b,S		; 23 70 ; AND accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $5D67.w,X		; 5D 67 5D ; Exclusive OR accumulator with memory $5D67.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$65.b		; 69 65 ; Add #$65.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $6F		; 70 6F ; Branch if overflow set to $70, $6F [Flow: branch]
	adc ($9F.b),Y		; 71 9F ; Add with carry ($9F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$71.b]		; 67 71 ; Add with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror $71.b,X		; 76 71 ; Rotate right $71.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	stz $5D.b		; 64 5D ; Store zero to $5D.b
	ror $075D.w		; 6E 5D 07 ; Rotate right $075D.w [Flags: NCZ]
	and $96.b,S		; 23 96 ; AND accumulator with stack relative $96.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $8D.b,S		; 83 8D ; Store accumulator (stack relative) $8D.b,S [Reads: Stack Pointer, Accumulator]
	sta $8F.b,S		; 83 8F ; Store accumulator (stack relative) $8F.b,S [Reads: Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	stx $95.b,Y		; 96 95 ; Store X register $95.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$9F.b],Y		; 97 9F ; Store accumulator (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta $9C97.w		; 8D 97 9C ; Store accumulator to $9C97.w [Reads: Accumulator]
	sta [$8A.b],Y		; 97 8A ; Store accumulator (long indexed) [$8A.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta $94.b,S		; 83 94 ; Store accumulator (stack relative) $94.b,S [Reads: Stack Pointer, Accumulator]
	sta $09.b,S		; 83 09 ; Store accumulator (stack relative) $09.b,S [Reads: Stack Pointer, Accumulator]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	stz $65.b		; 64 65 ; Store zero to $65.b
	ror $6A6B.w		; 6E 6B 6A ; Rotate right $6A6B.w [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr $9F71.w,X		; 5E 71 9F ; Logical shift right $9F71.w,X [Reads: X Index] [Flags: NCZ]
	adc [$5D.b]		; 67 5D ; Add with carry (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc [$71.b]		; 67 71 ; Add with carry (long) [$71.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $09.b		; 65 09 ; Add $09.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $91.b,X		; 94 91 ; Store Y register $91.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	.db $90, $91		; 90 91 ; Branch if carry clear to $90, $91 [Flow: branch]
	sty $97.b		; 84 97 ; Store Y register to $97.b [Reads: Y Index]
	sta $8D838D.l,X		; 9F 8D 83 8D ; Store accumulator (long,X) $8D838D.l,X [Reads: Accumulator, X Index]
	sta [$8B.b],Y		; 97 8B ; Store accumulator (long indexed) [$8B.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora [$21.b]		; 07 21 ; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $636564.l		; 6F 64 65 63 ; Add with carry (long) $636564.l [Writes: Accumulator] [Flags: NCVZ]
	adc ($67.b,X)		; 61 67 ; Add with carry ($67.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $9F.b		; 65 9F ; Add $9F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $5D.b,X		; 75 5D ; Add $5D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$5D.b		; 69 5D ; Add #$5D.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $6E6564.l		; 6F 64 65 6E ; Add with carry (long) $6E6564.l [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$21.b]		; 07 21 ; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $8A.b,X		; 95 8A ; Store accumulator to $8A.b,X [Reads: Accumulator, X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	bit #$87.b		; 89 87 ; Test bits #$87.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta $9F8B.w		; 8D 8B 9F ; Store accumulator to $9F8B.w [Reads: Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta $8F.b,S		; 83 8F ; Store accumulator (stack relative) $8F.b,S [Reads: Stack Pointer, Accumulator]
	sta $95.b,S		; 83 95 ; Store accumulator (stack relative) $95.b,S [Reads: Stack Pointer, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $91.b,X		; 94 91 ; Store Y register $91.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora [$21.b]		; 07 21 ; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $39.b		; 46 39 ; Logical shift right $39.b [Reads: Direct Page] [Flags: NCZ]
	eor ($3C.b,X)		; 41 3C ; Exclusive OR accumulator with memory ($3C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sta $464947.l,X		; 9F 47 49 46 ; Store accumulator (long,X) $464947.l,X [Reads: Accumulator, X Index]
	rol $3849.w,X		; 3E 49 38 ; Rotate left $3849.w,X [Reads: X Index] [Flags: NCZ]
	mvp $3C,$44		; 44 44 3C ; Move block positive $3C,$44 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor #$09.b		; 49 09 ; Exclusive OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $70, $6B		; 70 6B ; Branch if overflow set to $70, $6B [Flow: branch]
	adc $6B6564.l		; 6F 64 65 6B ; Add with carry (long) $6B6564.l [Writes: Accumulator] [Flags: NCVZ]
	sta $5D7365.l,X		; 9F 65 73 5D ; Store accumulator (long,X) $5D7365.l,X [Reads: Accumulator, X Index]
	adc ($5D.b,S),Y		; 73 5D ; Add with carry (stack relative indirect indexed) ($5D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc [$65.b]		; 67 65 ; Add with carry (long) [$65.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora #$1B.b		; 09 1B ; Logical OR #$1B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $91.b,Y		; 96 91 ; Store X register $91.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $8A.b,X		; 95 8A ; Store accumulator to $8A.b,X [Reads: Accumulator, X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta ($9F.b),Y		; 91 9F ; Store accumulator ($9F.b),Y [Reads: Direct Page, Y Index, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $9983.w,Y		; 99 83 99 ; Store accumulator to $9983.w,Y [Reads: Y Index, Accumulator]
	sta $8D.b,S		; 83 8D ; Store accumulator (stack relative) $8D.b,S [Reads: Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	asl $25.b		; 06 25 ; Arithmetic shift left $25.b [Reads: Direct Page] [Flags: NCZ]
	adc $636564.l		; 6F 64 65 63 ; Add with carry (long) $636564.l [Writes: Accumulator] [Flags: NCVZ]
	adc ($64.b,X)		; 61 64 ; Add with carry ($64.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $6E.b		; 65 6E ; Add $6E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $6F5D67.l,X		; 9F 67 5D 6F ; Store accumulator (long,X) $6F5D67.l,X [Reads: Accumulator, X Index]
	eor $5D69.w,X		; 5D 69 5D ; Exclusive OR accumulator with memory $5D69.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $6F		; 70 6F ; Branch if overflow set to $70, $6F [Flow: branch]
	adc ($06.b),Y		; 71 06 ; Add with carry ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $95.b		; 25 95 ; Logical AND $95.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	bit #$87.b		; 89 87 ; Test bits #$87.b with accumulator [Reads: Accumulator] [Flags: Z]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $91.b,X		; 94 91 ; Store Y register $91.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta $95838D.l,X		; 9F 8D 83 95 ; Store accumulator (long,X) $95838D.l,X [Reads: Accumulator, X Index]
	sta $8F.b,S		; 83 8F ; Store accumulator (stack relative) $8F.b,S [Reads: Stack Pointer, Accumulator]
	sta $96.b,S		; 83 96 ; Store accumulator (stack relative) $96.b,S [Reads: Stack Pointer, Accumulator]
	sta $97.b,X		; 95 97 ; Store accumulator to $97.b,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $716D.w,Y		; 19 6D 71 ; OR accumulator with memory $716D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($6F.b,X)		; 61 6F ; Add with carry ($6F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $9F		; 70 9F ; Branch if overflow set to $70, $9F [Flow: branch]
	stz $65.b		; 64 65 ; Store zero to $65.b
	adc $6E6B70.l		; 6F 70 6B 6E ; Add with carry (long) $6E6B70.l [Writes: Accumulator] [Flags: NCVZ]
	adc $0A.b,X		; 75 0A ; Add $0A.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $9793.w,Y		; 19 93 97 ; OR accumulator with memory $9793.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta [$95.b]		; 87 95 ; Store accumulator (long) [$95.b] [Reads: Direct Page, Accumulator]
	stx $9F.b,Y		; 96 9F ; Store X register $9F.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $96.b,X		; 95 96 ; Store accumulator to $96.b,X [Reads: Accumulator, X Index]
	sta ($94.b),Y		; 91 94 ; Store accumulator ($94.b),Y [Reads: Direct Page, Y Index, Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0002.w		; 0E 02 00 ; Arithmetic shift left $0002.w [Flags: NCZ]
	ora ($08.b,S),Y		; 13 08 ; OR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $9F0D.w		; 0E 0D 9F ; Arithmetic shift left $9F0D.w [Flags: NCZ]
	sta $9F9F9F.l,X		; 9F 9F 9F 9F ; Store accumulator (long,X) $9F9F9F.l,X [Reads: Accumulator, X Index]
	sta $9F9F9F.l,X		; 9F 9F 9F 9F ; Store accumulator (long,X) $9F9F9F.l,X [Reads: Accumulator, X Index]
	sta $9F9F9F.l,X		; 9F 9F 9F 9F ; Store accumulator (long,X) $9F9F9F.l,X [Reads: Accumulator, X Index]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	tsb $1204.w		; 0C 04 12 ; Test and set bits $1204.w [Reads: Accumulator] [Flags: Z]
	tsb $1F.b		; 04 1F ; Test and set bits $1F.b [Reads: Accumulator] [Flags: Z]
	trb $2C1A.w		; 1C 1A 2C ; Test and reset bits $2C1A.w [Reads: Accumulator] [Flags: Z]
	and $1E25.w		; 2D 25 1E ; Logical AND $1E25.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9F1F28.l,X		; 9F 28 1F 9F ; Store accumulator (long,X) $9F1F28.l,X [Reads: Accumulator, X Index]
	and ($32.b,X)		; 21 32 ; Logical AND ($32.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	rol $1E25.w		; 2E 25 1E ; Rotate left $1E25.w [Flags: NCZ]
	tsb $1B.b		; 04 1B ; Test and set bits $1B.b [Reads: Accumulator] [Flags: Z]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor $3C.b,S		; 43 3C ; Exclusive OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $454C3B.l,X		; 9F 3B 4C 45 ; Store accumulator (long,X) $454C3B.l,X [Reads: Accumulator, X Index]
	rol $463C.w,X		; 3E 3C 46 ; Rotate left $463C.w,X [Reads: X Index] [Flags: NCZ]
	eor $04.b		; 45 04 ; Exclusive OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1E.b,X		; 15 1E ; OR accumulator with memory $1E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $9F2D.w		; 2C 2D 9F ; Test bits $9F2D.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and #$1A.b		; 29 1A ; Logical AND #$1A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and $1A.b		; 25 1A ; Logical AND $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $041E.w		; 1C 1E 04 ; Test and reset bits $041E.w [Reads: Accumulator] [Flags: Z]
	ora $3C3B.w,Y		; 19 3B 3C ; OR accumulator with memory $3C3B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $4B49.w,X		; 3C 49 4B ; Test bits $4B49.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sta $433847.l,X		; 9F 47 38 43 ; Store accumulator (long,X) $433847.l,X [Reads: Accumulator, X Index]
	sec		; 38 ; Set carry flag [Flags: C]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $1B04.w,X		; 3C 04 1B ; Test bits $1B04.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	rol $28.b		; 26 28 ; Rotate left $28.b [Reads: Direct Page] [Flags: NCZ]
	rol $2D27.w		; 2E 27 2D ; Rotate left $2D27.w [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsl $2D9F27.l		; 22 27 9F 2D ; Jump to subroutine long $2D9F27.l [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $30, $1E		; 30 1E ; Branch if minus to $30, $1E [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $9F54.w,Y		; 19 54 9F ; OR accumulator with memory $9F54.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $676E.w,X		; 5D 6E 67 ; Exclusive OR accumulator with memory $676E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $685D6C.l,X		; 9F 6C 5D 68 ; Store accumulator (long,X) $685D6C.l,X [Reads: Accumulator, X Index]
	eor $615F.w,X		; 5D 5F 61 ; Exclusive OR accumulator with memory $615F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $23.b,S		; 03 23 ; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $15.b		; 04 15 ; Test and set bits $15.b [Reads: Accumulator] [Flags: Z]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sta $948386.l,X		; 9F 86 83 94 ; Store accumulator (long,X) $948386.l,X [Reads: Accumulator, X Index]
	sta $929F.w		; 8D 9F 92 ; Store accumulator to $929F.w [Reads: Accumulator]
	sta $8E.b,S		; 83 8E ; Store accumulator (stack relative) $8E.b,S [Reads: Stack Pointer, Accumulator]
	sta $85.b,S		; 83 85 ; Store accumulator (stack relative) $85.b,S [Reads: Stack Pointer, Accumulator]
	sta [$08.b]		; 87 08 ; Store accumulator (long) [$08.b] [Reads: Direct Page, Accumulator]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor $9F.b,X		; 55 9F ; Exclusive OR accumulator with memory $9F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $695D73.l		; 6F 73 5D 69 ; Add with carry (long) $695D73.l [Writes: Accumulator] [Flags: NCVZ]
	jmp ($6C9F.w)		; 6C 9F 6C ; Jump indirect to ($6C9F.w) [Flow: jump]
	eor $5D68.w,X		; 5D 68 5D ; Exclusive OR accumulator with memory $5D68.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $250361.l,X		; 5F 61 03 25 ; Exclusive OR accumulator with memory (long,X) $250361.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $15.b		; 04 15 ; Test and set bits $15.b [Reads: Accumulator] [Flags: Z]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $839995.l,X		; 9F 95 99 83 ; Store accumulator (long,X) $839995.l,X [Reads: Accumulator, X Index]
	sta $929F92.l		; 8F 92 9F 92 ; Store accumulator (long) $929F92.l [Reads: Accumulator]
	sta $8E.b,S		; 83 8E ; Store accumulator (stack relative) $8E.b,S [Reads: Stack Pointer, Accumulator]
	sta $85.b,S		; 83 85 ; Store accumulator (stack relative) $85.b,S [Reads: Stack Pointer, Accumulator]
	sta [$08.b]		; 87 08 ; Store accumulator (long) [$08.b] [Reads: Direct Page, Accumulator]
	ora $9F56.w,Y		; 19 56 9F ; OR accumulator with memory $9F56.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $687167.l		; 6F 67 71 68 ; Add with carry (long) $687167.l [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $6B6B73.l,X		; 9F 73 6B 6B ; Store accumulator (long,X) $6B6B73.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $0B2303.l		; 6F 03 23 0B ; Add with carry (long) $0B2303.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $15.b		; 04 15 ; Test and set bits $15.b [Reads: Accumulator] [Flags: Z]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	jmp ($959F.w,X)		; 7C 9F 95 ; Jump indirect indexed to ($959F.w,X) [Reads: X Index] [Flow: jump]
	sta $8E97.w		; 8D 97 8E ; Store accumulator to $8E97.w [Reads: Accumulator]
	stx $999F.w		; 8E 9F 99 ; Store X register to $999F.w [Reads: X Index]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	stx $95.b		; 86 95 ; Store X register to $95.b [Reads: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$9F.b],Y		; 57 9F ; Exclusive OR accumulator with memory (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $64		; 70 64 ; Branch if overflow set to $70, $64 [Flow: branch]
	adc $61.b		; 65 61 ; Add $61.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($61.b)		; 72 61 ; Add with carry (indirect) ($61.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $6B7077.l		; 6F 77 70 6B ; Add with carry (long) $6B7077.l [Writes: Accumulator] [Flags: NCVZ]
	adc ($6A.b,S),Y		; 73 6A ; Add with carry (stack relative indirect indexed) ($6A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $25.b,S		; 03 25 ; OR accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $15.b		; 04 15 ; Test and set bits $15.b [Reads: Accumulator] [Flags: Z]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	adc $969F.w,X		; 7D 9F 96 ; Add $969F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta [$98.b]		; 87 98 ; Store accumulator (long) [$98.b] [Reads: Direct Page, Accumulator]
	sta [$95.b]		; 87 95 ; Store accumulator (long) [$95.b] [Reads: Direct Page, Accumulator]
	sta $9196.w,X		; 9D 96 91 ; Store accumulator to $9196.w,X [Reads: Accumulator, X Index]
	sta $0890.w,Y		; 99 90 08 ; Store accumulator to $0890.w,Y [Reads: Y Index, Accumulator]
	ora [$58.b],Y		; 17 58 ; OR accumulator with memory (long indexed) [$58.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $615F65.l,X		; 9F 65 5F 61 ; Store accumulator (long,X) $615F65.l,X [Reads: Accumulator, X Index]
	sta $685D6C.l,X		; 9F 6C 5D 68 ; Store accumulator (long,X) $685D6C.l,X [Reads: Accumulator, X Index]
	eor $615F.w,X		; 5D 5F 61 ; Exclusive OR accumulator with memory $615F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $21.b,S		; 03 21 ; OR accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $15.b		; 04 15 ; Test and set bits $15.b [Reads: Accumulator] [Flags: Z]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	ror $8B9F.w,X		; 7E 9F 8B ; Rotate right $8B9F.w,X [Reads: X Index] [Flags: NCZ]
	sta $87.b		; 85 87 ; Store accumulator to $87.b [Reads: Accumulator]
	sta $8E8392.l,X		; 9F 92 83 8E ; Store accumulator (long,X) $8E8392.l,X [Reads: Accumulator, X Index]
	sta $85.b,S		; 83 85 ; Store accumulator (stack relative) $85.b,S [Reads: Stack Pointer, Accumulator]
	sta [$08.b]		; 87 08 ; Store accumulator (long) [$08.b] [Reads: Direct Page, Accumulator]
	ora $9F59.w,Y		; 19 59 9F ; OR accumulator with memory $9F59.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc #$65.b		; 69 65 ; Add #$65.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $756E61.l		; 6F 61 6E 75 ; Add with carry (long) $756E61.l [Writes: Accumulator] [Flags: NCVZ]
	sta $6E6569.l,X		; 9F 69 65 6E ; Store accumulator (long,X) $6E6569.l,X [Reads: Accumulator, X Index]
	adc ($03.b,X)		; 61 03 ; Add with carry ($03.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $0B.b,S		; 23 0B ; AND accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $15.b		; 04 15 ; Test and set bits $15.b [Reads: Accumulator] [Flags: Z]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	adc $8B8F9F.l,X		; 7F 9F 8F 8B ; Add long $8B8F9F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $87.b,X		; 95 87 ; Store accumulator to $87.b,X [Reads: Accumulator, X Index]
	sty $9B.b,X		; 94 9B ; Store Y register $9B.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta $948B8F.l,X		; 9F 8F 8B 94 ; Store accumulator (long,X) $948B8F.l,X [Reads: Accumulator, X Index]
	sta [$08.b]		; 87 08 ; Store accumulator (long) [$08.b] [Reads: Direct Page, Accumulator]
	ora $9F5A.w,Y		; 19 5A 9F ; OR accumulator with memory $9F5A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $71		; 70 71 ; Branch if overflow set to $70, $71 [Flow: branch]
	ror $6870.w		; 6E 70 68 ; Rotate right $6870.w [Flags: NCZ]
	adc ($9F.b,X)		; 61 9F ; Add with carry ($9F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $5F6B.w		; 6E 6B 5F ; Rotate right $5F6B.w [Flags: NCZ]
	adc [$03.b]		; 67 03 ; Add with carry (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $0B.b,S		; 23 0B ; AND accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $15.b		; 04 15 ; Test and set bits $15.b [Reads: Accumulator] [Flags: Z]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	.db $80, $9F		; 80 9F ; Branch always to $80, $9F [Flow: branch]
	stx $97.b,Y		; 96 97 ; Store X register $97.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sty $96.b,X		; 94 96 ; Store Y register $96.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	stx $9F87.w		; 8E 87 9F ; Store X register to $9F87.w [Reads: X Index]
	sty $91.b,X		; 94 91 ; Store Y register $91.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta $8D.b		; 85 8D ; Store accumulator to $8D.b [Reads: Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $9F5B.w,X		; 1D 5B 9F ; OR accumulator with memory $9F5B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $5D.b,S		; 63 5D ; Add with carry (stack relative) $5D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc [$6F.b],Y		; 77 6F ; Add with carry (long indexed) [$6F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $736B70.l,X		; 9F 70 6B 73 ; Store accumulator (long,X) $736B70.l,X [Reads: Accumulator, X Index]
	adc ($6E.b,X)		; 61 6E ; Add with carry ($6E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $27.b,S		; 03 27 ; OR accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $15.b		; 04 15 ; Test and set bits $15.b [Reads: Accumulator] [Flags: Z]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	sta ($9F.b,X)		; 81 9F ; Store accumulator ($9F.b,X) [Reads: Direct Page, Accumulator, X Index]
	bit #$83.b		; 89 83 ; Test bits #$83.b with accumulator [Reads: Accumulator] [Flags: Z]
	.db $90, $91		; 90 91 ; Branch if carry clear to $90, $91 [Flow: branch]
	.db $90, $9D		; 90 9D ; Branch if carry clear to $90, $9D [Flow: branch]
	sta $9F.b,X		; 95 9F ; Store accumulator to $9F.b,X [Reads: Accumulator, X Index]
	stx $91.b,Y		; 96 91 ; Store X register $91.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $9487.w,Y		; 99 87 94 ; Store accumulator to $9487.w,Y [Reads: Y Index, Accumulator]
	tsb $23.b		; 04 23 ; Test and set bits $23.b [Reads: Accumulator] [Flags: Z]
	.db $70, $6B		; 70 6B ; Branch if overflow set to $70, $6B [Flow: branch]
	.db $70, $5D		; 70 5D ; Branch if overflow set to $70, $5D [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $695D63.l,X		; 9F 63 5D 69 ; Store accumulator (long,X) $695D63.l,X [Reads: Accumulator, X Index]
	adc ($6F.b,X)		; 61 6F ; Add with carry ($6F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $5D686C.l,X		; 9F 6C 68 5D ; Store accumulator (long,X) $5D686C.l,X [Reads: Accumulator, X Index]
	adc $61.b,X		; 75 61 ; Add $61.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $23.b		; 04 23 ; Test and set bits $23.b [Reads: Accumulator] [Flags: Z]
	stx $91.b,Y		; 96 91 ; Store X register $91.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $83.b,Y		; 96 83 ; Store X register $83.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $899F.w		; 8E 9F 89 ; Store X register to $899F.w [Reads: X Index]
	sta $8F.b,S		; 83 8F ; Store accumulator (stack relative) $8F.b,S [Reads: Stack Pointer, Accumulator]
	sta [$95.b]		; 87 95 ; Store accumulator (long) [$95.b] [Reads: Direct Page, Accumulator]
	sta $838E92.l,X		; 9F 92 8E 83 ; Store accumulator (long,X) $838E92.l,X [Reads: Accumulator, X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta [$86.b]		; 87 86 ; Store accumulator (long) [$86.b] [Reads: Direct Page, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $6F5D75.l,X		; 1F 75 5D 6F ; Logical OR long $6F5D75.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($6A.b),Y		; 71 6A ; Add with carry ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $656E.w,X		; 5D 6E 65 ; Exclusive OR accumulator with memory $656E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $6F656A.l,X		; 9F 6A 65 6F ; Store accumulator (long,X) $6F656A.l,X [Reads: Accumulator, X Index]
	stz $65.b		; 64 65 ; Store zero to $65.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $1F08.w,X		; 5D 08 1F ; Exclusive OR accumulator with memory $1F08.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta $95.b,S		; 83 95 ; Store accumulator (stack relative) $95.b,S [Reads: Stack Pointer, Accumulator]
	sta [$90.b],Y		; 97 90 ; Store accumulator (long indexed) [$90.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta $94.b,S		; 83 94 ; Store accumulator (stack relative) $94.b,S [Reads: Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $958B90.l,X		; 9F 90 8B 95 ; Store accumulator (long,X) $958B90.l,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	stx $83.b		; 86 83 ; Store X register to $83.b [Reads: X Index]
	ora $2B.b		; 05 2B ; Logical OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $2027.w,X		; 1E 27 20 ; Arithmetic shift left $2027.w,X [Reads: X Index] [Flags: NCZ]
	and $22.b		; 25 22 ; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $9F21.w		; 2C 21 9F ; Test bits $9F21.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $2B1C.w		; 2C 1C 2B ; Test bits $2B1C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jsl $9F2D29.l		; 22 29 2D 9F ; Jump to subroutine long $9F2D29.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $2B		; 30 2B ; Branch if minus to $30, $2B [Flow: branch]
	jsl $2B1E2D.l		; 22 2D 1E 2B ; Jump to subroutine long $2B1E2D.l [Writes: Stack Pointer] [Flow: call]
	bit $170A.w		; 2C 0A 17 ; Test bits $170A.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $656A.w,X		; 5D 6A 65 ; Exclusive OR accumulator with memory $656A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($68.b,X)		; 61 68 ; Add with carry ($68.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $6F736B.l,X		; 9F 6B 73 6F ; Store accumulator (long,X) $6F736B.l,X [Reads: Accumulator, X Index]
	adc ($6A.b,X)		; 61 6A ; Add with carry ($6A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$86.b],Y		; 17 86 ; OR accumulator with memory (long indexed) [$86.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $90.b,S		; 83 90 ; Store accumulator (stack relative) $90.b,S [Reads: Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta [$8E.b]		; 87 8E ; Store accumulator (long) [$8E.b] [Reads: Direct Page, Accumulator]
	sta $959991.l,X		; 9F 91 99 95 ; Store accumulator (long,X) $959991.l,X [Reads: Accumulator, X Index]
	sta [$90.b]		; 87 90 ; Store accumulator (long) [$90.b] [Reads: Direct Page, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $6564.w,X		; 1D 64 65 ; OR accumulator with memory $6564.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $756B.w		; 6E 6B 75 ; Rotate right $756B.w [Flags: NCZ]
	adc ($67.b),Y		; 71 67 ; Add with carry ($67.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $9F.b		; 65 9F ; Add $9F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $5D.b,X		; 75 5D ; Add $5D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc #$5D.b		; 69 5D ; Add #$5D.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $1D08.w,X		; 5D 08 1D ; Exclusive OR accumulator with memory $1D08.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $91.b,X		; 94 91 ; Store Y register $91.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta [$8D.b],Y		; 97 8D ; Store accumulator (long indexed) [$8D.b],Y [Reads: Direct Page, Y Index, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $8F839B.l,X		; 9F 9B 83 8F ; Store accumulator (long,X) $8F839B.l,X [Reads: Accumulator, X Index]
	sta $86.b,S		; 83 86 ; Store accumulator (stack relative) $86.b,S [Reads: Stack Pointer, Accumulator]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $39.b		; 00 39 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($57.b,X)		; 01 57 ; Logical OR ($57.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($78.b,X)		; 01 78 ; Logical OR ($78.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($B0.b,X)		; 01 B0 ; Logical OR ($B0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C1.b		; 00 C1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($D4.b,X)		; 01 D4 ; Logical OR ($D4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b,X)		; 01 0B ; Logical OR ($0B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $62.b		; 02 62 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $91.b		; 02 91 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A3.b		; 00 A3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B4.b		; 02 B4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $D7.b		; 02 D7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E9.b		; 00 E9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F4.b		; 02 F4 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $43.b		; 05 43 ; Logical OR $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $53.b		; 00 53 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $68.b		; 05 68 ; Logical OR $68.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$5D.b]		; 07 5D ; OR accumulator with memory (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$14.b]		; 07 14 ; OR accumulator with memory (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $31.b		; 00 31 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3D.b,S		; 03 3D ; OR accumulator with stack relative $3D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $57.b		; 00 57 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $63.b,S		; 03 63 ; OR accumulator with stack relative $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $AE.b,S		; 03 AE ; OR accumulator with stack relative $AE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $CB.b,S		; 03 CB ; OR accumulator with stack relative $CB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $EB.b,S		; 03 EB ; OR accumulator with stack relative $EB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0D.b,S		; 03 0D ; OR accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $2E.b		; 04 2E ; Test and set bits $2E.b [Reads: Accumulator] [Flags: Z]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$14.b]		; 07 14 ; OR accumulator with memory (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$95.b]		; 07 95 ; OR accumulator with memory (long) [$95.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$14.b]		; 07 14 ; OR accumulator with memory (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A3.b		; 00 A3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$B4.b]		; 07 B4 ; OR accumulator with memory (long) [$B4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$14.b]		; 07 14 ; OR accumulator with memory (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $61.b		; 04 61 ; Test and set bits $61.b [Reads: Accumulator] [Flags: Z]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $83.b		; 04 83 ; Test and set bits $83.b [Reads: Accumulator] [Flags: Z]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $A4.b		; 04 A4 ; Test and set bits $A4.b [Reads: Accumulator] [Flags: Z]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B2.b		; 00 B2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $C6.b		; 04 C6 ; Test and set bits $C6.b [Reads: Accumulator] [Flags: Z]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $EA.b		; 04 EA ; Test and set bits $EA.b [Reads: Accumulator] [Flags: Z]
	tsb $14.b		; 04 14 ; Test and set bits $14.b [Reads: Accumulator] [Flags: Z]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0D.b		; 04 0D ; Test and set bits $0D.b [Reads: Accumulator] [Flags: Z]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $8C.b		; 05 8C ; Logical OR $8C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E6.b		; 00 E6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $14.b		; 05 14 ; Logical OR $14.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $38.b		; 06 38 ; Arithmetic shift left $38.b [Reads: Direct Page] [Flags: NCZ]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $5C.b		; 06 5C ; Arithmetic shift left $5C.b [Reads: Direct Page] [Flags: NCZ]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $80.b		; 06 80 ; Arithmetic shift left $80.b [Reads: Direct Page] [Flags: NCZ]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $95.b		; 00 95 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $A3.b		; 06 A3 ; Arithmetic shift left $A3.b [Reads: Direct Page] [Flags: NCZ]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $C5.b		; 06 C5 ; Arithmetic shift left $C5.b [Reads: Direct Page] [Flags: NCZ]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $E8.b		; 06 E8 ; Arithmetic shift left $E8.b [Reads: Direct Page] [Flags: NCZ]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0D.b		; 06 0D ; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: NCZ]
	ora [$14.b]		; 07 14 ; OR accumulator with memory (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$37.b]		; 07 37 ; OR accumulator with memory (long) [$37.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$90.b]		; 07 90 ; OR accumulator with memory (long) [$90.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $98.b		; 02 98 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A8.b		; 02 A8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B0.b		; 02 B0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $BA.b		; 02 BA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $C2.b		; 02 C2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $CA.b		; 02 CA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $D2.b		; 02 D2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $DA.b		; 02 DA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E2.b		; 02 E2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $EA.b		; 02 EA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F2.b		; 02 F2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $0089.w,X		; 3D 89 00 ; AND accumulator with memory $0089.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $008333.l		; 22 33 83 00 ; Jump to subroutine long $008333.l [Writes: Stack Pointer] [Flow: call]
	jsl $00E556.l		; 22 56 E5 00 ; Jump to subroutine long $00E556.l [Writes: Stack Pointer] [Flow: call]
	jsl $0286C0.l		; 22 C0 86 02 ; Jump to subroutine long $0286C0.l [Writes: Stack Pointer] [Flow: call]
	jsl $0CCA81.l		; 22 81 CA 0C ; Jump to subroutine long $0CCA81.l [Writes: Stack Pointer] [Flow: call]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13.b		; 85 13 ; Store accumulator to $13.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA9.w		; 8D A9 0A ; Store accumulator to $0AA9.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB2.w		; 8D B2 0A ; Store accumulator to $0AB2.w [Reads: Accumulator]
	jsl $1BEE52.l		; 22 52 EE 1B ; Jump to subroutine long $1BEE52.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3EF.l		; 8F EF F3 7E ; Store accumulator (long) $7EF3EF.l [Reads: Accumulator]
	lda $7EF403.l		; AF 03 F4 7E ; Load long $7EF403.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7EF401.l		; 6F 01 F4 7E ; Add with carry (long) $7EF401.l [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF401.l		; 8F 01 F4 7E ; Store accumulator (long) $7EF401.l [Reads: Accumulator]
	ldx #$18.b		; A2 18 ; Load #$18.b into X register [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7EF3E7.l,X		; 7F E7 F3 7E ; Add long $7EF3E7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF405.l		; 8F 05 F4 7E ; Store accumulator (long) $7EF405.l [Reads: Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF403.l		; 8F 03 F4 7E ; Store accumulator (long) $7EF403.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $09F4AC.l,X		; BF AC F4 09 ; Load long $09F4AC.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EF36D.l		; 8F 6D F3 7E ; Store accumulator (long) $7EF36D.l [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CA.l		; 8F CA F3 7E ; Store accumulator (long) $7EF3CA.l [Reads: Accumulator]
	jsl $00894A.l		; 22 4A 89 00 ; Jump to subroutine long $00894A.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC34C.l		; 8F 4C C3 7E ; Store accumulator (long) $7EC34C.l [Reads: Accumulator]
	sta $7EC54C.l		; 8F 4C C5 7E ; Store accumulator (long) $7EC54C.l [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC300.l		; 8F 00 C3 7E ; Store accumulator (long) $7EC300.l [Reads: Accumulator]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	lda #$0016.w		; A9 16 00 ; Load #$0016.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1C.b		; [PATTERN: Memory clearing operation] 85 1C ; Store accumulator to $1C.b [Reads: Accumulator]
	lda #$6800.w		; A9 00 68 ; Load #$6800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	stz $CA.b		; 64 CA ; Store zero to $CA.b
	stz $CC.b		; 64 CC ; Store zero to $CC.b
	lda #$FFB8.w		; A9 B8 FF ; Load #$FFB8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E8.b		; [PATTERN: Memory clearing operation] 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	lda #$0090.w		; A9 90 00 ; Load #$0090.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	stz $EA.b		; 64 EA ; Store zero to $EA.b
	stz $E4.b		; 64 E4 ; Store zero to $E4.b
	jsr $BE24.w		; 20 24 BE ; Jump to subroutine at $BE24.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	stz $99.b		; 64 99 ; Store zero to $99.b
	lda #$A2.b		; A9 A2 ; Load #$A2.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG2SC.w		; 8D 08 21 ; Store accumulator to BG2SC.w [Reads: Accumulator]
	lda #$3F.b		; A9 3F ; Load #$3F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9C.b		; 85 9C ; Store accumulator to $9C.b [Reads: Accumulator]
	lda #$5F.b		; A9 5F ; Load #$5F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9D.b		; 85 9D ; Store accumulator to $9D.b [Reads: Accumulator]
	lda #$9F.b		; A9 9F ; Load #$9F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9E.b		; 85 9E ; Store accumulator to $9E.b [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	stz $13.b		; 64 13 ; Store zero to $13.b
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0EBD4E.l,X		; BF 4E BD 0E ; Load long $0EBD4E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $4370.w,X		; 9D 70 43 ; Store accumulator to $4370.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	stz DMALEN7B.w		; 9C 77 43 ; Store zero to DMALEN7B.w
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	.db $82, $9D, $00		; 82 9D 00 ; Branch always long to $82, $9D, $00 [Flow: branch]
	.db $42, $0F		; 42 0F ; Reserved instruction
	eor ($BD.b,S),Y		; 53 BD ; XOR accumulator (stack relative indirect indexed) ($BD.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $0052.w		; 0E 52 00 ; Arithmetic shift left $0052.w [Flags: NCZ]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	sep #$00		; E2 00 ; Set processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $10.b		; 06 10 ; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	sta ($E2.b,X)		; 81 E2 ; Store accumulator ($E2.b,X) [Reads: Direct Page, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $B0.b		; C6 B0 ; Decrement $B0.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $B0.b		; 85 B0 ; Store accumulator to $B0.b [Reads: Accumulator]
	lda $9C.b		; A5 9C ; Load $9C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dec $9C.b		; C6 9C ; Decrement $9C.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	lda $9D.b		; A5 9D ; Load $9D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	dec $9D.b		; C6 9D ; Decrement $9D.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $9E.b		; A5 9E ; Load $9E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	dec $9E.b		; C6 9E ; Decrement $9E.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $BD66.w		; 20 66 BD ; Jump to subroutine at $BD66.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $0CCBA2.l		; 22 A2 CB 0C ; Jump to subroutine long $0CCBA2.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $49		; D0 49 ; Branch if not equal to $D0, $49 [Flow: branch]
	inc $E2.b		; E6 E2 ; Increment $E2.b [Reads: Direct Page] [Flags: NZ]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C00.w		; C9 00 0C ; Compare #$0C00.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	ldy #$1300.w		; A0 00 13 ; Load #$1300.w into Y register [Writes: Y Index] [Flags: NZ]
	sty BG1SC.w		; 8C 07 21 ; Store Y register to BG1SC.w [Reads: Y Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0604.w		; 8D 04 06 ; Store accumulator to $0604.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0600.w		; 8D 00 06 ; Store accumulator to $0600.w [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0602.w		; 8D 02 06 ; Store accumulator to $0602.w [Reads: Accumulator]
	lda $0604.w		; AD 04 06 ; Load $0604.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0606.w		; 8D 06 06 ; Store accumulator to $0606.w [Reads: Accumulator]
	lda $EA.b		; A5 EA ; Load $EA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0CD8.w		; C9 D8 0C ; Compare #$0CD8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda #$0080.w		; A9 80 00 ; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0001.w		; 69 01 00 ; Add #$0001.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $EA.b		; 85 EA ; Store accumulator to $EA.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$0007.w		; 29 07 00 ; Logical AND #$0007.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $CA.b		; 85 CA ; Store accumulator to $CA.b [Reads: Accumulator]
	jsr $BE24.w		; 20 24 BE ; Jump to subroutine at $BE24.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $3C.b		; E6 3C ; Increment $3C.b [Reads: Direct Page] [Flags: NZ]
	inc $3C.b,X		; F6 3C ; Increment memory $3C.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $0A00.w		; 0C 00 0A ; Test and set bits $0A00.w [Reads: Accumulator] [Flags: Z]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $1000.w		; AE 00 10 ; Load $1000.w into X register [Writes: X Index] [Flags: NZ]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	lda #$3E40.w		; A9 40 3E ; Load #$3E40.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1004.w,X		; 9D 04 10 ; Store accumulator to $1004.w,X [Reads: Accumulator, X Index]
	lda $B176.w		; AD 76 B1 ; Load $B176.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1006.w,X		; 9D 06 10 ; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $CA.b		; A5 CA ; Load $CA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cpy #$0314.w		; C0 14 03 ; Compare #$0314.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $D5, $00		; 82 D5 00 ; Branch always long to $82, $D5, $00 [Flow: branch]
	lda $B93D.w,Y		; B9 3D B9 ; Load $B93D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $B178.w,Y		; B9 78 B1 ; Load $B178.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $36		; F0 36 ; Branch if equal to $F0, $36 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C8.b		; 65 C8 ; Add $C8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $B178.w,Y		; B9 78 B1 ; Load $B178.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1004.w,X		; 9D 04 10 ; Store accumulator to $1004.w,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $B178.w,Y		; B9 78 B1 ; Load $B178.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $B038.w,Y		; B9 38 B0 ; Load $B038.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $1006.w,X		; 9D 06 10 ; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $E8		; D0 E8 ; Branch if not equal to $D0, $E8 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $CC.b		; A5 CC ; Load $CC.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $CC.b		; A5 CC ; Load $CC.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $CA.b		; A5 CA ; Load $CA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $BC51.w,Y		; D9 51 BC ; Compare accumulator $BC51.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $D0, $7A		; D0 7A ; Branch if not equal to $D0, $7A [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $BE04.w,Y		; B9 04 BE ; Load $BE04.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $CE.b		; 85 CE ; Store accumulator to $CE.b [Reads: Accumulator]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0019.w		; 69 19 00 ; Add #$0019.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	lda #$0500.w		; A9 00 05 ; Load #$0500.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1004.w,X		; 9D 04 10 ; Store accumulator to $1004.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $CC.b		; A5 CC ; Load $CC.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $BE08.w,X		; BD 08 BE ; Load $BE08.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF3E7.l,X		; BF E7 F3 7E ; Load long $7EF3E7.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp #$03E8.w		; C9 E8 03 ; Compare #$03E8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $11		; 90 11 ; Branch if carry clear to $90, $11 [Flow: branch]
	lda #$0009.w		; A9 09 00 ; Load #$0009.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CE.b		; 65 CE ; Add $CE.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $1006.w,X		; 9D 06 10 ; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	sta $1008.w,X		; 9D 08 10 ; Store accumulator to $1008.w,X [Reads: Accumulator, X Index]
	sta $100A.w,X		; 9D 0A 10 ; Store accumulator to $100A.w,X [Reads: Accumulator, X Index]
	.db $80, $32		; 80 32 ; Branch always to $80, $32 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$000A.w		; C9 0A 00 ; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $30, $07		; 30 07 ; Branch if minus to $30, $07 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$000A.w		; E9 0A 00 ; Subtract #$000A.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $80, $F4		; 80 F4 ; Branch always to $80, $F4 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CE.b		; 65 CE ; Add $CE.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $100A.w,X		; 9D 0A 10 ; Store accumulator to $100A.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$000A.w		; C9 0A 00 ; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $30, $07		; 30 07 ; Branch if minus to $30, $07 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$000A.w		; E9 0A 00 ; Subtract #$000A.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $80, $F4		; 80 F4 ; Branch always to $80, $F4 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CE.b		; 65 CE ; Add $CE.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $1008.w,X		; 9D 08 10 ; Store accumulator to $1008.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CE.b		; 65 CE ; Add $CE.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $1006.w,X		; 9D 06 10 ; Store accumulator to $1006.w,X [Reads: Accumulator, X Index]
	inc $CC.b		; E6 CC ; Increment $CC.b [Reads: Direct Page] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000A.w		; 69 0A 00 ; Add #$000A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx $1000.w		; 8E 00 10 ; Store X register to $1000.w [Reads: X Index]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$03FF.w		; 29 FF 03 ; Logical AND #$03FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$6800.w		; 29 00 68 ; Logical AND #$6800.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$0800.w		; 49 00 08 ; Exclusive OR #$0800.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sty $C8.b		; 84 C8 ; Store Y register to $C8.b [Reads: Y Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $65, $00		; 62 65 00 ; Push effective relative address $62, $65, $00 [Writes: Stack Pointer]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $1E21.w		; 2D 21 1E ; Logical AND $1E21.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2D1E2B.l,X		; 9F 2B 1E 2D ; Store accumulator (long,X) $2D1E2B.l,X [Reads: Accumulator, X Index]
	rol $272B.w		; 2E 2B 27 ; Rotate left $272B.w [Flags: NCZ]
	sta $9F1F28.l,X		; 9F 28 1F 9F ; Store accumulator (long,X) $9F1F28.l,X [Reads: Accumulator, X Index]
	and $1E21.w		; 2D 21 1E ; Logical AND $1E21.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $272224.l,X		; 9F 24 22 27 ; Store accumulator (long,X) $272224.l,X [Reads: Accumulator, X Index]
	jsr $E962.w		; 20 62 E9 ; Jump to subroutine at $E962.w [Writes: Stack Pointer] [Flow: call]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $75.b		; 64 75 ; Store zero to $75.b
	ror $6871.w		; 6E 71 68 ; Rotate right $6871.w [Flags: NCZ]
	adc ($9F.b,X)		; 61 9F ; Add with carry ($9F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $706F5D.l,X		; 5F 5D 6F 70 ; Exclusive OR accumulator with memory (long,X) $706F5D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc ($63.b,X)		; 61 63 ; Add with carry ($63.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $9B8A.w,Y		; 19 8A 9B ; OR accumulator with memory $9B8A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sty $97.b,X		; 94 97 ; Store Y register $97.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	stx $9F87.w		; 8E 87 9F ; Store X register to $9F87.w [Reads: X Index]
	sta $83.b		; 85 83 ; Store accumulator to $83.b [Reads: Accumulator]
	sta $96.b,X		; 95 96 ; Store accumulator to $96.b,X [Reads: Accumulator, X Index]
	stx $6287.w		; 8E 87 62 ; Store X register to $6287.w [Reads: X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1E21.w		; 2D 21 1E ; Logical AND $1E21.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $322825.l,X		; 9F 25 28 32 ; Store accumulator (long,X) $322825.l,X [Reads: Accumulator, X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $9F.b		; 25 9F ; Logical AND $9F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $201A.w		; 2C 1A 20 ; Test bits $201A.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	asl $EB62.w,X		; 1E 62 EB ; Arithmetic shift left $EB62.w,X [Reads: X Index] [Flags: NCZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $5F6A5D.l		; 6F 5D 6A 5F ; Add with carry (long) $5F6A5D.l [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $71		; 70 71 ; Branch if overflow set to $70, $71 [Flow: branch]
	eor $756E.w,X		; 5D 6E 75 ; Exclusive OR accumulator with memory $756E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $0B.b,S		; 63 0B ; Add with carry (stack relative) $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $83.b,X		; 95 83 ; Store accumulator to $83.b,X [Reads: Accumulator, X Index]
	.db $90, $85		; 90 85 ; Branch if carry clear to $90, $85 [Flow: branch]
	stx $97.b,Y		; 96 97 ; Store X register $97.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $94.b,S		; 83 94 ; Store accumulator (stack relative) $94.b,S [Reads: Stack Pointer, Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $62, $4F, $00		; 62 4F 00 ; Push effective relative address $62, $4F, $00 [Writes: Stack Pointer]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $62, $65, $00		; 62 65 00 ; Push effective relative address $62, $65, $00 [Writes: Stack Pointer]
	and $1A2C.w		; 2D 2C 1A ; Logical AND $1A2C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($1A.b,X)		; 21 1A ; Logical AND ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $1A2B.w		; 2C 2B 1A ; Test bits $1A2B.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $1A.b		; 25 1A ; Logical AND $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($35.b,X)		; 21 35 ; Logical AND ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $219F.w		; 2C 9F 21 ; Test bits $219F.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $1E.b		; 26 1E ; Rotate left $1E.b [Reads: Direct Page] [Flags: NCZ]
	trb $2628.w		; 1C 28 26 ; Test and reset bits $2628.w [Reads: Accumulator] [Flags: Z]
	jsl $622027.l		; 22 27 20 62 ; Jump to subroutine long $622027.l [Writes: Stack Pointer] [Flow: call]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $5D67.w,Y		; 19 67 5D ; OR accumulator with memory $5D67.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$5D.b]		; 67 5D ; Add with carry (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror $6765.w		; 6E 65 67 ; Rotate right $6765.w [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $736B70.l,X		; 9F 70 6B 73 ; Store accumulator (long,X) $736B70.l,X [Reads: Accumulator, X Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $09.b,S		; 63 09 ; Add with carry (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $8D83.w		; 8D 83 8D ; Store accumulator to $8D83.w [Reads: Accumulator]
	sta $94.b,S		; 83 94 ; Store accumulator (stack relative) $94.b,S [Reads: Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $9F91.w		; 8D 91 9F ; Store accumulator to $9F91.w [Reads: Accumulator]
	stx $91.b,Y		; 96 91 ; Store X register $91.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $6290.w,Y		; 99 90 62 ; Store accumulator to $6290.w,Y [Reads: Y Index, Accumulator]
	stz $00.b		; 64 00 ; Store zero to $00.b
	and $252E2F.l		; 2F 2F 2E 25 ; AND accumulator with memory (long) $252E2F.l [Writes: Accumulator] [Flags: NZ]
	and $2B2E.w		; 2D 2E 2B ; Logical AND $2B2E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $9F2C.w,X		; 1E 2C 9F ; Arithmetic shift left $9F2C.w,X [Reads: X Index] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	rol $1E25.w		; 2E 25 1E ; Rotate left $1E25.w [Flags: NCZ]
	sta $1E212D.l,X		; 9F 2D 21 1E ; Store accumulator (long,X) $1E212D.l,X [Reads: Accumulator, X Index]
	sta $2C1E1D.l,X		; 9F 1D 1E 2C ; Store accumulator (long,X) $2C1E1D.l,X [Reads: Accumulator, X Index]
	asl $2D2B.w,X		; 1E 2B 2D ; Arithmetic shift left $2D2B.w,X [Reads: X Index] [Flags: NCZ]
	.db $62, $E9, $00		; 62 E9 00 ; Push effective relative address $62, $E9, $00 [Writes: Stack Pointer]
	ora $6160.w,Y		; 19 60 61 ; OR accumulator with memory $6160.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $706E61.l		; 6F 61 6E 70 ; Add with carry (long) $706E61.l [Writes: Accumulator] [Flags: NCVZ]
	sta $685D6C.l,X		; 9F 6C 5D 68 ; Store accumulator (long,X) $685D6C.l,X [Reads: Accumulator, X Index]
	eor $615F.w,X		; 5D 5F 61 ; Exclusive OR accumulator with memory $615F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $09.b,S		; 63 09 ; Add with carry (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $87.b		; 86 87 ; Store X register to $87.b [Reads: X Index]
	sta $87.b,X		; 95 87 ; Store accumulator to $87.b,X [Reads: Accumulator, X Index]
	sty $96.b,X		; 94 96 ; Store Y register $96.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta $8E8392.l,X		; 9F 92 83 8E ; Store accumulator (long,X) $8E8392.l,X [Reads: Accumulator, X Index]
	sta $85.b,S		; 83 85 ; Store accumulator (stack relative) $85.b,S [Reads: Stack Pointer, Accumulator]
	sta [$62.b]		; 87 62 ; Store accumulator (long) [$62.b] [Reads: Direct Page, Accumulator]
	stz $00.b		; 64 00 ; Store zero to $00.b
	and $1E212D.l		; 2F 2D 21 1E ; AND accumulator with memory (long) $1E212D.l [Writes: Accumulator] [Flags: NZ]
	sta $252E1B.l,X		; 9F 1B 2E 25 ; Store accumulator (long,X) $252E1B.l,X [Reads: Accumulator, X Index]
	and $32.b		; 25 32 ; Logical AND $32.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $241A26.l,X		; 9F 26 1A 24 ; Store accumulator (long,X) $241A26.l,X [Reads: Accumulator, X Index]
	asl $9F2C.w,X		; 1E 2C 9F ; Arithmetic shift left $9F2C.w,X [Reads: X Index] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $222B1F.l,X		; 9F 1F 2B 22 ; Store accumulator (long,X) $222B1F.l,X [Reads: Accumulator, X Index]
	asl $1D27.w,X		; 1E 27 1D ; Arithmetic shift left $1D27.w,X [Reads: X Index] [Flags: NCZ]
	.db $62, $E9, $00		; 62 E9 00 ; Push effective relative address $62, $E9, $00 [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc #$6B.b		; 69 6B ; Add #$6B.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc ($6A.b),Y		; 71 6A ; Add with carry ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $5D		; 70 5D ; Branch if overflow set to $70, $5D [Flow: branch]
	adc $6A.b		; 65 6A ; Add $6A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $736B70.l,X		; 9F 70 6B 73 ; Store accumulator (long,X) $736B70.l,X [Reads: Accumulator, X Index]
	adc ($6E.b,X)		; 61 6E ; Add with carry ($6E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $09.b,S		; 63 09 ; Add with carry (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $909791.l		; 8F 91 97 90 ; Store accumulator (long) $909791.l [Reads: Accumulator]
	stx $83.b,Y		; 96 83 ; Store X register $83.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	.db $90, $9F		; 90 9F ; Branch if carry clear to $90, $9F [Flow: branch]
	stx $91.b,Y		; 96 91 ; Store X register $91.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $9487.w,Y		; 99 87 94 ; Store accumulator to $9487.w,Y [Reads: Y Index, Accumulator]
	.db $62, $66, $00		; 62 66 00 ; Push effective relative address $62, $66, $00 [Writes: Stack Pointer]
	and $32.b		; 25 32 ; Logical AND $32.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $9F2B.w		; 2E 2B 9F ; Rotate left $9F2B.w [Flags: NCZ]
	rol $1C27.w		; 2E 27 1C ; Rotate left $1C27.w [Flags: NCZ]
	and $1E.b		; 25 1E ; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1C1E2B.l,X		; 9F 2B 1E 1C ; Store accumulator (long,X) $1C1E2B.l,X [Reads: Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $2C2B1E.l		; 2F 1E 2B 2C ; AND accumulator with memory (long) $2C2B1E.l [Writes: Accumulator] [Flags: NZ]
	.db $62, $EB, $00		; 62 EB 00 ; Push effective relative address $62, $EB, $00 [Writes: Stack Pointer]
	ora ($75.b,S),Y		; 13 75 ; OR accumulator (stack relative indirect indexed) ($75.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($6E.b),Y		; 71 6E ; Add with carry ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $716B64.l,X		; 9F 64 6B 71 ; Store accumulator (long,X) $716B64.l,X [Reads: Accumulator, X Index]
	adc $0B6361.l		; 6F 61 63 0B ; Add with carry (long) $0B6361.l [Writes: Accumulator] [Flags: NCVZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta ($97.b),Y		; 91 97 ; Store accumulator ($97.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sty $9F.b,X		; 94 9F ; Store Y register $9F.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($97.b),Y		; 91 97 ; Store accumulator ($97.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $87.b,X		; 95 87 ; Store accumulator to $87.b,X [Reads: Accumulator, X Index]
	.db $62, $66, $00		; 62 66 00 ; Push effective relative address $62, $66, $00 [Writes: Stack Pointer]
	and ($1F.b,X)		; 21 1F ; Logical AND ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $22.b		; 25 22 ; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$29.b		; 29 29 ; Logical AND #$29.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $2C2B.w,X		; 1E 2B 2C ; Arithmetic shift left $2C2B.w,X [Reads: X Index] [Flags: NCZ]
	sta $2B281F.l,X		; 9F 1F 28 2B ; Store accumulator (long,X) $2B281F.l,X [Reads: Accumulator, X Index]
	sta $251A2C.l,X		; 9F 2C 1A 25 ; Store accumulator (long,X) $251A2C.l,X [Reads: Accumulator, X Index]
	asl $E862.w,X		; 1E 62 E8 ; Arithmetic shift left $E862.w,X [Reads: X Index] [Flags: NCZ]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $6B.b,X		; 76 6B ; Rotate right $6B.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $775D.w		; 6E 5D 77 ; Rotate right $775D.w [Flags: NCZ]
	adc $5D739F.l		; 6F 9F 73 5D ; Add with carry (long) $5D739F.l [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $61		; 70 61 ; Branch if overflow set to $70, $61 [Flow: branch]
	ror $5D62.w		; 6E 62 5D ; Rotate right $5D62.w [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc $08.b,S		; 63 08 ; Add with carry (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $9491.w		; 9C 91 94 ; Store zero to $9491.w
	sta $9D.b,S		; 83 9D ; Store accumulator (stack relative) $9D.b,S [Reads: Stack Pointer, Accumulator]
	sta $9F.b,X		; 95 9F ; Store accumulator to $9F.b,X [Reads: Accumulator, X Index]
	sta $9683.w,Y		; 99 83 96 ; Store accumulator to $9683.w,Y [Reads: Y Index, Accumulator]
	sta [$94.b]		; 87 94 ; Store accumulator (long) [$94.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $8E.b,S		; 83 8E ; Store accumulator (stack relative) $8E.b,S [Reads: Stack Pointer, Accumulator]
	stx $6462.w		; 8E 62 64 ; Store X register to $6462.w [Reads: X Index]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1E21.w		; 2D 21 1E ; Logical AND $1E21.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2D2230.l,X		; 9F 30 22 2D ; Store accumulator (long,X) $2D2230.l,X [Reads: Accumulator, X Index]
	trb $9F21.w		; 1C 21 9F ; Test and reset bits $9F21.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and [$1D.b]		; 27 1D ; AND accumulator with memory (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2C2C1A.l,X		; 9F 1A 2C 2C ; Store accumulator (long,X) $2C2C1A.l,X [Reads: Accumulator, X Index]
	jsl $1A2D2C.l		; 22 2C 2D 1A ; Jump to subroutine long $1A2D2C.l [Writes: Stack Pointer] [Flow: call]
	and [$2D.b]		; 27 2D ; AND accumulator with memory (long) [$2D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $EB, $00		; 62 EB 00 ; Push effective relative address $62, $EB, $00 [Writes: Stack Pointer]
	ora ($69.b,S),Y		; 13 69 ; OR accumulator (stack relative indirect indexed) ($69.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $6563.w,X		; 5D 63 65 ; Exclusive OR accumulator with memory $6563.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $646F9F.l,X		; 5F 9F 6F 64 ; Exclusive OR accumulator with memory (long,X) $646F9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp ($0B63.w)		; 6C 63 0B ; Jump indirect to ($0B63.w) [Flow: jump]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $8B8983.l		; 8F 83 89 8B ; Store accumulator (long) $8B8983.l [Reads: Accumulator]
	sta $9F.b		; 85 9F ; Store accumulator to $9F.b [Reads: Accumulator]
	sta $8A.b,X		; 95 8A ; Store accumulator to $8A.b,X [Reads: Accumulator, X Index]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $62, $68, $00		; 62 68 00 ; Push effective relative address $62, $68, $00 [Writes: Stack Pointer]
	ora $22302D.l,X		; 1F 2D 30 22 ; Logical OR long $22302D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$9F.b]		; 27 9F ; AND accumulator with memory (long) [$9F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $2E.b		; 25 2E ; Logical AND $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $1B.b		; 26 1B ; Rotate left $1B.b [Reads: Direct Page] [Flags: NCZ]
	asl $232B.w,X		; 1E 2B 23 ; Arithmetic shift left $232B.w,X [Reads: X Index] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $2C24.w		; 1C 24 2C ; Test and reset bits $2C24.w [Reads: Accumulator] [Flags: Z]
	.db $62, $E9, $00		; 62 E9 00 ; Push effective relative address $62, $E9, $00 [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($6B.b,S),Y		; 73 6B ; Add with carry (stack relative indirect indexed) ($6B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $6A6169.l		; 6F 69 61 6A ; Add with carry (long) $6A6169.l [Writes: Accumulator] [Flags: NCVZ]
	adc [$6F.b],Y		; 77 6F ; Add with carry (long indexed) [$6F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $707164.l,X		; 9F 64 71 70 ; Store accumulator (long,X) $707164.l,X [Reads: Accumulator, X Index]
	adc $09.b,S		; 63 09 ; Add with carry (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $9191.w,Y		; 99 91 91 ; Store accumulator to $9191.w,Y [Reads: Y Index, Accumulator]
	stx $95.b		; 86 95 ; Store X register to $95.b [Reads: X Index]
	sta $9D9087.l		; 8F 87 90 9D ; Store accumulator (long) $9D9087.l [Reads: Accumulator]
	sta $9F.b,X		; 95 9F ; Store accumulator to $9F.b,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$96.b],Y		; 97 96 ; Store accumulator (long indexed) [$96.b],Y [Reads: Direct Page, Y Index, Accumulator]
	.db $62, $64, $00		; 62 64 00 ; Push effective relative address $62, $64, $00 [Writes: Stack Pointer]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and $2E.b		; 25 2E ; Logical AND $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $9F1E.w		; 2D 1E 9F ; Logical AND $9F1E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and ($9F.b)		; 32 9F ; AND accumulator with memory (indirect) ($9F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$25.b		; 29 25 ; Logical AND #$25.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and ($2C.b)		; 32 2C ; AND accumulator with memory (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1A201A.l,X		; 9F 1A 20 1A ; Store accumulator (long,X) $1A201A.l,X [Reads: Accumulator, X Index]
	jsl $E96227.l		; 22 27 62 E9 ; Jump to subroutine long $E96227.l [Writes: Stack Pointer] [Flow: call]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $5D.b		; 64 5D ; Store zero to $5D.b
	adc ($6A.b),Y		; 71 6A ; Add with carry ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $61		; 70 61 ; Branch if overflow set to $70, $61 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $6B6E63.l,X		; 9F 63 6E 6B ; Store accumulator (long,X) $6B6E63.l,X [Reads: Accumulator, X Index]
	adc ($61.b)		; 72 61 ; Add with carry (indirect) ($61.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $09.b,S		; 63 09 ; Add with carry (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $97.b,S		; 83 97 ; Store accumulator (stack relative) $97.b,S [Reads: Stack Pointer, Accumulator]
	.db $90, $96		; 90 96 ; Branch if carry clear to $90, $96 [Flow: branch]
	sta [$86.b]		; 87 86 ; Store accumulator (long) [$86.b] [Reads: Direct Page, Accumulator]
	sta $919489.l,X		; 9F 89 94 91 ; Store accumulator (long,X) $919489.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta [$62.b]		; 87 62 ; Store accumulator (long) [$62.b] [Reads: Direct Page, Accumulator]
	stz $00.b		; 64 00 ; Store zero to $00.b
	and $1E2F.w		; 2D 2F 1E ; Logical AND $1E2F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and [$2E.b]		; 27 2E ; AND accumulator with memory (long) [$2E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $9F37.w		; 2C 37 9F ; Test bits $9F37.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol $1E1E.w		; 2E 1E 1E ; Rotate left $1E1E.w [Flags: NCZ]
	and [$9F.b]		; 27 9F ; AND accumulator with memory (long) [$9F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora $1A1F9F.l,X		; 1F 9F 1F 1A ; Logical OR long $1A1F9F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $222B.w,X		; 1E 2B 22 ; Arithmetic shift left $222B.w,X [Reads: X Index] [Flags: NCZ]
	asl $622C.w,X		; 1E 2C 62 ; Arithmetic shift left $622C.w,X [Reads: X Index] [Flags: NCZ]
	nop		; EA ; No operation
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($65.b,S),Y		; 73 65 ; Add with carry (stack relative indirect indexed) ($65.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $6A6564.l		; 6F 64 65 6A ; Add with carry (long) $6A6564.l [Writes: Accumulator] [Flags: NCVZ]
	adc $9F.b,S		; 63 9F ; Add with carry (stack relative) $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($61.b,S),Y		; 73 61 ; Add with carry (stack relative indirect indexed) ($61.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc $0A.b,S		; 63 0A ; Add with carry (stack relative) $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $958B.w,Y		; 99 8B 95 ; Store accumulator to $958B.w,Y [Reads: Y Index, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	.db $90, $89		; 90 89 ; Branch if carry clear to $90, $89 [Flow: branch]
	sta $8E8799.l,X		; 9F 99 87 8E ; Store accumulator (long,X) $8E8799.l,X [Reads: Accumulator, X Index]
	stx $6462.w		; 8E 62 64 ; Store X register to $6462.w [Reads: X Index]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1E21.w		; 2D 21 1E ; Logical AND $1E21.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1A301D.l,X		; 9F 1D 30 1A ; Store accumulator (long,X) $1A301D.l,X [Reads: Accumulator, X Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $9F271E.l		; 2F 1E 27 9F ; AND accumulator with memory (long) $9F271E.l [Writes: Accumulator] [Flags: NZ]
	bit $2830.w		; 2C 30 28 ; Test bits $2830.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora $262C.w,X		; 1D 2C 26 ; OR accumulator with memory $262C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $2C212D.l		; 22 2D 21 2C ; Jump to subroutine long $2C212D.l [Writes: Stack Pointer] [Flow: call]
	.db $62, $EC, $00		; 62 EC 00 ; Push effective relative address $62, $EC, $00 [Writes: Stack Pointer]
	ora $65696F.l		; 0F 6F 69 65 ; OR accumulator with memory (long) $65696F.l [Writes: Accumulator] [Flags: NZ]
	.db $70, $64		; 70 64 ; Branch if overflow set to $70, $64 [Flow: branch]
	adc ($6E.b,X)		; 61 6E ; Add with carry ($6E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $63.b,X		; 75 63 ; Add $63.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0F00.w		; 0C 00 0F ; Test and set bits $0F00.w [Reads: Accumulator] [Flags: Z]
	sta $8F.b,X		; 95 8F ; Store accumulator to $8F.b,X [Reads: Accumulator, X Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	stx $8A.b,Y		; 96 8A ; Store X register $8A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$94.b]		; 87 94 ; Store accumulator (long) [$94.b] [Reads: Direct Page, Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $62, $66, $00		; 62 66 00 ; Push effective relative address $62, $66, $00 [Writes: Stack Pointer]
	and [$2D.b]		; 27 2D ; AND accumulator with memory (long) [$2D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($1E.b,X)		; 21 1E ; Logical AND ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $202E1B.l,X		; 9F 1B 2E 20 ; Store accumulator (long,X) $202E1B.l,X [Reads: Accumulator, X Index]
	rol $1C.b,X		; 36 1C ; Rotate left $1C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $211C.w		; 2D 1C 21 ; Logical AND $211C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $9F2027.l		; 22 27 20 9F ; Jump to subroutine long $9F2027.l [Writes: Stack Pointer] [Flow: call]
	bit $22.b		; 24 22 ; Test bits $22.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $E962.w,X		; 1D 62 E9 ; OR accumulator with memory $E962.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$5D.b]		; 67 5D ; Add with carry (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc [$5D.b]		; 67 5D ; Add with carry (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror $6765.w		; 6E 65 67 ; Rotate right $6765.w [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $736B70.l,X		; 9F 70 6B 73 ; Store accumulator (long,X) $736B70.l,X [Reads: Accumulator, X Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $09.b,S		; 63 09 ; Add with carry (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $8D83.w		; 8D 83 8D ; Store accumulator to $8D83.w [Reads: Accumulator]
	sta $94.b,S		; 83 94 ; Store accumulator (stack relative) $94.b,S [Reads: Stack Pointer, Accumulator]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $9F91.w		; 8D 91 9F ; Store accumulator to $9F91.w [Reads: Accumulator]
	stx $91.b,Y		; 96 91 ; Store X register $91.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $6290.w,Y		; 99 90 62 ; Store accumulator to $6290.w,Y [Reads: Y Index, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1E21.w		; 2D 21 1E ; Logical AND $1E21.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2C2825.l,X		; 9F 25 28 2C ; Store accumulator (long,X) $2C2825.l,X [Reads: Accumulator, X Index]
	and $289F.w		; 2D 9F 28 ; Logical AND $289F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $1D.b		; 25 1D ; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $271A26.l,X		; 9F 26 1A 27 ; Store accumulator (long,X) $271A26.l,X [Reads: Accumulator, X Index]
	.db $62, $E9, $00		; 62 E9 00 ; Push effective relative address $62, $E9, $00 [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($5D.b,X)		; 61 5D ; Add with carry ($5D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $64		; 70 64 ; Branch if overflow set to $70, $64 [Flow: branch]
	sta $716B69.l,X		; 9F 69 6B 71 ; Store accumulator (long,X) $716B69.l,X [Reads: Accumulator, X Index]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $70, $5D		; 70 5D ; Branch if overflow set to $70, $5D [Flow: branch]
	adc $6A.b		; 65 6A ; Add $6A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $09.b,S		; 63 09 ; Add with carry (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $87.b		; 86 87 ; Store X register to $87.b [Reads: X Index]
	sta $96.b,S		; 83 96 ; Store accumulator (stack relative) $96.b,S [Reads: Stack Pointer, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $97918F.l,X		; 9F 8F 91 97 ; Store accumulator (long,X) $97918F.l,X [Reads: Accumulator, X Index]
	.db $90, $96		; 90 96 ; Branch if carry clear to $90, $96 [Flow: branch]
	sta $8B.b,S		; 83 8B ; Store accumulator (stack relative) $8B.b,S [Reads: Stack Pointer, Accumulator]
	.db $90, $62		; 90 62 ; Branch if carry clear to $90, $62 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1E21.w		; 2D 21 1E ; Logical AND $1E21.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2B281F.l,X		; 9F 1F 28 2B ; Store accumulator (long,X) $2B281F.l,X [Reads: Accumulator, X Index]
	asl $2D2C.w,X		; 1E 2C 2D ; Arithmetic shift left $2D2C.w,X [Reads: X Index] [Flags: NCZ]
	sta $22212D.l,X		; 9F 2D 21 22 ; Store accumulator (long,X) $22212D.l,X [Reads: Accumulator, X Index]
	asl $621F.w,X		; 1E 1F 62 ; Arithmetic shift left $621F.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $739F70.l		; 6F 70 9F 73 ; Add with carry (long) $739F70.l [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $000B63.l		; 6F 63 0B 00 ; Add with carry (long) $000B63.l [Writes: Accumulator] [Flags: NCVZ]
	ora ($8E.b,S),Y		; 13 8E ; OR accumulator (stack relative indirect indexed) ($8E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($95.b),Y		; 91 95 ; Store accumulator ($95.b),Y [Reads: Direct Page, Y Index, Accumulator]
	stx $9F.b,Y		; 96 9F ; Store X register $9F.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $9191.w,Y		; 99 91 91 ; Store accumulator to $9191.w,Y [Reads: Y Index, Accumulator]
	stx $95.b		; 86 95 ; Store X register to $95.b [Reads: X Index]
	.db $62, $66, $00		; 62 66 00 ; Push effective relative address $62, $66, $00 [Writes: Stack Pointer]
	and [$1A.b]		; 27 1A ; AND accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$1D.b]		; 27 1D ; AND accumulator with memory (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1E212D.l,X		; 9F 2D 21 1E ; Store accumulator (long,X) $1E212D.l,X [Reads: Accumulator, X Index]
	sta $2C1A26.l,X		; 9F 26 1A 2C ; Store accumulator (long,X) $2C1A26.l,X [Reads: Accumulator, X Index]
	and $2B1E.w		; 2D 1E 2B ; Logical AND $2B1E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $28302C.l,X		; 9F 2C 30 28 ; Store accumulator (long,X) $28302C.l,X [Reads: Accumulator, X Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora $A862.w,X		; 1D 62 A8 ; OR accumulator with memory $A862.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $3C.b,S		; 43 3C ; Exclusive OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $4A47.w,X		; 3C 47 4A ; Test bits $4A47.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sta $383E38.l,X		; 9F 38 3E 38 ; Store accumulator (long,X) $383E38.l,X [Reads: Accumulator, X Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $52.b		; 45 52 ; Exclusive OR $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $EC, $00		; 62 EC 00 ; Push effective relative address $62, $EC, $00 [Writes: Stack Pointer]
	ora $6E6B62.l		; 0F 62 6B 6E ; OR accumulator with memory (long) $6E6B62.l [Writes: Accumulator] [Flags: NZ]
	adc ($72.b,X)		; 61 72 ; Add with carry ($72.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($6E.b,X)		; 61 6E ; Add with carry ($6E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($94.b),Y		; 91 94 ; Store accumulator ($94.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$98.b]		; 87 98 ; Store accumulator (long) [$98.b] [Reads: Direct Page, Accumulator]
	sta [$94.b]		; 87 94 ; Store accumulator (long) [$94.b] [Reads: Direct Page, Accumulator]
	stz $0000.w,X		; 9E 00 00 ; Store zero to $0000.w,X [Reads: X Index]
	bit $6800.w,X		; 3C 00 68 ; Test bits $6800.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($5B.b,X)		; 01 5B ; Logical OR ($5B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($98.b,X)		; 01 98 ; Logical OR ($98.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($CF.b,X)		; 01 CF ; Logical OR ($CF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $42.b		; 02 42 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $7D.b		; 02 7D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $B0.b		; 02 B0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $EA.b		; 02 EA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $52.b,S		; 03 52 ; OR accumulator with stack relative $52.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $95.b,S		; 03 95 ; OR accumulator with stack relative $95.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $8B.b,S		; 03 8B ; OR accumulator with stack relative $8B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0060.w		; A9 60 00 ; Load #$0060.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1002.w		; 8D 02 10 ; Store accumulator to $1002.w [Reads: Accumulator]
	lda #$FE47.w		; A9 47 FE ; Load #$FE47.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1004.w		; 8D 04 10 ; Store accumulator to $1004.w [Reads: Accumulator]
	lda $B176.w		; AD 76 B1 ; Load $B176.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1006.w		; 8D 06 10 ; Store accumulator to $1006.w [Reads: Accumulator]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $C2E3.w,Y		; B9 E3 C2 ; Load $C2E3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $C2E1.w,Y		; B9 E1 C2 ; Load $C2E1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $BF4C.w,Y		; B9 4C BF ; Load $BF4C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $1008.w,X		; 9D 08 10 ; Store accumulator to $1008.w,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $BF4C.w,Y		; B9 4C BF ; Load $BF4C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $1008.w,X		; 9D 08 10 ; Store accumulator to $1008.w,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sty $02.b		; 84 02 ; Store Y register to $02.b [Reads: Y Index]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $BF4C.w,Y		; B9 4C BF ; Load $BF4C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $B038.w,Y		; B9 38 B0 ; Load $B038.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $1008.w,X		; 9D 08 10 ; Store accumulator to $1008.w,X [Reads: Accumulator, X Index]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $E8		; 10 E8 ; Branch if plus to $10, $E8 [Flow: branch]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpy $04.b		; C4 04 ; Compare $04.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $D0, $C5		; D0 C5 ; Branch if not equal to $D0, $C5 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $1000.w		; 8D 00 10 ; Store accumulator to $1000.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1008.w,X		; 9D 08 10 ; Store accumulator to $1008.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	inc $13.b		; E6 13 ; Increment $13.b [Reads: Direct Page] [Flags: NZ]
	lda $13.b		; A5 13 ; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	jsl $0CCBA2.l		; 22 A2 CB 0C ; Jump to subroutine long $0CCBA2.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $21		; D0 21 ; Branch if not equal to $D0, $21 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	stz $0AA6.w		; 9C A6 0A ; Store zero to $0AA6.w
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$001F.w		; A9 1F 00 ; Load #$001F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC00B.l		; 8F 0B C0 7E ; Store accumulator (long) $7EC00B.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	stz $CA.b		; 64 CA ; Store zero to $CA.b
	.db $80, $D4		; 80 D4 ; Branch always to $80, $D4 [Flow: branch]
	dec $C8.b		; C6 C8 ; Decrement $C8.b [Reads: Direct Page] [Flags: NZ]
	lda $CA.b		; A5 CA ; Load $CA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	inc $CA.b		; E6 CA ; Increment $CA.b [Reads: Direct Page] [Flags: NZ]
	lda $C8.b		; A5 C8 ; Load $C8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $E8		; D0 E8 ; Branch if not equal to $D0, $E8 [Flow: branch]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	jsl $00EBD3.l		; 22 D3 EB 00 ; Jump to subroutine long $00EBD3.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	jsl $00EC0D.l		; 22 0D EC 00 ; Jump to subroutine long $00EC0D.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	inc $11.b		; E6 11 ; Increment $11.b [Reads: Direct Page] [Flags: NZ]
	jmp $C3FA.w		; 4C FA C3 ; Jump to $C3FA.w [Flow: jump]
	ldy #$B8.b		; A0 B8 ; Load #$B8.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $B8		; B0 B8 ; Branch if carry set to $B0, $B8 [Flow: branch]
	cop $3B.b		; 02 3B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$B8.b		; C0 B8 ; Compare #$B8.b with Y register [Reads: Y Index] [Flags: NCZ]
	tsb $3B.b		; 04 3B ; Test and set bits $3B.b [Reads: Accumulator] [Flags: Z]
	.db $D0, $B8		; D0 B8 ; Branch if not equal to $D0, $B8 [Flow: branch]
	asl $3B.b		; 06 3B ; Arithmetic shift left $3B.b [Reads: Direct Page] [Flags: NCZ]
.ACCU 16
	rep #$20		; C2 20
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	lda $0EC3EA.l,X		; BF EA C3 0E ; Load long $0EC3EA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A20.w		; 8D 20 0A ; Store accumulator to $0A20.w [Reads: Accumulator]
	sta $0A21.w		; 8D 21 0A ; Store accumulator to $0A21.w [Reads: Accumulator]
	sta $0A22.w		; 8D 22 0A ; Store accumulator to $0A22.w [Reads: Accumulator]
	sta $0A23.w		; 8D 23 0A ; Store accumulator to $0A23.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $DE		; 80 DE ; Branch always to $80, $DE [Flow: branch]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $C448.w		; 20 48 C4 ; Jump to subroutine at $C448.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CD8.w		; AD D8 1C ; Load $1CD8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	sta $C4.b,S		; 83 C4 ; Store accumulator (stack relative) $C4.b,S [Reads: Stack Pointer, Accumulator]
	cmp $55C8.w,Y		; D9 C8 55 ; Compare accumulator $55C8.w,Y [Reads: Y Index] [Flags: NCZ]
	cpy $A9.b		; C4 A9 ; Compare $A9.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ora $8D.b,S		; 03 8D ; OR accumulator with stack relative $8D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	jsr $C493.w		; 20 93 C4 ; Jump to subroutine at $C493.w [Writes: Stack Pointer] [Flow: call]
	lda #$E8.b		; A9 E8 ; Load #$E8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD2.w		; 8D D2 1C ; Store accumulator to $1CD2.w [Reads: Accumulator]
	lda #$61.b		; A9 61 ; Load #$61.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD3.w		; 8D D3 1C ; Store accumulator to $1CD3.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD4.w		; 8D D4 1C ; Store accumulator to $1CD4.w [Reads: Accumulator]
	jsr $C8D9.w		; 20 D9 C8 ; Jump to subroutine at $C8D9.w [Writes: Stack Pointer] [Flow: call]
	jsr $C8D9.w		; 20 D9 C8 ; Jump to subroutine at $C8D9.w [Writes: Stack Pointer] [Flow: call]
	jsr $C8D9.w		; 20 D9 C8 ; Jump to subroutine at $C8D9.w [Writes: Stack Pointer] [Flow: call]
	jsr $C8D9.w		; 20 D9 C8 ; Jump to subroutine at $C8D9.w [Writes: Stack Pointer] [Flow: call]
	jsr $C8D9.w		; 20 D9 C8 ; Jump to subroutine at $C8D9.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $00EB29.l		; 22 29 EB 00 ; Jump to subroutine long $00EB29.l [Writes: Stack Pointer] [Flow: call]
	jsl $00D80E.l		; 22 0E D8 00 ; Jump to subroutine long $00D80E.l [Writes: Stack Pointer] [Flow: call]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $D35A.w,X		; BD 5A D3 ; Load $D35A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CD0.w,X		; 9D D0 1C ; Store accumulator to $1CD0.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $F5		; 90 F5 ; Branch if carry clear to $90, $F5 [Flow: branch]
	jsr $C4C9.w		; 20 C9 C4 ; Jump to subroutine at $C4C9.w [Writes: Stack Pointer] [Flow: call]
	jsr $D280.w		; 20 80 D2 ; Jump to subroutine at $D280.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$387F.w		; A9 7F 38 ; Load #$387F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0180.w		; 09 80 01 ; Logical OR #$0180.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CE2.w		; 8D E2 1C ; Store accumulator to $1CE2.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $C4E2.w		; 20 E2 C4 ; Jump to subroutine at $C4E2.w [Writes: Stack Pointer] [Flow: call]
	jsr $D1F9.w		; 20 F9 D1 ; Jump to subroutine at $D1F9.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $1CD9.w		; 9C D9 1C ; Store zero to $1CD9.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; [PATTERN: Memory clearing operation] 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0722.w		; 9C 22 07 ; Store zero to $0722.w
	stz $0723.w		; 9C 23 07 ; Store zero to $0723.w
	stz $0720.w		; [PATTERN: Memory clearing operation] 9C 20 07 ; Store zero to $0720.w
	stz $0721.w		; 9C 21 07 ; Store zero to $0721.w
	stz $0724.w		; 9C 24 07 ; Store zero to $0724.w
	stz $0725.w		; 9C 25 07 ; Store zero to $0725.w
	stz $0726.w		; 9C 26 07 ; Store zero to $0726.w
	stz $0727.w		; 9C 27 07 ; Store zero to $0727.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $1CF0.w		; AD F0 1C ; Load $1CF0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $1CF0.w		; 6D F0 1C ; Add $1CF0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F71C0.l,X		; BF C0 71 7F ; Load long $7F71C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7F71C2.l,X		; BF C2 71 7F ; Load long $7F71C2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda #$7F7F.w		; A9 7F 7F ; Load #$7F7F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F1200.l		; 8F 00 12 7F ; Store accumulator (long) $7F1200.l [Reads: Accumulator]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sty $1CD9.w		; 8C D9 1C ; Store Y register to $1CD9.w [Reads: Y Index]
	sty $1CDD.w		; 8C DD 1C ; Store Y register to $1CDD.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	lda [$04.b],Y		; B7 04 ; Load accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $21		; 30 21 ; Branch if minus to $30, $21 [Flow: branch]
	cmp #$67.b		; C9 67 ; Compare #$67.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
	sta $7F1200.l,X		; 9F 00 12 7F ; Store accumulator (long,X) $7F1200.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $1CDD.w		; 8C DD 1C ; Store Y register to $1CDD.w [Reads: Y Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $1CD9.w		; 8E D9 1C ; Store X register to $1CD9.w [Reads: X Index]
	.db $80, $EA		; 80 EA ; Branch always to $80, $EA [Flow: branch]
	cmp #$7F.b		; C9 7F ; Compare #$7F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	jsr $C547.w		; 20 47 C5 ; Jump to subroutine at $C547.w [Writes: Stack Pointer] [Flow: call]
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	ldy $1CDD.w		; AC DD 1C ; Load $1CDD.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $DB		; 80 DB ; Branch always to $80, $DB [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$88.b		; E9 88 ; Subtract #$88.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	jsr $C6DA.w		; 20 DA C6 ; Jump to subroutine at $C6DA.w [Writes: Stack Pointer] [Flow: call]
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	ldy $1CDD.w		; AC DD 1C ; Load $1CDD.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $CD		; 80 CD ; Branch always to $80, $CD [Flow: branch]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F1200.l,X		; 9F 00 12 7F ; Store accumulator (long,X) $7F1200.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$31		; E2 31
	sbc #$67.b		; E9 67 ; Subtract #$67.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	sta ($C5.b,X)		; 81 C5 ; Store accumulator ($C5.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($C5.b,X)		; 81 C5 ; Store accumulator ($C5.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($C5.b,X)		; 81 C5 ; Store accumulator ($C5.b,X) [Reads: Direct Page, Accumulator, X Index]
	lda ($C5.b,S),Y		; B3 C5 ; Load accumulator (stack relative indirect indexed) ($C5.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor [$C6.b],Y		; 57 C6 ; Exclusive OR accumulator with memory (long indexed) [$C6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$C6.b]		; 67 C6 ; Add with carry (long) [$C6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $98C6.w		; 9C C6 98 ; Store zero to $98C6.w
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $B6.b		; C5 B6 ; Compare $B6.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	dec $98.b		; C6 98 ; Decrement $98.b [Reads: Direct Page] [Flags: NZ]
	cmp $98.b		; C5 98 ; Compare $98.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $98.b		; C5 98 ; Compare $98.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $81.b		; C5 81 ; Compare $81.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $C2.b		; C5 C2 ; Compare $C2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $10, $AE		; 10 AE ; Branch if plus to $10, $AE [Flow: branch]
	cmp $AC1C.w,Y		; D9 1C AC ; Compare accumulator $AC1C.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $B71C.w,X		; DD 1C B7 ; Compare accumulator $B71C.w,X [Reads: X Index] [Flags: NCZ]
	tsb $9F.b		; 04 9F ; Test and set bits $9F.b [Reads: Accumulator] [Flags: Z]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $8EE8C8.l,X		; 7F C8 E8 8E ; Add long $8EE8C8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $8C1C.w,Y		; D9 1C 8C ; Compare accumulator $8C1C.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $601C.w,X		; DD 1C 60 ; Compare accumulator $601C.w,X [Reads: X Index] [Flags: NCZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	ldy $1CDD.w		; AC DD 1C ; Load $1CDD.w into Y register [Writes: Y Index] [Flags: NZ]
	lda [$04.b],Y		; B7 04 ; Load accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F1200.l,X		; 9F 00 12 7F ; Store accumulator (long,X) $7F1200.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $1CD9.w		; 8E D9 1C ; Store X register to $1CD9.w [Reads: X Index]
	sty $1CDD.w		; 8C DD 1C ; Store Y register to $1CDD.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $701FFE.l		; AF FE 1F 70 ; Load long $701FFE.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $00848A.l,X		; BF 8A 84 00 ; Load long $00848A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7003D9.l,X		; BF D9 03 70 ; Load long $7003D9.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0008.w,Y		; 99 08 00 ; Store accumulator to $0008.w,Y [Reads: Y Index, Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$FFF0.w		; 29 F0 FF ; Logical AND #$FFF0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0008.w,Y		; 19 08 00 ; OR accumulator with memory $0008.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0008.w,Y		; 99 08 00 ; Store accumulator to $0008.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0006.w		; C0 06 00 ; Compare #$0006.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $E2		; 90 E2 ; Branch if carry clear to $90, $E2 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $0008.w,Y		; B9 08 00 ; Load $0008.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $C639.w		; 20 39 C6 ; Jump to subroutine at $C639.w [Writes: Stack Pointer] [Flow: call]
	sta $0008.w,Y		; 99 08 00 ; Store accumulator to $0008.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0006.w		; C0 06 00 ; Compare #$0006.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $F1		; 90 F1 ; Branch if carry clear to $90, $F1 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $1CD9.w		; AD D9 1C ; Load $1CD9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	inc $1CDD.w		; EE DD 1C ; Increment $1CDD.w [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F11FA.l,X		; 9F FA 11 7F ; Store accumulator (long,X) $7F11FA.l,X [Reads: Accumulator, X Index]
	lda $09.b		; A5 09 ; Load $09.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F11FB.l,X		; 9F FB 11 7F ; Store accumulator (long,X) $7F11FB.l,X [Reads: Accumulator, X Index]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F11FC.l,X		; 9F FC 11 7F ; Store accumulator (long,X) $7F11FC.l,X [Reads: Accumulator, X Index]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F11FD.l,X		; 9F FD 11 7F ; Store accumulator (long,X) $7F11FD.l,X [Reads: Accumulator, X Index]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F11FE.l,X		; 9F FE 11 7F ; Store accumulator (long,X) $7F11FE.l,X [Reads: Accumulator, X Index]
	lda $0D.b		; A5 0D ; Load $0D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F11FF.l,X		; 9F FF 11 7F ; Store accumulator (long,X) $7F11FF.l,X [Reads: Accumulator, X Index]
	ldy #$0005.w		; A0 05 00 ; Load #$0005.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $0008.w,Y		; B9 08 00 ; Load $0008.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$59.b		; C9 59 ; Compare #$59.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	stx $1CD9.w		; 8E D9 1C ; Store X register to $1CD9.w [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$5F.b		; C9 5F ; Compare #$5F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $16		; 90 16 ; Branch if carry clear to $90, $16 [Flow: branch]
	cmp #$76.b		; C9 76 ; Compare #$76.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $13		; B0 13 ; Branch if carry set to $B0, $13 [Flow: branch]
	cmp #$5F.b		; C9 5F ; Compare #$5F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$61.b		; C9 61 ; Compare #$61.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$3E.b		; A9 3E ; Load #$3E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc #$42.b		; E9 42 ; Subtract #$42.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldy $1CDD.w		; AC DD 1C ; Load $1CDD.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$04.b],Y		; B7 04 ; Load accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CD4.w		; 8D D4 1C ; Store accumulator to $1CD4.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $1CDD.w		; 8C DD 1C ; Store Y register to $1CDD.w [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	ldy $1CDD.w		; AC DD 1C ; Load $1CDD.w into Y register [Writes: Y Index] [Flags: NZ]
	lda [$04.b],Y		; B7 04 ; Load accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $1CDD.w		; 8C DD 1C ; Store Y register to $1CDD.w [Reads: Y Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $1CF2.w,Y		; B9 F2 1C ; Load $1CF2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora #$0030.w		; 09 30 00 ; Logical OR #$0030.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F1200.l,X		; 9F 00 12 7F ; Store accumulator (long,X) $7F1200.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $1CD9.w		; 8E D9 1C ; Store X register to $1CD9.w [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy $1CDD.w		; AC DD 1C ; Load $1CDD.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$04.b],Y		; B7 04 ; Load accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $D391.w,X		; BD 91 D3 ; Load $D391.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CD2.w		; 8D D2 1C ; Store accumulator to $1CD2.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $1CDD.w		; 8C DD 1C ; Store Y register to $1CDD.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy $1CDD.w		; AC DD 1C ; Load $1CDD.w into Y register [Writes: Y Index] [Flags: NZ]
	lda [$04.b],Y		; B7 04 ; Load accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$3C00.w		; 29 00 3C ; Logical AND #$3C00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$387F.w		; A9 7F 38 ; Load #$387F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$E300.w		; 29 00 E3 ; Logical AND #$E300.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0180.w		; 09 80 01 ; Logical OR #$0180.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1CE2.w		; 8D E2 1C ; Store accumulator to $1CE2.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $1CDD.w		; 8C DD 1C ; Store Y register to $1CDD.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	inc $1CDD.w		; EE DD 1C ; Increment $1CDD.w [Flags: NZ]
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $C705.w,Y		; B9 05 C7 ; Load $C705.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $C703.w,Y		; B9 03 C7 ; Load $C703.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $0000.w,Y		; B9 00 00 ; Load $0000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F1200.l,X		; 9F 00 12 7F ; Store accumulator (long,X) $7F1200.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $90, $F3		; 90 F3 ; Branch if carry clear to $90, $F3 [Flow: branch]
	stx $1CD9.w		; 8E D9 1C ; Store X register to $1CD9.w [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	wai		; CB ; Wait for interrupt
	cmp [$CE.b]		; C7 CE ; Compare accumulator (long) [$CE.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$D0.b]		; C7 D0 ; Compare accumulator (long) [$D0.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$D3.b]		; C7 D3 ; Compare accumulator (long) [$D3.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$D7.b]		; C7 D7 ; Compare accumulator (long) [$D7.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$DB.b]		; C7 DB ; Compare accumulator (long) [$DB.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$DF.b]		; C7 DF ; Compare accumulator (long) [$DF.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$E2.b]		; C7 E2 ; Compare accumulator (long) [$E2.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$E5.b]		; C7 E5 ; Compare accumulator (long) [$E5.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$E8.b]		; C7 E8 ; Compare accumulator (long) [$E8.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$EB.b]		; C7 EB ; Compare accumulator (long) [$EB.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$ED.b]		; C7 ED ; Compare accumulator (long) [$ED.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$EF.b]		; C7 EF ; Compare accumulator (long) [$EF.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$F2.b]		; C7 F2 ; Compare accumulator (long) [$F2.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$F4.b]		; C7 F4 ; Compare accumulator (long) [$F4.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$F6.b]		; C7 F6 ; Compare accumulator (long) [$F6.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$F8.b]		; C7 F8 ; Compare accumulator (long) [$F8.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$FC.b]		; C7 FC ; Compare accumulator (long) [$FC.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$FF.b]		; C7 FF ; Compare accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$02.b]		; C7 02 ; Compare accumulator (long) [$02.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $C8.b		; 04 C8 ; Test and set bits $C8.b [Reads: Accumulator] [Flags: Z]
	ora [$C8.b]		; 07 C8 ; OR accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$C8.b		; 09 C8 ; Logical OR #$C8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl $11C8.w		; 0E C8 11 ; Arithmetic shift left $11C8.w [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	trb $C8.b		; 14 C8 ; Test and reset bits $C8.b [Reads: Accumulator] [Flags: Z]
	ora [$C8.b],Y		; 17 C8 ; OR accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	trb $1EC8.w		; 1C C8 1E ; Test and reset bits $1EC8.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsr $23C8.w		; 20 C8 23 ; Jump to subroutine at $23C8.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol $C8.b		; 26 C8 ; Rotate left $C8.b [Reads: Direct Page] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol $30C8.w		; 2E C8 30 ; Rotate left $30C8.w [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $C8.b,X		; 34 C8 ; Test bits $C8.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	and [$C8.b],Y		; 37 C8 ; AND accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $3EC8.w,X		; 3C C8 3E ; Test bits $3EC8.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor $C8.b,S		; 43 C8 ; Exclusive OR accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor [$C8.b]		; 47 C8 ; Exclusive OR accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$C8.b		; 49 C8 ; Exclusive OR #$C8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor $51C8.w		; 4D C8 51 ; Exclusive OR $51C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor $C8.b,X		; 55 C8 ; Exclusive OR accumulator with memory $C8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp $C85FC8.l		; 5C C8 5F C8 ; Jump long to $C85FC8.l [Flow: jump]
	adc ($C8.b,X)		; 61 C8 ; Add with carry ($C8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $C8.b,S		; 63 C8 ; Add with carry (stack relative) $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $C8.b		; 65 C8 ; Add $C8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc #$C8.b		; 69 C8 ; Add #$C8.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jmp ($6FC8.w)		; 6C C8 6F ; Jump indirect to ($6FC8.w) [Flow: jump]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($C8.b,S),Y		; 73 C8 ; Add with carry (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc [$C8.b],Y		; 77 C8 ; Add with carry (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc $7FC8.w,X		; 7D C8 7F ; Add $7FC8.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($C8.b,X)		; 81 C8 ; Store accumulator ($C8.b,X) [Reads: Direct Page, Accumulator, X Index]
	sty $C8.b		; 84 C8 ; Store Y register to $C8.b [Reads: Y Index]
	sta [$C8.b]		; 87 C8 ; Store accumulator (long) [$C8.b] [Reads: Direct Page, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $90C8.w		; 8D C8 90 ; Store accumulator to $90C8.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($C8.b)		; 92 C8 ; Store accumulator (indirect) ($C8.b) [Reads: Direct Page, Accumulator]
	stx $C8.b,Y		; 96 C8 ; Store X register $C8.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	stz $9EC8.w		; 9C C8 9E ; Store zero to $9EC8.w
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx #$A6C8.w		; A2 C8 A6 ; Load #$A6C8.w into X register [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$C8.b		; A9 C8 ; Load #$C8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $AFC8.w		; AC C8 AF ; Load $AFC8.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($C8.b)		; B2 C8 ; Load accumulator (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $C8.b,X		; B4 C8 ; Load Y register $C8.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldx $C8.b,Y		; B6 C8 ; Load X register $C8.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $C8C1C8.l,X		; BF C8 C1 C8 ; Load long $C8C1C8.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $C8.b,S		; C3 C8 ; Compare accumulator (stack relative) $C8.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp $C8.b		; C5 C8 ; Compare $C8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$C8.b]		; C7 C8 ; Compare accumulator (long) [$C8.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp $D0C8.w		; CD C8 D0 ; Compare $D0C8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp ($C8.b,S),Y		; D3 C8 ; Compare accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	dec $C8.b,X		; D6 C8 ; Decrement memory $C8.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cmp $59C8.w,Y		; D9 C8 59 ; Compare accumulator $59C8.w,Y [Reads: Y Index] [Flags: NCZ]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $5959.w,Y		; 59 59 59 ; Exclusive OR accumulator with memory $5959.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $5159.w,Y		; 59 59 51 ; Exclusive OR accumulator with memory $5159.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $1A59.w		; 2C 59 1A ; Test bits $1A59.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and [$1D.b]		; 27 1D ; AND accumulator with memory (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2B1A.w,Y		; 59 1A 2B ; Exclusive OR accumulator with memory $2B1A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $1A59.w,X		; 1E 59 1A ; Arithmetic shift left $1A59.w,X [Reads: X Index] [Flags: NCZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $221A.w,Y		; 59 1A 22 ; Exclusive OR accumulator with memory $221A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$1A.b]		; 27 1A ; AND accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$1D.b]		; 27 1D ; AND accumulator with memory (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $1A59.w		; 2D 59 1A ; Logical AND $1A59.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $1A2D.w		; 2C 2D 1A ; Test bits $1A2D.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and [$1A.b]		; 27 1A ; AND accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $251B.w		; 2D 1B 25 ; Logical AND $251B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $1A1B.w,X		; 1E 1B 1A ; Arithmetic shift left $1A1B.w,X [Reads: X Index] [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $281B.w,X		; 1E 1B 28 ; Arithmetic shift left $281B.w,X [Reads: X Index] [Flags: NCZ]
	trb $271A.w		; 1C 1A 27 ; Test and reset bits $271A.w [Reads: Accumulator] [Flags: Z]
	eor $211C.w,Y		; 59 1C 21 ; Exclusive OR accumulator with memory $211C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $281C.w,X		; 1E 1C 28 ; Arithmetic shift left $281C.w,X [Reads: X Index] [Flags: NCZ]
	rol $1C.b		; 26 1C ; Rotate left $1C.b [Reads: Direct Page] [Flags: NCZ]
	bit $1D.b		; 24 1D ; Test bits $1D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $1D2C.w,X		; 1E 2C 1D ; Arithmetic shift left $1D2C.w,X [Reads: X Index] [Flags: NCZ]
	jsl $1E281D.l		; 22 1D 28 1E ; Jump to subroutine long $1E281D.l [Writes: Stack Pointer] [Flow: call]
	and [$59.b]		; 27 59 ; AND accumulator with memory (long) [$59.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $592B.w,X		; 1E 2B 59 ; Arithmetic shift left $592B.w,X [Reads: X Index] [Flags: NCZ]
	asl $2B1A.w,X		; 1E 1A 2B ; Arithmetic shift left $2B1A.w,X [Reads: X Index] [Flags: NCZ]
	asl $2D27.w,X		; 1E 27 2D ; Arithmetic shift left $2D27.w,X [Reads: X Index] [Flags: NCZ]
	asl $591D.w,X		; 1E 1D 59 ; Arithmetic shift left $591D.w,X [Reads: X Index] [Flags: NCZ]
	asl $1E27.w,X		; 1E 27 1E ; Arithmetic shift left $1E27.w,X [Reads: X Index] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	asl $1F2F.w,X		; 1E 2F 1F ; Arithmetic shift left $1F2F.w,X [Reads: X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora $20282B.l,X		; 1F 2B 28 20 ; Logical OR long $20282B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $591E2F.l		; 22 2F 1E 59 ; Jump to subroutine long $591E2F.l [Writes: Stack Pointer] [Flow: call]
	jsr $2D1E.w		; 20 1E 2D ; Jump to subroutine at $2D1E.w [Writes: Stack Pointer] [Flow: call]
	jsr $2128.w		; 20 28 21 ; Jump to subroutine at $2128.w [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $1A211E.l		; 2F 1E 21 1A ; AND accumulator with memory (long) $1A211E.l [Writes: Accumulator] [Flags: NZ]
	bit $1E21.w		; 2C 21 1E ; Test bits $1E21.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($1A.b,X)		; 21 1A ; Logical AND ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $2D2120.l		; 22 20 21 2D ; Jump to subroutine long $2D2120.l [Writes: Stack Pointer] [Flow: call]
	eor $2722.w,Y		; 59 22 27 ; Exclusive OR accumulator with memory $2722.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $2259.w		; 20 59 22 ; Jump to subroutine at $2259.w [Writes: Stack Pointer] [Flow: call]
	and [$22.b]		; 27 22 ; AND accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $2D22.w		; 2C 22 2D ; Test bits $2D22.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $2E.b,S		; 23 2E ; AND accumulator with stack relative $2E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $242D.w		; 2C 2D 24 ; Test bits $242D.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and [$28.b]		; 27 28 ; AND accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $25		; 30 25 ; Branch if minus to $30, $25 [Flow: branch]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $1A.b		; 25 1A ; Logical AND $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $28.b		; 25 28 ; Logical AND $28.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $1A.b		; 26 1A ; Rotate left $1A.b [Reads: Direct Page] [Flags: NCZ]
	and [$26.b]		; 27 26 ; AND accumulator with memory (long) [$26.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	rol $1E.b		; 26 1E ; Rotate left $1E.b [Reads: Direct Page] [Flags: NCZ]
	rol $2E.b		; 26 2E ; Rotate left $2E.b [Reads: Direct Page] [Flags: NCZ]
	and [$51.b]		; 27 51 ; AND accumulator with memory (long) [$51.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $2759.w		; 2D 59 27 ; Logical AND $2759.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $2928.w		; 2D 28 29 ; Logical AND $2928.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $2827.w,X		; 1E 27 28 ; Arithmetic shift left $2827.w,X [Reads: X Index] [Flags: NCZ]
	rol $1D27.w		; 2E 27 1D ; Rotate left $1D27.w [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $592D.w		; 2E 2D 59 ; Rotate left $592D.w [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora $282728.l,X		; 1F 28 27 28 ; Logical OR long $282728.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and #$1E.b		; 29 1E ; Logical AND #$1E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and #$25.b		; 29 25 ; Logical AND #$25.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $2829.w,X		; 1E 29 28 ; Arithmetic shift left $2829.w,X [Reads: X Index] [Flags: NCZ]
	.db $30, $29		; 30 29 ; Branch if minus to $30, $29 [Flow: branch]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	asl $2B59.w,X		; 1E 59 2B ; Arithmetic shift left $2B59.w,X [Reads: X Index] [Flags: NCZ]
	asl $282C.w,X		; 1E 2C 28 ; Arithmetic shift left $282C.w,X [Reads: X Index] [Flags: NCZ]
	rol $1E.b		; 26 1E ; Rotate left $1E.b [Reads: Direct Page] [Flags: NCZ]
	bit $2C1E.w		; 2C 1E 2C ; Test bits $2C1E.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and ($2C.b,X)		; 21 2C ; Logical AND ($2C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $2D2D.w		; 2C 2D 2D ; Test bits $2D2D.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	asl $592B.w,X		; 1E 2B 59 ; Arithmetic shift left $592B.w,X [Reads: X Index] [Flags: NCZ]
	and $2221.w		; 2D 21 22 ; Logical AND $2221.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and [$2D.b]		; 27 2D ; AND accumulator with memory (long) [$2D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $2D2B.w,X		; 1E 2B 2D ; Arithmetic shift left $2D2B.w,X [Reads: X Index] [Flags: NCZ]
	and ($1A.b,X)		; 21 1A ; Logical AND ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $1E21.w		; 2D 21 1E ; Logical AND $1E21.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $2221.w		; 2D 21 22 ; Logical AND $2221.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $2D28.w		; 2D 28 2D ; Logical AND $2D28.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	rol $2F29.w		; 2E 29 2F ; Rotate left $2F29.w [Flags: NCZ]
	asl $302B.w,X		; 1E 2B 30 ; Arithmetic shift left $302B.w,X [Reads: X Index] [Flags: NCZ]
	jsl $30212D.l		; 22 2D 21 30 ; Jump to subroutine long $30212D.l [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $30, $1E		; 30 1E ; Branch if minus to $30, $1E [Flow: branch]
	.db $30, $21		; 30 21 ; Branch if minus to $30, $21 [Flow: branch]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	and ($28.b)		; 32 28 ; AND accumulator with memory (indirect) ($28.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $1E07.w		; 2E 07 1E ; Rotate left $1E07.w [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora ($21.b,S),Y		; 13 21 ; OR accumulator (stack relative indirect indexed) ($21.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora ($21.b,S),Y		; 13 21 ; OR accumulator (stack relative indirect indexed) ($21.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $2113.w,X		; 1E 13 21 ; Arithmetic shift left $2113.w,X [Reads: X Index] [Flags: NCZ]
	jsl $2E2818.l		; 22 18 28 2E ; Jump to subroutine long $2E2818.l [Writes: Stack Pointer] [Flow: call]
	lda $1CD4.w		; AD D4 1C ; Load $1CD4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	nop		; EA ; No operation
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $7DC9.w,Y		; 19 C9 7D ; OR accumulator with memory $7DC9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$84.b		; C9 84 ; Compare #$84.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$35.b		; C9 35 ; Compare #$35.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	jsr $D29C.w		; 20 9C D2 ; Jump to subroutine at $D29C.w [Writes: Stack Pointer] [Flow: call]
	jsr $D2AB.w		; 20 AB D2 ; Jump to subroutine at $D2AB.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$0006.w		; A0 06 00 ; Load #$0006.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D2AB.w		; 20 AB D2 ; Jump to subroutine at $D2AB.w [Writes: Stack Pointer] [Flow: call]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	ldy #$000C.w		; A0 0C 00 ; Load #$000C.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D2AB.w		; 20 AB D2 ; Jump to subroutine at $D2AB.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD4.w		; 8D D4 1C ; Store accumulator to $1CD4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	lda $1CD7.w		; AD D7 1C ; Load $1CD7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	rol $C9.b,X		; 36 C9 ; Rotate left $C9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$61.b		; C9 61 ; Compare #$61.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$C2.b		; C9 C2 ; Compare #$C2.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	stz $20D2.w		; 9C D2 20 ; Store zero to $20D2.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cmp ($A9.b)		; D2 A9 ; Compare accumulator (indirect) ($A9.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $029DFF.l,X		; FF FF 9D 02 ; Subtract with carry (long,X) $029DFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $E2		; 10 E2 ; Branch if plus to $10, $E2 [Flow: branch]
	.db $30, $EE		; 30 EE ; Branch if minus to $30, $EE [Flow: branch]
	cmp [$1C.b],Y		; D7 1C ; Compare accumulator (long indexed) [$1C.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0006.w		; A0 06 00 ; Load #$0006.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D2AB.w		; 20 AB D2 ; Jump to subroutine at $D2AB.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $1CD7.w		; EE D7 1C ; Increment $1CD7.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$000C.w		; A0 0C 00 ; Load #$000C.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D2AB.w		; 20 AB D2 ; Jump to subroutine at $D2AB.w [Writes: Stack Pointer] [Flow: call]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $1CD7.w		; EE D7 1C ; Increment $1CD7.w [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD4.w		; 8D D4 1C ; Store accumulator to $1CD4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $D2EC.w		; 20 EC D2 ; Jump to subroutine at $D2EC.w [Writes: Stack Pointer] [Flow: call]
	inc $1CD4.w		; EE D4 1C ; Increment $1CD4.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $1CDD.w		; AD DD 1C ; Load $1CDD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$0063.w		; C9 63 00 ; Compare #$0063.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $1CE6.w		; 8C E6 1C ; Store Y register to $1CE6.w [Reads: Y Index]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	cmp #$003B.w		; C9 3B 00 ; Compare #$003B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	cmp #$0050.w		; C9 50 00 ; Compare #$0050.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	lda #$0050.w		; A9 50 00 ; Load #$0050.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $1CE6.w		; 8C E6 1C ; Store Y register to $1CE6.w [Reads: Y Index]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	cmp #$0013.w		; C9 13 00 ; Compare #$0013.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	cmp #$0028.w		; C9 28 00 ; Compare #$0028.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	lda #$0028.w		; A9 28 00 ; Load #$0028.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sty $1CE6.w		; 8C E6 1C ; Store Y register to $1CE6.w [Reads: Y Index]
	sta $1CDD.w		; 8D DD 1C ; Store accumulator to $1CDD.w [Reads: Accumulator]
	cmp #$0012.w		; C9 12 00 ; Compare #$0012.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$003A.w		; C9 3A 00 ; Compare #$003A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0062.w		; C9 62 00 ; Compare #$0062.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda $1CE6.w		; AD E6 1C ; Load $1CE6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0007.w		; 29 07 00 ; Logical AND #$0007.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0006.w		; C9 06 00 ; Compare #$0006.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	inc $1CDD.w		; EE DD 1C ; Increment $1CDD.w [Flags: NZ]
	.db $80, $A7		; 80 A7 ; Branch always to $80, $A7 [Flow: branch]
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	lda $7F1200.l,X		; BF 00 12 7F ; Load long $7F1200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$007F.w		; 29 7F 00 ; Logical AND #$007F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0066.w		; E9 66 00 ; Subtract #$0066.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $C9FD.w		; 20 FD C9 ; Jump to subroutine at $C9FD.w [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	jmp ($FECA.w)		; 6C CA FE ; Jump indirect to ($FECA.w) [Flow: jump]
	cpy $CD1A.w		; CC 1A CD ; Compare $CD1A.w with Y register [Reads: Y Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp $CE6B.w		; CD 6B CE ; Compare $CE6B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $CE6B.w		; CE 6B CE ; Decrement $CE6B.w [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $CE6B.w		; CE 6B CE ; Decrement $CE6B.w [Flags: NZ]
	sta $CE.b,S		; 83 CE ; Store accumulator (stack relative) $CE.b,S [Reads: Stack Pointer, Accumulator]
	sbc ($CE.b),Y		; F1 CE ; Subtract with carry ($CE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$CE.b],Y		; F7 CE ; Subtract with carry (long indexed) [$CE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($CF.b)		; 72 CF ; Add with carry (indirect) ($CF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sep #$CF		; E2 CF ; Set processor status bits #$CF [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cmp #$D0.b		; C9 D0 ; Compare #$D0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$D0.b		; C9 D0 ; Compare #$D0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$D0.b		; C9 D0 ; Compare #$D0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc ($D0.b)		; F2 D0 ; Subtract with carry (indirect) ($D0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $D1.b,X		; 15 D1 ; OR accumulator with memory $D1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $62, $D1, $76		; 62 D1 76 ; Push effective relative address $62, $D1, $76 [Writes: Stack Pointer]
	cmp ($8D.b),Y		; D1 8D ; Compare accumulator ($8D.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($BD.b),Y		; D1 BD ; Compare accumulator ($BD.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($F9.b),Y		; D1 F9 ; Compare accumulator ($F9.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($30.b),Y		; D1 30 ; Compare accumulator ($30.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($5B.b)		; D2 5B ; Compare accumulator (indirect) ($5B.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($C2.b)		; D2 C2 ; Compare accumulator (indirect) ($C2.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	stz $C2D2.w		; 9C D2 C2 ; Store zero to $C2D2.w
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $D395.w		; AD 95 D3 ; Load $D395.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $D397.w		; AD 97 D3 ; Load $D397.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $10029D.l,X		; [PATTERN: Memory clearing operation] FF 9D 02 10 ; Subtract with carry (long,X) $10029D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	stz $1CD8.w		; 9C D8 1C ; Store zero to $1CD8.w
	stz $11.b		; 64 11 ; Store zero to $11.b
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CD5.w		; AD D5 1C ; Load $1CD5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	sta $B8CA.w,Y		; 99 CA B8 ; Store accumulator to $B8CA.w,Y [Reads: Y Index, Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $FDCC.w,Y		; F9 CC FD ; Subtract with carry $FDCC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $CCFD.w		; CC FD CC ; Compare $CCFD.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FDCC.w,X		; FD CC FD ; Subtract with carry $FDCC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $CCFD.w		; CC FD CC ; Compare $CCFD.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FDCC.w,X		; FD CC FD ; Subtract with carry $FDCC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $CCFD.w		; CC FD CC ; Compare $CCFD.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FDCC.w,X		; FD CC FD ; Subtract with carry $FDCC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $CCFD.w		; CC FD CC ; Compare $CCFD.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FDCC.w,X		; FD CC FD ; Subtract with carry $FDCC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $B820.w		; CC 20 B8 ; Compare $B820.w with Y register [Reads: Y Index] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $1CDD.w		; AD DD 1C ; Load $1CDD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0013.w		; C9 13 00 ; Compare #$0013.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$003B.w		; C9 3B 00 ; Compare #$003B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$0063.w		; C9 63 00 ; Compare #$0063.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jmp $C984.w		; 4C 84 C9 ; Jump to $C984.w [Flow: jump]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	lda $7F1200.l,X		; BF 00 12 7F ; Load long $7F1200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$59.b		; C9 59 ; Compare #$59.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $1CDD.w		; AD DD 1C ; Load $1CDD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $CB5E.w		; 20 5E CB ; Jump to subroutine at $CB5E.w [Writes: Stack Pointer] [Flow: call]
	lda $1CD6.w		; AD D6 1C ; Load $1CD6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD5.w		; 8D D5 1C ; Store accumulator to $1CD5.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: NCZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $0810.w		; 20 10 08 ; Jump to subroutine at $0810.w [Writes: Stack Pointer] [Flow: call]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $F7EFDF.l,X		; BF DF EF F7 ; Load long $F7EFDF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $E2FE.w,X		; FD FE E2 ; Subtract with carry $E2FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $8B		; 30 8B ; Branch if minus to $30, $8B [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $0720.w		; AD 20 07 ; Load $0720.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	ldy $0722.w		; AC 22 07 ; Load $0722.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $CB4A.w,Y		; B9 4A CB ; Load $CB4A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0726.w		; [PATTERN: Memory clearing operation] 8D 26 07 ; Store accumulator to $0726.w [Reads: Accumulator]
	lda $CB50.w,Y		; B9 50 CB ; Load $CB50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0724.w		; 8D 24 07 ; Store accumulator to $0724.w [Reads: Accumulator]
	stz $0720.w		; 9C 20 07 ; Store zero to $0720.w
.ACCU 8
	sep #$20		; E2 20
.INDEX 16
	rep #$10		; C2 10
	stz $03.b		; 64 03 ; Store zero to $03.b
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	lda $7F1200.l,X		; BF 00 12 7F ; Load long $7F1200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.INDEX 8
	sep #$10		; E2 10
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $CADF.w,Y		; B9 DF CA ; Load $CADF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldx $0724.w		; AE 24 07 ; Load $0724.w into X register [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7EC230.l,X		; 7F 30 C2 7E ; Add long $7EC230.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $7EC231.l,X		; 9F 31 C2 7E ; Store accumulator (long,X) $7EC231.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $0724.w		; 8E 24 07 ; Store X register to $0724.w [Reads: X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
.ACCU 16
	rep #$20		; C2 20
	lda #$8000.w		; A9 00 80 ; Load #$8000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	ldy #$0E.b		; A0 0E ; Load #$0E.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $0F.b		; 84 0F ; Store Y register to $0F.b [Reads: Y Index]
.INDEX 16
	rep #$10		; C2 10
	lda $7EC22F.l,X		; BF 2F C2 7E ; Load long $7EC22F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	stx $06.b		; 86 06 ; Store X register to $06.b [Reads: X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0726.w		; 6D 26 07 ; Add $0726.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$0FF0.w		; 29 F0 0F ; Logical AND #$0FF0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$0007.w		; 29 07 00 ; Logical AND #$0007.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $CB42.w,Y		; 59 42 CB ; Exclusive OR accumulator with memory $CB42.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $CB56.w,Y		; 39 56 CB ; AND accumulator with memory $CB56.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	lda $7F0001.l,X		; BF 01 00 7F ; Load long $7F0001.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $CB42.w,Y		; 59 42 CB ; Exclusive OR accumulator with memory $CB42.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F0001.l,X		; 9F 01 00 7F ; Store accumulator (long,X) $7F0001.l,X [Reads: Accumulator, X Index]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	lda $7F0001.l,X		; BF 01 00 7F ; Load long $7F0001.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $CB56.w,Y		; 39 56 CB ; AND accumulator with memory $CB56.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F0001.l,X		; 9F 01 00 7F ; Store accumulator (long,X) $7F0001.l,X [Reads: Accumulator, X Index]
	dec $03.b		; C6 03 ; Decrement $03.b [Reads: Direct Page] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0008.w		; C0 08 00 ; Compare #$0008.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $BE		; D0 BE ; Branch if not equal to $D0, $BE [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0010.w		; E0 10 00 ; Compare #$0010.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $81		; D0 81 ; Branch if not equal to $D0, $81 [Flow: branch]
	lda $0726.w		; AD 26 07 ; Load $0726.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0150.w		; 69 50 01 ; Add #$0150.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda [$0D.b],Y		; B7 0D ; Load accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	stx $06.b		; 86 06 ; Store X register to $06.b [Reads: X Index]
	ldx $0724.w		; AE 24 07 ; Load $0724.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EC22F.l,X		; BF 2F C2 7E ; Load long $7EC22F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$0FF0.w		; 29 F0 0F ; Logical AND #$0FF0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$0007.w		; 29 07 00 ; Logical AND #$0007.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $CB42.w,Y		; 59 42 CB ; Exclusive OR accumulator with memory $CB42.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	lda $7F0000.l,X		; BF 00 00 7F ; Load long $7F0000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $CB56.w,Y		; 39 56 CB ; AND accumulator with memory $CB56.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	lda $7F0001.l,X		; BF 01 00 7F ; Load long $7F0001.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $CB42.w,Y		; 59 42 CB ; Exclusive OR accumulator with memory $CB42.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F0001.l,X		; 9F 01 00 7F ; Store accumulator (long,X) $7F0001.l,X [Reads: Accumulator, X Index]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	lda $7F0001.l,X		; BF 01 00 7F ; Load long $7F0001.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $CB56.w,Y		; 39 56 CB ; AND accumulator with memory $CB56.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F0001.l,X		; 9F 01 00 7F ; Store accumulator (long,X) $7F0001.l,X [Reads: Accumulator, X Index]
	dec $03.b		; C6 03 ; Decrement $03.b [Reads: Direct Page] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0008.w		; C0 08 00 ; Compare #$0008.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $BE		; D0 BE ; Branch if not equal to $D0, $BE [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0010.w		; E0 10 00 ; Compare #$0010.w with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $76, $FF		; 82 76 FF ; Branch always long to $82, $76, $FF [Flow: branch]
	inc $1CD9.w		; EE D9 1C ; Increment $1CD9.w [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $1CD5.w		; CE D5 1C ; Decrement $1CD5.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	jsl $00EB5E.l		; 22 5E EB 00 ; Jump to subroutine long $00EB5E.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	inc $1CD9.w		; EE D9 1C ; Increment $1CD9.w [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $1CE9.w		; AD E9 1C ; Load $1CE9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1CE9.w		; 8D E9 1C ; Store accumulator to $1CE9.w [Reads: Accumulator]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora $F6.b		; 05 F6 ; Logical OR $F6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $46		; D0 46 ; Branch if not equal to $D0, $46 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FA		; F0 FA ; Branch if equal to $F0, $FA [Flow: branch]
	stz $1CE8.w		; 9C E8 1C ; Store zero to $1CE8.w
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CE8.w		; 8D E8 1C ; Store accumulator to $1CE8.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $CD16.w,X		; BD 16 CD ; Load $CD16.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda $CD17.w,X		; [PATTERN: Memory clearing operation] BD 17 CD ; Load $CD17.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsr $C4E2.w		; 20 E2 C4 ; Jump to subroutine at $C4E2.w [Writes: Stack Pointer] [Flow: call]
	stz $1CE6.w		; 9C E6 1C ; Store zero to $1CE6.w
	stz $1CD9.w		; 9C D9 1C ; Store zero to $1CD9.w
	stz $1CDA.w		; 9C DA 1C ; Store zero to $1CDA.w
	jsr $C4C9.w		; 20 C9 C4 ; Jump to subroutine at $C4C9.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD4.w		; 8D D4 1C ; Store accumulator to $1CD4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE9.w		; AD E9 1C ; Load $1CE9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1CE9.w		; 8D E9 1C ; Store accumulator to $1CE9.w [Reads: Accumulator]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $58		; F0 58 ; Branch if equal to $F0, $58 [Flow: branch]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $F6.b		; 05 F6 ; Logical OR $F6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	inc $1CE8.w		; EE E8 1C ; Increment $1CE8.w [Flags: NZ]
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0A.b		; 29 0A ; Logical AND #$0A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	dec $1CE8.w		; CE E8 1C ; Decrement $1CE8.w [Flags: NZ]
	jsr $CDC8.w		; 20 C8 CD ; Jump to subroutine at $CDC8.w [Writes: Stack Pointer] [Flow: call]
	jsr $D307.w		; 20 07 D3 ; Jump to subroutine at $D307.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	jsr $CDED.w		; 20 ED CD ; Jump to subroutine at $CDED.w [Writes: Stack Pointer] [Flow: call]
	jsr $D307.w		; 20 07 D3 ; Jump to subroutine at $D307.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD4.w		; 8D D4 1C ; Store accumulator to $1CD4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $1CE8.w		; AE E8 1C ; Load $1CE8.w into X register [Writes: X Index] [Flags: NZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	ldx #$1F.b		; A2 1F ; Load #$1F.b into X register [Writes: X Index] [Flags: NZ]
	stx $1CE8.w		; 8E E8 1C ; Store X register to $1CE8.w [Reads: X Index]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda $7EF340.l,X		; BF 40 F3 7E ; Load long $7EF340.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	.db $D0, $36		; D0 36 ; Branch if not equal to $D0, $36 [Flow: branch]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $7EF341.l,X		; BF 41 F3 7E ; Load long $7EF341.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	dec $1CE8.w		; CE E8 1C ; Decrement $1CE8.w [Flags: NZ]
	.db $80, $DB		; 80 DB ; Branch always to $80, $DB [Flow: branch]
	ldx $1CE8.w		; AE E8 1C ; Load $1CE8.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	stx $1CE8.w		; 8E E8 1C ; Store X register to $1CE8.w [Reads: X Index]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda $7EF340.l,X		; BF 40 F3 7E ; Load long $7EF340.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $7EF341.l,X		; BF 41 F3 7E ; Load long $7EF341.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	inc $1CE8.w		; EE E8 1C ; Increment $1CE8.w [Flags: NZ]
	.db $80, $D9		; 80 D9 ; Branch always to $80, $D9 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0DFA93.l,X		; BF 93 FA 0D ; Load long $0DFA93.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0DFA94.l,X		; BF 94 FA 0D ; Load long $0DFA94.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda $7EF340.l,X		; BF 40 F3 7E ; Load long $7EF340.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $13C2.w		; 8D C2 13 ; Store accumulator to $13C2.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $13C3.w		; 8D C3 13 ; Store accumulator to $13C3.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $13C4.w		; 8D C4 13 ; Store accumulator to $13C4.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $13C5.w		; 8D C5 13 ; Store accumulator to $13C5.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $13EC.w		; 8D EC 13 ; Store accumulator to $13EC.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $13ED.w		; 8D ED 13 ; Store accumulator to $13ED.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $13EE.w		; 8D EE 13 ; Store accumulator to $13EE.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $13EF.w		; 8D EF 13 ; Store accumulator to $13EF.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $7F1200.l,X		; BF 00 12 7F ; Load long $7F1200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CEA.w		; 8D EA 1C ; Store accumulator to $1CEA.w [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $1CD9.w		; 8E D9 1C ; Store X register to $1CD9.w [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$1C.b		; E9 1C ; Subtract #$1C.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1CE9.w		; 8D E9 1C ; Store accumulator to $1CE9.w [Reads: Accumulator]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora $F6.b		; 05 F6 ; Logical OR $F6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $46		; D0 46 ; Branch if not equal to $D0, $46 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FA		; F0 FA ; Branch if equal to $F0, $FA [Flow: branch]
	stz $1CE8.w		; 9C E8 1C ; Store zero to $1CE8.w
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CE8.w		; 8D E8 1C ; Store accumulator to $1CE8.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $CE7F.w,X		; BD 7F CE ; Load $CE7F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda $CE80.w,X		; [PATTERN: Memory clearing operation] BD 80 CE ; Load $CE80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsr $C4E2.w		; 20 E2 C4 ; Jump to subroutine at $C4E2.w [Writes: Stack Pointer] [Flow: call]
	stz $1CE6.w		; 9C E6 1C ; Store zero to $1CE6.w
	stz $1CD9.w		; 9C D9 1C ; Store zero to $1CD9.w
	stz $1CDA.w		; 9C DA 1C ; Store zero to $1CDA.w
	jsr $C4C9.w		; 20 C9 C4 ; Jump to subroutine at $C4C9.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD4.w		; 8D D4 1C ; Store accumulator to $1CD4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$1C.b		; E9 1C ; Subtract #$1C.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1CE9.w		; 8D E9 1C ; Store accumulator to $1CE9.w [Reads: Accumulator]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $F4.b		; 05 F4 ; Logical OR $F4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$D0.b		; 29 D0 ; Logical AND #$D0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4D		; D0 4D ; Branch if not equal to $D0, $4D [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CE8.w		; 8D E8 1C ; Store accumulator to $1CE8.w [Reads: Accumulator]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CE8.w		; 8D E8 1C ; Store accumulator to $1CE8.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $CEF1.w,X		; BD F1 CE ; Load $CEF1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda $CEF2.w,X		; [PATTERN: Memory clearing operation] BD F2 CE ; Load $CEF2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsr $C4E2.w		; 20 E2 C4 ; Jump to subroutine at $C4E2.w [Writes: Stack Pointer] [Flow: call]
	stz $1CE6.w		; 9C E6 1C ; Store zero to $1CE6.w
	stz $1CD9.w		; 9C D9 1C ; Store zero to $1CD9.w
	stz $1CDA.w		; 9C DA 1C ; Store zero to $1CDA.w
	jsr $C4C9.w		; 20 C9 C4 ; Jump to subroutine at $C4C9.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD4.w		; 8D D4 1C ; Store accumulator to $1CD4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$1C.b		; E9 1C ; Subtract #$1C.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1CE9.w		; 8D E9 1C ; Store accumulator to $1CE9.w [Reads: Accumulator]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $F4.b		; 05 F4 ; Logical OR $F4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$D0.b		; 29 D0 ; Logical AND #$D0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $46		; D0 46 ; Branch if not equal to $D0, $46 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FA		; F0 FA ; Branch if equal to $F0, $FA [Flow: branch]
	stz $1CE8.w		; 9C E8 1C ; Store zero to $1CE8.w
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CE8.w		; 8D E8 1C ; Store accumulator to $1CE8.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $CF6E.w,X		; BD 6E CF ; Load $CF6E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
	lda $CF6F.w,X		; [PATTERN: Memory clearing operation] BD 6F CF ; Load $CF6F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CF1.w		; 8D F1 1C ; Store accumulator to $1CF1.w [Reads: Accumulator]
	jsr $C4E2.w		; 20 E2 C4 ; Jump to subroutine at $C4E2.w [Writes: Stack Pointer] [Flow: call]
	stz $1CE6.w		; 9C E6 1C ; Store zero to $1CE6.w
	stz $1CD9.w		; 9C D9 1C ; Store zero to $1CD9.w
	stz $1CDA.w		; 9C DA 1C ; Store zero to $1CDA.w
	jsr $C4C9.w		; 20 C9 C4 ; Jump to subroutine at $C4C9.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD4.w		; 8D D4 1C ; Store accumulator to $1CD4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $F2.b		; A5 F2 ; Load $F2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $001CEA.l		; AF EA 1C 00 ; Load long $001CEA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	lda $001CEA.l		; AF EA 1C 00 ; Load long $001CEA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $00.b		; 64 00 ; Store zero to $00.b
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $0002.w,X		; BD 02 00 ; Load $0002.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0000.w,X		; 9D 00 00 ; Store accumulator to $0000.w,X [Reads: Accumulator, X Index]
	lda $0004.w,X		; BD 04 00 ; Load $0004.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0002.w,X		; 9D 02 00 ; Store accumulator to $0002.w,X [Reads: Accumulator, X Index]
	lda $0006.w,X		; BD 06 00 ; Load $0006.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0004.w,X		; 9D 04 00 ; Store accumulator to $0004.w,X [Reads: Accumulator, X Index]
	lda $0008.w,X		; BD 08 00 ; Load $0008.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0006.w,X		; 9D 06 00 ; Store accumulator to $0006.w,X [Reads: Accumulator, X Index]
	lda $000A.w,X		; BD 0A 00 ; Load $000A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0008.w,X		; 9D 08 00 ; Store accumulator to $0008.w,X [Reads: Accumulator, X Index]
	lda $000C.w,X		; BD 0C 00 ; Load $000C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $000A.w,X		; 9D 0A 00 ; Store accumulator to $000A.w,X [Reads: Accumulator, X Index]
	lda $000E.w,X		; BD 0E 00 ; Load $000E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $000C.w,X		; 9D 0C 00 ; Store accumulator to $000C.w,X [Reads: Accumulator, X Index]
	lda $0150.w,X		; BD 50 01 ; Load $0150.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $000E.w,X		; 9D 0E 00 ; Store accumulator to $000E.w,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; [PATTERN: Memory clearing operation] 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	cmp #$07E0.w		; C9 E0 07 ; Compare #$07E0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $C1		; 90 C1 ; Branch if carry clear to $90, $C1 [Flow: branch]
	stz $07DE.w		; 9C DE 07 ; Store zero to $07DE.w
	stz $07CE.w		; 9C CE 07 ; Store zero to $07CE.w
	stz $07BE.w		; [PATTERN: Memory clearing operation] 9C BE 07 ; Store zero to $07BE.w
	stz $07AE.w		; 9C AE 07 ; Store zero to $07AE.w
	stz $079E.w		; 9C 9E 07 ; Store zero to $079E.w
	stz $078E.w		; 9C 8E 07 ; Store zero to $078E.w
	stz $077E.w		; 9C 7E 07 ; Store zero to $077E.w
	stz $076E.w		; [PATTERN: Memory clearing operation] 9C 6E 07 ; Store zero to $076E.w
	stz $075E.w		; 9C 5E 07 ; Store zero to $075E.w
	stz $074E.w		; 9C 4E 07 ; Store zero to $074E.w
	stz $073E.w		; 9C 3E 07 ; Store zero to $073E.w
	stz $072E.w		; 9C 2E 07 ; Store zero to $072E.w
	stz $071E.w		; [PATTERN: Memory clearing operation] 9C 1E 07 ; Store zero to $071E.w
	stz $070E.w		; 9C 0E 07 ; Store zero to $070E.w
	stz $06FE.w		; 9C FE 06 ; Store zero to $06FE.w
	stz $06EE.w		; 9C EE 06 ; Store zero to $06EE.w
	stz $06DE.w		; 9C DE 06 ; Store zero to $06DE.w
	stz $06CE.w		; [PATTERN: Memory clearing operation] 9C CE 06 ; Store zero to $06CE.w
	stz $06BE.w		; 9C BE 06 ; Store zero to $06BE.w
	stz $06AE.w		; 9C AE 06 ; Store zero to $06AE.w
	stz $069E.w		; 9C 9E 06 ; Store zero to $069E.w
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $001CDF.l		; AF DF 1C 00 ; Load long $001CDF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $001CDF.l		; 8F DF 1C 00 ; Store accumulator (long) $001CDF.l [Reads: Accumulator]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $001CD9.l		; AF D9 1C 00 ; Load long $001CD9.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0001.w		; 69 01 00 ; Add #$0001.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $001CD9.l		; 8F D9 1C 00 ; Store accumulator (long) $001CD9.l [Reads: Accumulator]
	lda #$0050.w		; A9 50 00 ; Load #$0050.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $001CDD.l		; 8F DD 1C 00 ; Store accumulator (long) $001CDD.l [Reads: Accumulator]
	lda $0ED0C7.l		; AF C7 D0 0E ; Load long $0ED0C7.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $000722.l		; 8F 22 07 00 ; Store accumulator (long) $000722.l [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $000720.l		; 8F 20 07 00 ; Store accumulator (long) $000720.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $001CE6.l		; 8F E6 1C 00 ; Store accumulator (long) $001CE6.l [Reads: Accumulator]
	stz $02.b		; 64 02 ; Store zero to $02.b
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	jmp $CFF9.w		; 4C F9 CF ; Jump to $CFF9.w [Flow: jump]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	lda $7F1200.l,X		; BF 00 12 7F ; Load long $7F1200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $D399.w,X		; BD 99 D3 ; Load $D399.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CDD.w		; 8D DD 1C ; Store accumulator to $1CDD.w [Reads: Accumulator]
	lda $D0C3.w,X		; BD C3 D0 ; Load $D0C3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0722.w		; 8D 22 07 ; Store accumulator to $0722.w [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0720.w		; 8D 20 07 ; Store accumulator to $0720.w [Reads: Accumulator]
	inc $1CD9.w		; EE D9 1C ; Increment $1CD9.w [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $1CE6.w		; 9C E6 1C ; Store zero to $1CE6.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	lda $1CDC.w		; AD DC 1C ; Load $1CDC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$E3.b		; 29 E3 ; Logical AND #$E3.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CDC.w		; 8D DC 1C ; Store accumulator to $1CDC.w [Reads: Accumulator]
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $7F1200.l,X		; BF 00 12 7F ; Load long $7F1200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $1CDC.w		; 0D DC 1C ; Logical OR $1CDC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CDC.w		; 8D DC 1C ; Store accumulator to $1CDC.w [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $1CD9.w		; 8E D9 1C ; Store X register to $1CD9.w [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $F2.b		; A5 F2 ; Load $F2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $1CE0.w		; AD E0 1C ; Load $1CE0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp ($54.b),Y		; D1 54 ; Compare accumulator ($54.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($4C.b),Y		; D1 4C ; Compare accumulator ($4C.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($C2.b),Y		; D1 C2 ; Compare accumulator ($C2.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	.db $30, $AE		; 30 AE ; Branch if minus to $30, $AE [Flow: branch]
	cmp $BF1C.w,Y		; D9 1C BF ; Compare accumulator $BF1C.w,Y [Reads: Y Index] [Flags: NCZ]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $000F29.l,X		; 7F 29 0F 00 ; Add long $000F29.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $D3AF.w,X		; BD AF D3 ; Load $D3AF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CE0.w		; 8D E0 1C ; Store accumulator to $1CE0.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	dec $1CE0.w		; CE E0 1C ; Decrement $1CE0.w [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	inc $1CD9.w		; EE D9 1C ; Increment $1CD9.w [Flags: NZ]
	inc $1CD9.w		; EE D9 1C ; Increment $1CD9.w [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $1CE0.w		; 9C E0 1C ; Store zero to $1CE0.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $7F1200.l,X		; BF 00 12 7F ; Load long $7F1200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $1CD9.w		; 8E D9 1C ; Store X register to $1CD9.w [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $7F1200.l,X		; BF 00 12 7F ; Load long $7F1200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CD6.w		; 8D D6 1C ; Store accumulator to $1CD6.w [Reads: Accumulator]
	sta $1CD5.w		; 8D D5 1C ; Store accumulator to $1CD5.w [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $1CD9.w		; 8E D9 1C ; Store X register to $1CD9.w [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	inc $1CD9.w		; EE D9 1C ; Increment $1CD9.w [Flags: NZ]
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	lda $7F1200.l,X		; BF 00 12 7F ; Load long $7F1200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$007F.w		; 29 7F 00 ; Logical AND #$007F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $1CDD.w		; AC DD 1C ; Load $1CDD.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $D3A7.w,X		; BD A7 D3 ; Load $D3A7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $12D8.w,Y		; 99 D8 12 ; Store accumulator to $12D8.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $D3A7.w,X		; BD A7 D3 ; Load $D3A7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1300.w,Y		; 99 00 13 ; Store accumulator to $1300.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $1CDD.w		; 8C DD 1C ; Store Y register to $1CDD.w [Reads: Y Index]
	inc $1CD9.w		; EE D9 1C ; Increment $1CD9.w [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jmp $C984.w		; 4C 84 C9 ; Jump to $C984.w [Flow: jump]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	inc $1CD9.w		; EE D9 1C ; Increment $1CD9.w [Flags: NZ]
	ldx $1CD9.w		; AE D9 1C ; Load $1CD9.w into X register [Writes: X Index] [Flags: NZ]
	lda $7F1200.l,X		; BF 00 12 7F ; Load long $7F1200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$007F.w		; 29 7F 00 ; Logical AND #$007F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy $1CDD.w		; AC DD 1C ; Load $1CDD.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $D39F.w,X		; BD 9F D3 ; Load $D39F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $12D8.w,Y		; 99 D8 12 ; Store accumulator to $12D8.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $D39F.w,X		; BD 9F D3 ; Load $D39F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1300.w,Y		; 99 00 13 ; Store accumulator to $1300.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $EA		; D0 EA ; Branch if not equal to $D0, $EA [Flow: branch]
	sty $1CDD.w		; 8C DD 1C ; Store Y register to $1CDD.w [Reads: Y Index]
	inc $1CD9.w		; EE D9 1C ; Increment $1CD9.w [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jmp $C984.w		; 4C 84 C9 ; Jump to $C984.w [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; [PATTERN: Memory clearing operation] AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$07D0.w		; A9 D0 07 ; Load #$07D0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $0000.w,X		; 9E 00 00 ; Store zero to $0000.w,X [Reads: X Index]
	stz $0002.w,X		; 9E 02 00 ; Store zero to $0002.w,X [Reads: X Index]
	stz $0004.w,X		; [PATTERN: Memory clearing operation] 9E 04 00 ; Store zero to $0004.w,X [Reads: X Index]
	stz $0006.w,X		; 9E 06 00 ; Store zero to $0006.w,X [Reads: X Index]
	stz $0008.w,X		; 9E 08 00 ; Store zero to $0008.w,X [Reads: X Index]
	stz $000A.w,X		; 9E 0A 00 ; Store zero to $000A.w,X [Reads: X Index]
	stz $000C.w,X		; 9E 0C 00 ; Store zero to $000C.w,X [Reads: X Index]
	stz $000E.w,X		; 9E 0E 00 ; Store zero to $000E.w,X [Reads: X Index]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $10, $E1		; [PATTERN: Memory clearing operation] 10 E1 ; Branch if plus to $10, $E1 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	stz $1CDD.w		; 9C DD 1C ; Store zero to $1CDD.w
	inc $1CD9.w		; EE D9 1C ; Increment $1CD9.w [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $1CE6.w		; 9C E6 1C ; Store zero to $1CE6.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE9.w		; AD E9 1C ; Load $1CE9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1CE9.w		; 8D E9 1C ; Store accumulator to $1CE9.w [Reads: Accumulator]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	lda $00F4.w		; AD F4 00 ; Load $00F4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00F6.w		; 0D F6 00 ; Logical OR $00F6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	inc $1CD9.w		; EE D9 1C ; Increment $1CD9.w [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CE9.w		; 8D E9 1C ; Store accumulator to $1CE9.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE9.w		; AD E9 1C ; Load $1CE9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1CE9.w		; 8D E9 1C ; Store accumulator to $1CE9.w [Reads: Accumulator]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $F6.b		; 05 F6 ; Logical OR $F6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD4.w		; 8D D4 1C ; Store accumulator to $1CD4.w [Reads: Accumulator]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CE9.w		; 8D E9 1C ; Store accumulator to $1CE9.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0078.w		; C9 78 00 ; Compare #$0078.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor #$0001.w		; 49 01 00 ; Exclusive OR #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $D391.w,X		; BD 91 D3 ; Load $D391.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CD2.w		; 8D D2 1C ; Store accumulator to $1CD2.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $1CD2.w		; AD D2 1C ; Load $1CD2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CD0.w		; 8D D0 1C ; Store accumulator to $1CD0.w [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $1CD0.w		; AD D0 1C ; Load $1CD0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $1CD0.w		; 8D D0 1C ; Store accumulator to $1CD0.w [Reads: Accumulator]
	lda #$2F00.w		; A9 00 2F ; Load #$2F00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $D37F.w,Y		; B9 7F D3 ; Load $D37F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$0016.w		; A9 16 00 ; Load #$0016.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $D37F.w,Y		; B9 7F D3 ; Load $D37F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $D37F.w,Y		; B9 7F D3 ; Load $D37F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $1CE2.w		; AD E2 1C ; Load $1CE2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1300.w,X		; 9D 00 13 ; Store accumulator to $1300.w,X [Reads: Accumulator, X Index]
	inc $1CE2.w		; EE E2 1C ; Increment $1CE2.w [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$00FC.w		; E0 FC 00 ; Compare #$00FC.w with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $F0		; 90 F0 ; Branch if carry clear to $90, $F0 [Flow: branch]
	jsr $D307.w		; 20 07 D3 ; Jump to subroutine at $D307.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	jsr $D29C.w		; 20 9C D2 ; Jump to subroutine at $D29C.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $1CD0.w		; AD D0 1C ; Load $1CD0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0021.w		; 69 21 00 ; Add #$0021.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $1CD0.w		; 8D D0 1C ; Store accumulator to $1CD0.w [Reads: Accumulator]
	lda $1CD0.w		; AD D0 1C ; Load $1CD0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $1CD0.w		; 8D D0 1C ; Store accumulator to $1CD0.w [Reads: Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda #$2900.w		; A9 00 29 ; Load #$2900.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda #$0015.w		; A9 15 00 ; Load #$0015.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $1300.w,Y		; B9 00 13 ; Load $1300.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,X		; 9D 02 10 ; Store accumulator to $1002.w,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0000.w,Y		; 39 00 00 ; AND accumulator with memory $0000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0004.w		; 1C 04 00 ; Test and reset bits $0004.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pea $F328.w		; F4 28 F3 ; Push absolute address $F328.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc $68C838.l,X		; 7F 38 C8 68 ; Add long $68C838.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($A8.b,S),Y		; F3 A8 ; Subtract with carry (stack relative indirect indexed) ($A8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pea $F3A8.w		; F4 A8 F3 ; Push absolute address $F3A8.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	mvp $42,$62		; 44 62 42 ; Move block positive $42,$62 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	rol $387F.w		; 2E 7F 38 ; Rotate left $387F.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $BA.b		; 24 BA ; Test bits $BA.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $BC.b		; 24 BC ; Test bits $BC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $BE.b		; 24 BE ; Test bits $BE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $B8.b		; 24 B8 ; Test bits $B8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $BA.b		; 24 BA ; Test bits $BA.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $BC.b		; 24 BC ; Test bits $BC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $BE.b		; 24 BE ; Test bits $BE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $1F.b		; 24 1F ; Test bits $1F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9C.b		; 00 9C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($39.b,X)		; 01 39 ; Logical OR ($39.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($58.b,X)		; 01 58 ; Logical OR ($58.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($77.b,X)		; 01 77 ; Logical OR ($77.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($96.b,X)		; 01 96 ; Logical OR ($96.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($B6.b,X)		; 01 B6 ; Logical OR ($B6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D5.b,X)		; 01 D5 ; Logical OR ($D5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($F4.b,X)		; 01 F4 ; Logical OR ($F4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($8B.b,X)		; 01 8B ; Logical OR ($8B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$8000.w		; A9 00 80 ; Load #$8000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F71C0.l,X		; 9F C0 71 7F ; Store accumulator (long,X) $7F71C0.l,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F71C1.l,X		; 9F C1 71 7F ; Store accumulator (long,X) $7F71C1.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $D36B.w,Y		; B9 6B D3 ; Load $D36B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$0067.w		; C0 67 00 ; Compare #$0067.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	cpy #$0080.w		; C0 80 00 ; Compare #$0080.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	cpy #$007F.w		; C0 7F 00 ; Compare #$007F.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $CE		; F0 CE ; Branch if equal to $F0, $CE [Flow: branch]
	cpy #$0080.w		; C0 80 00 ; Compare #$0080.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda #$DF40.w		; A9 40 DF ; Load #$DF40.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$000E.w		; A9 0E 00 ; Load #$000E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $80, $BA		; 80 BA ; Branch always to $80, $BA [Flow: branch]
	cpy #$00FF.w		; C0 FF 00 ; Compare #$00FF.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $C4		; D0 C4 ; Branch if not equal to $D0, $C4 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $030000.l,X		; FF 00 00 03 ; Subtract with carry (long,X) $030000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0805.w		; 0C 05 08 ; Test and set bits $0805.w [Reads: Accumulator] [Flags: Z]
	trb $0E.b		; 14 0E ; Test and reset bits $0E.b [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $020A14.l		; 0F 14 0A 02 ; OR accumulator with memory (long) $020A14.l [Writes: Accumulator] [Flags: NZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00060C.l		; 0F 0C 06 00 ; OR accumulator with memory (long) $00060C.l [Writes: Accumulator] [Flags: NZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1212.w		; 0E 12 12 ; Arithmetic shift left $1212.w [Flags: NCZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$10.b]		; 07 10 ; OR accumulator with memory (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0716.w		; 0C 16 07 ; Test and set bits $0716.w [Reads: Accumulator] [Flags: Z]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0008.w		; 0C 08 00 ; Test and set bits $0008.w [Reads: Accumulator] [Flags: Z]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $10.b		; 06 10 ; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: NCZ]
	tsb $051A.w		; 0C 1A 05 ; Test and set bits $051A.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $1A.b		; 14 1A ; Test and reset bits $1A.b [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	trb $0300.w		; 1C 00 03 ; Test and reset bits $0300.w [Reads: Accumulator] [Flags: Z]
	ora ($1E.b,X)		; 01 1E ; Logical OR ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($04.b),Y		; 11 04 ; OR accumulator with memory ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0E.b),Y		; 11 0E ; OR accumulator with memory ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($0D.b,S),Y		; 13 0D ; OR accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$1A.b]		; 07 1A ; OR accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $0300.w		; 0E 00 03 ; Arithmetic shift left $0300.w [Flags: NCZ]
	ora [$1A.b]		; 07 1A ; OR accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	ora ($05.b)		; 12 05 ; OR accumulator with memory (indirect) ($05.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	sbc $0A03FF.l,X		; FF FF 03 0A ; Subtract with carry (long,X) $0A03FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0E.b,S		; 03 0E ; OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,S),Y		; 13 01 ; OR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0111.w		; 0C 11 01 ; Test and set bits $0111.w [Reads: Accumulator] [Flags: Z]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $050305.l		; 0F 05 03 05 ; OR accumulator with memory (long) $050305.l [Writes: Accumulator] [Flags: NZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $020A02.l		; 0F 02 0A 02 ; OR accumulator with memory (long) $020A02.l [Writes: Accumulator] [Flags: NZ]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0A0E.w		; 0C 0E 0A ; Test and set bits $0A0E.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $0AA9.w		; 9C A9 0A ; Store zero to $0AA9.w
	lda $0ED504.l,X		; BF 04 D5 0E ; Load long $0ED504.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	sta $0AB4.w		; 8D B4 0A ; Store accumulator to $0AB4.w [Reads: Accumulator]
	lda $0ED505.l,X		; BF 05 D5 0E ; Load long $0ED505.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	sta $0AB5.w		; 8D B5 0A ; Store accumulator to $0AB5.w [Reads: Accumulator]
	lda $0ED506.l,X		; BF 06 D5 0E ; Load long $0ED506.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	sta $0AB8.w		; 8D B8 0A ; Store accumulator to $0AB8.w [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0ED580.l,X		; BF 80 D5 0E ; Load long $0ED580.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	sta $0AAD.w		; 8D AD 0A ; Store accumulator to $0AAD.w [Reads: Accumulator]
	lda $0ED581.l,X		; BF 81 D5 0E ; Load long $0ED581.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	sta $0AAE.w		; 8D AE 0A ; Store accumulator to $0AAE.w [Reads: Accumulator]
	jsl $1BEEE8.l		; 22 E8 EE 1B ; Jump to subroutine long $1BEEE8.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEF0C.l		; 22 0C EF 1B ; Jump to subroutine long $1BEF0C.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BEEA8.l		; 22 A8 EE 1B ; Jump to subroutine long $1BEEA8.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BECC5.l		; 22 C5 EC 1B ; Jump to subroutine long $1BECC5.l [Writes: Stack Pointer] [Flow: call]
	jsl $1BECE4.l		; 22 E4 EC 1B ; Jump to subroutine long $1BECE4.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	sta $7EC540.l		; 8F 40 C5 7E ; Store accumulator (long) $7EC540.l [Reads: Accumulator]
	sta $7EC300.l		; 8F 00 C3 7E ; Store accumulator (long) $7EC300.l [Reads: Accumulator]
	sta $7EC340.l		; 8F 40 C3 7E ; Store accumulator (long) $7EC340.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9C.b		; 85 9C ; Store accumulator to $9C.b [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9D.b		; 85 9D ; Store accumulator to $9D.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9E.b		; 85 9E ; Store accumulator to $9E.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $D622.w		; 20 22 D6 ; Jump to subroutine at $D622.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $DC		; 80 DC ; Branch always to $80, $DC [Flow: branch]
	jsr $D622.w		; 20 22 D6 ; Jump to subroutine at $D622.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $DF		; 80 DF ; Branch always to $80, $DF [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$2669.w		; A2 69 26 ; Load #$2669.w into X register [Writes: X Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $16		; 90 16 ; Branch if carry clear to $90, $16 [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0183.w		; C9 83 01 ; Compare #$0183.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$0182.w		; C9 82 01 ; Compare #$0182.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0180.w		; C9 80 01 ; Compare #$0180.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	ldx #$19C6.w		; A2 C6 19 ; Load #$19C6.w into X register [Writes: X Index] [Flags: NZ]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	ldx #$2669.w		; A2 69 26 ; Load #$2669.w into X register [Writes: X Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0040.w		; 29 40 00 ; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldx #$2A32.w		; A2 32 2A ; Load #$2A32.w into X register [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$8501.w		; A9 01 85 ; Load #$8501.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc $01A9.w		; EE A9 01 ; Increment $01A9.w [Flags: NZ]
	sta $0ABD.w		; 8D BD 0A ; Store accumulator to $0ABD.w [Reads: Accumulator]
.ACCU 16
	rep #$21		; C2 21
	ldx #$BF00.w		; A2 00 BF ; Load #$BF00.w into X register [Writes: X Index] [Flags: NZ]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $BF48.w,X		; 7E 48 BF ; Rotate right $BF48.w,X [Reads: X Index] [Flags: NCZ]
	cpx #$7EC4.w		; E0 C4 7E ; Compare #$7EC4.w with X register [Reads: X Index] [Flags: NCZ]
	sta $7EC400.l,X		; 9F 00 C4 7E ; Store accumulator (long,X) $7EC400.l,X [Reads: Accumulator, X Index]
	sta $7EC600.l,X		; 9F 00 C6 7E ; Store accumulator (long,X) $7EC600.l,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $7EC4E0.l,X		; 9F E0 C4 7E ; Store accumulator (long,X) $7EC4E0.l,X [Reads: Accumulator, X Index]
	sta $7EC6E0.l,X		; 9F E0 C6 7E ; Store accumulator (long,X) $7EC6E0.l,X [Reads: Accumulator, X Index]
	lda $7EC410.l,X		; BF 10 C4 7E ; Load long $7EC410.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7EC4F0.l,X		; BF F0 C4 7E ; Load long $7EC4F0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC410.l,X		; 9F 10 C4 7E ; Store accumulator (long,X) $7EC410.l,X [Reads: Accumulator, X Index]
	sta $7EC610.l,X		; 9F 10 C6 7E ; Store accumulator (long,X) $7EC610.l,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $7EC4F0.l,X		; 9F F0 C4 7E ; Store accumulator (long,X) $7EC4F0.l,X [Reads: Accumulator, X Index]
	sta $7EC6F0.l,X		; 9F F0 C6 7E ; Store accumulator (long,X) $7EC6F0.l,X [Reads: Accumulator, X Index]
	lda $7EC4B0.l,X		; BF B0 C4 7E ; Load long $7EC4B0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7EC470.l,X		; BF 70 C4 7E ; Load long $7EC470.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC4B0.l,X		; 9F B0 C4 7E ; Store accumulator (long,X) $7EC4B0.l,X [Reads: Accumulator, X Index]
	sta $7EC6B0.l,X		; 9F B0 C6 7E ; Store accumulator (long,X) $7EC6B0.l,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $7EC470.l,X		; 9F 70 C4 7E ; Store accumulator (long,X) $7EC470.l,X [Reads: Accumulator, X Index]
	sta $7EC670.l,X		; 9F 70 C6 7E ; Store accumulator (long,X) $7EC670.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$D010.w		; E0 10 D0 ; Compare #$D010.w with X register [Reads: X Index] [Flags: NCZ]
	ldy $20E2.w		; [PATTERN: Memory clearing operation] AC E2 20 ; Load $20E2.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $EE.b		; 64 EE ; Store zero to $EE.b
	stz $0ABD.w		; 9C BD 0A ; Store zero to $0ABD.w
	.db $80, $9C		; 80 9C ; Branch always to $80, $9C [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $7EF35B.l		; AF 5B F3 7E ; Load long $7EF35B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $17		; 80 17 ; Branch always to $80, $17 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$0202.w		; A9 02 02 ; Load #$0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$0404.w		; A9 04 04 ; Load #$0404.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$0303.w		; A9 03 03 ; Load #$0303.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda #$001B.w		; A9 1B 00 ; Load #$001B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldx $0C.b		; A6 0C ; Load $0C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $1BEBB4.l,X		; BF B4 EB 1B ; Load long $1BEBB4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$D630.w		; 69 30 D6 ; Add #$D630.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
.INDEX 16
	rep #$10		; C2 10
	ldx #$01B2.w		; A2 B2 01 ; Load #$01B2.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D741.w		; 20 41 D7 ; Jump to subroutine at $D741.w [Writes: Stack Pointer] [Flow: call]
.INDEX 8
	sep #$10		; E2 10
	ldx $0D.b		; A6 0D ; Load $0D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $1BEBC1.l,X		; BF C1 EB 1B ; Load long $1BEBC1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$D648.w		; 69 48 D6 ; Add #$D648.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
.INDEX 16
	rep #$10		; C2 10
	ldx #$01B8.w		; A2 B8 01 ; Load #$01B8.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0003.w		; A0 03 00 ; Load #$0003.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D741.w		; 20 41 D7 ; Jump to subroutine at $D741.w [Writes: Stack Pointer] [Flow: call]
.INDEX 8
	sep #$10		; E2 10
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $1BEC06.l,X		; BF 06 EC 1B ; Load long $1BEC06.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$D308.w		; 69 08 D3 ; Add #$D308.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
.INDEX 16
	rep #$10		; C2 10
	ldx #$01E2.w		; A2 E2 01 ; Load #$01E2.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$000E.w		; A0 0E 00 ; Load #$000E.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D741.w		; 20 41 D7 ; Jump to subroutine at $D741.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC300.l,X		; 9F 00 C3 7E ; Store accumulator (long,X) $7EC300.l,X [Reads: Accumulator, X Index]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EC340.l,X		; BF 40 C3 7E ; Load long $7EC340.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D7FE.w		; 20 FE D7 ; Jump to subroutine at $D7FE.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC540.l,X		; 9F 40 C5 7E ; Store accumulator (long,X) $7EC540.l,X [Reads: Accumulator, X Index]
	lda $7EC350.l,X		; BF 50 C3 7E ; Load long $7EC350.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D7FE.w		; 20 FE D7 ; Jump to subroutine at $D7FE.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC550.l,X		; 9F 50 C5 7E ; Store accumulator (long,X) $7EC550.l,X [Reads: Accumulator, X Index]
	lda $7EC360.l,X		; BF 60 C3 7E ; Load long $7EC360.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D7FE.w		; 20 FE D7 ; Jump to subroutine at $D7FE.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC560.l,X		; 9F 60 C5 7E ; Store accumulator (long,X) $7EC560.l,X [Reads: Accumulator, X Index]
	lda $7EC370.l,X		; BF 70 C3 7E ; Load long $7EC370.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D7FE.w		; 20 FE D7 ; Jump to subroutine at $D7FE.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC570.l,X		; 9F 70 C5 7E ; Store accumulator (long,X) $7EC570.l,X [Reads: Accumulator, X Index]
	lda $7EC380.l,X		; BF 80 C3 7E ; Load long $7EC380.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D7FE.w		; 20 FE D7 ; Jump to subroutine at $D7FE.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC580.l,X		; 9F 80 C5 7E ; Store accumulator (long,X) $7EC580.l,X [Reads: Accumulator, X Index]
	lda $7EC390.l,X		; BF 90 C3 7E ; Load long $7EC390.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D7FE.w		; 20 FE D7 ; Jump to subroutine at $D7FE.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC590.l,X		; 9F 90 C5 7E ; Store accumulator (long,X) $7EC590.l,X [Reads: Accumulator, X Index]
	lda $7EC3A0.l,X		; BF A0 C3 7E ; Load long $7EC3A0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D7FE.w		; 20 FE D7 ; Jump to subroutine at $D7FE.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC5A0.l,X		; 9F A0 C5 7E ; Store accumulator (long,X) $7EC5A0.l,X [Reads: Accumulator, X Index]
	lda $7EC3B0.l,X		; BF B0 C3 7E ; Load long $7EC3B0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D7FE.w		; 20 FE D7 ; Jump to subroutine at $D7FE.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC5B0.l,X		; 9F B0 C5 7E ; Store accumulator (long,X) $7EC5B0.l,X [Reads: Accumulator, X Index]
	lda $7EC3C0.l,X		; BF C0 C3 7E ; Load long $7EC3C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D7FE.w		; 20 FE D7 ; Jump to subroutine at $D7FE.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC5C0.l,X		; 9F C0 C5 7E ; Store accumulator (long,X) $7EC5C0.l,X [Reads: Accumulator, X Index]
	lda $7EC3D0.l,X		; BF D0 C3 7E ; Load long $7EC3D0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D7FE.w		; 20 FE D7 ; Jump to subroutine at $D7FE.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC5D0.l,X		; 9F D0 C5 7E ; Store accumulator (long,X) $7EC5D0.l,X [Reads: Accumulator, X Index]
	lda $7EC3E0.l,X		; BF E0 C3 7E ; Load long $7EC3E0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D7FE.w		; 20 FE D7 ; Jump to subroutine at $D7FE.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC5E0.l,X		; 9F E0 C5 7E ; Store accumulator (long,X) $7EC5E0.l,X [Reads: Accumulator, X Index]
	lda $7EC3F0.l,X		; BF F0 C3 7E ; Load long $7EC3F0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D7FE.w		; 20 FE D7 ; Jump to subroutine at $D7FE.w [Writes: Stack Pointer] [Flow: call]
	sta $7EC5F0.l,X		; 9F F0 C5 7E ; Store accumulator (long,X) $7EC5F0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $D75B.w		; 4C 5B D7 ; Jump to $D75B.w [Flow: jump]
.INDEX 16
	rep #$10		; C2 10
	lda $7EC540.l		; AF 40 C5 7E ; Load long $7EC540.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $7EC300.l		; AF 00 C3 7E ; Load long $7EC300.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc #$0E.b		; 69 0E ; Add #$0E.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $039000.l,X		; 1F 00 90 03 ; Logical OR long $039000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A5.b		; 02 A5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$C0.b		; 69 C0 ; Add #$C0.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora ($C9.b,X)		; 01 C9 ; Logical OR ($C9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	lda #$E0.b		; A9 E0 ; Load #$E0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $85.b,S		; 03 85 ; OR accumulator with stack relative $85.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $A5.b		; 04 A5 ; Test and set bits $A5.b [Reads: Accumulator] [Flags: Z]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	jmp ($0390.w,X)		; 7C 90 03 ; Jump indirect indexed to ($0390.w,X) [Reads: X Index] [Flow: jump]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jmp ($0205.w,X)		; 7C 05 02 ; Jump indirect indexed to ($0205.w,X) [Reads: X Index] [Flow: jump]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EC340.l,X		; BF 40 C3 7E ; Load long $7EC340.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC540.l,X		; 9F 40 C5 7E ; Store accumulator (long,X) $7EC540.l,X [Reads: Accumulator, X Index]
	lda $7EC350.l,X		; BF 50 C3 7E ; Load long $7EC350.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC550.l,X		; 9F 50 C5 7E ; Store accumulator (long,X) $7EC550.l,X [Reads: Accumulator, X Index]
	lda $7EC360.l,X		; BF 60 C3 7E ; Load long $7EC360.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC560.l,X		; 9F 60 C5 7E ; Store accumulator (long,X) $7EC560.l,X [Reads: Accumulator, X Index]
	lda $7EC370.l,X		; BF 70 C3 7E ; Load long $7EC370.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC570.l,X		; 9F 70 C5 7E ; Store accumulator (long,X) $7EC570.l,X [Reads: Accumulator, X Index]
	lda $7EC380.l,X		; BF 80 C3 7E ; Load long $7EC380.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC580.l,X		; 9F 80 C5 7E ; Store accumulator (long,X) $7EC580.l,X [Reads: Accumulator, X Index]
	lda $7EC390.l,X		; BF 90 C3 7E ; Load long $7EC390.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC590.l,X		; 9F 90 C5 7E ; Store accumulator (long,X) $7EC590.l,X [Reads: Accumulator, X Index]
	lda $7EC3A0.l,X		; BF A0 C3 7E ; Load long $7EC3A0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC5A0.l,X		; 9F A0 C5 7E ; Store accumulator (long,X) $7EC5A0.l,X [Reads: Accumulator, X Index]
	lda $7EC3B0.l,X		; BF B0 C3 7E ; Load long $7EC3B0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC5B0.l,X		; 9F B0 C5 7E ; Store accumulator (long,X) $7EC5B0.l,X [Reads: Accumulator, X Index]
	lda $7EC3C0.l,X		; BF C0 C3 7E ; Load long $7EC3C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC5C0.l,X		; 9F C0 C5 7E ; Store accumulator (long,X) $7EC5C0.l,X [Reads: Accumulator, X Index]
	lda $7EC3D0.l,X		; BF D0 C3 7E ; Load long $7EC3D0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC5D0.l,X		; 9F D0 C5 7E ; Store accumulator (long,X) $7EC5D0.l,X [Reads: Accumulator, X Index]
	lda $7EC3E0.l,X		; BF E0 C3 7E ; Load long $7EC3E0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC5E0.l,X		; 9F E0 C5 7E ; Store accumulator (long,X) $7EC5E0.l,X [Reads: Accumulator, X Index]
	lda $7EC3F0.l,X		; BF F0 C3 7E ; Load long $7EC3F0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC5F0.l,X		; 9F F0 C5 7E ; Store accumulator (long,X) $7EC5F0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $9A		; D0 9A ; Branch if not equal to $D0, $9A [Flow: branch]
	lda $7EC540.l		; AF 40 C5 7E ; Load long $7EC540.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $46		; D0 46 ; Branch if not equal to $D0, $46 [Flow: branch]
.INDEX 16
	rep #$10		; C2 10
	ldx #$4020.w		; A2 20 40 ; Load #$4020.w into X register [Writes: X Index] [Flags: NZ]
	stx $9C.b		; 86 9C ; Store X register to $9C.b [Reads: X Index]
	ldx #$8040.w		; A2 40 80 ; Load #$8040.w into X register [Writes: X Index] [Flags: NZ]
	stx $9D.b		; 86 9D ; Store X register to $9D.b [Reads: X Index]
	ldx #$4F33.w		; A2 33 4F ; Load #$4F33.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$894F.w		; A0 4F 89 ; Load #$894F.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	cmp #$5B.b		; C9 5B ; Compare #$5B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	ldx #$4C26.w		; A2 26 4C ; Load #$4C26.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$8C4C.w		; A0 4C 8C ; Load #$8C4C.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	ldx #$4A26.w		; A2 26 4A ; Load #$4A26.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$874A.w		; A0 4A 87 ; Load #$874A.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$43.b		; C9 43 ; Compare #$43.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$45.b		; C9 45 ; Compare #$45.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$47.b		; C9 47 ; Compare #$47.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stx $9C.b		; 86 9C ; Store X register to $9C.b [Reads: X Index]
	sty $9D.b		; 84 9D ; Store Y register to $9D.b [Reads: Y Index]
.INDEX 8
	sep #$10		; E2 10
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	ldx #$7E.b		; A2 7E ; Load #$7E.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	lda $7EC380.l,X		; BF 80 C3 7E ; Load long $7EC380.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC580.l,X		; 9F 80 C5 7E ; Store accumulator (long,X) $7EC580.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $EC		; 10 EC ; Branch if plus to $10, $EC [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	jmp $D8AE.w		; 4C AE D8 ; Jump to $D8AE.w [Flow: jump]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $13E6FF.l,X		; FF FF E6 13 ; Subtract with carry (long,X) $13E6FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $13.b		; A5 13 ; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $13.b		; C6 13 ; Decrement $13.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $FB		; D0 FB ; Branch if not equal to $D0, $FB [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $95.b		; 85 95 ; Store accumulator to $95.b [Reads: Accumulator]
	lda $9B.b		; A5 9B ; Load $9B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC229.l		; 8F 29 C2 7E ; Store accumulator (long) $7EC229.l [Reads: Accumulator]
	jsl $00893D.l		; 22 3D 89 00 ; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	stz $020D.w		; 9C 0D 02 ; Store zero to $020D.w
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9C.b		; 85 9C ; Store accumulator to $9C.b [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9D.b		; 85 9D ; Store accumulator to $9D.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9E.b		; 85 9E ; Store accumulator to $9E.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$0250.w		; A9 50 02 ; Load #$0250.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0100.w		; 8D 00 01 ; Store accumulator to $0100.w [Reads: Accumulator]
	ldx #$7E.b		; A2 7E ; Load #$7E.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EC500.l,X		; BF 00 C5 7E ; Load long $7EC500.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7FDD80.l,X		; 9F 80 DD 7F ; Store accumulator (long,X) $7FDD80.l,X [Reads: Accumulator, X Index]
	lda $7EC580.l,X		; BF 80 C5 7E ; Load long $7EC580.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7FDE00.l,X		; 9F 00 DE 7F ; Store accumulator (long,X) $7FDE00.l,X [Reads: Accumulator, X Index]
	lda $7EC600.l,X		; BF 00 C6 7E ; Load long $7EC600.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7FDE80.l,X		; 9F 80 DE 7F ; Store accumulator (long,X) $7FDE80.l,X [Reads: Accumulator, X Index]
	lda $7EC680.l,X		; BF 80 C6 7E ; Load long $7EC680.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7FDF00.l,X		; 9F 00 DF 7F ; Store accumulator (long,X) $7FDF00.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $DC		; 10 DC ; Branch if plus to $10, $DC [Flow: branch]
	lda $011A.w		; AD 1A 01 ; Load $011A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC221.l		; [PATTERN: Memory clearing operation] 8F 21 C2 7E ; Store accumulator (long) $7EC221.l [Reads: Accumulator]
	lda $011C.w		; AD 1C 01 ; Load $011C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC223.l		; 8F 23 C2 7E ; Store accumulator (long) $7EC223.l [Reads: Accumulator]
	stz $011A.w		; 9C 1A 01 ; Store zero to $011A.w
	stz $011C.w		; 9C 1C 01 ; Store zero to $011C.w
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC200.l		; 8F 00 C2 7E ; Store accumulator (long) $7EC200.l [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC202.l		; 8F 02 C2 7E ; Store accumulator (long) $7EC202.l [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC204.l		; [PATTERN: Memory clearing operation] 8F 04 C2 7E ; Store accumulator (long) $7EC204.l [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC206.l		; 8F 06 C2 7E ; Store accumulator (long) $7EC206.l [Reads: Accumulator]
	stz $E0.b		; 64 E0 ; Store zero to $E0.b
	stz $E2.b		; 64 E2 ; Store zero to $E2.b
	stz $E4.b		; [PATTERN: Memory clearing operation] 64 E4 ; Store zero to $E4.b
	stz $E6.b		; 64 E6 ; Store zero to $E6.b
	stz $E8.b		; 64 E8 ; Store zero to $E8.b
	stz $EA.b		; 64 EA ; Store zero to $EA.b
	lda $99.b		; A5 99 ; Load $99.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC225.l		; 8F 25 C2 7E ; Store accumulator (long) $7EC225.l [Reads: Accumulator]
	lda #$2002.w		; A9 02 20 ; Load #$2002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda #$0300.w		; A9 00 03 ; Load #$0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	sta $7F0100.l,X		; 9F 00 01 7F ; Store accumulator (long,X) $7F0100.l,X [Reads: Accumulator, X Index]
	sta $7F0200.l,X		; 9F 00 02 7F ; Store accumulator (long,X) $7F0200.l,X [Reads: Accumulator, X Index]
	sta $7F0300.l,X		; 9F 00 03 7F ; Store accumulator (long,X) $7F0300.l,X [Reads: Accumulator, X Index]
	sta $7F0400.l,X		; 9F 00 04 7F ; Store accumulator (long,X) $7F0400.l,X [Reads: Accumulator, X Index]
	sta $7F0500.l,X		; 9F 00 05 7F ; Store accumulator (long,X) $7F0500.l,X [Reads: Accumulator, X Index]
	sta $7F0600.l,X		; 9F 00 06 7F ; Store accumulator (long,X) $7F0600.l,X [Reads: Accumulator, X Index]
	sta $7F0700.l,X		; 9F 00 07 7F ; Store accumulator (long,X) $7F0700.l,X [Reads: Accumulator, X Index]
	sta $7F0800.l,X		; 9F 00 08 7F ; Store accumulator (long,X) $7F0800.l,X [Reads: Accumulator, X Index]
	sta $7F0900.l,X		; 9F 00 09 7F ; Store accumulator (long,X) $7F0900.l,X [Reads: Accumulator, X Index]
	sta $7F0A00.l,X		; 9F 00 0A 7F ; Store accumulator (long,X) $7F0A00.l,X [Reads: Accumulator, X Index]
	sta $7F0B00.l,X		; 9F 00 0B 7F ; Store accumulator (long,X) $7F0B00.l,X [Reads: Accumulator, X Index]
	sta $7F0C00.l,X		; 9F 00 0C 7F ; Store accumulator (long,X) $7F0C00.l,X [Reads: Accumulator, X Index]
	sta $7F0D00.l,X		; 9F 00 0D 7F ; Store accumulator (long,X) $7F0D00.l,X [Reads: Accumulator, X Index]
	sta $7F0E00.l,X		; 9F 00 0E 7F ; Store accumulator (long,X) $7F0E00.l,X [Reads: Accumulator, X Index]
	sta $7F0F00.l,X		; 9F 00 0F 7F ; Store accumulator (long,X) $7F0F00.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $D0, $BC		; D0 BC ; Branch if not equal to $D0, $BC [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$F2.b		; A9 F2 ; Load #$F2.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $13.b		; C6 13 ; Decrement $13.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	jsl $00893D.l		; 22 3D 89 00 ; Jump to subroutine long $00893D.l [Writes: Stack Pointer] [Flow: call]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EC225.l		; AF 25 C2 7E ; Load long $7EC225.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $99.b		; 85 99 ; Store accumulator to $99.b [Reads: Accumulator]
	lda $7EC200.l		; AF 00 C2 7E ; Load long $7EC200.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	lda $7EC202.l		; AF 02 C2 7E ; Load long $7EC202.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E2.b		; 85 E2 ; Store accumulator to $E2.b [Reads: Accumulator]
	lda $7EC204.l		; AF 04 C2 7E ; Load long $7EC204.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E6.b		; [PATTERN: Memory clearing operation] 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $7EC206.l		; AF 06 C2 7E ; Load long $7EC206.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	stz $E4.b		; 64 E4 ; Store zero to $E4.b
	stz $EA.b		; 64 EA ; Store zero to $EA.b
	lda $7EC221.l		; AF 21 C2 7E ; Load long $7EC221.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $011A.w		; 8D 1A 01 ; Store accumulator to $011A.w [Reads: Accumulator]
	lda $7EC223.l		; AF 23 C2 7E ; Load long $7EC223.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $011C.w		; 8D 1C 01 ; Store accumulator to $011C.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00F567.l		; 22 67 F5 00 ; Jump to subroutine long $00F567.l [Writes: Stack Pointer] [Flow: call]
	inc $13.b		; E6 13 ; Increment $13.b [Reads: Direct Page] [Flags: NZ]
	lda $13.b		; A5 13 ; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $16		; [PATTERN: Memory clearing operation] D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13.b		; 85 13 ; Store accumulator to $13.b [Reads: Accumulator]
	lda $7EC229.l		; AF 29 C2 7E ; Load long $7EC229.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $42, $00		; 42 00 ; Reserved instruction
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($60.b,X)		; 21 60 ; Logical AND ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $40.b,S		; 43 40 ; Exclusive OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $2101.w		; 0E 01 21 ; Arithmetic shift left $2101.w [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $C0, $2E		; 62 C0 2E ; Push effective relative address $62, $C0, $2E [Writes: Stack Pointer]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$2E.b		; C0 2E ; Compare #$2E.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $10, $61		; 10 61 ; Branch if plus to $10, $61 [Flow: branch]
	adc $62.b,S		; 63 62 ; Add with carry (stack relative) $62.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A1.b		; 00 A1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	asl $A101.w		; 0E 01 A1 ; Arithmetic shift left $A101.w [Flags: NCZ]
	adc $6B.b,S		; 63 6B ; Add with carry (stack relative) $6B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $21.b		; 02 21 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $21.b,S		; 03 21 ; OR accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $21.b		; 04 21 ; Test and set bits $21.b [Reads: Accumulator] [Flags: Z]
	ora $21.b		; 05 21 ; Logical OR $21.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $21.b		; 06 21 ; Arithmetic shift left $21.b [Reads: Direct Page] [Flags: NCZ]
	ora [$21.b]		; 07 21 ; OR accumulator with memory (long) [$21.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($21.b)		; 12 21 ; OR accumulator with memory (indirect) ($21.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($21.b,S),Y		; 13 21 ; OR accumulator (stack relative indirect indexed) ($21.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $21.b		; 14 21 ; Test and reset bits $21.b [Reads: Accumulator] [Flags: Z]
	ora $21.b,X		; 15 21 ; OR accumulator with memory $21.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $21.b,X		; 16 21 ; Arithmetic shift left $21.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora [$21.b],Y		; 17 21 ; OR accumulator with memory (long indexed) [$21.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr $0100.w		; 4E 00 01 ; Logical shift right $0100.w [Flags: NCZ]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $011A40.l		; 4F 40 1A 01 ; Exclusive OR accumulator with memory (long) $011A40.l [Writes: Accumulator] [Flags: NZ]
	and ($60.b,X)		; 21 60 ; Logical AND ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $0100.w,X		; 5D 00 01 ; Exclusive OR accumulator with memory $0100.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror $2EC0.w		; 6E C0 2E ; Rotate right $2EC0.w [Flags: NCZ]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $2EC0.w,X		; 7D C0 2E ; Add $2EC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $61		; 10 61 ; Branch if plus to $10, $61 [Flow: branch]
	adc $6E.b,S		; 63 6E ; Add with carry (stack relative) $6E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A1.b		; 00 A1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $6F.b,S		; 63 6F ; Add with carry (stack relative) $6F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora ($A1.b,X)		; 01 A1 ; Logical OR ($A1.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $7D.b,S		; 63 7D ; Add with carry (stack relative) $7D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $2111.w,X		; 7E 11 21 ; Rotate right $2111.w,X [Reads: X Index] [Flags: NCZ]
	adc $80.b,S		; 63 80 ; Add with carry (stack relative) $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor ($3E.b,X)		; 41 3E ; Exclusive OR accumulator with memory ($3E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($21.b),Y		; 11 21 ; OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $2111.w,X		; 3E 11 21 ; Rotate left $2111.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rol $2111.w,X		; 3E 11 21 ; Rotate left $2111.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $3EC0.w		; 0C C0 3E ; Test and set bits $3EC0.w [Reads: Accumulator] [Flags: Z]
	ora ($21.b),Y		; 11 21 ; OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $3EC0.w		; 0D C0 3E ; Logical OR $3EC0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($21.b),Y		; 11 21 ; OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $3EC0.w,X		; 1E C0 3E ; Arithmetic shift left $3EC0.w,X [Reads: X Index] [Flags: NCZ]
	ora ($21.b),Y		; 11 21 ; OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $113EC0.l,X		; 1F C0 3E 11 ; Logical OR long $113EC0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($10.b,X)		; 21 10 ; Logical AND ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($C0.b),Y		; 91 C0 ; Store accumulator ($C0.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $10, $92		; 10 92 ; Branch if plus to $10, $92 [Flow: branch]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	.db $10, $B3		; 10 B3 ; Branch if plus to $10, $B3 [Flow: branch]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $D2		; 10 D2 ; Branch if plus to $10, $D2 [Flow: branch]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	ora ($33.b),Y		; 11 33 ; OR accumulator with memory ($33.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($52.b),Y		; 11 52 ; OR accumulator with memory ($52.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	ora ($73.b),Y		; 11 73 ; OR accumulator with memory ($73.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($92.b),Y		; 11 92 ; OR accumulator with memory ($92.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	ora ($B3.b),Y		; 11 B3 ; OR accumulator with memory ($B3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($D2.b),Y		; 11 D2 ; OR accumulator with memory ($D2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora ($06.b)		; 12 06 ; OR accumulator with memory (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($11.b)		; 12 11 ; OR accumulator with memory (indirect) ($11.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$12.b		; C0 12 ; Compare #$12.b with Y register [Reads: Y Index] [Flags: NCZ]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	ora ($33.b)		; 12 33 ; OR accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($52.b)		; 12 52 ; OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	ora ($73.b)		; 12 73 ; OR accumulator with memory (indirect) ($73.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($92.b)		; 12 92 ; OR accumulator with memory (indirect) ($92.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	ora ($B3.b)		; 12 B3 ; OR accumulator with memory (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($D2.b)		; 12 D2 ; OR accumulator with memory (indirect) ($D2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	ora ($F3.b)		; 12 F3 ; OR accumulator with memory (indirect) ($F3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b,S),Y		; 13 12 ; OR accumulator (stack relative indirect indexed) ($12.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	.db $30, $0B		; 30 0B ; Branch if minus to $30, $0B [Flow: branch]
	ora ($33.b,S),Y		; 13 33 ; OR accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($52.b,S),Y		; 13 52 ; OR accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora ($06.b)		; 12 06 ; OR accumulator with memory (indirect) ($06.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$C5.b		; C9 C5 ; Compare #$C5.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora $1BF0.w		; 0D F0 1B ; Logical OR $1BF0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$C9.b		; C9 C9 ; Compare #$C9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora $16F0.w		; 0D F0 16 ; Logical OR $16F0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldx $04AC.w		; AE AC 04 ; Load $04AC.w into X register [Writes: X Index] [Flags: NZ]
	sta $7EFA00.l,X		; 9F 00 FA 7E ; Store accumulator (long,X) $7EFA00.l,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EF800.l,X		; 9F 00 F8 7E ; Store accumulator (long,X) $7EF800.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $04AC.w		; 8E AC 04 ; Store X register to $04AC.w [Reads: X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $08.b		; 26 08 ; Rotate left $08.b [Reads: Direct Page] [Flags: NCZ]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $AF.b,X		; 56 AF ; Logical shift right $AF.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sta [$F2.b]		; 87 F2 ; Store accumulator (long) [$F2.b] [Reads: Direct Page, Accumulator]
	ror $2029.w,X		; 7E 29 20 ; Rotate right $2029.w,X [Reads: X Index] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0086.w		; 4C 86 00 ; Jump to $0086.w [Flow: jump]
	ldx $04C8.w		; AE C8 04 ; Load $04C8.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $BF34F0.l,X		; FF F0 34 BF ; Subtract with carry (long,X) $BF34F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($DD.b,X)		; 61 DD ; Add with carry ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $00C5.w		; 0E C5 00 ; Arithmetic shift left $00C5.w [Flags: NCZ]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	and $2E8D.w		; 2D 8D 2E ; Logical AND $2E8D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($E8.b,X)		; 01 E8 ; Logical OR ($E8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $04C8.w		; 8E C8 04 ; Store X register to $04C8.w [Reads: X Index]
	cpx #$06.b		; E0 06 ; Compare #$06.b with X register [Reads: X Index] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00A9.w,Y		; 19 A9 00 ; OR accumulator with memory $00A9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda $7EF287.l		; AF 87 F2 7E ; Load long $7EF287.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$F2.b]		; 87 F2 ; Store accumulator (long) [$F2.b] [Reads: Direct Page, Accumulator]
	ror $20E2.w,X		; 7E E2 20 ; Rotate right $20E2.w,X [Reads: X Index] [Flags: NCZ]
	lda #$2F.b		; A9 2F ; Load #$2F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$003C.w		; A9 3C 00 ; Load #$003C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04C8.w		; 8D C8 04 ; Store accumulator to $04C8.w [Reads: Accumulator]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0062.w		; C9 62 00 ; Compare #$0062.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $32		; D0 32 ; Branch if not equal to $D0, $32 [Flow: branch]
	inc $04C8.w		; EE C8 04 ; Increment $04C8.w [Flags: NZ]
	lda $04C8.w		; AD C8 04 ; Load $04C8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0016.w		; C9 16 00 ; Compare #$0016.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 8
	sep #$20		; E2 20
	lda $7EF2E2.l		; AF E2 F2 7E ; Load long $7EF2E2.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF2E2.l		; 8F E2 F2 7E ; Store accumulator (long) $7EF2E2.l [Reads: Accumulator]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$0050.w		; A9 50 00 ; Load #$0050.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0692.w		; 8D 92 06 ; Store accumulator to $0692.w [Reads: Accumulator]
	lda #$0D20.w		; A9 20 0D ; Load #$0D20.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0698.w		; 8D 98 06 ; Store accumulator to $0698.w [Reads: Accumulator]
	jsl $02AD5C.l		; 22 5C AD 02 ; Jump to subroutine long $02AD5C.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda #$8D2E.w		; A9 2E 8D ; Load #$8D2E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	rol $5C01.w		; 2E 01 5C ; Rotate left $5C01.w [Flags: NCZ]
	tsb $F4.b		; 04 F4 ; Test and set bits $F4.b [Reads: Accumulator] [Flags: Z]
	asl $F122.w		; 0E 22 F1 ; Arithmetic shift left $F122.w [Flags: NCZ]
	inc $C200.w		; EE 00 C2 ; Increment $C200.w [Flags: NZ]
	.db $30, $AF		; 30 AF ; Branch if minus to $30, $AF [Flow: branch]
	ora #$7EC0.w		; 09 C0 7E ; Logical OR #$7EC0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $0EF48C.l		; 5C 8C F4 0E ; Jump long to $0EF48C.l [Flow: jump]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx $01.b		; E4 01 ; Compare $01.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $B900.w		; AD 00 B9 ; Load $B900.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($81.b,X)		; 01 81 ; Logical OR ($81.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($82.b,X)		; 01 82 ; Logical OR ($82.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($89.b,X)		; 01 89 ; Logical OR ($89.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($C2.b,X)		; 01 C2 ; Logical OR ($C2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($20.b),Y		; 31 20 ; AND accumulator with memory ($20.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	dec $00BF.w,X		; DE BF 00 ; Decrement memory $00BF.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $30, $37		; 30 37 ; Branch if minus to $30, $37 [Flow: branch]
	cmp $0EDE29.l,X		; DF 29 DE 0E ; Compare accumulator (long,X) $0EDE29.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0EDE31.l,X		; DF 31 DE 0E ; Compare accumulator (long,X) $0EDE31.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $D0, $EC		; D0 EC ; Branch if not equal to $D0, $EC [Flow: branch]
	lda $0EDE41.l,X		; BF 41 DE 0E ; Load long $0EDE41.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0EDE39.l,X		; BF 39 DE 0E ; Load long $0EDE39.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	sta $0410.w		; 8D 10 04 ; Store accumulator to $0410.w [Reads: Accumulator]
	sta $0416.w		; 8D 16 04 ; Store accumulator to $0416.w [Reads: Accumulator]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $FC		; 90 FC ; Branch if carry clear to $90, $FC [Flow: branch]
	stx $0418.w		; 8E 18 04 ; Store X register to $0418.w [Reads: X Index]
	stx $069C.w		; 8E 9C 06 ; Store X register to $069C.w [Reads: X Index]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0C.b		; 69 0C ; Add #$0C.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0708.w		; ED 08 07 ; Subtract $0708.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and $070A.w		; 2D 0A 07 ; Logical AND $070A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $070C.w		; ED 0C 07 ; Subtract $070C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and $070E.w		; 2D 0E 07 ; Logical AND $070E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp ($E401.w,X)		; 7C 01 E4 ; Jump indirect indexed to ($E401.w,X) [Reads: X Index] [Flow: jump]
	ora ($AD.b,X)		; 01 AD ; Logical OR ($AD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $6B		; 30 6B ; Branch if minus to $30, $6B [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	jsr $DE9A.w		; 20 9A DE ; Jump to subroutine at $DE9A.w [Writes: Stack Pointer] [Flow: call]
	lda $0F8000.l,X		; BF 00 80 0F ; Load long $0F8000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$0006.w		; A2 06 00 ; Load #$0006.w into X register [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $30, $E6		; 30 E6 ; Branch if minus to $30, $E6 [Flow: branch]
	cmp $0EDECE.l,X		; DF CE DE 0E ; Compare accumulator (long,X) $0EDECE.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0EDED4.l,X		; DF D4 DE 0E ; Compare accumulator (long,X) $0EDED4.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $D0, $EC		; D0 EC ; Branch if not equal to $D0, $EC [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0EDEDA.l,X		; BF DA DE 0E ; Load long $0EDEDA.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $FC		; 90 FC ; Branch if carry clear to $90, $FC [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0418.w		; 8D 18 04 ; Store accumulator to $0418.w [Reads: Accumulator]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $FC		; 90 FC ; Branch if carry clear to $90, $FC [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $069C.w		; [PATTERN: Memory clearing operation] 8D 9C 06 ; Store accumulator to $069C.w [Reads: Accumulator]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $A0.b		; 64 A0 ; Store zero to $A0.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2427E5.l,X		; FF E5 27 24 ; Subtract with carry (long,X) $2427E5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $59E3.w,Y		; 59 E3 59 ; Exclusive OR accumulator with memory $59E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $5932.w,X		; DD 32 59 ; Compare accumulator $5932.w,X [Reads: X Index] [Flags: NCZ]
	lda $41211C.l,X		; BF 1C 21 41 ; Load long $41211C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $16.b,X		; 75 16 ; Add $16.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($A5.b,X)		; 21 A5 ; Logical AND ($A5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda [$A1.b]		; A7 A1 ; Load accumulator (long) [$A1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	.db $D0, $59		; D0 59 ; Branch if not equal to $D0, $59 [Flow: branch]
	sbc $2B.b,S		; E3 2B ; Subtract stack-relative $2B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor $22D1.w,Y		; 59 D1 22 ; Exclusive OR accumulator with memory $22D1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $1D25.w,X		; 1E 25 1D ; Arithmetic shift left $1D25.w,X [Reads: X Index] [Flags: NCZ]
	.db $42, $76		; 42 76 ; Reserved instruction
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl $9659.w,X		; 1E 59 96 ; Arithmetic shift left $9659.w,X [Reads: X Index] [Flags: NCZ]
	stz $AF59.w		; 9C 59 AF ; Store zero to $AF59.w
	asl $1A59.w,X		; 1E 59 1A ; Arithmetic shift left $1A59.w,X [Reads: X Index] [Flags: NCZ]
	jsr $418F.w		; 20 8F 41 ; Jump to subroutine at $418F.w [Writes: Stack Pointer] [Flow: call]
	adc $2427E5.l,X		; 7F E5 27 24 ; Add long $2427E5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $59E3.w,Y		; 59 E3 59 ; Exclusive OR accumulator with memory $59E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $5932.w,X		; DD 32 59 ; Compare accumulator $5932.w,X [Reads: X Index] [Flags: NCZ]
	lda $41211C.l,X		; BF 1C 21 41 ; Load long $41211C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $E7.b,X		; 75 E7 ; Add $E7.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $B559.w		; 2C 59 B5 ; Test bits $B559.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor $59D8.w,Y		; 59 D8 59 ; Exclusive OR accumulator with memory $59D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $9E1E.w		; 0C 1E 9E ; Test and set bits $9E1E.w [Reads: Accumulator] [Flags: Z]
	trb $1EB4.w		; 1C B4 1E ; Test and reset bits $1EB4.w [Reads: Accumulator] [Flags: Z]
	eor $59C6.w,Y		; 59 C6 59 ; Exclusive OR accumulator with memory $59C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $411E1F.l		; 22 1F 1E 41 ; Jump to subroutine long $411E1F.l [Writes: Stack Pointer] [Flow: call]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and $2159.w		; 2D 59 21 ; Logical AND $2159.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $2925.w,X		; 1E 25 29 ; Arithmetic shift left $2925.w,X [Reads: X Index] [Flags: NCZ]
	bit $E359.w		; 2C 59 E3 ; Test bits $E359.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor $1CCE.w,Y		; 59 CE 1C ; Exclusive OR accumulator with memory $1CCE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp $E359.w,X		; DD 59 E3 ; Compare accumulator $E359.w,X [Reads: X Index] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	eor $220B.w,Y		; 59 0B 22 ; Exclusive OR accumulator with memory $220B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $7F411E.l,X		; 1F 1E 41 7F ; Logical OR long $7F411E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $27.b		; E5 27 ; Subtract $27.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	bit $59.b		; 24 59 ; Test bits $59.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp $5932.w,X		; DD 32 59 ; Compare accumulator $5932.w,X [Reads: X Index] [Flags: NCZ]
	lda $41211C.l,X		; BF 1C 21 41 ; Load long $41211C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $E6.b,X		; 75 E6 ; Add $E6.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $59		; D0 59 ; Branch if not equal to $D0, $59 [Flow: branch]
	sta $2B00.w		; 8D 00 2B ; Store accumulator to $2B00.w [Reads: Accumulator]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $30, $2C		; 30 2C ; Branch if minus to $30, $2C [Flow: branch]
	eor ($8A.b,X)		; 41 8A ; Exclusive OR accumulator with memory ($8A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $931C.w,Y		; 59 1C 93 ; Exclusive OR accumulator with memory $931C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $2E.b,X		; 76 2E ; Rotate right $2E.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $D0, $59		; D0 59 ; Branch if not equal to $D0, $59 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	rol $59.b		; 26 59 ; Rotate left $59.b [Reads: Direct Page] [Flags: NCZ]
	dec $1AC5.w,X		; DE C5 1A ; Decrement memory $1AC5.w,X [Reads: X Index] [Flags: NZ]
	eor $2801.w,Y		; 59 01 28 ; Exclusive OR accumulator with memory $2801.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $41		; 30 41 ; Branch if minus to $30, $41 [Flow: branch]
	adc $59D0E6.l,X		; 7F E6 D0 59 ; Add long $59D0E6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $2801.w		; 8D 01 28 ; Store accumulator to $2801.w [Reads: Accumulator]
	rol $1B.b		; 26 1B ; Rotate left $1B.b [Reads: Direct Page] [Flags: NCZ]
	bit $7541.w		; 2C 41 75 ; Test bits $7541.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $E359.w,X		; 1D 59 E3 ; OR accumulator with memory $E359.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $59B8.w,Y		; 59 B8 59 ; Exclusive OR accumulator with memory $59B8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sta $2229.w,Y		; 99 29 22 ; Store accumulator to $2229.w,Y [Reads: Y Index, Accumulator]
	stz $DC59.w		; 9C 59 DC ; Store zero to $DC59.w
	ror $1A.b,X		; 76 1A ; Rotate right $1A.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $2801.w,Y		; 59 01 28 ; Exclusive OR accumulator with memory $2801.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $1B.b		; 26 1B ; Rotate left $1B.b [Reads: Direct Page] [Flags: NCZ]
	eor $59E3.w,Y		; 59 E3 59 ; Exclusive OR accumulator with memory $59E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $CE.b		; 25 CE ; Logical AND $CE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $5932.w,X		; 1D 32 59 ; OR accumulator with memory $5932.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$BA.b		; 29 BA ; Logical AND #$BA.b with accumulator [Writes: Accumulator] [Flags: NZ]
	trb $3FA4.w		; 1C A4 3F ; Test and reset bits $3FA4.w [Reads: Accumulator] [Flags: Z]
	ror $4573.w,X		; 7E 73 45 ; Rotate right $4573.w,X [Reads: X Index] [Flags: NCZ]
	ora $2C2CCE.l		; 0F CE 2C 2C ; OR accumulator with memory (long) $2C2CCE.l [Writes: Accumulator] [Flags: NZ]
	eor $59D8.w,Y		; 59 D8 59 ; Exclusive OR accumulator with memory $59D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	eor $2E01.w,Y		; 59 01 2E ; Exclusive OR accumulator with memory $2E01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $27DA.w		; 2D DA 27 ; Logical AND $27DA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $41.b		; 46 41 ; Logical shift right $41.b [Reads: Direct Page] [Flags: NCZ]
	adc $2427E5.l,X		; 7F E5 27 24 ; Add long $2427E5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $59E3.w,Y		; 59 E3 59 ; Exclusive OR accumulator with memory $59E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $5932.w,X		; DD 32 59 ; Compare accumulator $5932.w,X [Reads: X Index] [Flags: NCZ]
	lda $41211C.l,X		; BF 1C 21 41 ; Load long $41211C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $E5.b,X		; 75 E5 ; Add $E5.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $B559.w		; 2D 59 B5 ; Logical AND $B559.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $591A.w,Y		; 59 1A 59 ; Exclusive OR accumulator with memory $591A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($1E.b,X)		; 01 1E ; Logical OR ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $8A41.w,X		; 1E 41 8A ; Arithmetic shift left $8A41.w,X [Reads: X Index] [Flags: NCZ]
	ora $C7.b,S		; 03 C7 ; OR accumulator with stack relative $C7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $2C1A.w,Y		; 59 1A 2C ; Exclusive OR accumulator with memory $2C1A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $59.b		; 24 59 ; Test bits $59.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldx $E176.w,Y		; BE 76 E1 ; Load X register $E176.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sta ($B6.b),Y		; 91 B6 ; Store accumulator ($B6.b),Y [Reads: Direct Page, Y Index, Accumulator]
	eor $59B5.w,Y		; 59 B5 59 ; Exclusive OR accumulator with memory $59B5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $1DD0.w		; 2E D0 1D ; Rotate left $1DD0.w [Flags: NCZ]
	eor $42A8.w,Y		; 59 A8 42 ; Exclusive OR accumulator with memory $42A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $B61E.w,Y		; 59 1E B6 ; Exclusive OR accumulator with memory $B61E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $E57F41.l		; AF 41 7F E5 ; Load long $E57F41.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and [$24.b]		; 27 24 ; AND accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $59E3.w,Y		; 59 E3 59 ; Exclusive OR accumulator with memory $59E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $5932.w,X		; DD 32 59 ; Compare accumulator $5932.w,X [Reads: X Index] [Flags: NCZ]
	lda $41211C.l,X		; BF 1C 21 41 ; Load long $41211C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $E8.b,X		; 75 E8 ; Add $E8.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $CE99.w,Y		; 59 99 CE ; Exclusive OR accumulator with memory $CE99.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $DD28.w		; 1C 28 DD ; Test and reset bits $DD28.w [Reads: Accumulator] [Flags: Z]
	eor $1EC7.w,Y		; 59 C7 1E ; Exclusive OR accumulator with memory $1EC7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $A207.w,Y		; 59 07 A2 ; Exclusive OR accumulator with memory $A207.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $7F41.w		; 2D 41 7F ; Logical AND $7F41.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $5928.w		; 0D 28 59 ; Logical OR $5928.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and [$28.b]		; 27 28 ; AND accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2827.w,Y		; 59 27 28 ; Exclusive OR accumulator with memory $2827.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $8A.b,S		; 43 8A ; Exclusive OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $931C.w,Y		; 59 1C 93 ; Exclusive OR accumulator with memory $931C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $25D0.w,Y		; 59 D0 25 ; Exclusive OR accumulator with memory $25D0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc $BE.b,X		; 75 BE ; Add $BE.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	trb $27B1.w		; 1C B1 27 ; Test and reset bits $27B1.w [Reads: Accumulator] [Flags: Z]
	stz $59D0.w,X		; 9E D0 59 ; Store zero to $59D0.w,X [Reads: X Index]
	sta [$1C.b],Y		; 97 1C ; Store accumulator (long indexed) [$1C.b],Y [Reads: Direct Page, Y Index, Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	rol $59D0.w		; 2E D0 59 ; Rotate left $59D0.w [Flags: NCZ]
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sta $2D5127.l,X		; 9F 27 51 2D ; Store accumulator (long,X) $2D5127.l,X [Reads: Accumulator, X Index]
	ror $AD.b,X		; 76 AD ; Rotate right $AD.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $5993.w,Y		; 59 93 59 ; Exclusive OR accumulator with memory $5993.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $2926.w,X		; 1E 26 29 ; Arithmetic shift left $2926.w,X [Reads: X Index] [Flags: NCZ]
	and $5932.w		; 2D 32 59 ; Logical AND $5932.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $252D.w		; 2D 2D 25 ; Logical AND $252D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $7F41.w,X		; 1E 41 7F ; Arithmetic shift left $7F41.w,X [Reads: X Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $931C.w,Y		; 59 1C 93 ; Exclusive OR accumulator with memory $931C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $1A1C.w,Y		; 59 1C 1A ; Exclusive OR accumulator with memory $1A1C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($32.b,S),Y		; 93 32 ; Store accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	eor $C826.w,Y		; 59 26 C8 ; Exclusive OR accumulator with memory $C826.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $2775.w,X		; 1E 75 27 ; Arithmetic shift left $2775.w,X [Reads: X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $30, $42		; 30 42 ; Branch if minus to $30, $42 [Flow: branch]
	eor $2E1B.w,Y		; 59 1B 2E ; Exclusive OR accumulator with memory $2E1B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $E359.w		; 2D 59 E3 ; Logical AND $E359.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $32BD.w,Y		; 59 BD 32 ; Exclusive OR accumulator with memory $32BD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $1E27.w,Y		; 59 27 1E ; Exclusive OR accumulator with memory $1E27.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $761D.w,X		; 1E 1D 76 ; Arithmetic shift left $761D.w,X [Reads: X Index] [Flags: NCZ]
	cmp $D6BA59.l		; CF 59 BA D6 ; Compare accumulator (long) $D6BA59.l [Reads: Accumulator] [Flags: NCZ]
	rol $087F.w,X		; 3E 7F 08 ; Rotate left $087F.w,X [Reads: X Index] [Flags: NCZ]
	eor $A727.w,Y		; 59 27 A7 ; Exclusive OR accumulator with memory $A727.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($22.b,X)		; A1 22 ; Load accumulator ($22.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B420.w,X		; BD 20 B4 ; Load $B420.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $1A.b		; A4 1A ; Load $1A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	eor $3298.w,Y		; 59 98 32 ; Exclusive OR accumulator with memory $3298.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $2225.w,Y		; 59 25 22 ; Exclusive OR accumulator with memory $2225.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $1E.b		; 24 1E ; Test bits $1E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor $75E3.w,Y		; 59 E3 75 ; Exclusive OR accumulator with memory $75E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $2E28.w		; 1C 28 2E ; Test and reset bits $2E28.w [Reads: Accumulator] [Flags: Z]
	and $1D.b		; 25 1D ; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $BEAA.w,Y		; 59 AA BE ; Exclusive OR accumulator with memory $BEAA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $59D2.w,Y		; 59 D2 59 ; Exclusive OR accumulator with memory $59D2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $59211C.l,X		; BF 1C 21 59 ; Load long $59211C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $4195.w		; 2E 95 41 ; Rotate left $4195.w [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and $2E8B.w		; 2D 8B 2E ; Logical AND $2E8B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and [$97.b]		; 27 97 ; AND accumulator with memory (long) [$97.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $22.b		; 25 22 ; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$1A.b]		; A7 1A ; Load accumulator (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $59.b,X		; 95 59 ; Store accumulator to $59.b,X [Reads: Accumulator, X Index]
	cmp [$2D.b],Y		; D7 2D ; Compare accumulator (long indexed) [$2D.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor $7EE3.w,Y		; 59 E3 7E ; Exclusive OR accumulator with memory $7EE3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($1D.b,S),Y		; 73 1D ; Add with carry (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	asl $1E1F.w,X		; 1E 1F 1E ; Arithmetic shift left $1E1F.w,X [Reads: X Index] [Flags: NCZ]
	sty $A4.b,X		; 94 A4 ; Store Y register $A4.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	rol $32.b		; 26 32 ; Rotate left $32.b [Reads: Direct Page] [Flags: NCZ]
	eor $251A.w,Y		; 59 1A 25 ; Exclusive OR accumulator with memory $251A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $1E.b,X		; D6 1E ; Decrement memory $1E.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ldy $5942.w		; AC 42 59 ; Load $5942.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and ($27.b,X)		; 21 27 ; Logical AND ($27.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $D87326.l		; 22 26 73 D8 ; Jump to subroutine long $D87326.l [Writes: Stack Pointer] [Flow: call]
	eor $1A03.w,Y		; 59 03 1A ; Exclusive OR accumulator with memory $1A03.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $59.b		; 24 59 ; Test bits $59.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $22.b,X		; 16 22 ; Arithmetic shift left $22.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and ($1A.b,S),Y		; 33 1A ; AND accumulator (stack relative indirect indexed) ($1A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora $5942.w,X		; 1D 42 59 ; OR accumulator with memory $5942.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $1CE2.w		; 2D E2 1C ; Logical AND $1CE2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $7E3E.w,X		; 1E 3E 7E ; Arithmetic shift left $7E3E.w,X [Reads: X Index] [Flags: NCZ]
	adc ($01.b,S),Y		; 73 01 ; Add with carry (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	rol $592D.w		; 2E 2D 59 ; Rotate left $592D.w [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $25E2.w,Y		; 59 E2 25 ; Exclusive OR accumulator with memory $25E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$A7.b]		; 27 A7 ; AND accumulator with memory (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($AA.b,X)		; A1 AA ; Load accumulator ($AA.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc ($13.b,S),Y		; 73 13 ; Add with carry (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	jsl $1E1CA8.l		; 22 A8 1C 1E ; Jump to subroutine long $1E1CA8.l [Writes: Stack Pointer] [Flow: call]
	eor ($8A.b,X)		; 41 8A ; Exclusive OR accumulator with memory ($8A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $25E2.w,Y		; 59 E2 25 ; Exclusive OR accumulator with memory $25E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $28DB.w,X		; 9D DB 28 ; Store accumulator to $28DB.w,X [Reads: Accumulator, X Index]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $73.b,S		; E3 73 ; Subtract stack-relative $73.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sty $24BD.w		; 8C BD 24 ; Store Y register to $24BD.w [Reads: Y Index]
	asl $2659.w,X		; 1E 59 26 ; Arithmetic shift left $2659.w,X [Reads: X Index] [Flags: NCZ]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
.INDEX 8
	sep #$D1		; E2 D1
	eor $59DA.w,Y		; 59 DA 59 ; Exclusive OR accumulator with memory $59DA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $2AC7.w		; 1C C7 2A ; Test and reset bits $2AC7.w [Reads: Accumulator] [Flags: Z]
	rol $7EA6.w		; 2E A6 7E ; Rotate left $7EA6.w [Flags: NCZ]
	adc ($98.b,S),Y		; 73 98 ; Add with carry (stack relative indirect indexed) ($98.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and $5921.w		; 2D 21 59 ; Logical AND $5921.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda ($8C.b)		; B2 8C ; Load accumulator (indirect) ($8C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1A.b,S		; 03 1A ; OR accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $59.b		; 24 59 ; Test bits $59.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $C8.b,X		; 16 C8 ; Arithmetic shift left $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and $1D.b		; 25 1D ; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $9B73.w		; 2C 73 9B ; Test bits $9B73.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	asl $DB59.w,X		; 1E 59 DB ; Arithmetic shift left $DB59.w,X [Reads: X Index] [Flags: NCZ]
	rol $591E.w		; 2E 1E 59 ; Rotate left $591E.w [Flags: NCZ]
	dec $1DC5.w,X		; DE C5 1D ; Decrement memory $1DC5.w,X [Reads: X Index] [Flags: NZ]
	asl $32BA.w,X		; 1E BA 32 ; Arithmetic shift left $32BA.w,X [Reads: X Index] [Flags: NCZ]
	eor ($7F.b,X)		; 41 7F ; Exclusive OR accumulator with memory ($7F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $9F8D.w,Y		; 59 8D 9F ; Exclusive OR accumulator with memory $9F8D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($E0.b,S),Y		; B3 E0 ; Load accumulator (stack relative indirect indexed) ($E0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	ora $8A41.w,X		; 1D 41 8A ; OR accumulator with memory $8A41.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2E.b,X)		; 01 2E ; Logical OR ($2E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $9975.w		; 2D 75 99 ; Logical AND $9975.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	dec $241A.w		; CE 1A 24 ; Decrement $241A.w [Flags: NZ]
	eor $212D.w,Y		; 59 2D 21 ; Exclusive OR accumulator with memory $212D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol M7Y.w		; 2E 20 21 ; Rotate left M7Y.w [Flags: NCZ]
	eor $2CD9.w,Y		; 59 D9 2C ; Exclusive OR accumulator with memory $2CD9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $D0.b,X		; 76 D0 ; Rotate right $D0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	trb $2DCE.w		; 1C CE 2D ; Test and reset bits $2DCE.w [Reads: Accumulator] [Flags: Z]
	eor $1E2D.w,Y		; 59 2D 1E ; Exclusive OR accumulator with memory $1E2D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $2721.w		; 1C 21 27 ; Test and reset bits $2721.w [Reads: Accumulator] [Flags: Z]
	jsl $1E2E2A.l		; 22 2A 2E 1E ; Jump to subroutine long $1E2E2A.l [Writes: Stack Pointer] [Flow: call]
	eor $59C6.w,Y		; 59 C6 59 ; Exclusive OR accumulator with memory $59C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1A.b,S		; 03 1A ; OR accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $27.b		; 24 27 ; Test bits $27.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $2C2C.w,X		; 1E 2C 2C ; Arithmetic shift left $2C2C.w,X [Reads: X Index] [Flags: NCZ]
	and $04737E.l,X		; 3F 7E 73 04 ; AND accumulator with memory (long,X) $04737E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$59.b]		; 27 59 ; AND accumulator with memory (long) [$59.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $1A.b		; 06 1A ; Arithmetic shift left $1A.b [Reads: Direct Page] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora $3E1E.w,X		; 1D 1E 3E ; OR accumulator with memory $3E1E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $321E07.l,X		; 7F 07 1E 32 ; Add long $321E07.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $2224.w,Y		; 59 24 22 ; Exclusive OR accumulator with memory $2224.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $5942.w,X		; 1D 42 59 ; OR accumulator with memory $5942.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $592C.w,Y		; D9 2C 59 ; Compare accumulator $592C.w,Y [Reads: Y Index] [Flags: NCZ]
	lda $59.b,X		; B5 59 ; Load $59.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $1CD0.w,Y		; 59 D0 1C ; Exclusive OR accumulator with memory $1CD0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $592D.w		; CE 2D 59 ; Decrement $592D.w [Flags: NZ]
	.db $B0, $1D		; B0 1D ; Branch if carry set to $B0, $1D [Flow: branch]
	asl $7540.w,X		; 1E 40 75 ; Arithmetic shift left $7540.w,X [Reads: X Index] [Flags: NCZ]
	cmp $A8.b		; C5 A8 ; Compare $A8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $591A.w,Y		; 59 1A 59 ; Exclusive OR accumulator with memory $591A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $2093.w		; 20 93 20 ; Jump to subroutine at $2093.w [Writes: Stack Pointer] [Flow: call]
	eor $59C6.w,Y		; 59 C6 59 ; Exclusive OR accumulator with memory $59C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $1EA7.w,Y		; D9 A7 1E ; Compare accumulator $1EA7.w,Y [Reads: Y Index] [Flags: NCZ]
	bit $763E.w		; 2C 3E 76 ; Test bits $763E.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora $C7.b,S		; 03 C7 ; OR accumulator with stack relative $C7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $A1A3.w,Y		; 59 A3 A1 ; Exclusive OR accumulator with memory $A1A3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $C9C5.w,X		; DE C5 C9 ; Decrement memory $C9C5.w,X [Reads: X Index] [Flags: NZ]
	rol $B5.b		; 26 B5 ; Rotate left $B5.b [Reads: Direct Page] [Flags: NCZ]
	bit $C722.w		; 2C 22 C7 ; Test bits $C722.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	rol $737E.w,X		; 3E 7E 73 ; Rotate left $737E.w,X [Reads: X Index] [Flags: NCZ]
	ora ($32.b,X)		; 01 32 ; Logical OR ($32.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $59D8.w,Y		; 59 D8 59 ; Exclusive OR accumulator with memory $59D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $594232.l,X		; DF 32 42 59 ; Compare accumulator (long,X) $594232.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $A221.w,Y		; 59 21 A2 ; Exclusive OR accumulator with memory $A221.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $D759.w,X		; 1D 59 D7 ; OR accumulator with memory $D759.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $C759.w		; 2D 59 C7 ; Logical AND $C759.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $C673.w,X		; 1E 73 C6 ; Arithmetic shift left $C673.w,X [Reads: X Index] [Flags: NCZ]
	eor $2E28.w,Y		; 59 28 2E ; Exclusive OR accumulator with memory $2E28.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	eor $311E.w,Y		; 59 1E 31 ; Exclusive OR accumulator with memory $311E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldx $9726.w,Y		; BE 26 97 ; Load X register $9726.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $B559.w		; 2C 59 B5 ; Test bits $B559.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor $1AD3.w,Y		; 59 D3 1A ; Exclusive OR accumulator with memory $1AD3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($B4.b)		; 32 B4 ; AND accumulator with memory (indirect) ($B4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $9173.w		; 20 73 91 ; Jump to subroutine at $9173.w [Writes: Stack Pointer] [Flow: call]
	cld		; D8 ; Clear decimal flag [Flags: D]
	eor $2BA3.w,Y		; 59 A3 2B ; Exclusive OR accumulator with memory $2BA3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($1C.b,S),Y		; 93 1C ; Store accumulator (stack relative indirect indexed) ($1C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	asl $DA59.w,X		; 1E 59 DA ; Arithmetic shift left $DA59.w,X [Reads: X Index] [Flags: NCZ]
	eor $59D8.w,Y		; 59 D8 59 ; Exclusive OR accumulator with memory $59D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1E.b,S		; 03 1E ; OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2B		; D0 2B ; Branch if not equal to $D0, $2B [Flow: branch]
	and $7F41.w		; 2D 41 7F ; Logical AND $7F41.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	eor $3E6A.w,Y		; 59 6A 3E ; Exclusive OR accumulator with memory $3E6A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$2C.b]		; E7 2C ; Subtract with carry (long) [$2C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor $2821.w,Y		; 59 21 28 ; Exclusive OR accumulator with memory $2821.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $59D0.w		; 2E D0 59 ; Rotate left $59D0.w [Flags: NCZ]
	rol $1DD0.w		; 2E D0 1D ; Rotate left $1DD0.w [Flags: NCZ]
	adc $DA.b,X		; 75 DA ; Add $DA.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $5997.w,Y		; 59 97 59 ; Exclusive OR accumulator with memory $5997.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $1DB0.w,Y		; 59 B0 1D ; Exclusive OR accumulator with memory $1DB0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $A8C5.w,X		; 1E C5 A8 ; Arithmetic shift left $A8C5.w,X [Reads: X Index] [Flags: NCZ]
	eor $591A.w,Y		; 59 1A 59 ; Exclusive OR accumulator with memory $591A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $2093.w		; 20 93 20 ; Jump to subroutine at $2093.w [Writes: Stack Pointer] [Flow: call]
	eor $76C6.w,Y		; 59 C6 76 ; Exclusive OR accumulator with memory $76C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $1EA7.w,Y		; D9 A7 1E ; Compare accumulator $1EA7.w,Y [Reads: Y Index] [Flags: NCZ]
	bit $7E41.w		; 2C 41 7E ; Test bits $7E41.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	adc ($16.b,S),Y		; 73 16 ; Add with carry (stack relative indirect indexed) ($16.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lda ($2D.b),Y		; B1 2D ; Load accumulator ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $2CDF.w,Y		; 59 DF 2C ; Exclusive OR accumulator with memory $2CDF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $22D8.w,Y		; 59 D8 22 ; Exclusive OR accumulator with memory $22D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	eor $1E25.w,Y		; 59 25 1E ; Exclusive OR accumulator with memory $1E25.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $8BA6.w,X		; 1D A6 8B ; OR accumulator with memory $8BA6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$1A.b]		; 27 1A ; AND accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $7343.w,Y		; BE 43 73 ; Load X register $7343.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	asl $5921.w		; 0E 21 59 ; Arithmetic shift left $5921.w [Flags: NCZ]
	and ($1E.b)		; 32 1E ; AND accumulator with memory (indirect) ($1E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and ($42.b,X)		; 21 42 ; Logical AND ($42.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $2CB0.w,Y		; 59 B0 2C ; Exclusive OR accumulator with memory $2CB0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $1A27.w,Y		; 59 27 1A ; Exclusive OR accumulator with memory $1A27.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $DF59.w,Y		; BE 59 DF ; Load X register $DF59.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	bit $0159.w		; 2C 59 01 ; Test bits $0159.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $B4.b		; 25 B4 ; Logical AND $B4.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $9059.w,X		; 1D 59 90 ; OR accumulator with memory $9059.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($21.b,S),Y		; 73 21 ; Add with carry (stack relative indirect indexed) ($21.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	asl $B159.w,X		; 1E 59 B1 ; Arithmetic shift left $B159.w,X [Reads: X Index] [Flags: NCZ]
	and $1BA4.w		; 2D A4 1B ; Logical AND $1BA4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	lda ($25.b)		; B2 25 ; Load accumulator (indirect) ($25.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($1A.b)		; B2 1A ; Load accumulator (indirect) ($1A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2DBB.w,Y		; 59 BB 2D ; Exclusive OR accumulator with memory $2DBB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($7F.b,X)		; 41 7F ; Exclusive OR accumulator with memory ($7F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cop $6D.b		; 02 6D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $16.b		; 02 16 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $9B25.w,X		; 1E 25 9B ; Arithmetic shift left $9B25.w,X [Reads: X Index] [Flags: NCZ]
	asl $5942.w,X		; 1E 42 59 ; Arithmetic shift left $5942.w,X [Reads: X Index] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $75.b,S		; 43 75 ; Exclusive OR accumulator with stack relative $75.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit #$1A.b		; 89 1A ; Test bits #$1A.b with accumulator [Reads: Accumulator] [Flags: Z]
	rol $89.b		; 26 89 ; Rotate left $89.b [Reads: Direct Page] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	bit #$04.b		; 89 04 ; Test bits #$04.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit $27D0.w		; 2C D0 27 ; Test bits $27D0.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	trb $891E.w		; 1C 1E 89 ; Test and reset bits $891E.w [Reads: Accumulator] [Flags: Z]
	asl $891F.w		; 0E 1F 89 ; Arithmetic shift left $891F.w [Flags: NCZ]
	inc $76.b		; E6 76 ; Increment $76.b [Reads: Direct Page] [Flags: NZ]
	ora ($2B.b,S),Y		; 13 2B ; OR accumulator (stack relative indirect indexed) ($2B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $1E1CA8.l		; 22 A8 1C 1E ; Jump to subroutine long $1E1CA8.l [Writes: Stack Pointer] [Flow: call]
	eor ($7E.b,X)		; 41 7E ; Exclusive OR accumulator with memory ($7E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($43.b,S),Y		; 73 43 ; Add with carry (stack relative indirect indexed) ($43.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	bit #$43.b		; 89 43 ; Test bits #$43.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$43.b		; 89 43 ; Test bits #$43.b with accumulator [Reads: Accumulator] [Flags: Z]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	ora ($7E.b,X)		; 01 7E ; Logical OR ($7E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $88.b,X		; 74 88 ; Store zero to $88.b,X [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cop $74.b		; 02 74 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $59.b		; E6 59 ; Increment $59.b [Reads: Direct Page] [Flags: NZ]
	ora ($2B.b,S),Y		; 13 2B ; OR accumulator (stack relative indirect indexed) ($2B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $1E1CA8.l		; 22 A8 1C 1E ; Jump to subroutine long $1E1CA8.l [Writes: Stack Pointer] [Flow: call]
	eor $25E2.w,Y		; 59 E2 25 ; Exclusive OR accumulator with memory $25E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $932B.w		; 20 2B 93 ; Jump to subroutine at $932B.w [Writes: Stack Pointer] [Flow: call]
	and $D859.w		; 2D 59 D8 ; Logical AND $D859.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $E2.b,X		; 75 E2 ; Add $E2.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($1E.b),Y		; D1 1E ; Compare accumulator ($1E.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	bit $B459.w		; 2C 59 B4 ; Test bits $B459.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor $59D8.w,Y		; 59 D8 59 ; Exclusive OR accumulator with memory $59D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($A2.b,X)		; 21 A2 ; Logical AND ($A2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $8C59.w		; 2D 59 8C ; Logical AND $8C59.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol $B4.b		; 26 B4 ; Rotate left $B4.b [Reads: Direct Page] [Flags: NCZ]
	ora $C659.w,X		; 1D 59 C6 ; OR accumulator with memory $C659.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $D8.b,X		; 76 D8 ; Rotate right $D8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $D2C9.w,Y		; 59 C9 D2 ; Exclusive OR accumulator with memory $D2C9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$59.b]		; 27 59 ; AND accumulator with memory (long) [$59.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($28.b,X)		; E1 28 ; Subtract with carry ($28.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $2EDA.w,Y		; 59 DA 2E ; Exclusive OR accumulator with memory $2EDA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	bit $B659.w		; 2C 59 B6 ; Test bits $B659.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor ($7A.b,X)		; 41 7A ; Exclusive OR accumulator with memory ($7A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($7E.b,X)		; 01 7E ; Logical OR ($7E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $88.b,X		; 74 88 ; Store zero to $88.b,X [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cop $74.b		; 02 74 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $591A59.l,X		; 1F 59 1A 59 ; Logical OR long $591A59.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$D2.b		; C9 D2 ; Compare #$D2.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	and [$59.b]		; 27 59 ; AND accumulator with memory (long) [$59.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $1A59.w,X		; DE 59 1A ; Decrement memory $1A59.w,X [Reads: X Index] [Flags: NZ]
	eor $28AC.w,Y		; 59 AC 28 ; Exclusive OR accumulator with memory $28AC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $2159.w,X		; 1D 59 21 ; OR accumulator with memory $2159.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$2D.b		; A2 2D ; Load #$2D.b into X register [Writes: X Index] [Flags: NZ]
	adc $DA.b,X		; 75 DA ; Add $DA.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $2C9A.w		; 2E 9A 2C ; Rotate left $2C9A.w [Flags: NCZ]
	eor $42B6.w,Y		; 59 B6 42 ; Exclusive OR accumulator with memory $42B6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $59B6.w,Y		; 59 B6 59 ; Exclusive OR accumulator with memory $59B6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 8
	sep #$25		; E2 25
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $1E24.w,X		; BD 24 1E ; Load $1E24.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $2CB0.w,Y		; 59 B0 2C ; Exclusive OR accumulator with memory $2CB0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $28AC.w,Y		; 59 AC 28 ; Exclusive OR accumulator with memory $28AC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $E276.w,X		; 1D 76 E2 ; OR accumulator with memory $E276.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($1E.b),Y		; D1 1E ; Compare accumulator ($1E.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	bit $9B59.w		; 2C 59 9B ; Test bits $9B59.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	asl $DB59.w,X		; 1E 59 DB ; Arithmetic shift left $DB59.w,X [Reads: X Index] [Flags: NCZ]
	rol $431E.w		; 2E 1E 43 ; Rotate left $431E.w [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $599359.l,X		; 1F 59 93 59 ; Logical OR long $599359.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda [$22.b]		; A7 22 ; Load accumulator (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $40.b		; 25 40 ; Logical AND $40.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $2173.w,X		; 7E 73 21 ; Rotate right $2173.w,X [Reads: X Index] [Flags: NCZ]
	ldx #$2D.b		; A2 2D ; Load #$2D.b into X register [Writes: X Index] [Flags: NZ]
	ldy $C9.b		; A4 C9 ; Load $C9.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp ($27.b)		; D2 27 ; Compare accumulator (indirect) ($27.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $2EDA.w,Y		; 59 DA 2E ; Exclusive OR accumulator with memory $2EDA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	bit $B659.w		; 2C 59 B6 ; Test bits $B659.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	ldx $73.b,Y		; B6 73 ; Load X register $73.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	jsr $932B.w		; 20 2B 93 ; Jump to subroutine at $932B.w [Writes: Stack Pointer] [Flow: call]
	and $592C.w		; 2D 2C 59 ; Logical AND $592C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	eor $22A7.w,Y		; 59 A7 22 ; Exclusive OR accumulator with memory $22A7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
.INDEX 8
	sep #$D1		; E2 D1
	asl $412C.w,X		; 1E 2C 41 ; Arithmetic shift left $412C.w,X [Reads: X Index] [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	ora ($7E.b,X)		; 01 7E ; Logical OR ($7E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $88.b,X		; 74 88 ; Store zero to $88.b,X [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cop $74.b		; 02 74 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $59.b		; E6 59 ; Increment $59.b [Reads: Direct Page] [Flags: NZ]
	cmp ($2B.b,S),Y		; D3 2B ; Compare accumulator (stack relative indirect indexed) ($2B.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp [$20.b]		; C7 20 ; Compare accumulator (long) [$20.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	lda ($D8.b,X)		; A1 D8 ; Load accumulator ($D8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $D1E2.w,Y		; 59 E2 D1 ; Exclusive OR accumulator with memory $D1E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc $26.b,X		; 75 26 ; Add $26.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl $CB59.w,X		; 1E 59 CB ; Arithmetic shift left $CB59.w,X [Reads: X Index] [Flags: NCZ]
	ldx $1F.b		; A6 1F ; Load $1F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	rol $5925.w		; 2E 25 59 ; Rotate left $5925.w [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	eor $2B13.w,Y		; 59 13 2B ; Exclusive OR accumulator with memory $2B13.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $1E1CA8.l		; 22 A8 1C 1E ; Jump to subroutine long $1E1CA8.l [Writes: Stack Pointer] [Flow: call]
	eor ($2C.b),Y		; 51 2C ; Exclusive OR accumulator with memory ($2C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $1E.b,X		; 76 1E ; Rotate right $1E.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and ($29.b),Y		; 31 29 ; AND accumulator with memory ($29.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $2C2C.w		; CE 2C 2C ; Decrement $2C2C.w [Flags: NZ]
	jsl $C659C7.l		; 22 C7 59 C6 ; Jump to subroutine long $C659C7.l [Writes: Stack Pointer] [Flow: call]
	eor $2DD7.w,Y		; 59 D7 2D ; Exclusive OR accumulator with memory $2DD7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $D1E2.w,Y		; 59 E2 D1 ; Exclusive OR accumulator with memory $D1E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($7A.b,X)		; 41 7A ; Exclusive OR accumulator with memory ($7A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($7E.b,X)		; 01 7E ; Logical OR ($7E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $88.b,X		; 74 88 ; Store zero to $88.b,X [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cop $74.b		; 02 74 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $93.b		; 06 93 ; Arithmetic shift left $93.b [Reads: Direct Page] [Flags: NCZ]
	cmp [$8B.b]		; C7 8B ; Compare accumulator (long) [$8B.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
.INDEX 8
	sep #$D1		; E2 D1
	eor $2CDF.w,Y		; 59 DF 2C ; Exclusive OR accumulator with memory $2CDF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $59DA.w,Y		; 59 DA 59 ; Exclusive OR accumulator with memory $59DA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $2AC7.w		; 1C C7 2A ; Test and reset bits $2AC7.w [Reads: Accumulator] [Flags: Z]
	rol $75A6.w		; 2E A6 75 ; Rotate left $75A6.w [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	eor $C830.w,Y		; 59 30 C8 ; Exclusive OR accumulator with memory $C830.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $1D.b		; 25 1D ; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($8A.b,X)		; 41 8A ; Exclusive OR accumulator with memory ($8A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $2D.b		; E5 2D ; Subtract $2D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor $D1E2.w,Y		; 59 E2 D1 ; Exclusive OR accumulator with memory $D1E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $B11C.w,Y		; 59 1C B1 ; Exclusive OR accumulator with memory $B11C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$20.b]		; 27 20 ; AND accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $761D.w,X		; 1E 1D 76 ; Arithmetic shift left $761D.w,X [Reads: X Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	eor $2806.w,Y		; 59 06 28 ; Exclusive OR accumulator with memory $2806.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $1D.b		; 25 1D ; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$0B.b		; A0 0B ; Load #$0B.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $59DA.w		; 8C DA 59 ; Store Y register to $59DA.w [Reads: Y Index]
	cld		; D8 ; Clear decimal flag [Flags: D]
	eor $1A03.w,Y		; 59 03 1A ; Exclusive OR accumulator with memory $1A03.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $7E.b		; 24 7E ; Test bits $7E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	adc ($16.b,S),Y		; 73 16 ; Add with carry (stack relative indirect indexed) ($16.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and $1D.b		; 25 1D ; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($7A.b,X)		; 41 7A ; Exclusive OR accumulator with memory ($7A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($7E.b,X)		; 01 7E ; Logical OR ($7E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $88.b,X		; 74 88 ; Store zero to $88.b,X [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cop $74.b		; 02 74 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $93.b		; 06 93 ; Arithmetic shift left $93.b [Reads: Direct Page] [Flags: NCZ]
	cmp [$59.b]		; C7 59 ; Compare accumulator (long) [$59.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $1B592C.l,X		; DF 2C 59 1B ; Compare accumulator (long,X) $1B592C.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	rol $2522.w		; 2E 22 25 ; Rotate left $2522.w [Flags: NCZ]
	stz $2027.w,X		; 9E 27 20 ; Store zero to $2027.w,X [Reads: X Index]
	eor $59DC.w,Y		; 59 DC 59 ; Exclusive OR accumulator with memory $59DC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	adc $CB.b,X		; 75 CB ; Add $CB.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($AF.b,X)		; A1 AF ; Load accumulator ($AF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $D259.w,X		; 1E 59 D2 ; Arithmetic shift left $D259.w,X [Reads: X Index] [Flags: NCZ]
	eor $1E21.w,Y		; 59 21 1E ; Exclusive OR accumulator with memory $1E21.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $281C.w,Y		; 59 1C 28 ; Exclusive OR accumulator with memory $281C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $1D25.w		; 2E 25 1D ; Rotate left $1D25.w [Flags: NCZ]
	eor $C71C.w,Y		; 59 1C C7 ; Exclusive OR accumulator with memory $C71C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol $76A6.w		; 2E A6 76 ; Rotate left $76A6.w [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	eor $B20B.w,Y		; 59 0B B2 ; Exclusive OR accumulator with memory $B20B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $C8.b,X		; 16 C8 ; Arithmetic shift left $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and $1D.b		; 25 1D ; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $BD8C.w,Y		; 59 8C BD ; Exclusive OR accumulator with memory $BD8C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $1E.b		; 24 1E ; Test bits $1E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor $2CB0.w,Y		; 59 B0 2C ; Exclusive OR accumulator with memory $2CB0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $E273.w,X		; 7E 73 E2 ; Rotate right $E273.w,X [Reads: X Index] [Flags: NCZ]
	cmp ($59.b),Y		; D1 59 ; Compare accumulator ($59.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl $9B59.w,X		; 1E 59 9B ; Arithmetic shift left $9B59.w,X [Reads: X Index] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	and $B91E.w		; 2D 1E B9 ; Logical AND $B91E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	rol $411E.w		; 2E 1E 41 ; Rotate left $411E.w [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	ora ($7E.b,X)		; 01 7E ; Logical OR ($7E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $88.b,X		; 74 88 ; Store zero to $88.b,X [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cop $74.b		; 02 74 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($2E.b,X)		; 01 2E ; Logical OR ($2E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $2759.w		; 2D 59 27 ; Logical AND $2759.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $30, $42		; 30 42 ; Branch if minus to $30, $42 [Flow: branch]
	eor $59E3.w,Y		; 59 E3 59 ; Exclusive OR accumulator with memory $59E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $DA59.w		; AD 59 DA ; Load $DA59.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $251A.w		; 2D 1A 25 ; Logical AND $251A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $32.b		; 25 32 ; Logical AND $32.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $9D.b,X		; 75 9D ; Add $9D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and ($A4.b)		; 32 A4 ; AND accumulator with memory (indirect) ($A4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $93.b		; 06 93 ; Arithmetic shift left $93.b [Reads: Direct Page] [Flags: NCZ]
	cmp [$41.b]		; C7 41 ; Compare accumulator (long) [$41.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$B5.b]		; 07 B5 ; OR accumulator with memory (long) [$B5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $1A03.w,Y		; 59 03 1A ; Exclusive OR accumulator with memory $1A03.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $76.b		; 24 76 ; Test bits $76.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $C8.b,X		; 16 C8 ; Arithmetic shift left $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and $1D.b		; 25 1D ; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $25E2.w,Y		; 59 E2 25 ; Exclusive OR accumulator with memory $25E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $21B593.l		; 2F 93 B5 21 ; AND accumulator with memory (long) $21B593.l [Writes: Accumulator] [Flags: NZ]
	eor ($7A.b,X)		; 41 7A ; Exclusive OR accumulator with memory ($7A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($7E.b,X)		; 01 7E ; Logical OR ($7E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $88.b,X		; 74 88 ; Store zero to $88.b,X [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cop $74.b		; 02 74 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $59.b		; E6 59 ; Increment $59.b [Reads: Direct Page] [Flags: NZ]
	ora ($2B.b,S),Y		; 13 2B ; OR accumulator (stack relative indirect indexed) ($2B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $1E1CA8.l		; 22 A8 1C 1E ; Jump to subroutine long $1E1CA8.l [Writes: Stack Pointer] [Flow: call]
	eor $59B5.w,Y		; 59 B5 59 ; Exclusive OR accumulator with memory $59B5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $A8B3B6.l,X		; DF B6 B3 A8 ; Compare accumulator (long,X) $A8B3B6.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	eor $751A.w,Y		; 59 1A 75 ; Exclusive OR accumulator with memory $751A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$1E.b]		; 27 1E ; AND accumulator with memory (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $59		; 30 59 ; Branch if minus to $30, $59 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $30, $27		; 30 27 ; Branch if minus to $30, $27 [Flow: branch]
	ldx $41.b		; A6 41 ; Load $41.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $592C.w		; 2D 2C 59 ; Logical AND $592C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $28.b		; 06 28 ; Arithmetic shift left $28.b [Reads: Direct Page] [Flags: NCZ]
	and $1D.b		; 25 1D ; Logical AND $1D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cpx #$2B.b		; E0 2B ; Compare #$2B.b with X register [Reads: X Index] [Flags: NCZ]
	eor $76B5.w,Y		; 59 B5 76 ; Exclusive OR accumulator with memory $76B5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $59.b,X		; B4 59 ; Load Y register $59.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sbc $2B.b,S		; E3 2B ; Subtract stack-relative $2B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor $27B1.w,Y		; 59 B1 27 ; Exclusive OR accumulator with memory $27B1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $432C.w,X		; 1D 2C 43 ; OR accumulator with memory $432C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	ora ($7E.b,X)		; 01 7E ; Logical OR ($7E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $88.b,X		; 74 88 ; Store zero to $88.b,X [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cop $74.b		; 02 74 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $3028.w		; 0D 28 30 ; Logical OR $3028.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	rol M7B.w		; 2E 1C 21 ; Rotate left M7B.w [Flags: NCZ]
	eor $59B6.w,Y		; 59 B6 59 ; Exclusive OR accumulator with memory $59B6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $1A59.w,X		; DE 59 1A ; Decrement memory $1A59.w,X [Reads: X Index] [Flags: NZ]
	eor $D1E2.w,Y		; 59 E2 D1 ; Exclusive OR accumulator with memory $D1E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $75B4.w,Y		; 59 B4 75 ; Exclusive OR accumulator with memory $75B4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $2B.b,S		; E3 2B ; Subtract stack-relative $2B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor $A221.w,Y		; 59 21 A2 ; Exclusive OR accumulator with memory $A221.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $7641.w		; 2D 41 76 ; Logical AND $7641.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $8A.b,S		; 43 8A ; Exclusive OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $8A.b,S		; 43 8A ; Exclusive OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $8A.b,S		; 43 8A ; Exclusive OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	jsl $2D2120.l		; 22 20 21 2D ; Jump to subroutine long $2D2120.l [Writes: Stack Pointer] [Flow: call]
	rol $1359.w,X		; 3E 59 13 ; Rotate left $1359.w,X [Reads: X Index] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $1E.b		; 24 1E ; Test bits $1E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor $42B6.w,Y		; 59 B6 42 ; Exclusive OR accumulator with memory $42B6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $1ED9.w,Y		; 59 D9 1E ; Exclusive OR accumulator with memory $1ED9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $167F3E.l,X		; 1F 3E 7F 16 ; Logical OR long $167F3E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($28.b,X)		; 21 28 ; Logical AND ($28.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $8A.b,S		; 43 8A ; Exclusive OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $1A2C.w,Y		; 59 2C 1A ; Exclusive OR accumulator with memory $1A2C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $59		; 30 59 ; Branch if minus to $30, $59 [Flow: branch]
	lda $007541.l		; AF 41 75 00 ; Load long $007541.l into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $32DD.w,Y		; 59 DD 32 ; Exclusive OR accumulator with memory $32DD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $2227.w,Y		; 59 27 22 ; Exclusive OR accumulator with memory $2227.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $591E.w		; 1C 1E 59 ; Test and reset bits $591E.w [Reads: Accumulator] [Flags: Z]
	sbc $27.b,S		; E3 27 ; Subtract stack-relative $27.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	jsr $BA59.w		; 20 59 BA ; Jump to subroutine at $BA59.w [Writes: Stack Pointer] [Flow: call]
	ora $5932.w,X		; 1D 32 59 ; OR accumulator with memory $5932.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($D8.b),Y		; 91 D8 ; Store accumulator ($D8.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ror $16.b,X		; 76 16 ; Rotate right $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sty $A6.b,X		; 94 A6 ; Store Y register $A6.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora $1F0E8E.l,X		; 1F 8E 0E 1F ; Logical OR long $1F0E8E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $B516.w,Y		; 59 16 B5 ; Exclusive OR accumulator with memory $B516.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $27		; B0 27 ; Branch if carry set to $B0, $27 [Flow: branch]
	jsr $B459.w		; 20 59 B4 ; Jump to subroutine at $B459.w [Writes: Stack Pointer] [Flow: call]
	eor $7ED8.w,Y		; 59 D8 7E ; Exclusive OR accumulator with memory $7ED8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($B0.b,S),Y		; 73 B0 ; Add with carry (stack relative indirect indexed) ($B0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $E159.w		; 2C 59 E1 ; Test bits $E159.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ldx $1E.b		; A6 1E ; Load $1E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	eor $59D8.w,Y		; 59 D8 59 ; Exclusive OR accumulator with memory $59D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	jsl $9773DD.l		; 22 DD 73 97 ; Jump to subroutine long $9773DD.l [Writes: Stack Pointer] [Flow: call]
	jsr $2CB4.w		; 20 B4 2C ; Jump to subroutine at $2CB4.w [Writes: Stack Pointer] [Flow: call]
	eor $73.b,S		; 43 73 ; Exclusive OR accumulator with stack relative $73.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp ($28.b),Y		; D1 28 ; Compare accumulator ($28.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	rol $1D25.w		; 2E 25 1D ; Rotate left $1D25.w [Flags: NCZ]
	eor $1EBE.w,Y		; 59 BE 1E ; Exclusive OR accumulator with memory $1EBE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $AF59.w		; 2D 59 AF ; Logical AND $AF59.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $9173.w,X		; 7E 73 91 ; Rotate right $9173.w,X [Reads: X Index] [Flags: NCZ]
	and $1E.b		; 25 1E ; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($59.b)		; 92 59 ; Store accumulator (indirect) ($59.b) [Reads: Direct Page, Accumulator]
	cmp [$1C.b]		; C7 1C ; Compare accumulator (long) [$1C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	asl $8A41.w,X		; 1E 41 8A ; Arithmetic shift left $8A41.w,X [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($26.b),Y		; 51 26 ; Exclusive OR accumulator with memory ($26.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $2E2C.w,Y		; 59 2C 2E ; Exclusive OR accumulator with memory $2E2C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $59E3.w		; CD E3 59 ; Compare $59E3.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$25		; E2 25
	and $73.b		; 25 73 ; Logical AND $73.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $22.b		; 25 22 ; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $1E.b		; 24 1E ; Test bits $1E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor $41AF.w,Y		; 59 AF 41 ; Exclusive OR accumulator with memory $41AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $241A13.l,X		; 7F 13 1A 24 ; Add long $241A13.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $CF59.w,X		; 1E 59 CF ; Arithmetic shift left $CF59.w,X [Reads: X Index] [Flags: NCZ]
	eor $DC11.w,Y		; 59 11 DC ; Exclusive OR accumulator with memory $DC11.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $2C1E.w,X		; 1E 1E 2C ; Arithmetic shift left $2C1E.w,X [Reads: X Index] [Flags: NCZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rol $592D.w		; 2E 2D 59 ; Rotate left $592D.w [Flags: NCZ]
	sta $2D5127.l,X		; 9F 27 51 2D ; Store accumulator (long,X) $2D5127.l,X [Reads: Accumulator, X Index]
	adc $2D.b,X		; 75 2D ; Add $2D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $2525.w,X		; 1E 25 25 ; Arithmetic shift left $2525.w,X [Reads: X Index] [Flags: NCZ]
	eor $3293.w,Y		; 59 93 32 ; Exclusive OR accumulator with memory $3293.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp [$1E.b]		; C7 1E ; Compare accumulator (long) [$1E.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $5908.w,Y		; 59 08 59 ; Exclusive OR accumulator with memory $5908.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $2F1A.w		; 20 1A 2F ; Jump to subroutine at $2F1A.w [Writes: Stack Pointer] [Flow: call]
	asl $D859.w,X		; 1E 59 D8 ; Arithmetic shift left $D859.w,X [Reads: X Index] [Flags: NCZ]
	rol $59.b		; 26 59 ; Rotate left $59.b [Reads: Direct Page] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor $41E3.w,Y		; 59 E3 41 ; Exclusive OR accumulator with memory $41E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $0A.b,X		; 76 0A ; Rotate right $0A.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $291E.w,X		; 1E 1E 29 ; Arithmetic shift left $291E.w,X [Reads: X Index] [Flags: NCZ]
	eor $59B6.w,Y		; 59 B6 59 ; Exclusive OR accumulator with memory $59B6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta [$2D.b],Y		; 97 2D ; Store accumulator (long indexed) [$2D.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cpx #$A0.b		; E0 A0 ; Compare #$A0.b with X register [Reads: X Index] [Flags: NCZ]
	rol $422C.w		; 2E 2C 42 ; Rotate left $422C.w [Flags: NCZ]
	eor $0A0E.w,Y		; 59 0E 0A ; Exclusive OR accumulator with memory $0A0E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $21027F.l,X		; 3F 7F 02 21 ; AND accumulator with memory (long,X) $21027F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $599C.w,X		; 1E 9C 59 ; Arithmetic shift left $599C.w,X [Reads: X Index] [Flags: NCZ]
	cmp $D8.b		; C5 D8 ; Compare $D8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $1A1C.w,Y		; 59 1C 1A ; Exclusive OR accumulator with memory $1A1C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $1E591E.l		; 2F 1E 59 1E ; AND accumulator with memory (long) $1E591E.l [Writes: Accumulator] [Flags: NZ]
	sta ($59.b)		; 92 59 ; Store accumulator (indirect) ($59.b) [Reads: Direct Page, Accumulator]
	dec $75.b		; C6 75 ; Decrement $75.b [Reads: Direct Page] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $1E.b		; 24 1E ; Test bits $1E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor $3207.w,Y		; 59 07 32 ; Exclusive OR accumulator with memory $3207.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $22.b		; 25 22 ; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor ($8A.b,X)		; 41 8A ; Exclusive OR accumulator with memory ($8A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($DB.b)		; 12 DB ; OR accumulator with memory (indirect) ($DB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($20.b,S),Y		; 93 20 ; Store accumulator (stack relative indirect indexed) ($20.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	asl $9059.w,X		; 1E 59 90 ; Arithmetic shift left $9059.w,X [Reads: X Index] [Flags: NCZ]
	ror $30.b,X		; 76 30 ; Rotate right $30.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp [$1D.b]		; C7 1D ; Compare accumulator (long) [$1D.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ldx $1F.b		; A6 1F ; Load $1F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	rol $5925.w		; 2E 25 59 ; Rotate left $5925.w [Flags: NCZ]
	cmp $20.b,X		; D5 20 ; Compare accumulator $20.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $2559.w		; 2C 59 25 ; Test bits $2559.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jsl $591E2F.l		; 22 2F 1E 59 ; Jump to subroutine long $591E2F.l [Writes: Stack Pointer] [Flow: call]
	ldy $59.b,X		; B4 59 ; Load Y register $59.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldx $43.b,Y		; B6 43 ; Load X register $43.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	adc $9959E8.l,X		; 7F E8 59 99 ; Add long $9959E8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx #$27.b		; A2 27 ; Load #$27.b into X register [Writes: X Index] [Flags: NZ]
	eor $591A.w,Y		; 59 1A 59 ; Exclusive OR accumulator with memory $591A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	and $C659.w		; 2D 59 C6 ; Logical AND $C659.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $DC11.w,Y		; 59 11 DC ; Exclusive OR accumulator with memory $DC11.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $2C1E.w,X		; 1E 1E 2C ; Arithmetic shift left $2C1E.w,X [Reads: X Index] [Flags: NCZ]
	adc $1B.b,X		; 75 1B ; Add $1B.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F1E.w,X		; 1D 1E 1F ; OR accumulator with memory $1F1E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $B394.w,X		; 1E 94 B3 ; Arithmetic shift left $B394.w,X [Reads: X Index] [Flags: NCZ]
	lda $1E.b		; A5 1E ; Load $1E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $22.b		; 26 22 ; Rotate left $22.b [Reads: Direct Page] [Flags: NCZ]
	asl $412C.w,X		; 1E 2C 41 ; Arithmetic shift left $412C.w,X [Reads: X Index] [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $2C51.w		; 2D 51 2C ; Logical AND $2C51.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $D8.b,X		; 76 D8 ; Rotate right $D8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $1CD0.w,Y		; 59 D0 1C ; Exclusive OR accumulator with memory $1CD0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $592D.w		; CE 2D 59 ; Decrement $592D.w [Flags: NZ]
	dec $59.b		; C6 59 ; Decrement $59.b [Reads: Direct Page] [Flags: NZ]
	rol $32.b		; 26 32 ; Rotate left $32.b [Reads: Direct Page] [Flags: NCZ]
	eor $2E2C.w,Y		; 59 2C 2E ; Exclusive OR accumulator with memory $2E2C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $1E1C.w		; 1C 1C 1E ; Test and reset bits $1E1C.w [Reads: Accumulator] [Flags: Z]
	bit $432C.w		; 2C 2C 43 ; Test bits $432C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	adc $59426A.l,X		; 7F 6A 42 59 ; Add long $59426A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $591D.w,X		; 9E 1D 59 ; Store zero to $591D.w,X [Reads: X Index]
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor $2DD7.w,Y		; 59 D7 2D ; Exclusive OR accumulator with memory $2DD7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $1F22.w,Y		; 59 22 1F ; Exclusive OR accumulator with memory $1F22.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $E3.b,X		; 75 E3 ; Add $E3.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $DB9D.w,Y		; 59 9D DB ; Exclusive OR accumulator with memory $DB9D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$33.b		; A9 33 ; Load #$33.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$A5.b		; A0 A5 ; Load #$A5.b into Y register [Writes: Y Index] [Flags: NZ]
	asl $2226.w,X		; 1E 26 22 ; Arithmetic shift left $2226.w,X [Reads: X Index] [Flags: NCZ]
	asl $762C.w,X		; 1E 2C 76 ; Arithmetic shift left $762C.w,X [Reads: X Index] [Flags: NCZ]
	dec $D859.w,X		; DE 59 D8 ; Decrement memory $D859.w,X [Reads: X Index] [Flags: NZ]
	eor $1A07.w,Y		; 59 07 1A ; Exclusive OR accumulator with memory $1A07.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $BE.b		; 26 BE ; Rotate left $BE.b [Reads: Direct Page] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	.db $42, $59		; 42 59 ; Reserved instruction
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
.ACCU 8
	sep #$25		; E2 25
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $2D.b		; C6 2D ; Decrement $2D.b [Reads: Direct Page] [Flags: NZ]
	lda $7E.b		; A5 7E ; Load $7E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($AB.b,S),Y		; 73 AB ; Add with carry (stack relative indirect indexed) ($AB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $591A.w,Y		; 59 1A 59 ; Exclusive OR accumulator with memory $591A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $201A.w		; 0C 1A 20 ; Test and set bits $201A.w [Reads: Accumulator] [Flags: Z]
	jsl $03591C.l		; 22 1C 59 03 ; Jump to subroutine long $03591C.l [Writes: Stack Pointer] [Flow: call]
	asl $931C.w,X		; 1E 1C 93 ; Arithmetic shift left $931C.w,X [Reads: X Index] [Flags: NCZ]
	dec $3F.b,X		; D6 3F ; Decrement memory $3F.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	adc $1A2B13.l,X		; 7F 13 2B 1A ; Add long $1A2B13.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $59BA.w,Y		; 59 BA 59 ; Exclusive OR accumulator with memory $59BA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $59.b		; 24 59 ; Test bits $59.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	adc $12.b,X		; 75 12 ; Add $12.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldx $1A2B.w		; AE 2B 1A ; Load $1A2B.w into X register [Writes: X Index] [Flags: NZ]
	and ($BA.b,X)		; 21 BA ; Logical AND ($BA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor ($76.b,X)		; 41 76 ; Exclusive OR accumulator with memory ($76.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $8A.b,S		; 43 8A ; Exclusive OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $8A.b,S		; 43 8A ; Exclusive OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $5921.w		; 0E 21 59 ; Arithmetic shift left $5921.w [Flags: NCZ]
	and ($1A.b)		; 32 1A ; AND accumulator with memory (indirect) ($1A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($42.b,X)		; 21 42 ; Logical AND ($42.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $59E3.w,Y		; 59 E3 59 ; Exclusive OR accumulator with memory $59E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1259C4.l,X		; 1F C4 59 12 ; Logical OR long $1259C4.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldx $1A2B.w		; AE 2B 1A ; Load $1A2B.w into X register [Writes: X Index] [Flags: NZ]
	and ($BA.b,X)		; 21 BA ; Logical AND ($BA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rol $4375.w,X		; 3E 75 43 ; Rotate left $4375.w,X [Reads: X Index] [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $8A.b,S		; 43 8A ; Exclusive OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $76.b,S		; 43 76 ; Exclusive OR accumulator with stack relative $76.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $28.b		; 06 28 ; Arithmetic shift left $28.b [Reads: Direct Page] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora $2359.w,X		; 1D 59 23 ; OR accumulator with memory $2359.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor $59BA.w,Y		; 59 BA 59 ; Exclusive OR accumulator with memory $59BA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	rol $087F.w,X		; 3E 7F 08 ; Rotate left $087F.w,X [Reads: X Index] [Flags: NCZ]
	eor ($26.b),Y		; 51 26 ; Exclusive OR accumulator with memory ($26.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $2BD2.w,Y		; 59 D2 2B ; Exclusive OR accumulator with memory $2BD2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($42.b)		; 32 42 ; AND accumulator with memory (indirect) ($42.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2E1B.w,Y		; 59 1B 2E ; Exclusive OR accumulator with memory $2E1B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $E359.w		; 2D 59 E3 ; Logical AND $E359.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $279F.w,Y		; 59 9F 27 ; Exclusive OR accumulator with memory $279F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $D0.b,X		; 75 D0 ; Add $D0.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $5926.w,X		; 1E 26 59 ; Arithmetic shift left $5926.w,X [Reads: X Index] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor $59AD.w,Y		; 59 AD 59 ; Exclusive OR accumulator with memory $59AD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol M7Y.w		; 2E 20 21 ; Rotate left M7Y.w [Flags: NCZ]
	eor $DC11.w,Y		; 59 11 DC ; Exclusive OR accumulator with memory $DC11.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $2C1E.w,X		; 1E 1E 2C ; Arithmetic shift left $2C1E.w,X [Reads: X Index] [Flags: NCZ]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $25.b		; 02 25 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $599C.w		; 2E 9C 59 ; Rotate left $599C.w [Flags: NCZ]
	trb $2E25.w		; 1C 25 2E ; Test and reset bits $2E25.w [Reads: Accumulator] [Flags: Z]
	stz $8A43.w		; 9C 43 8A ; Store zero to $8A43.w
	asl $B1.b,X		; 16 B1 ; Arithmetic shift left $B1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and $3E3F.w		; 2D 3F 3E ; Logical AND $3E3F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $E8.b,X		; 75 E8 ; Add $E8.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $2E2D.w,Y		; 59 2D 2E ; Exclusive OR accumulator with memory $2E2D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and [$A4.b]		; 27 A4 ; AND accumulator with memory (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $B459.w,Y		; BE 59 B4 ; Load X register $B459.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor $591A.w,Y		; 59 1A 59 ; Exclusive OR accumulator with memory $591A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($2E.b,X)		; 21 2E ; Logical AND ($2E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldy $7641.w,X		; BC 41 76 ; Load Y register $7641.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $A799.w,Y		; 59 99 A7 ; Exclusive OR accumulator with memory $A799.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$2C.b		; A0 2C ; Load #$2C.b into Y register [Writes: Y Index] [Flags: NZ]
	and #$1E.b		; 29 1E ; Logical AND #$1E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $3E.b		; 24 3E ; Test bits $3E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ror $0073.w,X		; 7E 73 00 ; Rotate right $0073.w,X [Reads: X Index] [Flags: NCZ]
	lda ($42.b),Y		; B1 42 ; Load accumulator ($42.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $59B6.w,Y		; 59 B6 59 ; Exclusive OR accumulator with memory $59B6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $9759D3.l,X		; BF D3 59 97 ; Load long $9759D3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $59E3.w,Y		; 59 E3 59 ; Exclusive OR accumulator with memory $59E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($28.b,X)		; E1 28 ; Subtract with carry ($28.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $73B5.w,Y		; 59 B5 73 ; Exclusive OR accumulator with memory $73B5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $DF.b		; 25 DF ; Logical AND $DF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($2C.b)		; 32 2C ; AND accumulator with memory (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $1E2D.w,Y		; 59 2D 1E ; Exclusive OR accumulator with memory $1E2D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $26B3.w		; 2C B3 26 ; Test bits $26B3.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A5222B.l,X		; 1F 2B 22 A5 ; Logical OR long $A5222B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $412C.w,X		; 1D 2C 41 ; OR accumulator with memory $412C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($E6.b,S),Y		; 73 E6 ; Add with carry (stack relative indirect indexed) ($E6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $1E16.w,Y		; 59 16 1E ; Exclusive OR accumulator with memory $1E16.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sty $AF.b,X		; 94 AF ; Store Y register $AF.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	trb $9C28.w		; 1C 28 9C ; Test and reset bits $9C28.w [Reads: Accumulator] [Flags: Z]
	eor $59B5.w,Y		; 59 B5 59 ; Exclusive OR accumulator with memory $59B5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $DF.b		; 25 DF ; Logical AND $DF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($2C.b)		; 32 2C ; AND accumulator with memory (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $DF73.w,X		; 7E 73 DF ; Rotate right $DF73.w,X [Reads: X Index] [Flags: NCZ]
	and $B01C.w		; 2D 1C B0 ; Logical AND $B01C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and [$20.b]		; 27 20 ; AND accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $59E3.w,Y		; 59 E3 59 ; Exclusive OR accumulator with memory $59E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($2B.b),Y		; B1 2B ; Load accumulator ($2B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $592C.w		; 2C 2C 59 ; Test bits $592C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	rol $41.b		; 26 41 ; Rotate left $41.b [Reads: Direct Page] [Flags: NCZ]
	adc ($16.b,S),Y		; 73 16 ; Add with carry (stack relative indirect indexed) ($16.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	asl $2525.w,X		; 1E 25 25 ; Arithmetic shift left $2525.w,X [Reads: X Index] [Flags: NCZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	cmp $592C.w,Y		; D9 2C 59 ; Compare accumulator $592C.w,Y [Reads: Y Index] [Flags: NCZ]
	and ($2E.b,X)		; 21 2E ; Logical AND ($2E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldy $D159.w,X		; BC 59 D1 ; Load Y register $D159.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$1E.b		; 29 1E ; Logical AND #$1E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $73B5.w,Y		; 59 B5 73 ; Exclusive OR accumulator with memory $73B5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $9B27.w		; 2E 27 9B ; Rotate left $9B27.w [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and $951A.w		; 2D 1A 95 ; Logical AND $951A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $59A8.w,Y		; 59 A8 59 ; Exclusive OR accumulator with memory $59A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $7E41.w,Y		; BE 41 7E ; Load X register $7E41.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc ($00.b,S),Y		; 73 00 ; Add with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($42.b,X)		; 21 42 ; Logical AND ($42.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $5908.w,Y		; 59 08 59 ; Exclusive OR accumulator with memory $5908.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $592D27.l,X		; DF 27 2D 59 ; Compare accumulator (long,X) $592D27.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor $5997.w,Y		; 59 97 59 ; Exclusive OR accumulator with memory $5997.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $B01C.w,Y		; 59 1C B0 ; Exclusive OR accumulator with memory $B01C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $73A5.w		; 9C A5 73 ; Store zero to $73A5.w
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsr $3E8F.w		; 20 8F 3E ; Jump to subroutine at $3E8F.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $25.b		; 02 25 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $599C.w		; 2E 9C 59 ; Rotate left $599C.w [Flags: NCZ]
	trb $2E25.w		; 1C 25 2E ; Test and reset bits $2E25.w [Reads: Accumulator] [Flags: Z]
	stz $7F43.w		; 9C 43 7F ; Store zero to $7F43.w
	ora $59321A.l		; 0F 1A 32 59 ; OR accumulator with memory (long) $59321A.l [Writes: Accumulator] [Flags: NZ]
	ldx $3659.w,Y		; BE 59 36 ; Load X register $3659.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	bit $59.b,X		; 34 59 ; Test bits $59.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora ($DC.b),Y		; 11 DC ; OR accumulator with memory ($DC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $2C1E.w,X		; 1E 1E 2C ; Arithmetic shift left $2C1E.w,X [Reads: X Index] [Flags: NCZ]
	eor $088C.w,Y		; 59 8C 08 ; Exclusive OR accumulator with memory $088C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($25.b),Y		; 51 25 ; Exclusive OR accumulator with memory ($25.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $1E.b		; 25 1E ; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $E375.w		; 2D 75 E3 ; Logical AND $E375.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $59C3.w,Y		; 59 C3 59 ; Exclusive OR accumulator with memory $59C3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp [$1E.b]		; C7 1E ; Compare accumulator (long) [$1E.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $D39A.w,Y		; 59 9A D3 ; Exclusive OR accumulator with memory $D39A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($8A.b,X)		; 41 8A ; Exclusive OR accumulator with memory ($8A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $931C.w,Y		; 59 1C 93 ; Exclusive OR accumulator with memory $931C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $24.b,X		; 76 24 ; Rotate right $24.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $291E.w,X		; 1E 1E 29 ; Arithmetic shift left $291E.w,X [Reads: X Index] [Flags: NCZ]
	eor $91E1.w,Y		; 59 E1 91 ; Exclusive OR accumulator with memory $91E1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $59.b,X		; B5 59 ; Load $59.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $2C.b,X		; B4 2C ; Load Y register $2C.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	jsl $411E1D.l		; 22 1D 1E 41 ; Jump to subroutine long $411E1D.l [Writes: Stack Pointer] [Flow: call]
	ror $1673.w,X		; 7E 73 16 ; Rotate right $1673.w,X [Reads: X Index] [Flags: NCZ]
	lda ($2D.b),Y		; B1 2D ; Load accumulator ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $25E2.w,Y		; 59 E2 25 ; Exclusive OR accumulator with memory $25E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sta $88733F.l,X		; 9F 3F 73 88 ; Store accumulator (long,X) $88733F.l,X [Reads: Accumulator, X Index]
	mvp $0E,$8A		; 44 8A 0E ; Move block positive $0E,$8A [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and #$A0.b		; 29 A0 ; Logical AND #$A0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $59.b		; 00 59 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $21.b		; 02 21 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $73D3.w,X		; 1E D3 73 ; Arithmetic shift left $73D3.w,X [Reads: X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $2C.b		; 04 2C ; Test and set bits $2C.b [Reads: Accumulator] [Flags: Z]
	trb $291A.w		; 1C 1A 29 ; Test and reset bits $291A.w [Reads: Accumulator] [Flags: Z]
	asl $7F68.w,X		; 1E 68 7F ; Arithmetic shift left $7F68.w,X [Reads: X Index] [Flags: NCZ]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	jsl $2D2120.l		; 22 20 21 2D ; Jump to subroutine long $2D2120.l [Writes: Stack Pointer] [Flow: call]
	rol $0E8A.w,X		; 3E 8A 0E ; Rotate left $0E8A.w,X [Reads: X Index] [Flags: NCZ]
	and #$A0.b		; 29 A0 ; Logical AND #$A0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	eor $D39A.w,Y		; 59 9A D3 ; Exclusive OR accumulator with memory $D39A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $75E3.w,Y		; 59 E3 75 ; Exclusive OR accumulator with memory $75E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $22.b		; 25 22 ; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $1E.b		; 24 1E ; Test bits $1E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	rol $0E7F.w,X		; 3E 7F 0E ; Rotate left $0E7F.w,X [Reads: X Index] [Flags: NCZ]
	and ($42.b,X)		; 21 42 ; Logical AND ($42.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $5908.w,Y		; 59 08 59 ; Exclusive OR accumulator with memory $5908.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	eor $8A.b,S		; 43 8A ; Exclusive OR accumulator with stack relative $8A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($28.b,S),Y		; 13 28 ; OR accumulator (stack relative indirect indexed) ($28.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	eor $1D96.w,Y		; 59 96 1D ; Exclusive OR accumulator with memory $1D96.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($75.b,X)		; 41 75 ; Exclusive OR accumulator with memory ($75.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $2B.b,S		; 03 2B ; OR accumulator with stack relative $2B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and #$59.b		; 29 59 ; Logical AND #$59.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsr $598F.w		; 20 8F 59 ; Jump to subroutine at $598F.w [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $281CD4.l,X		; 1F D4 1C 28 ; Logical OR long $281CD4.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $2D1C.w,X		; 1E 1C 2D ; Arithmetic shift left $2D1C.w,X [Reads: X Index] [Flags: NCZ]
	ldy $20.b,X		; B4 20 ; Load Y register $20.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ror $11.b,X		; 76 11 ; Rotate right $11.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	jmp.w [$1E1E]		; DC 1E 1E ; Jump long indirect [$1E1E] [Flow: jump]
	bit $7F41.w		; 2C 41 7F ; Test bits $7F41.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora $C8.b		; 05 C8 ; Logical OR $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3435.w,Y		; 59 35 34 ; Exclusive OR accumulator with memory $3435.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $59.b,X		; 34 59 ; Test bits $59.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora ($DC.b),Y		; 11 DC ; OR accumulator with memory ($DC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $2C1E.w,X		; 1E 1E 2C ; Arithmetic shift left $2C1E.w,X [Reads: X Index] [Flags: NCZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($25.b),Y		; 51 25 ; Exclusive OR accumulator with memory ($25.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $1E.b		; 25 1E ; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $E359.w		; 2D 59 E3 ; Logical AND $E359.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $C3.b,X		; 75 C3 ; Add $C3.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $1EC7.w,Y		; 59 C7 1E ; Exclusive OR accumulator with memory $1EC7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $D39A.w,Y		; 59 9A D3 ; Exclusive OR accumulator with memory $D39A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $248C.w,Y		; 59 8C 24 ; Exclusive OR accumulator with memory $248C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $291E.w,X		; 1E 1E 29 ; Arithmetic shift left $291E.w,X [Reads: X Index] [Flags: NCZ]
	eor $76D8.w,Y		; 59 D8 76 ; Exclusive OR accumulator with memory $76D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	asl $2C1A.w,X		; 1E 1A 2C ; Arithmetic shift left $2C1A.w,X [Reads: X Index] [Flags: NCZ]
	rol $D7CD.w		; 2E CD D7 ; Rotate left $D7CD.w [Flags: NCZ]
	and $B559.w		; 2D 59 B5 ; Logical AND $B559.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $2CB4.w,Y		; 59 B4 2C ; Exclusive OR accumulator with memory $2CB4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $411E1D.l		; 22 1D 1E 41 ; Jump to subroutine long $411E1D.l [Writes: Stack Pointer] [Flow: call]
	ror $1673.w,X		; 7E 73 16 ; Rotate right $1673.w,X [Reads: X Index] [Flags: NCZ]
	lda ($2D.b),Y		; B1 2D ; Load accumulator ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $25E2.w,Y		; 59 E2 25 ; Exclusive OR accumulator with memory $25E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sta $88733F.l,X		; 9F 3F 73 88 ; Store accumulator (long,X) $88733F.l,X [Reads: Accumulator, X Index]
	mvp $0E,$8A		; 44 8A 0E ; Move block positive $0E,$8A [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and #$A0.b		; 29 A0 ; Logical AND #$A0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $59.b		; 00 59 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $21.b		; 02 21 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $73D3.w,X		; 1E D3 73 ; Arithmetic shift left $73D3.w,X [Reads: X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $2C.b		; 04 2C ; Test and set bits $2C.b [Reads: Accumulator] [Flags: Z]
	trb $291A.w		; 1C 1A 29 ; Test and reset bits $291A.w [Reads: Accumulator] [Flags: Z]
	asl $7F68.w,X		; 1E 68 7F ; Arithmetic shift left $7F68.w,X [Reads: X Index] [Flags: NCZ]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor ($8A.b,X)		; 41 8A ; Exclusive OR accumulator with memory ($8A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($C8.b)		; 12 C8 ; OR accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $592D.w		; 2E 2D 59 ; Rotate left $592D.w [Flags: NCZ]
	rol $32.b		; 26 32 ; Rotate left $32.b [Reads: Direct Page] [Flags: NCZ]
	adc $32.b,X		; 75 32 ; Add $32.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora $8A41.w,X		; 1D 41 8A ; OR accumulator with memory $8A41.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $1A8B.w		; 2D 8B 1A ; Logical AND $1A8B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $B625.w,Y		; 59 25 B6 ; Exclusive OR accumulator with memory $B625.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $1E25.w		; 2D 25 1E ; Logical AND $1E25.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $DD28.w,Y		; 59 28 DD ; Exclusive OR accumulator with memory $DD28.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $20.b,X		; 76 20 ; Rotate right $20.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $30, $27		; 30 27 ; Branch if minus to $30, $27 [Flow: branch]
	eor ($8A.b,X)		; 41 8A ; Exclusive OR accumulator with memory ($8A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $27.b		; E5 27 ; Subtract $27.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	bit $2C.b		; 24 2C ; Test bits $2C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor $59A8.w,Y		; 59 A8 59 ; Exclusive OR accumulator with memory $59A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $B4B6B5.l		; 2F B5 B6 B4 ; AND accumulator with memory (long) $B4B6B5.l [Writes: Accumulator] [Flags: NZ]
	jsr $7E41.w		; 20 41 7E ; Jump to subroutine at $7E41.w [Writes: Stack Pointer] [Flow: call]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor ($26.b),Y		; 51 26 ; Exclusive OR accumulator with memory ($26.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $BA20.w,Y		; 59 20 BA ; Exclusive OR accumulator with memory $BA20.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $DA59.w,X		; 1D 59 DA ; OR accumulator with memory $DA59.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $59AD.w,Y		; 59 AD 59 ; Exclusive OR accumulator with memory $59AD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	and #$93.b		; 29 93 ; Logical AND #$93.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($2D.b,S),Y		; 73 2D ; Add with carry (stack relative indirect indexed) ($2D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $41DA.w,Y		; 59 DA 41 ; Exclusive OR accumulator with memory $41DA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $25E2.w,Y		; 59 E2 25 ; Exclusive OR accumulator with memory $25E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $251E.w		; 2D 1E 25 ; Logical AND $251E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sta ($73.b,S),Y		; 93 73 ; Store accumulator (stack relative indirect indexed) ($73.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ldy $D6.b,X		; B4 D6 ; Load Y register $D6.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	asl $B3D3.w,X		; 1E D3 B3 ; Arithmetic shift left $B3D3.w,X [Reads: X Index] [Flags: NCZ]
	cmp ($C8.b,S),Y		; D3 C8 ; Compare accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	and ($41.b)		; 32 41 ; AND accumulator with memory (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $E673.w,X		; 7E 73 E6 ; Rotate right $E673.w,X [Reads: X Index] [Flags: NCZ]
	cmp $59B5.w		; CD B5 59 ; Compare $59B5.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $24BA.w,Y		; 59 BA 24 ; Exclusive OR accumulator with memory $24BA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $2C59.w,X		; 1E 59 2C ; Arithmetic shift left $2C59.w,X [Reads: X Index] [Flags: NCZ]
.ACCU 8
	sep #$26		; E2 26
	rol $B3.b		; 26 B3 ; Rotate left $B3.b [Reads: Direct Page] [Flags: NCZ]
	dec $1973.w,X		; DE 73 19 ; Decrement memory $1973.w,X [Reads: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $9159.w		; 2C 59 91 ; Test bits $9159.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	eor $2ED2.w,Y		; 59 D2 2E ; Exclusive OR accumulator with memory $2ED2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	trb $591E.w		; 1C 1E 59 ; Test and reset bits $591E.w [Reads: Accumulator] [Flags: Z]
	dec $59.b		; C6 59 ; Decrement $59.b [Reads: Direct Page] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc ($2B.b,S),Y		; 73 2B ; Add with carry (stack relative indirect indexed) ($2B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	jsl $5942DD.l		; 22 DD 42 59 ; Jump to subroutine long $5942DD.l [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rol $592D.w		; 2E 2D 59 ; Rotate left $592D.w [Flags: NCZ]
	ldx $59.b,Y		; B6 59 ; Load X register $59.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda $59.b,X		; B5 59 ; Load $59.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($2B.b),Y		; B1 2B ; Load accumulator ($2B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $DA59.w,X		; 1D 59 DA ; OR accumulator with memory $DA59.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $B41F.w,Y		; 59 1F B4 ; Exclusive OR accumulator with memory $B41F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $7E41.w,X		; 1D 41 7E ; OR accumulator with memory $7E41.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($E6.b,S),Y		; 73 E6 ; Add with carry (stack relative indirect indexed) ($E6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $1EDB.w,Y		; 59 DB 1E ; Exclusive OR accumulator with memory $1EDB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $CD2E.w		; 2C 2E CD ; Test bits $CD2E.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dec $59.b		; C6 59 ; Decrement $59.b [Reads: Direct Page] [Flags: NZ]
	ora $1AC8.w,Y		; 19 C8 1A ; OR accumulator with memory $1AC8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $2D99.w,Y		; 59 99 2D ; Exclusive OR accumulator with memory $2D99.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $272B.w		; 2E 2B 27 ; Rotate left $272B.w [Flags: NCZ]
	adc ($29.b,S),Y		; 73 29 ; Add with carry (stack relative indirect indexed) ($29.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	asl $CA28.w,X		; 1E 28 CA ; Arithmetic shift left $CA28.w,X [Reads: X Index] [Flags: NCZ]
	eor $DAB4.w,Y		; 59 B4 DA ; Exclusive OR accumulator with memory $DAB4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $B51F.w,Y		; 59 1F B5 ; Exclusive OR accumulator with memory $B51F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($41.b,X)		; 21 41 ; Logical AND ($41.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$1E.b]		; 07 1E ; OR accumulator with memory (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($59.b,X)		; 21 59 ; Logical AND ($59.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($1E.b,X)		; 21 1E ; Logical AND ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($59.b,X)		; 21 59 ; Logical AND ($59.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($1E.b,X)		; 21 1E ; Logical AND ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($41.b,X)		; 21 41 ; Logical AND ($41.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor ($1D.b),Y		; 51 1D ; Exclusive OR accumulator with memory ($1D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $2FBB.w,Y		; 59 BB 2F ; Exclusive OR accumulator with memory $2FBB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $DA59.w,X		; 1E 59 DA ; Arithmetic shift left $DA59.w,X [Reads: X Index] [Flags: NCZ]
	eor $1ED0.w,Y		; 59 D0 1E ; Exclusive OR accumulator with memory $1ED0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $2DD7.w,Y		; 59 D7 2D ; Exclusive OR accumulator with memory $2DD7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($7F.b,X)		; 41 7F ; Exclusive OR accumulator with memory ($7F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $C0AD.w,Y		; 59 AD C0 ; Exclusive OR accumulator with memory $C0AD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b),Y		; B1 1D ; Load accumulator ($1D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $591A.w,Y		; 59 1A 59 ; Exclusive OR accumulator with memory $591A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $27B1.w		; 1C B1 27 ; Test and reset bits $27B1.w [Reads: Accumulator] [Flags: Z]
	trb $591E.w		; 1C 1E 59 ; Test and reset bits $591E.w [Reads: Accumulator] [Flags: Z]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor $22DB.w,Y		; 59 DB 22 ; Exclusive OR accumulator with memory $22DB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $75.b		; 26 75 ; Rotate left $75.b [Reads: Direct Page] [Flags: NCZ]
	rol $32.b		; 26 32 ; Rotate left $32.b [Reads: Direct Page] [Flags: NCZ]
	eor $1E21.w,Y		; 59 21 1E ; Exclusive OR accumulator with memory $1E21.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1E20.w,X		; 1D 20 1E ; OR accumulator with memory $1E20.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $CE59.w		; 2C 59 CE ; Test bits $CE59.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	trb $25A3.w		; 1C A3 25 ; Test and reset bits $25A3.w [Reads: Accumulator] [Flags: Z]
	and ($41.b)		; 32 41 ; AND accumulator with memory (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $27.b		; E5 27 ; Subtract $27.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	bit $2C.b		; 24 2C ; Test bits $2C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ror $A8.b,X		; 76 A8 ; Rotate right $A8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $B52F.w,Y		; 59 2F B5 ; Exclusive OR accumulator with memory $B52F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $B3.b,Y		; B6 B3 ; Load X register $B3.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sta ($32.b,S),Y		; 93 32 ; Store accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp $7E4332.l,X		; DF 32 43 7E ; Compare accumulator (long,X) $7E4332.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	adc ($00.b,S),Y		; 73 00 ; Add with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $22E1.w,Y		; 59 E1 22 ; Exclusive OR accumulator with memory $22E1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $1E.b		; 25 1E ; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $AC1A.w,Y		; 59 1A AC ; Exclusive OR accumulator with memory $AC1A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $2CDF.w		; CD DF 2C ; Compare $2CDF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $591A.w,Y		; 59 1A 59 ; Exclusive OR accumulator with memory $591A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($59.b)		; 32 59 ; AND accumulator with memory (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $73.b,X		; B4 73 ; Load Y register $73.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cmp $592C.w,Y		; D9 2C 59 ; Compare accumulator $592C.w,Y [Reads: Y Index] [Flags: NCZ]
	and $BA2522.l		; 2F 22 25 BA ; AND accumulator with memory (long) $BA2522.l [Writes: Accumulator] [Flags: NZ]
	jsr $591E.w		; 20 1E 59 ; Jump to subroutine at $591E.w [Writes: Stack Pointer] [Flow: call]
	sbc ($28.b,X)		; E1 28 ; Subtract with carry ($28.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $281C.w,Y		; 59 1C 28 ; Exclusive OR accumulator with memory $281C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $1D25.w		; 2E 25 1D ; Rotate left $1D25.w [Flags: NCZ]
	eor $1A2D.w,Y		; 59 2D 1A ; Exclusive OR accumulator with memory $1A2D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $73DA.w,Y		; 59 DA 73 ; Exclusive OR accumulator with memory $73DA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($22.b,S),Y		; 93 22 ; Store accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda $2C25.w,X		; BD 25 2C ; Load $2C25.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $59DE.w,Y		; 59 DE 59 ; Exclusive OR accumulator with memory $59DE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	eor $2505.w,Y		; 59 05 25 ; Exclusive OR accumulator with memory $2505.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $1E2D.w		; 2E 2D 1E ; Rotate left $1E2D.w [Flags: NCZ]
	eor ($7E.b,X)		; 41 7E ; Exclusive OR accumulator with memory ($7E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($07.b,S),Y		; 73 07 ; Add with carry (stack relative indirect indexed) ($07.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	asl $B159.w,X		; 1E 59 B1 ; Arithmetic shift left $B159.w,X [Reads: X Index] [Flags: NCZ]
	ora $1A59.w,X		; 1D 59 1A ; OR accumulator with memory $1A59.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $1E29.w,Y		; 59 29 1E ; Exclusive OR accumulator with memory $1E29.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $1B59.w		; 2D 59 1B ; Logical AND $1B59.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $591D2B.l		; 22 2B 1D 59 ; Jump to subroutine long $591D2B.l [Writes: Stack Pointer] [Flow: call]
	cmp [$2D.b],Y		; D7 2D ; Compare accumulator (long indexed) [$2D.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor $251F.w,Y		; 59 1F 25 ; Exclusive OR accumulator with memory $251F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $7330.w,X		; 1E 30 73 ; Arithmetic shift left $7330.w,X [Reads: X Index] [Flags: NCZ]
	dec $B059.w,X		; DE 59 B0 ; Decrement memory $B059.w,X [Reads: X Index] [Flags: NZ]
	rol $59.b		; 26 59 ; Rotate left $59.b [Reads: Direct Page] [Flags: NCZ]
	lda [$A6.b]		; A7 A6 ; Load accumulator (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($E1.b)		; 32 E1 ; AND accumulator with memory (indirect) ($E1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $1E.b		; A6 1E ; Load $1E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rol $732D.w		; 2E 2D 73 ; Rotate left $732D.w [Flags: NCZ]
	and ($1E.b,X)		; 21 1E ; Logical AND ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $27E0.w,Y		; 59 E0 27 ; Exclusive OR accumulator with memory $27E0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $DA59.w		; 2D 59 DA ; Logical AND $DA59.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $59D8.w,Y		; 59 D8 59 ; Exclusive OR accumulator with memory $59D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $28.b		; 26 28 ; Rotate left $28.b [Reads: Direct Page] [Flags: NCZ]
	rol $2D27.w		; 2E 27 2D ; Rotate left $2D27.w [Flags: NCZ]
	sta $7E9059.l		; 8F 59 90 7E ; Store accumulator (long) $7E9059.l [Reads: Accumulator]
	adc ($27.b,S),Y		; 73 27 ; Add with carry (stack relative indirect indexed) ($27.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lda [$A1.b]		; A7 A1 ; Load accumulator (long) [$A1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $2E2D.w		; CE 2D 2E ; Decrement $2E2D.w [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and [$1E.b]		; 27 1E ; AND accumulator with memory (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $7F41.w,X		; 1D 41 7F ; OR accumulator with memory $7F41.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $7A00.w		; 6D 00 7A ; Add $7A00.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($2D.b)		; 12 2D ; OR accumulator with memory (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $0559.w		; 2D 59 05 ; Logical AND $0559.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $59.b		; 26 59 ; Rotate left $59.b [Reads: Direct Page] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora [$28.b]		; 07 28 ; OR accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $75D0.w		; 2E D0 75 ; Rotate left $75D0.w [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b)		; 12 2D ; OR accumulator with memory (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $0559.w		; 2D 59 05 ; Logical AND $0559.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $59.b		; 26 59 ; Rotate left $59.b [Reads: Direct Page] [Flags: NCZ]
	ora ($93.b)		; 12 93 ; OR accumulator with memory (indirect) ($93.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $2E2D.w		; 1C 2D 2E ; Test and reset bits $2E2D.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($72.b)		; 32 72 ; AND accumulator with memory (indirect) ($72.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $7A006D.l,X		; 7F 6D 00 7A ; Add long $7A006D.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($2D.b)		; 12 2D ; OR accumulator with memory (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $0559.w		; 2D 59 05 ; Logical AND $0559.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $59.b		; 26 59 ; Rotate left $59.b [Reads: Direct Page] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora [$28.b]		; 07 28 ; OR accumulator with memory (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $75D0.w		; 2E D0 75 ; Rotate left $75D0.w [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b)		; 12 2D ; OR accumulator with memory (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $0559.w		; 2D 59 05 ; Logical AND $0559.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $59.b		; 26 59 ; Rotate left $59.b [Reads: Direct Page] [Flags: NCZ]
	ora ($93.b)		; 12 93 ; OR accumulator with memory (indirect) ($93.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $2E2D.w		; 1C 2D 2E ; Test and reset bits $2E2D.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($76.b)		; 32 76 ; AND accumulator with memory (indirect) ($76.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b)		; 12 2D ; OR accumulator with memory (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $0559.w		; 2D 59 05 ; Logical AND $0559.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $59.b		; 26 59 ; Rotate left $59.b [Reads: Direct Page] [Flags: NCZ]
	inc $59.b		; E6 59 ; Increment $59.b [Reads: Direct Page] [Flags: NZ]
	tsb $2E28.w		; 0C 28 2E ; Test and set bits $2E28.w [Reads: Accumulator] [Flags: Z]
	and [$2D.b]		; 27 2D ; AND accumulator with memory (long) [$2D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1A0259.l		; 8F 59 02 1A ; Store accumulator (long) $1A0259.l [Reads: Accumulator]
	and $7F711E.l		; 2F 1E 71 7F ; AND accumulator with memory (long) $7F711E.l [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $C702.w,Y		; 59 02 C7 ; Exclusive OR accumulator with memory $C702.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $2EB4.w		; 2D B4 2E ; Logical AND $2EB4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $0659.w,X		; 1E 59 06 ; Arithmetic shift left $0659.w,X [Reads: X Index] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldx $8975.w,Y		; BE 75 89 ; Load X register $8975.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ora ($1A.b)		; 12 1A ; OR accumulator with memory (indirect) ($1A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $8C591E.l		; 2F 1E 59 8C ; AND accumulator with memory (long) $8C591E.l [Writes: Accumulator] [Flags: NZ]
	.db $10, $2E		; 10 2E ; Branch if plus to $10, $2E [Flow: branch]
	ldx $72.b,Y		; B6 72 ; Load X register $72.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	adc $251E16.l,X		; 7F 16 1E 25 ; Add long $251E16.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	asl $DA59.w,X		; 1E 59 DA ; Arithmetic shift left $DA59.w,X [Reads: X Index] [Flags: NCZ]
	eor $59D8.w,Y		; 59 D8 59 ; Exclusive OR accumulator with memory $59D8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	asl $2C1A.w,X		; 1E 1A 2C ; Arithmetic shift left $2C1A.w,X [Reads: X Index] [Flags: NCZ]
	rol $1FCD.w		; 2E CD 1F ; Rotate left $1FCD.w [Flags: NCZ]
	jsl $1D251E.l		; 22 1E 25 1D ; Jump to subroutine long $1D251E.l [Writes: Stack Pointer] [Flow: call]
	eor ($75.b,X)		; 41 75 ; Exclusive OR accumulator with memory ($75.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inc $59.b		; E6 59 ; Increment $59.b [Reads: Direct Page] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $1E.b,S		; 23 1E ; AND accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $592D.w		; 1C 2D 59 ; Test and reset bits $592D.w [Reads: Accumulator] [Flags: Z]
	lda $59.b,X		; B5 59 ; Load $59.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor $209E.w,Y		; 59 9E 20 ; Exclusive OR accumulator with memory $209E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $2C1A.w,Y		; 59 1A 2C ; Exclusive OR accumulator with memory $2C1A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $32BC.w,Y		; 59 BC 32 ; Exclusive OR accumulator with memory $32BC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $21.b,X		; 76 21 ; Rotate right $21.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $1E.b		; 25 1E ; Logical AND $1E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $1A59.w		; 2C 59 1A ; Test bits $1A59.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $E359.w		; 2C 59 E3 ; Test bits $E359.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor $B499.w,Y		; 59 99 B4 ; Exclusive OR accumulator with memory $B499.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $3437.w,Y		; 59 37 34 ; Exclusive OR accumulator with memory $3437.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $1CD0.w,Y		; 59 D0 1C ; Exclusive OR accumulator with memory $1CD0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp [$1D.b]		; C7 1D ; Compare accumulator (long) [$1D.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	bit $7E41.w		; 2C 41 7E ; Test bits $7E41.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	adc ($00.b,S),Y		; 73 00 ; Add with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and [$32.b]		; 27 32 ; AND accumulator with memory (long) [$32.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $1EDB.w,Y		; 59 DB 1E ; Exclusive OR accumulator with memory $1EDB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $CE2E.w		; 2C 2E CE ; Test bits $CE2E.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $E359.w		; 2C 59 E3 ; Test bits $E359.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor $209E.w,Y		; 59 9E 20 ; Exclusive OR accumulator with memory $209E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $59DC.w,Y		; 59 DC 59 ; Exclusive OR accumulator with memory $59DC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 8
	sep #$25		; E2 25
	and $73.b		; 25 73 ; Logical AND $73.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$59.b],Y		; 97 59 ; Store accumulator (long indexed) [$59.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sbc $2B.b,S		; E3 2B ; Subtract stack-relative $2B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	bit $DA59.w		; 2C 59 DA ; Test bits $DA59.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor $1E24.w,Y		; 59 24 1E ; Exclusive OR accumulator with memory $1E24.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $4129.w,X		; 1E 29 41 ; Arithmetic shift left $4129.w,X [Reads: X Index] [Flags: NCZ]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and $C78B.w		; 2D 8B C7 ; Logical AND $C78B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $343C.w,Y		; B9 3C 34 ; Load $343C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $DC11.w,Y		; 59 11 DC ; Exclusive OR accumulator with memory $DC11.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $2C1E.w,X		; 1E 1E 2C ; Arithmetic shift left $2C1E.w,X [Reads: X Index] [Flags: NCZ]
	eor $59DA.w,Y		; 59 DA 59 ; Exclusive OR accumulator with memory $59DA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$BA.b		; 29 BA ; Logical AND #$BA.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($41.b)		; 32 41 ; AND accumulator with memory (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $1673.w,X		; 7E 73 16 ; Rotate right $1673.w,X [Reads: X Index] [Flags: NCZ]
	lda ($2D.b),Y		; B1 2D ; Load accumulator ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $599F.w,Y		; 59 9F 59 ; Exclusive OR accumulator with memory $599F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	bit $321A.w		; 2C 1A 32 ; Test bits $321A.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $448873.l,X		; 3F 73 88 44 ; AND accumulator with memory (long,X) $448873.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $5908.w,Y		; 59 08 59 ; Exclusive OR accumulator with memory $5908.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $592D27.l,X		; DF 27 2D 59 ; Compare accumulator (long,X) $592D27.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor $209E.w,Y		; 59 9E 20 ; Exclusive OR accumulator with memory $209E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	bit #$08.b		; 89 08 ; Test bits #$08.b with accumulator [Reads: Accumulator] [Flags: Z]
	eor $C09F.w,Y		; 59 9F C0 ; Exclusive OR accumulator with memory $C09F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $592D27.l,X		; DF 27 2D 59 ; Compare accumulator (long,X) $592D27.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor $209E.w,Y		; 59 9E 20 ; Exclusive OR accumulator with memory $209E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc $5927E6.l,X		; 7F E6 27 59 ; Add long $5927E6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $25E2.w,Y		; 59 E2 25 ; Exclusive OR accumulator with memory $25E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $A5.b		; 25 A5 ; Logical AND $A5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $E359.w,X		; 1D 59 E3 ; OR accumulator with memory $E359.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $591A.w,Y		; 59 1A 59 ; Exclusive OR accumulator with memory $591A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($28.b),Y		; D1 28 ; Compare accumulator ($28.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	and $41251E.l		; 2F 1E 25 41 ; AND accumulator with memory (long) $41251E.l [Writes: Accumulator] [Flags: NZ]
	adc $16.b,X		; 75 16 ; Add $16.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($A0.b,X)		; 21 A0 ; Logical AND ($A0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $59.b,S		; E3 59 ; Subtract stack-relative $59.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	lda $B659.w		; AD 59 B6 ; Load $B659.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $59B4.w,Y		; 59 B4 59 ; Exclusive OR accumulator with memory $59B4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $2B.b,S		; E3 2B ; Subtract stack-relative $2B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor $27B1.w,Y		; 59 B1 27 ; Exclusive OR accumulator with memory $27B1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $7642.w,X		; 1D 42 76 ; OR accumulator with memory $7642.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($1A.b,S),Y		; D3 1A ; Compare accumulator (stack relative indirect indexed) ($1A.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $9E59.w		; 2D 59 9E ; Logical AND $9E59.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $B420.w		; 20 20 B4 ; Jump to subroutine at $B420.w [Writes: Stack Pointer] [Flow: call]
	jsr $593E.w		; 20 3E 59 ; Jump to subroutine at $593E.w [Writes: Stack Pointer] [Flow: call]
	eor $0F.b		; 45 0F ; Exclusive OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $2C2C.w		; CE 2C 2C ; Decrement $2C2C.w [Flags: NZ]
	eor $7ED8.w,Y		; 59 D8 7E ; Exclusive OR accumulator with memory $7ED8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($5E.b,S),Y		; 73 5E ; Add with carry (stack relative indirect indexed) ($5E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $2E01.w,Y		; 59 01 2E ; Exclusive OR accumulator with memory $2E01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $27DA.w		; 2D DA 27 ; Logical AND $27DA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $59DA.w,Y		; 59 DA 59 ; Exclusive OR accumulator with memory $59DA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $4120.w,X		; 9E 20 41 ; Store zero to $4120.w,X [Reads: X Index]
	lsr $7F.b		; 46 7F ; Logical shift right $7F.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $1ED0.w,Y		; 59 D0 1E ; Exclusive OR accumulator with memory $1ED0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($8A.b,X)		; 41 8A ; Exclusive OR accumulator with memory ($8A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	inc $27.b		; E6 27 ; Increment $27.b [Reads: Direct Page] [Flags: NZ]
	eor $5908.w,Y		; 59 08 59 ; Exclusive OR accumulator with memory $5908.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp.w [$8A41]		; DC 41 8A ; Jump long indirect [$8A41] [Flow: jump]
	ora ($1A.b)		; 12 1A ; OR accumulator with memory (indirect) ($1A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $CF751E.l		; 2F 1E 75 CF ; AND accumulator with memory (long) $CF751E.l [Writes: Accumulator] [Flags: NZ]
	eor $DC11.w,Y		; 59 11 DC ; Exclusive OR accumulator with memory $DC11.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $2C1E.w,X		; 1E 1E 2C ; Arithmetic shift left $2C1E.w,X [Reads: X Index] [Flags: NCZ]
	eor $9B8C.w,Y		; 59 8C 9B ; Exclusive OR accumulator with memory $9B8C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $9659.w,X		; 1E 59 96 ; Arithmetic shift left $9659.w,X [Reads: X Index] [Flags: NCZ]
	stz $7F41.w		; 9C 41 7F ; Store zero to $7F41.w
	asl $3E0A.w		; 0E 0A 3E ; Arithmetic shift left $3E0A.w [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($22.b,S),Y		; 13 22 ; OR accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $DC8B.w,Y		; BE 8B DC ; Load X register $DC8B.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	.db $42, $59		; 42 59 ; Reserved instruction
	jsr $BE1A.w		; 20 1A BE ; Jump to subroutine at $BE1A.w [Writes: Stack Pointer] [Flow: call]
	eor $DD28.w,Y		; 59 28 DD ; Exclusive OR accumulator with memory $DD28.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($75.b,X)		; 41 75 ; Exclusive OR accumulator with memory ($75.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $28.b		; 02 28 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $9659.w,Y		; BE 59 96 ; Load X register $9659.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	stz $1A59.w		; 9C 59 1A ; Store zero to $1A59.w
	jsr $418F.w		; 20 8F 41 ; Jump to subroutine at $418F.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $28.b		; 06 28 ; Arithmetic shift left $28.b [Reads: Direct Page] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora $1B59.w,X		; 1D 59 1B ; OR accumulator with memory $1B59.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($1E.b)		; 32 1E ; AND accumulator with memory (indirect) ($1E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $28.b		; 02 28 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $9659.w,Y		; BE 59 96 ; Load X register $9659.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	stz $1A59.w		; 9C 59 1A ; Store zero to $1A59.w
	jsr $3E8F.w		; 20 8F 3E ; Jump to subroutine at $3E8F.w [Writes: Stack Pointer] [Flow: call]
	adc $08.b,X		; 75 08 ; Add $08.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $25E2.w,Y		; 59 E2 25 ; Exclusive OR accumulator with memory $25E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $59.b		; 25 59 ; Logical AND $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$59.b],Y		; 97 59 ; Store accumulator (long indexed) [$59.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp $A8B3B6.l,X		; DF B6 B3 A8 ; Compare accumulator (long,X) $A8B3B6.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	eor $41E3.w,Y		; 59 E3 41 ; Exclusive OR accumulator with memory $41E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $1C5908.l,X		; 7F 08 59 1C ; Add long $1C5908.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($51.b,S),Y		; 93 51 ; Store accumulator (stack relative indirect indexed) ($51.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	and $2D59.w		; 2D 59 2D ; Logical AND $2D59.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $2525.w,X		; 1E 25 25 ; Arithmetic shift left $2525.w,X [Reads: X Index] [Flags: NCZ]
	eor $59E3.w,Y		; 59 E3 59 ; Exclusive OR accumulator with memory $59E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $2D1E.w,X		; 1D 1E 2D ; OR accumulator with memory $2D1E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsl $422C25.l		; 22 25 2C 42 ; Jump to subroutine long $422C25.l [Writes: Stack Pointer] [Flow: call]
	eor $2E1B.w,Y		; 59 1B 2E ; Exclusive OR accumulator with memory $2E1B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $B675.w		; 2D 75 B6 ; Logical AND $B675.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
.INDEX 16
	rep #$59		; C2 59
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $C71C.w,Y		; 59 1C C7 ; Exclusive OR accumulator with memory $C71C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $A322A5.l		; 2F A5 22 A3 ; AND accumulator with memory (long) $A322A5.l [Writes: Accumulator] [Flags: NZ]
	eor $222D.w,Y		; 59 2D 22 ; Exclusive OR accumulator with memory $222D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $A859.w,Y		; BE 59 A8 ; Load X register $A859.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ror $BE.b,X		; 76 BE ; Rotate right $BE.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $2827.w,Y		; 59 27 28 ; Exclusive OR accumulator with memory $2827.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $41		; 30 41 ; Branch if minus to $30, $41 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $28.b		; 02 28 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $9659.w,Y		; BE 59 96 ; Load X register $9659.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	stz $AF59.w		; 9C 59 AF ; Store zero to $AF59.w
	asl $1A59.w,X		; 1E 59 1A ; Arithmetic shift left $1A59.w,X [Reads: X Index] [Flags: NCZ]
	jsr $418F.w		; 20 8F 41 ; Jump to subroutine at $418F.w [Writes: Stack Pointer] [Flow: call]
	ror $1273.w,X		; 7E 73 12 ; Rotate right $1273.w,X [Reads: X Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and ($41.b)		; 32 41 ; AND accumulator with memory (indirect) ($41.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $FFFFFF.l,X		; 7F FF FF FF ; Add long $FFFFFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $58		; D0 58 ; Branch if not equal to $D0, $58 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	ldx #$BF00.w		; A2 00 BF ; Load #$BF00.w into X register [Writes: X Index] [Flags: NZ]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $809F.w,X		; 7E 9F 80 ; Rotate right $809F.w,X [Reads: X Index] [Flags: NCZ]
	cmp $BF7F.w,X		; DD 7F BF ; Compare accumulator $BF7F.w,X [Reads: X Index] [Flags: NCZ]
	.db $80, $C3		; 80 C3 ; Branch always to $80, $C3 [Flow: branch]
	ror $009F.w,X		; 7E 9F 00 ; Rotate right $009F.w,X [Reads: X Index] [Flags: NCZ]
	dec $BF7F.w,X		; DE 7F BF ; Decrement memory $BF7F.w,X [Reads: X Index] [Flags: NZ]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $809F.w,X		; 7E 9F 80 ; Rotate right $809F.w,X [Reads: X Index] [Flags: NCZ]
	dec $BF7F.w,X		; DE 7F BF ; Decrement memory $BF7F.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $C4		; 80 C4 ; Branch always to $80, $C4 [Flow: branch]
	ror $009F.w,X		; 7E 9F 00 ; Rotate right $009F.w,X [Reads: X Index] [Flags: NCZ]
	cmp $FFA97F.l,X		; DF 7F A9 FF ; Compare accumulator (long,X) $FFA97F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	adc $C3009F.l,X		; 7F 9F 00 C3 ; Add long $C3009F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $809F.w,X		; 7E 9F 80 ; Rotate right $809F.w,X [Reads: X Index] [Flags: NCZ]
	cmp $7E.b,S		; C3 7E ; Compare accumulator (stack relative) $7E.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta $7EC400.l,X		; 9F 00 C4 7E ; Store accumulator (long,X) $7EC400.l,X [Reads: Accumulator, X Index]
	sta $7EC480.l,X		; 9F 80 C4 7E ; Store accumulator (long,X) $7EC480.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$D080.w		; E0 80 D0 ; Compare #$D080.w with X register [Reads: X Index] [Flags: NCZ]
	cmp [$AF.b]		; C7 AF ; Compare accumulator (long) [$AF.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $408F.w,X		; 7E 8F 40 ; Rotate right $408F.w,X [Reads: X Index] [Flags: NCZ]
	cmp $7E.b		; C5 7E ; Compare $7E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00EEF1.l		; 22 F1 EE 00 ; Jump to subroutine long $00EEF1.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $21		; D0 21 ; Branch if not equal to $D0, $21 [Flow: branch]
	ldx #$000E.w		; A2 0E 00 ; Load #$000E.w into X register [Writes: X Index] [Flags: NZ]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC3B0.l,X		; 9F B0 C3 7E ; Store accumulator (long,X) $7EC3B0.l,X [Reads: Accumulator, X Index]
	sta $7EC5B0.l,X		; 9F B0 C5 7E ; Store accumulator (long,X) $7EC5B0.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	stz $11.b		; 64 11 ; Store zero to $11.b
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$AF.b],Y		; 57 AF ; Exclusive OR accumulator with memory (long indexed) [$AF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$C0.b]		; 07 C0 ; OR accumulator with memory (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $1FC9.w,X		; 7E C9 1F ; Rotate right $1FC9.w,X [Reads: X Index] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00A2.w		; 4E A2 00 ; Logical shift right $00A2.w [Flags: NCZ]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $DD		; 80 DD ; Branch always to $80, $DD [Flow: branch]
	adc $C3009F.l,X		; 7F 9F 00 C3 ; Add long $C3009F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $C0BF.w,X		; 7E BF C0 ; Rotate right $C0BF.w,X [Reads: X Index] [Flags: NCZ]
	cmp $9F7F.w,X		; DD 7F 9F ; Compare accumulator $9F7F.w,X [Reads: X Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cmp $7E.b,S		; C3 7E ; Compare accumulator (stack relative) $7E.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	lda $7FDE00.l,X		; BF 00 DE 7F ; Load long $7FDE00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC380.l,X		; 9F 80 C3 7E ; Store accumulator (long,X) $7EC380.l,X [Reads: Accumulator, X Index]
	lda $7FDE40.l,X		; BF 40 DE 7F ; Load long $7FDE40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC3C0.l,X		; 9F C0 C3 7E ; Store accumulator (long,X) $7EC3C0.l,X [Reads: Accumulator, X Index]
	lda $7FDE80.l,X		; BF 80 DE 7F ; Load long $7FDE80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC400.l,X		; 9F 00 C4 7E ; Store accumulator (long,X) $7EC400.l,X [Reads: Accumulator, X Index]
	lda $7FDEC0.l,X		; BF C0 DE 7F ; Load long $7FDEC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC440.l,X		; 9F 40 C4 7E ; Store accumulator (long,X) $7EC440.l,X [Reads: Accumulator, X Index]
	lda $7FDF00.l,X		; BF 00 DF 7F ; Load long $7FDF00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC480.l,X		; 9F 80 C4 7E ; Store accumulator (long,X) $7EC480.l,X [Reads: Accumulator, X Index]
	lda $7FDF40.l,X		; BF 40 DF 7F ; Load long $7FDF40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC4C0.l,X		; 9F C0 C4 7E ; Store accumulator (long,X) $7EC4C0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$40.b		; E0 40 ; Compare #$40.b with X register [Reads: X Index] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $20E2.w,Y		; B9 E2 20 ; Load $20E2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	cmp [$0C.b]		; C7 0C ; Compare accumulator (long) [$0C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $4D.b,X		; 15 4D ; OR accumulator with memory $4D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $F6.b,X		; 15 F6 ; OR accumulator with memory $F6.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $D15944.l,X		; 7F 44 59 D1 ; Add long $D15944.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	cmp [$0C.b]		; C7 0C ; Compare accumulator (long) [$0C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $4D.b,X		; 15 4D ; OR accumulator with memory $4D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,X		; 15 FF ; OR accumulator with memory $FF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	cmp ($7A.b),Y		; D1 7A ; Compare accumulator ($7A.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	lda $108421.l		; AF 21 84 10 ; Load long $108421.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$48.b		; C0 48 ; Compare #$48.b with Y register [Reads: Y Index] [Flags: NCZ]
	stx $61.b		; 86 61 ; Store X register to $61.b [Reads: X Index]
	adc $E07E.w		; 6D 7E E0 ; Add $E07E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $205944.l,X		; 7F 44 59 20 ; Add long $205944.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $1084.w,X		; 7E 84 10 ; Rotate right $1084.w,X [Reads: X Index] [Flags: NCZ]
	asl $5900.w		; 0E 00 59 ; Arithmetic shift left $5900.w [Flags: NCZ]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $205944.l,X		; 7F 44 59 20 ; Add long $205944.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $1084.w,X		; 7E 84 10 ; Rotate right $1084.w,X [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $6C.b,X		; 15 6C ; OR accumulator with memory $6C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $21AF.w,Y		; 19 AF 21 ; OR accumulator with memory $21AF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $7F.b,X		; F6 7F ; Increment memory $7F.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	jmp $D11D.w		; 4C 1D D1 ; Jump to $D11D.w [Flow: jump]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sbc $08847F.l,X		; FF 7F 84 08 ; Subtract with carry (long,X) $08847F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	trb $1DCE.w		; 1C CE 1D ; Test and reset bits $1DCE.w [Reads: Accumulator] [Flags: Z]
	sty $36.b,X		; 94 36 ; Store Y register $36.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor [$4A.b]		; 47 4A ; Exclusive OR accumulator with memory (long) [$4A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $18AC.w,X		; 1D AC 18 ; OR accumulator with memory $18AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $19087F.l,X		; FF 7F 08 19 ; Subtract with carry (long,X) $19087F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $36142D.l		; 2F 2D 14 36 ; AND accumulator with memory (long) $36142D.l [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lsr $471F.w		; 4E 1F 47 ; Logical shift right $471F.w [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $390F.w,X		; 1D 0F 39 ; OR accumulator with memory $390F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $34CD7F.l,X		; FF 7F CD 34 ; Subtract with carry (long,X) $34CD7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($59.b),Y		; 71 59 ; Add with carry ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $56.b,X		; 35 56 ; Logical AND $56.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc $4A7FFF.l,X		; 7F FF 7F 4A ; Add long $4A7FFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $3D54.w,X		; 1D 54 3D ; OR accumulator with memory $3D54.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $19087F.l,X		; FF 7F 08 19 ; Subtract with carry (long,X) $19087F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $36142D.l		; 2F 2D 14 36 ; AND accumulator with memory (long) $36142D.l [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lsr $471F.w		; 4E 1F 47 ; Logical shift right $471F.w [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $390F.w,X		; 1D 0F 39 ; OR accumulator with memory $390F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $08847F.l,X		; FF 7F 84 08 ; Subtract with carry (long,X) $08847F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $EF.b		; 05 EF ; Logical OR $EF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($B5.b,X)		; 21 B5 ; Logical AND ($B5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $4C4B.w,Y		; 39 4B 4C ; AND accumulator with memory $4C4B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $18AC.w,X		; 1D AC 18 ; OR accumulator with memory $18AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $04C6.w		; AD C6 04 ; Load $04C6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $FA		; D0 FA ; Branch if not equal to $D0, $FA [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$43.b		; C9 43 ; Compare #$43.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$45.b		; C9 45 ; Compare #$45.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$47.b		; C9 47 ; Compare #$47.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $EC		; D0 EC ; Branch if not equal to $D0, $EC [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $4D		; F0 4D ; Branch if equal to $F0, $4D [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	cmp #$2C.b		; C9 2C ; Compare #$2C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$58.b		; C9 58 ; Compare #$58.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	cmp #$5A.b		; C9 5A ; Compare #$5A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $6A		; D0 6A ; Branch if not equal to $D0, $6A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EC360.l,X		; BF 60 C3 7E ; Load long $7EC360.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC560.l,X		; 9F 60 C5 7E ; Store accumulator (long,X) $7EC560.l,X [Reads: Accumulator, X Index]
	lda $7EC370.l,X		; BF 70 C3 7E ; Load long $7EC370.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC570.l,X		; 9F 70 C5 7E ; Store accumulator (long,X) $7EC570.l,X [Reads: Accumulator, X Index]
	lda $7EC390.l,X		; BF 90 C3 7E ; Load long $7EC390.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC590.l,X		; 9F 90 C5 7E ; Store accumulator (long,X) $7EC590.l,X [Reads: Accumulator, X Index]
	lda $7EC3E0.l,X		; BF E0 C3 7E ; Load long $7EC3E0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC5E0.l,X		; 9F E0 C5 7E ; Store accumulator (long,X) $7EC5E0.l,X [Reads: Accumulator, X Index]
	lda $7EC3F0.l,X		; BF F0 C3 7E ; Load long $7EC3F0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC5F0.l,X		; 9F F0 C5 7E ; Store accumulator (long,X) $7EC5F0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $D2		; D0 D2 ; Branch if not equal to $D0, $D2 [Flow: branch]
	.db $80, $36		; 80 36 ; Branch always to $80, $36 [Flow: branch]
	ldx #$36.b		; A2 36 ; Load #$36.b into X register [Writes: X Index] [Flags: NZ]
	stx $012E.w		; 8E 2E 01 ; Store X register to $012E.w [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $F4EB.w,Y		; B9 EB F4 ; Load $F4EB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC560.l,X		; 9F 60 C5 7E ; Store accumulator (long,X) $7EC560.l,X [Reads: Accumulator, X Index]
	lda $F4F9.w,Y		; B9 F9 F4 ; Load $F4F9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC570.l,X		; 9F 70 C5 7E ; Store accumulator (long,X) $7EC570.l,X [Reads: Accumulator, X Index]
	lda $F507.w,Y		; B9 07 F5 ; Load $F507.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC590.l,X		; 9F 90 C5 7E ; Store accumulator (long,X) $7EC590.l,X [Reads: Accumulator, X Index]
	lda $F515.w,Y		; B9 15 F5 ; Load $F515.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC5E0.l,X		; 9F E0 C5 7E ; Store accumulator (long,X) $7EC5E0.l,X [Reads: Accumulator, X Index]
	lda $F523.w,Y		; B9 23 F5 ; Load $F523.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC5F0.l,X		; 9F F0 C5 7E ; Store accumulator (long,X) $7EC5F0.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $D5		; D0 D5 ; Branch if not equal to $D0, $D5 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$43.b		; C9 43 ; Compare #$43.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$45.b		; C9 45 ; Compare #$45.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $7EF2C3.l		; AF C3 F2 7E ; Load long $7EF2C3.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $F531.w,Y		; B9 31 F5 ; Load $F531.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC5D0.l,X		; 9F D0 C5 7E ; Store accumulator (long,X) $7EC5D0.l,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $EF		; D0 EF ; Branch if not equal to $D0, $EF [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr ($F664.w,X)		; [PATTERN: Memory clearing operation] FC 64 F6 ; Jump to subroutine indirect indexed ($F664.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $F7.b		; 64 F7 ; Store zero to $F7.b
	stz $F7.b		; 64 F7 ; Store zero to $F7.b
	stz $F7.b		; 64 F7 ; Store zero to $F7.b
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sbc [$AA.b],Y		; F7 AA ; Subtract with carry (long indexed) [$AA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$AA.b],Y		; F7 AA ; Subtract with carry (long indexed) [$AA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$AA.b],Y		; F7 AA ; Subtract with carry (long indexed) [$AA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$AA.b],Y		; F7 AA ; Subtract with carry (long indexed) [$AA.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B1.b],Y		; F7 B1 ; Subtract with carry (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B1.b],Y		; F7 B1 ; Subtract with carry (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B1.b],Y		; F7 B1 ; Subtract with carry (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B1.b],Y		; F7 B1 ; Subtract with carry (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B1.b],Y		; F7 B1 ; Subtract with carry (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B1.b],Y		; F7 B1 ; Subtract with carry (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B1.b],Y		; F7 B1 ; Subtract with carry (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B1.b],Y		; F7 B1 ; Subtract with carry (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B1.b],Y		; F7 B1 ; Subtract with carry (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B1.b],Y		; F7 B1 ; Subtract with carry (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B1.b],Y		; F7 B1 ; Subtract with carry (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B1.b],Y		; F7 B1 ; Subtract with carry (long indexed) [$B1.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$C7.b],Y		; F7 C7 ; Subtract with carry (long indexed) [$C7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$E4.b],Y		; F7 E4 ; Subtract with carry (long indexed) [$E4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$E4.b],Y		; F7 E4 ; Subtract with carry (long indexed) [$E4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$E4.b],Y		; F7 E4 ; Subtract with carry (long indexed) [$E4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$E4.b],Y		; F7 E4 ; Subtract with carry (long indexed) [$E4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$E4.b],Y		; F7 E4 ; Subtract with carry (long indexed) [$E4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$FE.b],Y		; F7 FE ; Subtract with carry (long indexed) [$FE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$FE.b],Y		; F7 FE ; Subtract with carry (long indexed) [$FE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$FE.b],Y		; F7 FE ; Subtract with carry (long indexed) [$FE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$27.b],Y		; F7 27 ; Subtract with carry (long indexed) [$27.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx $F7.b		; E4 F7 ; Compare $F7.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $F7.b		; E4 F7 ; Compare $F7.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $FEF7.w,X		; FE F7 FE ; Increment memory $FEF7.w,X [Reads: X Index] [Flags: NZ]
	sbc [$27.b],Y		; F7 27 ; Subtract with carry (long indexed) [$27.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $2DF8.w		; 2D F8 2D ; Logical AND $2DF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $2DF8.w		; 2D F8 2D ; Logical AND $2DF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $2DF8.w		; 2D F8 2D ; Logical AND $2DF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and ($F8.b,S),Y		; 33 F8 ; AND accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($F8.b,S),Y		; 33 F8 ; AND accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($F8.b,S),Y		; 33 F8 ; AND accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($F8.b,S),Y		; 33 F8 ; AND accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($F8.b,S),Y		; 33 F8 ; AND accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($F8.b,S),Y		; 33 F8 ; AND accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $2DF8.w		; 2D F8 2D ; Logical AND $2DF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $3FF8.w,Y		; 39 F8 3F ; AND accumulator with memory $3FF8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc $F9.b		; E6 F9 ; Increment $F9.b [Reads: Direct Page] [Flags: NZ]
	inc $F9.b		; E6 F9 ; Increment $F9.b [Reads: Direct Page] [Flags: NZ]
	inc $F9.b		; E6 F9 ; Increment $F9.b [Reads: Direct Page] [Flags: NZ]
	inc $F9.b		; E6 F9 ; Increment $F9.b [Reads: Direct Page] [Flags: NZ]
	inc $F9.b		; E6 F9 ; Increment $F9.b [Reads: Direct Page] [Flags: NZ]
	inc $F9.b		; E6 F9 ; Increment $F9.b [Reads: Direct Page] [Flags: NZ]
	rol $2EFA.w		; 2E FA 2E ; Rotate left $2EFA.w [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rol $5BFA.w		; 2E FA 5B ; Rotate left $5BFA.w [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	adc ($FA.b,X)		; 61 FA ; Add with carry ($FA.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $F9.b		; E6 F9 ; Increment $F9.b [Reads: Direct Page] [Flags: NZ]
	inc $F9.b		; E6 F9 ; Increment $F9.b [Reads: Direct Page] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	rol $2EFA.w		; 2E FA 2E ; Rotate left $2EFA.w [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	cmp $FACFFA.l		; CF FA CF FA ; Compare accumulator (long) $FACFFA.l [Reads: Accumulator] [Flags: NCZ]
	cmp $FAF6FA.l		; CF FA F6 FA ; Compare accumulator (long) $FAF6FA.l [Reads: Accumulator] [Flags: NCZ]
	inc $FA.b,X		; F6 FA ; Increment memory $FA.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $FA.b,X		; F6 FA ; Increment memory $FA.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $FA.b,X		; B4 FA ; Load Y register $FA.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cmp $FACFFA.l		; CF FA CF FA ; Compare accumulator (long) $FACFFA.l [Reads: Accumulator] [Flags: NCZ]
	ora ($FB.b),Y		; 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $FA.b,X		; F6 FA ; Increment memory $FA.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $FA.b,X		; F6 FA ; Increment memory $FA.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora ($FB.b),Y		; 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FB.b),Y		; 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FB.b),Y		; 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($FB.b),Y		; 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FB.b),Y		; 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FB.b),Y		; 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FB.b),Y		; [PATTERN: Memory clearing operation] 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FB.b),Y		; 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FB.b),Y		; 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $FB.b		; 64 FB ; Store zero to $FB.b
	stz $FB.b		; 64 FB ; Store zero to $FB.b
	stz $FB.b		; [PATTERN: Memory clearing operation] 64 FB ; Store zero to $FB.b
	stz $FB.b		; 64 FB ; Store zero to $FB.b
	stz $FB.b		; 64 FB ; Store zero to $FB.b
	and ($F8.b,S),Y		; 33 F8 ; AND accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($FB.b),Y		; 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FB.b),Y		; [PATTERN: Memory clearing operation] 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $FB.b		; 64 FB ; Store zero to $FB.b
	and $FB64F8.l,X		; 3F F8 64 FB ; AND accumulator with memory (long,X) $FB64F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $FB.b		; 64 FB ; Store zero to $FB.b
	stz $FB.b		; 64 FB ; Store zero to $FB.b
	stz $FB.b		; 64 FB ; Store zero to $FB.b
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $168D.w		; 0E 8D 16 ; Arithmetic shift left $168D.w [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sta $2818.w		; 8D 18 28 ; Store accumulator to $2818.w [Reads: Accumulator]
	sta $281A.w		; 8D 1A 28 ; Store accumulator to $281A.w [Reads: Accumulator]
	sta $281C.w		; 8D 1C 28 ; Store accumulator to $281C.w [Reads: Accumulator]
	sta $2896.w		; 8D 96 28 ; Store accumulator to $2896.w [Reads: Accumulator]
	sta $289C.w		; 8D 9C 28 ; Store accumulator to $289C.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2898.w		; 8D 98 28 ; Store accumulator to $2898.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $289A.w		; 8D 9A 28 ; Store accumulator to $289A.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2916.w		; 8D 16 29 ; Store accumulator to $2916.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2918.w		; 8D 18 29 ; Store accumulator to $2918.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $291A.w		; 8D 1A 29 ; Store accumulator to $291A.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $291C.w		; 8D 1C 29 ; Store accumulator to $291C.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2996.w		; 8D 96 29 ; Store accumulator to $2996.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2998.w		; 8D 98 29 ; Store accumulator to $2998.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $299A.w		; 8D 9A 29 ; Store accumulator to $299A.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $299C.w		; 8D 9C 29 ; Store accumulator to $299C.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2A18.w		; 8D 18 2A ; Store accumulator to $2A18.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2A1A.w		; 8D 1A 2A ; Store accumulator to $2A1A.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cop $8D.b		; 02 8D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $6027.w		; 20 27 60 ; Jump to subroutine at $6027.w [Writes: Stack Pointer] [Flow: call]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora #$9D.b		; 09 9D ; Logical OR #$9D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2002.w,X		; 9D 02 20 ; Store accumulator to $2002.w,X [Reads: Accumulator, X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2080.w,X		; 9D 80 20 ; Store accumulator to $2080.w,X [Reads: Accumulator, X Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2082.w,X		; 9D 82 20 ; Store accumulator to $2082.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$D1.b		; A9 D1 ; Load #$D1.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $328D.w		; 0D 8D 32 ; Logical OR $328D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $1A.b		; 25 1A ; Logical AND $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2534.w		; 8D 34 25 ; Store accumulator to $2534.w [Reads: Accumulator]
	lda #$D7.b		; A9 D7 ; Load #$D7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $B28D.w		; 0D 8D B2 ; Logical OR $B28D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $1A.b		; 25 1A ; Logical AND $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $25B4.w		; 8D B4 25 ; Store accumulator to $25B4.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2632.w		; 8D 32 26 ; Store accumulator to $2632.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2634.w		; 8D 34 26 ; Store accumulator to $2634.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $3E8D.w		; 0E 8D 3E ; Arithmetic shift left $3E8D.w [Flags: NCZ]
	bit $428D.w		; 2C 8D 42 ; Test bits $428D.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $8D1A.w		; 2C 1A 8D ; Test bits $8D1A.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	bit $8D1A.w		; 2C 1A 8D ; Test bits $8D1A.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ldx $1A2C.w,Y		; BE 2C 1A ; Load X register $1A2C.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sta $2CC0.w		; 8D C0 2C ; Store accumulator to $2CC0.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2CC2.w		; 8D C2 2C ; Store accumulator to $2CC2.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$C1.b		; A9 C1 ; Load #$C1.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $BC8D.w		; 0D 8D BC ; Logical OR $BC8D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($1A.b,S),Y		; 33 1A ; AND accumulator (stack relative indirect indexed) ($1A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $33BE.w		; 8D BE 33 ; Store accumulator to $33BE.w [Reads: Accumulator]
	lda #$BE.b		; A9 BE ; Load #$BE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $3C8D.w		; 0D 8D 3C ; Logical OR $3C8D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $1A.b,X		; 34 1A ; Test bits $1A.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sta $343E.w		; 8D 3E 34 ; Store accumulator to $343E.w [Reads: Accumulator]
	lda #$C2.b		; A9 C2 ; Load #$C2.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $C08D.w		; 0D 8D C0 ; Logical OR $C08D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and ($1A.b,S),Y		; 33 1A ; AND accumulator (stack relative indirect indexed) ($1A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $33C2.w		; 8D C2 33 ; Store accumulator to $33C2.w [Reads: Accumulator]
	lda #$BF.b		; A9 BF ; Load #$BF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $408D.w		; 0D 8D 40 ; Logical OR $408D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $1A.b,X		; 34 1A ; Test bits $1A.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sta $3442.w		; 8D 42 34 ; Store accumulator to $3442.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$30.b		; A2 30 ; Load #$30.b into X register [Writes: X Index] [Flags: NZ]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $F7.b,X		; B4 F7 ; Load Y register $F7.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldx #$58.b		; A2 58 ; Load #$58.b into X register [Writes: X Index] [Flags: NZ]
	ora $4C.b,S		; 03 4C ; OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $F7.b,X		; B4 F7 ; Load Y register $F7.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	tsb $4C.b		; 04 4C ; Test and set bits $4C.b [Reads: Accumulator] [Flags: Z]
	ldy $F7.b,X		; B4 F7 ; Load Y register $F7.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldx #$1E.b		; A2 1E ; Load #$1E.b into X register [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jmp $F7B4.w		; 4C B4 F7 ; Jump to $F7B4.w [Flow: jump]
	lda #$DF.b		; A9 DF ; Load #$DF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $AC8D.w		; 0D 8D AC ; Logical OR $AC8D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $8D.b,S		; 23 8D ; AND accumulator with stack relative $8D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta $24A0.w		; 8D A0 24 ; Store accumulator to $24A0.w [Reads: Accumulator]
	sta $251E.w		; 8D 1E 25 ; Store accumulator to $251E.w [Reads: Accumulator]
	sta $261C.w		; 8D 1C 26 ; Store accumulator to $261C.w [Reads: Accumulator]
	sta $2734.w		; 8D 34 27 ; Store accumulator to $2734.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $23AE.w		; 8D AE 23 ; Store accumulator to $23AE.w [Reads: Accumulator]
	sta $24A2.w		; 8D A2 24 ; Store accumulator to $24A2.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $23B0.w		; 8D B0 23 ; Store accumulator to $23B0.w [Reads: Accumulator]
	sta $2438.w		; 8D 38 24 ; Store accumulator to $2438.w [Reads: Accumulator]
	sta $24BA.w		; 8D BA 24 ; Store accumulator to $24BA.w [Reads: Accumulator]
	sta $25AA.w		; 8D AA 25 ; Store accumulator to $25AA.w [Reads: Accumulator]
	sta $273A.w		; 8D 3A 27 ; Store accumulator to $273A.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2426.w		; 8D 26 24 ; Store accumulator to $2426.w [Reads: Accumulator]
	sta $2428.w		; 8D 28 24 ; Store accumulator to $2428.w [Reads: Accumulator]
	sta $242A.w		; 8D 2A 24 ; Store accumulator to $242A.w [Reads: Accumulator]
	sta $2432.w		; 8D 32 24 ; Store accumulator to $2432.w [Reads: Accumulator]
	sta $2434.w		; 8D 34 24 ; Store accumulator to $2434.w [Reads: Accumulator]
	sta $2436.w		; 8D 36 24 ; Store accumulator to $2436.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $242C.w		; 8D 2C 24 ; Store accumulator to $242C.w [Reads: Accumulator]
	sta $24A4.w		; 8D A4 24 ; Store accumulator to $24A4.w [Reads: Accumulator]
	sta $2520.w		; 8D 20 25 ; Store accumulator to $2520.w [Reads: Accumulator]
	sta $261E.w		; 8D 1E 26 ; Store accumulator to $261E.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $242E.w		; 8D 2E 24 ; Store accumulator to $242E.w [Reads: Accumulator]
	sta $24A6.w		; 8D A6 24 ; Store accumulator to $24A6.w [Reads: Accumulator]
	sta $24A8.w		; 8D A8 24 ; Store accumulator to $24A8.w [Reads: Accumulator]
	sta $24B0.w		; 8D B0 24 ; Store accumulator to $24B0.w [Reads: Accumulator]
	sta $24B6.w		; 8D B6 24 ; Store accumulator to $24B6.w [Reads: Accumulator]
	sta $2522.w		; 8D 22 25 ; Store accumulator to $2522.w [Reads: Accumulator]
	sta $2524.w		; 8D 24 25 ; Store accumulator to $2524.w [Reads: Accumulator]
	sta $2526.w		; 8D 26 25 ; Store accumulator to $2526.w [Reads: Accumulator]
	sta $2538.w		; 8D 38 25 ; Store accumulator to $2538.w [Reads: Accumulator]
	sta $25A0.w		; 8D A0 25 ; Store accumulator to $25A0.w [Reads: Accumulator]
	sta $25A2.w		; 8D A2 25 ; Store accumulator to $25A2.w [Reads: Accumulator]
	sta $25A4.w		; 8D A4 25 ; Store accumulator to $25A4.w [Reads: Accumulator]
	sta $25A6.w		; 8D A6 25 ; Store accumulator to $25A6.w [Reads: Accumulator]
	sta $2620.w		; 8D 20 26 ; Store accumulator to $2620.w [Reads: Accumulator]
	sta $2622.w		; 8D 22 26 ; Store accumulator to $2622.w [Reads: Accumulator]
	sta $269E.w		; 8D 9E 26 ; Store accumulator to $269E.w [Reads: Accumulator]
	sta $26A0.w		; 8D A0 26 ; Store accumulator to $26A0.w [Reads: Accumulator]
	sta $271E.w		; 8D 1E 27 ; Store accumulator to $271E.w [Reads: Accumulator]
	sta $2720.w		; 8D 20 27 ; Store accumulator to $2720.w [Reads: Accumulator]
	sta $2826.w		; 8D 26 28 ; Store accumulator to $2826.w [Reads: Accumulator]
	sta $28A6.w		; 8D A6 28 ; Store accumulator to $28A6.w [Reads: Accumulator]
	sta $28A8.w		; 8D A8 28 ; Store accumulator to $28A8.w [Reads: Accumulator]
	sta $2926.w		; 8D 26 29 ; Store accumulator to $2926.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2430.w		; 8D 30 24 ; Store accumulator to $2430.w [Reads: Accumulator]
	sta $24B8.w		; 8D B8 24 ; Store accumulator to $24B8.w [Reads: Accumulator]
	sta $25A8.w		; 8D A8 25 ; Store accumulator to $25A8.w [Reads: Accumulator]
	sta $262A.w		; 8D 2A 26 ; Store accumulator to $262A.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $24AA.w		; 8D AA 24 ; Store accumulator to $24AA.w [Reads: Accumulator]
	sta $24B2.w		; 8D B2 24 ; Store accumulator to $24B2.w [Reads: Accumulator]
	sta $2528.w		; 8D 28 25 ; Store accumulator to $2528.w [Reads: Accumulator]
	sta $25B8.w		; 8D B8 25 ; Store accumulator to $25B8.w [Reads: Accumulator]
	sta $28AA.w		; 8D AA 28 ; Store accumulator to $28AA.w [Reads: Accumulator]
	sta $2928.w		; 8D 28 29 ; Store accumulator to $2928.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $24AC.w		; 8D AC 24 ; Store accumulator to $24AC.w [Reads: Accumulator]
	sta $2530.w		; 8D 30 25 ; Store accumulator to $2530.w [Reads: Accumulator]
	sta $279E.w		; 8D 9E 27 ; Store accumulator to $279E.w [Reads: Accumulator]
	sta $27A0.w		; 8D A0 27 ; Store accumulator to $27A0.w [Reads: Accumulator]
	sta $29A6.w		; 8D A6 29 ; Store accumulator to $29A6.w [Reads: Accumulator]
	sta $29B8.w		; 8D B8 29 ; Store accumulator to $29B8.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $24AE.w		; 8D AE 24 ; Store accumulator to $24AE.w [Reads: Accumulator]
	sta $24B4.w		; 8D B4 24 ; Store accumulator to $24B4.w [Reads: Accumulator]
	sta $2536.w		; 8D 36 25 ; Store accumulator to $2536.w [Reads: Accumulator]
	sta $27A2.w		; 8D A2 27 ; Store accumulator to $27A2.w [Reads: Accumulator]
	sta $2824.w		; 8D 24 28 ; Store accumulator to $2824.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $252E.w		; 8D 2E 25 ; Store accumulator to $252E.w [Reads: Accumulator]
	sta $2534.w		; 8D 34 25 ; Store accumulator to $2534.w [Reads: Accumulator]
	sta $279C.w		; 8D 9C 27 ; Store accumulator to $279C.w [Reads: Accumulator]
	sta $2822.w		; 8D 22 28 ; Store accumulator to $2822.w [Reads: Accumulator]
	sta $2934.w		; 8D 34 29 ; Store accumulator to $2934.w [Reads: Accumulator]
	sta $29B6.w		; 8D B6 29 ; Store accumulator to $29B6.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $253A.w		; 8D 3A 25 ; Store accumulator to $253A.w [Reads: Accumulator]
	sta $2638.w		; 8D 38 26 ; Store accumulator to $2638.w [Reads: Accumulator]
	sta $26B8.w		; 8D B8 26 ; Store accumulator to $26B8.w [Reads: Accumulator]
	sta $293A.w		; 8D 3A 29 ; Store accumulator to $293A.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $259E.w		; 8D 9E 25 ; Store accumulator to $259E.w [Reads: Accumulator]
	sta $25B6.w		; 8D B6 25 ; Store accumulator to $25B6.w [Reads: Accumulator]
	sta $2636.w		; 8D 36 26 ; Store accumulator to $2636.w [Reads: Accumulator]
	sta $269C.w		; 8D 9C 26 ; Store accumulator to $269C.w [Reads: Accumulator]
	sta $26B6.w		; 8D B6 26 ; Store accumulator to $26B6.w [Reads: Accumulator]
	sta $271C.w		; 8D 1C 27 ; Store accumulator to $271C.w [Reads: Accumulator]
	sta $28A4.w		; 8D A4 28 ; Store accumulator to $28A4.w [Reads: Accumulator]
	sta $2924.w		; 8D 24 29 ; Store accumulator to $2924.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2624.w		; 8D 24 26 ; Store accumulator to $2624.w [Reads: Accumulator]
	sta $26A2.w		; 8D A2 26 ; Store accumulator to $26A2.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2626.w		; 8D 26 26 ; Store accumulator to $2626.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2628.w		; 8D 28 26 ; Store accumulator to $2628.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $26A4.w		; 8D A4 26 ; Store accumulator to $26A4.w [Reads: Accumulator]
	sta $27B6.w		; 8D B6 27 ; Store accumulator to $27B6.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $26A6.w		; 8D A6 26 ; Store accumulator to $26A6.w [Reads: Accumulator]
	sta $2726.w		; 8D 26 27 ; Store accumulator to $2726.w [Reads: Accumulator]
	sta $2728.w		; 8D 28 27 ; Store accumulator to $2728.w [Reads: Accumulator]
	sta $272A.w		; 8D 2A 27 ; Store accumulator to $272A.w [Reads: Accumulator]
	sta $27AA.w		; 8D AA 27 ; Store accumulator to $27AA.w [Reads: Accumulator]
	sta $2836.w		; 8D 36 28 ; Store accumulator to $2836.w [Reads: Accumulator]
	sta $2838.w		; 8D 38 28 ; Store accumulator to $2838.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $26A8.w		; 8D A8 26 ; Store accumulator to $26A8.w [Reads: Accumulator]
	sta $27B8.w		; 8D B8 27 ; Store accumulator to $27B8.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $26AA.w		; 8D AA 26 ; Store accumulator to $26AA.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2722.w		; 8D 22 27 ; Store accumulator to $2722.w [Reads: Accumulator]
	sta $27A4.w		; 8D A4 27 ; Store accumulator to $27A4.w [Reads: Accumulator]
	sta $2828.w		; 8D 28 28 ; Store accumulator to $2828.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2724.w		; 8D 24 27 ; Store accumulator to $2724.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $27A6.w		; 8D A6 27 ; Store accumulator to $27A6.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $27A8.w		; 8D A8 27 ; Store accumulator to $27A8.w [Reads: Accumulator]
	sta $28B6.w		; 8D B6 28 ; Store accumulator to $28B6.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $27B4.w		; 8D B4 27 ; Store accumulator to $27B4.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $27BA.w		; 8D BA 27 ; Store accumulator to $27BA.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $282A.w		; 8D 2A 28 ; Store accumulator to $282A.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2834.w		; 8D 34 28 ; Store accumulator to $2834.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $283A.w		; 8D 3A 28 ; Store accumulator to $283A.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $28B4.w		; 8D B4 28 ; Store accumulator to $28B4.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $28B8.w		; 8D B8 28 ; Store accumulator to $28B8.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $28BA.w		; 8D BA 28 ; Store accumulator to $28BA.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2936.w		; 8D 36 29 ; Store accumulator to $2936.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2938.w		; 8D 38 29 ; Store accumulator to $2938.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $252A.w		; 8D 2A 25 ; Store accumulator to $252A.w [Reads: Accumulator]
	sta $2532.w		; 8D 32 25 ; Store accumulator to $2532.w [Reads: Accumulator]
	sta $292A.w		; 8D 2A 29 ; Store accumulator to $292A.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $25BA.w		; 8D BA 25 ; Store accumulator to $25BA.w [Reads: Accumulator]
	sta $29A8.w		; 8D A8 29 ; Store accumulator to $29A8.w [Reads: Accumulator]
	sta $29BA.w		; 8D BA 29 ; Store accumulator to $29BA.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $29A4.w		; 8D A4 29 ; Store accumulator to $29A4.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2736.w		; 8D 36 27 ; Store accumulator to $2736.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2738.w		; 8D 38 27 ; Store accumulator to $2738.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $908D.w		; 0E 8D 90 ; Arithmetic shift left $908D.w [Flags: NCZ]
	and $1A.b		; 25 1A ; Logical AND $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2596.w		; 8D 96 25 ; Store accumulator to $2596.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2610.w		; 8D 10 26 ; Store accumulator to $2610.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2612.w		; 8D 12 26 ; Store accumulator to $2612.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2614.w		; 8D 14 26 ; Store accumulator to $2614.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2616.w		; 8D 16 26 ; Store accumulator to $2616.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2692.w		; 8D 92 26 ; Store accumulator to $2692.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2694.w		; 8D 94 26 ; Store accumulator to $2694.w [Reads: Accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $128D.w		; 0E 8D 12 ; Arithmetic shift left $128D.w [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sta $2814.w		; 8D 14 28 ; Store accumulator to $2814.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2710.w		; 8D 10 27 ; Store accumulator to $2710.w [Reads: Accumulator]
	sta $2790.w		; 8D 90 27 ; Store accumulator to $2790.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2712.w		; 8D 12 27 ; Store accumulator to $2712.w [Reads: Accumulator]
	sta $2792.w		; 8D 92 27 ; Store accumulator to $2792.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2714.w		; 8D 14 27 ; Store accumulator to $2714.w [Reads: Accumulator]
	sta $2794.w		; 8D 94 27 ; Store accumulator to $2794.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2716.w		; 8D 16 27 ; Store accumulator to $2716.w [Reads: Accumulator]
	sta $2796.w		; 8D 96 27 ; Store accumulator to $2796.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$96.b		; A9 96 ; Load #$96.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $5E8F.w		; 0E 8F 5E ; Arithmetic shift left $5E8F.w [Flags: NCZ]
	bit $7E.b		; 24 7E ; Test bits $7E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2460.l		; 8F 60 24 7E ; Store accumulator (long) $7E2460.l [Reads: Accumulator]
	lda #$9C.b		; A9 9C ; Load #$9C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $DE8F.w		; 0E 8F DE ; Arithmetic shift left $DE8F.w [Flags: NCZ]
	bit $7E.b		; 24 7E ; Test bits $7E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta $7E255E.l		; 8F 5E 25 7E ; Store accumulator (long) $7E255E.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E24E0.l		; 8F E0 24 7E ; Store accumulator (long) $7E24E0.l [Reads: Accumulator]
	sta $7E2560.l		; 8F 60 25 7E ; Store accumulator (long) $7E2560.l [Reads: Accumulator]
	lda #$9A.b		; A9 9A ; Load #$9A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $DE8F.w		; 0E 8F DE ; Arithmetic shift left $DE8F.w [Flags: NCZ]
	and $7E.b		; 25 7E ; Logical AND $7E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E25E0.l		; 8F E0 25 7E ; Store accumulator (long) $7E25E0.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$68.b		; A2 68 ; Load #$68.b into X register [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jmp $F7B4.w		; 4C B4 F7 ; Jump to $F7B4.w [Flow: jump]
	lda #$78.b		; A9 78 ; Load #$78.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $9E8F.w		; 0E 8F 9E ; Arithmetic shift left $9E8F.w [Flags: NCZ]
	and #$7E.b		; 29 7E ; Logical AND #$7E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E29A0.l		; 8F A0 29 7E ; Store accumulator (long) $7E29A0.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E29A2.l		; 8F A2 29 7E ; Store accumulator (long) $7E29A2.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E29A4.l		; 8F A4 29 7E ; Store accumulator (long) $7E29A4.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2A1E.l		; 8F 1E 2A 7E ; Store accumulator (long) $7E2A1E.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2A20.l		; 8F 20 2A 7E ; Store accumulator (long) $7E2A20.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2A22.l		; 8F 22 2A 7E ; Store accumulator (long) $7E2A22.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2A24.l		; 8F 24 2A 7E ; Store accumulator (long) $7E2A24.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2A9E.l		; 8F 9E 2A 7E ; Store accumulator (long) $7E2A9E.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2AA0.l		; 8F A0 2A 7E ; Store accumulator (long) $7E2AA0.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2AA2.l		; 8F A2 2A 7E ; Store accumulator (long) $7E2AA2.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2AA4.l		; 8F A4 2A 7E ; Store accumulator (long) $7E2AA4.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2B1E.l		; 8F 1E 2B 7E ; Store accumulator (long) $7E2B1E.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2B20.l		; 8F 20 2B 7E ; Store accumulator (long) $7E2B20.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2B22.l		; 8F 22 2B 7E ; Store accumulator (long) $7E2B22.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7E2B24.l		; 8F 24 2B 7E ; Store accumulator (long) $7E2B24.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $3E8D.w		; 0E 8D 3E ; Arithmetic shift left $3E8D.w [Flags: NCZ]
	and $8D1A.w		; 2D 1A 8D ; Logical AND $8D1A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $8D1A.w		; 2D 1A 8D ; Logical AND $8D1A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $1A2D.w,Y		; BE 2D 1A ; Load X register $1A2D.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sta $2DC0.w		; 8D C0 2D ; Store accumulator to $2DC0.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2E3E.w		; 8D 3E 2E ; Store accumulator to $2E3E.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2E40.w		; 8D 40 2E ; Store accumulator to $2E40.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$3F.b		; A9 3F ; Load #$3F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $BC8D.w		; 0E 8D BC ; Arithmetic shift left $BC8D.w [Flags: NCZ]
	and $1A.b,S		; 23 1A ; AND accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $23BE.w		; 8D BE 23 ; Store accumulator to $23BE.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $23C0.w		; 8D C0 23 ; Store accumulator to $23C0.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $243C.w		; 8D 3C 24 ; Store accumulator to $243C.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $243E.w		; 8D 3E 24 ; Store accumulator to $243E.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2440.w		; 8D 40 24 ; Store accumulator to $2440.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $24BC.w		; 8D BC 24 ; Store accumulator to $24BC.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $24BE.w		; 8D BE 24 ; Store accumulator to $24BE.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $24C0.w		; 8D C0 24 ; Store accumulator to $24C0.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $E68D.w		; 0E 8D E6 ; Arithmetic shift left $E68D.w [Flags: NCZ]
	and ($A9.b,X)		; 21 A9 ; Logical AND ($A9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $8D0E.w		; 2D 0E 8D ; Logical AND $8D0E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsl $EA8D1A.l		; 22 1A 8D EA ; Jump to subroutine long $EA8D1A.l [Writes: Stack Pointer] [Flow: call]
	jsl $6A8D1A.l		; 22 1A 8D 6A ; Jump to subroutine long $6A8D1A.l [Writes: Stack Pointer] [Flow: call]
	and $60.b,S		; 23 60 ; AND accumulator with stack relative $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx #$20.b		; A2 20 ; Load #$20.b into X register [Writes: X Index] [Flags: NZ]
	ora $B44C.w		; 0D 4C B4 ; Logical OR $B44C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc [$A9.b],Y		; F7 A9 ; Subtract with carry (long indexed) [$A9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	sta $2522.w		; 8D 22 25 ; Store accumulator to $2522.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2524.w		; 8D 24 25 ; Store accumulator to $2524.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2526.w		; 8D 26 25 ; Store accumulator to $2526.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2528.w		; 8D 28 25 ; Store accumulator to $2528.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $25A2.w		; 8D A2 25 ; Store accumulator to $25A2.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $25A4.w		; 8D A4 25 ; Store accumulator to $25A4.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $25A6.w		; 8D A6 25 ; Store accumulator to $25A6.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $25A8.w		; 8D A8 25 ; Store accumulator to $25A8.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2622.w		; 8D 22 26 ; Store accumulator to $2622.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2624.w		; 8D 24 26 ; Store accumulator to $2624.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2626.w		; 8D 26 26 ; Store accumulator to $2626.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2628.w		; 8D 28 26 ; Store accumulator to $2628.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $26A2.w		; 8D A2 26 ; Store accumulator to $26A2.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $26A4.w		; 8D A4 26 ; Store accumulator to $26A4.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $26A6.w		; 8D A6 26 ; Store accumulator to $26A6.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $26A8.w		; 8D A8 26 ; Store accumulator to $26A8.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2722.w		; 8D 22 27 ; Store accumulator to $2722.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2724.w		; 8D 24 27 ; Store accumulator to $2724.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2726.w		; 8D 26 27 ; Store accumulator to $2726.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $2728.w		; 8D 28 27 ; Store accumulator to $2728.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 077FFC. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 077FFD. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 077FFE. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 077FFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.ENDS
