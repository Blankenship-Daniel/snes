.BANK 19 SLOT 0
.ORG $0000

.SECTION "Bank19" FORCE

	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $37E0FF.l,X		; 7F FF E0 37 ; Add long $37E0FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$3B.b]		; 27 3B ; AND accumulator with memory (long) [$3B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $42, $83		; 42 83 ; Reserved instruction
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $42, $03		; 42 03 ; Reserved instruction
	ldx $9E83.w,Y		; BE 83 9E ; Load X register $9E83.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sta $6E.b,S		; 83 6E ; Store accumulator (stack relative) $6E.b,S [Reads: Stack Pointer, Accumulator]
	adc $BE.b,S		; 63 BE ; Add with carry (stack relative) $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and $8421E0.l,X		; 3F E0 21 84 ; AND accumulator with memory (long,X) $8421E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy $FC.b		; C4 FC ; Compare $FC.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	jmp ($9C7C.w,X)		; 7C 7C 9C ; Jump indirect indexed to ($9C7C.w,X) [Reads: X Index] [Flow: jump]
	cpy #$D71E.w		; C0 1E D7 ; Compare #$D71E.w with Y register [Reads: Y Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp ($5C.b,S),Y		; D3 5C ; Compare accumulator (stack relative indirect indexed) ($5C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp $EF5E.w,Y		; D9 5E EF ; Compare accumulator $EF5E.w,Y [Reads: Y Index] [Flags: NCZ]
	adc $DF70B0.l		; 6F B0 70 DF ; Add with carry (long) $DF70B0.l [Writes: Accumulator] [Flags: NCVZ]
	and $3F9F60.l,X		; 3F 60 9F 3F ; AND accumulator with memory (long,X) $3F9F60.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$2022.w		; C0 22 20 ; Compare #$2022.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $130022.l		; 0F 22 00 13 ; OR accumulator with memory (long) $130022.l [Writes: Accumulator] [Flags: NZ]
	jsr ($F603.w,X)		; FC 03 F6 ; Jump to subroutine indirect indexed ($F603.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $1C1B.w,Y		; 79 1B 1C ; Add $1C1B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $35EE.w		; ED EE 35 ; Subtract $35EE.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inc $95.b,X		; F6 95 ; Increment memory $95.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ror $D5.b,X		; 76 D5 ; Rotate right $D5.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $F5.b,X		; 36 F5 ; Rotate left $F5.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $840022.l,X		; FF 22 00 84 ; Subtract with carry (long,X) $840022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$2202.w		; 29 02 22 ; Logical AND #$2202.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $00.b,Y		; B6 00 ; Load X register $00.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FF1300.l		; 22 00 13 FF ; Jump to subroutine long $FF1300.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $C381.w,X		; 7E 81 C3 ; Rotate right $C381.w,X [Reads: X Index] [Flags: NCZ]
	ror $7EA5.w,X		; 7E A5 7E ; Rotate right $7EA5.w,X [Reads: X Index] [Flags: NCZ]
	lda $7E.b,S		; A3 7E ; Load accumulator (stack relative) $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit #$A17E.w		; 89 7E A1 ; Test bits #$A17E.w with accumulator [Reads: Accumulator] [Flags: Z]
	ror $7EC3.w,X		; 7E C3 7E ; Rotate right $7EC3.w,X [Reads: X Index] [Flags: NCZ]
	ror $0081.w,X		; 7E 81 00 ; Rotate right $0081.w,X [Reads: X Index] [Flags: NCZ]
	and $7E.b		; 25 7E ; Logical AND $7E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx $30.b		; E4 30 ; Compare $30.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFCFF.l,X		; FF FF FC FF ; Subtract with carry (long,X) $FFFCFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	cpx #$FF44.w		; E0 44 FF ; Compare #$FF44.w with X register [Reads: X Index] [Flags: NCZ]
	cpy #$8102.w		; C0 02 81 ; Compare #$8102.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FF2883.l,X		; FF 83 28 FF ; Subtract with carry (long,X) $FF2883.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2E7FFF.l,X		; 1F FF 7F 2E ; Logical OR long $2E7FFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $448700.l,X		; FF 00 87 44 ; Subtract with carry (long,X) $448700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1F430F.l,X		; FF 0F 43 1F ; Subtract with carry (long,X) $1F430F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF3F43.l,X		; FF 43 3F FF ; Subtract with carry (long,X) $FF3F43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $43FF.w		; 2C FF 43 ; Test bits $43FF.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	inc $06FF.w,X		; FE FF 06 ; Increment memory $06FF.w,X [Reads: X Index] [Flags: NZ]
	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $C0FFF0.l,X		; FF F0 FF C0 ; Subtract with carry (long,X) $C0FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $43FD11.l,X		; FF 11 FD 43 ; Subtract with carry (long,X) $43FD11.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	mvp $6D,$D2		; 44 D2 6D ; Move block positive $6D,$D2 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pei ($6B.b)		; D4 6B ; Push effective indirect address ($6B.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jmp.w [$EF6B]		; DC 6B EF ; Jump long indirect [$EF6B] [Flow: jump]
	.db $70, $87		; 70 87 ; Branch if overflow set to $70, $87 [Flow: branch]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0F22.w		; 0C 22 0F ; Test and set bits $0F22.w [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00FF.w		; C0 FF 00 ; Compare #$00FF.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$F003.w		; C0 03 F0 ; Compare #$F003.w with Y register [Reads: Y Index] [Flags: NCZ]
	sta $221FE7.l		; 8F E7 1F 22 ; Store accumulator (long) $221FE7.l [Reads: Accumulator]
	sbc $000005.l,X		; FF 05 00 00 ; Subtract with carry (long,X) $000005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($F0.b,S),Y		; 13 F0 ; OR accumulator (stack relative indirect indexed) ($F0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$22C0.w		; E0 C0 22 ; Compare #$22C0.w with X register [Reads: X Index] [Flags: NCZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7FBF00.l,X		; FF 00 BF 7F ; Subtract with carry (long,X) $7FBF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7C.b,S		; E3 7C ; Subtract stack-relative $7C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
.ACCU 16
.INDEX 16
	rep #$7C		; C2 7C
	sbc $728D00.l,X		; FF 00 8D 72 ; Subtract with carry (long,X) $728D00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7A.b,X		; F5 7A ; Subtract $7A.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ror $0022.w,X		; 7E 22 00 ; Rotate right $0022.w,X [Reads: X Index] [Flags: NCZ]
	bit $01.b		; 24 01 ; Test bits $01.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta $E6.b,S		; 83 E6 ; Store accumulator (stack relative) $E6.b,S [Reads: Stack Pointer, Accumulator]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	eor [$B8.b]		; 47 B8 ; Exclusive OR accumulator with memory (long) [$B8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $5343.w,X		; 3C 43 53 ; Test bits $5343.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	adc $9A3EAA.l		; 6F AA 3E 9A ; Add with carry (long) $9A3EAA.l [Writes: Accumulator] [Flags: NCVZ]
	asl $0023.w,X		; 1E 23 00 ; Arithmetic shift left $0023.w,X [Reads: X Index] [Flags: NCZ]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $80, $C1		; 80 C1 ; Branch always to $80, $C1 [Flow: branch]
	sbc ($37.b,X)		; E1 37 ; Subtract with carry ($37.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FEFD00.l,X		; FF 00 FD FE ; Subtract with carry (long,X) $FEFD00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$FE.b]		; 07 FE ; OR accumulator with memory (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $F685.w		; 8C 85 F6 ; Store Y register to $F685.w [Reads: Y Index]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	.db $82, $24, $00		; 82 24 00 ; Branch always long to $82, $24, $00 [Flow: branch]
	cop $70.b		; 02 70 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	ora $DA669D.l		; 0F 9D 66 DA ; OR accumulator with memory (long) $DA669D.l [Writes: Accumulator] [Flags: NZ]
	and $1BEC.w,X		; 3D EC 1B ; AND accumulator with memory $1BEC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $36.b		; C5 36 ; Compare $36.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $72.b,S		; C3 72 ; Compare accumulator (stack relative) $72.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	.db $B0, $D4		; B0 D4 ; Branch if carry set to $B0, $D4 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $2208EF.l		; 8F EF 08 22 ; Store accumulator (long) $2208EF.l [Reads: Accumulator]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $100B.w		; 0C 0B 10 ; Test and set bits $100B.w [Reads: Accumulator] [Flags: Z]
	.db $10, $39		; 10 39 ; Branch if plus to $10, $39 [Flow: branch]
	dec $73.b		; C6 73 ; Decrement $73.b [Reads: Direct Page] [Flags: NZ]
	sty $D8A7.w		; 8C A7 D8 ; Store Y register to $D8A7.w [Reads: Y Index]
	cmp ($6C.b,S),Y		; D3 6C ; Compare accumulator (stack relative indirect indexed) ($6C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	adc $DAB6.w		; 6D B6 DA ; Add $DAB6.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lda [$77.b],Y		; B7 77 ; Load accumulator (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	rol $2593.w,X		; 3E 93 25 ; Rotate left $2593.w,X [Reads: X Index] [Flags: NCZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	eor [$C0.b]		; 47 C0 ; Exclusive OR accumulator with memory (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C04300.l,X		; FF 00 43 C0 ; Subtract with carry (long,X) $C04300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $00FF01.l,X		; 7F 01 FF 00 ; Add long $00FF01.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $7F.b		; 24 7F ; Test bits $7F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	jsl $EF0B00.l		; 22 00 0B EF ; Jump to subroutine long $EF0B00.l [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	ora ($A7.b,S),Y		; 13 A7 ; OR accumulator (stack relative indirect indexed) ($A7.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $A7.b,X		; 34 A7 ; Test bits $A7.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	and ($A7.b)		; 32 A7 ; AND accumulator with memory (indirect) ($A7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($43.b,S),Y		; 33 43 ; AND accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $32.b		; A6 32 ; Load $32.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cop $F7.b		; 02 F7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $43C8.w		; EC C8 43 ; Compare $43C8.w with X register [Reads: X Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$C908.w		; C9 08 C9 ; Compare #$C908.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $1CE300.l,X		; FF 00 E3 1C ; Subtract with carry (long,X) $1CE300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($3E.b,X)		; C1 3E ; Compare accumulator ($3E.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	lda $4372.w,X		; BD 72 43 ; Load $4372.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $0361.w		; AE 61 03 ; Load $0361.w into X register [Writes: X Index] [Flags: NZ]
	lda [$60.b]		; A7 60 ; Load accumulator (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($70.b,S),Y		; 93 70 ; Store accumulator (stack relative indirect indexed) ($70.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $181010.l,X		; 1F 10 10 18 ; Logical OR long $181010.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $7FFE.w		; 0C FE 7F ; Test and set bits $7FFE.w [Reads: Accumulator] [Flags: Z]
	sbc $FBBF.w,X		; FD BF FB ; Subtract with carry $FBBF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $EFEFF7.l,X		; DF F7 EF EF ; Compare accumulator (long,X) $EFEFF7.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc [$DF.b],Y		; F7 DF ; Subtract with carry (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $117FBF.l,X		; DF BF 7F 11 ; Compare accumulator (long,X) $117FBF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	inc $FF2E.w		; EE 2E FF ; Increment $FF2E.w [Flags: NZ]
	eor $51.b,S		; 43 51 ; Exclusive OR accumulator with stack relative $51.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($E0.b),Y		; D1 E0 ; Compare accumulator ($E0.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	eor $55DD.w,X		; 5D DD 55 ; Exclusive OR accumulator with memory $55DD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $53.b,X		; D5 53 ; Compare accumulator $53.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp ($57.b,S),Y		; D3 57 ; Compare accumulator (stack relative indirect indexed) ($57.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	dec $00.b,X		; D6 00 ; Decrement memory $00.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $2A22.w		; 2E 22 2A ; Rotate left $2A22.w [Flags: NCZ]
	bit $5729.w		; 2C 29 57 ; Test bits $5729.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dec $53.b,X		; D6 53 ; Decrement memory $53.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cmp ($55.b,S),Y		; D3 55 ; Compare accumulator (stack relative indirect indexed) ($55.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp $5D.b,X		; D5 5D ; Compare accumulator $5D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $C151.w,X		; DD 51 C1 ; Compare accumulator $C151.w,X [Reads: X Index] [Flags: NCZ]
	eor $E161C0.l		; 4F C0 61 E1 ; Exclusive OR accumulator with memory (long) $E161C0.l [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$2A2C.w		; 29 2C 2A ; Logical AND #$2A2C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $1E3F3E.l		; 22 3E 3F 1E ; Jump to subroutine long $1E3F3E.l [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $976098.l,X		; 7F 98 60 97 ; Add long $976098.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$88.b]		; 67 88 ; Add with carry (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta [$67.b]		; 87 67 ; Store accumulator (long) [$67.b] [Reads: Direct Page, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $151718.l,X		; 1F 18 17 15 ; Logical OR long $151718.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$18.b],Y		; 17 18 ; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $1F		; 10 1F ; Branch if plus to $10, $1F [Flow: branch]
	sbc [$F8.b]		; E7 F8 ; Subtract with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$93.b],Y		; B7 93 ; Load accumulator (long indexed) [$93.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $005E26.l		; EF 26 5E 00 ; Subtract with carry (long) $005E26.l [Writes: Accumulator] [Flags: NCVZ]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$4000.w		; E0 00 40 ; Compare #$4000.w with X register [Reads: X Index] [Flags: NCZ]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	sbc $804300.l,X		; FF 00 43 80 ; Subtract with carry (long,X) $804300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $00FF01.l,X		; 7F 01 FF 00 ; Add long $00FF01.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $80.b,S		; 43 80 ; Exclusive OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $43FF00.l,X		; 7F 00 FF 43 ; Add long $43FF00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $7F.b		; 05 7F ; Logical OR $7F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $83FF00.l,X		; 7F 00 FF 83 ; Add long $83FF00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0DFE20.l,X		; FF 20 FE 0D ; Subtract with carry (long,X) $0DFE20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $088526.l,X		; FF 26 85 08 ; Subtract with carry (long,X) $088526.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $80, $81		; 80 81 ; Branch always to $80, $81 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFE07.l,X		; FF 07 FE FF ; Subtract with carry (long,X) $FFFE07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $24FEF1.l,X		; FF F1 FE 24 ; Subtract with carry (long,X) $24FEF1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FCFE12.l,X		; FF 12 FE FC ; Subtract with carry (long,X) $FCFE12.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc $CE359C.l		; 6F 9C 35 CE ; Add with carry (long) $CE359C.l [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	cpx $7E.b		; E4 7E ; Compare $7E.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc ($BD.b,X)		; E1 BD ; Subtract with carry ($BD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($C7.b,S),Y		; 73 C7 ; Add with carry (stack relative indirect indexed) ($C7.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and ($E9.b,X)		; 21 E9 ; Logical AND ($E9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc $2383.w,X		; 7D 83 23 ; Add $2383.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0105.w,Y		; 19 05 01 ; OR accumulator with memory $0105.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($60.b,X)		; 81 60 ; Store accumulator ($60.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $42, $EC		; 42 EC ; Reserved instruction
	.db $80, $EF		; 80 EF ; Branch always to $80, $EF [Flow: branch]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $1411.w,X		; 1E 11 14 ; Arithmetic shift left $1411.w,X [Reads: X Index] [Flags: NCZ]
	rol $73.b,X		; 36 73 ; Rotate left $73.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $8A.b,X		; 55 8A ; Exclusive OR accumulator with memory $8A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and [$DB.b]		; 27 DB ; AND accumulator with memory (long) [$DB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($649F.w)		; 6C 9F 64 ; Jump indirect to ($649F.w) [Flow: jump]
	and $4C53.w		; 2D 53 4C ; Logical AND $4C53.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $08.b,X		; B4 08 ; Load Y register $08.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	.db $10, $7F		; 10 7F ; Branch if plus to $10, $7F [Flow: branch]
	bit $FEFF.w,X		; 3C FF FE ; Test bits $FEFF.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $800408.l,X		; FF 08 04 80 ; Subtract with carry (long,X) $800408.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($34.b,S),Y		; 13 34 ; OR accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $FF7F.w,Y		; B9 7F FF ; Load $FF7F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$38.b],Y		; F7 38 ; Subtract with carry (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $76B1.w		; 4E B1 76 ; Logical shift right $76B1.w [Flags: NCZ]
	sta $D9AE.w,Y		; 99 AE D9 ; Store accumulator to $D9AE.w,Y [Reads: Y Index, Accumulator]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $08F7.w		; 1C F7 08 ; Test and reset bits $08F7.w [Reads: Accumulator] [Flags: Z]
	bit $1DC3.w,X		; 3C C3 1D ; Test bits $1DC3.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $24.b,S		; E3 24 ; Subtract stack-relative $24.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($4C.b,S),Y		; B3 4C ; Load accumulator (stack relative indirect indexed) ($4C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $37C860.l,X		; 9F 60 C8 37 ; Store accumulator (long,X) $37C860.l,X [Reads: Accumulator, X Index]
	and $DB.b		; 25 DB ; Logical AND $DB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F7DB.w		; 2C DB F7 ; Test bits $F7DB.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $81817E.l,X		; FF 7E 81 81 ; Subtract with carry (long,X) $81817E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $FFC3.w,X		; 7E C3 FF ; Rotate right $FFC3.w,X [Reads: X Index] [Flags: NCZ]
	tsb $E3.b		; 04 E3 ; Test and set bits $E3.b [Reads: Accumulator] [Flags: Z]
	sbc $00D783.l,X		; FF 83 D7 00 ; Subtract with carry (long,X) $00D783.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $7E.b,S		; 03 7E ; OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$017F.w		; C0 7F 01 ; Compare #$017F.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $7F2470.l		; CF 70 24 7F ; Compare accumulator (long) $7F2470.l [Reads: Accumulator] [Flags: NCZ]
	jsl $0E0F00.l		; 22 00 0F 0E ; Jump to subroutine long $0E0F00.l [Writes: Stack Pointer] [Flow: call]
	sbc ($1C.b),Y		; F1 1C ; Subtract with carry ($1C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1B.b,S		; E3 1B ; Subtract stack-relative $1B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $B5.b		; E5 B5 ; Subtract $B5.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $70EB79.l		; 6F 79 EB 70 ; Add with carry (long) $70EB79.l [Writes: Accumulator] [Flags: NCVZ]
	wai		; CB ; Wait for interrupt
	adc $BEC7.w,Y		; 79 C7 BE ; Add $BEC7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $42, $23		; 42 23 ; Reserved instruction
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	wai		; CB ; Wait for interrupt
	rol $47.b		; 26 47 ; Rotate left $47.b [Reads: Direct Page] [Flags: NCZ]
	dec $0625.w		; CE 25 06 ; Decrement $0625.w [Flags: NZ]
	inc $BF55.w,X		; FE 55 BF ; Increment memory $BF55.w,X [Reads: X Index] [Flags: NZ]
	bit $9A.b		; 24 9A ; Test bits $9A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora [$10.b],Y		; 17 10 ; OR accumulator with memory (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $12.b,S		; 23 12 ; AND accumulator with stack relative $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $60		; 42 60 ; Reserved instruction
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FA02.w,X		; FD 02 FA ; Subtract with carry $FA02.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $F7.b		; 05 F7 ; Logical OR $F7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $FB.b		; 05 FB ; Logical OR $FB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $FD.b		; 04 FD ; Test and set bits $FD.b [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $04FB.w		; 20 FB 04 ; Jump to subroutine at $04FB.w [Writes: Stack Pointer] [Flow: call]
	adc $66FDB0.l		; 6F B0 FD 66 ; Add with carry (long) $66FDB0.l [Writes: Accumulator] [Flags: NCVZ]
	inc $237F.w,X		; FE 7F 23 ; Increment memory $237F.w,X [Reads: X Index] [Flags: NZ]
	sbc $200004.l,X		; FF 04 00 20 ; Subtract with carry (long,X) $200004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $F4.b		; 24 F4 ; Test bits $F4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	inc $FF22.w,X		; FE 22 FF ; Increment memory $FF22.w,X [Reads: X Index] [Flags: NZ]
	asl $03FC.w,X		; 1E FC 03 ; Arithmetic shift left $03FC.w,X [Reads: X Index] [Flags: NCZ]
	inc $A711.w		; EE 11 A7 ; Increment $A711.w [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta [$68.b],Y		; 97 68 ; Store accumulator (long indexed) [$68.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda [$48.b],Y		; B7 48 ; Load accumulator (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sty $FD.b,X		; 94 FD ; Store Y register $FD.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sbc $03FA.w,X		; FD FA 03 ; Subtract with carry $03FA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($58.b),Y		; 11 58 ; OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($FEFE.w,X)		; FC FE FE ; Jump to subroutine indirect indexed ($FEFE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C06F40.l,X		; 1F 40 6F C0 ; Logical OR long $C06F40.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $6CD046.l		; 6F 46 D0 6C ; Add with carry (long) $6CD046.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $6F.b		; 04 6F ; Test and set bits $6F.b [Reads: Accumulator] [Flags: Z]
	.db $D0, $C0		; D0 C0 ; Branch if not equal to $D0, $C0 [Flow: branch]
	lda $272430.l,X		; BF 30 24 27 ; Load long $272430.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,S		; 43 80 ; Exclusive OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $00C083.l,X		; 7F 83 C0 00 ; Add long $00C083.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $80,$7F		; 44 7F 80 ; Move block positive $80,$7F [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $00057F.l		; 22 7F 05 00 ; Jump to subroutine long $00057F.l [Writes: Stack Pointer] [Flow: call]
	adc $7F0000.l,X		; 7F 00 00 7F ; Add long $7F0000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	sta $78.b,S		; 83 78 ; Store accumulator (stack relative) $78.b,S [Reads: Stack Pointer, Accumulator]
	cop $47.b		; 02 47 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000100.l,X		; FF 00 01 00 ; Subtract with carry (long,X) $000100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $000025.l,X		; 7F 25 00 00 ; Add long $000025.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $CC22.w		; EE 22 CC ; Increment $CC22.w [Flags: NZ]
	brk $BB.b		; 00 BB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $EE0033.l		; 22 33 00 EE ; Jump to subroutine long $EE0033.l [Writes: Stack Pointer] [Flow: call]
	jsl $BB00CC.l		; 22 CC 00 BB ; Jump to subroutine long $BB00CC.l [Writes: Stack Pointer] [Flow: call]
	bit $33.b		; 24 33 ; Test bits $33.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora ($CC.b,X)		; 01 CC ; Logical OR ($CC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy $B083.w		; CC 83 B0 ; Compare $B083.w with Y register [Reads: Y Index] [Flags: NCZ]
	cop $47.b		; 02 47 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $804500.l,X		; FF 00 45 80 ; Subtract with carry (long,X) $804500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $26FF00.l,X		; 7F 00 FF 26 ; Add long $26FF00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FF2700.l,X		; 7F 00 27 FF ; Add long $FF2700.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$C7.b]		; 07 C7 ; OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $2CE70B.l,X		; FF 0B E7 2C ; Subtract with carry (long,X) $2CE70B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DC.b,S		; C3 DC ; Compare accumulator (stack relative) $DC.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	and ($24.b,S),Y		; 33 24 ; AND accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $13D712.l,X		; FF 12 D7 13 ; Subtract with carry (long,X) $13D712.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $31FFFB.l,X		; FF FB FF 31 ; Subtract with carry (long,X) $31FFFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora ($FB.b),Y		; 11 FB ; OR accumulator with memory ($FB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $BF.b		; 25 BF ; Logical AND $BF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $7857.w		; 8E 57 78 ; Store X register to $7857.w [Reads: X Index]
	lda [$FD.b],Y		; B7 FD ; Load accumulator (long indexed) [$FD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $51750B.l,X		; FF 0B 75 51 ; Subtract with carry (long,X) $51750B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	sbc [$FE.b]		; E7 FE ; Subtract with carry (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$3E.b]		; E7 3E ; Subtract with carry (long) [$3E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$BE.b]		; E7 BE ; Subtract with carry (long) [$BE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc [$44.b]		; 67 44 ; Add with carry (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rol $43E7.w,X		; 3E E7 43 ; Rotate left $43E7.w,X [Reads: X Index] [Flags: NCZ]
	adc [$BE.b]		; 67 BE ; Add with carry (long) [$BE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsl $20E018.l		; 22 18 E0 20 ; Jump to subroutine long $20E018.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF.b		; E5 FF ; Subtract $FF.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$3F.b]		; E7 3F ; Subtract with carry (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$BF.b]		; E7 BF ; Subtract with carry (long) [$BF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $3D.b		; 65 3D ; Add $3D.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $3E.b		; E6 3E ; Increment $3E.b [Reads: Direct Page] [Flags: NZ]
	sbc [$3F.b]		; E7 3F ; Subtract with carry (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc [$BF.b]		; 67 BF ; Add with carry (long) [$BF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror $BF.b		; 66 BF ; Rotate right $BF.b [Reads: Direct Page] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora $9818.w,Y		; 19 18 98 ; OR accumulator with memory $9818.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $72D1.w,Y		; 99 D1 72 ; Store accumulator to $72D1.w,Y [Reads: Y Index, Accumulator]
	bit #$436A.w		; 89 6A 43 ; Test bits #$436A.w with accumulator [Reads: Accumulator] [Flags: Z]
	cmp $433A.w,Y		; D9 3A 43 ; Compare accumulator $433A.w,Y [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $DA.b		; 05 DA ; Logical OR $DA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $0CBD.w		; 4D BD 0C ; Exclusive OR $0CBD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	trb $24.b		; 14 24 ; Test and reset bits $24.b [Reads: Accumulator] [Flags: Z]
	tsb $15.b		; 04 15 ; Test and set bits $15.b [Reads: Accumulator] [Flags: Z]
	cop $A1.b		; 02 A1 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($E82E.w)		; 6C 2E E8 ; Jump indirect to ($E82E.w) [Flow: jump]
	and [$E5.b]		; 27 E5 ; AND accumulator with memory (long) [$E5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sty $70.b,X		; 94 70 ; Store Y register $70.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	cmp [$2C.b],Y		; D7 2C ; Compare accumulator (long indexed) [$2C.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	adc $3393.w		; 6D 93 33 ; Add $3393.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cpy $E31C.w		; CC 1C E3 ; Compare $E31C.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora ($11.b,S),Y		; 13 11 ; OR accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $002203.l		; 0F 03 22 00 ; OR accumulator with memory (long) $002203.l [Writes: Accumulator] [Flags: NZ]
	ora ($7E.b),Y		; 11 7E ; OR accumulator with memory ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($7B.b),Y		; 91 7B ; Store accumulator ($7B.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cpy $79.b		; C4 79 ; Compare $79.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	dec $6C.b		; C6 6C ; Decrement $6C.b [Reads: Direct Page] [Flags: NZ]
	cmp ($76.b,S),Y		; D3 76 ; Compare accumulator (stack relative indirect indexed) ($76.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp #$C47B.w		; C9 7B C4 ; Compare #$C47B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	lda $8146.w,Y		; B9 46 81 ; Load $8146.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $BE.b,S		; 83 BE ; Store accumulator (stack relative) $BE.b,S [Reads: Stack Pointer, Accumulator]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp $24FB20.l,X		; DF 20 FB 24 ; Compare accumulator (long,X) $24FB20.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	and $FEFDF4.l		; 2F F4 FD FE ; AND accumulator with memory (long) $FEFDF4.l [Writes: Accumulator] [Flags: NZ]
	inc $FF22.w,X		; FE 22 FF ; Increment memory $FF22.w,X [Reads: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $38.b		; 86 38 ; Store X register to $38.b [Reads: X Index]
	cop $17.b		; 02 17 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $19E620.l,X		; DF 20 E6 19 ; Compare accumulator (long,X) $19E620.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $15EF.w		; 1C EF 15 ; Test and reset bits $15EF.w [Reads: Accumulator] [Flags: Z]
	sbc [$0B.b],Y		; F7 0B ; Subtract with carry (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $D7.b		; 05 D7 ; Logical OR $D7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	cmp $192027.l,X		; DF 27 20 19 ; Compare accumulator (long,X) $192027.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ora $0F1F.w,X		; 1D 1F 0F ; OR accumulator with memory $0F1F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$2F.b]		; 07 2F ; OR accumulator with memory (long) [$2F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $012683.l,X		; 3F 83 26 01 ; AND accumulator with memory (long,X) $012683.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$FD.b]		; 07 FD ; OR accumulator with memory (long) [$FD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $F46F.w,X		; FE 6F F4 ; Increment memory $F46F.w,X [Reads: X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	stz $9F.b		; 64 9F ; Store zero to $9F.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	asl $FEFF.w		; 0E FF FE ; Arithmetic shift left $FEFF.w [Flags: NCZ]
	pea $6064.w		; F4 64 60 ; Push absolute address $6064.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BBFE.w,X		; FD FE BB ; Subtract with carry $BBFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($3CDB.w,X)		; 7C DB 3C ; Jump indirect indexed to ($3CDB.w,X) [Reads: X Index] [Flow: jump]
	sbc $FF4710.l		; EF 10 47 FF ; Subtract with carry (long) $FF4710.l [Writes: Accumulator] [Flags: NCVZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $3C7C.w,X		; FE 7C 3C ; Increment memory $3C7C.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0E810.l		; EF 10 E8 F0 ; Subtract with carry (long) $F0E810.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $07F807.l,X		; FF 07 F8 07 ; Subtract with carry (long,X) $07F807.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $F0F000.l		; 0F 00 F0 F0 ; OR accumulator with memory (long) $F0F000.l [Writes: Accumulator] [Flags: NZ]
	ora $00FFFF.l,X		; 1F FF FF 00 ; Logical OR long $00FFFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$07.b]		; E7 07 ; Subtract with carry (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	adc #$43A9.w		; 69 A9 43 ; Add #$43A9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ora ($69.b,X)		; 01 69 ; Logical OR ($69.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda #$6845.w		; A9 45 68 ; Load #$6845.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tsb $57.b		; 04 57 ; Test and set bits $57.b [Reads: Accumulator] [Flags: Z]
	lsr $54.b,X		; 56 54 ; Logical shift right $54.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	mvn $22,$56		; 54 56 22 ; Move block negative $22,$56 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor [$17.b],Y		; 57 17 ; Exclusive OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	mvp $43,$84		; 44 84 43 ; Move block positive $43,$84 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sta $3F.b,S		; 83 3F ; Store accumulator (stack relative) $3F.b,S [Reads: Stack Pointer, Accumulator]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc $00FF7F.l,X		; FF 7F FF 00 ; Subtract with carry (long,X) $00FF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$67.b],Y		; 57 67 ; Exclusive OR accumulator with memory (long indexed) [$67.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($3F7F.w,X)		; 7C 7F 3F ; Jump indirect indexed to ($3F7F.w,X) [Reads: X Index] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $AF0CFF.l		; 22 FF 0C AF ; Jump to subroutine long $AF0CFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $8BFFCB.l,X		; FF CB FF 8B ; Subtract with carry (long,X) $8BFFCB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C2FFF3.l,X		; FF F3 FF C2 ; Subtract with carry (long,X) $C2FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFFE.l,X		; FF FE FF F8 ; Subtract with carry (long,X) $F8FFFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $FF3F.w		; 1C 3F FF ; Test and reset bits $FF3F.w [Reads: Accumulator] [Flags: Z]
	lda ($B3.b,S),Y		; B3 B3 ; Load accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: NZ]
	and $193F.w,X		; 3D 3F 19 ; AND accumulator with memory $193F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9999.w,Y		; 19 99 99 ; OR accumulator with memory $9999.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $B33FFF.l,X		; FF FF 3F B3 ; Subtract with carry (long,X) $B33FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E6.b,S		; E3 E6 ; Subtract stack-relative $E6.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	and $9919.w,X		; 3D 19 99 ; AND accumulator with memory $9919.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $BFFF3F.l,X		; FF 3F FF BF ; Subtract with carry (long,X) $BFFF3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $FF22F7.l,X		; BF F7 22 FF ; Load long $FF22F7.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$FD27.w		; E0 27 FD ; Compare #$FD27.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $BFFFF9.l,X		; FF F9 FF BF ; Subtract with carry (long,X) $BFFFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3FFBFB.l,X		; FF FB FB 3F ; Subtract with carry (long,X) $3FFBFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $FDFFF7.l,X		; BF F7 FF FD ; Load long $FDFFF7.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FBBF.w,Y		; F9 BF FB ; Subtract with carry $FBBF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$EC.b],Y		; 97 EC ; Store accumulator (long indexed) [$EC.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$67DE.w		; A9 DE 67 ; Load #$67DE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$F88B.w		; E0 8B F8 ; Compare #$F88B.w with X register [Reads: X Index] [Flags: NCZ]
	cmp $FCCBF7.l		; CF F7 CB FC ; Compare accumulator (long) $FCCBF7.l [Reads: Accumulator] [Flags: NCZ]
	lda $FE.b		; A5 FE ; Load $FE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $C080C2.l		; AF C2 80 C0 ; Load long $C080C2.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpx $E0.b		; E4 E0 ; Compare $E0.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx #$D0C0.w		; E0 C0 D0 ; Compare #$D0C0.w with X register [Reads: X Index] [Flags: NCZ]
	jsl $4E08FF.l		; 22 FF 08 4E ; Jump to subroutine long $4E08FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $C33C04.l,X		; FF 04 3C C3 ; Subtract with carry (long,X) $C33C04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	stx $79.b		; 86 79 ; Store X register to $79.b [Reads: X Index]
	sta $C6.b,S		; 83 C6 ; Store accumulator (stack relative) $C6.b,S [Reads: Stack Pointer, Accumulator]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $107912.l,X		; FF 12 79 10 ; Subtract with carry (long,X) $107912.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($38FF.w,X)		; FC FF 38 ; Jump to subroutine indirect indexed ($38FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $837C10.l,X		; FF 10 7C 83 ; Subtract with carry (long,X) $837C10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $00FF90.l		; 6F 90 FF 00 ; Add with carry (long) $00FF90.l [Writes: Accumulator] [Flags: NCVZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	trb $F8.b		; 14 F8 ; Test and reset bits $F8.b [Reads: Accumulator] [Flags: Z]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	inc $1E.b		; E6 1E ; Increment $1E.b [Reads: Direct Page] [Flags: NZ]
	adc ($8E.b)		; 72 8E ; Add with carry (indirect) ($8E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $9CC7.w,Y		; 39 C7 9C ; AND accumulator with memory $9CC7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $CC.b,S		; 63 CC ; Add with carry (stack relative) $CC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and ($EE.b,S),Y		; 33 EE ; AND accumulator (stack relative indirect indexed) ($EE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($9D.b),Y		; 11 9D ; OR accumulator with memory ($9D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($01.b,S),Y		; F3 01 ; Subtract with carry (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $F689F0.l		; 8F F0 89 F6 ; Store accumulator (long) $F689F0.l [Reads: Accumulator]
	ora #$0BF6.w		; 09 F6 0B ; Logical OR #$0BF6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pea $F10E.w		; F4 0E F1 ; Push absolute address $F10E.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	bit $CEF3.w		; 2C F3 CE ; Test bits $CEF3.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sbc ($5F.b),Y		; F1 5F ; Subtract with carry ($5F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0027.w		; E0 27 00 ; Compare #$0027.w with X register [Reads: X Index] [Flags: NCZ]
	ora #$43BE.w		; 09 BE 43 ; Logical OR #$43BE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $DE63.w,X		; 9D 63 DE ; Store accumulator to $DE63.w,X [Reads: Accumulator, X Index]
	and ($EB.b,X)		; 21 EB ; Logical AND ($EB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	trb $F9.b		; 14 F9 ; Test and reset bits $F9.b [Reads: Accumulator] [Flags: Z]
	asl $43.b		; 06 43 ; Arithmetic shift left $43.b [Reads: Direct Page] [Flags: NCZ]
	sbc $0102.w,X		; FD 02 01 ; Subtract with carry $0102.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $2A.b,X		; D5 2A ; Compare accumulator $2A.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($EF.b),Y		; 11 EF ; OR accumulator with memory ($EF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $7D83.w,X		; 7E 83 7D ; Rotate right $7D83.w,X [Reads: X Index] [Flags: NCZ]
	cmp $BE.b,S		; C3 BE ; Compare accumulator (stack relative) $BE.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($77.b,X)		; C1 77 ; Compare accumulator ($77.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit $0808.w,X		; 3C 08 08 ; Test bits $0808.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$F7.b],Y		; 17 F7 ; OR accumulator with memory (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	nop		; EA ; No operation
	ora [$F4.b],Y		; 17 F4 ; OR accumulator with memory (long indexed) [$F4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $EF02.w,X		; FD 02 EF ; Subtract with carry $EF02.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FB.b,X		; 15 FB ; OR accumulator with memory $FB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FD.b		; 05 FD ; Logical OR $FD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $1F030B.l,X		; 1F 0B 03 1F ; Logical OR long $1F030B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($97.b,X)		; 01 97 ; Logical OR ($97.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$6090.w		; 29 90 60 ; Logical AND #$6090.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stz $8B60.w		; 9C 60 8B ; Store zero to $8B60.w
	eor $FF1F9B.l		; 4F 9B 1F FF ; Exclusive OR accumulator with memory (long) $FF1F9B.l [Writes: Accumulator] [Flags: NZ]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$18.b],Y		; 17 18 ; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $60301F.l,X		; 1F 1F 30 60 ; Logical OR long $60301F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $FD.b,Y		; 96 FD ; Store X register $FD.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	pea $0007.w		; F4 07 00 ; Push absolute address $0007.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $70, $03		; 70 03 ; Branch if overflow set to $70, $03 [Flow: branch]
	ldy $AF70.w		; AC 70 AF ; Load $AF70.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp $FFAFDE.l,X		; DF DE AF FF ; Compare accumulator (long,X) $FFAFDE.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($218F.w,X)		; FC 8F 21 ; Jump to subroutine indirect indexed ($218F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	nop		; EA ; No operation
	eor $98.b,X		; 55 98 ; Exclusive OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and [$B5.b],Y		; 37 B5 ; AND accumulator with memory (long indexed) [$B5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $E82AEA.l,X		; 3F EA 2A E8 ; AND accumulator with memory (long,X) $E82AEA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsl $400400.l		; 22 00 04 40 ; Jump to subroutine long $400400.l [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $57.b,X		; 55 57 ; Exclusive OR accumulator with memory $57.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$45.b],Y		; 57 45 ; Exclusive OR accumulator with memory (long indexed) [$45.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $7F0000.l		; 22 00 00 7F ; Jump to subroutine long $7F0000.l [Writes: Stack Pointer] [Flow: call]
	jsl $7F0900.l		; 22 00 09 7F ; Jump to subroutine long $7F0900.l [Writes: Stack Pointer] [Flow: call]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$CF.b]		; 27 CF ; AND accumulator with memory (long) [$CF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($C7.b)		; 32 C7 ; AND accumulator with memory (indirect) ($C7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor $F3.b,S		; 43 F3 ; Exclusive OR accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $E703.w		; 0D 03 E7 ; Logical OR $E703.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $33CF.w,Y		; 19 CF 33 ; OR accumulator with memory $33CF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $1F143F.l		; 22 3F 14 1F ; Jump to subroutine long $1F143F.l [Writes: Stack Pointer] [Flow: call]
	ora $3F1F0F.l		; 0F 0F 1F 3F ; OR accumulator with memory (long) $3F1F0F.l [Writes: Accumulator] [Flags: NZ]
	sbc $7FFF00.l,X		; FF 00 FF 7F ; Subtract with carry (long,X) $7FFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $40E040.l,X		; FF 40 E0 40 ; Subtract with carry (long,X) $40E040.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4FE040.l		; EF 40 E0 4F ; Subtract with carry (long) $4FE040.l [Writes: Accumulator] [Flags: NCVZ]
	sbc [$4F.b]		; E7 4F ; Subtract with carry (long) [$4F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx $4C.b		; E4 4C ; Compare $4C.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	jsl $1F0000.l		; 22 00 00 1F ; Jump to subroutine long $1F0000.l [Writes: Stack Pointer] [Flow: call]
	jsl $130210.l		; 22 10 02 13 ; Jump to subroutine long $130210.l [Writes: Stack Pointer] [Flow: call]
	sbc $FF2200.l,X		; FF 00 22 FF ; Subtract with carry (long,X) $FF2200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FF0200.l		; 22 00 02 FF ; Jump to subroutine long $FF0200.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0024FF.l		; 22 FF 24 00 ; Jump to subroutine long $0024FF.l [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FF1800.l		; 22 00 18 FF ; Jump to subroutine long $FF1800.l [Writes: Stack Pointer] [Flow: call]
	sta ($E5.b,S),Y		; 93 E5 ; Store accumulator (stack relative indirect indexed) ($E5.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	and $DA97B4.l		; 2F B4 97 DA ; AND accumulator with memory (long) $DA97B4.l [Writes: Accumulator] [Flags: NZ]
	sta [$E7.b]		; 87 E7 ; Store accumulator (long) [$E7.b] [Reads: Direct Page, Accumulator]
	sta [$F4.b]		; 87 F4 ; Store accumulator (long) [$F4.b] [Reads: Direct Page, Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cpx $DB41.w		; EC 41 DB ; Compare $DB41.w with X register [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $48.b		; 25 48 ; Logical AND $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$F8E0.w		; C0 E0 F8 ; Compare #$F8E0.w with Y register [Reads: Y Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $D0, $A4		; D0 A4 ; Branch if not equal to $D0, $A4 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$FF		; C2 FF
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $798610.l		; EF 10 86 79 ; Subtract with carry (long) $798610.l [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$7C.b]		; C7 7C ; Compare accumulator (long) [$7C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator]
	.db $30, $FF		; 30 FF ; Branch if minus to $30, $FF [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $FF25.w,Y		; 79 25 FF ; Add $FF25.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$807F.w		; 09 7F 80 ; Logical OR #$807F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $9C.b,S		; 63 9C ; Add with carry (stack relative) $9C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$3C.b],Y		; F7 3C ; Subtract with carry (long indexed) [$3C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FF.b,S		; C3 FF ; Compare accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $FF25.w		; 9C 25 FF ; Store zero to $FF25.w
	ora $BF47BF.l		; 0F BF 47 BF ; OR accumulator with memory (long) $BF47BF.l [Writes: Accumulator] [Flags: NZ]
	lsr $748F.w		; 4E 8F 74 ; Logical shift right $748F.w [Flags: NCZ]
	lda $19E751.l		; AF 51 E7 19 ; Load long $19E751.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $27DF33.l		; CF 33 DF 27 ; Compare accumulator (long) $27DF33.l [Reads: Accumulator] [Flags: NCZ]
	sta $7F2263.l,X		; 9F 63 22 7F ; Store accumulator (long,X) $7F2263.l,X [Reads: Accumulator, X Index]
	tsb $5F.b		; 04 5F ; Test and set bits $5F.b [Reads: Accumulator] [Flags: Z]
	ora $7F3F3F.l,X		; 1F 3F 3F 7F ; Logical OR long $7F3F3F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $FD0CFF.l		; 22 FF 0C FD ; Jump to subroutine long $FD0CFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $E2FFF6.l,X		; FF F6 FF E2 ; Subtract with carry (long,X) $E2FFF6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $F8F1.w,X		; FE F1 F8 ; Increment memory $F8F1.w,X [Reads: X Index] [Flags: NZ]
	sbc [$F9.b],Y		; F7 F9 ; Subtract with carry (long indexed) [$F9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $FB.b,Y		; B6 FB ; Load X register $FB.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	cpy $25.b		; C4 25 ; Compare $25.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sbc $FCFE0B.l,X		; FF 0B FE FC ; Subtract with carry (long,X) $FCFE0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $679F23.l,X		; DF 23 9F 67 ; Compare accumulator (long,X) $679F23.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	and $8F7FCF.l,X		; 3F CF 7F 8F ; AND accumulator with memory (long,X) $8F7FCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF251F.l,X		; FF 1F 25 FF ; Subtract with carry (long,X) $FF251F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($3F.b,X)		; 01 3F ; Logical OR ($3F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $08FF26.l,X		; 7F 26 FF 08 ; Add long $08FF26.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $19E6.w		; 8E E6 19 ; Store X register to $19E6.w [Reads: X Index]
	cmp $778F32.l		; CF 32 8F 77 ; Compare accumulator (long) $778F32.l [Reads: Accumulator] [Flags: NCZ]
	eor $9F.b		; 45 9F ; Exclusive OR $9F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $0E0003.l		; 6F 03 00 0E ; Add with carry (long) $0E0003.l [Writes: Accumulator] [Flags: NCVZ]
	ora $7F233F.l,X		; 1F 3F 23 7F ; Logical OR long $7F233F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($F4.b,X)		; 01 F4 ; Logical OR ($F4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $4B.b,X		; 16 4B ; Arithmetic shift left $4B.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	eor ($49.b)		; 52 49 ; Exclusive OR accumulator with memory (indirect) ($49.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5D.b		; 25 5D ; Logical AND $5D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$0D20.w		; E0 20 0D ; Compare #$0D20.w with X register [Reads: X Index] [Flags: NCZ]
	ldy $BF44.w,X		; BC 44 BF ; Load Y register $BF44.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	eor [$AE.b],Y		; 57 AE ; Exclusive OR accumulator with memory (long indexed) [$AE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp $896C90.l		; 5C 90 6C 89 ; Jump long to $896C90.l [Flow: jump]
	adc [$84.b]		; 67 84 ; Add with carry (long) [$84.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($7C.b,S),Y		; 93 7C ; Store accumulator (stack relative indirect indexed) ($7C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora $10.b,S		; 03 10 ; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $6FC09F.l,X		; 7F 9F C0 6F ; Add long $6FC09F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $45DF60.l,X		; DF 60 DF 45 ; Compare accumulator (long,X) $45DF60.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	adc $6803D0.l		; 6F D0 03 68 ; Add with carry (long) $6803D0.l [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $80		; D0 80 ; Branch if not equal to $D0, $80 [Flow: branch]
	and $112024.l,X		; 3F 24 20 11 ; AND accumulator with memory (long,X) $112024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$CC.b]		; 27 CC ; AND accumulator with memory (long) [$CC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $B8C9.w,X		; BC C9 B8 ; Load Y register $B8C9.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cmp $9938.w,Y		; D9 38 99 ; Compare accumulator $9938.w,Y [Reads: Y Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $53FC.w,X		; 9D FC 53 ; Store accumulator to $53FC.w,X [Reads: Accumulator, X Index]
	lda ($AC.b,S),Y		; B3 AC ; Load accumulator (stack relative indirect indexed) ($AC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $23.b,S		; 03 23 ; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$02.b]		; 07 02 ; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $2E5143.l,X		; 1F 43 51 2E ; Logical OR long $2E5143.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $5F.b,S		; 03 5F ; OR accumulator with stack relative $5F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $3E45.w		; 20 45 3E ; Jump to subroutine at $3E45.w [Writes: Stack Pointer] [Flow: call]
	eor [$57.b]		; 47 57 ; Exclusive OR accumulator with memory (long) [$57.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($23.b)		; 32 23 ; AND accumulator with memory (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$CC23.w		; C0 23 CC ; Compare #$CC23.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $7F8003.l,X		; 7F 03 80 7F ; Add long $7F8003.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF4300.l,X		; FF 00 43 FF ; Subtract with carry (long,X) $FF4300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $7F8002.l,X		; 7F 02 80 7F ; Add long $7F8002.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $110028.l,X		; FF 28 00 11 ; Subtract with carry (long,X) $110028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $798600.l,X		; FF 00 86 79 ; Subtract with carry (long,X) $798600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$FF.b]		; C7 FF ; Compare accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator]
	cmp [$FF.b]		; C7 FF ; Compare accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $2D7900.l,X		; FF 00 79 2D ; Subtract with carry (long,X) $2D7900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF5A06.l,X		; FF 06 5A FF ; Subtract with carry (long,X) $FF5A06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $FF.b		; A5 FF ; Load $FF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $800005.l,X		; FF 05 00 80 ; Subtract with carry (long,X) $800005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $F87FE0.l,X		; 7F E0 7F F8 ; Add long $F87FE0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $7E0C.w,X		; FE 0C 7E ; Increment memory $7E0C.w,X [Reads: X Index] [Flags: NZ]
	sbc $FA7C.w,X		; FD 7C FA ; Subtract with carry $FA7C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $010107.l,X		; 1F 07 01 01 ; Logical OR long $010107.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$FF3F.w		; C0 3F FF ; Compare #$FF3F.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $3F.b		; 04 3F ; Test and set bits $3F.b [Reads: Accumulator] [Flags: Z]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $4E0CFF.l		; 22 FF 0C 4E ; Jump to subroutine long $4E0CFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $C33C04.l,X		; FF 04 3C C3 ; Subtract with carry (long,X) $C33C04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	asl $F9.b		; 06 F9 ; Arithmetic shift left $F9.b [Reads: Direct Page] [Flags: NCZ]
	cmp $00FF30.l		; CF 30 FF 00 ; Compare accumulator (long) $00FF30.l [Reads: Accumulator] [Flags: NCZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora ($F9.b)		; 12 F9 ; OR accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	sbc $38FFFC.l,X		; FF FC FF 38 ; Subtract with carry (long,X) $38FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $837C10.l,X		; FF 10 7C 83 ; Subtract with carry (long,X) $837C10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($CE.b),Y		; 31 CE ; AND accumulator with memory ($CE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF2500.l,X		; FF 00 25 FF ; Subtract with carry (long,X) $FF2500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$00CE.w		; 09 CE 00 ; Logical OR #$00CE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $7F8F47.l,X		; BF 47 8F 7F ; Load long $7F8F47.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $10EF56.l		; AF 56 EF 10 ; Load long $10EF56.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $38.b		; 85 38 ; Store accumulator to $38.b [Reads: Accumulator]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $418343.l,X		; BF 43 83 41 ; Load long $418343.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $02,$00		; 44 00 02 ; Move block positive $02,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and $24BFFF.l,X		; 3F FF BF 24 ; AND accumulator with memory (long,X) $24BFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFF904.l,X		; FF 04 F9 FF ; Subtract with carry (long,X) $FFF904.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $FF22BF.l,X		; FF BF 22 FF ; Subtract with carry (long,X) $FF22BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$3F.b]		; 07 3F ; OR accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $F9FFFF.l,X		; BF FF FF F9 ; Load long $F9FFFF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $F943FF.l,X		; BF FF 43 F9 ; Load long $F943FF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $0D.b		; E6 0D ; Increment $0D.b [Reads: Direct Page] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cpy $F3.b		; C4 F3 ; Compare $F3.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cpy $6CF3.w		; CC F3 6C ; Compare $6CF3.w with Y register [Reads: Y Index] [Flags: NCZ]
	adc [$88.b],Y		; 77 88 ; Add with carry (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$79.b]		; 87 79 ; Store accumulator (long) [$79.b] [Reads: Direct Page, Accumulator]
	sbc $FEFE00.l,X		; FF 00 FE FE ; Subtract with carry (long,X) $FEFE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $F802FC.l		; 22 FC 02 F8 ; Jump to subroutine long $F802FC.l [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $16.b,X		; B4 16 ; Load Y register $16.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ora [$B1.b]		; 07 B1 ; OR accumulator with memory (long) [$B1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$AC.b],Y		; 17 AC ; OR accumulator with memory (long indexed) [$AC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $56B4.w,X		; 1E B4 56 ; Arithmetic shift left $56B4.w,X [Reads: X Index] [Flags: NCZ]
	pea $2356.w		; F4 56 23 ; Push absolute address $2356.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	eor #$481F.w		; 49 1F 48 ; Exclusive OR #$481F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($09.b,X)		; 41 09 ; Exclusive OR accumulator with memory ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$13BB.w		; 09 BB 13 ; Logical OR #$13BB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $10.b,X		; B4 10 ; Load Y register $10.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $B0, $1F		; B0 1F ; Branch if carry set to $B0, $1F [Flow: branch]
	ldy #$801F.w		; A0 1F 80 ; Load #$801F.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $4C00FF.l,X		; 7F FF 00 4C ; Add long $4C00FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $404047.l		; 4F 47 40 40 ; Exclusive OR accumulator with memory (long) $404047.l [Writes: Accumulator] [Flags: NZ]
	adc $9D0000.l,X		; 7F 00 00 9D ; Add long $9D0000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $6784.w,X		; 7E 84 67 ; Rotate right $6784.w,X [Reads: X Index] [Flags: NCZ]
	mvp $65,$84		; 44 84 65 ; Move block positive $65,$84 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $648464.l,X		; 1F 64 84 64 ; Logical OR long $648464.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$67.b]		; 87 67 ; Store accumulator (long) [$67.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$EB.b],Y		; 17 EB ; OR accumulator with memory (long indexed) [$EB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($EF.b,S),Y		; 13 EF ; OR accumulator (stack relative indirect indexed) ($EF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc [$F8.b],Y		; F7 F8 ; Subtract with carry (long indexed) [$F8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	sbc $E400FF.l,X		; FF FF 00 E4 ; Subtract with carry (long,X) $E400FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $F01B00.l		; 22 00 1B F0 ; Jump to subroutine long $F01B00.l [Writes: Stack Pointer] [Flow: call]
	ora $E20000.l		; 0F 00 00 E2 ; OR accumulator with memory (long) $E20000.l [Writes: Accumulator] [Flags: NZ]
	ror $5FF8.w,X		; 7E F8 5F ; Rotate right $5FF8.w,X [Reads: X Index] [Flags: NCZ]
	lda $53.b		; A5 53 ; Load $53.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $8E66.w,Y		; BE 66 8E ; Load X register $8E66.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc [$9D.b]		; 67 9D ; Add with carry (long) [$9D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $49		; 30 49 ; Branch if minus to $30, $49 [Flow: branch]
	sta $01A4.w,X		; 9D A4 01 ; Store accumulator to $01A4.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stx $43.b		; 86 43 ; Store X register to $43.b [Reads: X Index]
	eor $57.b		; 45 57 ; Exclusive OR $57.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($02.b)		; 32 02 ; AND accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $46.b,X		; 55 46 ; Exclusive OR accumulator with memory $46.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and ($57.b)		; 32 57 ; AND accumulator with memory (indirect) ($57.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $C400CC.l		; 22 CC 00 C4 ; Jump to subroutine long $C400CC.l [Writes: Stack Pointer] [Flow: call]
	and $CC.b,S		; 23 CC ; AND accumulator with stack relative $CC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $0001.w,X		; FE 01 00 ; Increment memory $0001.w,X [Reads: X Index] [Flags: NZ]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $7F.b,S		; 83 7F ; Store accumulator (stack relative) $7F.b,S [Reads: Stack Pointer, Accumulator]
	sta $7F.b,X		; 95 7F ; Store accumulator to $7F.b,X [Reads: Accumulator, X Index]
	bit #$177F.w		; 89 7F 17 ; Test bits #$177F.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc $57FF0B.l,X		; FF 0B FF 57 ; Subtract with carry (long,X) $57FF0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF227F.l,X		; FF 7F 22 FF ; Subtract with carry (long,X) $FF227F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF257F.l,X		; 3F 7F 25 FF ; AND accumulator with memory (long,X) $FF257F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $21		; 90 21 ; Branch if carry clear to $90, $21 [Flow: branch]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $70F417.l,X		; FF 17 F4 70 ; Subtract with carry (long,X) $70F417.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp ($41.b),Y		; D1 41 ; Compare accumulator ($41.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	lda $02.b,S		; A3 02 ; Load accumulator (stack relative) $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $04.b		; C6 04 ; Decrement $04.b [Reads: Direct Page] [Flags: NZ]
	ldy $38.b,X		; B4 38 ; Load Y register $38.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	adc ($FF.b,S),Y		; 73 FF ; Add with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $7B7D3E.l,X		; 1F 3E 7D 7B ; Logical OR long $7B7D3E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $830074.l		; 4F 74 00 83 ; Exclusive OR accumulator with memory (long) $830074.l [Writes: Accumulator] [Flags: NZ]
	ora $0001.w		; 0D 01 00 ; Logical OR $0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $030022.l,X		; FF 22 00 03 ; Subtract with carry (long,X) $030022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $609F00.l,X		; 7F 00 9F 60 ; Add long $609F00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $1A.b,S		; 43 1A ; Exclusive OR accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $83.b		; E5 83 ; Subtract $83.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror $1A01.w,X		; 7E 01 1A ; Rotate right $1A01.w,X [Reads: X Index] [Flags: NCZ]
	.db $80, $60		; 80 60 ; Branch always to $80, $60 [Flow: branch]
	sbc $05.b		; E5 05 ; Subtract $05.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $FD7F.w,X		; FE 7F FD ; Increment memory $FD7F.w,X [Reads: X Index] [Flags: NZ]
	lda $F7DFFB.l,X		; BF FB DF F7 ; Load long $F7DFFB.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $DFF7EF.l		; EF EF F7 DF ; Subtract with carry (long) $DFF7EF.l [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $1583BF.l,X		; DF BF 83 15 ; Compare accumulator (long,X) $1583BF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp [$1F.b]		; C7 1F ; Compare accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $FF.b		; E6 FF ; Increment $FF.b [Reads: Direct Page] [Flags: NZ]
	sbc $E70400.l,X		; FF 00 04 E7 ; Subtract with carry (long,X) $E70400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1918F8.l,X		; FF F8 18 19 ; Subtract with carry (long,X) $1918F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF5FF.l,X		; FF FF F5 FF ; Subtract with carry (long,X) $FFF5FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$EB.b],Y		; D7 EB ; Compare accumulator (long indexed) [$EB.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($BF.b),Y		; D1 BF ; Compare accumulator ($BF.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp $FFC3AB.l,X		; DF AB C3 FF ; Compare accumulator (long,X) $FFC3AB.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda $287FE7.l,X		; BF E7 7F 28 ; Load long $287FE7.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $4CE54F.l,X		; FF 4F E5 4C ; Subtract with carry (long,X) $4CE54F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$13.b]		; 27 13 ; AND accumulator with memory (long) [$13.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($DB.b,X)		; 01 DB ; Logical OR ($DB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rol $49.b,X		; 36 49 ; Rotate left $49.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dec $0425.w		; CE 25 04 ; Decrement $0425.w [Flags: NZ]
	inc $DF15.w,X		; FE 15 DF ; Increment memory $DF15.w,X [Reads: X Index] [Flags: NZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $12.b		; 24 12 ; Test bits $12.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora ($02.b),Y		; 11 02 ; OR accumulator with memory ($02.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $68.b		; 02 68 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$CC.b],Y		; 97 CC ; Store accumulator (long indexed) [$CC.b],Y [Reads: Direct Page, Y Index, Accumulator]
	and [$97.b],Y		; 37 97 ; AND accumulator with memory (long indexed) [$97.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $F90CFC.l		; 6F FC 0C F9 ; Add with carry (long) $F90CFC.l [Writes: Accumulator] [Flags: NCVZ]
	ora $BB.b,X		; 15 BB ; OR accumulator with memory $BB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($EB.b)		; 52 EB ; Exclusive OR accumulator with memory (indirect) ($EB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $50, $DF		; 50 DF ; Branch if overflow clear to $50, $DF [Flow: branch]
	mvp $00,$22		; 44 22 00 ; Move block positive $00,$22 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cpx #$0324.w		; E0 24 03 ; Compare #$0324.w with X register [Reads: X Index] [Flags: NCZ]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	eor $F16EE0.l,X		; 5F E0 6E F1 ; Exclusive OR accumulator with memory (long,X) $F16EE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $6493.w		; 9C 93 64 ; Store zero to $6493.w
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sty $6B.b		; 84 6B ; Store Y register to $6B.b [Reads: Y Index]
	sbc $0B.b		; E5 0B ; Subtract $0B.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $C303.w,X		; 7D 03 C3 ; Add $C303.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $600000.l,X		; BF 00 00 60 ; Load long $600000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $90		; F0 90 ; Branch if equal to $F0, $90 [Flow: branch]
	.db $90, $80		; 90 80 ; Branch if carry clear to $90, $80 [Flow: branch]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	cmp #$D756.w		; C9 56 D7 ; Compare #$D756.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	lsr $5CF9.w		; 4E F9 5C ; Logical shift right $5CF9.w [Flags: NCZ]
	eor $A5.b,S		; 43 A5 ; Exclusive OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $409F42.l		; AF 42 9F 40 ; Load long $409F42.l into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1202.w		; 20 02 12 ; Jump to subroutine at $1202.w [Writes: Stack Pointer] [Flow: call]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $FF45.w		; 20 45 FF ; Jump to subroutine at $FF45.w [Writes: Stack Pointer] [Flow: call]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FD01.w,X		; FE 01 FD ; Increment memory $FD01.w,X [Reads: X Index] [Flags: NZ]
	ora $FB.b,S		; 03 FB ; OR accumulator with stack relative $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$F6.b]		; 07 F6 ; OR accumulator with memory (long) [$F6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $271EED.l		; 0F ED 1E 27 ; OR accumulator with memory (long) $271EED.l [Writes: Accumulator] [Flags: NZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $03FC00.l,X		; FF 00 FC 03 ; Subtract with carry (long,X) $03FC00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($6F.b,S),Y		; 93 6F ; Store accumulator (stack relative indirect indexed) ($6F.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	and [$DF.b]		; 27 DF ; AND accumulator with memory (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor [$B0.b]		; 47 B0 ; Exclusive OR accumulator with memory (long) [$B0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$70.b],Y		; 97 70 ; Store accumulator (long indexed) [$70.b],Y [Reads: Direct Page, Y Index, Accumulator]
	eor [$F0.b],Y		; 57 F0 ; Exclusive OR accumulator with memory (long indexed) [$F0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $D70B0F.l		; 22 0F 0B D7 ; Jump to subroutine long $D70B0F.l [Writes: Stack Pointer] [Flow: call]
	and ($17.b)		; 32 17 ; AND accumulator with memory (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($D7.b)		; F2 D7 ; Subtract with carry (indirect) ($D7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($17.b)		; D2 17 ; Compare accumulator (indirect) ($17.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($2F.b)		; 12 2F ; OR accumulator with memory (indirect) ($2F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $C7.b		; 02 C7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $E743.w,X		; 1E 43 E7 ; Arithmetic shift left $E743.w,X [Reads: X Index] [Flags: NCZ]
	inc $CC0B.w,X		; FE 0B CC ; Increment memory $CC0B.w,X [Reads: X Index] [Flags: NZ]
	tsb $EC2C.w		; 0C 2C EC ; Test and set bits $EC2C.w [Reads: Accumulator] [Flags: Z]
	jsr ($18F8.w,X)		; FC F8 18 ; Jump to subroutine indirect indexed ($18F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $C4C4FF.l,X		; FF FF C4 C4 ; Subtract with carry (long,X) $C4C4FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $80.b,S		; 23 80 ; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $98.b,S		; 03 98 ; OR accumulator with stack relative $98.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	bit $80.b		; 24 80 ; Test bits $80.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $3B.b,X		; 15 3B ; OR accumulator with memory $3B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $6F677F.l,X		; 7F 7F 67 6F ; Add long $6F677F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $FFC07F.l,X		; 7F 7F C0 FF ; Add long $FFC07F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	.db $50, $FF		; 50 FF ; Branch if overflow clear to $50, $FF [Flow: branch]
	ldy #$C0FF.w		; A0 FF C0 ; Load #$C0FF.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $C0FF88.l,X		; FF 88 FF C0 ; Subtract with carry (long,X) $C0FF88.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF29A0.l,X		; FF A0 29 FF ; Subtract with carry (long,X) $FF29A0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $FF3C.w		; 0E 3C FF ; Arithmetic shift left $FF3C.w [Flags: NCZ]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $18.b,S		; C3 18 ; Compare accumulator (stack relative) $18.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sbc [$00.b]		; E7 00 ; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E73CC3.l,X		; FF C3 3C E7 ; Subtract with carry (long,X) $E73CC3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FF2400.l,X		; FF 00 24 FF ; Subtract with carry (long,X) $FF2400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $3C.b		; 06 3C ; Arithmetic shift left $3C.b [Reads: Direct Page] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $83FFFC.l,X		; FF FC FF 83 ; Subtract with carry (long,X) $83FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $04		; 50 04 ; Branch if overflow clear to $50, $04 [Flow: branch]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $E9FFFC.l,X		; FF FC FF E9 ; Subtract with carry (long,X) $E9FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FC83.w,X		; FE 83 FC ; Increment memory $FC83.w,X [Reads: X Index] [Flags: NZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $FE.b		; 06 FE ; Arithmetic shift left $FE.b [Reads: Direct Page] [Flags: NCZ]
	jsr ($F0F8.w,X)		; FC F8 F0 ; Jump to subroutine indirect indexed ($F0F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	mvp $7F,$FF		; 44 FF 7F ; Move block positive $7F,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cop $67.b		; 02 67 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF446F.l,X		; FF 6F 44 FF ; Subtract with carry (long,X) $FF446F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $C4FF07.l,X		; 7F 07 FF C4 ; Add long $C4FF07.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $80		; 90 80 ; Branch if carry clear to $90, $80 [Flow: branch]
	.db $80, $97		; 80 97 ; Branch always to $80, $97 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$65.b],Y		; 17 65 ; OR accumulator with memory (long indexed) [$65.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $E73FE7.l,X		; BF E7 3F E7 ; Load long $E73FE7.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $E63D65.l,X		; BF 65 3D E6 ; Load long $E63D65.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $FFE7.w,X		; 3E E7 FF ; Rotate left $FFE7.w,X [Reads: X Index] [Flags: NCZ]
	sbc $0FF0F0.l		; EF F0 F0 0F ; Subtract with carry (long) $0FF0F0.l [Writes: Accumulator] [Flags: NCVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora $1018.w,Y		; 19 18 10 ; OR accumulator with memory $1018.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFAF0C.l,X		; FF 0C AF FF ; Subtract with carry (long,X) $FFAF0C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	wai		; CB ; Wait for interrupt
	sbc $F3FF8B.l,X		; FF 8B FF F3 ; Subtract with carry (long,X) $F3FF8B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FEFFC2.l,X		; FF C2 FF FE ; Subtract with carry (long,X) $FEFFC2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF27F8.l,X		; FF F8 27 FF ; Subtract with carry (long,X) $FF27F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$40EF.w		; 09 EF 40 ; Logical OR #$40EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $00BF5F.l,X		; FF 5F BF 00 ; Subtract with carry (long,X) $00BF5F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	jsr ($447C.w,X)		; FC 7C 44 ; Jump to subroutine indirect indexed ($447C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $00057F.l,X		; FF 7F 05 00 ; Subtract with carry (long,X) $00057F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $7C4000.l,X		; 1F 00 40 7C ; Logical OR long $7C4000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $7B00.w,X		; 7D 00 7B ; Add $7B00.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $5D.b		; 00 5D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $52CD14.l,X		; FF 14 CD 52 ; Subtract with carry (long,X) $52CD14.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $C05F.w		; CE 5F C0 ; Decrement $C05F.w [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc [$D5.b],Y		; 77 D5 ; Add with carry (long indexed) [$D5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $C8, $77		; 62 C8 77 ; Push effective relative address $62, $C8, $77 [Writes: Stack Pointer]
	adc $FF0080.l,X		; 7F 80 00 FF ; Add long $FF0080.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $3F20.w		; 20 20 3F ; Jump to subroutine at $3F20.w [Writes: Stack Pointer] [Flow: call]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $27E000.l		; 22 00 E0 27 ; Jump to subroutine long $27E000.l [Writes: Stack Pointer] [Flow: call]
	sbc $7FBFBF.l,X		; FF BF BF 7F ; Subtract with carry (long,X) $7FBFBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $40801F.l,X		; 1F 1F 80 40 ; Logical OR long $40801F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora [$B4.b],Y		; 17 B4 ; OR accumulator with memory (long indexed) [$B4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $E8.b,S		; 63 E8 ; Add with carry (stack relative) $E8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and [$3F.b],Y		; 37 3F ; AND accumulator with memory (long indexed) [$3F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$0000.w		; C0 00 00 ; Compare #$0000.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpx #$A03F.w		; E0 3F A0 ; Compare #$A03F.w with X register [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$CF5F.w		; C0 5F CF ; Compare #$CF5F.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor $C040C0.l,X		; 5F C0 40 C0 ; Exclusive OR accumulator with memory (long,X) $C040C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $D260DF.l,X		; 7F DF 60 D2 ; Add long $D260DF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$F5.b]		; 67 F5 ; Add with carry (long) [$F5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $088300.l,X		; FF 00 83 08 ; Subtract with carry (long,X) $088300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $83.b		; 05 83 ; Logical OR $83.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit $A547.w,X		; 3C 47 A5 ; Test bits $A547.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ror $05.b		; 66 05 ; Rotate right $05.b [Reads: Direct Page] [Flags: NCZ]
	lda $9B66.w,X		; BD 66 9B ; Load $9B66.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp $240000.l		; 5C 00 00 24 ; Jump long to $240000.l [Flow: jump]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $F05720.l,X		; 1F 20 57 F0 ; Logical OR long $F05720.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	jmp ($37CC.w)		; 6C CC 37 ; Jump indirect to ($37CC.w) [Flow: jump]
	cpx #$D83B.w		; E0 3B D8 ; Compare #$D83B.w with X register [Reads: X Index] [Flags: NCZ]
	ldy $5BC3.w,X		; BC C3 5B ; Load Y register $5BC3.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cpx $B6.b		; E4 B6 ; Compare $B6.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $0F.b,X		; 76 0F ; Rotate right $0F.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor [$33.b]		; 47 33 ; Exclusive OR accumulator with memory (long) [$33.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $000007.l,X		; 1F 07 00 00 ; Logical OR long $000007.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$BE67.w		; 09 67 BE ; Logical OR #$BE67.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc [$3E.b]		; E7 3E ; Subtract with carry (long) [$3E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$BE.b]		; E7 BE ; Subtract with carry (long) [$BE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc [$43.b]		; 67 43 ; Add with carry (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rol $0CE7.w,X		; 3E E7 0C ; Rotate left $0CE7.w,X [Reads: X Index] [Flags: NCZ]
	inc $F1EE.w,X		; FE EE F1 ; Increment memory $F1EE.w,X [Reads: X Index] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	and $C0.b,S		; 23 C0 ; AND accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $80.b		; 25 80 ; Logical AND $80.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $88.b,S		; 03 88 ; OR accumulator with stack relative $88.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$83DC]		; DC DC 83 ; Jump long indirect [$83DC] [Flow: jump]
	ldx $2202.w		; AE 02 22 ; Load $2202.w into X register [Writes: X Index] [Flags: NZ]
	adc $23770A.l,X		; 7F 0A 77 23 ; Add long $23770A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp $32CF27.l,X		; DF 27 CF 32 ; Compare accumulator (long,X) $32CF27.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $1D.b,S		; E3 1D ; Subtract stack-relative $1D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor $F3.b,S		; 43 F3 ; Exclusive OR accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $3883.w		; 0D 83 38 ; Logical OR $3883.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0F1F07.l,X		; 3F 07 1F 0F ; AND accumulator with memory (long,X) $0F1F07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $E03F1F.l		; 0F 1F 3F E0 ; OR accumulator with memory (long) $E03F1F.l [Writes: Accumulator] [Flags: NZ]
	ora $B783C0.l,X		; 1F C0 83 B7 ; Logical OR long $B783C0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $431FE0.l,X		; 3F E0 1F 43 ; AND accumulator with memory (long,X) $431FE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$093F.w		; C0 3F 09 ; Compare #$093F.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $82, $7F, $03		; 82 7F 03 ; Branch always long to $82, $7F, $03 [Flow: branch]
	ora $0F170F.l		; 0F 0F 17 0F ; OR accumulator with memory (long) $0F170F.l [Writes: Accumulator] [Flags: NZ]
	ora $433F1F.l,X		; 1F 1F 3F 43 ; Logical OR long $433F1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $43.b		; 84 43 ; Store Y register to $43.b [Reads: Y Index]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $FF3F43.l,X		; FF 43 3F FF ; Subtract with carry (long,X) $FF3F43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $7F.b		; 45 7F ; Exclusive OR $7F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FF7707.l,X		; FF 07 77 FF ; Subtract with carry (long,X) $FF7707.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$22C0.w		; C0 C0 22 ; Compare #$22C0.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$FFFF]		; DC FF FF ; Jump long indirect [$FFFF] [Flow: jump]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $20DF60.l,X		; 9F 60 DF 20 ; Store accumulator (long,X) $20DF60.l,X [Reads: Accumulator, X Index]
	eor $D827B0.l		; 4F B0 27 D8 ; Exclusive OR accumulator with memory (long) $D827B0.l [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and [$07.b]		; 27 07 ; AND accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1D.b,S		; 23 1D ; AND accumulator with stack relative $1D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $39.b		; 02 39 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $76.b		; 06 76 ; Arithmetic shift left $76.b [Reads: Direct Page] [Flags: NCZ]
	ora $3A57.w,Y		; 19 57 3A ; OR accumulator with memory $3A57.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b,X		; 55 3D ; Exclusive OR accumulator with memory $3D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc [$17.b]		; 67 17 ; Add with carry (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $17.b,X		; 75 17 ; Add $17.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($21.b),Y		; 11 21 ; OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $05.b		; 46 05 ; Logical shift right $05.b [Reads: Direct Page] [Flags: NCZ]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and [$0F.b],Y		; 37 0F ; AND accumulator with memory (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and [$08.b]		; 27 08 ; AND accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$06.b],Y		; 17 06 ; OR accumulator with memory (long indexed) [$06.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$0601.w		; 09 01 06 ; Logical OR #$0601.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$C158.w		; E0 58 C1 ; Compare #$C158.w with X register [Reads: X Index] [Flags: NCZ]
	cpy #$F0E0.w		; C0 E0 F0 ; Compare #$F0E0.w with Y register [Reads: Y Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc $FFFF.w,X		; FE FF FF ; Increment memory $FFFF.w,X [Reads: X Index] [Flags: NZ]
	ldx $59BF.w,Y		; BE BF 59 ; Load X register $59BF.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	eor $E2A2.w,Y		; 59 A2 E2 ; Exclusive OR accumulator with memory $E2A2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $C6F9.w,Y		; 19 F9 C6 ; OR accumulator with memory $C6F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $8779.w,X		; 3E 79 87 ; Rotate left $8779.w,X [Reads: X Index] [Flags: NCZ]
	tsb $1373.w		; 0C 73 13 ; Test and set bits $1373.w [Reads: Accumulator] [Flags: Z]
	trb $BEF0.w		; 1C F0 BE ; Test and reset bits $BEF0.w [Reads: Accumulator] [Flags: Z]
	ora $000107.l,X		; 1F 07 01 00 ; Logical OR long $000107.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $E0		; 80 E0 ; Branch always to $80, $E0 [Flow: branch]
	sbc ($7F.b)		; F2 7F ; Subtract with carry (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jmp $DA5DDB.l		; 5C DB 5D DA ; Jump long to $DA5DDB.l [Flow: jump]
	and $7097E8.l		; 2F E8 97 70 ; AND accumulator with memory (long) $7097E8.l [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $0006.w,Y		; F9 06 00 ; Subtract with carry $0006.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $1020.w		; 20 20 10 ; Jump to subroutine at $1020.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $3FD8.w,X		; 1E D8 3F ; Arithmetic shift left $3FD8.w,X [Reads: X Index] [Flags: NCZ]
	sty $4F.b		; 84 4F ; Store Y register to $4F.b [Reads: Y Index]
	ldy $07.b,X		; B4 07 ; Load Y register $07.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	bit $99C7.w,X		; 3C C7 99 ; Test bits $99C7.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	inc $12.b		; E6 12 ; Increment $12.b [Reads: Direct Page] [Flags: NZ]
	adc $3F33.w		; 6D 33 3F ; Add $3F33.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cpy #$3880.w		; C0 80 38 ; Compare #$3880.w with Y register [Reads: Y Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cpy #$FFC0.w		; C0 C0 FF ; Compare #$FFC0.w with Y register [Reads: Y Index] [Flags: NCZ]
	sty $C8FF.w		; 8C FF C8 ; Store Y register to $C8FF.w [Reads: Y Index]
	sbc $207E68.l,X		; FF 68 7E 20 ; Subtract with carry (long,X) $207E68.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $0026.w,X		; 3C 26 00 ; Test bits $0026.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cpx #$8039.w		; E0 39 80 ; Compare #$8039.w with X register [Reads: X Index] [Flags: NCZ]
	cpy #$6EE1.w		; C0 E1 6E ; Compare #$6EE1.w with Y register [Reads: Y Index] [Flags: NCZ]
	ldy $FFC3.w,X		; BC C3 FF ; Load Y register $FFC3.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $F700E0.l,X		; FF E0 00 F7 ; Subtract with carry (long,X) $F700E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Direct Page, Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and [$89.b],Y		; 37 89 ; AND accumulator with memory (long indexed) [$89.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stx $B6.b		; 86 B6 ; Store X register to $B6.b [Reads: X Index]
	ldx $FE.b,Y		; B6 FE ; Load X register $FE.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ror $0870.w,X		; 7E 70 08 ; Rotate right $0870.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $E0.b		; 04 E0 ; Test and set bits $E0.b [Reads: Accumulator] [Flags: Z]
	tsb $88.b		; 04 88 ; Test and set bits $88.b [Reads: Accumulator] [Flags: Z]
	trb $0C8C.w		; 1C 8C 0C ; Test and reset bits $0C8C.w [Reads: Accumulator] [Flags: Z]
	sty $1C.b		; 84 1C ; Store Y register to $1C.b [Reads: Y Index]
	.db $82, $26, $C0		; 82 26 C0 ; Branch always long to $82, $26, $C0 [Flow: branch]
	stz $67.b		; 64 67 ; Store zero to $67.b
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	adc $73.b,S		; 63 73 ; Add with carry (stack relative) $73.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $59.b,S		; 63 59 ; Add with carry (stack relative) $59.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	and $48.b,S		; 23 48 ; AND accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$0C26.w		; E0 26 0C ; Compare #$0C26.w with X register [Reads: X Index] [Flags: NCZ]
	tsb $1212.w		; 0C 12 12 ; Test and set bits $1212.w [Reads: Accumulator] [Flags: Z]
	sta ($92.b)		; 92 92 ; Store accumulator (indirect) ($92.b) [Reads: Direct Page, Accumulator]
	ora ($92.b)		; 12 92 ; OR accumulator with memory (indirect) ($92.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $F3B7B7.l		; CF B7 B7 F3 ; Compare accumulator (long) $F3B7B7.l [Reads: Accumulator] [Flags: NCZ]
	sbc $6D6D.w		; ED 6D 6D ; Subtract $6D6D.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda $E51EE2.l,X		; BF E2 1E E5 ; Load long $E51EE2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0BFA.w,X		; 1D FA 0B ; OR accumulator with memory $0BFA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $C62F.w,X		; DD 2F C6 ; Compare accumulator $C62F.w,X [Reads: X Index] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$CB2E.w		; C9 2E CB ; Compare #$CB2E.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit $28CF.w		; 2C CF 28 ; Test bits $28CF.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $19		; 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $FD.b		; 05 FD ; Logical OR $FD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $0705.w,X		; FE 05 07 ; Increment memory $0705.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inc $BF03.w,X		; FE 03 BF ; Increment memory $BF03.w,X [Reads: X Index] [Flags: NZ]
	brk $53.b		; 00 53 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($0204.w)		; 6C 04 02 ; Jump indirect to ($0204.w) [Flow: jump]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $43.b		; 02 43 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $300800.l		; 22 00 08 30 ; Jump to subroutine long $300800.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $58		; 10 58 ; Branch if plus to $10, $58 [Flow: branch]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $200000.l		; 22 00 00 20 ; Jump to subroutine long $200000.l [Writes: Stack Pointer] [Flow: call]
	jsl $020000.l		; 22 00 00 02 ; Jump to subroutine long $020000.l [Writes: Stack Pointer] [Flow: call]
	mvp $05,$00		; 44 00 05 ; Move block positive $05,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $1C00.w		; 0C 00 1C ; Test and set bits $1C00.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $1C.b,X		; 76 1C ; Rotate right $1C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $7F.b,S		; E3 7F ; Subtract stack-relative $7F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $25.b		; 02 25 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $003F00.l		; 0F 00 3F 00 ; OR accumulator with memory (long) $003F00.l [Writes: Accumulator] [Flags: NZ]
	adc $00FF00.l,X		; 7F 00 FF 00 ; Add long $00FF00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	cpx #$0044.w		; E0 44 00 ; Compare #$0044.w with X register [Reads: X Index] [Flags: NCZ]
	cpy #$21E0.w		; C0 E0 21 ; Compare #$21E0.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $FF7F3F.l		; 0F 3F 7F FF ; OR accumulator with memory (long) $FF7F3F.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	cpy #$01C0.w		; C0 C0 01 ; Compare #$01C0.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($6A.b,X)		; 01 6A ; Logical OR ($6A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($46.b),Y		; 31 46 ; AND accumulator with memory ($46.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$3750.w		; 29 50 37 ; Logical AND #$3750.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $311E.w		; 20 1E 31 ; Jump to subroutine at $311E.w [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	bit $0E.b,X		; 34 0E ; Test bits $0E.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($31.b,X)		; 01 31 ; Logical OR ($31.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $0405.w		; 0D 05 04 ; Logical OR $0405.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($CD.b,X)		; 01 CD ; Logical OR ($CD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rol $E143.w,X		; 3E 43 E1 ; Rotate left $E143.w,X [Reads: X Index] [Flags: NCZ]
	asl $7317.w,X		; 1E 17 73 ; Arithmetic shift left $7317.w,X [Reads: X Index] [Flags: NCZ]
	tsb $003F.w		; 0C 3F 00 ; Test and set bits $003F.w [Reads: Accumulator] [Flags: Z]
	ora $000F01.l,X		; 1F 01 0F 00 ; Logical OR long $000F01.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	cpy #$3060.w		; C0 60 30 ; Compare #$3060.w with Y register [Reads: Y Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $7507.w		; 0C 07 75 ; Test and set bits $7507.w [Reads: Accumulator] [Flags: Z]
	ora [$3C.b]		; 07 3C ; OR accumulator with memory (long) [$3C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $38.b		; 02 38 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $43.b		; 05 43 ; Logical OR $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $0D.b		; 06 0D ; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: NCZ]
	ora $001F01.l,X		; 1F 01 1F 00 ; Logical OR long $001F01.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $2D5800.l,X		; 3F 00 58 2D ; AND accumulator with memory (long,X) $2D5800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($10.b)		; 32 10 ; AND accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	ora $2738.w,Y		; 19 38 27 ; OR accumulator with memory $2738.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $FF2300.l,X		; 3F 00 23 FF ; AND accumulator with memory (long,X) $FF2300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $F9FCFE.l		; 0F FE FC F9 ; OR accumulator with memory (long) $F9FCFE.l [Writes: Accumulator] [Flags: NZ]
	cpy #$0001.w		; C0 01 00 ; Compare #$0001.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $017F00.l,X		; 1F 00 7F 01 ; Logical OR long $017F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $70FF11.l,X		; FF 11 FF 70 ; Subtract with carry (long,X) $70FF11.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF22FC.l,X		; FF FC 22 FF ; Subtract with carry (long,X) $FF22FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $81E0FE.l,X		; 7F FE E0 81 ; Add long $81E0FE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FFFF7F.l,X		; 1F 7F FF FF ; Logical OR long $FFFF7F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $04FF2A.l,X		; 7F 2A FF 04 ; Add long $04FF2A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $30FF.w		; CE FF 30 ; Decrement $30FF.w [Flags: NZ]
	sbc $FF2490.l,X		; FF 90 24 FF ; Subtract with carry (long,X) $FF2490.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $CF.b		; 02 CF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $B0.b,X		; 34 B0 ; Test bits $B0.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora #$FFFE.w		; 09 FE FF ; Logical OR #$FFFE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	.db $80, $FE		; 80 FE ; Branch always to $80, $FE [Flow: branch]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $FF2300.l,X		; 1F 00 23 FF ; Logical OR long $FF2300.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy #$0022.w		; C0 22 00 ; Compare #$0022.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $ED.b		; 05 ED ; Logical OR $ED.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $0CF3.w,X		; 1E F3 0C ; Arithmetic shift left $0CF3.w,X [Reads: X Index] [Flags: NCZ]
	and $DF43C0.l,X		; 3F C0 43 DF ; AND accumulator with memory (long,X) $DF43C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$B105.w		; E0 05 B1 ; Compare #$B105.w with X register [Reads: X Index] [Flags: NCZ]
	dec $9F60.w		; CE 60 9F ; Decrement $9F60.w [Flags: NZ]
	jmp.w [$273F]		; DC 3F 27 ; Jump long indirect [$273F] [Flow: jump]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	stz $64.b		; 64 64 ; Store zero to $64.b
	and $24.b,S		; 23 24 ; AND accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $BF.b		; 04 BF ; Test and set bits $BF.b [Reads: Accumulator] [Flags: Z]
	lda [$9B.b]		; A7 9B ; Load accumulator (long) [$9B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jsl $20E0FF.l		; 22 FF E0 20 ; Jump to subroutine long $20E0FF.l [Writes: Stack Pointer] [Flow: call]
	cpy #$8464.w		; C0 64 84 ; Compare #$8464.w with Y register [Reads: Y Index] [Flags: NCZ]
	stz $80.b		; 64 80 ; Store zero to $80.b
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $82, $4E, $C1		; 82 4E C1 ; Branch always long to $82, $4E, $C1 [Flow: branch]
	ora ($C1.b,S),Y		; 13 C1 ; OR accumulator (stack relative indirect indexed) ($C1.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($61.b,S),Y		; 33 61 ; AND accumulator (stack relative indirect indexed) ($61.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($72.b,S),Y		; 13 72 ; OR accumulator (stack relative indirect indexed) ($72.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $1B.b		; 02 1B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and $8CAC31.l,X		; 3F 31 AC 8C ; AND accumulator with memory (long,X) $8CAC31.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp $806D.w		; 4C 6D 80 ; Jump to $806D.w [Flow: jump]
	cpy #$7000.w		; C0 00 70 ; Compare #$7000.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($5F.b),Y		; 11 5F ; OR accumulator with memory ($5F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $44		; 10 44 ; Branch if plus to $10, $44 [Flow: branch]
	eor $1A90.w,Y		; 59 90 1A ; Exclusive OR accumulator with memory $1A90.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	mvp $3F,$2D		; 44 2D 3F ; Move block positive $3F,$2D [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sta $A6A0B7.l		; 8F B7 A0 A6 ; Store accumulator (long) $A6A0B7.l [Reads: Accumulator]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: NCZ]
	ora ($CD.b)		; 12 CD ; OR accumulator with memory (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DE3B.w,X		; DD 3B DE ; Compare accumulator $DE3B.w,X [Reads: X Index] [Flags: NCZ]
	and $1EEF.w,X		; 3D EF 1E ; AND accumulator with memory $1EEF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pea $B80F.w		; F4 0F B8 ; Push absolute address $B80F.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	eor [$DD.b]		; 47 DD ; Exclusive OR accumulator with memory (long) [$DD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $CE.b,S		; 23 CE ; AND accumulator with stack relative $CE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($10.b),Y		; 31 10 ; AND accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora #$318E.w		; 09 8E 31 ; Logical OR #$318E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc $FD03.w,X		; FE 03 FD ; Increment memory $FD03.w,X [Reads: X Index] [Flags: NZ]
	inc $FD02.w,X		; FE 02 FD ; Increment memory $FD02.w,X [Reads: X Index] [Flags: NZ]
	sbc $FD4301.l,X		; FF 01 43 FD ; Subtract with carry (long,X) $FD4301.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFC02.l,X		; FF 02 FC FF ; Subtract with carry (long,X) $FFFC02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $26		; 70 26 ; Branch if overflow set to $70, $26 [Flow: branch]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($0E.b,X)		; 01 0E ; Logical OR ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $1712.w		; 0D 12 17 ; Logical OR $1712.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $64.b,S		; 03 64 ; OR accumulator with stack relative $64.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($B2.b,X)		; 21 B2 ; Logical AND ($B2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $92.b		; 05 92 ; Logical OR $92.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $5C00.w,X		; FE 00 5C ; Increment memory $5C00.w,X [Reads: X Index] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $990200.l		; 22 00 02 99 ; Jump to subroutine long $990200.l [Writes: Stack Pointer] [Flow: call]
	lda ($54.b)		; B2 54 ; Load accumulator (indirect) ($54.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $34.b,S		; 83 34 ; Store accumulator (stack relative) $34.b,S [Reads: Stack Pointer, Accumulator]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy #$4000.w		; C0 00 40 ; Compare #$4000.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $43		; 80 43 ; Branch always to $80, $43 [Flow: branch]
	cpx #$0200.w		; E0 00 02 ; Compare #$0200.w with X register [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpx #$2060.w		; E0 60 20 ; Compare #$2060.w with X register [Reads: X Index] [Flags: NCZ]
	jsl $F80F00.l		; 22 00 0F F8 ; Jump to subroutine long $F80F00.l [Writes: Stack Pointer] [Flow: call]
	ora $68CB3C.l		; 0F 3C CB 68 ; OR accumulator with memory (long) $68CB3C.l [Writes: Accumulator] [Flags: NZ]
	lda [$40.b],Y		; B7 40 ; Load accumulator (long indexed) [$40.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $50, $B7		; 50 B7 ; Branch if overflow clear to $50, $B7 [Flow: branch]
	jsr $11DE.w		; 20 DE 11 ; Jump to subroutine at $11DE.w [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sty $6E.b,X		; 94 6E ; Store Y register $6E.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	jsl $350001.l		; 22 01 00 35 ; Jump to subroutine long $350001.l [Writes: Stack Pointer] [Flow: call]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Stack Pointer, Accumulator]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $7F001F.l		; 2F 1F 00 7F ; AND accumulator with memory (long) $7F001F.l [Writes: Accumulator] [Flags: NZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $073FC0.l		; 0F C0 3F 07 ; OR accumulator with memory (long) $073FC0.l [Writes: Accumulator] [Flags: NZ]
	sbc $E09F7F.l,X		; FF 7F 9F E0 ; Subtract with carry (long,X) $E09F7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$1F5E.w		; C0 5E 1F ; Compare #$1F5E.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $70, $C0		; 70 C0 ; Branch if overflow set to $70, $C0 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $043BBF.l,X		; 9F BF 3B 04 ; Store accumulator (long,X) $043BBF.l,X [Reads: Accumulator, X Index]
	adc ($09.b)		; 72 09 ; Add with carry (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($15.b)		; F2 15 ; Subtract with carry (indirect) ($15.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dec $21.b		; C6 21 ; Decrement $21.b [Reads: Direct Page] [Flags: NZ]
	cmp [$20.b]		; C7 20 ; Compare accumulator (long) [$20.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3CDB28.l		; CF 28 DB 3C ; Compare accumulator (long) $3CDB28.l [Reads: Accumulator] [Flags: NCZ]
	wai		; CB ; Wait for interrupt
	bit $6C34.w,X		; 3C 34 6C ; Test bits $6C34.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $80		; 90 80 ; Branch if carry clear to $90, $80 [Flow: branch]
	.db $80, $86		; 80 86 ; Branch always to $80, $86 [Flow: branch]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	ora ($2E.b,X)		; 01 2E ; Logical OR ($2E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp $46.b,S		; C3 46 ; Compare accumulator (stack relative) $46.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	bit $83CB.w		; 2C CB 83 ; Test bits $83CB.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $10.b,S		; 23 10 ; AND accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $FD.b		; 06 FD ; Arithmetic shift left $FD.b [Reads: Direct Page] [Flags: NCZ]
	ora $C6.b,S		; 03 C6 ; OR accumulator with stack relative $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $6C93.w,Y		; 39 93 6C ; AND accumulator with memory $6C93.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $1DC6.w,Y		; 79 C6 1D ; Add $1DC6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($60.b)		; 12 60 ; OR accumulator with memory (indirect) ($60.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $7991.w,X		; FE 91 79 ; Increment memory $7991.w,X [Reads: X Index] [Flags: NZ]
	asl $7F.b		; 06 7F ; Arithmetic shift left $7F.b [Reads: Direct Page] [Flags: NCZ]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $DE3FC0.l,X		; 1F C0 3F DE ; Logical OR long $DE3FC0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($FF.b,X)		; 21 FF ; Logical AND ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0025.w		; 20 25 00 ; Jump to subroutine at $0025.w [Writes: Stack Pointer] [Flow: call]
	asl $FE.b		; 06 FE ; Arithmetic shift left $FE.b [Reads: Direct Page] [Flags: NCZ]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FF480F.l,X		; FF 0F 48 FF ; Subtract with carry (long,X) $FF480F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $E00027.l,X		; 1F 27 00 E0 ; Logical OR long $E00027.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$3F.b]		; 27 3F ; AND accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $3352.w,X		; 3E 52 33 ; Rotate left $3352.w,X [Reads: X Index] [Flags: NCZ]
	lsr $B7.b,X		; 56 B7 ; Logical shift right $B7.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $01FF.w		; 0C FF 01 ; Test and set bits $01FF.w [Reads: Accumulator] [Flags: Z]
	inc $7C03.w,X		; FE 03 7C ; Increment memory $7C03.w,X [Reads: X Index] [Flags: NZ]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	tsb $8088.w		; 0C 88 80 ; Test and set bits $8088.w [Reads: Accumulator] [Flags: Z]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	inc $02FD.w,X		; FE FD 02 ; Increment memory $02FD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $23DE11.l		; EF 11 DE 23 ; Subtract with carry (long) $23DE11.l [Writes: Accumulator] [Flags: NCVZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	rol $CA.b		; 26 CA ; Rotate left $CA.b [Reads: Direct Page] [Flags: NCZ]
	and [$E4.b],Y		; 37 E4 ; AND accumulator with memory (long indexed) [$E4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jmp ($0022.w,X)		; 7C 22 00 ; Jump indirect indexed to ($0022.w,X) [Reads: X Index] [Flow: jump]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $A48300.l		; 0F 00 83 A4 ; OR accumulator with memory (long) $A48300.l [Writes: Accumulator] [Flags: NZ]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and [$7E.b]		; 27 7E ; AND accumulator with memory (long) [$7E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc ($10.b)		; 72 10 ; Add with carry (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($10.b)		; F2 10 ; Subtract with carry (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $16.b,X		; F6 16 ; Increment memory $16.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	trb $6120.w		; 1C 20 61 ; Test and reset bits $6120.w [Reads: Accumulator] [Flags: Z]
	eor $89CD.w		; 4D CD 89 ; Exclusive OR $89CD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora #$1909.w		; 09 09 19 ; Logical OR #$1909.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $2525.w,Y		; 19 25 25 ; OR accumulator with memory $2525.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $A6.b		; A6 A6 ; Load $A6.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$E2		; E2 E2
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E6F6.w,Y		; F9 F6 E6 ; Subtract with carry $E6F6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	eor $4F1D.w,Y		; 59 1D 4F ; Exclusive OR accumulator with memory $4F1D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$87.b],Y		; B7 87 ; Load accumulator (long indexed) [$87.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $0901.w,X		; FE 01 09 ; Increment memory $0901.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF3FFF.l		; 0F FF 3F FF ; OR accumulator with memory (long) $FF3FFF.l [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpy #$0025.w		; C0 25 00 ; Compare #$0025.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FE03FF.l		; 22 FF 03 FE ; Jump to subroutine long $FE03FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $27FFFC.l,X		; FF FC FF 27 ; Subtract with carry (long,X) $27FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cop $78.b		; 02 78 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $7C.b		; 02 7C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$3E.b]		; 07 3E ; OR accumulator with memory (long) [$3E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $D50600.l		; 22 00 06 D5 ; Jump to subroutine long $D50600.l [Writes: Stack Pointer] [Flow: call]
	eor $60.b,X		; 55 60 ; Exclusive OR accumulator with memory $60.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	trb $0107.w		; 1C 07 01 ; Test and reset bits $0107.w [Reads: Accumulator] [Flags: Z]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $0001.w		; 0C 01 00 ; Test and set bits $0001.w [Reads: Accumulator] [Flags: Z]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: NCZ]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0B.b		; 04 0B ; Test and set bits $0B.b [Reads: Accumulator] [Flags: Z]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $807F40.l,X		; FF 40 7F 80 ; Subtract with carry (long,X) $807F40.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FE02.w,X		; FD 02 FE ; Subtract with carry $FE02.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($73.b,X)		; 01 73 ; Logical OR ($73.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sty $4639.w		; 8C 39 46 ; Store Y register to $4639.w [Reads: Y Index]
	ldx $E7C3.w,Y		; BE C3 E7 ; Load X register $E7C3.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ora $0024.w,Y		; 19 24 00 ; OR accumulator with memory $0024.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$8021.w		; E0 21 80 ; Compare #$8021.w with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FD7F.w,X		; FE 7F FD ; Increment memory $FD7F.w,X [Reads: X Index] [Flags: NZ]
	lda $F7DFFB.l,X		; BF FB DF F7 ; Load long $F7DFFB.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $DFF7EF.l		; EF EF F7 DF ; Subtract with carry (long) $DFF7EF.l [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $F17FBF.l,X		; DF BF 7F F1 ; Compare accumulator (long,X) $F17FBF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cmp $1E734D.l		; CF 4D 73 1E ; Compare accumulator (long) $1E734D.l [Reads: Accumulator] [Flags: NCZ]
	ora $2200.w		; 0D 00 22 ; Logical OR $2200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($26.b,S),Y		; 13 26 ; OR accumulator (stack relative indirect indexed) ($26.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	cpx $FF22.w		; EC 22 FF ; Compare $FF22.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$3D23.w		; E0 23 3D ; Compare #$3D23.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $D794.w,X		; FD 94 D7 ; Subtract with carry $D794.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$52.b],Y		; 57 52 ; Exclusive OR accumulator with memory (long indexed) [$52.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stx $95.b,Y		; 96 95 ; Store X register $95.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	lda $77.b		; A5 77 ; Load $77.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $0AFF.w		; 2D FF 0A ; Logical AND $0AFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $82, $E0, $20		; 82 E0 20 ; Branch always long to $82, $E0, $20 [Flow: branch]
	wai		; CB ; Wait for interrupt
	bit $3ED9.w		; 2C D9 3E ; Test bits $3ED9.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $F51FEC.l,X		; 3F EC 1F F5 ; AND accumulator with memory (long,X) $F51FEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $45BA.w		; 0E BA 45 ; Arithmetic shift left $45BA.w [Flags: NCZ]
	sty $7C.b		; 84 7C ; Store Y register to $7C.b [Reads: Y Index]
	cop $26.b		; 02 26 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $D6.b		; 45 D6 ; Exclusive OR $D6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jmp ($39C6.w)		; 6C C6 39 ; Jump indirect to ($39C6.w) [Flow: jump]
	inc $0301.w,X		; FE 01 03 ; Increment memory $0301.w,X [Reads: X Index] [Flags: NZ]
	sbc $8405.w,X		; FD 05 84 ; Subtract with carry $8405.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($02.b,S),Y		; 93 02 ; Store accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $10, $25		; 10 25 ; Branch if plus to $10, $25 [Flow: branch]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F00F00.l,X		; FF 00 0F F0 ; Subtract with carry (long,X) $F00F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F8.b]		; E7 F8 ; Subtract with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$F8.b]		; C7 F8 ; Compare accumulator (long) [$F8.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	asl $1CF1.w		; 0E F1 1C ; Arithmetic shift left $1CF1.w [Flags: NCZ]
	sbc $38.b,S		; E3 38 ; Subtract stack-relative $38.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp [$F1.b]		; C7 F1 ; Compare accumulator (long) [$F1.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $070027.l		; 0F 27 00 07 ; OR accumulator with memory (long) $070027.l [Writes: Accumulator] [Flags: NZ]
	asl $0EFE.w,X		; 1E FE 0E ; Arithmetic shift left $0EFE.w,X [Reads: X Index] [Flags: NCZ]
	inc $FF07.w,X		; FE 07 FF ; Increment memory $FF07.w,X [Reads: X Index] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $FC05.w,X		; FE 05 FC ; Increment memory $FC05.w,X [Reads: X Index] [Flags: NZ]
	sbc $010706.l,X		; FF 06 07 01 ; Subtract with carry (long,X) $010706.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $24.b,S		; 23 24 ; AND accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $23.b		; 04 23 ; Test and set bits $23.b [Reads: Accumulator] [Flags: Z]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DBE7FF.l,X		; FF FF E7 DB ; Subtract with carry (long,X) $DBE7FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $002FFF.l,X		; FF FF 2F 00 ; Subtract with carry (long,X) $002FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $8045.w		; 20 45 80 ; Jump to subroutine at $8045.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $01		; 50 01 ; Branch if overflow clear to $50, $01 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $2BE02F.l		; 22 2F E0 2B ; Jump to subroutine long $2BE02F.l [Writes: Stack Pointer] [Flow: call]
	adc [$FF.b],Y		; 77 FF ; Add with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $CE80FE.l,X		; FF FE 80 CE ; Subtract with carry (long,X) $CE80FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $90, $D9		; 90 D9 ; Branch if carry clear to $90, $D9 [Flow: branch]
	sta ($DB.b)		; 92 DB ; Store accumulator (indirect) ($DB.b) [Reads: Direct Page, Accumulator]
	dec $9F.b,X		; D6 9F ; Decrement memory $9F.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $1F.b		; E6 1F ; Increment $1F.b [Reads: Direct Page] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	asl $3F.b		; 06 3F ; Arithmetic shift left $3F.b [Reads: Direct Page] [Flags: NCZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $31.b		; 00 31 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $24.b		; 26 24 ; Rotate left $24.b [Reads: Direct Page] [Flags: NCZ]
	jsr $E000.w		; 20 00 E0 ; Jump to subroutine at $E000.w [Writes: Stack Pointer] [Flow: call]
	and $7E0F.w,Y		; 39 0F 7E ; AND accumulator with memory $7E0F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($F3.b,X)		; 81 F3 ; Store accumulator ($F3.b,X) [Reads: Direct Page, Accumulator, X Index]
	tsb $11EE.w		; 0C EE 11 ; Test and set bits $11EE.w [Reads: Accumulator] [Flags: Z]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and [$ED.b]		; 27 ED ; AND accumulator with memory (long) [$ED.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($D6.b)		; 12 D6 ; OR accumulator with memory (indirect) ($D6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$E5.b		; 29 E5 ; Logical AND #$E5.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rol $0026.w,X		; 3E 26 00 ; Rotate left $0026.w,X [Reads: X Index] [Flags: NCZ]
	ora $C73801.l		; 0F 01 38 C7 ; OR accumulator with memory (long) $C73801.l [Writes: Accumulator] [Flags: NZ]
	sta $4FE2.w,X		; 9D E2 4F ; Store accumulator to $4FE2.w,X [Reads: Accumulator, X Index]
	.db $70, $E7		; 70 E7 ; Branch if overflow set to $70, $E7 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $00FFF0.l		; 0F F0 FF 00 ; OR accumulator with memory (long) $00FFF0.l [Writes: Accumulator] [Flags: NZ]
	jmp ($0022.w,X)		; 7C 22 00 ; Jump indirect indexed to ($0022.w,X) [Reads: X Index] [Flow: jump]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($02.b,X)		; C1 02 ; Compare accumulator ($02.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	jsl $020000.l		; 22 00 00 02 ; Jump to subroutine long $020000.l [Writes: Stack Pointer] [Flow: call]
	jsl $201700.l		; 22 00 17 20 ; Jump to subroutine long $201700.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$10.b],Y		; 57 10 ; Exclusive OR accumulator with memory (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $402728.l		; 6F 28 27 40 ; Add with carry (long) $402728.l [Writes: Accumulator] [Flags: NCVZ]
	and ($10.b,S),Y		; 33 10 ; AND accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($22.b),Y		; 31 22 ; AND accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora ($0F.b,S),Y		; 13 0F ; OR accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $1010.w		; 20 10 10 ; Jump to subroutine at $1010.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $22E000.l		; 22 00 E0 22 ; Jump to subroutine long $22E000.l [Writes: Stack Pointer] [Flow: call]
	lda $5C.b,S		; A3 5C ; Load accumulator (stack relative) $5C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $6E.b,X		; 95 6E ; Store accumulator to $6E.b,X [Reads: Accumulator, X Index]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	rol $E5.b		; 26 E5 ; Rotate left $E5.b [Reads: Direct Page] [Flags: NCZ]
	ora ($22.b,S),Y		; 13 22 ; OR accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($15.b,X)		; 41 15 ; Exclusive OR accumulator with memory ($15.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ror $3A.b		; 66 3A ; Rotate right $3A.b [Reads: Direct Page] [Flags: NCZ]
	tsb $1C.b		; 04 1C ; Test and set bits $1C.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor ($98.b,X)		; 41 98 ; Exclusive OR accumulator with memory ($98.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	trb $3209.w		; 1C 09 32 ; Test and reset bits $3209.w [Reads: Accumulator] [Flags: Z]
	trb $807F.w		; 1C 7F 80 ; Test and reset bits $807F.w [Reads: Accumulator] [Flags: Z]
	jmp ($82FF.w,X)		; 7C FF 82 ; Jump indirect indexed to ($82FF.w,X) [Reads: X Index] [Flow: jump]
	sta $04FB02.l		; 8F 02 FB 04 ; Store accumulator (long) $04FB02.l [Reads: Accumulator]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0F.b,S		; 83 0F ; Store accumulator (stack relative) $0F.b,S [Reads: Stack Pointer, Accumulator]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($F8FC.w,X)		; 7C FC F8 ; Jump indirect indexed to ($F8FC.w,X) [Reads: X Index] [Flow: jump]
	jsl $0FFF00.l		; 22 00 FF 0F ; Jump to subroutine long $0FFF00.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1403.w		; 0D 03 14 ; Logical OR $1403.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $1828.w		; 0C 28 18 ; Test and set bits $1828.w [Reads: Accumulator] [Flags: Z]
	.db $30, $50		; 30 50 ; Branch if minus to $30, $50 [Flow: branch]
	adc $23.b,S		; 63 23 ; Add with carry (stack relative) $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	stz $A7.b		; 64 A7 ; Store zero to $A7.b
	jsl $031900.l		; 22 00 19 03 ; Jump to subroutine long $031900.l [Writes: Stack Pointer] [Flow: call]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $8218.w		; 1C 18 82 ; Test and reset bits $8218.w [Reads: Accumulator] [Flags: Z]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sty $A5.b		; 84 A5 ; Store Y register to $A5.b [Reads: Y Index]
	cld		; D8 ; Clear decimal flag [Flags: D]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	cpy #$80E7.w		; C0 E7 80 ; Compare #$80E7.w with Y register [Reads: Y Index] [Flags: NCZ]
	dec $5F00.w,X		; DE 00 5F ; Decrement memory $5F00.w,X [Reads: X Index] [Flags: NZ]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $A77B.w,X		; 7D 7B A7 ; Add $A77B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF237F.l,X		; 3F 7F 23 FF ; AND accumulator with memory (long,X) $FF237F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($80.b),Y		; 11 80 ; OR accumulator with memory ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $E7F8C0.l,X		; FF C0 F8 E7 ; Subtract with carry (long,X) $E7F8C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $6F.b,X		; 76 6F ; Rotate right $6F.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc $6F796F.l,X		; 7F 6F 79 6F ; Add long $6F796F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $4F		; 70 4F ; Branch if overflow set to $70, $4F [Flow: branch]
	ror $8041.w,X		; 7E 41 80 ; Rotate right $8041.w,X [Reads: X Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $A024.w		; 20 24 A0 ; Jump to subroutine at $A024.w [Writes: Stack Pointer] [Flow: call]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	eor $84.b,S		; 43 84 ; Exclusive OR accumulator with stack relative $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sty $7B.b,X		; 94 7B ; Store Y register $7B.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	clv		; B8 ; Clear overflow flag [Flags: V]
	adc [$F4.b],Y		; 77 F4 ; Add with carry (long indexed) [$F4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $01FBCA.l		; 2F CA FB 01 ; AND accumulator with memory (long) $01FBCA.l [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $8440.w		; 0C 40 84 ; Test and set bits $8440.w [Reads: Accumulator] [Flags: Z]
	sbc $5BDEAD.l,X		; FF AD DE 5B ; Subtract with carry (long,X) $5BDEAD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $7B94.w,X		; BC 94 7B ; Load Y register $7B94.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	adc [$96.b],Y		; 77 96 ; Add with carry (long indexed) [$96.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $9443.w		; 6E 43 94 ; Rotate right $9443.w [Flags: NCZ]
	jmp ($D301.w)		; 6C 01 D3 ; Jump indirect to ($D301.w) [Flow: jump]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	jsr $5023.w		; 20 23 50 ; Jump to subroutine at $5023.w [Writes: Stack Pointer] [Flow: call]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1223.w		; 0C 23 12 ; Test and set bits $1223.w [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $FFAFAF.l,X		; DF AF AF FF ; Compare accumulator (long,X) $FFAFAF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc ($ED.b,S),Y		; F3 ED ; Subtract with carry (stack relative indirect indexed) ($ED.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $CFFF.w		; ED FF CF ; Subtract $CFFF.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $E7		; 30 E7 ; Branch if minus to $30, $E7 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $70, $0F		; 70 0F ; Branch if overflow set to $70, $0F [Flow: branch]
	and ($0F.b,S),Y		; 33 0F ; AND accumulator (stack relative indirect indexed) ($0F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$1C.b]		; 27 1C ; AND accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$08.b],Y		; 37 08 ; AND accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tsb $0F.b		; 04 0F ; Test and set bits $0F.b [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $E01F00.l,X		; FF 00 1F E0 ; Subtract with carry (long,X) $E01F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $78A7F0.l		; CF F0 A7 78 ; Compare accumulator (long) $78A7F0.l [Reads: Accumulator] [Flags: NCZ]
	cmp ($3C.b,S),Y		; D3 3C ; Compare accumulator (stack relative indirect indexed) ($3C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sbc #$1E.b		; E9 1E ; Subtract #$1E.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: NCZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $E01F80.l,X		; 7F 80 1F E0 ; Add long $E01F80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$F8.b]		; 87 F8 ; Store accumulator (long) [$F8.b] [Reads: Direct Page, Accumulator]
	sbc [$F8.b]		; E7 F8 ; Subtract with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($FC.b,S),Y		; F3 FC ; Subtract with carry (stack relative indirect indexed) ($FC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($03.b,S),Y		; F3 03 ; Subtract with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F801.w,Y		; F9 01 F8 ; Subtract with carry $F801.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: NCZ]
	sbc $FEFC01.l,X		; FF 01 FC FE ; Subtract with carry (long,X) $FEFC01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$FE.b],Y		; 17 FE ; OR accumulator with memory (long indexed) [$FE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $FBBFFD.l,X		; 7F FD BF FB ; Add long $FBBFFD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $EFEFF7.l,X		; DF F7 EF EF ; Compare accumulator (long,X) $EFEFF7.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc [$DF.b],Y		; F7 DF ; Subtract with carry (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $457FBF.l,X		; DF BF 7F 45 ; Compare accumulator (long,X) $457FBF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	tsb $0915.w		; 0C 15 09 ; Test and set bits $0915.w [Reads: Accumulator] [Flags: Z]
	asl $0617.w		; 0E 17 06 ; Arithmetic shift left $0617.w [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $0D.b		; 02 0D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $002402.l		; 22 02 24 00 ; Jump to subroutine long $002402.l [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and $1C.b,S		; 23 1C ; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($0D.b)		; 12 0D ; OR accumulator with memory (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$09.b]		; 07 09 ; OR accumulator with memory (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $0810.w		; 20 10 08 ; Jump to subroutine at $0810.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.INDEX 8
	sep #$1E		; E2 1E
	sbc $1D.b		; E5 1D ; Subtract $1D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $C72F.w,X		; DD 2F C7 ; Compare accumulator $C72F.w,X [Reads: X Index] [Flags: NCZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	cmp #$2F.b		; C9 2F ; Compare #$2F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	and $2ACF.w		; 2D CF 2A ; Logical AND $2ACF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	and $10.b,S		; 23 10 ; AND accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$FB.b]		; 07 FB ; OR accumulator with memory (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $FAFD.w,X		; FD FD FA ; Subtract with carry $FAFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $8F8D.w,X		; FE 8D 8F ; Increment memory $8F8D.w,X [Reads: X Index] [Flags: NZ]
	eor $06.b,S		; 43 06 ; Exclusive OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $8E8D.w,X		; 7D 8D 8E ; Add $8E8D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	cmp $30CF20.l,X		; DF 20 CF 30 ; Compare accumulator (long,X) $30CF20.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $8CF493.l		; EF 93 F4 8C ; Subtract with carry (long) $8CF493.l [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $90		; F0 90 ; Branch if equal to $F0, $90 [Flow: branch]
.ACCU 16
	rep #$23		; C2 23
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $47.b,S		; 43 47 ; Exclusive OR accumulator with stack relative $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $00189C.l		; 4F 9C 18 00 ; Exclusive OR accumulator with memory (long) $00189C.l [Writes: Accumulator] [Flags: NZ]
	ror $F340.w		; 6E 40 F3 ; Rotate right $F340.w [Flags: NCZ]
	cpx $35.b		; E4 35 ; Compare $35.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	asl $2FD2.w,X		; 1E D2 2F ; Arithmetic shift left $2FD2.w,X [Reads: X Index] [Flags: NCZ]
	ldy $3475.w		; AC 75 34 ; Load $3475.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $6C.b,X		; F6 6C ; Increment memory $6C.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $3FFF.w		; EE FF 3F ; Increment $3FFF.w [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $0B.b,S		; 03 0B ; OR accumulator with stack relative $0B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($7A.b,S),Y		; 13 7A ; OR accumulator (stack relative indirect indexed) ($7A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $59.b		; 06 59 ; Arithmetic shift left $59.b [Reads: Direct Page] [Flags: NCZ]
	and [$FC.b],Y		; 37 FC ; AND accumulator with memory (long indexed) [$FC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$D8.b]		; 27 D8 ; AND accumulator with memory (long) [$D8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $EF.b,S		; 03 EF ; OR accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$54.b],Y		; 37 54 ; AND accumulator with memory (long indexed) [$54.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $99E8.w,X		; BC E8 99 ; Load Y register $99E8.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	adc #$01BB.w		; 69 BB 01 ; Add #$01BB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $10.b		; 24 10 ; Test bits $10.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $98.b		; 06 98 ; Arithmetic shift left $98.b [Reads: Direct Page] [Flags: NCZ]
	adc $A46E92.l,X		; 7F 92 6E A4 ; Add long $A46E92.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $DA3ED2.l		; 5C D2 3E DA ; Jump long to $DA3ED2.l [Flow: jump]
	rol $36C2.w,X		; 3E C2 36 ; Rotate left $36C2.w,X [Reads: X Index] [Flags: NCZ]
	.db $42, $36		; 42 36 ; Reserved instruction
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	rol $0100.w,X		; 3E 00 01 ; Rotate left $0100.w,X [Reads: X Index] [Flags: NCZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$7F01.w		; 09 01 7F ; Logical OR #$7F01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr ($FFF0.w,X)		; FC F0 FF ; Jump to subroutine indirect indexed ($FFF0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	trb $061F.w		; 1C 1F 06 ; Test and reset bits $061F.w [Reads: Accumulator] [Flags: Z]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($09.b,S),Y		; 73 09 ; Add with carry (stack relative indirect indexed) ($09.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	jsl $E00200.l		; 22 00 02 E0 ; Jump to subroutine long $E00200.l [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($FF26.w,X)		; FC 26 FF ; Jump to subroutine indirect indexed ($FF26.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cop $7F.b		; 02 7F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7F433F.l,X		; FF 3F 43 7F ; Subtract with carry (long,X) $7F433F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $CF3F01.l,X		; 9F 01 3F CF ; Store accumulator (long,X) $CF3F01.l,X [Reads: Accumulator, X Index]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc $1F3F3F.l,X		; 7F 3F 3F 1F ; Add long $1F3F3F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $FCFCFF.l,X		; 7F FF FC FC ; Add long $FCFCFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: NCZ]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	and $80.b		; 25 80 ; Logical AND $80.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0C.b		; 05 0C ; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0300.w		; 0C 00 03 ; Test and set bits $0300.w [Reads: Accumulator] [Flags: Z]
	ora $7F223F.l,X		; 1F 3F 22 7F ; Logical OR long $7F223F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0115F3.l		; 22 F3 15 01 ; Jump to subroutine long $0115F3.l [Writes: Stack Pointer] [Flow: call]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $371C1B.l		; 0F 1B 1C 37 ; OR accumulator with memory (long) $371C1B.l [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $0C73.w		; 6D 73 0C ; Add $0C73.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	inc $F8FF.w,X		; FE FF F8 ; Increment memory $F8FF.w,X [Reads: X Index] [Flags: NZ]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $07.b		; 04 07 ; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $000022.l,X		; FF 22 00 00 ; Subtract with carry (long,X) $000022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $7F7F09.l,X		; FF 09 7F 7F ; Subtract with carry (long,X) $7F7F09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $07871F.l,X		; 1F 1F 87 07 ; Logical OR long $07871F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$07.b]		; E7 07 ; Subtract with carry (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($03.b,S),Y		; F3 03 ; Subtract with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	jsl $800400.l		; 22 00 04 80 ; Jump to subroutine long $800400.l [Writes: Stack Pointer] [Flow: call]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($0025.w,X)		; FC 25 00 ; Jump to subroutine indirect indexed ($0025.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0C1E01.l		; 0F 01 1E 0C ; OR accumulator with memory (long) $0C1E01.l [Writes: Accumulator] [Flags: NZ]
	ora ($0C.b,S),Y		; 13 0C ; OR accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $020025.l,X		; 1F 25 00 02 ; Logical OR long $020025.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($97.b,X)		; 01 97 ; Logical OR ($97.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $42, $1E		; 42 1E ; Reserved instruction
	bit $66.b		; 24 66 ; Test bits $66.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $3C00.w,X		; 7E 00 3C ; Rotate right $3C00.w,X [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $183C.w,X		; 3C 3C 18 ; Test bits $183C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $DC2B.w		; CD 2B DC ; Compare $DC2B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $EF3D.w,X		; DE 3D EF ; Decrement memory $EF3D.w,X [Reads: X Index] [Flags: NZ]
	asl $0FF4.w,X		; 1E F4 0F ; Arithmetic shift left $0FF4.w,X [Reads: X Index] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor [$DD.b]		; 47 DD ; Exclusive OR accumulator with memory (long) [$DD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $CE.b,S		; 23 CE ; AND accumulator with stack relative $CE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($10.b),Y		; 31 10 ; AND accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora #$01FC.w		; 09 FC 01 ; Logical OR #$01FC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $82, $83, $7D		; 82 83 7D ; Branch always long to $82, $83, $7D [Flow: branch]
	inc $FD02.w,X		; FE 02 FD ; Increment memory $FD02.w,X [Reads: X Index] [Flags: NZ]
	sbc $FD4301.l,X		; FF 01 43 FD ; Subtract with carry (long,X) $FD4301.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFC03.l,X		; FF 03 FC FF ; Subtract with carry (long,X) $FFFC03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $7C.b		; 02 7C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $BB.b		; 05 BB ; Logical OR $BB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($78B6.w,X)		; 7C B6 78 ; Jump indirect indexed to ($78B6.w,X) [Reads: X Index] [Flow: jump]
	ldx DMAP7.w		; AE 70 43 ; Load DMAP7.w into X register [Writes: X Index] [Flags: NZ]
	stz $0060.w		; 9C 60 00 ; Store zero to $0060.w
	sta $6044.w,X		; 9D 44 60 ; Store accumulator to $6044.w,X [Reads: Accumulator, X Index]
	sta $002FE0.l,X		; 9F E0 2F 00 ; Store accumulator (long,X) $002FE0.l,X [Reads: Accumulator, X Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $35.b,S		; 03 35 ; OR accumulator with stack relative $35.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $94.b,X		; F5 94 ; Subtract $94.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $866E43.l,X		; DF 43 6E 86 ; Compare accumulator (long,X) $866E43.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda $FB31.w		; AD 31 FB ; Load $FB31.w into accumulator [Writes: Accumulator] [Flags: NZ]
	mvp $BF,$F5		; 44 F5 BF ; Move block positive $BF,$F5 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $2A0A00.l,X		; BF 00 0A 2A ; Load long $2A0A00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tsb $400A.w		; 0C 0A 40 ; Test and set bits $400A.w [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jmp.w [$D627]		; DC 27 D6 ; Jump long indirect [$D627] [Flow: jump]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldx $D56A.w,Y		; BE 6A D5 ; Load X register $D56A.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	eor $B7.b,S		; 43 B7 ; Exclusive OR accumulator with stack relative $B7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $49FF.w,X		; 1D FF 49 ; OR accumulator with memory $49FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $6721.w,X		; DE 21 67 ; Decrement memory $6721.w,X [Reads: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $280101.l		; 22 01 01 28 ; Jump to subroutine long $280101.l [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $2AE000.l		; 22 00 E0 2A ; Jump to subroutine long $2AE000.l [Writes: Stack Pointer] [Flow: call]
	jsr ($F823.w,X)		; FC 23 F8 ; Jump to subroutine indirect indexed ($F823.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp [$F0.b]		; C7 F0 ; Compare accumulator (long) [$F0.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $D53FD2.l,X		; 9F D2 3F D5 ; Store accumulator (long,X) $D53FD2.l,X [Reads: Accumulator, X Index]
	and $3BCB.w,X		; 3D CB 3B ; AND accumulator with memory $3BCB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$17.b]		; E7 17 ; Subtract with carry (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $17.b,X		; F5 17 ; Subtract $17.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $82		; 80 82 ; Branch always to $80, $82 [Flow: branch]
	sty $48.b		; 84 48 ; Store Y register to $48.b [Reads: Y Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $747E62.l,X		; 3F 62 7E 74 ; AND accumulator with memory (long,X) $747E62.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($FEE2.w,X)		; 7C E2 FE ; Jump indirect indexed to ($FEE2.w,X) [Reads: X Index] [Flow: jump]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc $32.b		; E6 32 ; Increment $32.b [Reads: Direct Page] [Flags: NZ]
	dec $1EE2.w		; CE E2 1E ; Decrement $1EE2.w [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol $8100.w,X		; 3E 00 81 ; Rotate left $8100.w,X [Reads: X Index] [Flags: NCZ]
	sta $24.b,S		; 83 24 ; Store accumulator (stack relative) $24.b,S [Reads: Stack Pointer, Accumulator]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc ($FC.b,S),Y		; F3 FC ; Subtract with carry (stack relative indirect indexed) ($FC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FCFE.w,Y		; F9 FE FC ; Subtract with carry $FCFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF28FE.l,X		; FF FE 28 FF ; Subtract with carry (long,X) $FF28FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$28.b		; E0 28 ; Compare #$28.b with X register [Reads: X Index] [Flags: NCZ]
	bit $483C.w,X		; 3C 3C 48 ; Test bits $483C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr ($BE3C.w,X)		; FC 3C BE ; Jump to subroutine indirect indexed ($BE3C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ror $FF3F.w,X		; 7E 3F FF ; Rotate right $FF3F.w,X [Reads: X Index] [Flags: NCZ]
	trb $C3FF.w		; 1C FF C3 ; Test and reset bits $C3FF.w [Reads: Accumulator] [Flags: Z]
	sta [$07.b]		; 87 07 ; Store accumulator (long) [$07.b] [Reads: Direct Page, Accumulator]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$D3.b],Y		; F7 D3 ; Subtract with carry (long indexed) [$D3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E8D7.w		; ED D7 E8 ; Subtract $E8D7.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp $EE.b,X		; D5 EE ; Compare accumulator $EE.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor ($6B.b)		; 52 6B ; Exclusive OR accumulator with memory (indirect) ($6B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $EC.b,X		; 75 EC ; Add $EC.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F7.b,S),Y		; F3 F7 ; Subtract with carry (stack relative indirect indexed) ($F7.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $83.b		; 84 83 ; Store Y register to $83.b [Reads: Y Index]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$0001.w		; 09 01 00 ; Logical OR #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $071F03.l		; 0F 03 1F 07 ; OR accumulator with memory (long) $071F03.l [Writes: Accumulator] [Flags: NZ]
	eor $3F.b,S		; 43 3F ; Exclusive OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $FEFF11.l		; 0F 11 FF FE ; OR accumulator with memory (long) $FEFF11.l [Writes: Accumulator] [Flags: NZ]
	jsr ($F3F9.w,X)		; FC F9 F3 ; Jump to subroutine indirect indexed ($F3F9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc [$CF.b]		; E7 CF ; Subtract with carry (long) [$CF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FF3FFF.l		; CF FF 3F FF ; Compare accumulator (long) $FF3FFF.l [Reads: Accumulator] [Flags: NCZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $27FF37.l,X		; FF 37 FF 27 ; Subtract with carry (long,X) $27FF37.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7F432F.l,X		; FF 2F 43 7F ; Subtract with carry (long,X) $7F432F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0F3F18.l		; 0F 18 3F 0F ; OR accumulator with memory (long) $0F3F18.l [Writes: Accumulator] [Flags: NZ]
	and $27373B.l,X		; 3F 3B 37 27 ; AND accumulator with memory (long,X) $27373B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $CF8F8F.l		; 2F 8F 8F CF ; AND accumulator with memory (long) $CF8F8F.l [Writes: Accumulator] [Flags: NZ]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: NCZ]
	ora #$3A07.w		; 09 07 3A ; Logical OR #$3A07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $F5.b		; 06 F5 ; Arithmetic shift left $F5.b [Reads: Direct Page] [Flags: NCZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $82, $85, $19		; 82 85 19 ; Branch always long to $82, $85, $19 [Flow: branch]
	asl $F807.w,X		; 1E 07 F8 ; Arithmetic shift left $F807.w,X [Reads: X Index] [Flags: NCZ]
	inc $0022.w,X		; FE 22 00 ; Increment memory $0022.w,X [Reads: X Index] [Flags: NZ]
	cpx #$30.b		; E0 30 ; Compare #$30.b with X register [Reads: X Index] [Flags: NCZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E80BFC.l		; 0F FC 0B E8 ; OR accumulator with memory (long) $E80BFC.l [Writes: Accumulator] [Flags: NZ]
	and [$C0.b],Y		; 37 C0 ; AND accumulator with memory (long indexed) [$C0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	.db $D0, $37		; D0 37 ; Branch if not equal to $D0, $37 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $0B31.w,X		; 1E 31 0B ; Arithmetic shift left $0B31.w,X [Reads: X Index] [Flags: NCZ]
	trb $0E.b		; 14 0E ; Test and reset bits $0E.b [Reads: Accumulator] [Flags: Z]
	ora ($81.b,X)		; 01 81 ; Logical OR ($81.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($B5.b,X)		; 81 B5 ; Store accumulator ($B5.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta $2445.w		; 8D 45 24 ; Store accumulator to $2445.w [Reads: Accumulator]
	ora ($F7.b,X)		; 01 F7 ; Logical OR ($F7.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $7C06.w,Y		; F9 06 7C ; Subtract with carry $7C06.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $AE.b,S		; 43 AE ; Exclusive OR accumulator with stack relative $AE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($73.b),Y		; D1 73 ; Compare accumulator ($73.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sty $8679.w		; 8C 79 86 ; Store Y register to $8679.w [Reads: Y Index]
	jmp ($EE83.w,X)		; 7C 83 EE ; Jump indirect indexed to ($EE83.w,X) [Reads: X Index] [Flow: jump]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lsr $00FF.w		; 4E FF 00 ; Logical shift right $00FF.w [Flags: NCZ]
	rol $0900.w		; 2E 00 09 ; Rotate left $0900.w [Flags: NCZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $0C7401.l,X		; 1F 01 74 0C ; Logical OR long $0C7401.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $E0		; 70 E0 ; Branch if overflow set to $70, $E0 [Flow: branch]
	bit #$2466.w		; 89 66 24 ; Test bits #$2466.w with accumulator [Reads: Accumulator] [Flags: Z]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $EA00.w,X		; 3C 00 EA ; Test bits $EA00.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $D2B1.w		; 2C B1 D2 ; Test bits $D2B1.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	asl $2B.b,X		; 16 2B ; Arithmetic shift left $2B.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor ($62.b,X)		; 41 62 ; Exclusive OR accumulator with memory ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $D4.b		; 00 D4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $CBB1.w		; EE B1 CB ; Increment $CBB1.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $37D0.w,X		; [PATTERN: Memory clearing operation] 9E D0 37 ; Store zero to $37D0.w,X [Reads: X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $46B774.l		; AF 74 B7 46 ; Load long $46B774.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc [$80.b]		; E7 80 ; Subtract with carry (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $0401.w		; 9C 01 04 ; Store zero to $0401.w
	ora $0D.b		; 05 0D ; Logical OR $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($09.b),Y		; 31 09 ; AND accumulator with memory ($09.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $9F98.w,Y		; 19 98 9F ; OR accumulator with memory $9F98.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $6D3956.l		; 2F 56 39 6D ; AND accumulator with memory (long) $6D3956.l [Writes: Accumulator] [Flags: NZ]
	and $5E.b,S		; 23 5E ; AND accumulator with stack relative $5E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $5D		; 10 5D ; Branch if plus to $10, $5D [Flow: branch]
	.db $30, $64		; 30 64 ; Branch if minus to $30, $64 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	and ($1C.b)		; 32 1C ; AND accumulator with memory (indirect) ($1C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	jsr $0810.w		; 20 10 08 ; Jump to subroutine at $0810.w [Writes: Stack Pointer] [Flow: call]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	jmp.w [$5E23]		; DC 23 5E ; Jump long indirect [$5E23] [Flow: jump]
	sbc ($7F.b,X)		; E1 7F ; Subtract with carry ($7F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$18.b		; C0 18 ; Compare #$18.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc [$97.b]		; E7 97 ; Subtract with carry (long) [$97.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $5AAF53.l		; 6F 53 AF 5A ; Add with carry (long) $5AAF53.l [Writes: Accumulator] [Flags: NCVZ]
	ldx $2F.b		; A6 2F ; Load $2F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cmp [$00.b],Y		; D7 00 ; Compare accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $3700FF.l		; 4F FF 00 37 ; Exclusive OR accumulator with memory (long) $3700FF.l [Writes: Accumulator] [Flags: NZ]
	sbc $0F0027.l,X		; FF 27 00 0F ; Subtract with carry (long,X) $0F0027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F9.b		; 06 F9 ; Arithmetic shift left $F9.b [Reads: Direct Page] [Flags: NCZ]
	stx $CCF1.w		; 8E F1 CC ; Store X register to $CCF1.w [Reads: X Index]
	sbc ($60.b,S),Y		; F3 60 ; Subtract with carry (stack relative indirect indexed) ($60.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $58BFB0.l,X		; 7F B0 BF 58 ; Add long $58BFB0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $D06FAF.l,X		; DF AF 6F D0 ; Compare accumulator (long,X) $D06FAF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	jsr $0F10.w		; 20 10 0F ; Jump to subroutine at $0F10.w [Writes: Stack Pointer] [Flow: call]
	sbc ($FC.b,S),Y		; F3 FC ; Subtract with carry (stack relative indirect indexed) ($FC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $7907.w,X		; FE 07 79 ; Increment memory $7907.w,X [Reads: X Index] [Flags: NZ]
	inc $8784.w,X		; FE 84 87 ; Increment memory $8784.w,X [Reads: X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $FF.b		; 86 FF ; Store X register to $FF.b [Reads: X Index]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	trb $78.b		; 14 78 ; Test and reset bits $78.b [Reads: Accumulator] [Flags: Z]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	adc $197F1F.l,X		; 7F 1F 7F 19 ; Add long $197F1F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $21FF31.l,X		; FF 31 FF 21 ; Subtract with carry (long,X) $21FF31.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $27FF23.l,X		; FF 23 FF 27 ; Subtract with carry (long,X) $27FF23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3CFF3F.l,X		; FF 3F FF 3C ; Subtract with carry (long,X) $3CFF3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $3F249F.l,X		; 9F 9F 24 3F ; Store accumulator (long,X) $3F249F.l,X [Reads: Accumulator, X Index]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $1F.b		; 46 1F ; Logical shift right $1F.b [Reads: Direct Page] [Flags: NCZ]
	ora $1F0745.l		; 0F 45 07 1F ; OR accumulator with memory (long) $1F0745.l [Writes: Accumulator] [Flags: NZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $EF2201.l,X		; 1F 01 22 EF ; Logical OR long $EF2201.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $E30DE7.l		; 22 E7 0D E3 ; Jump to subroutine long $E30DE7.l [Writes: Stack Pointer] [Flow: call]
	sbc ($F0.b,X)		; E1 F0 ; Subtract with carry ($F0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $2FDC43.l,X		; 7F 43 DC 2F ; Add long $2FDC43.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $1F		; B0 1F ; Branch if carry set to $B0, $1F [Flow: branch]
	ldy #$7F.b		; A0 7F ; Load #$7F.b into Y register [Writes: Y Index] [Flags: NZ]
	cpy #$BF.b		; C0 BF ; Compare #$BF.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $30, $26		; 30 26 ; Branch if minus to $30, $26 [Flow: branch]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $5B		; 30 5B ; Branch if minus to $30, $5B [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $141D.w		; 2D 1D 14 ; Logical AND $141D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $060A.w		; 0C 0A 06 ; Test and set bits $060A.w [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$24.b		; E0 24 ; Compare #$24.b with X register [Reads: X Index] [Flags: NCZ]
	asl $5FE1.w,X		; 1E E1 5F ; Arithmetic shift left $5FE1.w,X [Reads: X Index] [Flags: NCZ]
	cpx #$C7.b		; E0 C7 ; Compare #$C7.b with X register [Reads: X Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $2C.b,S		; 23 2C ; AND accumulator with stack relative $2C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $200F.w		; 0E 0F 20 ; Arithmetic shift left $200F.w [Flags: NCZ]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	ora [$1F.b]		; 07 1F ; OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	ora $190000.l,X		; 1F 00 00 19 ; Logical OR long $190000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $32.b		; 06 32 ; Arithmetic shift left $32.b [Reads: Direct Page] [Flags: NCZ]
	trb $64.b		; 14 64 ; Test and reset bits $64.b [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp #$9F50.w		; C9 50 9F ; Compare #$9F50.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	jsr $40BF.w		; 20 BF 40 ; Jump to subroutine at $40BF.w [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	eor $24381F.l		; 4F 1F 38 24 ; Exclusive OR accumulator with memory (long) $24381F.l [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF0044.l,X		; 3F 44 00 FF ; AND accumulator with memory (long,X) $FF0044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00FCFF.l,X		; FF FF FC 00 ; Subtract with carry (long,X) $00FCFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $B600FF.l		; 0F FF 00 B6 ; OR accumulator with memory (long) $B600FF.l [Writes: Accumulator] [Flags: NZ]
	eor $5DA3.w,Y		; 59 A3 5D ; Exclusive OR accumulator with memory $5DA3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $9D11.w		; EE 11 9D ; Increment $9D11.w [Flags: NZ]
	ror $AE51.w		; 6E 51 AE ; Rotate right $AE51.w [Flags: NCZ]
	ldx $D1D1.w		; AE D1 D1 ; Load $D1D1.w into X register [Writes: X Index] [Flags: NZ]
	sbc $0A0024.l,X		; FF 24 00 0A ; Subtract with carry (long,X) $0A0024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $D1		; 80 D1 ; Branch always to $80, $D1 [Flow: branch]
	sbc $B600FF.l,X		; FF FF 00 B6 ; Subtract with carry (long,X) $B600FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DD23.w,Y		; D9 23 DD ; Compare accumulator $DD23.w,Y [Reads: Y Index] [Flags: NCZ]
	ror $8491.w		; 6E 91 84 ; Rotate right $8491.w [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($51.b),Y		; 51 51 ; Exclusive OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $0B0025.l,X		; FF 25 00 0B ; Subtract with carry (long,X) $0B0025.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($FF.b),Y		; 51 FF ; Exclusive OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jmp ($64A7.w)		; 6C A7 64 ; Jump indirect to ($64A7.w) [Flow: jump]
	cmp ($32.b,S),Y		; D3 32 ; Compare accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sbc #$F719.w		; E9 19 F7 ; Subtract #$F719.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $2FD643.l		; 0F 43 D6 2F ; OR accumulator with memory (long) $2FD643.l [Writes: Accumulator] [Flags: NZ]
	cpx #$31.b		; E0 31 ; Compare #$31.b with X register [Reads: X Index] [Flags: NCZ]
	inc $0F.b,X		; F6 0F ; Increment memory $0F.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	tsb $4006.w		; 0C 06 40 ; Test and set bits $4006.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	inc $0E.b,X		; F6 0E ; Increment memory $0E.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $F86F00.l,X		; FF 00 6F F8 ; Subtract with carry (long,X) $F86F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $F1.b,X		; 76 F1 ; Rotate right $F1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $AEE1.w		; 6E E1 AE ; Rotate right $AEE1.w [Flags: NCZ]
	adc ($5E.b,X)		; 61 5E ; Add with carry ($5E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $39DE.w,Y		; B9 DE 39 ; Load $39DE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $BFB1.w		; 4E B1 BF ; Logical shift right $BFB1.w [Flags: NCZ]
	sbc $F7.b,S		; E3 F7 ; Subtract stack-relative $F7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jmp ($2458.w,X)		; 7C 58 24 ; Jump indirect indexed to ($2458.w,X) [Reads: X Index] [Flow: jump]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $9B72.w,X		; 3E 72 9B ; Rotate left $9B72.w,X [Reads: X Index] [Flags: NCZ]
	sta $8D.b,X		; 95 8D ; Store accumulator to $8D.b,X [Reads: Accumulator, X Index]
	stx $22.b		; 86 22 ; Store X register to $22.b [Reads: X Index]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $D3.b,S		; 83 D3 ; Store accumulator (stack relative) $D3.b,S [Reads: Stack Pointer, Accumulator]
	sta ($60.b,X)		; 81 60 ; Store accumulator ($60.b,X) [Reads: Direct Page, Accumulator, X Index]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $84.b		; 84 84 ; Store Y register to $84.b [Reads: Y Index]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $06.b,S		; 23 06 ; AND accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$45.b		; E0 45 ; Compare #$45.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF3F7B.l,X		; FF 7B 3F FF ; Subtract with carry (long,X) $FF3F7B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F9F9.w,X		; FD F9 F9 ; Subtract with carry $F9F9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $73003F.l,X		; FF 3F 00 73 ; Subtract with carry (long,X) $73003F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($E1.b,S),Y		; 33 E1 ; AND accumulator (stack relative indirect indexed) ($E1.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($C0.b,X)		; 61 C0 ; Add with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $3F		; 80 3F ; Branch always to $80, $3F [Flow: branch]
	lda ($53.b,S),Y		; B3 53 ; Load accumulator (stack relative indirect indexed) ($53.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $16.b,X		; F6 16 ; Increment memory $16.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	clc		; 18 ; Clear carry flag [Flags: C]
	cpy #$8C.b		; C0 8C ; Compare #$8C.b with Y register [Reads: Y Index] [Flags: NCZ]
	asl $403F.w,X		; 1E 3F 40 ; Arithmetic shift left $403F.w,X [Reads: X Index] [Flags: NCZ]
	tsb $8709.w		; 0C 09 87 ; Test and set bits $8709.w [Reads: Accumulator] [Flags: Z]
	sbc $333300.l,X		; FF 00 33 33 ; Subtract with carry (long,X) $333300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $CC99.w,Y		; 99 99 CC ; Store accumulator to $CC99.w,Y [Reads: Y Index, Accumulator]
	cpy $FF00.w		; CC 00 FF ; Compare $FF00.w with Y register [Reads: Y Index] [Flags: NCZ]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: NCZ]
	cpy $00CC.w		; CC CC 00 ; Compare $00CC.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $3366.w		; CC 66 33 ; Compare $3366.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0033.w,Y		; 99 33 00 ; Store accumulator to $0033.w,Y [Reads: Y Index, Accumulator]
	ora $17300F.l,X		; 1F 0F 30 17 ; Logical OR long $17300F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $54D82B.l		; 6F 2B D8 54 ; Add with carry (long) $54D82B.l [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $57		; B0 57 ; Branch if carry set to $B0, $57 [Flow: branch]
	lda ($43.b,S),Y		; B3 43 ; Load accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor [$B2.b],Y		; 57 B2 ; Exclusive OR accumulator with memory (long indexed) [$B2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $1F.b		; 04 1F ; Test and set bits $1F.b [Reads: Accumulator] [Flags: Z]
	.db $30, $60		; 30 60 ; Branch if minus to $30, $60 [Flow: branch]
	cmp [$8F.b]		; C7 8F ; Compare accumulator (long) [$8F.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jsl $000B8C.l		; 22 8C 0B 00 ; Jump to subroutine long $000B8C.l [Writes: Stack Pointer] [Flow: call]
	sbc $F700FF.l,X		; FF FF 00 F7 ; Subtract with carry (long,X) $F700FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0800F7.l,X		; FF F7 00 08 ; Subtract with carry (long,X) $0800F7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$22.b],Y		; F7 22 ; Subtract with carry (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FD7F.w,X		; FE 7F FD ; Increment memory $FD7F.w,X [Reads: X Index] [Flags: NZ]
	lda $F7DFFB.l,X		; BF FB DF F7 ; Load long $F7DFFB.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $DFF7EF.l		; EF EF F7 DF ; Subtract with carry (long) $DFF7EF.l [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $237FBF.l,X		; DF BF 7F 23 ; Compare accumulator (long,X) $237FBF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $00D883.l,X		; FF 83 D8 00 ; Subtract with carry (long,X) $00D883.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0028FF.l,X		; FF FF 28 00 ; Subtract with carry (long,X) $0028FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $FF8F.w		; 0E 8F FF ; Arithmetic shift left $FF8F.w [Flags: NCZ]
	adc [$FF.b],Y		; 77 FF ; Add with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $37FF7B.l,X		; FF 7B FF 37 ; Subtract with carry (long,X) $37FF7B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EDFFCE.l,X		; FF CE FF ED ; Subtract with carry (long,X) $EDFFCE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF28E3.l,X		; FF E3 28 FF ; Subtract with carry (long,X) $FF28E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $AB.b,S		; 03 AB ; OR accumulator with stack relative $AB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp ($7C9B.w)		; 6C 9B 7C ; Jump indirect to ($7C9B.w) [Flow: jump]
	eor [$AB.b]		; 47 AB ; Exclusive OR accumulator with memory (long) [$AB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($B305.w)		; 6C 05 B3 ; Jump indirect to ($B305.w) [Flow: jump]
	jmp ($6CAB.w,X)		; 7C AB 6C ; Jump indirect indexed to ($6CAB.w,X) [Reads: X Index] [Flow: jump]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	and $10.b,S		; 23 10 ; AND accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $00.b,X		; 16 00 ; Arithmetic shift left $00.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $10, $FE		; 10 FE ; Branch if plus to $10, $FE [Flow: branch]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $E7D6.w		; CE D6 E7 ; Decrement $E7D6.w [Flags: NZ]
	ora ($21.b),Y		; 11 21 ; OR accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$21.b],Y		; 17 21 ; OR accumulator with memory (long indexed) [$21.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $DF.b		; A6 DF ; Load $DF.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	jmp ($FE83.w,X)		; 7C 83 FE ; Jump indirect indexed to ($FE83.w,X) [Reads: X Index] [Flow: jump]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	dec $22CE.w		; CE CE 22 ; Decrement $22CE.w [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $A074.w		; 20 74 A0 ; Jump to subroutine at $A074.w [Writes: Stack Pointer] [Flow: call]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ldy #$5D.b		; A0 5D ; Load #$5D.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($66.b),Y		; B1 66 ; Load accumulator ($66.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $3B		; 90 3B ; Branch if carry clear to $90, $3B [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	trb $0F0E.w		; 1C 0E 0F ; Test and reset bits $0F0E.w [Reads: Accumulator] [Flags: Z]
	ora [$85.b]		; 07 85 ; OR accumulator with memory (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $A5.b		; 46 A5 ; Logical shift right $A5.b [Reads: Direct Page] [Flags: NCZ]
	ror $95.b		; 66 95 ; Rotate right $95.b [Reads: Direct Page] [Flags: NCZ]
	ror $9D.b,X		; 76 9D ; Rotate right $9D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $7E99.w,X		; 7E 99 7E ; Rotate right $7E99.w,X [Reads: X Index] [Flags: NCZ]
	sta ($7E.b),Y		; 91 7E ; Store accumulator ($7E.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $183800.l,X		; FF 00 38 18 ; Subtract with carry (long,X) $183800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($3E.b,X)		; C1 3E ; Compare accumulator ($3E.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	ldx $4341.w,Y		; BE 41 43 ; Load X register $4341.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sbc $000300.l,X		; FF 00 03 00 ; Subtract with carry (long,X) $000300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2300EF.l		; EF EF 00 23 ; Subtract with carry (long) $2300EF.l [Writes: Accumulator] [Flags: NCVZ]
	adc $00F097.l,X		; 7F 97 F0 00 ; Add long $00F097.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $AF.b		; 14 AF ; Test and reset bits $AF.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp $63EF50.l,X		; DF 50 EF 63 ; Compare accumulator (long,X) $63EF50.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $138F62.l		; EF 62 8F 13 ; Subtract with carry (long) $138F62.l [Writes: Accumulator] [Flags: NCVZ]
	ora $F807F0.l		; 0F F0 07 F8 ; OR accumulator with memory (long) $F807F0.l [Writes: Accumulator] [Flags: NZ]
	sbc $201300.l,X		; FF 00 13 20 ; Subtract with carry (long,X) $201300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $9D1D00.l		; 22 00 1D 9D ; Jump to subroutine long $9D1D00.l [Writes: Stack Pointer] [Flow: call]
	stx $BF.b		; 86 BF ; Store X register to $BF.b [Reads: X Index]
	sta $AE.b		; 85 AE ; Store accumulator to $AE.b [Reads: Accumulator]
	cmp ($76.b)		; D2 76 ; Compare accumulator (indirect) ($76.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	and $00FF.w,X		; 3D FF 00 ; AND accumulator with memory $00FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $00FFE1.l,X		; BF E1 FF 00 ; Load long $00FFE1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $60		; 70 60 ; Branch if overflow set to $70, $60 [Flow: branch]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
.ACCU 16
.INDEX 16
	rep #$FF		; C2 FF
	lsr $FF00.w,X		; 5E 00 FF ; Logical shift right $FF00.w,X [Reads: X Index] [Flags: NCZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $44FF45.l,X		; 7F 45 FF 44 ; Add long $44FF45.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $EE.b		; 05 EE ; Logical OR $EE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $51.b,X		; 55 51 ; Exclusive OR accumulator with memory $51.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $237F00.l,X		; FF 00 7F 23 ; Subtract with carry (long,X) $237F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda ($7E.b,X)		; A1 7E ; Load accumulator ($7E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($287F.w,X)		; 7C 7F 28 ; Jump indirect indexed to ($287F.w,X) [Reads: X Index] [Flow: jump]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	eor $57.b,S		; 43 57 ; Exclusive OR accumulator with stack relative $57.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($02.b)		; B2 02 ; Load accumulator (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($57.b)		; B2 57 ; Load accumulator (indirect) ($57.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $8C.b		; 02 8C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $2484.w		; 8C 84 24 ; Store Y register to $2484.w [Reads: Y Index]
	sty $DA83.w		; 8C 83 DA ; Store Y register to $DA83.w [Reads: Y Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $DE.b		; 85 DE ; Store accumulator to $DE.b [Reads: Accumulator]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $020022.l,X		; FF 22 00 02 ; Subtract with carry (long,X) $020022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$23.b],Y		; F7 23 ; Subtract with carry (long indexed) [$23.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A800FF.l,X		; FF FF 00 A8 ; Subtract with carry (long,X) $A800FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $00C0C0.l,X		; 3F C0 C0 00 ; AND accumulator with memory (long,X) $00C0C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $3F		; 80 3F ; Branch always to $80, $3F [Flow: branch]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	sbc $FE5700.l,X		; FF 00 57 FE ; Subtract with carry (long,X) $FE5700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	sta $E8.b,S		; 83 E8 ; Store accumulator (stack relative) $E8.b,S [Reads: Stack Pointer, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $040028.l,X		; FF 28 00 04 ; Subtract with carry (long,X) $040028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FF.b,S		; C3 FF ; Compare accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta $FF44.w,Y		; 99 44 FF ; Store accumulator to $FF44.w,Y [Reads: Y Index, Accumulator]
	bit $9904.w,X		; 3C 04 99 ; Test bits $9904.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $E7FFC3.l,X		; FF C3 FF E7 ; Subtract with carry (long,X) $E7FFC3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $6CAB45.l,X		; FF 45 AB 6C ; Subtract with carry (long,X) $6CAB45.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$7C83.w		; 09 83 7C ; Logical OR #$7C83.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	mvp $30,$CF		; 44 CF 30 ; Move block positive $30,$CF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $102200.l,X		; FF 00 22 10 ; Subtract with carry (long,X) $102200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $817E.w		; 0E 7E 81 ; Arithmetic shift left $817E.w [Flags: NCZ]
	sbc $E7C318.l,X		; FF 18 C3 E7 ; Subtract with carry (long,X) $E7C318.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	jmp ($FFC3.w,X)		; 7C C3 FF ; Jump indirect indexed to ($FFC3.w,X) [Reads: X Index] [Flow: jump]
	bit $DB.b		; 24 DB ; Test bits $DB.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sbc $22FF00.l,X		; FF 00 FF 22 ; Subtract with carry (long,X) $22FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $23.b,S		; 83 23 ; Store accumulator (stack relative) $23.b,S [Reads: Stack Pointer, Accumulator]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $924700.l,X		; FF 00 47 92 ; Subtract with carry (long,X) $924700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $F306.w		; 0C 06 F3 ; Test and set bits $F306.w [Reads: Accumulator] [Flags: Z]
	adc $61FF.w		; 6D FF 61 ; Add $61FF.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $23007F.l,X		; FF 7F 00 23 ; Subtract with carry (long,X) $23007F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($22.b,X)		; 61 22 ; Add with carry ($22.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DB1E.w		; ED 1E DB ; Subtract $DB1E.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	bit $BB43.w,X		; 3C 43 BB ; Test bits $BB43.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jmp ($CB1F.w,X)		; 7C 1F CB ; Jump indirect indexed to ($CB1F.w,X) [Reads: X Index] [Flow: jump]
	bit $9E65.w,X		; 3C 65 9E ; Test bits $9E65.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	.db $30, $CF		; 30 CF ; Branch if minus to $30, $CF [Flow: branch]
	ora $0140E0.l,X		; 1F E0 40 01 ; Logical OR long $0140E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpx #$DFF0.w		; E0 F0 DF ; Compare #$DFF0.w with X register [Reads: X Index] [Flags: NCZ]
	jsr $609F.w		; 20 9F 60 ; Jump to subroutine at $609F.w [Writes: Stack Pointer] [Flow: call]
	rol $3DC1.w,X		; 3E C1 3D ; Rotate left $3DC1.w,X [Reads: X Index] [Flags: NCZ]
	cmp $3B.b,S		; C3 3B ; Compare accumulator (stack relative) $3B.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	dec $3A.b		; C6 3A ; Decrement $3A.b [Reads: Direct Page] [Flags: NZ]
	dec $39.b		; C6 39 ; Decrement $39.b [Reads: Direct Page] [Flags: NZ]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$23.b]		; C7 23 ; Compare accumulator (long) [$23.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $B2C4.w,X		; 3D C4 B2 ; AND accumulator with memory $B2C4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $AD.b,X		; 56 AD ; Logical shift right $AD.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $4CEF94.l,X		; 5F 94 EF 4C ; Exclusive OR accumulator with memory (long,X) $4CEF94.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($44.b)		; 72 44 ; Add with carry (indirect) ($44.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sbc $FE3D.w,X		; FD 3D FE ; Subtract with carry $FE3D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $09.b,S		; 03 09 ; OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta $96.b,S		; 83 96 ; Store accumulator (stack relative) $96.b,S [Reads: Stack Pointer, Accumulator]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	trb $EBE3.w		; 1C E3 EB ; Test and reset bits $EBE3.w [Reads: Accumulator] [Flags: Z]
	trb $43.b		; 14 43 ; Test and reset bits $43.b [Reads: Accumulator] [Flags: Z]
	sbc $810600.l,X		; FF 00 06 81 ; Subtract with carry (long,X) $810600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $01FE.w,X		; 7E FE 01 ; Rotate right $01FE.w,X [Reads: X Index] [Flags: NCZ]
	sbc $220000.l,X		; FF 00 00 22 ; Subtract with carry (long,X) $220000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$02.b],Y		; F7 02 ; Subtract with carry (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0B0024.l,X		; 7F 24 00 0B ; Add long $0B0024.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $001F03.l		; 0F 03 1F 00 ; OR accumulator with memory (long) $001F03.l [Writes: Accumulator] [Flags: NZ]
	and $002203.l,X		; 3F 03 22 00 ; AND accumulator with memory (long,X) $002203.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $01.b		; 14 01 ; Test and reset bits $01.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $126D1A.l		; 6F 1A 6D 12 ; Add with carry (long) $126D1A.l [Writes: Accumulator] [Flags: NCVZ]
	jmp ($7E23.w,X)		; 7C 23 7E ; Jump indirect indexed to ($7E23.w,X) [Reads: X Index] [Flow: jump]
	and $1A7F.w,Y		; 39 7F 1A ; AND accumulator with memory $1A7F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $010F03.l,X		; 3F 03 0F 01 ; AND accumulator with memory (long,X) $010F03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $3B2300.l		; 0F 00 23 3B ; OR accumulator with memory (long) $3B2300.l [Writes: Accumulator] [Flags: NZ]
	ora $031B.w,X		; 1D 1B 03 ; OR accumulator with memory $031B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $199900.l,X		; FF 00 99 19 ; Subtract with carry (long,X) $199900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $9F0C.w		; 8C 0C 9F ; Store Y register to $9F0C.w [Reads: Y Index]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$FC.b]		; 47 FC ; Exclusive OR accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $B2.b,S		; 63 B2 ; Add with carry (stack relative) $B2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and $0E91.w		; 2D 91 0E ; Logical AND $0E91.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($60.b,S),Y		; 73 60 ; Add with carry (stack relative indirect indexed) ($60.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	jsr $4000.w		; 20 00 40 ; Jump to subroutine at $4000.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $AC8300.l,X		; FF 00 83 AC ; Subtract with carry (long,X) $AC8300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0100.l,X		; FF 00 01 FE ; Subtract with carry (long,X) $FE0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $FFDF.w		; 20 DF FF ; Jump to subroutine at $FFDF.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $33.b		; 66 33 ; Rotate right $33.b [Reads: Direct Page] [Flags: NCZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora ($57.b,X)		; 01 57 ; Logical OR ($57.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($43.b,S),Y		; B3 43 ; Load accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	mvn $0A,$B0		; 54 B0 0A ; Move block negative $0A,$B0 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor ($B0.b,S),Y		; 53 B0 ; XOR accumulator (stack relative indirect indexed) ($B0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $B0		; 50 B0 ; Branch if overflow clear to $50, $B0 [Flow: branch]
	and $6F10DF.l		; 2F DF 10 6F ; AND accumulator with memory (long) $6F10DF.l [Writes: Accumulator] [Flags: NZ]
	ora $238C30.l		; 0F 30 8C 23 ; OR accumulator with memory (long) $238C30.l [Writes: Accumulator] [Flags: NZ]
	sta $60C003.l		; 8F 03 C0 60 ; Store accumulator (long) $60C003.l [Reads: Accumulator]
	.db $30, $FF		; 30 FF ; Branch if minus to $30, $FF [Flow: branch]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	adc $FF3FC0.l,X		; 7F C0 3F FF ; Add long $FF3FC0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF1FE0.l,X		; 3F E0 1F FF ; AND accumulator with memory (long,X) $FF1FE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $804300.l,X		; 7F 00 43 80 ; Add long $804300.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$E00E.w		; C0 0E E0 ; Compare #$E00E.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $364F00.l,X		; FF 00 4F 36 ; Subtract with carry (long,X) $364F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $463F16.l		; 6F 16 3F 46 ; Add with carry (long) $463F16.l [Writes: Accumulator] [Flags: NCVZ]
	ora $0F66.w,Y		; 19 66 0F ; OR accumulator with memory $0F66.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	ora $080022.l,X		; 1F 22 00 08 ; Logical OR long $080022.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $1F		; 70 1F ; Branch if overflow set to $70, $1F [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $22FF.w		; ED FF 22 ; Subtract $22FF.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7FFF00.l,X		; FF 00 FF 7F ; Subtract with carry (long,X) $7FFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $FF7F8C.l,X		; 3F 8C 7F FF ; AND accumulator with memory (long,X) $FF7F8C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C30900.l,X		; FF 00 09 C3 ; Subtract with carry (long,X) $C30900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $14.b,X		; 34 14 ; Test bits $14.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	trb $48C3.w		; 1C C3 48 ; Test and reset bits $48C3.w [Reads: Accumulator] [Flags: Z]
	sbc [$20.b]		; E7 20 ; Subtract with carry (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $020023.l,X		; FF 23 00 02 ; Subtract with carry (long,X) $020023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $E3.b,S		; C3 E3 ; Compare accumulator (stack relative) $E3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	lda [$83.b],Y		; B7 83 ; Load accumulator (long indexed) [$83.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $03.b,X		; B5 03 ; Load $03.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tsb $3C52.w		; 0C 52 3C ; Test and set bits $3C52.w [Reads: Accumulator] [Flags: Z]
	tsb $78.b		; 04 78 ; Test and set bits $78.b [Reads: Accumulator] [Flags: Z]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $30, $23		; 30 23 ; Branch if minus to $30, $23 [Flow: branch]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $5AE700.l,X		; FF 00 E7 5A ; Subtract with carry (long,X) $5AE700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$5B.b]		; E7 5B ; Subtract with carry (long) [$5B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$58.b]		; E7 58 ; Subtract with carry (long) [$58.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$FF5F.w		; E0 5F FF ; Compare #$FF5F.w with X register [Reads: X Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc $28FF7F.l,X		; FF 7F FF 28 ; Subtract with carry (long,X) $28FF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$04.b]		; C7 04 ; Compare accumulator (long) [$04.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	lda $44D304.l		; AF 04 D3 44 ; Load long $44D304.l into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jmp ($39D6.w)		; 6C D6 39 ; Jump indirect to ($39D6.w) [Flow: jump]
	ldx $FF41.w,Y		; BE 41 FF ; Load X register $FF41.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc $78807F.l,X		; 7F 7F 80 78 ; Add long $78807F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $9200.w,X		; 9E 00 92 ; Store zero to $9200.w,X [Reads: X Index]
	tsb $4CD2.w		; 0C D2 4C ; Test and set bits $4CD2.w [Reads: Accumulator] [Flags: Z]
	inc $FF60.w,X		; FE 60 FF ; Increment memory $FF60.w,X [Reads: X Index] [Flags: NZ]
	and $CD33.w		; 2D 33 CD ; Logical AND $CD33.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $FFFE.w		; CD FE FF ; Compare $FFFE.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($21.b,X)		; 61 21 ; Add with carry ($21.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	ora $FB00.w		; 0D 00 FB ; Logical OR $FB00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $5BFC.w		; 2C FC 5B ; Test bits $5BFC.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	lsr $FD.b,X		; 56 FD ; Logical shift right $FD.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	trb $FB.b		; 14 FB ; Test and reset bits $FB.b [Reads: Accumulator] [Flags: Z]
	asl $1F.b		; 06 1F ; Arithmetic shift left $1F.b [Reads: Direct Page] [Flags: NCZ]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpx #$0C18.w		; E0 18 0C ; Compare #$0C18.w with X register [Reads: X Index] [Flags: NCZ]
	adc ($0D.b,S),Y		; 73 0D ; Add with carry (stack relative indirect indexed) ($0D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc [$29.b],Y		; 77 29 ; Add with carry (long indexed) [$29.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $7F4633.l,X		; 7F 33 46 7F ; Add long $7F4633.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $7F0F03.l,X		; 3F 03 0F 7F ; AND accumulator with memory (long,X) $7F0F03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$1F.b],Y		; 37 1F ; AND accumulator with memory (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $3F.b		; 24 3F ; Test bits $3F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $370F.w		; 0E 0F 37 ; Arithmetic shift left $370F.w [Flags: NCZ]
	ora $0B1B06.l		; 0F 06 1B 0B ; OR accumulator with memory (long) $0B1B06.l [Writes: Accumulator] [Flags: NZ]
	and ($13.b)		; 32 13 ; AND accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $07.b		; 26 07 ; Rotate left $07.b [Reads: Direct Page] [Flags: NCZ]
	and $001F08.l		; 2F 08 1F 00 ; AND accumulator with memory (long) $001F08.l [Writes: Accumulator] [Flags: NZ]
	asl $0023.w,X		; 1E 23 00 ; Arithmetic shift left $0023.w,X [Reads: X Index] [Flags: NCZ]
	asl $04.b,X		; 16 04 ; Arithmetic shift left $04.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $1018.w		; 0C 18 10 ; Test and set bits $1018.w [Reads: Accumulator] [Flags: Z]
	ora $1E.b,S		; 03 1E ; OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $D1.b		; 00 D1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $6EF1.w		; 4E F1 6E ; Logical shift right $6EF1.w [Flags: NCZ]
	lda ($2E.b),Y		; B1 2E ; Load accumulator ($2E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($0E.b),Y		; 91 0E ; Store accumulator ($0E.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cmp $FF42.w,X		; DD 42 FF ; Compare accumulator $FF42.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $992C.w		; AC 2C 99 ; Load $992C.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $A483.w,Y		; 19 83 A4 ; OR accumulator with memory $A483.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $5300.w		; 20 00 53 ; Jump to subroutine at $5300.w [Writes: Stack Pointer] [Flow: call]
	ror $8E.b		; 66 8E ; Rotate right $8E.b [Reads: Direct Page] [Flags: NCZ]
	adc ($43.b),Y		; 71 43 ; Add with carry ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$7F80.w		; 09 80 7F ; Logical OR #$7F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Stack Pointer, Accumulator]
	sbc $CCCC00.l,X		; FF 00 CC CC ; Subtract with carry (long,X) $CCCC00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $2599.w,Y		; 99 99 25 ; Store accumulator to $2599.w,Y [Reads: Y Index, Accumulator]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($33.b,X)		; 21 33 ; Logical AND ($33.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ror $60.b		; 66 60 ; Rotate right $60.b [Reads: Direct Page] [Flags: NCZ]
	ora $E63CFC.l,X		; 1F FC 3C E6 ; Logical OR long $E63CFC.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $E3.b		; 66 E3 ; Rotate right $E3.b [Reads: Direct Page] [Flags: NCZ]
	adc $CF.b,S		; 63 CF ; Add with carry (stack relative) $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $FF5FC0.l		; 4F C0 5F FF ; Exclusive OR accumulator with memory (long) $FF5FC0.l [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $038000.l,X		; 7F 00 80 03 ; Add long $038000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $301C.w,Y		; 19 1C 30 ; OR accumulator with memory $301C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $8000.w		; 20 00 80 ; Jump to subroutine at $8000.w [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $66CC.w		; CC CC 66 ; Compare $66CC.w with Y register [Reads: Y Index] [Flags: NCZ]
	ror $33.b		; 66 33 ; Rotate right $33.b [Reads: Direct Page] [Flags: NCZ]
	and ($83.b,S),Y		; 33 83 ; AND accumulator (stack relative indirect indexed) ($83.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $23CC.w,Y		; 99 CC 23 ; Store accumulator to $23CC.w,Y [Reads: Y Index, Accumulator]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF6FFF.l,X		; 3F FF 6F FF ; AND accumulator with memory (long,X) $FF6FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFF9.w,Y		; F9 F9 FF ; Subtract with carry $FFF9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$EF.b]		; E7 EF ; Subtract with carry (long) [$EF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $FFE718.l,X		; FF 18 E7 FF ; Subtract with carry (long,X) $FFE718.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $24.b		; 06 24 ; Arithmetic shift left $24.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $05FF22.l,X		; 7F 22 FF 05 ; Add long $05FF22.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$9FFF.w		; E0 FF 9F ; Compare #$9FFF.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$807F.w		; E0 7F 80 ; Compare #$807F.w with X register [Reads: X Index] [Flags: NCZ]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00800D.l,X		; FF 0D 80 00 ; Subtract with carry (long,X) $00800D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $99993F.l,X		; 3F 3F 99 99 ; AND accumulator with memory (long,X) $99993F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $7F3FFF.l		; EF FF 3F 7F ; Subtract with carry (long) $7F3FFF.l [Writes: Accumulator] [Flags: NCVZ]
	sta $E799.w,Y		; 99 99 E7 ; Store accumulator to $E799.w,Y [Reads: Y Index, Accumulator]
	sbc [$83.b]		; E7 83 ; Subtract with carry (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	asl $C0.b		; 06 C0 ; Arithmetic shift left $C0.b [Reads: Direct Page] [Flags: NCZ]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: NCZ]
	.db $80, $66		; 80 66 ; Branch always to $80, $66 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $7F.b		; 05 7F ; Logical OR $7F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $FB		; 80 FB ; Branch always to $80, $FB [Flow: branch]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($FB.b,X)		; 01 FB ; Logical OR ($FB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFEF0E.l,X		; FF 0E EF FF ; Subtract with carry (long,X) $FFEF0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FF87FF.l		; CF FF 87 FF ; Compare accumulator (long) $FF87FF.l [Reads: Accumulator] [Flags: NCZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$E1FF.w		; C0 FF E1 ; Compare #$E1FF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $F7FFF3.l,X		; FF F3 FF F7 ; Subtract with carry (long,X) $F7FFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$4CFF.w		; 29 FF 4C ; Logical AND #$4CFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $FF0027.l,X		; 3F 27 00 FF ; AND accumulator with memory (long,X) $FF0027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $A743.w,X		; 7E 43 A7 ; Rotate right $A743.w,X [Reads: X Index] [Flags: NCZ]
	rol $BD14.w,X		; 3E 14 BD ; Rotate left $BD14.w,X [Reads: X Index] [Flags: NCZ]
	bit $0081.w,X		; 3C 81 00 ; Test bits $0081.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $7E997E.l,X		; FF 7E 99 7E ; Subtract with carry (long,X) $7E997E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $42, $7E		; 42 7E ; Reserved instruction
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1FFFC0.l,X		; 3F C0 FF 1F ; AND accumulator with memory (long,X) $1FFFC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $07EF24.l		; 0F 24 EF 07 ; OR accumulator with memory (long) $07EF24.l [Writes: Accumulator] [Flags: NZ]
	cpx #$1FE0.w		; E0 E0 1F ; Compare #$1FE0.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $00FF10.l,X		; FF 10 FF 00 ; Subtract with carry (long,X) $00FF10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $E0		; 10 E0 ; Branch if plus to $10, $E0 [Flow: branch]
	.db $30, $1F		; 30 1F ; Branch if minus to $30, $1F [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FD00.w,X		; FE 00 FD ; Increment memory $FD00.w,X [Reads: X Index] [Flags: NZ]
	inc $9E9F.w,X		; FE 9F 9E ; Increment memory $9E9F.w,X [Reads: X Index] [Flags: NZ]
	lda $FECFBE.l		; AF BE CF FE ; Load long $FECFBE.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$FC.b]		; 07 FC ; OR accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	sta $28CF40.l		; 8F 40 CF 28 ; Store accumulator (long) $28CF40.l [Reads: Accumulator]
	adc [$94.b]		; 67 94 ; Add with carry (long) [$94.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($08.b),Y		; F1 08 ; Subtract with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	cop $EE.b		; 02 EE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $E8		; D0 E8 ; Branch if not equal to $D0, $E8 [Flow: branch]
	inc $FB.b,X		; F6 FB ; Increment memory $FB.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $FF22.w		; ED 22 FF ; Subtract $FF22.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $FF00.w		; 4D 00 FF ; Exclusive OR $FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $067E.w,Y		; 99 7E 06 ; Store accumulator to $067E.w,Y [Reads: Y Index, Accumulator]
	lda #$AD7E.w		; A9 7E AD ; Load #$AD7E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ror $7E9D.w,X		; 7E 9D 7E ; Rotate right $7E9D.w,X [Reads: X Index] [Flags: NCZ]
	sta $7E44.w,Y		; 99 44 7E ; Store accumulator to $7E44.w,Y [Reads: Y Index, Accumulator]
	lda #$0027.w		; A9 27 00 ; Load #$0027.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$80.b]		; 07 80 ; OR accumulator with memory (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $E03FC0.l,X		; 7F C0 3F E0 ; Add long $E03FC0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $430CF3.l,X		; 1F F3 0C 43 ; Logical OR long $430CF3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $E70200.l,X		; FF 00 02 E7 ; Subtract with carry (long,X) $E70200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $23FF.w,Y		; 19 FF 23 ; OR accumulator with memory $23FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $F90E08.l,X		; FF 08 0E F9 ; Subtract with carry (long,X) $F90E08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF9900.l,X		; FF 00 99 FF ; Subtract with carry (long,X) $FF9900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E00023.l,X		; FF 23 00 E0 ; Subtract with carry (long,X) $E00023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $03F706.l		; 22 06 F7 03 ; Jump to subroutine long $03F706.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $0301.w,X		; FE 01 03 ; Increment memory $0301.w,X [Reads: X Index] [Flags: NZ]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr ($E2FC.w,X)		; FC FC E2 ; Jump to subroutine indirect indexed ($E2FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx $18.b		; E4 18 ; Compare $18.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $38.b		; C5 38 ; Compare $38.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	stx $71.b		; 86 71 ; Store X register to $71.b [Reads: X Index]
	inc $FC00.w,X		; FE 00 FC ; Increment memory $FC00.w,X [Reads: X Index] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $82.b,S		; 03 82 ; OR accumulator with stack relative $82.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $82, $61, $82		; 82 61 82 ; Branch always long to $82, $61, $82 [Flow: branch]
	eor $82.b		; 45 82 ; Exclusive OR $82.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$8246.w		; 09 46 82 ; Logical OR #$8246.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($05.b),Y		; 11 05 ; OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$01C4.w		; 09 C4 01 ; Logical OR #$01C4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	trb $7438.w		; 1C 38 74 ; Test and reset bits $7438.w [Reads: Accumulator] [Flags: Z]
	jsl $21E06C.l		; 22 6C E0 21 ; Jump to subroutine long $21E06C.l [Writes: Stack Pointer] [Flow: call]
	stz $3A.b,X		; 74 3A ; Store zero to $3A.b,X [Reads: X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $F8.b,S		; 03 F8 ; OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $F9.b		; 05 F9 ; Logical OR $F9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($40.b,S),Y		; F3 40 ; Subtract with carry (stack relative indirect indexed) ($40.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $96FF7F.l,X		; FF 7F FF 96 ; Subtract with carry (long,X) $96FF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $E2.b		; C4 E2 ; Compare $E2.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	inc $04.b,X		; F6 04 ; Increment memory $04.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C0018.l,X		; FF 18 00 2C ; Subtract with carry (long,X) $2C0018.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $62, $20, $E3		; 62 20 E3 ; Push effective relative address $62, $20, $E3 [Writes: Stack Pointer]
	.db $62, $43, $C3		; 62 43 C3 ; Push effective relative address $62, $43, $C3 [Writes: Stack Pointer]
	.db $42, $E0		; 42 E0 ; Reserved instruction
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc [$24.b]		; E7 24 ; Subtract with carry (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda $100040.l,X		; BF 40 00 10 ; Load long $100040.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $3C1C.w		; 1C 1C 3C ; Test and reset bits $3C1C.w [Reads: Accumulator] [Flags: Z]
	bit $0018.w,X		; 3C 18 00 ; Test bits $0018.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $E4.b		; 04 E4 ; Test and set bits $E4.b [Reads: Accumulator] [Flags: Z]
	tsb $24.b		; 04 24 ; Test and set bits $24.b [Reads: Accumulator] [Flags: Z]
	ldy $23.b		; A4 23 ; Load $23.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $23.b,S		; A3 23 ; Load accumulator (stack relative) $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	jmp $00FF58.l		; 5C 58 FF 00 ; Jump long to $00FF58.l [Flow: jump]
	sty $118C.w		; 8C 8C 11 ; Store Y register to $118C.w [Reads: Y Index]
	ora ($22.b),Y		; 11 22 ; OR accumulator with memory ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $002424.l		; 22 24 24 00 ; Jump to subroutine long $002424.l [Writes: Stack Pointer] [Flow: call]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFEE.l,X		; FF EE FF 00 ; Subtract with carry (long,X) $00FFEE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($EE.b,S),Y		; 73 EE ; Add with carry (stack relative indirect indexed) ($EE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FFDB.w,X		; DD DB FF ; Compare accumulator $FFDB.w,X [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $BA.b		; 45 BA ; Exclusive OR $BA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsr ($F8FF.w,X)		; FC FF F8 ; Jump to subroutine indirect indexed ($F8FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $4A.b		; 45 4A ; Exclusive OR $4A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $1732.w		; 2D 32 17 ; Logical AND $1732.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora ($8C.b,S),Y		; 13 8C ; OR accumulator (stack relative indirect indexed) ($8C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stx $8D.b,Y		; 96 8D ; Store X register $8D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	jsl $B01E00.l		; 22 00 1E B0 ; Jump to subroutine long $B01E00.l [Writes: Stack Pointer] [Flow: call]
	cpy #$6080.w		; C0 80 60 ; Compare #$6080.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $C020E0.l,X		; 1F E0 20 C0 ; Logical OR long $C020E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $20B890.l,X		; 5F 90 B8 20 ; Exclusive OR accumulator with memory (long,X) $20B890.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($43.b,S),Y		; F3 43 ; Subtract with carry (stack relative indirect indexed) ($43.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$44.b]		; E7 44 ; Subtract with carry (long) [$44.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr $5BFD.w		; 4E FD 5B ; Logical shift right $5BFD.w [Flags: NCZ]
	cpx #$A0DF.w		; E0 DF A0 ; Compare #$A0DF.w with X register [Reads: X Index] [Flags: NCZ]
	eor [$0C.b]		; 47 0C ; Exclusive OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	lda $76.b,X		; B5 76 ; Load $76.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$A5.b]		; 47 A5 ; Exclusive OR accumulator with memory (long) [$A5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $01.b		; 66 01 ; Rotate right $01.b [Reads: Direct Page] [Flags: NCZ]
	lda $436E.w		; AD 6E 43 ; Load $436E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $18.b,S		; 23 18 ; AND accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda ($7E.b,X)		; A1 7E ; Load accumulator ($7E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($287F.w,X)		; 7C 7F 28 ; Jump indirect indexed to ($287F.w,X) [Reads: X Index] [Flow: jump]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $02CB.w		; 2C CB 02 ; Test bits $02CB.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cmp $03CD06.l		; CF 06 CD 03 ; Compare accumulator (long) $03CD06.l [Reads: Accumulator] [Flags: NCZ]
	cmp [$00.b]		; C7 00 ; Compare accumulator (long) [$00.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpy #$C600.w		; C0 00 C6 ; Compare #$C600.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $C7.b		; 05 C7 ; Logical OR $C7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $D7.b		; 04 D7 ; Test and set bits $D7.b [Reads: Accumulator] [Flags: Z]
	trb $74.b		; 14 74 ; Test and reset bits $74.b [Reads: Accumulator] [Flags: Z]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc $687878.l,X		; 7F 78 78 68 ; Add long $687878.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$79.b]		; E7 79 ; Subtract with carry (long) [$79.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F9.b]		; E7 F9 ; Subtract with carry (long) [$F9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror $58.b		; 66 58 ; Rotate right $58.b [Reads: Direct Page] [Flags: NCZ]
	lda $3FD3.w		; AD D3 3F ; Load $3FD3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($7E.b,X)		; C1 7E ; Compare accumulator ($7E.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	.db $80, $FD		; 80 FD ; Branch always to $80, $FD [Flow: branch]
	cop $CF.b		; 02 CF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $300F01.l		; 22 01 0F 30 ; Jump to subroutine long $300F01.l [Writes: Stack Pointer] [Flow: call]
	cmp $28D827.l		; CF 27 D8 28 ; Compare accumulator (long) $28D827.l [Reads: Accumulator] [Flags: NCZ]
	cmp [$3A.b],Y		; D7 3A ; Compare accumulator (long indexed) [$3A.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp #$CC3D.w		; C9 3D CC ; Compare #$CC3D.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	rol $CE.b,X		; 36 CE ; Rotate left $CE.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$9C.b]		; C7 9C ; Compare accumulator (long) [$9C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	adc $22.b,S		; 63 22 ; Add with carry (stack relative) $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: NCZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($60FE.w)		; 6C FE 60 ; Jump indirect to ($60FE.w) [Flow: jump]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp ($0201.w,X)		; 7C 01 02 ; Jump indirect indexed to ($0201.w,X) [Reads: X Index] [Flow: jump]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $0122.w,X		; FD 22 01 ; Subtract with carry $0122.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $FC06.w		; 0E 06 FC ; Arithmetic shift left $FC06.w [Flags: NCZ]
	ora $F60FFA.l		; 0F FA 0F F6 ; OR accumulator with memory (long) $F60FFA.l [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc ($FD.b)		; F2 FD ; Subtract with carry (indirect) ($FD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $23FF.w,X		; FE FF 23 ; Increment memory $23FF.w,X [Reads: X Index] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $FA.b		; 04 FA ; Test and set bits $FA.b [Reads: Accumulator] [Flags: Z]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0F.b		; 45 0F ; Exclusive OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $FFBFFF.l,X		; 5F FF BF FF ; Exclusive OR accumulator with memory (long,X) $FFBFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($F8FF.w,X)		; 7C FF F8 ; Jump indirect indexed to ($F8FF.w,X) [Reads: X Index] [Flow: jump]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jsr ($0000.w,X)		; FC 00 00 ; Jump to subroutine indirect indexed ($0000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora [$DF.b]		; 07 DF ; OR accumulator with memory (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $FFFF7F.l,X		; BF 7F FF FF ; Load long $FFFF7F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $003030.l		; CF 30 30 00 ; Compare accumulator (long) $003030.l [Reads: Accumulator] [Flags: NCZ]
	cmp $00FD48.l		; CF 48 FD 00 ; Compare accumulator (long) $00FD48.l [Reads: Accumulator] [Flags: NCZ]
	adc $7700.w		; 6D 00 77 ; Add $7700.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $30		; 80 30 ; Branch always to $80, $30 [Flow: branch]
	cmp $920230.l		; CF 30 02 92 ; Compare accumulator (long) $920230.l [Reads: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $27.b,S		; 03 27 ; OR accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pea $F402.w		; F4 02 F4 ; Push absolute address $F402.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $82, $D4, $03		; 82 D4 03 ; Branch always long to $82, $D4, $03 [Flow: branch]
	inc $01.b,X		; F6 01 ; Increment memory $01.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	ora $0F00FF.l,X		; 1F FF 00 0F ; Logical OR long $0F00FF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $070F2F.l		; 0F 2F 0F 07 ; OR accumulator with memory (long) $070F2F.l [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $9D.b,S		; 43 9D ; Exclusive OR accumulator with stack relative $9D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $8D00.w,X		; 7E 00 8D ; Rotate right $8D00.w,X [Reads: X Index] [Flags: NCZ]
	mvp $B9,$7E		; 44 7E B9 ; Move block positive $B9,$7E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $81.b		; 05 81 ; Logical OR $81.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $BD42.w,X		; 7E 42 BD ; Rotate right $BD42.w,X [Reads: X Index] [Flags: NCZ]
	bit $2742.w,X		; 3C 42 27 ; Test bits $2742.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $867E.w,Y		; 99 7E 86 ; Store accumulator to $867E.w,Y [Reads: Y Index, Accumulator]
	jmp ($4400.w,X)		; 7C 00 44 ; Jump indirect indexed to ($4400.w,X) [Reads: X Index] [Flow: jump]
	ror $27A9.w,X		; 7E A9 27 ; Rotate right $27A9.w,X [Reads: X Index] [Flags: NCZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $9AAE.w		; 2D AE 9A ; Logical AND $9AAE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $FB54.w,X		; 9D 54 FB ; Store accumulator to $FB54.w,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc [$10.b],Y		; F7 10 ; Subtract with carry (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $801FE0.l		; EF E0 1F 80 ; Subtract with carry (long) $801FE0.l [Writes: Accumulator] [Flags: NCVZ]
	jmp ($7B83.w,X)		; 7C 83 7B ; Jump indirect indexed to ($7B83.w,X) [Reads: X Index] [Flow: jump]
	.db $50, $60		; 50 60 ; Branch if overflow clear to $50, $60 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FFD900.l,X		; FF 00 D9 FF ; Subtract with carry (long,X) $FFD900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$00E6.w		; C0 E6 00 ; Compare #$00E6.w with Y register [Reads: Y Index] [Flags: NCZ]
	jmp ($6500.w)		; 6C 00 65 ; Jump indirect to ($6500.w) [Flow: jump]
	sta $6D.b,S		; 83 6D ; Store accumulator (stack relative) $6D.b,S [Reads: Stack Pointer, Accumulator]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $33		; 30 33 ; Branch if minus to $30, $33 [Flow: branch]
	sbc $190000.l,X		; FF 00 00 19 ; Subtract with carry (long,X) $190000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($9A.b,S),Y		; 93 9A ; Store accumulator (stack relative indirect indexed) ($9A.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $95.b		; 00 95 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda ($AF.b),Y		; B1 AF ; Load accumulator ($AF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($FB.b,X)		; 81 FB ; Store accumulator ($FB.b,X) [Reads: Direct Page, Accumulator, X Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $6264.w		; 4D 64 62 ; Exclusive OR $6264.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FCBF01.l,X		; FF 01 BF FC ; Subtract with carry (long,X) $FCBF01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $406000.l,X		; FF 00 60 40 ; Subtract with carry (long,X) $406000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $B2.b		; 04 B2 ; Test and set bits $B2.b [Reads: Accumulator] [Flags: Z]
	sta $43FE.w,Y		; 99 FE 43 ; Store accumulator to $43FE.w,Y [Reads: Y Index, Accumulator]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $AF57BB.l		; 5C BB 57 AF ; Jump long to $AF57BB.l [Flow: jump]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	lda [$4F.b],Y		; B7 4F ; Load accumulator (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $31CE60.l,X		; 9F 60 CE 31 ; Store accumulator (long,X) $31CE60.l,X [Reads: Accumulator, X Index]
	cpx #$FF1F.w		; E0 1F FF ; Compare #$FF1F.w with X register [Reads: X Index] [Flags: NCZ]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora ($80.b),Y		; 11 80 ; OR accumulator with memory ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$807F.w		; C0 7F 80 ; Compare #$807F.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpx #$DF1F.w		; E0 1F DF ; Compare #$DF1F.w with X register [Reads: X Index] [Flags: NCZ]
	and $B670B0.l,X		; 3F B0 70 B6 ; AND accumulator with memory (long,X) $B670B0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $D6.b,X		; 76 D6 ; Rotate right $D6.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $A4.b,X		; 36 A4 ; Rotate left $A4.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	stz $A0.b		; 64 A0 ; Store zero to $A0.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0F1200.l		; 22 00 12 0F ; Jump to subroutine long $0F1200.l [Writes: Stack Pointer] [Flow: call]
	ora #$1B09.w		; 09 09 1B ; Logical OR #$1B09.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $4E04FB.l,X		; 1F FB 04 4E ; Logical OR long $4E04FB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($B1.b),Y		; B1 B1 ; Load accumulator ($B1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $085C5C.l,X		; FF 5C 5C 08 ; Subtract with carry (long,X) $085C5C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $A3.b		; 04 A3 ; Test and set bits $A3.b [Reads: Accumulator] [Flags: Z]
	sbc [$CF.b],Y		; F7 CF ; Subtract with carry (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $C343FF.l		; 6F FF 43 C3 ; Add with carry (long) $C343FF.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $45.b		; 04 45 ; Test and set bits $45.b [Reads: Accumulator] [Flags: Z]
	wai		; CB ; Wait for interrupt
	tsb $C301.w		; 0C 01 C3 ; Test and set bits $C301.w [Reads: Accumulator] [Flags: Z]
	tsb $83.b		; 04 83 ; Test and set bits $83.b [Reads: Accumulator] [Flags: Z]
	ldy $0101.w,X		; BC 01 01 ; Load Y register $0101.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $780E70.l		; 22 70 0E 78 ; Jump to subroutine long $780E70.l [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora $1F2300.l,X		; 1F 00 23 1F ; Logical OR long $1F2300.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $1C.b		; 64 1C ; Store zero to $1C.b
	ldx $7E.b		; A6 7E ; Load $7E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	adc [$DC.b],Y		; 77 DC ; Add with carry (long indexed) [$DC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $000B40.l,X		; DF 40 0B 00 ; Compare accumulator (long,X) $000B40.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $2F2C.w		; 20 2C 2F ; Jump to subroutine at $2F2C.w [Writes: Stack Pointer] [Flow: call]
	cmp $06F930.l		; CF 30 F9 06 ; Compare accumulator (long) $06F930.l [Reads: Accumulator] [Flags: NCZ]
	eor $C1.b		; 45 C1 ; Exclusive OR $C1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($13.b)		; D2 13 ; Compare accumulator (indirect) ($13.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	rep #$03		; C2 03 ; Reset processor status bits #$03 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cpy $07.b		; C4 07 ; Compare $07.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $6C0A7C.l		; 22 7C 0A 6C ; Jump to subroutine long $6C0A7C.l [Writes: Stack Pointer] [Flow: call]
	jmp ($FF78.w,X)		; 7C 78 FF ; Jump indirect indexed to ($FF78.w,X) [Reads: X Index] [Flow: jump]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $C8.b		; 02 C8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $45019F.l,X		; 1F 9F 01 45 ; Logical OR long $45019F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $0500.w,X		; 9E 00 05 ; Store zero to $0500.w,X [Reads: X Index]
	sta ($0C.b)		; 92 0C ; Store accumulator (indirect) ($0C.b) [Reads: Direct Page, Accumulator]
	adc $607D.w,X		; 7D 7D 60 ; Add $607D.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $61.b,S		; 23 61 ; AND accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $437CBB.l,X		; FF BB 7C 43 ; Subtract with carry (long,X) $437CBB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $930400.l,X		; FF 00 04 93 ; Subtract with carry (long,X) $930400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF2222.l,X		; FF 22 22 FF ; Subtract with carry (long,X) $FF2222.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $83		; 10 83 ; Branch if plus to $10, $83 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $F800.w,X		; DD 00 F8 ; Compare accumulator $F800.w,X [Reads: X Index] [Flags: NCZ]
	sbc $FFFBFC.l,X		; FF FC FB FF ; Subtract with carry (long,X) $FFFBFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $4FBF.w		; 9C BF 4F ; Store zero to $4FBF.w
	sta $9FFF6F.l,X		; 9F 6F FF 9F ; Store accumulator (long,X) $9FFF6F.l,X [Reads: Accumulator, X Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	sbc $FE2FE0.l,X		; FF E0 2F FE ; Subtract with carry (long,X) $FE2FE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $FBBFFD.l,X		; 7F FD BF FB ; Add long $FBBFFD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $EFEFF7.l,X		; DF F7 EF EF ; Compare accumulator (long,X) $EFEFF7.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc [$DF.b],Y		; F7 DF ; Subtract with carry (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $9F7FBF.l,X		; DF BF 7F 9F ; Compare accumulator (long,X) $9F7FBF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	adc $E738C7.l,X		; 7F C7 38 E7 ; Add long $E738C7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F10F80.l,X		; 7F 80 0F F1 ; Add long $F10F80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$10.b],Y		; 17 10 ; OR accumulator with memory (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($F0.b,X)		; E1 F0 ; Subtract with carry ($F0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $00E8.w,Y		; 19 E8 00 ; OR accumulator with memory $00E8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $060F.w		; EE 0F 06 ; Increment $060F.w [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $8500.w,X		; FE 00 85 ; Increment memory $8500.w,X [Reads: X Index] [Flags: NZ]
	lsr $00.b,X		; 56 00 ; Logical shift right $00.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($1B.b,S),Y		; 13 1B ; OR accumulator (stack relative indirect indexed) ($1B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FBF7.w		; ED F7 FB ; Subtract $FBF7.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$17.b]		; 07 17 ; OR accumulator with memory (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $561828.l		; 0F 28 18 56 ; OR accumulator with memory (long) $561828.l [Writes: Accumulator] [Flags: NZ]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	adc ($DE.b,X)		; 61 DE ; Add with carry ($DE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $227CD3.l,X		; 3F D3 7C 22 ; AND accumulator with memory (long,X) $227CD3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $0000.w,X		; 1E 00 00 ; Arithmetic shift left $0000.w,X [Reads: X Index] [Flags: NCZ]
	stx $77.b		; 86 77 ; Store X register to $77.b [Reads: X Index]
	sta $6E.b		; 85 6E ; Store accumulator to $6E.b [Reads: Accumulator]
	stz $9458.w,X		; 9E 58 94 ; Store zero to $9458.w,X [Reads: X Index]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cpx #$E010.w		; E0 10 E0 ; Compare #$E010.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$0022.w		; E0 22 00 ; Compare #$0022.w with X register [Reads: X Index] [Flags: NCZ]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $66.b		; 06 66 ; Arithmetic shift left $66.b [Reads: Direct Page] [Flags: NCZ]
	sta $00FF.w,Y		; 99 FF 00 ; Store accumulator to $00FF.w,Y [Reads: Y Index, Accumulator]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $F9.b,S		; 03 F9 ; OR accumulator with stack relative $F9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($FA.b,X)		; 61 FA ; Add with carry ($FA.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $F4.b,S		; 03 F4 ; OR accumulator with stack relative $F4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$71.b]		; C7 71 ; Compare accumulator (long) [$71.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor ($3B.b,X)		; 41 3B ; Exclusive OR accumulator with memory ($3B.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $3C.b,S		; 03 3C ; OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $131C.w		; 20 1C 13 ; Jump to subroutine at $131C.w [Writes: Stack Pointer] [Flow: call]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	stx $43C4.w		; 8E C4 43 ; Store X register to $43C4.w [Reads: X Index]
	jsr $40BF.w		; 20 BF 40 ; Jump to subroutine at $40BF.w [Writes: Stack Pointer] [Flow: call]
	sta $4B42.w,X		; 9D 42 4B ; Store accumulator to $4B42.w,X [Reads: Accumulator, X Index]
	lda $0166.w,Y		; B9 66 01 ; Load $0166.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $7090.w		; 0D 90 70 ; Logical OR $7090.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	cpy #$A020.w		; C0 20 A0 ; Compare #$A020.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $D16E.w		; AE 6E D1 ; Load $D16E.w into X register [Writes: X Index] [Flags: NZ]
	and $8319E6.l,X		; 3F E6 19 83 ; AND accumulator with memory (long,X) $8319E6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $02.b		; 66 02 ; Rotate right $02.b [Reads: Direct Page] [Flags: NCZ]
	cop $1F.b		; 02 1F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $002411.l,X		; 1F 11 24 00 ; Logical OR long $002411.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($84.b)		; 12 84 ; OR accumulator with memory (indirect) ($84.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sty $C0.b		; 84 C0 ; Store Y register to $C0.b [Reads: Y Index]
	cpy #$1111.w		; C0 11 11 ; Compare #$1111.w with Y register [Reads: Y Index] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $EF56FF.l		; EF FF 56 EF ; Subtract with carry (long) $EF56FF.l [Writes: Accumulator] [Flags: NCVZ]
	lda $FF46.w,Y		; B9 46 FF ; Load $FF46.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $2264EE.l,X		; 3F EE 64 22 ; AND accumulator with memory (long,X) $2264EE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $07.b		; 04 07 ; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	bit $22.b,X		; 34 22 ; Test bits $22.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	and [$1E.b],Y		; 37 1E ; AND accumulator with memory (long indexed) [$1E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsr ($FBFF.w,X)		; FC FF FB ; Jump to subroutine indirect indexed ($FBFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $0700FF.l,X		; FF FF 00 07 ; Subtract with carry (long,X) $0700FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4FCCBB.l,X		; FF BB CC 4F ; Subtract with carry (long,X) $4FCCBB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $9B		; 70 9B ; Branch if overflow set to $70, $9B [Flow: branch]
	stz $E060.w		; 9C 60 E0 ; Store zero to $E060.w
	cmp $23FF3F.l,X		; DF 3F FF 23 ; Compare accumulator (long,X) $23FF3F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $60.b,S		; 83 60 ; Store accumulator (stack relative) $60.b,S [Reads: Stack Pointer, Accumulator]
	ora $CFC000.l,X		; 1F 00 C0 CF ; Logical OR long $CFC000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $EE11F7.l		; 0F F7 11 EE ; OR accumulator with memory (long) $EE11F7.l [Writes: Accumulator] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FA.b,X		; 15 FA ; OR accumulator with memory $FA.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $D8.b,S		; 03 D8 ; OR accumulator with stack relative $D8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($F9.b,S),Y		; 33 F9 ; AND accumulator (stack relative indirect indexed) ($F9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($70.b)		; 32 70 ; AND accumulator with memory (indirect) ($70.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($42.b),Y		; 51 42 ; Exclusive OR accumulator with memory ($42.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $F61244.l		; 22 44 12 F6 ; Jump to subroutine long $F61244.l [Writes: Stack Pointer] [Flow: call]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc ($FC.b)		; F2 FC ; Subtract with carry (indirect) ($FC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor ($7C.b)		; 52 7C ; Exclusive OR accumulator with memory (indirect) ($7C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $0BF8.w		; 9C F8 0B ; Store zero to $0BF8.w
	sbc $887C.w,X		; FD 7C 88 ; Subtract with carry $887C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $6AFE29.l,X		; FF 29 FE 6A ; Subtract with carry (long,X) $6AFE29.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($43.b,X)		; 81 43 ; Store accumulator ($43.b,X) [Reads: Direct Page, Accumulator, X Index]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$012B.w		; E0 2B 01 ; Compare #$012B.w with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $70		; B0 70 ; Branch if carry set to $B0, $70 [Flow: branch]
	ldx $66.b		; A6 66 ; Load $66.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	dec $36.b,X		; D6 36 ; Decrement memory $36.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sec		; 38 ; Set carry flag [Flags: C]
	cpy #$D230.w		; C0 30 D2 ; Compare #$D230.w with Y register [Reads: Y Index] [Flags: NCZ]
	and ($B0.b)		; 32 B0 ; AND accumulator with memory (indirect) ($B0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $70, $B8		; 70 B8 ; Branch if overflow set to $70, $B8 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $070B19.l		; 0F 19 0B 07 ; OR accumulator with memory (long) $070B19.l [Writes: Accumulator] [Flags: NZ]
	ora $070F0D.l		; 0F 0D 0F 07 ; OR accumulator with memory (long) $070F0D.l [Writes: Accumulator] [Flags: NZ]
	sbc $3FFF7F.l,X		; FF 7F FF 3F ; Subtract with carry (long,X) $3FFF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $BB7F3C.l,X		; FF 3C 7F BB ; Subtract with carry (long,X) $BB7F3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FF75.w,X		; FE 75 FF ; Increment memory $FF75.w,X [Reads: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $0CFFDB.l,X		; FF DB FF 0C ; Subtract with carry (long,X) $0CFFDB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $83FCFF.l,X		; FF FF FC 83 ; Subtract with carry (long,X) $83FCFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($03.b)		; D2 03 ; Compare accumulator (indirect) ($03.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$C0.b],Y		; 97 C0 ; Store accumulator (long indexed) [$C0.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora $14.b,S		; 03 14 ; OR accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $0E.b,X		; F6 0E ; Increment memory $0E.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $F16E00.l,X		; FF 00 6E F1 ; Subtract with carry (long,X) $F16E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$D9.b],Y		; 57 D9 ; Exclusive OR accumulator with memory (long indexed) [$D9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $D8.b,X		; 56 D8 ; Logical shift right $D8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldx $78.b,Y		; B6 78 ; Load X register $78.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lsr $B8.b,X		; 56 B8 ; Logical shift right $B8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dec $38.b		; C6 38 ; Decrement $38.b [Reads: Direct Page] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FB0A00.l,X		; FF 00 0A FB ; Subtract with carry (long,X) $FB0A00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $42, $91		; 42 91 ; Reserved instruction
	lda #$1404.w		; A9 04 14 ; Load #$1404.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: NCZ]
	sbc $22FF00.l		; EF 00 FF 22 ; Subtract with carry (long) $22FF00.l [Writes: Accumulator] [Flags: NCVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $46.b		; 04 46 ; Test and set bits $46.b [Reads: Accumulator] [Flags: Z]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsl $8510FF.l		; 22 FF 10 85 ; Jump to subroutine long $8510FF.l [Writes: Stack Pointer] [Flow: call]
	lsr $B3.b		; 46 B3 ; Logical shift right $B3.b [Reads: Direct Page] [Flags: NCZ]
	jmp ($78A7.w,X)		; 7C A7 78 ; Jump indirect indexed to ($78A7.w,X) [Reads: X Index] [Flow: jump]
	cmp $78C720.l,X		; DF 20 C7 78 ; Compare accumulator (long,X) $78C720.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cmp $48DF40.l		; CF 40 DF 48 ; Compare accumulator (long) $48DF40.l [Reads: Accumulator] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $70, $38		; 70 38 ; Branch if overflow set to $70, $38 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $0C		; 30 0C ; Branch if minus to $30, $0C [Flow: branch]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0ECF.w		; 0C CF 0E ; Test and set bits $0ECF.w [Reads: Accumulator] [Flags: Z]
	cmp $30FF00.l,X		; DF 00 FF 30 ; Compare accumulator (long,X) $30FF00.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $032218.l,X		; FF 18 22 03 ; Subtract with carry (long,X) $032218.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	.db $30, $3F		; 30 3F ; Branch if minus to $30, $3F [Flow: branch]
	ora $FF4307.l		; 0F 07 43 FF ; OR accumulator with memory (long) $FF4307.l [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $00FF80.l,X		; 7F 80 FF 00 ; Add long $00FF80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FF01.w,X		; FE 01 FF ; Increment memory $FF01.w,X [Reads: X Index] [Flags: NZ]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $23FE00.l,X		; FF 00 FE 23 ; Subtract with carry (long,X) $23FE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F5000D.l,X		; FF 0D 00 F5 ; Subtract with carry (long,X) $F5000D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$609F.w		; E0 9F 60 ; Compare #$609F.w with X register [Reads: X Index] [Flags: NCZ]
	cmp $FF5FEC.l,X		; DF EC 5F FF ; Compare accumulator (long,X) $FF5FEC.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ora ($F3.b,S),Y		; 13 F3 ; OR accumulator (stack relative indirect indexed) ($F3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpx #$0026.w		; E0 26 00 ; Compare #$0026.w with X register [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	jsr ($5E23.w,X)		; FC 23 5E ; Jump to subroutine indirect indexed ($5E23.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($2F.b),Y		; 31 2F ; AND accumulator with memory ($2F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$08.b],Y		; 17 08 ; OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $002E.w		; 0C 2E 00 ; Test and set bits $002E.w [Reads: Accumulator] [Flags: Z]
	sbc $FF0043.l,X		; FF 43 00 FF ; Subtract with carry (long,X) $FF0043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$3F6B.w		; E0 6B 3F ; Compare #$3F6B.w with X register [Reads: X Index] [Flags: NCZ]
	.db $80, $67		; 80 67 ; Branch always to $80, $67 [Flow: branch]
	brk $5C.b		; 00 5C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jmp ($3C3B.w,X)		; 7C 3B 3C ; Jump indirect indexed to ($3C3B.w,X) [Reads: X Index] [Flow: jump]
	sta $F6.b,S		; 83 F6 ; Store accumulator (stack relative) $F6.b,S [Reads: Stack Pointer, Accumulator]
	cmp $0000.w,X		; DD 00 00 ; Compare accumulator $0000.w,X [Reads: X Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $83.b,S		; A3 83 ; Load accumulator (stack relative) $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $19.b,S		; 43 19 ; Exclusive OR accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $6EC6.w,Y		; 39 C6 6E ; AND accumulator with memory $6EC6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$73F4.w		; A9 F4 73 ; Load #$73F4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$39.b],Y		; 17 39 ; OR accumulator with memory (long indexed) [$39.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp [$0B.b]		; C7 0B ; Compare accumulator (long) [$0B.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $8CFE.w,X		; 9E FE 8C ; Store zero to $8CFE.w,X [Reads: X Index]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora [$C7.b]		; 07 C7 ; OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc [$FB.b],Y		; F7 FB ; Subtract with carry (long indexed) [$FB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	adc $4A86.w,Y		; 79 86 4A ; Add $4A86.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $4F.b,X		; B5 4F ; Load $4F.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $D83F.w,Y		; B9 3F D8 ; Load $D83F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $708D01.l,X		; FF 01 8D 70 ; Subtract with carry (long,X) $708D01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $5F70.w,X		; BD 70 5F ; Load $5F70.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $31.b		; 00 31 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0C1D.w,Y		; 39 1D 0C ; AND accumulator with memory $0C1D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $7A.b,X		; 76 7A ; Rotate right $7A.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $C738.w,X		; 3C 38 C7 ; Test bits $C738.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ror $B9.b,X		; 76 B9 ; Rotate right $B9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $7EB9.w,X		; 9E B9 7E ; Store zero to $7EB9.w,X [Reads: X Index]
	wai		; CB ; Wait for interrupt
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sbc $8D7E70.l,X		; FF 70 7E 8D ; Subtract with carry (long,X) $8D7E70.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($D1.b)		; 32 D1 ; AND accumulator with memory (indirect) ($D1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $76.b		; 06 76 ; Arithmetic shift left $76.b [Reads: Direct Page] [Flags: NCZ]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rol $7FE1.w,X		; 3E E1 7F ; Rotate left $7FE1.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	and $9A00.w,X		; 3D 00 9A ; AND accumulator with memory $9A00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $31.b,X		; F5 31 ; Subtract $31.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($12.b,S),Y		; 73 12 ; Add with carry (stack relative indirect indexed) ($12.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora ($EE.b)		; 12 EE ; OR accumulator with memory (indirect) ($EE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $DF.b		; 25 DF ; Logical AND $DF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$C300.w		; C9 00 C3 ; Compare #$C300.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc [$0E.b]		; 67 0E ; Add with carry (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sty $180C.w		; 8C 0C 18 ; Store Y register to $180C.w [Reads: Y Index]
	.db $30, $80		; 30 80 ; Branch if minus to $30, $80 [Flow: branch]
	adc $901F60.l,X		; 7F 60 1F 90 ; Add long $901F60.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FEC7CC.l		; 0F CC C7 FE ; OR accumulator with memory (long) $FEC7CC.l [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $30E302.l,X		; FF 02 E3 30 ; Subtract with carry (long,X) $30E302.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0001.w,X		; FE 01 00 ; Increment memory $0001.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $E0		; 80 E0 ; Branch always to $80, $E0 [Flow: branch]
	.db $30, $83		; 30 83 ; Branch if minus to $30, $83 [Flow: branch]
	eor $4500.w,X		; 5D 00 45 ; Exclusive OR accumulator with memory $4500.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$FC03.w		; 09 03 FC ; Logical OR #$FC03.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $847CF3.l		; 0F F3 7C 84 ; OR accumulator with memory (long) $847CF3.l [Writes: Accumulator] [Flags: NZ]
	inc $2524.w,X		; FE 24 25 ; Increment memory $2524.w,X [Reads: X Index] [Flags: NZ]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$34.b]		; E7 34 ; Subtract with carry (long) [$34.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $53.b,S		; C3 53 ; Compare accumulator (stack relative) $53.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	.db $80, $EB		; 80 EB ; Branch always to $80, $EB [Flow: branch]
	jsl $FE16F7.l		; 22 F7 16 FE ; Jump to subroutine long $FE16F7.l [Writes: Stack Pointer] [Flow: call]
	eor $63DD.w		; 4D DD 63 ; Exclusive OR $63DD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $081C.w,X		; 3C 1C 08 ; Test bits $081C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc [$3A.b],Y		; 77 3A ; Add with carry (long indexed) [$3A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($3E.b),Y		; 31 3E ; AND accumulator with memory ($3E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($3A.b),Y		; 31 3A ; AND accumulator with memory ($3A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($43.b),Y		; 31 43 ; AND accumulator with memory ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $01F5.w,X		; FE F5 01 ; Increment memory $01F5.w,X [Reads: X Index] [Flags: NZ]
	asl $4305.w		; 0E 05 43 ; Arithmetic shift left $4305.w [Flags: NCZ]
	rol $0275.w,X		; 3E 75 02 ; Rotate left $0275.w,X [Reads: X Index] [Flags: NCZ]
	pea $F4F0.w		; F4 F0 F4 ; Push absolute address $F4F0.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	jsl $8019F0.l		; 22 F0 19 80 ; Jump to subroutine long $8019F0.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $FE		; 80 FE ; Branch always to $80, $FE [Flow: branch]
	adc $FBBFFD.l,X		; 7F FD BF FB ; Add long $FBBFFD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $EFEFF7.l,X		; DF F7 EF EF ; Compare accumulator (long,X) $EFEFF7.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc [$DF.b],Y		; F7 DF ; Subtract with carry (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $437FBF.l,X		; DF BF 7F 43 ; Compare accumulator (long,X) $437FBF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $FC0A00.l,X		; FF 00 0A FC ; Subtract with carry (long,X) $FC0A00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $3BCF00.l,X		; 1F 00 CF 3B ; Logical OR long $3BCF00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $6F.b		; 84 6F ; Store Y register to $6F.b [Reads: Y Index]
	ora #$145F.w		; 09 5F 14 ; Logical OR #$145F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $C23EA9.l,X		; 7F A9 3E C2 ; Add long $C23EA9.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $6CC4.w,X		; 3C C4 6C ; Test bits $6CC4.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sty $30.b		; 84 30 ; Store Y register to $30.b [Reads: Y Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $B0, $A3		; B0 A3 ; Branch if carry set to $B0, $A3 [Flow: branch]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta $0C.b,S		; 83 0C ; Store accumulator (stack relative) $0C.b,S [Reads: Stack Pointer, Accumulator]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp [$C6.b]		; C7 C6 ; Compare accumulator (long) [$C6.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	and $7D01.w,Y		; 39 01 7D ; AND accumulator with memory $7D01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $38C5.w,X		; 3C C5 38 ; Test bits $38C5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	inc $22FE.w,X		; FE FE 22 ; Increment memory $22FE.w,X [Reads: X Index] [Flags: NZ]
	sbc $FF120E.l,X		; FF 0E 12 FF ; Subtract with carry (long,X) $FF120E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $64FF.w		; 20 FF 64 ; Jump to subroutine at $64FF.w [Writes: Stack Pointer] [Flow: call]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	eor ($DF.b,X)		; 41 DF ; Exclusive OR accumulator with memory ($DF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $77.b,X		; 56 77 ; Logical shift right $77.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsl $C90094.l		; 22 94 00 C9 ; Jump to subroutine long $C90094.l [Writes: Stack Pointer] [Flow: call]
	jsl $241300.l		; 22 00 13 24 ; Jump to subroutine long $241300.l [Writes: Stack Pointer] [Flow: call]
	jsr $4900.w		; 20 00 49 ; Jump to subroutine at $4900.w [Writes: Stack Pointer] [Flow: call]
	rol $00.b,X		; 36 00 ; Rotate left $00.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $23FD02.l,X		; FF 02 FD 23 ; Subtract with carry (long,X) $23FD02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp.w [$8877]		; DC 77 88 ; Jump long indirect [$8877] [Flow: jump]
	sbc $23DC00.l,X		; FF 00 DC 23 ; Subtract with carry (long,X) $23DC00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $23.b,S		; 63 23 ; Add with carry (stack relative) $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DD49E0.l,X		; FF E0 49 DD ; Subtract with carry (long,X) $DD49E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $E7.b,S		; 63 E7 ; Add with carry (stack relative) $E7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	stz $8BFC.w		; 9C FC 8B ; Store zero to $8BFC.w
	adc $3BC7.w,Y		; 79 C7 3B ; Add $3BC7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$73.b]		; E7 73 ; Subtract with carry (long) [$73.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $B08FD3.l		; CF D3 8F B0 ; Compare accumulator (long) $B08FD3.l [Reads: Accumulator] [Flags: NCZ]
	ora $1810BF.l		; 0F BF 10 18 ; OR accumulator with memory (long) $1810BF.l [Writes: Accumulator] [Flags: NZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $E2404F.l		; 2F 4F 40 E2 ; AND accumulator with memory (long) $E2404F.l [Writes: Accumulator] [Flags: NZ]
	inc $F2.b		; E6 F2 ; Increment $F2.b [Reads: Direct Page] [Flags: NZ]
	sbc ($D1.b)		; F2 D1 ; Subtract with carry (indirect) ($D1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$818B.w		; C0 8B 81 ; Compare #$818B.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc [$E1.b]		; E7 E1 ; Subtract with carry (long) [$E1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sbc ($4A.b,X)		; E1 4A ; Subtract with carry ($4A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rep #$45		; C2 45 ; Reset processor status bits #$45 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cmp ($1D.b,X)		; C1 1D ; Compare accumulator ($1D.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sbc $FDFE.w		; ED FE FD ; Subtract $FDFE.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc $3D9D.w,X		; FD 9D 3D ; Subtract with carry $3D9D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $E011.w,X		; FE 11 E0 ; Increment memory $E011.w,X [Reads: X Index] [Flags: NZ]
	and $E24FF6.l		; 2F F6 4F E2 ; AND accumulator with memory (long) $E24FF6.l [Writes: Accumulator] [Flags: NZ]
	eor [$EA.b]		; 47 EA ; Exclusive OR accumulator with memory (long) [$EA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $F4.b,S		; 03 F4 ; OR accumulator with stack relative $F4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $FB17F6.l		; 2F F6 17 FB ; AND accumulator with memory (long) $FB17F6.l [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1000.w		; 0E 00 10 ; Arithmetic shift left $1000.w [Flags: NCZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	jsl $2CE000.l		; 22 00 E0 2C ; Jump to subroutine long $2CE000.l [Writes: Stack Pointer] [Flow: call]
	rol $6ECD.w		; 2E CD 6E ; Rotate left $6ECD.w [Flags: NCZ]
	and $7C.b,S		; 23 7C ; AND accumulator with stack relative $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $13BA.w,Y		; 39 BA 13 ; AND accumulator with memory $13BA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $43.b		; C5 43 ; Compare $43.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	inc $0803.w,X		; FE 03 08 ; Increment memory $0803.w,X [Reads: X Index] [Flags: NZ]
	cmp [$00.b]		; C7 00 ; Compare accumulator (long) [$00.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $829818.l,X		; FF 18 98 82 ; Subtract with carry (long,X) $829818.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $00,$38		; 44 38 00 ; Move block positive $00,$38 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	and $28DBE9.l,X		; 3F E9 DB 28 ; AND accumulator with memory (long,X) $28DBE9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $00.b,X		; B4 00 ; Load Y register $00.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $87.b,S		; 03 87 ; OR accumulator with stack relative $87.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $FF.b		; 86 FF ; Store X register to $FF.b [Reads: X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CF0706.l,X		; FF 06 07 CF ; Subtract with carry (long,X) $CF0706.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($2278.w,X)		; FC 78 22 ; Jump to subroutine indirect indexed ($2278.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $7E.b,S		; 23 7E ; AND accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($DE.b),Y		; 11 DE ; OR accumulator with memory ($DE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$E1E6.w		; 09 E6 E1 ; Logical OR #$E1E6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc $11.b,X		; F6 11 ; Increment memory $11.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $FF19.w,X		; FE 19 FF ; Increment memory $FF19.w,X [Reads: X Index] [Flags: NZ]
	jsl $0C55B6.l		; 22 B6 55 0C ; Jump to subroutine long $0C55B6.l [Writes: Stack Pointer] [Flow: call]
	sbc ($E0.b,S),Y		; F3 E0 ; Subtract with carry (stack relative indirect indexed) ($E0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7A807F.l,X		; FF 7F 80 7A ; Subtract with carry (long,X) $7A807F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $8F5F80.l,X		; 5F 80 5F 8F ; Exclusive OR accumulator with memory (long,X) $8F5F80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $5C43AF.l,X		; 7F AF 43 5C ; Add long $5C43AF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $0004.w		; AC 04 00 ; Load $0004.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $222F.w		; 20 2F 22 ; Jump to subroutine at $222F.w [Writes: Stack Pointer] [Flow: call]
	ora $001C15.l		; 0F 15 1C 00 ; OR accumulator with memory (long) $001C15.l [Writes: Accumulator] [Flags: NZ]
	bit $3808.w,X		; 3C 08 38 ; Test bits $3808.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $6324.w		; 6D 24 63 ; Add $6324.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsl $071213.l		; 22 13 12 07 ; Jump to subroutine long $071213.l [Writes: Stack Pointer] [Flow: call]
	asl $1B.b		; 06 1B ; Arithmetic shift left $1B.b [Reads: Direct Page] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DFDFC7.l,X		; FF C7 DF DF ; Subtract with carry (long,X) $DFDFC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $04FF22.l		; EF 22 FF 04 ; Subtract with carry (long) $04FF22.l [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($43.b,X)		; 81 43 ; Store accumulator ($43.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $BF4301.l,X		; FF 01 43 BF ; Subtract with carry (long,X) $BF4301.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($5F.b,X)		; 21 5F ; Logical AND ($5F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $44.b		; 04 44 ; Test and set bits $44.b [Reads: Accumulator] [Flags: Z]
	.db $42, $21		; 42 21 ; Reserved instruction
	asl $FEF5.w		; 0E F5 FE ; Arithmetic shift left $FEF5.w [Flags: NCZ]
	ora $BE.b		; 05 BE ; Logical OR $BE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $EE.b,X		; 95 EE ; Store accumulator to $EE.b,X [Reads: Accumulator, X Index]
	cmp #$D9FE.w		; C9 FE D9 ; Compare #$D9FE.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	inc $C601.w,X		; FE 01 C6 ; Increment memory $C601.w,X [Reads: X Index] [Flags: NZ]
	sta $FE.b		; 85 FE ; Store accumulator to $FE.b [Reads: Accumulator]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	eor $EF.b,S		; 43 EF ; Exclusive OR accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00FF03.l		; 0F 03 FF 00 ; OR accumulator with memory (long) $00FF03.l [Writes: Accumulator] [Flags: NZ]
	cmp $E0431F.l,X		; DF 1F 43 E0 ; Compare accumulator (long,X) $E0431F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	jsr $FF0E.w		; 20 0E FF ; Jump to subroutine at $FF0E.w [Writes: Stack Pointer] [Flow: call]
	and $1000FF.l,X		; 3F FF 00 10 ; AND accumulator with memory (long,X) $1000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	and $001F1F.l,X		; 3F 1F 1F 00 ; AND accumulator with memory (long,X) $001F1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $EC		; 90 EC ; Branch if carry clear to $90, $EC [Flow: branch]
	mvp $EF,$20		; 44 20 EF ; Move block positive $EF,$20 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$10.b],Y		; B7 10 ; Load accumulator (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $F624.w,X		; FD 24 F6 ; Subtract with carry $F624.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0F.b		; 06 0F ; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: NCZ]
	jsl $6F1B5F.l		; 22 5F 1B 6F ; Jump to subroutine long $6F1B5F.l [Writes: Stack Pointer] [Flow: call]
	and [$13.b]		; 27 13 ; AND accumulator with memory (long) [$13.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0282.w,Y		; 19 82 02 ; OR accumulator with memory $0282.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $021D.w,X		; 1D 1D 02 ; OR accumulator with memory $021D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $89.b		; 05 89 ; Logical OR $89.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$01C1.w		; 09 C1 01 ; Logical OR #$01C1.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	and ($01.b),Y		; 31 01 ; AND accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FDE2.w,X		; FD E2 FD ; Subtract with carry $FDE2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $FE.b,X		; F6 FE ; Increment memory $FE.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $1F43FE.l,X		; FF FE 43 1F ; Subtract with carry (long,X) $1F43FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$3F03.w		; E0 03 3F ; Compare #$3F03.w with X register [Reads: X Index] [Flags: NCZ]
	cpy #$CF30.w		; C0 30 CF ; Compare #$CF30.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor [$00.b]		; 47 00 ; Exclusive OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $F8F001.l,X		; FF 01 F0 F8 ; Subtract with carry (long,X) $F8F001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $0E.b,S		; 43 0E ; Exclusive OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc ($0B.b),Y		; F1 0B ; Subtract with carry ($0B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $3CE1.w,X		; 1E E1 3C ; Arithmetic shift left $3CE1.w,X [Reads: X Index] [Flags: NCZ]
	cmp $79.b,S		; C3 79 ; Compare accumulator (stack relative) $79.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta [$39.b]		; 87 39 ; Store accumulator (long) [$39.b] [Reads: Direct Page, Accumulator]
	cmp [$1C.b]		; C7 1C ; Compare accumulator (long) [$1C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $0E.b,S		; E3 0E ; Subtract stack-relative $0E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc ($22.b),Y		; F1 22 ; Subtract with carry ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpx #$F040.w		; E0 40 F0 ; Compare #$F040.w with X register [Reads: X Index] [Flags: NCZ]
	sbc ($E1.b,X)		; E1 E1 ; Subtract with carry ($E1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	ldx $5D.b		; A6 5D ; Load $5D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	pea $FC5B.w		; F4 5B FC ; Push absolute address $FC5B.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($EC.b,S),Y		; 13 EC ; OR accumulator (stack relative indirect indexed) ($EC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $FF.b,S		; A3 FF ; Load accumulator (stack relative) $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	cpy $3B.b		; C4 3B ; Compare $3B.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $031B.w,Y		; 19 1B 03 ; OR accumulator with memory $031B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $13.b,S		; 03 13 ; OR accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $D8.b		; 04 D8 ; Test and set bits $D8.b [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inc $9C.b,X		; F6 9C ; Increment memory $9C.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	nop		; EA ; No operation
	sbc ($1B.b)		; F2 1B ; Subtract with carry (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $CE3B.w		; EE 3B CE ; Increment $CE3B.w [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $FCEFF9.l		; 0F F9 EF FC ; OR accumulator with memory (long) $FCEFF9.l [Writes: Accumulator] [Flags: NZ]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc [$E7.b],Y		; F7 E7 ; Subtract with carry (long indexed) [$E7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$07.b]		; C7 07 ; Compare accumulator (long) [$07.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora [$C3.b]		; 07 C3 ; OR accumulator with memory (long) [$C3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $21FF20.l,X		; FF 20 FF 21 ; Subtract with carry (long,X) $21FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $6DAA.w		; 6E AA 6D ; Rotate right $6DAA.w [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	adc $14FF84.l		; 6F 84 FF 14 ; Add with carry (long) $14FF84.l [Writes: Accumulator] [Flags: NCVZ]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	mvn $10,$04		; 54 04 10 ; Move block negative $10,$04 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $B31F03.l		; 22 03 1F B3 ; Jump to subroutine long $B31F03.l [Writes: Stack Pointer] [Flow: call]
	.db $82, $D9, $41		; 82 D9 41 ; Branch always long to $82, $D9, $41 [Flow: branch]
	cpx $F620.w		; EC 20 F6 ; Compare $F620.w with X register [Reads: X Index] [Flags: NCZ]
	.db $10, $FB		; 10 FB ; Branch if plus to $10, $FB [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc [$56.b],Y		; F7 56 ; Subtract with carry (long indexed) [$56.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$24.b],Y		; F7 24 ; Subtract with carry (long indexed) [$24.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $7C48.w		; EE 48 7C ; Increment $7C48.w [Flags: NZ]
	rol $0F1F.w,X		; 3E 1F 0F ; Rotate left $0F1F.w,X [Reads: X Index] [Flags: NCZ]
	ora [$09.b]		; 07 09 ; OR accumulator with memory (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0031.w,Y		; 19 31 00 ; OR accumulator with memory $0031.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FA00FF.l,X		; FF FF 00 FA ; Subtract with carry (long,X) $FA00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $02FD.w,X		; FD FD 02 ; Subtract with carry $02FD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FB.b,S		; 23 FB ; AND accumulator with stack relative $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $03.b,S		; 23 03 ; AND accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $FD.b,S		; 23 FD ; AND accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $60.b		; 85 60 ; Store accumulator to $60.b [Reads: Accumulator]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FF2300.l,X		; FF 00 23 FF ; Subtract with carry (long,X) $FF2300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0001FF.l		; 22 FF 01 00 ; Jump to subroutine long $0001FF.l [Writes: Stack Pointer] [Flow: call]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $343C07.l,X		; 3F 07 3C 34 ; AND accumulator with memory (long,X) $343C07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $333D33.l,X		; 3F 33 3D 33 ; AND accumulator with memory (long,X) $333D33.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $F302FF.l		; 22 FF 02 F3 ; Jump to subroutine long $F302FF.l [Writes: Stack Pointer] [Flow: call]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	eor $276E8D.l		; 4F 8D 6E 27 ; Exclusive OR accumulator with memory (long) $276E8D.l [Writes: Accumulator] [Flags: NZ]
	.db $10, $E0		; 10 E0 ; Branch if plus to $10, $E0 [Flow: branch]
	bit $6F.b,X		; 34 6F ; Test bits $6F.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	.db $80, $77		; 80 77 ; Branch always to $80, $77 [Flow: branch]
	.db $80, $3B		; 80 3B ; Branch always to $80, $3B [Flow: branch]
	cpy #$C01D.w		; C0 1D C0 ; Compare #$C01D.w with Y register [Reads: Y Index] [Flags: NCZ]
	rol $17C0.w		; 2E C0 17 ; Rotate left $17C0.w [Flags: NCZ]
	cpx #$F00F.w		; E0 0F F0 ; Compare #$F00F.w with X register [Reads: X Index] [Flags: NCZ]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	ora ($08.b),Y		; 11 08 ; OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	eor ($F3.b),Y		; 51 F3 ; Exclusive OR accumulator with memory ($F3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $FC.b,X		; 55 FC ; Exclusive OR accumulator with memory $FC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $DA		; 42 DA ; Reserved instruction
	jmp $3DAD.w		; 4C AD 3D ; Jump to $3DAD.w [Flow: jump]
	cmp $71.b		; C5 71 ; Compare $71.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$62.b],Y		; D7 62 ; Compare accumulator (long indexed) [$62.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sta $081460.l,X		; 9F 60 14 08 ; Store accumulator (long,X) $081460.l,X [Reads: Accumulator, X Index]
	eor ($61.b,X)		; 41 61 ; Exclusive OR accumulator with memory ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FEFE.w,Y		; F9 FE FE ; Subtract with carry $FEFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $01FD22.l,X		; FF 22 FD 01 ; Subtract with carry (long,X) $01FD22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $25FE.w,X		; FE FE 25 ; Increment memory $25FE.w,X [Reads: X Index] [Flags: NZ]
	sbc $220600.l,X		; FF 00 06 22 ; Subtract with carry (long,X) $220600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$80.b]		; 47 80 ; Exclusive OR accumulator with memory (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $60BFC0.l,X		; 7F C0 BF 60 ; Add long $60BFC0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $D8AFB0.l,X		; 5F B0 AF D8 ; Exclusive OR accumulator with memory (long,X) $D8AFB0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$AC.b],Y		; 57 AC ; Exclusive OR accumulator with memory (long indexed) [$AC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	inc $E5.b,X		; F6 E5 ; Increment memory $E5.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc ($F2.b,S),Y		; F3 F2 ; Subtract with carry (stack relative indirect indexed) ($F2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $CF9F3F.l,X		; 7F 3F 9F CF ; Add long $CF9F3F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$73.b]		; E7 73 ; Subtract with carry (long) [$73.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $770C.w,Y		; 19 0C 77 ; OR accumulator with memory $770C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($37.b,S),Y		; 93 37 ; Store accumulator (stack relative indirect indexed) ($37.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cpy $3D.b		; C4 3D ; Compare $3D.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sty $7E.b		; 84 7E ; Store Y register to $7E.b [Reads: Y Index]
	lda ($5F.b)		; B2 5F ; Load accumulator (indirect) ($5F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit #$286F.w		; 89 6F 28 ; Test bits #$286F.w with accumulator [Reads: Accumulator] [Flags: Z]
	and $0082.w,Y		; 39 82 00 ; AND accumulator with memory $0082.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $430808.l		; CF 08 08 43 ; Compare accumulator (long) $430808.l [Reads: Accumulator] [Flags: NCZ]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $90, $44		; 90 44 ; Branch if carry clear to $90, $44 [Flow: branch]
	.db $30, $7C		; 30 7C ; Branch if minus to $30, $7C [Flow: branch]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $E7		; 80 E7 ; Branch always to $80, $E7 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $70F387.l,X		; FF 87 F3 70 ; Subtract with carry (long,X) $70F387.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C03F07.l,X		; FF 07 3F C0 ; Subtract with carry (long,X) $C03F07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $871F7F.l,X		; FF 7F 1F 87 ; Subtract with carry (long,X) $871F7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	sta $EA.b		; 85 EA ; Store accumulator to $EA.b [Reads: Accumulator]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F903.w,X		; FD 03 F9 ; Subtract with carry $F903.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$F3.b]		; 07 F3 ; OR accumulator with memory (long) [$F3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0F3FC7.l		; 0F C7 3F 0F ; OR accumulator with memory (long) $0F3FC7.l [Writes: Accumulator] [Flags: NZ]
	sbc $02F983.l,X		; FF 83 F9 02 ; Subtract with carry (long,X) $02F983.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$C1.b]		; 07 C1 ; OR accumulator with memory (long) [$C1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $DFF30C.l		; 0F 0C F3 DF ; OR accumulator with memory (long) $DFF30C.l [Writes: Accumulator] [Flags: NZ]
	jsr $FF43.w		; 20 43 FF ; Jump to subroutine at $FF43.w [Writes: Stack Pointer] [Flow: call]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($8C.b,S),Y		; 73 8C ; Add with carry (stack relative indirect indexed) ($8C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	jsr $43DF.w		; 20 DF 43 ; Jump to subroutine at $43DF.w [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $8C0100.l		; 22 00 01 8C ; Jump to subroutine long $8C0100.l [Writes: Stack Pointer] [Flow: call]
	cmp $E0FF22.l,X		; DF 22 FF E0 ; Compare accumulator (long,X) $E0FF22.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	and $6FD23F.l,X		; 3F 3F D2 6F ; AND accumulator with memory (long,X) $6FD23F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $5F.b		; A4 5F ; Load $5F.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor $B27F90.l,X		; 5F 90 7F B2 ; Exclusive OR accumulator with memory (long,X) $B27F90.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $830C48.l,X		; 3F 48 0C 83 ; AND accumulator with memory (long,X) $830C48.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $CF		; 30 CF ; Branch if minus to $30, $CF [Flow: branch]
	tsb $3018.w		; 0C 18 30 ; Test and set bits $3018.w [Reads: Accumulator] [Flags: Z]
	jsr $8000.w		; 20 00 80 ; Jump to subroutine at $8000.w [Writes: Stack Pointer] [Flow: call]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	bit $1EF3.w,X		; 3C F3 1E ; Test bits $1EF3.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc ($F7.b,X)		; E1 F7 ; Subtract with carry ($F7.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $18DF.w		; 0C DF 18 ; Test and set bits $18DF.w [Reads: Accumulator] [Flags: Z]
	eor $873890.l,X		; 5F 90 38 87 ; Exclusive OR accumulator with memory (long,X) $873890.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E1.b,S		; E3 E1 ; Subtract stack-relative $E1.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	jsr $6140.w		; 20 40 61 ; Jump to subroutine at $6140.w [Writes: Stack Pointer] [Flow: call]
	inc $FF54.w,X		; FE 54 FF ; Increment memory $FF54.w,X [Reads: X Index] [Flags: NZ]
	mvp $64,$FF		; 44 FF 64 ; Move block positive $64,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $7D24.w,X		; FD 24 7D ; Subtract with carry $7D24.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol $77D2.w,X		; 3E D2 77 ; Rotate left $77D2.w,X [Reads: X Index] [Flags: NCZ]
	lda ($FF.b,X)		; A1 FF ; Load accumulator ($FF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $0324.w		; 20 24 03 ; Jump to subroutine at $0324.w [Writes: Stack Pointer] [Flow: call]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $83		; 10 83 ; Branch if plus to $10, $83 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $DF815F.l		; 22 5F 81 DF ; Jump to subroutine long $DF815F.l [Writes: Stack Pointer] [Flow: call]
	ora ($6F.b,X)		; 01 6F ; Logical OR ($6F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($3F.b,X)		; 81 3F ; Store accumulator ($3F.b,X) [Reads: Direct Page, Accumulator, X Index]
	cpy #$E01B.w		; C0 1B E0 ; Compare #$E01B.w with Y register [Reads: Y Index] [Flags: NCZ]
	tsb $40F0.w		; 0C F0 40 ; Test and set bits $40F0.w [Reads: Accumulator] [Flags: Z]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0010.w		; 20 10 00 ; Jump to subroutine at $0010.w [Writes: Stack Pointer] [Flow: call]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $102000.l,X		; FF 00 20 10 ; Subtract with carry (long,X) $102000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DFF0DF.l,X		; FF DF F0 DF ; Subtract with carry (long,X) $DFF0DF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $84C600.l,X		; FF 00 C6 84 ; Subtract with carry (long,X) $84C600.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000022.l,X		; FF 22 00 00 ; Subtract with carry (long,X) $000022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $100022.l		; CF 22 00 10 ; Compare accumulator (long) $100022.l [Reads: Accumulator] [Flags: NCZ]
	and $9000.w,Y		; 39 00 90 ; AND accumulator with memory $9000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $2200FF.l,X		; FF FF 00 22 ; Subtract with carry (long,X) $2200FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $42, $AD		; 42 AD ; Reserved instruction
	cmp $DD3D.w		; CD 3D DD ; Compare $DD3D.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc $E1FB02.l,X		; FF 02 FB E1 ; Subtract with carry (long,X) $E1FB02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $090022.l,X		; FF 22 00 09 ; Subtract with carry (long,X) $090022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $000212.l,X		; 9F 12 02 00 ; Store accumulator (long,X) $000212.l,X [Reads: Accumulator, X Index]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	bit $3F33.w,X		; 3C 33 3F ; Test bits $3F33.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $45.b,X		; 34 45 ; Test bits $45.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	rol $0535.w,X		; 3E 35 05 ; Rotate left $0535.w,X [Reads: X Index] [Flags: NCZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $7E.b,X		; 34 7E ; Test bits $7E.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	adc ($BB.b),Y		; 71 BB ; Add with carry ($BB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $26.b,X		; B4 26 ; Load Y register $26.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $70, $8D		; 70 8D ; Branch if overflow set to $70, $8D [Flow: branch]
	ror $448C.w		; 6E 8C 44 ; Rotate right $448C.w [Flags: NCZ]
	adc $80078F.l		; 6F 8F 07 80 ; Add with carry (long) $80078F.l [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$C07F.w		; A0 7F C0 ; Load #$C07F.w into Y register [Writes: Y Index] [Flags: NZ]
	adc $2300FF.l,X		; 7F FF 00 23 ; Add long $2300FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	ora $020022.l,X		; 1F 22 00 02 ; Logical OR long $020022.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $440100.l,X		; FF 00 01 44 ; Subtract with carry (long,X) $440100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $01FD.w,X		; FE FD 01 ; Increment memory $01FD.w,X [Reads: X Index] [Flags: NZ]
	ora $430E.w		; 0D 0E 43 ; Logical OR $430E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $01EE.w		; 0D EE 01 ; Logical OR $01EE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $236E.w		; 8D 6E 23 ; Store accumulator to $236E.w [Reads: Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	.db $10, $E0		; 10 E0 ; Branch if plus to $10, $E0 [Flow: branch]
	sta $F730EF.l		; 8F EF 30 F7 ; Store accumulator (long) $F730EF.l [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	stz $09.b,X		; 74 09 ; Store zero to $09.b,X [Reads: X Index]
	sbc $F23EC3.l,X		; FF C3 3E F2 ; Subtract with carry (long,X) $F23EC3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $206301.l,X		; FF 01 63 20 ; Subtract with carry (long,X) $206301.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $100000.l,X		; FF 00 00 10 ; Subtract with carry (long,X) $100000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $82, $02, $03		; 82 02 03 ; Branch always long to $82, $02, $03 [Flow: branch]
	ora ($9C.b,X)		; 01 9C ; Logical OR ($9C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($E1.b)		; F2 E1 ; Subtract with carry (indirect) ($E1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $32.b		; E6 32 ; Increment $32.b [Reads: Direct Page] [Flags: NZ]
	and $637C.w,X		; 3D 7C 63 ; AND accumulator with memory $637C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $D4A3.w		; AC A3 D4 ; Load $D4A3.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp ($E2.b,S),Y		; D3 E2 ; Compare accumulator (stack relative indirect indexed) ($E2.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sbc ($F1.b,X)		; E1 F1 ; Subtract with carry ($F1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc ($E3.b,X)		; E1 E3 ; Subtract with carry ($E3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($3B.b,S),Y		; 73 3B ; Add with carry (stack relative indirect indexed) ($3B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $F20E.w,X		; 1D 0E F2 ; OR accumulator with memory $F20E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($F7.b),Y		; F1 F7 ; Subtract with carry ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pea $F6F6.w		; F4 F6 F6 ; Push absolute address $F6F6.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cpx $EFEC.w		; EC EC EF ; Compare $EFEC.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $BFDFDF.l		; EF DF DF BF ; Subtract with carry (long) $BFDFDF.l [Writes: Accumulator] [Flags: NCVZ]
	lda $0C7F7F.l,X		; BF 7F 7F 0C ; Load long $0C7F7F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $1F0F.w		; 0C 0F 1F ; Test and set bits $1F0F.w [Reads: Accumulator] [Flags: Z]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $F3		; 80 F3 ; Branch always to $80, $F3 [Flow: branch]
	sbc ($F7.b)		; F2 F7 ; Subtract with carry (indirect) ($F7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($EF.b)		; F2 EF ; Subtract with carry (indirect) ($EF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $BF.b		; E6 BF ; Increment $BF.b [Reads: Direct Page] [Flags: NZ]
	stx $E6EF.w		; 8E EF E6 ; Store X register to $E6EF.w [Reads: X Index]
	sbc [$F2.b],Y		; F7 F2 ; Subtract with carry (long indexed) [$F2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $E6E7CE.l		; CF CE E7 E6 ; Compare accumulator (long) $E6E7CE.l [Reads: Accumulator] [Flags: NCZ]
	tsb $1C0C.w		; 0C 0C 1C ; Test and set bits $1C0C.w [Reads: Accumulator] [Flags: Z]
	jmp ($0C1C.w,X)		; 7C 1C 0C ; Jump indirect indexed to ($0C1C.w,X) [Reads: X Index] [Flow: jump]
	bit $FF1C.w,X		; 3C 1C FF ; Test bits $FF1C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $DEFFBF.l,X		; FF BF FF DE ; Subtract with carry (long,X) $DEFFBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $FCFD.w,X		; DE FD FC ; Decrement memory $FCFD.w,X [Reads: X Index] [Flags: NZ]
	sbc ($F0.b,S),Y		; F3 F0 ; Subtract with carry (stack relative indirect indexed) ($F0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FCE7.w		; EE E7 FC ; Increment $FCE7.w [Flags: NZ]
	sbc [$00.b]		; E7 00 ; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $181C.w		; 0E 1C 18 ; Arithmetic shift left $181C.w [Flags: NCZ]
	ora $3FC7FF.l		; 0F FF C7 3F ; OR accumulator with memory (long) $3FC7FF.l [Writes: Accumulator] [Flags: NZ]
	sbc [$0F.b],Y		; F7 0F ; Subtract with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($0F.b),Y		; F1 0F ; Subtract with carry ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $3C83.w,X		; 7D 83 3C ; Add $3C83.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $1E.b,S		; C3 1E ; Compare accumulator (stack relative) $1E.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sbc ($0E.b,X)		; E1 0E ; Subtract with carry ($0E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($0F.b),Y		; F1 0F ; Subtract with carry ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp ($E1.b,X)		; C1 E1 ; Compare accumulator ($E1.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $EF1003.l,X		; FF 03 10 EF ; Subtract with carry (long,X) $EF1003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $45C6.w,Y		; 39 C6 45 ; AND accumulator with memory $45C6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1E01E0.l,X		; 1F E0 01 1E ; Logical OR long $1E01E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($25.b,X)		; E1 25 ; Subtract with carry ($25.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8F801.l,X		; FF 01 F8 F8 ; Subtract with carry (long,X) $F8F801.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DD5AE0.l,X		; FF E0 5A DD ; Subtract with carry (long,X) $DD5AE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $03E3.w,X		; 1D E3 03 ; OR accumulator with memory $03E3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $E05FCF.l,X		; 3F CF 5F E0 ; AND accumulator with memory (long,X) $E05FCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp $E3BCE3.l		; 5C E3 BC E3 ; Jump long to $E3BCE3.l [Flow: jump]
	jmp ($F6C3.w,X)		; 7C C3 F6 ; Jump indirect indexed to ($F6C3.w,X) [Reads: X Index] [Flow: jump]
	sta $1C3E.w,X		; 9D 3E 1C ; Store accumulator to $1C3E.w,X [Reads: Accumulator, X Index]
	cpy #$E3E0.w		; C0 E0 E3 ; Compare #$E3E0.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $83.b,S		; C3 83 ; Compare accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ora $1899.w,Y		; 19 99 18 ; OR accumulator with memory $1899.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $FC2D.w		; EE 2D FC ; Increment $FC2D.w [Flags: NZ]
	sta ($F8.b,S),Y		; 93 F8 ; Store accumulator (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ora [$39.b]		; 07 39 ; OR accumulator with memory (long) [$39.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp [$0B.b]		; C7 0B ; Compare accumulator (long) [$0B.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $8CFE.w,X		; 9E FE 8C ; Store zero to $8CFE.w,X [Reads: X Index]
	ror $0311.w,X		; 7E 11 03 ; Rotate right $0311.w,X [Reads: X Index] [Flags: NCZ]
	ora [$C7.b]		; 07 C7 ; OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc [$FB.b],Y		; F7 FB ; Subtract with carry (long indexed) [$FB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cmp [$84.b]		; C7 84 ; Compare accumulator (long) [$84.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $03EE19.l,X		; 5F 19 EE 03 ; Exclusive OR accumulator with memory (long,X) $03EE19.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $570B.w		; AD 0B 57 ; Load $570B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	mvp $C0,$E8		; 44 E8 C0 ; Move block positive $C0,$E8 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $98FF80.l,X		; FF 80 FF 98 ; Subtract with carry (long,X) $98FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpx #$F3F1.w		; E0 F1 F3 ; Compare #$F3F1.w with X register [Reads: X Index] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $1C0007.l,X		; 1F 07 00 1C ; Logical OR long $1C0007.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $4904.w		; 1C 04 49 ; Test and reset bits $4904.w [Reads: Accumulator] [Flags: Z]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($A9.b,X)		; 01 A9 ; Logical OR ($A9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF24FB.l,X		; FF FB 24 FF ; Subtract with carry (long,X) $FF24FB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $5C.b		; 04 5C ; Test and set bits $5C.b [Reads: Accumulator] [Flags: Z]
	ldy $8C7C.w		; AC 7C 8C ; Load $8C7C.w into Y register [Writes: Y Index] [Flags: NZ]
	jmp $7CAC4A.l		; 5C 4A AC 7C ; Jump long to $7CAC4A.l [Flow: jump]
	and [$0F.b]		; 27 0F ; AND accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FD64FF.l		; 0F FF 64 FD ; OR accumulator with memory (long) $FD64FF.l [Writes: Accumulator] [Flags: NZ]
	bit $7D.b		; 24 7D ; Test bits $7D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $80, $3E		; 80 3E ; Branch always to $80, $3E [Flow: branch]
	cmp ($7F.b)		; D2 7F ; Compare accumulator (indirect) ($7F.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	lda #$40EF.w		; A9 EF 40 ; Load #$40EF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pei ($89.b)		; D4 89 ; Push effective indirect address ($89.b) [Reads: Direct Page] [Writes: Stack Pointer]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	asl $22.b,X		; 16 22 ; Arithmetic shift left $22.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $1C.b,S		; 03 1C ; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $30, $66		; 30 66 ; Branch if minus to $30, $66 [Flow: branch]
	ora #$E718.w		; 09 18 E7 ; Logical OR #$E718.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $C3.b,X		; 34 C3 ; Test bits $C3.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	eor ($81.b)		; 52 81 ; Exclusive OR accumulator with memory (indirect) ($81.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsr $14F7.w		; 20 F7 14 ; Jump to subroutine at $14F7.w [Writes: Stack Pointer] [Flow: call]
	sbc $C342.w,X		; FD 42 C3 ; Subtract with carry $C342.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $3CBD.w,X		; 7E BD 3C ; Rotate right $3CBD.w,X [Reads: X Index] [Flags: NCZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $081C.w,X		; 3C 1C 08 ; Test bits $081C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cop $3E.b		; 02 3E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0044.w,X		; 7E 44 00 ; Rotate right $0044.w,X [Reads: X Index] [Flags: NCZ]
	sbc $00FE02.l,X		; FF 02 FE 00 ; Subtract with carry (long,X) $00FE02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $44.b,X		; F6 44 ; Increment memory $44.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($AD.b)		; 12 AD ; OR accumulator with memory (indirect) ($AD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($50.b)		; 52 50 ; Exclusive OR accumulator with memory (indirect) ($50.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: NCZ]
	adc $007F04.l		; 6F 04 7F 00 ; Add with carry (long) $007F04.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $800690.l		; 22 90 06 80 ; Jump to subroutine long $800690.l [Writes: Stack Pointer] [Flow: call]
	sbc $3FFE00.l,X		; FF 00 FE 3F ; Subtract with carry (long,X) $3FFE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($61.b,X)		; E1 61 ; Subtract with carry ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $DE.b		; 45 DE ; Exclusive OR $DE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $DC06.w,X		; 5E 06 DC ; Logical shift right $DC06.w,X [Reads: X Index] [Flags: NCZ]
	jmp $005BDB.l		; 5C DB 5B 00 ; Jump long to $005BDB.l [Flow: jump]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $3F.b		; 24 3F ; Test bits $3F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpy #$B8FF.w		; C0 FF B8 ; Compare #$B8FF.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $BC4B.w		; CC 4B BC ; Compare $BC4B.w with Y register [Reads: Y Index] [Flags: NCZ]
	and $FC.b,S		; 23 FC ; AND accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $F6.b,S		; 43 F6 ; Exclusive OR accumulator with stack relative $F6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0023.w,X		; 1D 23 00 ; OR accumulator with memory $0023.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $03.b,S		; 43 03 ; Exclusive OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $FF2F.w,Y		; 19 2F FF ; OR accumulator with memory $FF2F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $CEBFBF.l,X		; FF BF BF CE ; Subtract with carry (long,X) $CEBFBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $D0D1.w		; CE D1 D0 ; Decrement $D0D1.w [Flags: NZ]
	sbc $E7E6EF.l		; EF EF E6 E7 ; Subtract with carry (long) $E7E6EF.l [Writes: Accumulator] [Flags: NCVZ]
	inc $EFE9.w		; EE E9 EF ; Increment $EFE9.w [Flags: NZ]
	cpx $4000.w		; EC 00 40 ; Compare $4000.w with X register [Reads: X Index] [Flags: NCZ]
	and ($3F.b),Y		; 31 3F ; AND accumulator with memory ($3F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1B1C22.l,X		; 1F 22 1C 1B ; Logical OR long $1B1C22.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $739E.w,Y		; B9 9E 73 ; Load $739E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $79E6.w,X		; 3C E6 79 ; Test bits $79E6.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cpy $98F3.w		; CC F3 98 ; Compare $98F3.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc [$30.b]		; E7 30 ; Subtract with carry (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $C09FE0.l		; CF E0 9F C0 ; Compare accumulator (long) $C09FE0.l [Reads: Accumulator] [Flags: NCZ]
	and $C1E070.l,X		; 3F 70 E0 C1 ; AND accumulator with memory (long,X) $C1E070.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $07.b,S		; 83 07 ; Store accumulator (stack relative) $07.b,S [Reads: Stack Pointer, Accumulator]
	ora $FF3F1F.l		; 0F 1F 3F FF ; OR accumulator with memory (long) $FF3F1F.l [Writes: Accumulator] [Flags: NZ]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $8D4B.w,X		; 7E 4B 8D ; Rotate right $8D4B.w,X [Reads: X Index] [Flags: NCZ]
	ror $0001.w		; 6E 01 00 ; Rotate right $0001.w [Flags: NCZ]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $E0		; 10 E0 ; Branch if plus to $10, $E0 [Flow: branch]
	eor ($FE.b,X)		; 41 FE ; Exclusive OR accumulator with memory ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $FBBFFD.l,X		; 7F FD BF FB ; Add long $FBBFFD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $EFEFF7.l,X		; DF F7 EF EF ; Compare accumulator (long,X) $EFEFF7.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc [$DF.b],Y		; F7 DF ; Subtract with carry (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $E77FBF.l,X		; DF BF 7F E7 ; Compare accumulator (long,X) $E77FBF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	stz $89FE.w		; 9C FE 89 ; Store zero to $89FE.w
	sbc $FBC3.w,X		; FD C3 FB ; Subtract with carry $FBC3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$73.b]		; E7 73 ; Subtract with carry (long) [$73.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $78CFF3.l		; CF F3 CF 78 ; Compare accumulator (long) $78CFF3.l [Reads: Accumulator] [Flags: NCZ]
	sbc [$5F.b]		; E7 5F ; Subtract with carry (long) [$5F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$8F.b]		; 07 8F ; OR accumulator with memory (long) [$8F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $BCE0C7.l		; 8F C7 E0 BC ; Store accumulator (long) $BCE0C7.l [Reads: Accumulator]
	sbc ($FE.b,S),Y		; F3 FE ; Subtract with carry (stack relative indirect indexed) ($FE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($FF.b,X)		; E1 FF ; Subtract with carry ($FF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $9EFF8C.l,X		; FF 8C FF 9E ; Subtract with carry (long,X) $9EFF8C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$A7.b]		; E7 A7 ; Subtract with carry (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$C7.b],Y		; D7 C7 ; Compare accumulator (long indexed) [$C7.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	adc $01.b,S		; 63 01 ; Add with carry (stack relative) $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$1820.w		; E0 20 18 ; Compare #$1820.w with X register [Reads: X Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0FF69F.l		; EF 9F F6 0F ; Subtract with carry (long) $0FF69F.l [Writes: Accumulator] [Flags: NCVZ]
	cmp $F397.w,Y		; D9 97 F3 ; Compare accumulator $F397.w,Y [Reads: Y Index] [Flags: NCZ]
	stx $5C76.w		; 8E 76 5C ; Store X register to $5C76.w [Reads: X Index]
	lda $247E0A.l,X		; BF 0A 7E 24 ; Load long $247E0A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0C26CF.l,X		; 1F CF 26 0C ; Logical OR long $0C26CF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit #$C3C1.w		; [PATTERN: Memory clearing operation] 89 C1 C3 ; Test bits #$C3C1.w with accumulator [Reads: Accumulator] [Flags: Z]
	stz $BC.b		; 64 BC ; Store zero to $BC.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $B468.w,X		; BC 68 B4 ; Load Y register $B468.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	stz $A9.b		; 64 A9 ; Store zero to $A9.b
	eor $60.b,S		; 43 60 ; Exclusive OR accumulator with stack relative $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $07.b,S		; A3 07 ; Load accumulator (stack relative) $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($A9.b,X)		; 61 A9 ; Add with carry ($A9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clv		; B8 ; Clear overflow flag [Flags: V]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $241B1F.l,X		; 1F 1F 1B 24 ; Logical OR long $241B1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $AF5F05.l,X		; 1F 05 5F AF ; Logical OR long $AF5F05.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $A35390.l		; 6F 90 53 A3 ; Add with carry (long) $A35390.l [Writes: Accumulator] [Flags: NCVZ]
	eor #$AC7C.w		; 49 7C AC ; Exclusive OR #$AC7C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0F.b		; 24 0F ; Test bits $0F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cpx #$3B47.w		; E0 47 3B ; Compare #$3B47.w with X register [Reads: X Index] [Flags: NCZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	trb $0FA4.w		; 1C A4 0F ; Test and reset bits $0FA4.w [Reads: Accumulator] [Flags: Z]
	cmp ($07.b,S),Y		; D3 07 ; Compare accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $75.b,S		; 03 75 ; OR accumulator with stack relative $75.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $B8.b,S		; 03 B8 ; OR accumulator with stack relative $B8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($5C.b,X)		; 01 5C ; Logical OR ($5C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($BE.b,X)		; 01 BE ; Logical OR ($BE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sty $43.b		; 84 43 ; Store Y register to $43.b [Reads: Y Index]
	jsr $8810.w		; 20 10 88 ; Jump to subroutine at $8810.w [Writes: Stack Pointer] [Flow: call]
	mvp $41,$A2		; 44 A2 41 ; Move block positive $41,$A2 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cmp $303FCE.l		; CF CE 3F 30 ; Compare accumulator (long) $303FCE.l [Reads: Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp [$E0.b]		; C7 E0 ; Compare accumulator (long) [$E0.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	trb $C0.b		; 14 C0 ; Test and reset bits $C0.b [Reads: Accumulator] [Flags: Z]
	lda $8017C0.l		; AF C0 17 80 ; Load long $8017C0.l into accumulator [Writes: Accumulator] [Flags: NZ]
	bit $7B80.w		; 2C 80 7B ; Test bits $7B80.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $30, $C0		; 30 C0 ; Branch if minus to $30, $C0 [Flow: branch]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	eor ($84.b,S),Y		; 53 84 ; XOR accumulator (stack relative indirect indexed) ($84.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $F80766.l,X		; 9F 66 07 F8 ; Store accumulator (long,X) $F80766.l,X [Reads: Accumulator, X Index]
	brk $57.b		; 00 57 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$0A.b],Y		; 57 0A ; Exclusive OR accumulator with memory (long indexed) [$0A.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $66.b,S		; 43 66 ; Exclusive OR accumulator with stack relative $66.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $7623E0.l,X		; BF E0 23 76 ; Load long $7623E0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3DCF3B.l,X		; 9F 3B CF 3D ; Store accumulator (long,X) $3DCF3B.l,X [Reads: Accumulator, X Index]
	sta [$3E.b]		; 87 3E ; Store accumulator (long) [$3E.b] [Reads: Direct Page, Accumulator]
	eor ($7F.b,S),Y		; 53 7F ; XOR accumulator (stack relative indirect indexed) ($7F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $AC6F.w,Y		; 39 6F AC ; AND accumulator with memory $AC6F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $070F1F.l,X		; 1F 1F 0F 07 ; Logical OR long $070F1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $81.b,S		; 43 81 ; Exclusive OR accumulator with stack relative $81.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	cmp [$57.b],Y		; D7 57 ; Compare accumulator (long indexed) [$57.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	dec $56.b,X		; D6 56 ; Decrement memory $56.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cmp $55.b,X		; D5 55 ; Compare accumulator $55.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp [$57.b],Y		; D7 57 ; Compare accumulator (long indexed) [$57.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp $FA4E.w		; CD 4E FA ; Compare $FA4E.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FF05.w,X		; FD 05 FF ; Subtract with carry $FF05.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($22.b,S),Y		; 13 22 ; OR accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $353D18.l,X		; 3F 18 3D 35 ; AND accumulator with memory (long,X) $353D18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: NCZ]
	ora ($3C.b,X)		; 01 3C ; Logical OR ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc ($1E.b,S),Y		; F3 1E ; Subtract with carry (stack relative indirect indexed) ($1E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($FF.b,X)		; E1 FF ; Subtract with carry ($FF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $10DF28.l		; EF 28 DF 10 ; Subtract with carry (long) $10DF28.l [Writes: Accumulator] [Flags: NCVZ]
	cmp $93DF91.l,X		; DF 91 DF 93 ; Compare accumulator (long,X) $93DF91.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $E1E3C7.l,X		; FF C7 E3 E1 ; Subtract with carry (long,X) $E1E3C7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $38E020.l		; 22 20 E0 38 ; Jump to subroutine long $38E020.l [Writes: Stack Pointer] [Flow: call]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $F5.b,X		; F5 F5 ; Subtract $F5.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $4BAE.w		; AE AE 4B ; Load $4BAE.w into X register [Writes: X Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc ($F5.b),Y		; F1 F5 ; Subtract with carry ($F5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $04FBFB.l,X		; FF FB FB 04 ; Subtract with carry (long,X) $04FBFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	eor $01FBFF.l,X		; 5F FF FB 01 ; Exclusive OR accumulator with memory (long,X) $01FBFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $739E.w,Y		; 99 9E 73 ; Store accumulator to $739E.w,Y [Reads: Y Index, Accumulator]
	jmp ($79E6.w,X)		; 7C E6 79 ; Jump indirect indexed to ($79E6.w,X) [Reads: X Index] [Flow: jump]
	cpy $9873.w		; CC 73 98 ; Compare $9873.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc [$30.b]		; E7 30 ; Subtract with carry (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor $C01F60.l		; 4F 60 1F C0 ; Exclusive OR accumulator with memory (long) $C01F60.l [Writes: Accumulator] [Flags: NZ]
	and $E1F078.l,X		; 3F 78 F0 E1 ; AND accumulator with memory (long,X) $E1F078.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $87.b,S		; C3 87 ; Compare accumulator (stack relative) $87.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta $FF3F9F.l		; 8F 9F 3F FF ; Store accumulator (long) $FF3F9F.l [Reads: Accumulator]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $CE		; 30 CE ; Branch if minus to $30, $CE [Flow: branch]
	dec $DFDF.w		; CE DF DF ; Decrement $DFDF.w [Flags: NZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $232031.l,X		; FF 31 20 23 ; Subtract with carry (long,X) $232031.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $026E.w		; 8D 6E 02 ; Store accumulator to $026E.w [Reads: Accumulator]
	sta ($62.b,X)		; 81 62 ; Store accumulator ($62.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta $7E44.w,X		; 9D 44 7E ; Store accumulator to $7E44.w,X [Reads: Accumulator, X Index]
	sta ($01.b,X)		; 81 01 ; Store accumulator ($01.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $102200.l,X		; FF 00 22 10 ; Subtract with carry (long,X) $102200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta [$68.b],Y		; 97 68 ; Store accumulator (long indexed) [$68.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($1B.b,X)		; 01 1B ; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $5DF1.w,X		; 5E F1 5D ; Logical shift right $5DF1.w,X [Reads: X Index] [Flags: NCZ]
	sbc ($B9.b,S),Y		; F3 B9 ; Subtract with carry (stack relative indirect indexed) ($B9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F9.b]		; E7 F9 ; Subtract with carry (long) [$F9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta [$F8.b]		; 87 F8 ; Store accumulator (long) [$F8.b] [Reads: Direct Page, Accumulator]
	adc [$3F.b]		; 67 3F ; Add with carry (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $7F		; 30 7F ; Branch if minus to $30, $7F [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $E3E12C.l		; EF 2C E1 E3 ; Subtract with carry (long) $E3E12C.l [Writes: Accumulator] [Flags: NCVZ]
	cmp [$07.b]		; C7 07 ; Compare accumulator (long) [$07.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora [$C0.b]		; 07 C0 ; OR accumulator with memory (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	and $105E0B.l		; 2F 0B 5E 10 ; AND accumulator with memory (long) $105E0B.l [Writes: Accumulator] [Flags: NZ]
	eor $BA.b,S		; 43 BA ; Exclusive OR accumulator with stack relative $BA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $0F.b		; 24 0F ; Test bits $0F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ror $5F20.w,X		; 7E 20 5F ; Rotate right $5F20.w,X [Reads: X Index] [Flags: NCZ]
	asl $5A.b,X		; 16 5A ; Arithmetic shift left $5A.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $02.b,S		; 43 02 ; Exclusive OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $E1		; F0 E1 ; Branch if equal to $F0, $E1 [Flow: branch]
	cmp $C5.b		; C5 C5 ; Compare $C5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($E1.b,X)		; C1 E1 ; Compare accumulator ($E1.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sbc [$FC.b]		; E7 FC ; Subtract with carry (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $C6.b,S		; 83 C6 ; Store accumulator (stack relative) $C6.b,S [Reads: Stack Pointer, Accumulator]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF3100.l,X		; FF 00 31 FF ; Subtract with carry (long,X) $FF3100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$1800.w		; 09 00 18 ; Logical OR #$1800.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $32.b,S		; 83 32 ; Store accumulator (stack relative) $32.b,S [Reads: Stack Pointer, Accumulator]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($7F.b,X)		; 81 7F ; Store accumulator ($7F.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta [$D0.b]		; 87 D0 ; Store accumulator (long) [$D0.b] [Reads: Direct Page, Accumulator]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $8C5C07.l,X		; 1F 07 5C 8C ; Logical OR long $8C5C07.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($BC2C.w,X)		; FC 2C BC ; Jump to subroutine indirect indexed ($BC2C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy $0CFC.w		; CC FC 0C ; Compare $0CFC.w with Y register [Reads: Y Index] [Flags: NCZ]
	and $FC.b,S		; 23 FC ; AND accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FF230F.l		; 22 0F 23 FF ; Jump to subroutine long $FF230F.l [Writes: Stack Pointer] [Flow: call]
	cpx #$8135.w		; E0 35 81 ; Compare #$8135.w with X register [Reads: X Index] [Flags: NCZ]
	.db $42, $43		; 42 43 ; Reserved instruction
	lda $423E.w,X		; BD 3E 42 ; Load $423E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	bit $8100.w,X		; 3C 00 81 ; Test bits $8100.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	.db $42, $3C		; 42 3C ; Reserved instruction
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $BE43.w,X		; 5D 43 BE ; Exclusive OR accumulator with memory $BE43.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $7807C7.l,X		; 3F C7 07 78 ; AND accumulator with memory (long,X) $7807C7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $8B.b		; 04 8B ; Test and set bits $8B.b [Reads: Accumulator] [Flags: Z]
	tsb $FB.b		; 04 FB ; Test and set bits $FB.b [Reads: Accumulator] [Flags: Z]
	trb $B6E3.w		; 1C E3 B6 ; Test and reset bits $B6E3.w [Reads: Accumulator] [Flags: Z]
	cmp $003E.w,X		; DD 3E 00 ; Compare accumulator $003E.w,X [Reads: X Index] [Flags: NCZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($03.b,S),Y		; 73 03 ; Add with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $19.b,S		; 03 19 ; OR accumulator with stack relative $19.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $E258.w,Y		; D9 58 E2 ; Compare accumulator $E258.w,Y [Reads: Y Index] [Flags: NCZ]
	lda ($BC.b,X)		; A1 BC ; Load accumulator ($BC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $89.b,S		; C3 89 ; Compare accumulator (stack relative) $89.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	asl $0100.w,X		; 1E 00 01 ; Arithmetic shift left $0100.w,X [Reads: X Index] [Flags: NCZ]
	rol $851D.w,X		; 3E 1D 85 ; Rotate left $851D.w,X [Reads: X Index] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $094F8C.l		; 4F 8C 4F 09 ; Exclusive OR accumulator with memory (long) $094F8C.l [Writes: Accumulator] [Flags: NZ]
	lsr $4D0B.w		; 4E 0B 4D ; Logical shift right $4D0B.w [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	adc [$A4.b],Y		; 77 A4 ; Add with carry (long indexed) [$A4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $B0		; 30 B0 ; Branch if minus to $30, $B0 [Flow: branch]
	lda ($B3.b),Y		; B1 B3 ; Load accumulator ($B3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $E79807.l,X		; 9F 07 98 E7 ; Store accumulator (long,X) $E79807.l,X [Reads: Accumulator, X Index]
	cop $13.b		; 02 13 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $24EF92.l,X		; FF 92 EF 24 ; Subtract with carry (long,X) $24EF92.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $109F48.l,X		; DF 48 9F 10 ; Compare accumulator (long,X) $109F48.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda $23BF20.l,X		; BF 20 BF 23 ; Load long $23BF20.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $8FFF27.l,X		; BF 27 FF 8F ; Load long $8FFF27.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $3018.w		; 0C 18 30 ; Test and set bits $3018.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $20E040.l		; 22 40 E0 20 ; Jump to subroutine long $20E040.l [Writes: Stack Pointer] [Flow: call]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $9FBFBF.l,X		; 7F BF BF 9F ; Add long $9FBFBF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $B7AFAF.l,X		; 9F AF AF B7 ; Store accumulator (long,X) $B7AFAF.l,X [Reads: Accumulator, X Index]
	lda [$AB.b],Y		; B7 AB ; Load accumulator (long indexed) [$AB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sta $1EBD.w		; 8D BD 1E ; Store accumulator to $1EBD.w [Reads: Accumulator]
	ror $4080.w,X		; 7E 80 40 ; Rotate right $4080.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $78		; 70 78 ; Branch if overflow set to $70, $78 [Flow: branch]
	stz $42.b		; 64 42 ; Store zero to $42.b
	sta ($FF.b,X)		; 81 FF ; Store accumulator ($FF.b,X) [Reads: Direct Page, Accumulator, X Index]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$F007.w		; C0 07 F0 ; Compare #$F007.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor $03.b,S		; 43 03 ; Exclusive OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpx #$0123.w		; E0 23 01 ; Compare #$0123.w with X register [Reads: X Index] [Flags: NCZ]
	jsr ($0C01.w,X)		; FC 01 0C ; Jump to subroutine indirect indexed ($0C01.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $0F3FFF.l,X		; FF FF 3F 0F ; Subtract with carry (long,X) $0F3FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $F3.b,S		; 03 F3 ; OR accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	eor ($3E.b,X)		; 41 3E ; Exclusive OR accumulator with memory ($3E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $49551C.l		; 22 1C 55 49 ; Jump to subroutine long $49551C.l [Writes: Stack Pointer] [Flow: call]
	ldx $DDB6.w,Y		; BE B6 DD ; Load X register $DDB6.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cmp $EBEB.w,X		; DD EB EB ; Compare accumulator $EBEB.w,X [Reads: X Index] [Flags: NCZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $EBDDBE.l,X		; 7F BE DD EB ; Add long $EBDDBE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$3E.b],Y		; 77 3E ; Add with carry (long indexed) [$3E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $2F08.w		; 1C 08 2F ; Test and reset bits $2F08.w [Reads: Accumulator] [Flags: Z]
	inc $0127.w,X		; FE 27 01 ; Increment memory $0127.w,X [Reads: X Index] [Flags: NZ]
	eor $27FF0F.l		; 4F 0F FF 27 ; Exclusive OR accumulator with memory (long) $27FF0F.l [Writes: Accumulator] [Flags: NZ]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $BF.b		; E6 BF ; Increment $BF.b [Reads: Direct Page] [Flags: NZ]
	cpx #$F631.w		; E0 31 F6 ; Compare #$F631.w with X register [Reads: X Index] [Flags: NCZ]
	sta $BD4F7B.l,X		; 9F 7B 4F BD ; Store accumulator (long,X) $BD4F7B.l,X [Reads: Accumulator, X Index]
	and [$9E.b]		; 27 9E ; AND accumulator with memory (long) [$9E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($CF.b,S),Y		; 13 CF ; OR accumulator (stack relative indirect indexed) ($CF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$0467.w		; 09 67 04 ; Logical OR #$0467.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $870F1F.l,X		; 1F 1F 0F 87 ; Logical OR long $870F1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $E1.b,S		; C3 E1 ; Compare accumulator (stack relative) $E1.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	sbc $88CF28.l		; EF 28 CF 88 ; Subtract with carry (long) $88CF28.l [Writes: Accumulator] [Flags: NCVZ]
	lda $0F7F08.l		; AF 08 7F 0F ; Load long $0F7F08.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc [$07.b],Y		; F7 07 ; Subtract with carry (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $99.b,S		; 03 99 ; OR accumulator with stack relative $99.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($CC.b,X)		; 81 CC ; Store accumulator ($CC.b,X) [Reads: Direct Page, Accumulator, X Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $10, $30		; 10 30 ; Branch if plus to $10, $30 [Flow: branch]
	.db $70, $F0		; 70 F0 ; Branch if overflow set to $70, $F0 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($3F7E.w,X)		; FC 7E 3F ; Jump to subroutine indirect indexed ($3F7E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02FF.w,X		; FD FF 02 ; Subtract with carry $02FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $1301.w,X		; FD 01 13 ; Subtract with carry $1301.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($43.b,S),Y		; 13 43 ; OR accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $08EC.w		; EE EC 08 ; Increment $08EC.w [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFF.w,X		; FD FF FF ; Subtract with carry $FFFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1111.w,X		; FD 11 11 ; Subtract with carry $1111.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000001.l,X		; FF 01 00 00 ; Subtract with carry (long,X) $000001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$11.b]		; 07 11 ; OR accumulator with memory (long) [$11.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($EE.b),Y		; 11 EE ; OR accumulator with memory ($EE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $EFEF.w		; EE EF EF ; Increment $EFEF.w [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1011.w,Y		; 19 11 10 ; OR accumulator with memory $1011.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $F80706.l,X		; FF 06 07 F8 ; Subtract with carry (long,X) $F80706.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	.db $B0, $0F		; B0 0F ; Branch if carry set to $B0, $0F [Flow: branch]
	eor $E6.b,S		; 43 E6 ; Exclusive OR accumulator with stack relative $E6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $048484.l,X		; BF 84 84 04 ; Load long $048484.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $A7.b		; 06 A7 ; Arithmetic shift left $A7.b [Reads: Direct Page] [Flags: NCZ]
	dec $EF53.w,X		; DE 53 EF ; Decrement memory $EF53.w,X [Reads: X Index] [Flags: NZ]
	and #$9477.w		; 29 77 94 ; Logical AND #$9477.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $90.b,S		; 83 90 ; Store accumulator (stack relative) $90.b,S [Reads: Stack Pointer, Accumulator]
	tsb $0D.b		; 04 0D ; Test and set bits $0D.b [Reads: Accumulator] [Flags: Z]
	eor $21.b,S		; 43 21 ; Exclusive OR accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	sbc $7FC000.l,X		; FF 00 C0 7F ; Subtract with carry (long,X) $7FC000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $6F8F7F.l,X		; BF 7F 8F 6F ; Load long $6F8F7F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $436C.w		; 8C 6C 43 ; Store Y register to $436C.w [Reads: Y Index]
	sty $016F.w		; 8C 6F 01 ; Store Y register to $016F.w [Reads: Y Index]
	sta $226E.w		; 8D 6E 22 ; Store accumulator to $226E.w [Reads: Accumulator]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $13		; 10 13 ; Branch if plus to $10, $13 [Flow: branch]
	jsl $FF0210.l		; 22 10 02 FF ; Jump to subroutine long $FF0210.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	jsl $318300.l		; 22 00 83 31 ; Jump to subroutine long $318300.l [Writes: Stack Pointer] [Flow: call]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $030022.l,X		; FF 22 00 03 ; Subtract with carry (long,X) $030022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0D6E.w		; 8D 6E 0D ; Store accumulator to $0D6E.w [Reads: Accumulator]
	inc $FD43.w		; EE 43 FD ; Increment $FD43.w [Flags: NZ]
	inc $0101.w,X		; FE 01 01 ; Increment memory $0101.w,X [Reads: X Index] [Flags: NZ]
	cop $43.b		; 02 43 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $DE.b,S		; 83 DE ; Store accumulator (stack relative) $DE.b,S [Reads: Stack Pointer, Accumulator]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($0022.w,X)		; FC 22 00 ; Jump to subroutine indirect indexed ($0022.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $F943.w,X		; FE 43 F9 ; Increment memory $F943.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $43.b		; 02 43 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $040200.l		; 22 00 02 04 ; Jump to subroutine long $040200.l [Writes: Stack Pointer] [Flow: call]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	jsl $D31F00.l		; 22 00 1F D3 ; Jump to subroutine long $D31F00.l [Writes: Stack Pointer] [Flow: call]
	cmp ($B9.b,S),Y		; D3 B9 ; Compare accumulator (stack relative indirect indexed) ($B9.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	lda $7C44.w,Y		; B9 44 7C ; Load $7C44.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ror $B9.b		; 66 B9 ; Rotate right $B9.b [Reads: Direct Page] [Flags: NCZ]
	sbc [$64.b]		; E7 64 ; Subtract with carry (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
.ACCU 16
.INDEX 16
	rep #$BD		; C2 BD
	sta ($7E.b,X)		; 81 7E ; Store accumulator ($7E.b,X) [Reads: Direct Page, Accumulator, X Index]
	bit $C77E.w,X		; 3C 7E C7 ; Test bits $C77E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sta $01.b,S		; 83 01 ; Store accumulator (stack relative) $01.b,S [Reads: Stack Pointer, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $FF7E.w,X		; 3C 7E FF ; Test bits $FF7E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $C043.w		; 0E 43 C0 ; Arithmetic shift left $C043.w [Flags: NCZ]
	trb $8043.w		; 1C 43 80 ; Test and reset bits $8043.w [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	ora [$FF.b],Y		; 17 FF ; OR accumulator with memory (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $E3F1FD.l,X		; FF FD F1 E3 ; Subtract with carry (long,X) $E3F1FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C7.b,S		; E3 C7 ; Subtract stack-relative $C7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp [$00.b]		; C7 00 ; Compare accumulator (long) [$00.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $42FF7E.l,X		; FF 7E FF 42 ; Subtract with carry (long,X) $42FF7E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $51FF4E.l,X		; FF 4E FF 51 ; Subtract with carry (long,X) $51FF4E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $76FF57.l,X		; FF 57 FF 76 ; Subtract with carry (long,X) $76FF57.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $27FF0D.l,X		; FF 0D FF 27 ; Subtract with carry (long,X) $27FF0D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FDFE.w,X		; FE FE FD ; Increment memory $FDFE.w,X [Reads: X Index] [Flags: NZ]
	sbc $F3F3.w,X		; FD F3 F3 ; Subtract with carry $F3F3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EF.b,S		; 23 EF ; AND accumulator with stack relative $EF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $DFDF.w		; 0D DF DF ; Logical OR $DFDF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $7F7FBF.l,X		; BF BF 7F 7F ; Load long $7F7FBF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $1018.w		; 0C 18 10 ; Test and set bits $1018.w [Reads: Accumulator] [Flags: Z]
	jsr $8040.w		; 20 40 80 ; Jump to subroutine at $8040.w [Writes: Stack Pointer] [Flow: call]
	eor $27FF00.l		; 4F 00 FF 27 ; Exclusive OR accumulator with memory (long) $27FF00.l [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$7E.b],Y		; 17 7E ; OR accumulator with memory (long indexed) [$7E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $1F3F3E.l,X		; 7F 3E 3F 1F ; Add long $1F3F3E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $460F0F.l,X		; 1F 0F 0F 46 ; Logical OR long $460F0F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$03.b]		; 47 03 ; Exclusive OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $FCB8F1.l		; EF F1 B8 FC ; Subtract with carry (long) $FCB8F1.l [Writes: Accumulator] [Flags: NCVZ]
	inc $49FF.w,X		; FE FF 49 ; Increment memory $49FF.w,X [Reads: X Index] [Flags: NZ]
	and $0531.w,X		; 3D 31 05 ; AND accumulator with memory $0531.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($FDF1.w)		; 6C F1 FD ; Jump indirect to ($FDF1.w) [Flow: jump]
	sbc ($3F.b)		; F2 3F ; Subtract with carry (indirect) ($3F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $CE.b		; 24 CE ; Test bits $CE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora [$6E.b]		; 07 6E ; OR accumulator with memory (long) [$6E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $FFC8.w		; 1C C8 FF ; Test and reset bits $FFC8.w [Reads: Accumulator] [Flags: Z]
	sbc $EFFFE7.l,X		; FF E7 FF EF ; Subtract with carry (long,X) $EFFFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cop $BF.b		; 02 BF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF22F9.l,X		; FF F9 22 FF ; Subtract with carry (long,X) $FF22F9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $5FFF04.l,X		; 5F 04 FF 5F ; Exclusive OR accumulator with memory (long,X) $5FFF04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $44EA.w		; 4D EA 44 ; Exclusive OR $44EA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $05EB.w		; 4D EB 05 ; Exclusive OR $05EB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	nop		; EA ; No operation
	jmp $2838.w		; 4C 38 28 ; Jump to $2838.w [Flow: jump]
	and $322233.l		; 2F 33 22 32 ; AND accumulator with memory (long) $322233.l [Writes: Accumulator] [Flags: NZ]
	ora [$33.b]		; 07 33 ; OR accumulator with memory (long) [$33.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $C03F80.l,X		; 7F 80 3F C0 ; Add long $C03F80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy $FF22.w		; CC 22 FF ; Compare $FF22.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $FC.b		; 05 FC ; Logical OR $FC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($E0E0.w,X)		; FC E0 E0 ; Jump to subroutine indirect indexed ($E0E0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$24C0.w		; C0 C0 24 ; Compare #$24C0.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1F.b,S		; 03 1F ; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $C60543.l,X		; 3F 43 05 C6 ; AND accumulator with memory (long,X) $C60543.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$83.b]		; C7 83 ; Compare accumulator (long) [$83.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $45.b,S		; 43 45 ; Exclusive OR accumulator with stack relative $45.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	ora ($86.b,X)		; 01 86 ; Logical OR ($86.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $22.b		; 46 22 ; Logical shift right $22.b [Reads: Direct Page] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $39003F.l		; 22 3F 00 39 ; Jump to subroutine long $39003F.l [Writes: Stack Pointer] [Flow: call]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $290707.l,X		; FF 07 07 29 ; Subtract with carry (long,X) $290707.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsl $9812FF.l		; 22 FF 12 98 ; Jump to subroutine long $9812FF.l [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	jmp $427C.w		; 4C 7C 42 ; Jump to $427C.w [Flow: jump]
	ror $7F41.w,X		; 7E 41 7F ; Rotate right $7F41.w,X [Reads: X Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	adc $9C7F48.l,X		; 7F 48 7F 9C ; Add long $9C7F48.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $07FF3E.l,X		; FF 3E FF 07 ; Subtract with carry (long,X) $07FF3E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $81.b,S		; 83 81 ; Store accumulator (stack relative) $81.b,S [Reads: Stack Pointer, Accumulator]
	jsl $2BE080.l		; 22 80 E0 2B ; Jump to subroutine long $2BE080.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $3F		; 30 3F ; Branch if minus to $30, $3F [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $060F0F.l,X		; 1F 0F 0F 06 ; Logical OR long $060F0F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $8C.b		; 06 8C ; Arithmetic shift left $8C.b [Reads: Direct Page] [Flags: NCZ]
	sty $F8F8.w		; 8C F8 F8 ; Store Y register to $F8F8.w [Reads: Y Index]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cpy #$F0E0.w		; C0 E0 F0 ; Compare #$F0E0.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $0773.w,Y		; F9 73 07 ; Subtract with carry $0773.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0C080F.l		; 0F 0F 08 0C ; OR accumulator with memory (long) $0C080F.l [Writes: Accumulator] [Flags: NZ]
	sbc ($FE.b)		; F2 FE ; Subtract with carry (indirect) ($FE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($FF.b,X)		; E1 FF ; Subtract with carry ($FF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $FCF3.w		; 0C F3 FC ; Test and set bits $FCF3.w [Reads: Accumulator] [Flags: Z]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $F39F67.l		; 0F 67 9F F3 ; OR accumulator with memory (long) $F39F67.l [Writes: Accumulator] [Flags: NZ]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FD7F.w,X		; FE 7F FD ; Increment memory $FD7F.w,X [Reads: X Index] [Flags: NZ]
	lda $F7DFFB.l,X		; BF FB DF F7 ; Load long $F7DFFB.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $DFF7EF.l		; EF EF F7 DF ; Subtract with carry (long) $DFF7EF.l [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $C07FBF.l,X		; DF BF 7F C0 ; Compare accumulator (long,X) $C07FBF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FF3F03.l,X		; FF 03 3F FF ; Subtract with carry (long,X) $FF3F03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $7F.b		; 45 7F ; Exclusive OR $7F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0024E0.l,X		; FF E0 24 00 ; Subtract with carry (long,X) $0024E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $404000.l,X		; 3F 00 40 40 ; AND accumulator with memory (long,X) $404000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $038C00.l,X		; 7F 00 8C 03 ; Add long $038C00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $57DB03.l		; 8F 03 DB 57 ; Store accumulator (long) $57DB03.l [Reads: Accumulator]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc [$8F.b],Y		; 77 8F ; Add with carry (long indexed) [$8F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $88		; 70 88 ; Branch if overflow set to $70, $88 [Flow: branch]
	adc [$70.b],Y		; 77 70 ; Add with carry (long indexed) [$70.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $70FF00.l		; 8F 00 FF 70 ; Store accumulator (long) $70FF00.l [Reads: Accumulator]
	.db $70, $20		; 70 20 ; Branch if overflow set to $70, $20 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$8F.b]		; 07 8F ; OR accumulator with memory (long) [$8F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $28C744.l,X		; FF 44 C7 28 ; Subtract with carry (long,X) $28C744.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF3843.l		; EF 43 38 FF ; Subtract with carry (long) $FF3843.l [Writes: Accumulator] [Flags: NCVZ]
	ora #$7C93.w		; 09 93 7C ; Logical OR #$7C93.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jmp ($0093.w)		; 6C 93 00 ; Jump indirect to ($0093.w) [Flow: jump]
	sbc $231038.l,X		; FF 38 10 23 ; Subtract with carry (long,X) $231038.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator]
	sta [$47.b]		; 87 47 ; Store accumulator (long) [$47.b] [Reads: Direct Page, Accumulator]
	ldy $B86F.w		; AC 6F B8 ; Load $B86F.w into Y register [Writes: Y Index] [Flags: NZ]
	mvp $B0,$7F		; 44 7F B0 ; Move block positive $B0,$7F [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sta $40.b,S		; 83 40 ; Store accumulator (stack relative) $40.b,S [Reads: Stack Pointer, Accumulator]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $103810.l		; EF 10 38 10 ; Subtract with carry (long) $103810.l [Writes: Accumulator] [Flags: NCVZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $63FF20.l		; 0F 20 FF 63 ; OR accumulator with memory (long) $63FF20.l [Writes: Accumulator] [Flags: NZ]
	jsr ($EE61.w,X)		; FC 61 EE ; Jump to subroutine indirect indexed ($EE61.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$E7		; C2 E7
	ora $7E.b		; 05 7E ; Logical OR $7E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	bit $1B86.w,X		; 3C 86 1B ; Test bits $1B86.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cmp $2706.w,X		; DD 06 27 ; Compare accumulator $2706.w,X [Reads: X Index] [Flags: NCZ]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	nop		; EA ; No operation
	jmp $D202.w		; 4C 02 D2 ; Jump to $D202.w [Flow: jump]
	jmp $4C46AA.l		; 5C AA 46 4C ; Jump long to $4C46AA.l [Flow: jump]
	nop		; EA ; No operation
	jsl $230033.l		; 22 33 00 23 ; Jump to subroutine long $230033.l [Writes: Stack Pointer] [Flow: call]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $4040.w,Y		; 19 40 40 ; OR accumulator with memory $4040.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFEFE7.l,X		; FF E7 EF FF ; Subtract with carry (long,X) $FFEFE7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF9BF.l,X		; FF BF F9 FF ; Subtract with carry (long,X) $FFF9BF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($32.b,S),Y		; 53 32 ; XOR accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $3F403F.l,X		; 5F 3F 40 3F ; Exclusive OR accumulator with memory (long,X) $3F403F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $040400.l,X		; 7F 00 04 04 ; Add long $040400.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $CC.b		; 05 CC ; Logical OR $CC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$FFC0.w		; C0 C0 FF ; Compare #$FFC0.w with Y register [Reads: Y Index] [Flags: NCZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $05FF22.l,X		; BF 22 FF 05 ; Load long $05FF22.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFF00.l,X		; FF 00 FF FF ; Subtract with carry (long,X) $FFFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $B7.b		; 84 B7 ; Store Y register to $B7.b [Reads: Y Index]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $01.b,S		; C3 01 ; Compare accumulator (stack relative) $01.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $000201.l		; 22 01 02 00 ; Jump to subroutine long $000201.l [Writes: Stack Pointer] [Flow: call]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $80.b,S		; 43 80 ; Exclusive OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$C3C3.w		; C0 C3 C3 ; Compare #$C3C3.w with Y register [Reads: Y Index] [Flags: NCZ]
	jsl $FF0EFE.l		; 22 FE 0E FF ; Jump to subroutine long $FF0EFE.l [Writes: Stack Pointer] [Flow: call]
	adc $3C3F7F.l,X		; 7F 7F 3F 3C ; Add long $3C3F7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $FFC1.w,X		; 3E C1 FF ; Rotate left $FFC1.w,X [Reads: X Index] [Flags: NCZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $80FF7F.l,X		; 7F 7F FF 80 ; Add long $80FF7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($22.b,X)		; C1 22 ; Compare accumulator ($22.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0AFF22.l,X		; 7F 22 FF 0A ; Add long $0AFF22.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jmp ($38EF.w)		; 6C EF 38 ; Jump indirect to ($38EF.w) [Flow: jump]
	sbc $01FF10.l,X		; FF 10 FF 01 ; Subtract with carry (long,X) $01FF10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $8683.w,X		; FE 83 86 ; Increment memory $8683.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ora ($25.b,X)		; 01 25 ; Logical OR ($25.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $18FF.w,X		; 3C FF 18 ; Test bits $18FF.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $C6FF80.l,X		; FF 80 FF C6 ; Subtract with carry (long,X) $C6FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $716E.w,Y		; F9 6E 71 ; Subtract with carry $716E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$38.b],Y		; 37 38 ; AND accumulator with memory (long indexed) [$38.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	trb $0E0D.w		; 1C 0D 0E ; Test and reset bits $0E0D.w [Reads: Accumulator] [Flags: Z]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$80.b],Y		; 17 80 ; OR accumulator with memory (long indexed) [$80.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$F0E0.w		; C0 E0 F0 ; Compare #$F0E0.w with Y register [Reads: Y Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	clc		; 18 ; Clear carry flag [Flags: C]
	jmp ($B39C.w)		; 6C 9C B3 ; Jump indirect to ($B39C.w) [Flow: jump]
	cmp $2FE7D8.l		; CF D8 E7 2F ; Compare accumulator (long) $2FE7D8.l [Reads: Accumulator] [Flags: NCZ]
	.db $30, $97		; 30 97 ; Branch if minus to $30, $97 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp $07C7C7.l		; CF C7 C7 07 ; Compare accumulator (long) $07C7C7.l [Reads: Accumulator] [Flags: NCZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $1702.w,X		; 3D 02 17 ; AND accumulator with memory $1702.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sty $F4.b,X		; 94 F4 ; Store Y register $F4.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	cpy #$40C0.w		; C0 C0 40 ; Compare #$40C0.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$E020.w		; C0 20 E0 ; Compare #$E020.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3F3FBF.l,X		; 9F BF 3F 3F ; Store accumulator (long,X) $3F3FBF.l,X [Reads: Accumulator, X Index]
	ora $E2830F.l,X		; 1F 0F 83 E2 ; Logical OR long $E2830F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp [$3F.b]		; C7 3F ; Compare accumulator (long) [$3F.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	and $F8F8FF.l,X		; 3F FF F8 F8 ; AND accumulator with memory (long,X) $F8F8FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $70		; 70 70 ; Branch if overflow set to $70, $70 [Flow: branch]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	eor [$24.b]		; 47 24 ; Exclusive OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$8F.b]		; 07 8F ; OR accumulator with memory (long) [$8F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $7FDFFF.l,X		; FF FF DF 7F ; Subtract with carry (long,X) $7FDFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$C060.w		; A0 60 C0 ; Load #$C060.w into Y register [Writes: Y Index] [Flags: NZ]
	adc $8700FF.l,X		; 7F FF 00 87 ; Add long $8700FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora $978340.l,X		; 1F 40 83 97 ; Logical OR long $978340.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $1E.b		; 02 1E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC07F8.l,X		; FF F8 07 FC ; Subtract with carry (long,X) $FC07F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FCF3.w,Y		; F9 F3 FC ; Subtract with carry $FCF3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $091E.w,Y		; 19 1E 09 ; OR accumulator with memory $091E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $0E0D.w		; 0E 0D 0E ; Arithmetic shift left $0E0D.w [Flags: NCZ]
	sbc $010307.l,X		; FF 07 03 01 ; Subtract with carry (long,X) $010307.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	lda ($7D.b)		; B2 7D ; Load accumulator (indirect) ($7D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jsr ($4A03.w,X)		; FC 03 4A ; Jump to subroutine indirect indexed ($4A03.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $24.b,S		; 03 24 ; OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $00F097.l,X		; FF 97 F0 00 ; Subtract with carry (long,X) $00F097.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $007F.w		; 0E 7F 00 ; Arithmetic shift left $007F.w [Flags: NCZ]
	and $009F00.l,X		; 3F 00 9F 00 ; AND accumulator with memory (long,X) $009F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00C300.l		; 8F 00 C3 00 ; Store accumulator (long) $00C300.l [Reads: Accumulator]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sed		; F8 ; Set decimal flag [Flags: D]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $4CEA.w		; 2E EA 4C ; Rotate left $4CEA.w [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jmp $4EE9.w		; 4C E9 4E ; Jump to $4EE9.w [Flow: jump]
	sbc $41E14F.l		; EF 4F E1 41 ; Subtract with carry (long) $41E14F.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $5EDF41.l,X		; FF 41 DF 5E ; Subtract with carry (long,X) $5EDF41.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $33335F.l,X		; DF 5F 33 33 ; Compare accumulator (long,X) $33335F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $30, $31		; 30 31 ; Branch if minus to $30, $31 [Flow: branch]
	rol $213E.w,X		; 3E 3E 21 ; Rotate left $213E.w,X [Reads: X Index] [Flags: NCZ]
	jsr $0505.w		; 20 05 05 ; Jump to subroutine at $0505.w [Writes: Stack Pointer] [Flow: call]
	sbc $7FFF00.l,X		; FF 00 FF 7F ; Subtract with carry (long,X) $7FFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc [$80.b],Y		; F7 80 ; Subtract with carry (long indexed) [$80.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$7F.b],Y		; F7 7F ; Subtract with carry (long indexed) [$7F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFAC0.l,X		; FF C0 FA FF ; Subtract with carry (long,X) $FFFAC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $7F7780.l,X		; 7F 80 77 7F ; Add long $7F7780.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0200.w,X		; FE 00 02 ; Increment memory $0200.w,X [Reads: X Index] [Flags: NZ]
	jsr ($FCFA.w,X)		; FC FA FC ; Jump to subroutine indirect indexed ($FCFA.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $0C.b,S		; 43 0C ; Exclusive OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	nop		; EA ; No operation
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpy $4CEA.w		; CC EA 4C ; Compare $4CEA.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $0303FF.l,X		; FF FF 03 03 ; Subtract with carry (long,X) $0303FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $AA.b		; 45 AA ; Exclusive OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $5F.b		; 46 5F ; Logical shift right $5F.b [Reads: Direct Page] [Flags: NCZ]
	ldy #$BF01.w		; A0 01 BF ; Load #$BF01.w into Y register [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsl $002404.l		; 22 04 24 00 ; Jump to subroutine long $002404.l [Writes: Stack Pointer] [Flow: call]
	ora $9E.b,S		; 03 9E ; OR accumulator with stack relative $9E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $43BFB0.l,X		; 9F B0 BF 43 ; Store accumulator (long,X) $43BFB0.l,X [Reads: Accumulator, X Index]
	cpx #$09FF.w		; E0 FF 09 ; Compare #$09FF.w with X register [Reads: X Index] [Flags: NCZ]
	cmp ($FE.b,X)		; C1 FE ; Compare accumulator ($FE.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Stack Pointer, Accumulator]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $406000.l,X		; FF 00 60 40 ; Subtract with carry (long,X) $406000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $0DFE.w,Y		; F9 FE 0D ; Subtract with carry $0DFE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0605.w		; 0E 05 06 ; Arithmetic shift left $0605.w [Flags: NCZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	eor $C6.b		; 45 C6 ; Exclusive OR $C6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $F0.b		; 14 F0 ; Test and reset bits $F0.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sec		; 38 ; Set carry flag [Flags: C]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $6FF301.l,X		; FF 01 F3 6F ; Subtract with carry (long,X) $6FF301.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $14F65E.l		; EF 5E F6 14 ; Subtract with carry (long) $14F65E.l [Writes: Accumulator] [Flags: NCVZ]
	cpy $20.b		; C4 20 ; Compare $20.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ldy $9628.w		; AC 28 96 ; Load $9628.w into Y register [Writes: Y Index] [Flags: NZ]
	bit $FE.b,X		; 34 FE ; Test bits $FE.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	jsl $090900.l		; 22 00 09 09 ; Jump to subroutine long $090900.l [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor ($49.b)		; 52 49 ; Exclusive OR accumulator with memory (indirect) ($49.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $FC01.w,X		; FE 01 FC ; Increment memory $FC01.w,X [Reads: X Index] [Flags: NZ]
	ora $F9.b,S		; 03 F9 ; OR accumulator with stack relative $F9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($0F.b,S),Y		; F3 0F ; Subtract with carry (stack relative indirect indexed) ($0F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $E3.b,S		; 43 E3 ; Exclusive OR accumulator with stack relative $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0FF101.l,X		; 1F 01 F1 0F ; Logical OR long $0FF101.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $02FE01.l,X		; FF 01 FE 02 ; Subtract with carry (long,X) $02FE01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FA04.w,X		; FD 04 FA ; Subtract with carry $FA04.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$13F5.w		; 09 F5 13 ; Logical OR #$13F5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and [$C8.b],Y		; 37 C8 ; AND accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $FFA0.w,Y		; 59 A0 FF ; Exclusive OR accumulator with memory $FFA0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	inc $E4.b,X		; F6 E4 ; Increment memory $E4.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cpy #$E880.w		; C0 80 E8 ; Compare #$E880.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora [$C4.b],Y		; 17 C4 ; OR accumulator with memory (long indexed) [$C4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	sta $74.b,S		; 83 74 ; Store accumulator (stack relative) $74.b,S [Reads: Stack Pointer, Accumulator]
	cpy #$A03B.w		; C0 3B A0 ; Compare #$A03B.w with Y register [Reads: Y Index] [Flags: NCZ]
	eor $B96EB1.l,X		; 5F B1 6E B9 ; Exclusive OR accumulator with memory (long,X) $B96EB1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $9F.b,X		; 36 9F ; Rotate left $9F.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $4422.w		; 0C 22 44 ; Test and set bits $4422.w [Reads: Accumulator] [Flags: Z]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$F0.b],Y		; 97 F0 ; Store accumulator (long indexed) [$F0.b],Y [Reads: Direct Page, Y Index, Accumulator]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF05.w,Y		; 39 05 FF ; AND accumulator with memory $FF05.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $3EFF.w		; 1C FF 3E ; Test and reset bits $3EFF.w [Reads: Accumulator] [Flags: Z]
	sbc $FDFF7F.l,X		; FF 7F FF FD ; Subtract with carry (long,X) $FDFF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F9FEFA.l,X		; FF FA FE F9 ; Subtract with carry (long,X) $F9FEFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFFC.l,X		; FF FC FF F8 ; Subtract with carry (long,X) $F8FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$80C0.w		; E0 C0 80 ; Compare #$80C0.w with X register [Reads: X Index] [Flags: NCZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $30, $FF		; 30 FF ; Branch if minus to $30, $FF [Flow: branch]
	rol $EF.b		; 26 EF ; Rotate left $EF.b [Reads: Direct Page] [Flags: NCZ]
	ora $FE3C7F.l		; 0F 7F 3C FE ; OR accumulator with memory (long) $FE3C7F.l [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	inc $7F59.w,X		; FE 59 7F ; Increment memory $7F59.w,X [Reads: X Index] [Flags: NZ]
	jmp $00007F.l		; 5C 7F 00 00 ; Jump long to $00007F.l [Flow: jump]
	.db $10, $80		; 10 80 ; Branch if plus to $10, $80 [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	trb $DF.b		; 14 DF ; Test and reset bits $DF.b [Reads: Accumulator] [Flags: Z]
	rol $FF.b,X		; 36 FF ; Rotate left $FF.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $FF7DFF.l		; 0F FF 7D FF ; OR accumulator with memory (long) $FF7DFF.l [Writes: Accumulator] [Flags: NZ]
	stx $2A.b		; 86 2A ; Store X register to $2A.b [Reads: X Index]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	jsr $0022.w		; 20 22 00 ; Jump to subroutine at $0022.w [Writes: Stack Pointer] [Flow: call]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	sta [$18.b],Y		; 97 18 ; Store accumulator (long indexed) [$18.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora $4E.b,S		; 03 4E ; OR accumulator with stack relative $4E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $DF2CE0.l,X		; FF E0 2C DF ; Subtract with carry (long,X) $DF2CE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($DF.b,S),Y		; 53 DF ; XOR accumulator (stack relative indirect indexed) ($DF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($DB.b,X)		; 41 DB ; Exclusive OR accumulator with memory ($DB.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($D3.b,X)		; 41 D3 ; Exclusive OR accumulator with memory ($D3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($CD.b,X)		; 41 CD ; Exclusive OR accumulator with memory ($CD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($D3.b,X)		; 41 D3 ; Exclusive OR accumulator with memory ($D3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($9F.b,S),Y		; 53 9F ; XOR accumulator (stack relative indirect indexed) ($9F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $00FF.w,X		; 5E FF 00 ; Logical shift right $00FF.w,X [Reads: X Index] [Flags: NCZ]
	jsr $282C.w		; 20 2C 28 ; Jump to subroutine at $282C.w [Writes: Stack Pointer] [Flow: call]
	jsr $2C32.w		; 20 32 2C ; Jump to subroutine at $2C32.w [Writes: Stack Pointer] [Flow: call]
	jsr $B000.w		; 20 00 B0 ; Jump to subroutine at $B000.w [Writes: Stack Pointer] [Flow: call]
	cmp $AB.b,S		; C3 AB ; Compare accumulator (stack relative) $AB.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cpy #$C0AD.w		; C0 AD C0 ; Compare #$C0AD.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda $9AD2.w,X		; BD D2 9A ; Load $9AD2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $7CFFF3.l,X		; FF F3 FF 7C ; Subtract with carry (long,X) $7CFFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $171C00.l,X		; FF 00 1C 17 ; Subtract with carry (long,X) $171C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0E0800.l,X		; FF 00 08 0E ; Subtract with carry (long,X) $0E0800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1FFB1F.l,X		; FF 1F FB 1F ; Subtract with carry (long,X) $1FFB1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($1F.b),Y		; F1 1F ; Subtract with carry ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1F.b,X		; F5 1F ; Subtract $1F.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $0E0400.l		; 22 00 04 0E ; Jump to subroutine long $0E0400.l [Writes: Stack Pointer] [Flow: call]
	ora $11111B.l,X		; 1F 1B 11 11 ; Logical OR long $11111B.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $275BAA.l		; 4F AA 5B 27 ; Exclusive OR accumulator with memory (long) $275BAA.l [Writes: Accumulator] [Flags: NZ]
	tsb $4D.b		; 04 4D ; Test and set bits $4D.b [Reads: Accumulator] [Flags: Z]
	sbc $1F.b,X		; F5 1F ; Subtract $1F.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($BB.b,X)		; 01 BB ; Logical OR ($BB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	rol $11.b		; 26 11 ; Rotate left $11.b [Reads: Direct Page] [Flags: NCZ]
	cpx #$1573.w		; E0 73 15 ; Compare #$1573.w with X register [Reads: X Index] [Flags: NCZ]
	jsr $705F.w		; 20 5F 70 ; Jump to subroutine at $705F.w [Writes: Stack Pointer] [Flow: call]
	ora $8F10DF.l		; 0F DF 10 8F ; OR accumulator with memory (long) $8F10DF.l [Writes: Accumulator] [Flags: NZ]
	ora $C020C0.l		; 0F C0 20 C0 ; OR accumulator with memory (long) $C020C0.l [Writes: Accumulator] [Flags: NZ]
	and $FE1E21.l,X		; 3F 21 1E FE ; AND accumulator with memory (long,X) $FE1E21.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $3F		; 70 3F ; Branch if overflow set to $70, $3F [Flow: branch]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $F1.b,X		; 36 F1 ; Rotate left $F1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor ($A0.b),Y		; 51 A0 ; Exclusive OR accumulator with memory ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp $FE14F0.l		; 5C F0 14 FE ; Jump long to $FE14F0.l [Flow: jump]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dec $FD72.w		; CE 72 FD ; Decrement $FD72.w [Flags: NZ]
	adc ($8C.b,S),Y		; 73 8C ; Add with carry (stack relative indirect indexed) ($8C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $48.b,S		; 03 48 ; OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $0B03.w		; 0E 03 0B ; Arithmetic shift left $0B03.w [Flags: NCZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $21FF.w,X		; DE FF 21 ; Decrement memory $21FF.w,X [Reads: X Index] [Flags: NZ]
	sbc $CCCC.w		; ED CC CC ; Subtract $CCCC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and ($00.b,S),Y		; 33 00 ; AND accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy $3200.w		; CC 00 32 ; Compare $3200.w with Y register [Reads: Y Index] [Flags: NCZ]
	and ($7F.b)		; 32 7F ; AND accumulator with memory (indirect) ($7F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp $00CC.w		; 4C CC 00 ; Jump to $00CC.w [Flow: jump]
	ora ($33.b)		; 12 33 ; OR accumulator with memory (indirect) ($33.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $B3CDFF.l,X		; FF FF CD B3 ; Subtract with carry (long,X) $B3CDFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$40.b]		; A7 40 ; Load accumulator (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $F3.b,S		; 43 F3 ; Exclusive OR accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc ($7D.b,X)		; E1 7D ; Subtract with carry ($7D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$901E.w		; E0 1E 90 ; Compare #$901E.w with X register [Reads: X Index] [Flags: NCZ]
	ora $000FB0.l		; 0F B0 0F 00 ; OR accumulator with memory (long) $000FB0.l [Writes: Accumulator] [Flags: NZ]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($7082.w)		; 6C 82 70 ; Jump indirect to ($7082.w) [Flow: jump]
	.db $62, $9C, $52		; 62 9C 52 ; Push effective relative address $62, $9C, $52 [Writes: Stack Pointer]
	sty $C42A.w		; 8C 2A C4 ; Store Y register to $C42A.w [Reads: Y Index]
	.db $10, $E0		; 10 E0 ; Branch if plus to $10, $E0 [Flow: branch]
	asl $01F0.w		; 0E F0 01 ; Arithmetic shift left $01F0.w [Flags: NCZ]
	inc $0C10.w,X		; FE 10 0C ; Increment memory $0C10.w,X [Reads: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $3C.b,S		; 83 3C ; Store accumulator (stack relative) $3C.b,S [Reads: Stack Pointer, Accumulator]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $F097.w,X		; FE 97 F0 ; Increment memory $F097.w,X [Reads: X Index] [Flags: NZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $3FEF.w		; AC EF 3F ; Load $3FEF.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $01FE02.l,X		; FF 02 FE 01 ; Subtract with carry (long,X) $01FE02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $100400.l,X		; FF 00 04 10 ; Subtract with carry (long,X) $100400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $C1		; 80 C1 ; Branch always to $80, $C1 [Flow: branch]
	jsr ($22FE.w,X)		; FC FE 22 ; Jump to subroutine indirect indexed ($22FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FF9E0F.l,X		; FF 0F 9E FF ; Subtract with carry (long,X) $FF9E0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FF0FFF.l,X		; 1F FF 0F FF ; Logical OR long $FF0FFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	lda #$3AEF.w		; A9 EF 3A ; Load #$3AEF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc $BF01.w,X		; FE 01 BF ; Increment memory $BF01.w,X [Reads: X Index] [Flags: NZ]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($10.b,S),Y		; 13 10 ; OR accumulator (stack relative indirect indexed) ($10.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sec		; 38 ; Set carry flag [Flags: C]
	stz $3FFF.w,X		; 9E FF 3F ; Store zero to $3FFF.w,X [Reads: X Index]
	sbc $26FF0F.l,X		; FF 0F FF 26 ; Subtract with carry (long,X) $26FF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $32DF51.l,X		; FF 51 DF 32 ; Subtract with carry (long,X) $32DF51.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FF01.w,X		; FE 01 FF ; Increment memory $FF01.w,X [Reads: X Index] [Flags: NZ]
	cpy #$23FF.w		; C0 FF 23 ; Compare #$23FF.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0001.w		; 20 01 00 ; Jump to subroutine at $0001.w [Writes: Stack Pointer] [Flow: call]
	sta $97.b,X		; 95 97 ; Store accumulator to $97.b,X [Reads: Accumulator, X Index]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $01.b,S		; C3 01 ; Compare accumulator (stack relative) $01.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $5FBE44.l,X		; FF 44 BE 5F ; Subtract with carry (long,X) $5FBE44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $BE.b		; 45 BE ; Exclusive OR $BE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $180804.l,X		; 7F 04 08 18 ; Add long $180804.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $2822.w		; 2E 22 28 ; Rotate left $2822.w [Flags: NCZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($09.b),Y		; 31 09 ; AND accumulator with memory ($09.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $FDB1.w,X		; BD B1 FD ; Load $FDB1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($0C.b),Y		; F1 0C ; Subtract with carry ($0C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($EF.b),Y		; F1 EF ; Subtract with carry ($EF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($2F.b)		; 32 2F ; AND accumulator with memory (indirect) ($2F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $CE22.w,X		; 3D 22 CE ; AND accumulator with memory $CE22.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $4E.b		; 14 4E ; Test and reset bits $4E.b [Reads: Accumulator] [Flags: Z]
	asl $CC0E.w		; 0E 0E CC ; Arithmetic shift left $CC0E.w [Flags: NCZ]
.ACCU 16
.INDEX 16
	rep #$FF		; C2 FF
	brk $C1.b		; 00 C1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $3FDE.w,X		; 3E DE 3F ; Rotate left $3FDE.w,X [Reads: X Index] [Flags: NCZ]
	cmp $3CCC3F.l		; CF 3F CC 3C ; Compare accumulator (long) $3CCC3F.l [Reads: Accumulator] [Flags: NCZ]
	inc $1E.b		; E6 1E ; Increment $1E.b [Reads: Direct Page] [Flags: NZ]
	sbc $1F.b,S		; E3 1F ; Subtract stack-relative $1F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$0B.b],Y		; 17 0B ; OR accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$13.b]		; 07 13 ; OR accumulator with memory (long) [$13.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	rol $D7.b		; 26 D7 ; Rotate left $D7.b [Reads: Direct Page] [Flags: NCZ]
	cpy $AF.b		; C4 AF ; Compare $AF.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $80, $6F		; 80 6F ; Branch always to $80, $6F [Flow: branch]
	stx $6F.b		; 86 6F ; Store X register to $6F.b [Reads: X Index]
	sta $77.b,S		; 83 77 ; Store accumulator (stack relative) $77.b,S [Reads: Stack Pointer, Accumulator]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$EC.b]		; 07 EC ; OR accumulator with memory (long) [$EC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jsl $1C0038.l		; 22 38 00 1C ; Jump to subroutine long $1C0038.l [Writes: Stack Pointer] [Flow: call]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $1F.b		; 02 1F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$F0.b]		; 07 F0 ; OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cpx #$005C.w		; E0 5C 00 ; Compare #$005C.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $003FC0.l,X		; FF C0 3F 00 ; Subtract with carry (long,X) $003FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $E0CFC0.l,X		; 1F C0 CF E0 ; Logical OR long $E0CFC0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$F2.b]		; E7 F2 ; Subtract with carry (long) [$F2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F8.b),Y		; F1 F8 ; Subtract with carry ($F8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FDFC.w,Y		; F9 FC FD ; Subtract with carry $FDFC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $F3E70F.l,X		; 3F 0F E7 F3 ; AND accumulator with memory (long,X) $F3E70F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FEFD.w,Y		; F9 FD FE ; Subtract with carry $FEFD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $81BD.w,X		; FE BD 81 ; Increment memory $81BD.w,X [Reads: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
	rep #$6E		; C2 6E
	inc $EF.b		; E6 EF ; Increment $EF.b [Reads: Direct Page] [Flags: NZ]
	cpx $F3.b		; E4 F3 ; Compare $F3.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	sep #$41		; E2 41 ; Set processor status bits #$41 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cmp ($90.b,X)		; C1 90 ; Compare accumulator ($90.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	.db $90, $39		; 90 39 ; Branch if carry clear to $90, $39 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	ror $5ABC.w,X		; 7E BC 5A ; Rotate right $5ABC.w,X [Reads: X Index] [Flags: NCZ]
	eor $3E5C.w,Y		; 59 5C 3E ; Exclusive OR accumulator with memory $3E5C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $787AC7.l		; 6F C7 7A 78 ; Add with carry (long) $787AC7.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $7BF9.w,X		; FD F9 7B ; Subtract with carry $7BF9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($77.b,S),Y		; F3 77 ; Subtract with carry (stack relative indirect indexed) ($77.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$4F.b]		; E7 4F ; Subtract with carry (long) [$4F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $1DDF.w		; 8D DF 1D ; Store accumulator to $1DDF.w [Reads: Accumulator]
	dec $E02E.w		; CE 2E E0 ; Decrement $E02E.w [Flags: NZ]
	sta ($97.b),Y		; 91 97 ; Store accumulator ($97.b),Y [Reads: Direct Page, Y Index, Accumulator]
	rol $6C.b,X		; 36 6C ; Rotate left $6C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	bit $24.b,X		; 34 24 ; Test bits $24.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora ($8E.b),Y		; 11 8E ; OR accumulator with memory ($8E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $EFD0DF.l		; 2F DF D0 EF ; AND accumulator with memory (long) $EFD0DF.l [Writes: Accumulator] [Flags: NZ]
	and $181730.l		; 2F 30 17 18 ; AND accumulator with memory (long) $181730.l [Writes: Accumulator] [Flags: NZ]
	cmp [$D9.b],Y		; D7 D9 ; Compare accumulator (long indexed) [$D9.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc [$FB.b],Y		; F7 FB ; Subtract with carry (long indexed) [$FB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FB.b		; E5 FB ; Subtract $FB.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dec $00F1.w		; CE F1 00 ; Decrement $00F1.w [Flags: NZ]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$2220.w		; E0 20 22 ; Compare #$2220.w with X register [Reads: X Index] [Flags: NCZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$FF8F.w		; 29 8F FF ; Logical AND #$FF8F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $EF.b,Y		; 96 EF ; Store X register $EF.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc [$5C.b]		; 67 5C ; Add with carry (long) [$5C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $BE.b,S		; 63 BE ; Add with carry (stack relative) $BE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($7B.b,X)		; C1 7B ; Compare accumulator ($7B.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc [$16.b],Y		; F7 16 ; Subtract with carry (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00000C.l,X		; FF 0C 00 00 ; Subtract with carry (long,X) $00000C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $54EF28.l,X		; FF 28 EF 54 ; Subtract with carry (long,X) $54EF28.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$55.b],Y		; D7 55 ; Compare accumulator (long indexed) [$55.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp [$54.b],Y		; D7 54 ; Compare accumulator (long indexed) [$54.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp [$6C.b],Y		; D7 6C ; Compare accumulator (long indexed) [$6C.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc $C17FB8.l		; EF B8 7F C1 ; Subtract with carry (long) $C17FB8.l [Writes: Accumulator] [Flags: NCVZ]
	rol $1000.w,X		; 3E 00 10 ; Rotate left $1000.w,X [Reads: X Index] [Flags: NCZ]
	jsl $100138.l		; 22 38 01 10 ; Jump to subroutine long $100138.l [Writes: Stack Pointer] [Flow: call]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $39.b,X		; D6 39 ; Decrement memory $39.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	lda $F64D70.l		; AF 70 4D F6 ; Load long $F64D70.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $D31E.w		; ED 1E D3 ; Subtract $D31E.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	bit $39C6.w,X		; 3C C6 39 ; Test bits $39C6.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cmp $3B.b		; C5 3B ; Compare $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jsl $040000.l		; 22 00 00 04 ; Jump to subroutine long $040000.l [Writes: Stack Pointer] [Flow: call]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $D8E71B.l		; 0F 1B E7 D8 ; OR accumulator with memory (long) $D8E71B.l [Writes: Accumulator] [Flags: NZ]
	sbc [$2B.b]		; E7 2B ; Subtract with carry (long) [$2B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$FA.b],Y		; D7 FA ; Compare accumulator (long indexed) [$FA.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	asl $D9.b		; 06 D9 ; Arithmetic shift left $D9.b [Reads: Direct Page] [Flags: NCZ]
	and [$12.b]		; 27 12 ; AND accumulator with memory (long) [$12.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $FCC4.w,X		; FE C4 FC ; Increment memory $FCC4.w,X [Reads: X Index] [Flags: NZ]
	ldx $22CE.w,Y		; BE CE 22 ; Load X register $22CE.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	cpy #$4310.w		; C0 10 43 ; Compare #$4310.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $FC		; 80 FC ; Branch always to $80, $FC [Flow: branch]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Stack Pointer, Accumulator]
	inc $0080.w,X		; FE 80 00 ; Increment memory $0080.w,X [Reads: X Index] [Flags: NZ]
	sbc $FF3C00.l,X		; FF 00 3C FF ; Subtract with carry (long,X) $FF3C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7C7FEF.l		; EF EF 7F 7C ; Subtract with carry (long) $7C7FEF.l [Writes: Accumulator] [Flags: NCVZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $7C8300.l,X		; FF 00 83 7C ; Subtract with carry (long,X) $7C8300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $42, $A5		; 42 A5 ; Reserved instruction
	ror $E7.b		; 66 E7 ; Rotate right $E7.b [Reads: Direct Page] [Flags: NCZ]
	bit $D3.b		; 24 D3 ; Test bits $D3.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ror $8499.w		; 6E 99 84 ; Rotate right $8499.w [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $78.b,S		; 83 78 ; Store accumulator (stack relative) $78.b,S [Reads: Stack Pointer, Accumulator]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $437F.w,X		; FE 7F 43 ; Increment memory $437F.w,X [Reads: X Index] [Flags: NZ]
	lda $DF02FE.l,X		; BF FE 02 DF ; Load long $DF02FE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $23DF.w,X		; FE DF 23 ; Increment memory $23DF.w,X [Reads: X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora $28.b,S		; 03 28 ; OR accumulator with stack relative $28.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $27313D.l		; 4F 3D 31 27 ; Exclusive OR accumulator with memory (long) $27313D.l [Writes: Accumulator] [Flags: NZ]
	dec $3FE0.w		; CE E0 3F ; Decrement $3FE0.w [Flags: NZ]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $06FE03.l,X		; FF 03 FE 06 ; Subtract with carry (long,X) $06FE03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $02FC02.l,X		; FF 02 FC 02 ; Subtract with carry (long,X) $02FC02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0CFF09.l,X		; FF 09 FF 0C ; Subtract with carry (long,X) $0CFF09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$4F.b],Y		; F7 4F ; Subtract with carry (long indexed) [$4F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $8042.w		; 0C 42 80 ; Test and set bits $8042.w [Reads: Accumulator] [Flags: Z]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $7C		; 80 7C ; Branch always to $80, $7C [Flow: branch]
	cpx #$E09F.w		; E0 9F E0 ; Compare #$E09F.w with X register [Reads: X Index] [Flags: NCZ]
	cmp $7EEFF0.l,X		; DF F0 EF 7E ; Compare accumulator (long,X) $7EEFF0.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	adc ($23.b,X)		; 61 23 ; Add with carry ($23.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $2F		; 80 2F ; Branch always to $80, $2F [Flow: branch]
	cmp $0F.b,S		; C3 0F ; Compare accumulator (stack relative) $0F.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$00FE.w		; E0 FE 00 ; Compare #$00FE.w with X register [Reads: X Index] [Flags: NCZ]
	inc $3EC0.w,X		; FE C0 3E ; Increment memory $3EC0.w,X [Reads: X Index] [Flags: NZ]
	jsr $D0DE.w		; 20 DE D0 ; Jump to subroutine at $D0DE.w [Writes: Stack Pointer] [Flow: call]
	inc $F7E8.w		; EE E8 F7 ; Increment $F7E8.w [Flags: NZ]
	sbc $F7.b,X		; F5 F7 ; Subtract $F7.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	pea $0122.w		; F4 22 01 ; Push absolute address $0122.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	trb $C1.b		; 14 C1 ; Test and reset bits $C1.b [Reads: Accumulator] [Flags: Z]
	sbc ($F1.b,X)		; E1 F1 ; Subtract with carry ($F1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00FF60.l,X		; FF 60 FF 00 ; Subtract with carry (long,X) $00FF60.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $303FE0.l,X		; FF E0 3F 30 ; Subtract with carry (long,X) $303FE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $ECEFD8.l,X		; DF D8 EF EC ; Compare accumulator (long,X) $ECEFD8.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc [$F6.b],Y		; F7 F6 ; Subtract with carry (long indexed) [$F6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsl $C00400.l		; 22 00 04 C0 ; Jump to subroutine long $C00400.l [Writes: Stack Pointer] [Flow: call]
	cpx #$F8F0.w		; E0 F0 F8 ; Compare #$F8F0.w with X register [Reads: X Index] [Flags: NCZ]
	jsr ($F749.w,X)		; FC 49 F7 ; Jump to subroutine indirect indexed ($F749.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ror $43.b		; 66 43 ; Rotate right $43.b [Reads: Direct Page] [Flags: NCZ]
	lda $66.b,X		; B5 66 ; Load $66.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($F7.b,X)		; 01 F7 ; Logical OR ($F7.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ror $24.b		; 66 24 ; Rotate right $24.b [Reads: Direct Page] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $3EBF00.l,X		; FF 00 BF 3E ; Subtract with carry (long,X) $3EBF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $F74346.l,X		; DF 46 43 F7 ; Compare accumulator (long,X) $F74346.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ror $1D.b		; 66 1D ; Rotate right $1D.b [Reads: Direct Page] [Flags: NCZ]
	cmp ($42.b,S),Y		; D3 42 ; Compare accumulator (stack relative indirect indexed) ($42.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sta ($3C.b,X)		; 81 3C ; Store accumulator ($3C.b,X) [Reads: Direct Page, Accumulator, X Index]
	lda $66.b,X		; B5 66 ; Load $66.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $185E.w,X		; 3C 5E 18 ; Test bits $185E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	trb $3BE3.w		; 1C E3 3B ; Test and reset bits $3BE3.w [Reads: Accumulator] [Flags: Z]
	cmp [$F7.b]		; C7 F7 ; Compare accumulator (long) [$F7.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $F80FFC.l		; 0F FC 0F F8 ; OR accumulator with memory (long) $F80FFC.l [Writes: Accumulator] [Flags: NZ]
	ora $3FCBF4.l		; 0F F4 CB 3F ; OR accumulator with memory (long) $3FCBF4.l [Writes: Accumulator] [Flags: NZ]
	cpx #$E01F.w		; E0 1F E0 ; Compare #$E01F.w with X register [Reads: X Index] [Flags: NCZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($71.b,S),Y		; 13 71 ; OR accumulator (stack relative indirect indexed) ($71.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stx $DFA4.w		; 8E A4 DF ; Store X register to $DFA4.w [Reads: X Index]
	ldx #$26D3.w		; A2 D3 26 ; Load #$26D3.w into X register [Writes: X Index] [Flags: NZ]
	cmp [$2C.b],Y		; D7 2C ; Compare accumulator (long indexed) [$2C.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp $BFCE31.l,X		; DF 31 CE BF ; Compare accumulator (long,X) $BFCE31.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $0000C0.l,X		; 3F C0 00 00 ; AND accumulator with memory (long,X) $0000C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $2308.w		; 0C 08 23 ; Test and set bits $2308.w [Reads: Accumulator] [Flags: Z]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $F94380.l,X		; 7F 80 43 F9 ; Add long $F94380.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	sbc $0CFB00.l,X		; FF 00 FB 0C ; Subtract with carry (long,X) $0CFB00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($DC.b,S),Y		; 33 DC ; AND accumulator (stack relative indirect indexed) ($DC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $DC.b,S		; 23 DC ; AND accumulator with stack relative $DC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $0F0028.l,X		; FF 28 00 0F ; Subtract with carry (long,X) $0F0028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit $7DBA.w,X		; 3C BA 7D ; Test bits $7DBA.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ldx $79.b,Y		; B6 79 ; Load X register $79.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	cpy $FD33.w		; CC 33 FD ; Compare $FD33.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $F9.b,S		; 03 F9 ; OR accumulator with stack relative $F9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$3A.b]		; 07 3A ; OR accumulator with memory (long) [$3A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $26.b		; C6 26 ; Decrement $26.b [Reads: Direct Page] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($35.b,X)		; 01 35 ; Logical OR ($35.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	mvn $A9,$DB		; 54 DB A9 ; Move block negative $A9,$DB [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	lda [$4B.b],Y		; B7 4B ; Load accumulator (long indexed) [$4B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$97.b],Y		; 77 97 ; Add with carry (long indexed) [$97.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $91ED95.l		; EF 95 ED 91 ; Subtract with carry (long) $91ED95.l [Writes: Accumulator] [Flags: NCVZ]
	sbc #$EDD5.w		; E9 D5 ED ; Subtract #$EDD5.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $2F.b		; 02 2F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $C7C038.l,X		; DF 38 C0 C7 ; Compare accumulator (long,X) $C7C038.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sta $80.b,S		; 83 80 ; Store accumulator (stack relative) $80.b,S [Reads: Stack Pointer, Accumulator]
	ora $B0.b,S		; 03 B0 ; OR accumulator with stack relative $B0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($68.b,X)		; 01 68 ; Logical OR ($68.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $30, $B0		; 30 B0 ; Branch if minus to $30, $B0 [Flow: branch]
	cpy #$8000.w		; C0 00 80 ; Compare #$8000.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $801400.l		; 22 00 14 80 ; Jump to subroutine long $801400.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $B5FE.w		; 0D FE B5 ; Logical OR $B5FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $C2FFB6.l		; CF B6 FF C2 ; Compare accumulator (long) $C2FFB6.l [Reads: Accumulator] [Flags: NCZ]
	sbc $3BFFF2.l,X		; FF F2 FF 3B ; Subtract with carry (long,X) $3BFFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EA3FD8.l,X		; FF D8 3F EA ; Subtract with carry (long,X) $EA3FD8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $253001.l,X		; 1F 01 30 25 ; Logical OR long $253001.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $01		; 70 01 ; Branch if overflow set to $70, $01 [Flow: branch]
	eor $B5.b,S		; 43 B5 ; Exclusive OR accumulator with stack relative $B5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $0A.b,X		; 76 0A ; Rotate right $0A.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sta $CD7E.w,X		; 9D 7E CD ; Store accumulator to $CD7E.w,X [Reads: Accumulator, X Index]
	rol $1EE5.w,X		; 3E E5 1E ; Rotate left $1EE5.w,X [Reads: X Index] [Flags: NCZ]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $FE4E00.l		; 22 00 4E FE ; Jump to subroutine long $FE4E00.l [Writes: Stack Pointer] [Flow: call]
	adc $263F00.l,X		; 7F 00 3F 26 ; Add long $263F00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $AE.b		; 45 AE ; Exclusive OR $AE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $9E.b,S		; 03 9E ; OR accumulator with stack relative $9E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($EE.b,S),Y		; 73 EE ; Add with carry (stack relative indirect indexed) ($EE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $AE.b		; 45 AE ; Exclusive OR $AE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $100008.l		; 22 08 00 10 ; Jump to subroutine long $100008.l [Writes: Stack Pointer] [Flow: call]
	and $08.b,S		; 23 08 ; AND accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $4EF6.w,Y		; 19 F6 4E ; OR accumulator with memory $4EF6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($4F.b,S),Y		; B3 4F ; Load accumulator (stack relative indirect indexed) ($4F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor [$BE.b]		; 47 BE ; Exclusive OR accumulator with memory (long) [$BE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($BE.b,X)		; 61 BE ; Add with carry ($BE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $BF.b		; 65 BF ; Add $BF.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $BA.b		; 65 BA ; Add $BA.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($98.b,X)		; 61 98 ; Add with carry ($98.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($41.b,X)		; 61 41 ; Add with carry ($41.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2326.w		; 20 26 23 ; Jump to subroutine at $2326.w [Writes: Stack Pointer] [Flow: call]
	rol $06.b		; 26 06 ; Rotate left $06.b [Reads: Direct Page] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cpy $43.b		; C4 43 ; Compare $43.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp [$0C.b]		; C7 0C ; Compare accumulator (long) [$0C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpx $9703.w		; EC 03 97 ; Compare $9703.w with X register [Reads: X Index] [Flags: NCZ]
	tsb $0FBF.w		; 0C BF 0F ; Test and set bits $0FBF.w [Reads: Accumulator] [Flags: Z]
	eor [$37.b]		; 47 37 ; Exclusive OR accumulator with memory (long) [$37.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	ora [$02.b]		; 07 02 ; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $43.b		; 02 43 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $7D313D.l		; 0F 3D 31 7D ; OR accumulator with memory (long) $7D313D.l [Writes: Accumulator] [Flags: NZ]
	lda ($FD.b),Y		; B1 FD ; Load accumulator ($FD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($EF.b,S),Y		; F3 EF ; Subtract with carry (stack relative indirect indexed) ($EF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $8D324E.l,X		; 7F 4E 32 8D ; Add long $8D324E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($7F.b,X)		; 81 7F ; Store accumulator ($7F.b,X) [Reads: Direct Page, Accumulator, X Index]
	adc ($DE.b),Y		; 71 DE ; Add with carry ($DE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $1E0E.w		; 0E 0E 1E ; Arithmetic shift left $1E0E.w [Flags: NCZ]
	lda ($CD.b,X)		; A1 CD ; Load accumulator ($CD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ror $378E.w,X		; 7E 8E 37 ; Rotate right $378E.w,X [Reads: X Index] [Flags: NCZ]
	sbc $61EF03.l,X		; FF 03 EF 61 ; Subtract with carry (long,X) $61EF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($41.b,X)		; C1 41 ; Compare accumulator ($41.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	eor $CF.b,S		; 43 CF ; Exclusive OR accumulator with stack relative $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $CB36E0.l		; 4F E0 36 CB ; Exclusive OR accumulator with memory (long) $CB36E0.l [Writes: Accumulator] [Flags: NZ]
	eor $208F48.l		; 4F 48 8F 20 ; Exclusive OR accumulator with memory (long) $208F48.l [Writes: Accumulator] [Flags: NZ]
	cmp [$1F.b]		; C7 1F ; Compare accumulator (long) [$1F.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpx #$3E1E.w		; E0 1E 3E ; Compare #$3E1E.w with X register [Reads: X Index] [Flags: NCZ]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	bit $B7.b,X		; 34 B7 ; Test bits $B7.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	cmp $00FFE0.l,X		; DF E0 FF 00 ; Compare accumulator (long,X) $00FFE0.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	lda $098909.l,X		; BF 09 89 09 ; Load long $098909.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $7FBF49.l,X		; BF 49 BF 7F ; Load long $7FBF49.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $3FC000.l,X		; FF 00 C0 3F ; Subtract with carry (long,X) $3FC000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ror $40.b,X		; 76 40 ; Rotate right $40.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $18FFC0.l,X		; 3F C0 FF 18 ; AND accumulator with memory (long,X) $18FFC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$3C.b]		; E7 3C ; Subtract with carry (long) [$3C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc [$98.b]		; 67 98 ; Add with carry (long) [$98.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rol $7CC1.w,X		; 3E C1 7C ; Rotate left $7CC1.w,X [Reads: X Index] [Flags: NCZ]
	sta $FE.b,S		; 83 FE ; Store accumulator (stack relative) $FE.b,S [Reads: Stack Pointer, Accumulator]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $F94380.l,X		; 7F 80 43 F9 ; Add long $F94380.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $88.b		; 06 88 ; Arithmetic shift left $88.b [Reads: Direct Page] [Flags: NCZ]
	ror $02.b,X		; 76 02 ; Rotate right $02.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C03F00.l,X		; FF 00 3F C0 ; Subtract with carry (long,X) $C03F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $0CF3C0.l,X		; BF C0 F3 0C ; Load long $0CF3C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $807F.w		; 0C 7F 80 ; Test and set bits $807F.w [Reads: Accumulator] [Flags: Z]
	ora $0DE6.w,Y		; 19 E6 0D ; OR accumulator with memory $0DE6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $27.b,X		; F6 27 ; Increment memory $27.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pea $F62A.w		; F4 2A F6 ; Push absolute address $F62A.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	adc $6EF3.w		; 6D F3 6E ; Add $6EF3.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc ($2F.b),Y		; F1 2F ; Subtract with carry ($2F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	jsr ($BE4D.w,X)		; FC 4D BE ; Jump to subroutine indirect indexed ($BE4D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp ($33.b)		; D2 33 ; Compare accumulator (indirect) ($33.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	lda ($CF.b,S),Y		; B3 CF ; Load accumulator (stack relative indirect indexed) ($CF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($DF.b,X)		; A1 DF ; Load accumulator ($DF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $BB5B9F.l		; 6F 9F 5B BB ; Add with carry (long) $BB5B9F.l [Writes: Accumulator] [Flags: NCVZ]
	cmp $35.b,X		; D5 35 ; Compare accumulator $35.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $CC7F.w,X		; 9E 7F CC ; Store zero to $CC7F.w,X [Reads: X Index]
	and $020022.l,X		; 3F 22 00 02 ; AND accumulator with memory (long,X) $020022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0030.w		; C0 30 00 ; Compare #$0030.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpx #$0480.w		; E0 80 04 ; Compare #$0480.w with X register [Reads: X Index] [Flags: NCZ]
	cpy #$840A.w		; C0 0A 84 ; Compare #$840A.w with Y register [Reads: Y Index] [Flags: NCZ]
	asl $8C.b,X		; 16 8C ; Arithmetic shift left $8C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	and ($90.b,X)		; 21 90 ; Logical AND ($90.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$BF.b]		; 07 BF ; OR accumulator with memory (long) [$BF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr ($F100.w,X)		; FC 00 F1 ; Jump to subroutine indirect indexed ($F100.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0400.l,X		; FF 00 04 FE ; Subtract with carry (long,X) $FE0400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FD0316.l,X		; FF 16 03 FD ; Subtract with carry (long,X) $FD0316.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$FB.b],Y		; 57 FB ; Exclusive OR accumulator with memory (long indexed) [$FB.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $7FEE47.l,X		; 5F 47 EE 7F ; Exclusive OR accumulator with memory (long,X) $7FEE47.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $16.b,S		; 03 16 ; OR accumulator with stack relative $16.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $55.b,X		; 16 55 ; Arithmetic shift left $55.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $6823.w,Y		; 59 23 68 ; Exclusive OR accumulator with memory $6823.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $3D01.w		; CE 01 3D ; Decrement $3D01.w [Flags: NZ]
	inc $ED45.w,X		; FE 45 ED ; Increment memory $ED45.w,X [Reads: X Index] [Flags: NZ]
	sbc $7F6D06.l,X		; FF 06 6D 7F ; Subtract with carry (long,X) $7F6D06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $33.b,S		; 23 33 ; AND accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $30CE.w		; CE CE 30 ; Decrement $30CE.w [Flags: NZ]
	jsl $811701.l		; 22 01 17 81 ; Jump to subroutine long $811701.l [Writes: Stack Pointer] [Flow: call]
	cmp $259D.w		; CD 9D 25 ; Compare $259D.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	and [$AC.b],Y		; 37 AC ; AND accumulator with memory (long indexed) [$AC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda [$3D.b],Y		; B7 3D ; Load accumulator (long indexed) [$3D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($1E.b,S),Y		; 93 1E ; Store accumulator (stack relative indirect indexed) ($1E.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp #$F749.w		; C9 49 F7 ; Compare #$F749.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc $4200FF.l,X		; 7F FF 00 42 ; Add long $4200FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $48		; 50 48 ; Branch if overflow clear to $50, $48 [Flow: branch]
	eor $62.b		; 45 62 ; Exclusive OR $62.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $83.b,X		; 36 83 ; Rotate left $83.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lsr $02.b,X		; 56 02 ; Logical shift right $02.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $6F.b,X		; 15 6F ; OR accumulator with memory $6F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	jmp.w [$8FEC]		; DC EC 8F ; Jump long indirect [$8FEC] [Flow: jump]
	sbc [$17.b],Y		; F7 17 ; Subtract with carry (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $F88E.w,X		; 7E 8E F8 ; Rotate right $F88E.w,X [Reads: X Index] [Flags: NCZ]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy #$1890.w		; C0 90 18 ; Compare #$1890.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $0080.w		; 0D 80 00 ; Logical OR $0080.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $27202F.l		; 4F 2F 20 27 ; Exclusive OR accumulator with memory (long) $27202F.l [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4F		; D0 4F ; Branch if not equal to $D0, $4F [Flow: branch]
	sbc $FF2800.l,X		; FF 00 28 FF ; Subtract with carry (long,X) $FF2800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $443FC0.l,X		; FF C0 3F 44 ; Subtract with carry (long,X) $443FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $705FF0.l,X		; FF F0 5F 70 ; Subtract with carry (long,X) $705FF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $C0C030.l,X		; 1F 30 C0 C0 ; Logical OR long $C0C030.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	jsr $8001.w		; 20 01 80 ; Jump to subroutine at $8001.w [Writes: Stack Pointer] [Flow: call]
	cpy #$3C49.w		; C0 49 3C ; Compare #$3C49.w with Y register [Reads: Y Index] [Flags: NCZ]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	stz $22.b		; 64 22 ; Store zero to $22.b
	jsr ($0001.w,X)		; FC 01 00 ; Jump to subroutine indirect indexed ($0001.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $14.b,S		; C3 14 ; Compare accumulator (stack relative) $14.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	adc $03.b,S		; 63 03 ; Add with carry (stack relative) $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $97DC5B.l,X		; FF 5B DC 97 ; Subtract with carry (long,X) $97DC5B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp $00FF30.l		; CF 30 FF 00 ; Compare accumulator (long) $00FF30.l [Reads: Accumulator] [Flags: NCZ]
	adc $C0BF80.l,X		; 7F 80 BF C0 ; Add long $C0BF80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $5B63.w,X		; 5D 63 5B ; Exclusive OR accumulator with memory $5B63.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc [$20.b]		; 67 20 ; Add with carry (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsr $0023.w		; 20 23 00 ; Jump to subroutine at $0023.w [Writes: Stack Pointer] [Flow: call]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $80, $43		; 80 43 ; Branch always to $80, $43 [Flow: branch]
	sbc $DF0B00.l,X		; FF 00 0B DF ; Subtract with carry (long,X) $DF0B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $62DDF0.l		; 8F F0 DD 62 ; Store accumulator (long) $62DDF0.l [Reads: Accumulator]
	jsr ($7D07.w,X)		; FC 07 7D ; Jump to subroutine indirect indexed ($7D07.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $82, $3F, $C0		; 82 3F C0 ; Branch always long to $82, $3F, $C0 [Flow: branch]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $74.b,S		; 83 74 ; Store accumulator (stack relative) $74.b,S [Reads: Stack Pointer, Accumulator]
	tsb $0A.b		; 04 0A ; Test and set bits $0A.b [Reads: Accumulator] [Flags: Z]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $00.b,S		; C3 00 ; Compare accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp [$00.b]		; C7 00 ; Compare accumulator (long) [$00.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Direct Page, Accumulator]
	sta $040028.l		; 8F 28 00 04 ; Store accumulator (long) $040028.l [Reads: Accumulator]
	and $2822.w		; 2D 22 28 ; Logical AND $2822.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and [$2A.b]		; 27 2A ; AND accumulator with memory (long) [$2A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	mvp $2F,$27		; 44 27 2F ; Move block positive $2F,$27 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $2C.b		; 05 2C ; Logical OR $2C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $28.b		; 24 28 ; Test bits $28.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $2C.b		; 24 2C ; Test bits $2C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	cmp ($04.b,S),Y		; D3 04 ; Compare accumulator (stack relative indirect indexed) ($04.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	eor $AA.b,X		; 55 AA ; Exclusive OR accumulator with memory $AA.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsl $5505FF.l		; 22 FF 05 55 ; Jump to subroutine long $5505FF.l [Writes: Stack Pointer] [Flow: call]
	eor $00.b,X		; 55 00 ; Exclusive OR accumulator with memory $00.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($AA.b)		; 12 AA ; OR accumulator with memory (indirect) ($AA.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $07FFBF.l,X		; FF BF FF 07 ; Subtract with carry (long,X) $07FFBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7F0000.l,X		; FF 00 00 7F ; Subtract with carry (long,X) $7F0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $3F,$00		; 44 00 3F ; Move block positive $3F,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cop $1F.b		; 02 1F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $04.b,X		; 56 04 ; Logical shift right $04.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $E7.b		; 06 E7 ; Arithmetic shift left $E7.b [Reads: Direct Page] [Flags: NCZ]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CF.b		; 00 CF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $FF0028.l,X		; 9F 28 00 FF ; Store accumulator (long,X) $FF0028.l,X [Reads: Accumulator, X Index]
	eor $97.b,S		; 43 97 ; Exclusive OR accumulator with stack relative $97.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc [$43.b],Y		; 77 43 ; Add with carry (long indexed) [$43.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($77.b),Y		; 91 77 ; Store accumulator ($77.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora [$97.b]		; 07 97 ; OR accumulator with memory (long) [$97.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc [$CF.b],Y		; 77 CF ; Add with carry (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF1FE0.l,X		; 3F E0 1F FF ; AND accumulator with memory (long,X) $FF1FE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $06FF26.l,X		; DF 26 FF 06 ; Compare accumulator (long,X) $06FF26.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc ($FF.b,S),Y		; F3 FF ; Subtract with carry (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($FF.b,X)		; E1 FF ; Subtract with carry ($FF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0A0026.l,X		; FF 26 00 0A ; Subtract with carry (long,X) $0A0026.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $FF00.w,X		; 1E 00 FF ; Arithmetic shift left $FF00.w,X [Reads: X Index] [Flags: NCZ]
	sbc $98FF9C.l,X		; FF 9C FF 98 ; Subtract with carry (long,X) $98FF9C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FCFFF8.l,X		; FF F8 FF FC ; Subtract with carry (long,X) $FCFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $0002FF.l		; 22 FF 02 00 ; Jump to subroutine long $0002FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $0028FF.l,X		; FF FF 28 00 ; Subtract with carry (long,X) $0028FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $F9.b,S		; 43 F9 ; Exclusive OR accumulator with stack relative $F9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $7943.w,X		; FE 43 79 ; Increment memory $7943.w,X [Reads: X Index] [Flags: NZ]
	inc $F107.w,X		; FE 07 F1 ; Increment memory $F107.w,X [Reads: X Index] [Flags: NZ]
	inc $FCC3.w,X		; FE C3 FC ; Increment memory $FCC3.w,X [Reads: X Index] [Flags: NZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $022400.l,X		; FF 00 24 02 ; Subtract with carry (long,X) $022400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $B804.w,X		; 1E 04 B8 ; Arithmetic shift left $B804.w,X [Reads: X Index] [Flags: NCZ]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $7D85.w,X		; 7E 85 7D ; Rotate right $7D85.w,X [Reads: X Index] [Flags: NCZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$77.b],Y		; 97 77 ; Store accumulator (long indexed) [$77.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $5FD06F.l		; AF 6F D0 5F ; Load long $5FD06F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	sbc $727900.l,X		; FF 00 79 72 ; Subtract with carry (long,X) $727900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $68.b		; 64 68 ; Store zero to $68.b
	.db $50, $20		; 50 20 ; Branch if overflow clear to $50, $20 [Flow: branch]
	eor $20DF00.l,X		; 5F 00 DF 20 ; Exclusive OR accumulator with memory (long,X) $20DF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$433F.w		; C0 3F 43 ; Compare #$433F.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $7F.b		; 46 7F ; Logical shift right $7F.b [Reads: Direct Page] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	jsr $4F1F.w		; 20 1F 4F ; Jump to subroutine at $4F1F.w [Writes: Stack Pointer] [Flow: call]
	jsl $4F0340.l		; 22 40 03 4F ; Jump to subroutine long $4F0340.l [Writes: Stack Pointer] [Flow: call]
	eor $4400FF.l		; 4F FF 00 44 ; Exclusive OR accumulator with memory (long) $4400FF.l [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $0047FF.l		; 22 FF 47 00 ; Jump to subroutine long $0047FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $22FF00.l,X		; FF 00 FF 22 ; Subtract with carry (long,X) $22FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $600005.l,X		; FF 05 00 60 ; Subtract with carry (long,X) $600005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00FF00.l,X		; 9F 00 FF 00 ; Store accumulator (long,X) $00FF00.l,X [Reads: Accumulator, X Index]
	jsl $0046FF.l		; 22 FF 46 00 ; Jump to subroutine long $0046FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FF9F01.l,X		; FF 01 9F FF ; Subtract with carry (long,X) $FF9F01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FE0300.l		; 22 00 03 FE ; Jump to subroutine long $FE0300.l [Writes: Stack Pointer] [Flow: call]
	sbc $4504FB.l,X		; FF FB 04 45 ; Subtract with carry (long,X) $4504FB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FE.b		; 46 FE ; Logical shift right $FE.b [Reads: Direct Page] [Flags: NCZ]
	ora #$0402.w		; 09 02 04 ; Logical OR #$0402.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc ($22.b)		; F2 22 ; Subtract with carry (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl $E0.b		; 06 E0 ; Arithmetic shift left $E0.b [Reads: Direct Page] [Flags: NCZ]
	and $76.b		; 25 76 ; Logical AND $76.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $FDFF.w,X		; FE FF FD ; Increment memory $FDFF.w,X [Reads: X Index] [Flags: NZ]
	sbc $E4FFFA.l,X		; FF FA FF E4 ; Subtract with carry (long,X) $E4FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $60FF98.l,X		; FF 98 FF 60 ; Subtract with carry (long,X) $60FF98.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FF80.l,X		; FF 80 FF 00 ; Subtract with carry (long,X) $00FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$9F.b]		; E7 9F ; Subtract with carry (long) [$9F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $7FFFFF.l,X		; 7F FF FF 7F ; Add long $7FFFFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cpy #$6080.w		; C0 80 60 ; Compare #$6080.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$FF3F.w		; C0 3F FF ; Compare #$FF3F.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $80.b,S		; 43 80 ; Exclusive OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $3F7F07.l,X		; 7F 07 7F 3F ; Add long $3F7F07.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $400000.l,X		; 1F 00 00 40 ; Logical OR long $400000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $002440.l,X		; 7F 40 24 00 ; Add long $002440.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $220000.l,X		; FF 00 00 22 ; Subtract with carry (long,X) $220000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0001.l,X		; FF 01 00 FF ; Subtract with carry (long,X) $FF0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $2700FF.l		; 4F FF 00 27 ; Exclusive OR accumulator with memory (long) $2700FF.l [Writes: Accumulator] [Flags: NZ]
	sbc $FF004E.l,X		; FF 4E 00 FF ; Subtract with carry (long,X) $FF004E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $80BF0F.l,X		; FF 0F BF 80 ; Subtract with carry (long,X) $80BF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $80, $A3		; 80 A3 ; Branch always to $80, $A3 [Flow: branch]
	.db $80, $A1		; 80 A1 ; Branch always to $80, $A1 [Flow: branch]
	.db $80, $B4		; 80 B4 ; Branch always to $80, $B4 [Flow: branch]
	.db $80, $B8		; 80 B8 ; Branch always to $80, $B8 [Flow: branch]
	.db $80, $AB		; 80 AB ; Branch always to $80, $AB [Flow: branch]
	.db $80, $A1		; 80 A1 ; Branch always to $80, $A1 [Flow: branch]
	.db $80, $27		; 80 27 ; Branch always to $80, $27 [Flow: branch]
	adc $00660F.l,X		; 7F 0F 66 00 ; Add long $00660F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $31.b		; 00 31 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7F8049.l,X		; FF 49 80 7F ; Subtract with carry (long,X) $7F8049.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $C0.b		; 05 C0 ; Logical OR $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F81FE0.l,X		; 3F E0 1F F8 ; AND accumulator with memory (long,X) $F81FE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$24.b]		; 07 24 ; OR accumulator with memory (long) [$24.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $183C02.l		; 6F 02 3C 18 ; Add with carry (long) $183C02.l [Writes: Accumulator] [Flags: NCVZ]
	ora [$4D.b]		; 07 4D ; OR accumulator with memory (long) [$4D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$807F.w		; 09 7F 80 ; Logical OR #$807F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $FCFE9F.l,X		; 9F 9F FE FC ; Store accumulator (long,X) $FCFE9F.l,X [Reads: Accumulator, X Index]
	jsr ($7FFE.w,X)		; FC FE 7F ; Jump to subroutine indirect indexed ($7FFE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $80, $4D		; 80 4D ; Branch always to $80, $4D [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00FF.w		; 09 FF 00 ; Logical OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $3F7FFD.l,X		; FF FD 7F 3F ; Subtract with carry (long,X) $3F7FFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $00FF7F.l,X		; 3F 7F FF 00 ; AND accumulator with memory (long,X) $00FF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FE01.w		; 49 01 FE ; Exclusive OR #$FE01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $53.b		; 84 53 ; Store Y register to $53.b [Reads: Y Index]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $03.b,X		; F6 03 ; Increment memory $03.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	pea $00F8.w		; F4 F8 00 ; Push absolute address $00F8.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc $C30044.l,X		; FF 44 00 C3 ; Subtract with carry (long,X) $C30044.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($7E.b,X)		; 81 7E ; Store accumulator ($7E.b,X) [Reads: Direct Page, Accumulator, X Index]
	eor $BD.b,S		; 43 BD ; Exclusive OR accumulator with stack relative $BD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $4202.w,X		; 7E 02 42 ; Rotate right $4202.w,X [Reads: X Index] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $B5.b		; 45 B5 ; Exclusive OR $B5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $09.b		; 66 09 ; Rotate right $09.b [Reads: Direct Page] [Flags: NCZ]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Stack Pointer, Accumulator]
	lda $A542.w,Y		; B9 42 A5 ; Load $A542.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $B9.b		; 66 B9 ; Rotate right $B9.b [Reads: Direct Page] [Flags: NCZ]
	ror $007E.w,X		; 7E 7E 00 ; Rotate right $007E.w,X [Reads: X Index] [Flags: NCZ]
	jsl $600E1A.l		; 22 1A 0E 60 ; Jump to subroutine long $600E1A.l [Writes: Stack Pointer] [Flow: call]
	rol $021A.w,X		; 3E 1A 02 ; Rotate left $021A.w,X [Reads: X Index] [Flags: NCZ]
	sta ($FF.b,X)		; 81 FF ; Store accumulator ($FF.b,X) [Reads: Direct Page, Accumulator, X Index]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$9F.b]		; 47 9F ; Exclusive OR accumulator with memory (long) [$9F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($6C.b,S),Y		; 93 6C ; Store accumulator (stack relative indirect indexed) ($6C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta $934560.l,X		; 9F 60 45 93 ; Store accumulator (long,X) $934560.l,X [Reads: Accumulator, X Index]
	jmp ($29E0.w)		; 6C E0 29 ; Jump indirect to ($29E0.w) [Flow: jump]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor #$4941.w		; 49 41 49 ; Exclusive OR #$4941.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$F709.w		; 49 09 F7 ; Exclusive OR #$F709.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sty $69.b,X		; 94 69 ; Store Y register $69.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	.db $90, $6B		; 90 6B ; Branch if carry clear to $90, $6B [Flow: branch]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	adc $BF.b		; 65 BF ; Add $BF.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cmp ($1E.b,X)		; C1 1E ; Compare accumulator ($1E.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sta ($3E.b,X)		; 81 3E ; Store accumulator ($3E.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $4E0C00.l,X		; FF 00 0C 4E ; Subtract with carry (long,X) $4E0C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$49.b]		; 47 49 ; Exclusive OR accumulator with memory (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $93.b		; 00 93 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $02FF.w		; EC FF 02 ; Compare $02FF.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $016F02.l		; EF 02 6F 01 ; Subtract with carry (long) $016F02.l [Writes: Accumulator] [Flags: NCVZ]
	eor $0D.b,S		; 43 0D ; Exclusive OR accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $002202.l		; EF 02 22 00 ; Subtract with carry (long) $002202.l [Writes: Accumulator] [Flags: NCVZ]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $F822.w,Y		; F9 22 F8 ; Subtract with carry $F822.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $FFEA06.l,X		; FF 06 EA FF ; Subtract with carry (long,X) $FFEA06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $FF.b,X		; 95 FF ; Store accumulator to $FF.b,X [Reads: Accumulator, X Index]
	cpx #$00FF.w		; E0 FF 00 ; Compare #$00FF.w with X register [Reads: X Index] [Flags: NCZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($EA.b,X)		; 01 EA ; Logical OR ($EA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $25FF22.l,X		; 9F 22 FF 25 ; Store accumulator (long,X) $25FF22.l,X [Reads: Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF43.l,X		; FF 43 FF 00 ; Subtract with carry (long,X) $00FF43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2300.l,X		; FF 00 23 FF ; Subtract with carry (long,X) $FF2300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FF0100.l		; 22 00 01 FF ; Jump to subroutine long $FF0100.l [Writes: Stack Pointer] [Flow: call]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy #$0003.w		; C0 03 00 ; Compare #$0003.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $433FC0.l,X		; FF C0 3F 43 ; Subtract with carry (long,X) $433FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy #$8C83.w		; C0 83 8C ; Compare #$8C83.w with Y register [Reads: Y Index] [Flags: NCZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $9683BF.l,X		; BF BF 83 96 ; Load long $9683BF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $00.b,X		; F6 00 ; Increment memory $00.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora $0C00CE.l,X		; 1F CE 00 0C ; Logical OR long $0C00CE.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	lsr $20.b		; 46 20 ; Logical shift right $20.b [Reads: Direct Page] [Flags: NCZ]
	brk $31.b		; 00 31 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $916EBD.l,X		; FF BD 6E 91 ; Subtract with carry (long,X) $916EBD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $3C81.w		; 6E 81 3C ; Rotate right $3C81.w [Flags: NCZ]
	cmp $00.b,S		; C3 00 ; Compare accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	lda $4300.w,X		; BD 00 43 ; Load $4300.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($3C.b,X)		; 81 3C ; Store accumulator ($3C.b,X) [Reads: Direct Page, Accumulator, X Index]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($12.b,X)		; 81 12 ; Store accumulator ($12.b,X) [Reads: Direct Page, Accumulator, X Index]
	eor ($22.b)		; 52 22 ; Exclusive OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $420B.w,X		; 7E 0B 42 ; Rotate right $420B.w,X [Reads: X Index] [Flags: NCZ]
	.db $42, $00		; 42 00 ; Reserved instruction
	.db $B0, $80		; B0 80 ; Branch if carry set to $B0, $80 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $80, $B3		; 80 B3 ; Branch always to $80, $B3 [Flow: branch]
	.db $80, $B7		; 80 B7 ; Branch always to $80, $B7 [Flow: branch]
	.db $80, $BF		; 80 BF ; Branch always to $80, $BF [Flow: branch]
	jsl $400380.l		; 22 80 03 40 ; Jump to subroutine long $400380.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	sbc $097F26.l,X		; FF 26 7F 09 ; Subtract with carry (long,X) $097F26.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $10.b		; 45 10 ; Exclusive OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00FF18.l		; EF 18 FF 00 ; Subtract with carry (long) $00FF18.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $30F3.w		; 0C F3 30 ; Test and set bits $30F3.w [Reads: Accumulator] [Flags: Z]
	cmp $083FC0.l		; CF C0 3F 08 ; Compare accumulator (long) $083FC0.l [Reads: Accumulator] [Flags: NCZ]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4C0300.l		; EF 00 03 4C ; Subtract with carry (long) $4C0300.l [Writes: Accumulator] [Flags: NCVZ]
	and ($FF.b,S),Y		; 33 FF ; AND accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$CE31.w		; E0 31 CE ; Compare #$CE31.w with X register [Reads: X Index] [Flags: NCZ]
	cmp #$193E.w		; C9 3E 19 ; Compare #$193E.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	lsr $FE.b		; 46 FE ; Logical shift right $FE.b [Reads: Direct Page] [Flags: NCZ]
	ora #$0007.w		; 09 07 00 ; Logical OR #$0007.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($C2.b)		; 32 C2 ; AND accumulator with memory (indirect) ($C2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $27E2E2.l		; 22 E2 E2 27 ; Jump to subroutine long $27E2E2.l [Writes: Stack Pointer] [Flow: call]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $3003.w		; 0C 03 30 ; Test and set bits $3003.w [Reads: Accumulator] [Flags: Z]
	ora $243FC0.l		; 0F C0 3F 24 ; OR accumulator with memory (long) $243FC0.l [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($23.b,S),Y		; 33 23 ; AND accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3EC100.l,X		; 3F 00 C1 3E ; AND accumulator with memory (long,X) $3EC100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FE46.w,Y		; 19 46 FE ; OR accumulator with memory $FE46.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$0022.w		; 09 22 00 ; Logical OR #$0022.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $3E		; 10 3E ; Branch if plus to $10, $3E [Flow: branch]
.ACCU 16
	rep #$22		; C2 22
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $05.b		; C5 05 ; Compare $05.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $00DF00.l		; CF 00 DF 00 ; Compare accumulator (long) $00DF00.l [Reads: Accumulator] [Flags: NCZ]
	cmp [$0F.b],Y		; D7 0F ; Compare accumulator (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $6C8360.l,X		; 9F 60 83 6C ; Store accumulator (long,X) $6C8360.l,X [Reads: Accumulator, X Index]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	adc $676060.l,X		; 7F 60 60 67 ; Add long $676060.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $010000.l,X		; 1F 00 00 01 ; Logical OR long $010000.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	mvp $E1,$05		; 44 05 E1 ; Move block positive $E1,$05 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $8A847E.l		; 0F 7E 84 8A ; OR accumulator with memory (long) $8A847E.l [Writes: Accumulator] [Flags: NZ]
	cmp $031F44.l,X		; DF 44 1F 03 ; Compare accumulator (long,X) $031F44.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $FA00FF.l,X		; FF FF 00 FA ; Subtract with carry (long,X) $FA00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $83E0.w		; 20 E0 83 ; Jump to subroutine at $83E0.w [Writes: Stack Pointer] [Flow: call]
	sta ($00.b),Y		; 91 00 ; Store accumulator ($00.b),Y [Reads: Direct Page, Y Index, Accumulator]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sta $46AA40.l,X		; 9F 40 AA 46 ; Store accumulator (long,X) $46AA40.l,X [Reads: Accumulator, X Index]
	lda $4C.b,X		; B5 4C ; Load $4C.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $4C.b,X		; B4 4C ; Load Y register $4C.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldx $4E.b,Y		; B6 4E ; Load X register $4E.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sta ($6F.b,S),Y		; 93 6F ; Store accumulator (stack relative indirect indexed) ($6F.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	.db $D0, $2F		; D0 2F ; Branch if not equal to $D0, $2F [Flow: branch]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($23.b),Y		; 31 23 ; AND accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $21.b,S		; 23 21 ; AND accumulator with stack relative $21.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tsb $00FF.w		; 0C FF 00 ; Test and set bits $00FF.w [Reads: Accumulator] [Flags: Z]
	sbc $D502.w,Y		; F9 02 D5 ; Subtract with carry $D502.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sep #$43		; E2 43 ; Set processor status bits #$43 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	adc $1F72.w		; 6D 72 1F ; Add $1F72.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $C9F2.w		; ED F2 C9 ; Subtract $C9F2.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inc $0B.b,X		; F6 0B ; Increment memory $0B.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	pea $1C00.w		; F4 00 1C ; Push absolute address $1C00.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	tsb $8484.w		; 0C 84 84 ; Test and set bits $8484.w [Reads: Accumulator] [Flags: Z]
	tsb $12.b		; 04 12 ; Test and set bits $12.b [Reads: Accumulator] [Flags: Z]
	.db $30, $8D		; 30 8D ; Branch if minus to $30, $8D [Flow: branch]
	sbc $FBFB.w,X		; FD FB FB ; Subtract with carry $FBFB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFAAFF.l,X		; FF FF AA FF ; Subtract with carry (long,X) $FFAAFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FF.b,X		; 55 FF ; Exclusive OR accumulator with memory $FF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $5DFF.w		; AE FF 5D ; Load $5DFF.w into X register [Writes: X Index] [Flags: NZ]
	sbc $02FF3C.l,X		; FF 3C FF 02 ; Subtract with carry (long,X) $02FF3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $27.b		; 04 27 ; Test and set bits $27.b [Reads: Accumulator] [Flags: Z]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $50, $50		; 50 50 ; Branch if overflow clear to $50, $50 [Flow: branch]
	ldy $57FC.w,X		; BC FC 57 ; Load Y register $57FC.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $55FFAB.l,X		; FF AB FF 55 ; Subtract with carry (long,X) $55FFAB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $23.b,S		; 83 23 ; Store accumulator (stack relative) $23.b,S [Reads: Stack Pointer, Accumulator]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $2303AF.l,X		; 7F AF 03 23 ; Add long $2303AF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $61.b		; 06 61 ; Arithmetic shift left $61.b [Reads: Direct Page] [Flags: NCZ]
	tsb $0033.w		; 0C 33 00 ; Test and set bits $0033.w [Reads: Accumulator] [Flags: Z]
	and $A13FC0.l,X		; 3F C0 3F A1 ; AND accumulator with memory (long,X) $A13FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $C43B.w,X		; 5E 3B C4 ; Logical shift right $C43B.w,X [Reads: X Index] [Flags: NCZ]
	eor $3F.b,S		; 43 3F ; Exclusive OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$FF17.w		; C0 17 FF ; Compare #$FF17.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $D2F1FD.l,X		; FF FD F1 D2 ; Subtract with carry (long,X) $D2F1FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$0080.w		; C0 80 00 ; Compare #$0080.w with Y register [Reads: Y Index] [Flags: NCZ]
	ror $00.b,X		; 76 00 ; Rotate right $00.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($00.b),Y		; 11 00 ; OR accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $3300.w,X		; DD 00 33 ; Compare accumulator $3300.w,X [Reads: X Index] [Flags: NCZ]
	cpy $FE01.w		; CC 01 FE ; Compare $FE01.w with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda $CEB34C.l,X		; BF 4C B3 CE ; Load long $CEB34C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($23.b),Y		; 31 23 ; AND accumulator with memory ($23.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $0C7D01.l,X		; FF 01 7D 0C ; Subtract with carry (long,X) $0C7D01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($80.b)		; 12 80 ; OR accumulator with memory (indirect) ($80.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $A1		; 80 A1 ; Branch always to $80, $A1 [Flow: branch]
	lda ($1F.b,X)		; A1 1F ; Load accumulator ($1F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $CA3F35.l,X		; 1F 35 3F CA ; Logical OR long $CA3F35.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $1CFFF5.l,X		; FF F5 FF 1C ; Subtract with carry (long,X) $1CFFF5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $5E7FFF.l,X		; FF FF 7F 5E ; Subtract with carry (long,X) $5E7FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$22C0.w		; E0 C0 22 ; Compare #$22C0.w with X register [Reads: X Index] [Flags: NCZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($72.b)		; 72 72 ; Add with carry (indirect) ($72.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $9739.w,Y		; 39 39 97 ; AND accumulator with memory $9739.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta [$C3.b],Y		; 97 C3 ; Store accumulator (long indexed) [$C3.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp $77.b,S		; C3 77 ; Compare accumulator (stack relative) $77.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sbc [$83.b],Y		; F7 83 ; Subtract with carry (long indexed) [$83.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $03.b		; C6 03 ; Decrement $03.b [Reads: Direct Page] [Flags: NZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	sbc $68C68D.l,X		; FF 8D C6 68 ; Subtract with carry (long,X) $68C68D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $2208.w,X		; 3C 08 22 ; Test bits $2208.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $FF004E.l,X		; BF 4E 00 FF ; Load long $FF004E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $2FDF3F.l,X		; DF 3F DF 2F ; Compare accumulator (long,X) $2FDF3F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $0BF717.l		; EF 17 F7 0B ; Subtract with carry (long) $0BF717.l [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $FD.b		; 05 FD ; Logical OR $FD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $43.b		; 02 43 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DF0500.l,X		; FF 00 05 DF ; Subtract with carry (long,X) $DF0500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $F9F3E7.l		; CF E7 F3 F9 ; Compare accumulator (long) $F9F3E7.l [Reads: Accumulator] [Flags: NCZ]
	jsr ($FF22.w,X)		; FC 22 FF ; Jump to subroutine indirect indexed ($FF22.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $9F00.w		; 0E 00 9F ; Arithmetic shift left $9F00.w [Flags: NCZ]
	sbc $FC00FF.l		; EF FF 00 FC ; Subtract with carry (long) $FC00FF.l [Writes: Accumulator] [Flags: NCVZ]
	ora [$1F.b]		; 07 1F ; OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $133C.w		; 0C 3C 13 ; Test and set bits $133C.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cpy #$223F.w		; C0 3F 22 ; Compare #$223F.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $E3		; F0 E3 ; Branch if equal to $F0, $E3 [Flow: branch]
	cpy $FF33.w		; CC 33 FF ; Compare $FF33.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0EF1.w		; E0 F1 0E ; Compare #$0EF1.w with X register [Reads: X Index] [Flags: NCZ]
	cmp #$473E.w		; C9 3E 47 ; Compare #$473E.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora #$02FE.w		; 09 FE 02 ; Logical OR #$02FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $2B84.w		; 0E 84 2B ; Arithmetic shift left $2B84.w [Flags: NCZ]
	ora $4E.b,S		; 03 4E ; OR accumulator with stack relative $4E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $EF101F.l,X		; FF 1F 10 EF ; Subtract with carry (long,X) $EF101F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$0F.b]		; E7 0F ; Subtract with carry (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	sbc [$10.b],Y		; F7 10 ; Subtract with carry (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $40DF20.l		; EF 20 DF 40 ; Subtract with carry (long) $40DF20.l [Writes: Accumulator] [Flags: NCVZ]
	lda $E700FF.l,X		; BF FF 00 E7 ; Load long $E700FF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$F0.b]		; E7 F0 ; Subtract with carry (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $E7		; F0 E7 ; Branch if equal to $F0, $E7 [Flow: branch]
	cmp $30009F.l		; CF 9F 00 30 ; Compare accumulator (long) $30009F.l [Reads: Accumulator] [Flags: NCZ]
	cmp $C09F60.l		; CF 60 9F C0 ; Compare accumulator (long) $C09F60.l [Reads: Accumulator] [Flags: NCZ]
	and $43BF40.l,X		; 3F 40 BF 43 ; AND accumulator with memory (long,X) $43BF40.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $83DF.w		; 20 DF 83 ; Jump to subroutine at $83DF.w [Writes: Stack Pointer] [Flow: call]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: NCZ]
	cpx #$C329.w		; E0 29 C3 ; Compare #$C329.w with X register [Reads: X Index] [Flags: NCZ]
	sta $8F1F1F.l		; 8F 1F 1F 8F ; Store accumulator (long) $8F1F1F.l [Reads: Accumulator]
	sta $8D00C7.l		; 8F C7 00 8D ; Store accumulator (long) $8D00C7.l [Reads: Accumulator]
	cop $3E.b		; 02 3E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($7B.b,X)		; 01 7B ; Logical OR ($7B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	.db $30, $84		; 30 84 ; Branch if minus to $30, $84 [Flow: branch]
	and ($CC.b)		; 32 CC ; AND accumulator with memory (indirect) ($CC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $B7.b,X		; B4 B7 ; Load Y register $B7.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $B0, $4B		; B0 4B ; Branch if carry set to $B0, $4B [Flow: branch]
	eor #$0331.w		; 49 31 03 ; Exclusive OR #$0331.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta [$A8.b]		; 87 A8 ; Store accumulator (long) [$A8.b] [Reads: Direct Page, Accumulator]
	eor [$A4.b],Y		; 57 A4 ; Exclusive OR accumulator with memory (long indexed) [$A4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda $4C.b,S		; A3 4C ; Load accumulator (stack relative) $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($46.b,X)		; A1 46 ; Load accumulator ($46.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $814340.l,X		; 9F 40 43 81 ; Store accumulator (long,X) $814340.l,X [Reads: Accumulator, X Index]
	ror $FF13.w,X		; 7E 13 FF ; Rotate right $FF13.w,X [Reads: X Index] [Flags: NCZ]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	bit $38.b,X		; 34 38 ; Test bits $38.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ror $5E5E.w,X		; 7E 5E 5E ; Rotate right $5E5E.w,X [Reads: X Index] [Flags: NCZ]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	nop		; EA ; No operation
	and $DA.b		; 25 DA ; Logical AND $DA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $32.b		; C5 32 ; Compare $32.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $E2.b		; 05 E2 ; Logical OR $E2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $4302.w,Y		; 39 02 43 ; AND accumulator with memory $4302.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($7E.b,X)		; 01 7E ; Logical OR ($7E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($FF.b),Y		; 11 FF ; OR accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pei ($2C.b)		; D4 2C ; Push effective indirect address ($2C.b) [Reads: Direct Page] [Writes: Stack Pointer]
	stz $FAFE.w		; 9C FE FA ; Store zero to $FAFE.w
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $EF2E.w,X		; DE 2E EF ; Decrement memory $EF2E.w,X [Reads: X Index] [Flags: NZ]
	sty $F37F.w		; 8C 7F F3 ; Store Y register to $F37F.w [Reads: Y Index]
	tsb $FF43.w		; 0C 43 FF ; Test and set bits $FF43.w [Reads: Accumulator] [Flags: Z]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E106.w,Y		; F9 06 E1 ; Subtract with carry $E106.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $1020.w,X		; 1E 20 10 ; Arithmetic shift left $1020.w,X [Reads: X Index] [Flags: NCZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $F11FE0.l		; 0F E0 1F F1 ; OR accumulator with memory (long) $F11FE0.l [Writes: Accumulator] [Flags: NZ]
	asl $D827.w		; 0E 27 D8 ; Arithmetic shift left $D827.w [Flags: NCZ]
	sbc $30CF00.l,X		; FF 00 CF 30 ; Subtract with carry (long,X) $30CF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $FF		; 30 FF ; Branch if minus to $30, $FF [Flow: branch]
	dec $FF3F.w		; CE 3F FF ; Decrement $FF3F.w [Flags: NZ]
	ora $27.b,S		; 03 27 ; OR accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $22.b,X		; 35 22 ; Logical AND $22.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $88.b,S		; 03 88 ; OR accumulator with stack relative $88.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,S		; 03 80 ; OR accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $637E01.l,X		; 1F 01 7E 63 ; Logical OR long $637E01.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $58A7.w		; 9C A7 58 ; Store zero to $58A7.w
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Direct Page, Accumulator]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FCFE.w,X		; FD FE FC ; Subtract with carry $FCFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $90		; F0 90 ; Branch if equal to $F0, $90 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc $00FF.w,X		; FE FF 00 ; Increment memory $00FF.w,X [Reads: X Index] [Flags: NZ]
	eor [$00.b]		; 47 00 ; Exclusive OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp [$08.b]		; C7 08 ; Compare accumulator (long) [$08.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$18.b]		; C7 18 ; Compare accumulator (long) [$18.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor [$78.b]		; 47 78 ; Exclusive OR accumulator with memory (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$F8.b]		; 87 F8 ; Store accumulator (long) [$F8.b] [Reads: Direct Page, Accumulator]
	ora $609CF0.l		; 0F F0 9C 60 ; OR accumulator with memory (long) $609CF0.l [Writes: Accumulator] [Flags: NZ]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $A0		; F0 A0 ; Branch if equal to $F0, $A0 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $F0, $E3		; F0 E3 ; Branch if equal to $F0, $E3 [Flow: branch]
	ora $F1FF.w		; 0D FF F1 ; Logical OR $F1FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $00FF.w		; 0E FF 00 ; Arithmetic shift left $00FF.w [Flags: NCZ]
	sta $46.b,S		; 83 46 ; Store accumulator (stack relative) $46.b,S [Reads: Stack Pointer, Accumulator]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FF38F0.l		; 0F F0 38 FF ; OR accumulator with memory (long) $FF38F0.l [Writes: Accumulator] [Flags: NZ]
	sta $00287F.l,X		; 9F 7F 28 00 ; Store accumulator (long,X) $00287F.l,X [Reads: Accumulator, X Index]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$DB.b]		; 07 DB ; OR accumulator with memory (long) [$DB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F00F.w,X		; 3C 0F F0 ; Test bits $F00F.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($8E.b),Y		; 71 8E ; Add with carry ($8E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $27FF.w		; 8E FF 27 ; Store X register to $27FF.w [Reads: X Index]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFCA06.l,X		; FF 06 CA FF ; Subtract with carry (long,X) $FFCA06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $FF.b,X		; 75 FF ; Add $FF.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$00FF.w		; C0 FF 00 ; Compare #$00FF.w with Y register [Reads: Y Index] [Flags: NCZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($CA.b,X)		; 01 CA ; Logical OR ($CA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $06FF2A.l,X		; 7F 2A FF 06 ; Add long $06FF2A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $6AFF.w,X		; BD FF 6A ; Load $6AFF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $08FF55.l,X		; FF 55 FF 08 ; Subtract with carry (long,X) $08FF55.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $BD.b,S		; 03 BD ; OR accumulator with stack relative $BD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	nop		; EA ; No operation
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20DF09.l,X		; FF 09 DF 20 ; Subtract with carry (long,X) $20DF09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$A13F.w		; C0 3F A1 ; Compare #$A13F.w with Y register [Reads: Y Index] [Flags: NCZ]
	adc $917FBE.l,X		; 7F BE 7F 91 ; Add long $917FBE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($43.b),Y		; 71 43 ; Add with carry ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($77.b),Y		; 91 77 ; Store accumulator ($77.b),Y [Reads: Direct Page, Y Index, Accumulator]
	asl $97.b		; 06 97 ; Arithmetic shift left $97.b [Reads: Direct Page] [Flags: NCZ]
	adc [$20.b],Y		; 77 20 ; Add with carry (long indexed) [$20.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $4E4040.l,X		; 1F 40 40 4E ; Logical OR long $4E4040.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $FF4348.l		; 22 48 43 FF ; Jump to subroutine long $FF4348.l [Writes: Stack Pointer] [Flow: call]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	jsl $FF0900.l		; 22 00 09 FF ; Jump to subroutine long $FF0900.l [Writes: Stack Pointer] [Flow: call]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$20.b]		; 27 20 ; AND accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $30FF2F.l,X		; FF 2F FF 30 ; Subtract with carry (long,X) $30FF2F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $25		; 30 25 ; Branch if minus to $30, $25 [Flow: branch]
	sbc $270004.l,X		; FF 04 00 27 ; Subtract with carry (long,X) $270004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	brk $CF.b		; 00 CF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FB0900.l		; 22 00 09 FB ; Jump to subroutine long $FB0900.l [Writes: Stack Pointer] [Flow: call]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	jsr ($FE05.w,X)		; FC 05 FE ; Jump to subroutine indirect indexed ($FE05.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $09FE.w,Y		; F9 FE 09 ; Subtract with carry $09FE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F945.w		; 0E 45 F9 ; Arithmetic shift left $F945.w [Flags: NCZ]
	inc $0404.w,X		; FE 04 04 ; Increment memory $0404.w,X [Reads: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($22.b)		; F2 22 ; Subtract with carry (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cop $15.b		; 02 15 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	wai		; CB ; Wait for interrupt
	and #$29CD.w		; 29 CD 29 ; Logical AND #$29CD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $23.b,S		; C3 23 ; Compare accumulator (stack relative) $23.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	wai		; CB ; Wait for interrupt
	and $D7.b,S		; 23 D7 ; AND accumulator with stack relative $D7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$F7.b],Y		; 37 F7 ; AND accumulator with memory (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$AE.b],Y		; 17 AE ; OR accumulator with memory (long indexed) [$AE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $165EED.l,X		; 5F ED 5E 16 ; Exclusive OR accumulator with memory (long,X) $165EED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $1C.b,X		; 16 1C ; Arithmetic shift left $1C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	trb $0808.w		; 1C 08 08 ; Test and reset bits $0808.w [Reads: Accumulator] [Flags: Z]
	sta $2E.b,S		; 83 2E ; Store accumulator (stack relative) $2E.b,S [Reads: Stack Pointer, Accumulator]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF43EF.l,X		; 1F EF 43 FF ; Logical OR long $FF43EF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($FC00.w,X)		; FC 00 FC ; Jump to subroutine indirect indexed ($FC00.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $30, $87		; 30 87 ; Branch if minus to $30, $87 [Flow: branch]
	.db $30, $CF		; 30 CF ; Branch if minus to $30, $CF [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $CF0400.l		; 22 00 04 CF ; Jump to subroutine long $CF0400.l [Writes: Stack Pointer] [Flow: call]
	lda [$4B.b],Y		; B7 4B ; Load accumulator (long indexed) [$4B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and ($45.b,S),Y		; 33 45 ; AND accumulator (stack relative indirect indexed) ($45.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $66.b,X		; B5 66 ; Load $66.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp ($4299.w,X)		; 7C 99 42 ; Jump indirect indexed to ($4299.w,X) [Reads: X Index] [Flow: jump]
	eor $B5.b		; 45 B5 ; Exclusive OR $B5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $04.b		; 66 04 ; Rotate right $04.b [Reads: Direct Page] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol $1A22.w,X		; 3E 22 1A ; Rotate left $1A22.w,X [Reads: X Index] [Flags: NCZ]
	.db $10, $B4		; 10 B4 ; Branch if plus to $10, $B4 [Flow: branch]
	cpy $E7DB.w		; CC DB E7 ; Compare $E7DB.w with Y register [Reads: Y Index] [Flags: NCZ]
	dec $D7F1.w		; CE F1 D7 ; Decrement $D7F1.w [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $EC.b,S		; A3 EC ; Load accumulator (stack relative) $EC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $CD.b		; 46 CD ; Logical shift right $CD.b [Reads: Direct Page] [Flags: NCZ]
	eor ($D9.b)		; 52 D9 ; Exclusive OR accumulator with memory (indirect) ($D9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sbc $2203.w,Y		; F9 03 22 ; Subtract with carry $2203.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($10.b,X)		; 21 10 ; Logical AND ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $30, $24		; 30 24 ; Branch if minus to $30, $24 [Flow: branch]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	inc $D9FE.w,X		; FE FE D9 ; Increment memory $D9FE.w,X [Reads: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $EC.b		; E6 EC ; Increment $EC.b [Reads: Direct Page] [Flags: NZ]
	trb $98E8.w		; 1C E8 98 ; Test and reset bits $98E8.w [Reads: Accumulator] [Flags: Z]
	.db $D0, $B0		; D0 B0 ; Branch if not equal to $D0, $B0 [Flow: branch]
	ldy #$A160.w		; A0 60 A1 ; Load #$A160.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc ($03.b,X)		; E1 03 ; Subtract with carry ($03.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$8F.b]		; 87 8F ; Store accumulator (long) [$8F.b] [Reads: Direct Page, Accumulator]
	ora $7A879E.l,X		; 1F 9E 87 7A ; Logical OR long $7A879E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $87.b		; 84 87 ; Store Y register to $87.b [Reads: Y Index]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $201430.l		; 22 30 14 20 ; Jump to subroutine long $201430.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	adc $807F41.l,X		; 7F 41 7F 80 ; Add long $807F41.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $78.b		; 02 78 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $DFCF.w,X		; FE CF DF ; Increment memory $DFCF.w,X [Reads: X Index] [Flags: NZ]
	cmp $037FBE.l,X		; DF BE 7F 03 ; Compare accumulator (long,X) $037FBE.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	jsr ($7F50.w,X)		; FC 50 7F ; Jump to subroutine indirect indexed ($7F50.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $FF4380.l,X		; 7F 80 43 FF ; Add long $FF4380.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$47.b]		; 07 47 ; OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $001FE0.l,X		; BF E0 1F 00 ; Load long $001FE0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $817E00.l,X		; FF 00 7E 81 ; Subtract with carry (long,X) $817E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $FF7070.l		; 8F 70 70 FF ; Store accumulator (long) $FF7070.l [Reads: Accumulator]
	cmp $E767CF.l		; CF CF 67 E7 ; Compare accumulator (long) $E767CF.l [Reads: Accumulator] [Flags: NCZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($30.b),Y		; 11 30 ; OR accumulator with memory ($30.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp [$3F.b]		; C7 3F ; Compare accumulator (long) [$3F.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($0E.b),Y		; F1 0E ; Subtract with carry ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $03FC00.l,X		; FF 00 FC 03 ; Subtract with carry (long,X) $03FC00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FE0100.l,X		; FF 00 01 FE ; Subtract with carry (long,X) $FE0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0027FF.l,X		; FF FF 27 00 ; Subtract with carry (long,X) $0027FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $03FFFF.l		; 0F FF FF 03 ; OR accumulator with memory (long) $03FFFF.l [Writes: Accumulator] [Flags: NZ]
	sbc $3F0FF0.l,X		; FF F0 0F 3F ; Subtract with carry (long,X) $3F0FF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$F00F.w		; C0 0F F0 ; Compare #$F00F.w with Y register [Reads: Y Index] [Flags: NCZ]
	sta $00FF60.l,X		; 9F 60 FF 00 ; Store accumulator (long,X) $00FF60.l,X [Reads: Accumulator, X Index]
	tsb $FB.b		; 04 FB ; Test and set bits $FB.b [Reads: Accumulator] [Flags: Z]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$03.b],Y		; 17 03 ; OR accumulator with memory (long indexed) [$03.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($F906.w,X)		; FC 06 F9 ; Jump to subroutine indirect indexed ($F906.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $FA.b		; 05 FA ; Logical OR $FA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3FF2.w		; 0D F2 3F ; Logical OR $3FF2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$CC37.w		; C0 37 CC ; Compare #$CC37.w with Y register [Reads: Y Index] [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc $0F.b		; E6 0F ; Increment $0F.b [Reads: Direct Page] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	rep #$80		; C2 80 ; Reset processor status bits #$80 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	jmp $D8A6.w		; 4C A6 D8 ; Jump to $D8A6.w [Flow: jump]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	asl $FFE7.w		; 0E E7 FF ; Arithmetic shift left $FFE7.w [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sbc $02FF05.l,X		; FF 05 FF 02 ; Subtract with carry (long,X) $02FF05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FF01.l,X		; FF 01 FF 00 ; Subtract with carry (long,X) $00FF01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FBE7FF.l,X		; FF FF E7 FB ; Subtract with carry (long,X) $FBE7FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $FD, $11		; 62 FD 11 ; Push effective relative address $62, $FD, $11 [Writes: Stack Pointer]
	sbc $DC3F9E.l,X		; FF 9E 3F DC ; Subtract with carry (long,X) $DC3F9E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $EC5FE1.l,X		; 7F E1 5F EC ; Add long $EC5FE1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($BB.b,S),Y		; 53 BB ; XOR accumulator (stack relative indirect indexed) ($BB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	mvp $30,$87		; 44 87 30 ; Move block positive $30,$87 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $D74B.w,X		; FD 4B D7 ; Subtract with carry $D74B.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsl $3DE000.l		; 22 00 E0 3D ; Jump to subroutine long $3DE000.l [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jmp $0020.w		; 4C 20 00 ; Jump to $0020.w [Flow: jump]
	.db $90, $F7		; 90 F7 ; Branch if carry clear to $90, $F7 [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jsr ($F32F.w,X)		; FC 2F F3 ; Jump to subroutine indirect indexed ($F32F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $EC.b,X		; 15 EC ; OR accumulator with memory $EC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	nop		; EA ; No operation
	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ror $AF.b,X		; 76 AF ; Rotate right $AF.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $17.b,S		; 03 17 ; OR accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$87.b]		; 07 87 ; OR accumulator with memory (long) [$87.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and ($C5.b)		; 32 C5 ; AND accumulator with memory (indirect) ($C5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $DB.b		; 26 DB ; Rotate left $DB.b [Reads: Direct Page] [Flags: NCZ]
	bit $11E2.w,X		; 3C E2 11 ; Test bits $11E2.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc ($23.b,S),Y		; F3 23 ; Subtract with carry (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	dec $36.b		; C6 36 ; Decrement $36.b [Reads: Direct Page] [Flags: NZ]
	dec $443C.w,X		; DE 3C 44 ; Decrement memory $443C.w,X [Reads: X Index] [Flags: NZ]
	jmp $0018.w		; 4C 18 00 ; Jump to $0018.w [Flow: jump]
	tsb $090C.w		; 0C 0C 09 ; Test and set bits $090C.w [Reads: Accumulator] [Flags: Z]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	asl $FD.b		; 06 FD ; Arithmetic shift left $FD.b [Reads: Direct Page] [Flags: NCZ]
	ora $F31CF8.l		; 0F F8 1C F3 ; OR accumulator with memory (long) $F31CF8.l [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$45.b]		; E7 45 ; Subtract with carry (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	tsb $FB.b		; 04 FB ; Test and set bits $FB.b [Reads: Accumulator] [Flags: Z]
	sbc $F1F8.w,X		; FD F8 F1 ; Subtract with carry $F1F8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $22.b,S		; E3 22 ; Subtract stack-relative $22.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc [$01.b]		; E7 01 ; Subtract with carry (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($0C.b,S),Y		; F3 0C ; Subtract with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $93.b		; 45 93 ; Exclusive OR $93.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($9F01.w)		; 6C 01 9F ; Jump indirect to ($9F01.w) [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $93.b		; 45 93 ; Exclusive OR $93.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($0900.w)		; 6C 00 09 ; Jump indirect to ($0900.w) [Flow: jump]
	jsl $410B49.l		; 22 49 0B 41 ; Jump to subroutine long $410B49.l [Writes: Stack Pointer] [Flow: call]
	eor #$0949.w		; 49 49 09 ; Exclusive OR #$0949.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $4BB4B0.l		; 4F B0 B4 4B ; Exclusive OR accumulator with memory (long) $4BB4B0.l [Writes: Accumulator] [Flags: NZ]
	asl $0E01.w,X		; 1E 01 0E ; Arithmetic shift left $0E01.w,X [Reads: X Index] [Flags: NCZ]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $8D1C00.l		; 0F 00 1C 8D ; OR accumulator with memory (long) $8D1C00.l [Writes: Accumulator] [Flags: NZ]
	cop $8F.b		; 02 8F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $F9		; 80 F9 ; Branch always to $80, $F9 [Flow: branch]
	sbc $F8F8.w,Y		; F9 F8 F8 ; Subtract with carry $F8F8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc ($4E.b),Y		; F1 4E ; Subtract with carry ($4E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tsb $BF.b		; 04 BF ; Test and set bits $BF.b [Reads: Accumulator] [Flags: Z]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $3EDD.w		; 1C DD 3E ; Test and reset bits $3EDD.w [Reads: Accumulator] [Flags: Z]
	sbc $22.b,S		; E3 22 ; Subtract stack-relative $22.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc ($21.b,X)		; E1 21 ; Subtract with carry ($21.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$0020.w		; E0 20 00 ; Compare #$0020.w with X register [Reads: X Index] [Flags: NCZ]
	and $40.b,S		; 23 40 ; AND accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $5C.b,S		; 03 5C ; OR accumulator with stack relative $5C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $0F5F.w,X		; 5E 5F 0F ; Logical shift right $0F5F.w,X [Reads: X Index] [Flags: NCZ]
	mvp $1F,$02		; 44 02 1F ; Move block positive $1F,$02 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$FBDA.w		; 09 DA FB ; Logical OR #$FBDA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jsr ($DCE3.w,X)		; FC E3 DC ; Jump to subroutine indirect indexed ($DCE3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FF45C0.l,X		; FF C0 45 FF ; Subtract with carry (long,X) $FF45C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $19.b		; C4 19 ; Compare $19.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cmp ($C3.b,X)		; C1 C3 ; Compare accumulator ($C3.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cmp $FF221F.l		; CF 1F 22 FF ; Compare accumulator (long) $FF221F.l [Reads: Accumulator] [Flags: NCZ]
	lsr $FF00.w		; 4E 00 FF ; Logical shift right $FF00.w [Flags: NCZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $00FF43.l,X		; 5F 43 FF 00 ; Exclusive OR accumulator with memory (long,X) $00FF43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($1B.b,X)		; 01 1B ; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpx $44.b		; E4 44 ; Compare $44.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $002800.l,X		; FF 00 28 00 ; Subtract with carry (long,X) $002800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $1C.b		; 05 1C ; Logical OR $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $8EFF00.l,X		; FF 00 FF 8E ; Subtract with carry (long,X) $8EFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $002800.l,X		; FF 00 28 00 ; Subtract with carry (long,X) $002800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $F0.b		; 05 F0 ; Logical OR $F0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $3FF06F.l,X		; FF 6F F0 3F ; Subtract with carry (long,X) $3FF06F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$2683.w		; C0 83 26 ; Compare #$2683.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $D0, $2F		; D0 2F ; Branch if not equal to $D0, $2F [Flow: branch]
	inc $FF01.w,X		; FE 01 FF ; Increment memory $FF01.w,X [Reads: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF43E0.l,X		; 1F E0 43 FF ; Logical OR long $FF43E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Stack Pointer, Accumulator]
	clv		; B8 ; Clear overflow flag [Flags: V]
	adc $1FF8C7.l,X		; 7F C7 F8 1F ; Add long $1FF8C7.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$28FF.w		; E0 FF 28 ; Compare #$28FF.w with X register [Reads: X Index] [Flags: NCZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FA.b		; 05 FA ; Logical OR $FA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $01.b		; 45 01 ; Exclusive OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $22E0.w,X		; FE E0 22 ; Increment memory $22E0.w,X [Reads: X Index] [Flags: NZ]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$FC.b]		; 27 FC ; AND accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $F5EA80.l,X		; FF 80 EA F5 ; Subtract with carry (long,X) $F5EA80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pea $F980.w		; F4 80 F9 ; Push absolute address $F980.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	rol $57.b		; 26 57 ; Rotate left $57.b [Reads: Direct Page] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $61.b,S		; E3 61 ; Subtract stack-relative $61.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc #$6F1A.w		; E9 1A 6F ; Subtract #$6F1A.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7E.b		; 85 7E ; Store accumulator to $7E.b [Reads: Accumulator]
	lda ($F3.b),Y		; B1 F3 ; Load accumulator ($F3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $CF34.w		; AC 34 CF ; Load $CF34.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $3025.w,X		; 1E 25 30 ; Arithmetic shift left $3025.w,X [Reads: X Index] [Flags: NCZ]
	jsl $804500.l		; 22 00 45 80 ; Jump to subroutine long $804500.l [Writes: Stack Pointer] [Flow: call]
	adc $7E811A.l,X		; 7F 1A 81 7E ; Add long $7E811A.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$78.b]		; 87 78 ; Store accumulator (long) [$78.b] [Reads: Direct Page, Accumulator]
	jmp.w [$F023]		; DC 23 F0 ; Jump long indirect [$F023] [Flow: jump]
	ora $7F3FC0.l		; 0F C0 3F 7F ; OR accumulator with memory (long) $7F3FC0.l [Writes: Accumulator] [Flags: NZ]
	ror $6679.w,X		; 7E 79 66 ; Rotate right $6679.w,X [Reads: X Index] [Flags: NCZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	and $0C.b,S		; 23 0C ; AND accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($01.b,S),Y		; 33 01 ; AND accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $E01F.w,X		; FE 1F E0 ; Increment memory $E01F.w,X [Reads: X Index] [Flags: NZ]
	adc $3EC180.l,X		; 7F 80 C1 3E ; Add long $3EC180.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FE46.w,Y		; 19 46 FE ; OR accumulator with memory $FE46.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$9E07.w		; 09 07 9E ; Logical OR #$9E07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	cpy #$E222.w		; C0 22 E2 ; Compare #$E222.w with Y register [Reads: Y Index] [Flags: NCZ]
	sep #$4E		; E2 4E ; Set processor status bits #$4E [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	jsl $6F057F.l		; 22 7F 05 6F ; Jump to subroutine long $6F057F.l [Writes: Stack Pointer] [Flow: call]
	eor $735F4F.l		; 4F 4F 5F 73 ; Exclusive OR accumulator with memory (long) $735F4F.l [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $27FE09.l		; 4F 09 FE 27 ; Exclusive OR accumulator with memory (long) $27FE09.l [Writes: Accumulator] [Flags: NZ]
	sep #$83		; E2 83 ; Set processor status bits #$83 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $600000.l,X		; FF 00 00 60 ; Subtract with carry (long,X) $600000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $030200.l		; 22 00 02 03 ; Jump to subroutine long $030200.l [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora ($F3.b,X)		; 01 F3 ; Logical OR ($F3.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $9345.w		; 0C 45 93 ; Test and set bits $9345.w [Reads: Accumulator] [Flags: Z]
	jmp ($9F01.w)		; 6C 01 9F ; Jump indirect to ($9F01.w) [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $93.b		; 45 93 ; Exclusive OR $93.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($0900.w)		; 6C 00 09 ; Jump indirect to ($0900.w) [Flow: jump]
	jsl $F48349.l		; 22 49 83 F4 ; Jump to subroutine long $F48349.l [Writes: Stack Pointer] [Flow: call]
	ora ($4F.b,X)		; 01 4F ; Logical OR ($4F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	and [$6F.b]		; 27 6F ; AND accumulator with memory (long) [$6F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $FF00.w		; 4E 00 FF ; Logical shift right $FF00.w [Flags: NCZ]
	and #$08FF.w		; 29 FF 08 ; Logical AND #$08FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FAFF.w,X		; FD FF FA ; Subtract with carry $FAFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E8FFF4.l,X		; FF F4 FF E8 ; Subtract with carry (long,X) $E8FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF44D0.l,X		; FF D0 44 FF ; Subtract with carry (long,X) $FF44D0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FF3ABF.l,X		; DF BF 3A FF ; Compare accumulator (long,X) $FF3ABF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	sbc $55FFAA.l,X		; FF AA FF 55 ; Subtract with carry (long,X) $55FFAA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF27AA.l,X		; FF AA 27 FF ; Subtract with carry (long,X) $FF27AA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	eor $AA.b,X		; 55 AA ; Exclusive OR accumulator with memory $AA.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: NCZ]
	ora ($3F.b,S),Y		; 13 3F ; OR accumulator (stack relative indirect indexed) ($3F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $E7DF9F.l,X		; 7F 9F DF E7 ; Add long $E7DF9F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $372E67.l,X		; 5F 67 2E 37 ; Exclusive OR accumulator with memory (long,X) $372E67.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($3E.b),Y		; 31 3E ; AND accumulator with memory ($3E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $3FFF00.l,X		; FF 00 FF 3F ; Subtract with carry (long,X) $3FFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $C68707.l,X		; 1F 07 87 C6 ; Logical OR long $C68707.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($2C.b,X)		; C1 2C ; Compare accumulator ($2C.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sbc $FF3F03.l,X		; FF 03 3F FF ; Subtract with carry (long,X) $FF3F03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FF257F.l,X		; DF 7F 25 FF ; Compare accumulator (long,X) $FF257F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $855BFF.l,X		; DF FF 5B 85 ; Compare accumulator (long,X) $855BFF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $70, $01		; 70 01 ; Branch if overflow set to $70, $01 [Flow: branch]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $25FE.w,X		; FD FE 25 ; Subtract with carry $25FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $920002.l,X		; FF 02 00 92 ; Subtract with carry (long,X) $920002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $2DED43.l,X		; 3F 43 ED 2D ; AND accumulator with memory (long,X) $2DED43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$EE27.w		; E0 27 EE ; Compare #$EE27.w with X register [Reads: X Index] [Flags: NCZ]
	rol $27E7.w		; 2E E7 27 ; Rotate left $27E7.w [Flags: NCZ]
	jmp.w [$E300]		; DC 00 E3 ; Jump long indirect [$E300] [Flow: jump]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor ($52.b)		; 52 52 ; Exclusive OR accumulator with memory (indirect) ($52.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($58.b),Y		; 51 58 ; Exclusive OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $00FF5C.l,X		; 7F 5C FF 00 ; Add long $00FF5C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($77.b,S),Y		; B3 77 ; Load accumulator (stack relative indirect indexed) ($77.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp $CCC4.w		; 4C C4 CC ; Jump to $CCC4.w [Flow: jump]
	cpy $EC.b		; C4 EC ; Compare $EC.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cpx $6C.b		; E4 6C ; Compare $6C.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	stz $9F.b		; 64 9F ; Store zero to $9F.b
	tsb $63.b		; 04 63 ; Test and set bits $63.b [Reads: Accumulator] [Flags: Z]
	adc [$00.b]		; 67 00 ; Add with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $7F80.w		; 4D 80 7F ; Exclusive OR $7F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $81.b		; 04 81 ; Test and set bits $81.b [Reads: Accumulator] [Flags: Z]
	adc $7D7C7F.l,X		; 7F 7F 7C 7D ; Add long $7D7C7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $7E017F.l		; 22 7F 01 7E ; Jump to subroutine long $7E017F.l [Writes: Stack Pointer] [Flow: call]
	jmp ($0143.w,X)		; 7C 43 01 ; Jump indirect indexed to ($0143.w,X) [Reads: X Index] [Flow: jump]
	inc $094B.w,X		; FE 4B 09 ; Increment memory $094B.w,X [Reads: X Index] [Flags: NZ]
	inc $F201.w,X		; FE 01 F2 ; Increment memory $F201.w,X [Reads: X Index] [Flags: NZ]
	sbc ($23.b)		; F2 23 ; Subtract with carry (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sep #$01		; E2 01 ; Set processor status bits #$01 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	cpx #$43E0.w		; E0 E0 43 ; Compare #$43E0.w with X register [Reads: X Index] [Flags: NCZ]
	ora #$E0FE.w		; 09 FE E0 ; Logical OR #$E0FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol $05.b		; 26 05 ; Rotate left $05.b [Reads: Direct Page] [Flags: NCZ]
	inc $13.b,X		; F6 13 ; Increment memory $13.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc ($2D.b)		; F2 2D ; Subtract with carry (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $DE5D.w		; EE 5D DE ; Increment $DE5D.w [Flags: NZ]
	lda $7DBE.w,X		; BD BE 7D ; Load $7DBE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $E0E0.w,X		; 7E E0 E0 ; Rotate right $E0E0.w,X [Reads: X Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpy $2290.w		; CC 90 22 ; Compare $2290.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $42, $82		; 42 82 ; Reserved instruction
	mvn $B3,$76		; 54 76 B3 ; Move block negative $B3,$76 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ldx $CD.b,Y		; B6 CD ; Load X register $CD.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $3733.w,X		; FD 33 37 ; Subtract with carry $3733.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and $FA.b,X		; 35 FA ; Logical AND $FA.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	stx $F173.w		; 8E 73 F1 ; Store X register to $F173.w [Reads: X Index]
	sta $4989.w		; 8D 89 49 ; Store accumulator to $4989.w [Reads: Accumulator]
	and ($23.b,S),Y		; 33 23 ; AND accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $EF0800.l		; 22 00 08 EF ; Jump to subroutine long $EF0800.l [Writes: Stack Pointer] [Flow: call]
	sbc $7E0000.l		; EF 00 00 7E ; Subtract with carry (long) $7E0000.l [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $17.b		; 02 17 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $15,$EA		; 44 EA 15 ; Move block positive $15,$EA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sta $2A.b,S		; 83 2A ; Store accumulator (stack relative) $2A.b,S [Reads: Stack Pointer, Accumulator]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $050022.l,X		; FF 22 00 05 ; Subtract with carry (long,X) $050022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	nop		; EA ; No operation
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($4300.w,X)		; 7C 00 43 ; Jump indirect indexed to ($4300.w,X) [Reads: X Index] [Flow: jump]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$8035.w		; E0 35 80 ; Compare #$8035.w with X register [Reads: X Index] [Flags: NCZ]
	adc $20BF40.l,X		; 7F 40 BF 20 ; Add long $20BF40.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $1BEF10.l,X		; DF 10 EF 1B ; Compare accumulator (long,X) $1BEF10.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cpx $24.b		; E4 24 ; Compare $24.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	sbc $3F7FFF.l,X		; FF FF 7F 3F ; Subtract with carry (long,X) $3F7FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $DBE4EF.l,X		; 9F EF E4 DB ; Store accumulator (long,X) $DBE4EF.l,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $106F90.l,X		; 9F 90 6F 10 ; Store accumulator (long,X) $106F90.l,X [Reads: Accumulator, X Index]
	sbc $64E738.l		; EF 38 E7 64 ; Subtract with carry (long) $64E738.l [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
.ACCU 16
.INDEX 16
	rep #$BD		; C2 BD
	sta $7C.b,S		; 83 7C ; Store accumulator (stack relative) $7C.b,S [Reads: Stack Pointer, Accumulator]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta $E7E767.l		; 8F 67 E7 E7 ; Store accumulator (long) $E7E767.l [Reads: Accumulator]
	cmp $9D.b,S		; C3 9D ; Compare accumulator (stack relative) $9D.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	bit $423C.w,X		; 3C 3C 42 ; Test bits $423C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	lda $1BE4.w,X		; BD E4 1B ; Load $1BE4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$18.b]		; 67 18 ; Add with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$14.b]		; E7 14 ; Subtract with carry (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $12.b,S		; 43 12 ; Exclusive OR accumulator with stack relative $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $1C09.w		; ED 09 1C ; Subtract $1C09.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc $BD.b,S		; E3 BD ; Subtract stack-relative $BD.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	adc $E3.b		; 65 E3 ; Add $E3.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc #$ECED.w		; E9 ED EC ; Subtract #$ECED.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc ($2A.b,X)		; E1 2A ; Subtract with carry ($2A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF1F04.l,X		; FF 04 1F FF ; Subtract with carry (long,X) $FF1F04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $2451FF.l,X		; 3F FF 51 24 ; AND accumulator with memory (long,X) $2451FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $3F1F04.l,X		; FF 04 1F 3F ; Subtract with carry (long,X) $3F1F04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2DEAFF.l,X		; FF FF EA 2D ; Subtract with carry (long,X) $2DEAFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $26EA00.l,X		; FF 00 EA 26 ; Subtract with carry (long,X) $26EA00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $11EF05.l,X		; FF 05 EF 11 ; Subtract with carry (long,X) $11EF05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$C8.b],Y		; F7 C8 ; Subtract with carry (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF28E7.l,X		; FF E7 28 FF ; Subtract with carry (long,X) $FF28E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $47.b,S		; 03 47 ; OR accumulator with stack relative $47.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc [$23.b]		; E7 23 ; Subtract with carry (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $224700.l,X		; FF 00 47 22 ; Subtract with carry (long,X) $224700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $223F00.l,X		; FF 00 3F 22 ; Subtract with carry (long,X) $223F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $43F900.l,X		; FF 00 F9 43 ; Subtract with carry (long,X) $43F900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF22FE.l,X		; FF FE 22 FF ; Subtract with carry (long,X) $FF22FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $FF33.w		; 0C 33 FF ; Test and set bits $FF33.w [Reads: Accumulator] [Flags: Z]
	and $FEF9FF.l,X		; 3F FF F9 FE ; AND accumulator with memory (long,X) $FEF9FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $33FF.w,X		; FE FF 33 ; Increment memory $33FF.w,X [Reads: X Index] [Flags: NZ]
	sbc $F1FF87.l,X		; FF 87 FF F1 ; Subtract with carry (long,X) $F1FF87.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $CF.b,S		; 03 CF ; OR accumulator with stack relative $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($BF.b,S),Y		; 33 BF ; AND accumulator (stack relative indirect indexed) ($BF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $05FF23.l,X		; 5F 23 FF 05 ; Exclusive OR accumulator with memory (long,X) $05FF23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$F1.b]		; 87 F1 ; Store accumulator (long) [$F1.b] [Reads: Direct Page, Accumulator]
	sbc $1F03FF.l,X		; FF FF 03 1F ; Subtract with carry (long,X) $1F03FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $0016FF.l		; 22 FF 16 00 ; Jump to subroutine long $0016FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $9F7F07.l,X		; FF 07 7F 9F ; Subtract with carry (long,X) $9F7F07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $BF.b,X		; 75 BF ; Add $BF.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta $E43FCC.l,X		; 9F CC 3F E4 ; Store accumulator (long,X) $E43FCC.l,X [Reads: Accumulator, X Index]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc [$00.b]		; E7 00 ; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora [$1F.b]		; 07 1F ; OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $000F1F.l,X		; 3F 1F 0F 00 ; AND accumulator with memory (long,X) $000F1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$FF24.w		; E0 24 FF ; Compare #$FF24.w with X register [Reads: X Index] [Flags: NCZ]
	tsb $AF.b		; 04 AF ; Test and set bits $AF.b [Reads: Accumulator] [Flags: Z]
	sbc $15FF5F.l,X		; FF 5F FF 15 ; Subtract with carry (long,X) $15FF5F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$72.b]		; 87 72 ; Store accumulator (long) [$72.b] [Reads: Direct Page, Accumulator]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $FD62FF.l		; AF FF 62 FD ; Load long $FD62FF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF43E0.l,X		; FF E0 43 FF ; Subtract with carry (long,X) $FF43E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $E9.b		; 00 E9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A431D0.l,X		; 1F D0 31 A4 ; Logical OR long $A431D0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $8B.b		; 64 8B ; Store zero to $8B.b
	eor $8C5E94.l		; 4F 94 5E 8C ; Exclusive OR accumulator with memory (long) $8C5E94.l [Writes: Accumulator] [Flags: NZ]
	jmp $004D8C.l		; 5C 8C 4D 00 ; Jump long to $004D8C.l [Flow: jump]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $30, $21		; 30 21 ; Branch if minus to $30, $21 [Flow: branch]
	and $32.b,S		; 23 32 ; AND accumulator with stack relative $32.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $F8F700.l,X		; FF 00 F7 F8 ; Subtract with carry (long,X) $F8F700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpx $BE8D.w		; EC 8D BE ; Compare $BE8D.w with X register [Reads: X Index] [Flags: NCZ]
	cmp $D6.b		; C5 D6 ; Compare $D6.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	adc $76.b,X		; 75 76 ; Add $76.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $36.b,X		; 15 36 ; OR accumulator with memory $36.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $96.b		; 85 96 ; Store accumulator to $96.b [Reads: Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ldx $67.b		; A6 67 ; Load $67.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sta ($61.b,X)		; 81 61 ; Store accumulator ($61.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $80, $74		; 80 74 ; Branch always to $80, $74 [Flow: branch]
	ldx #$B05E.w		; A2 5E B0 ; Load #$B05E.w into X register [Writes: X Index] [Flags: NZ]
	eor $E31FF2.l,X		; 5F F2 1F E3 ; Exclusive OR accumulator with memory (long,X) $E31FF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1807F8.l,X		; 1F F8 07 18 ; Logical OR long $1807F8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $010B.w,X		; 1E 0B 01 ; Arithmetic shift left $010B.w,X [Reads: X Index] [Flags: NCZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $F7.b,S		; 43 F7 ; Exclusive OR accumulator with stack relative $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $5BF31F.l,X		; 5F 1F F3 5B ; Exclusive OR accumulator with memory (long,X) $5BF31F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pea $B35C.w		; F4 5C B3 ; Push absolute address $B35C.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	eor $DF6FB8.l,X		; 5F B8 6F DF ; Exclusive OR accumulator with memory (long,X) $DF6FB8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$AF.b],Y		; 37 AF ; AND accumulator with memory (long indexed) [$AF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	jsr $2420.w		; 20 20 24 ; Jump to subroutine at $2420.w [Writes: Stack Pointer] [Flow: call]
	and $20.b,S		; 23 20 ; AND accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $BF70DF.l,X		; 7F DF 70 BF ; Add long $BF70DF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$F8.b]		; 67 F8 ; Add with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor $F05FF0.l		; 4F F0 5F F0 ; Exclusive OR accumulator with memory (long) $F05FF0.l [Writes: Accumulator] [Flags: NZ]
	jmp $5BF343.l		; 5C 43 F3 5B ; Jump long to $5BF343.l [Flow: jump]
	cpx #$0021.w		; E0 21 00 ; Compare #$0021.w with X register [Reads: X Index] [Flags: NCZ]
	ora $203018.l		; 0F 18 30 20 ; OR accumulator with memory (long) $203018.l [Writes: Accumulator] [Flags: NZ]
	and $24.b,S		; 23 24 ; AND accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $42, $F5		; 42 F5 ; Reserved instruction
	ror $DB.b,X		; 76 DB ; Rotate right $DB.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc ($FB.b)		; 72 FB ; Add with carry (indirect) ($FB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor ($F9.b)		; 52 F9 ; Exclusive OR accumulator with memory (indirect) ($F9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($F8.b),Y		; 51 F8 ; Exclusive OR accumulator with memory ($F8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $B4		; 50 B4 ; Branch if overflow clear to $50, $B4 [Flow: branch]
	.db $50, $6A		; 50 6A ; Branch if overflow clear to $50, $6A [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $0C08.w,X		; 3C 08 0C ; Test bits $0C08.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	tsb $0F0E.w		; 0C 0E 0F ; Test and set bits $0F0E.w [Reads: Accumulator] [Flags: Z]
	ora $D15007.l		; 0F 07 50 D1 ; OR accumulator with memory (long) $D15007.l [Writes: Accumulator] [Flags: NZ]
	eor $50.b,S		; 43 50 ; Exclusive OR accumulator with stack relative $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $E0		; D0 E0 ; Branch if not equal to $D0, $E0 [Flow: branch]
	and #$E969.w		; 29 69 E9 ; Logical AND #$E969.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and [$F7.b],Y		; 37 F7 ; AND accumulator with memory (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and $FF0FFF.l,X		; 3F FF 0F FF ; AND accumulator with memory (long,X) $FF0FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$3E.b]		; 07 3E ; OR accumulator with memory (long) [$3E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $0D1E3F.l,X		; 3F 3F 1E 0D ; AND accumulator with memory (long,X) $0D1E3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $CF.b		; 45 CF ; Exclusive OR $CF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$BEFE.w		; C0 FE BE ; Compare #$BEFE.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $B0, $3C		; B0 3C ; Branch if carry set to $B0, $3C [Flow: branch]
	and ($F7.b,S),Y		; 33 F7 ; AND accumulator (stack relative indirect indexed) ($F7.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $78F8F0.l,X		; FF F0 F8 78 ; Subtract with carry (long,X) $78F8F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $C1		; 30 C1 ; Branch if minus to $30, $C1 [Flow: branch]
	sbc ($E0.b,X)		; E1 E0 ; Subtract with carry ($E0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $5B.b,S		; 43 5B ; Exclusive OR accumulator with stack relative $5B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp ($5901.w,X)		; 7C 01 59 ; Jump indirect indexed to ($5901.w,X) [Reads: X Index] [Flow: jump]
	ror $AD43.w,X		; 7E 43 AD ; Rotate right $AD43.w,X [Reads: X Index] [Flags: NCZ]
	ldx $6901.w,Y		; BE 01 69 ; Load X register $6901.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ror $5B43.w,X		; 7E 43 5B ; Rotate right $5B43.w,X [Reads: X Index] [Flags: NCZ]
	jmp ($8022.w,X)		; 7C 22 80 ; Jump indirect indexed to ($8022.w,X) [Reads: X Index] [Flow: jump]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsl $130B80.l		; 22 80 0B 13 ; Jump to subroutine long $130B80.l [Writes: Stack Pointer] [Flow: call]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($60.b,S),Y		; 13 60 ; OR accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	adc $007828.l,X		; 7F 28 78 00 ; Add long $007828.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $F8.b,S		; 43 F8 ; Exclusive OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpx #$0027.w		; E0 27 00 ; Compare #$0027.w with X register [Reads: X Index] [Flags: NCZ]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$C7.b]		; 47 C7 ; Exclusive OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp [$FE.b]		; C7 FE ; Compare accumulator (long) [$FE.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	adc $FBBFFD.l,X		; 7F FD BF FB ; Add long $FBBFFD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $EFEFF7.l,X		; DF F7 EF EF ; Compare accumulator (long,X) $EFEFF7.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc [$DF.b],Y		; F7 DF ; Subtract with carry (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $AF7FBF.l,X		; DF BF 7F AF ; Compare accumulator (long,X) $AF7FBF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ora $F050B0.l,X		; 1F B0 50 F0 ; Logical OR long $F050B0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8700FF.l		; 0F FF 00 87 ; OR accumulator with memory (long) $8700FF.l [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora $400000.l		; 0F 00 00 40 ; OR accumulator with memory (long) $400000.l [Writes: Accumulator] [Flags: NZ]
	ora $070029.l		; 0F 29 00 07 ; OR accumulator with memory (long) $070029.l [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $1B04.w		; 0C 04 1B ; Test and set bits $1B04.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $002408.l,X		; 1F 08 24 00 ; Logical OR long $002408.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $0403.w		; 0E 03 04 ; Arithmetic shift left $0403.w [Flags: NCZ]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D1.b		; 00 D1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A7.b		; 02 A7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $CD.b		; 04 CD ; Test and set bits $CD.b [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $43.b,X		; 16 43 ; Arithmetic shift left $43.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $0704.w,X		; FD 04 07 ; Subtract with carry $0704.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $7078.w,X		; 3D 78 70 ; AND accumulator with memory $7078.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($03.b,X)		; E1 03 ; Subtract with carry ($03.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $97.b,S		; 03 97 ; OR accumulator with stack relative $97.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	sta [$F0.b],Y		; 97 F0 ; Store accumulator (long indexed) [$F0.b],Y [Reads: Direct Page, Y Index, Accumulator]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	clv		; B8 ; Clear overflow flag [Flags: V]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	eor $19AA.w,Y		; 59 AA 19 ; Exclusive OR accumulator with memory $19AA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $A9.b,S		; 43 A9 ; Exclusive OR accumulator with stack relative $A9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cop $89.b		; 02 89 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $23.b		; 04 23 ; Test and set bits $23.b [Reads: Accumulator] [Flags: Z]
	mvp $45,$13		; 44 13 45 ; Move block positive $45,$13 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	inc $E605.w		; EE 05 E6 ; Increment $E605.w [Flags: NZ]
	ora #$650E.w		; 09 0E 65 ; Logical OR #$650E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $FE01.w,X		; 7E 01 FE ; Rotate right $FE01.w,X [Reads: X Index] [Flags: NCZ]
	and ($FE.b),Y		; 31 FE ; AND accumulator with memory ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	.db $F0, $80		; F0 80 ; Branch if equal to $F0, $80 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpx #$DFFF.w		; E0 FF DF ; Compare #$DFFF.w with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $BF		; F0 BF ; Branch if equal to $F0, $BF [Flow: branch]
	sbc [$78.b]		; E7 78 ; Subtract with carry (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $F0DF70.l		; CF 70 DF F0 ; Compare accumulator (long) $F0DF70.l [Reads: Accumulator] [Flags: NCZ]
	jmp $5BF343.l		; 5C 43 F3 5B ; Jump long to $5BF343.l [Flow: jump]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $738498.l		; CF 98 84 73 ; Compare accumulator (long) $738498.l [Reads: Accumulator] [Flags: NCZ]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clv		; B8 ; Clear overflow flag [Flags: V]
	eor [$BF.b]		; 47 BF ; Exclusive OR accumulator with memory (long) [$BF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ldx $D25C.w		; AE 5C D2 ; Load $D25C.w into X register [Writes: X Index] [Flags: NZ]
	bit $11EE.w		; 2C EE 11 ; Test bits $11EE.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	mvp $C3,$FD		; 44 FD C3 ; Move block positive $C3,$FD [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $0000E8.l,X		; FF E8 00 00 ; Subtract with carry (long,X) $0000E8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$F3E8.w		; C0 E8 F3 ; Compare #$F3E8.w with Y register [Reads: Y Index] [Flags: NCZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	sbc $46.b,S		; E3 46 ; Subtract stack-relative $46.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cmp ($01.b,S),Y		; D3 01 ; Compare accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sbc $4B.b,S		; E3 4B ; Subtract stack-relative $4B.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor $F3.b,S		; 43 F3 ; Exclusive OR accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $34.b		; 24 34 ; Test bits $34.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora ($24.b,S),Y		; 13 24 ; OR accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	trb $1E22.w		; 1C 22 1E ; Test and reset bits $1E22.w [Reads: Accumulator] [Flags: Z]
	ora ($0F.b),Y		; 11 0F ; OR accumulator with memory ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ora [$4C.b]		; 07 4C ; OR accumulator with memory (long) [$4C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($87.b,S),Y		; 33 87 ; AND accumulator (stack relative indirect indexed) ($87.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta ($7E.b),Y		; 91 7E ; Store accumulator ($7E.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $010360.l,X		; BF 60 03 01 ; Load long $010360.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$F52F.w		; E0 2F F5 ; Compare #$F52F.w with X register [Reads: X Index] [Flags: NCZ]
	adc ($CB.b)		; 72 CB ; Add with carry (indirect) ($CB.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora [$F6.b]		; 07 F6 ; OR accumulator with memory (long) [$F6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $6DBC.w		; 4E BC 6D ; Logical shift right $6DBC.w [Flags: NCZ]
	sta $526B.w,Y		; 99 6B 52 ; Store accumulator to $526B.w,Y [Reads: Y Index, Accumulator]
	rol $78.b		; 26 78 ; Rotate left $78.b [Reads: Direct Page] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stz $0C.b,X		; 74 0C ; Store zero to $0C.b,X [Reads: X Index]
	tsb $3178.w		; 0C 78 31 ; Test and set bits $3178.w [Reads: Accumulator] [Flags: Z]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$0305.w		; 09 05 03 ; Logical OR #$0305.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc [$04.b]		; E7 04 ; Subtract with carry (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $D1.b,X		; 35 D1 ; Logical AND $D1.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $E0.b,X		; 95 E0 ; Store accumulator to $E0.b,X [Reads: Accumulator, X Index]
	eor $BA2570.l		; 4F 70 25 BA ; Exclusive OR accumulator with memory (long) $BA2570.l [Writes: Accumulator] [Flags: NZ]
	asl $1B.b,X		; 16 1B ; Arithmetic shift left $1B.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $A9.b		; 04 A9 ; Test and set bits $A9.b [Reads: Accumulator] [Flags: Z]
	asl $2A.b		; 06 2A ; Arithmetic shift left $2A.b [Reads: Direct Page] [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $800A.w		; 0E 0A 80 ; Arithmetic shift left $800A.w [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpx #$D152.w		; E0 52 D1 ; Compare #$D152.w with X register [Reads: X Index] [Flags: NCZ]
	sta [$F0.b],Y		; 97 F0 ; Store accumulator (long indexed) [$F0.b],Y [Reads: Direct Page, Y Index, Accumulator]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $23DC2F.l,X		; DF 2F DC 23 ; Compare accumulator (long,X) $23DC2F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ror $6339.w,X		; 7E 39 63 ; Rotate right $6339.w,X [Reads: X Index] [Flags: NCZ]
	bit $1DE2.w,X		; 3C E2 1D ; Test bits $1DE2.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $808000.l,X		; 7F 00 80 80 ; Add long $808000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	sbc $016798.l,X		; FF 98 67 01 ; Subtract with carry (long,X) $016798.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $040022.l,X		; FF 22 00 04 ; Subtract with carry (long,X) $040022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF00FF.l,X		; FF FF 00 FF ; Subtract with carry (long,X) $FF00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $830022.l,X		; FF 22 00 83 ; Subtract with carry (long,X) $830022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $160022.l,X		; FF 22 00 16 ; Subtract with carry (long,X) $160022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1C0000.l,X		; FF 00 00 1C ; Subtract with carry (long,X) $1C0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1E.b,S		; 03 1E ; OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$16.b]		; 07 16 ; OR accumulator with memory (long) [$16.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$14.b]		; 07 14 ; OR accumulator with memory (long) [$14.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$74.b]		; 07 74 ; OR accumulator with memory (long) [$74.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0823.w		; 0C 23 08 ; Test and set bits $0823.w [Reads: Accumulator] [Flags: Z]
	cpx #$1A23.w		; E0 23 1A ; Compare #$1A23.w with X register [Reads: X Index] [Flags: NCZ]
	asl $CD.b,X		; 16 CD ; Arithmetic shift left $CD.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	dec $85.b		; C6 85 ; Decrement $85.b [Reads: Direct Page] [Flags: NZ]
	and $80.b,S		; 23 80 ; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $FEC1.w,X		; 5E C1 FE ; Logical shift right $FEC1.w,X [Reads: X Index] [Flags: NCZ]
	jmp ($7CBE.w,X)		; 7C BE 7C ; Jump indirect indexed to ($7CBE.w,X) [Reads: X Index] [Flow: jump]
	cmp $F0E13D.l,X		; DF 3D E1 F0 ; Compare accumulator (long,X) $F0E13D.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jmp ($013C.w,X)		; 7C 3C 01 ; Jump indirect indexed to ($013C.w,X) [Reads: X Index] [Flow: jump]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $7F.b,X		; D5 7F ; Compare accumulator $7F.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $803FC0.l		; 0F C0 3F 80 ; OR accumulator with memory (long) $803FC0.l [Writes: Accumulator] [Flags: NZ]
	adc $FF0043.l,X		; 7F 43 00 FF ; Add long $FF0043.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $4FFF25.l,X		; 7F 25 FF 4F ; Add long $4FFF25.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $00273F.l,X		; DF 3F 27 00 ; Compare accumulator (long,X) $00273F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ora $9D.b		; 05 9D ; Logical OR $9D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	sty $52.b,X		; 94 52 ; Store Y register $52.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta $76.b,X		; 95 76 ; Store accumulator to $76.b,X [Reads: Accumulator, X Index]
	eor $B1.b,S		; 43 B1 ; Exclusive OR accumulator with stack relative $B1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor [$08.b],Y		; 57 08 ; Exclusive OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $17		; 70 17 ; Branch if overflow set to $70, $17 [Flow: branch]
	and $14.b,S		; 23 14 ; AND accumulator with stack relative $14.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $6400.w,X		; 1E 00 64 ; Arithmetic shift left $6400.w,X [Reads: X Index] [Flags: NCZ]
	and $2309.w		; 2D 09 23 ; Logical AND $2309.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $00FF00.l		; 0F 00 FF 00 ; OR accumulator with memory (long) $00FF00.l [Writes: Accumulator] [Flags: NZ]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	ldx $9B7F.w,Y		; BE 7F 9B ; Load X register $9B7F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	eor $805F91.l,X		; 5F 91 5F 80 ; Exclusive OR accumulator with memory (long,X) $805F91.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $FF00FF.l,X		; 7F FF 00 FF ; Add long $FF00FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $0022.w		; 20 22 00 ; Jump to subroutine at $0022.w [Writes: Stack Pointer] [Flow: call]
	eor $C5.b		; 45 C5 ; Exclusive OR $C5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $A700.w,X		; 7E 00 A7 ; Rotate right $A700.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ror $27A3.w,X		; 7E A3 27 ; Rotate right $27A3.w,X [Reads: X Index] [Flags: NCZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7E.b		; E5 7E ; Subtract $7E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $BD7E.w		; ED 7E BD ; Subtract $BD7E.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ror $7EB1.w,X		; 7E B1 7E ; Rotate right $7EB1.w,X [Reads: X Index] [Flags: NCZ]
	lda ($7E.b,X)		; A1 7E ; Load accumulator ($7E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $609F70.l		; 8F 70 9F 60 ; Store accumulator (long) $609F70.l [Reads: Accumulator]
	sbc $140028.l,X		; FF 28 00 14 ; Subtract with carry (long,X) $140028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($49.b,X)		; E1 49 ; Subtract with carry ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jmp $67B4.w		; 4C B4 67 ; Jump to $67B4.w [Flow: jump]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and ($EF.b,S),Y		; 33 EF ; AND accumulator (stack relative indirect indexed) ($EF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$0F.b],Y		; F7 0F ; Subtract with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$EF.b]		; 67 EF ; Add with carry (long) [$EF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $36		; 70 36 ; Branch if overflow set to $70, $36 [Flow: branch]
	and ($18.b,S),Y		; 33 18 ; AND accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $2207.w		; 0C 07 22 ; Test and set bits $2207.w [Reads: Accumulator] [Flags: Z]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($5E.b,X)		; E1 5E ; Subtract with carry ($5E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($3E.b),Y		; D1 3E ; Compare accumulator ($3E.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	lda ($7E.b),Y		; B1 7E ; Load accumulator ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($7E.b),Y		; F1 7E ; Subtract with carry ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7EC970.l		; EF 70 C9 7E ; Subtract with carry (long) $7EC970.l [Writes: Accumulator] [Flags: NCVZ]
	sty $77.b,X		; 94 77 ; Store Y register $77.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $0408.w		; 0E 08 04 ; Arithmetic shift left $0408.w [Flags: NCZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	rol $4D.b		; 26 4D ; Rotate left $4D.b [Reads: Direct Page] [Flags: NCZ]
	and ($2E.b,S),Y		; 33 2E ; AND accumulator (stack relative indirect indexed) ($2E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($1B.b),Y		; 11 1B ; OR accumulator with memory ($1B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: NCZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $EB.b		; 05 EB ; Logical OR $EB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $69.b		; 46 69 ; Logical shift right $69.b [Reads: Direct Page] [Flags: NCZ]
	eor [$68.b]		; 47 68 ; Exclusive OR accumulator with memory (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $1B.b		; 14 1B ; Test and reset bits $1B.b [Reads: Accumulator] [Flags: Z]
	pea $07FB.w		; F4 FB 07 ; Push absolute address $07FB.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $F8.b		; 04 F8 ; Test and set bits $F8.b [Reads: Accumulator] [Flags: Z]
	jsr ($1000.w,X)		; FC 00 10 ; Jump to subroutine indirect indexed ($1000.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	cpx #$0023.w		; E0 23 00 ; Compare #$0023.w with X register [Reads: X Index] [Flags: NCZ]
	trb $0007.w		; 1C 07 00 ; Test and reset bits $0007.w [Reads: Accumulator] [Flags: Z]
	jsr ($0004.w,X)		; FC 04 00 ; Jump to subroutine indirect indexed ($0004.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stz $A200.w		; 9C 00 A2 ; Store zero to $A200.w
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($13.b),Y		; 71 13 ; Add with carry ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $1001.w		; 0C 01 10 ; Test and set bits $1001.w [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $5D.b,S		; 63 5D ; Add with carry (stack relative) $5D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	asl $E08E.w,X		; 1E 8E E0 ; Arithmetic shift left $E08E.w,X [Reads: X Index] [Flags: NCZ]
	inc $0033.w		; EE 33 00 ; Increment $0033.w [Flags: NZ]
	cmp $430003.l		; CF 03 00 43 ; Compare accumulator (long) $430003.l [Reads: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $00FF.w		; 0D FF 00 ; Logical OR $00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$B7.b],Y		; B7 B7 ; Load accumulator (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$98.b]		; E7 98 ; Subtract with carry (long) [$98.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $24E000.l		; EF 00 E0 24 ; Subtract with carry (long) $24E000.l [Writes: Accumulator] [Flags: NCVZ]
	wai		; CB ; Wait for interrupt
	wai		; CB ; Wait for interrupt
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp $C3D9.w,Y		; D9 D9 C3 ; Compare accumulator $C3D9.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $89.b,S		; C3 89 ; Compare accumulator (stack relative) $89.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	bit #$D7D7.w		; 89 D7 D7 ; Test bits #$D7D7.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc $DFF7FF.l,X		; FF FF F7 DF ; Subtract with carry (long,X) $DFF7FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $A7.b		; A5 A7 ; Load $A7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $EBF7.w,X		; BD F7 EB ; Load $EBF7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $671665.l,X		; FF 65 16 67 ; Subtract with carry (long,X) $671665.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $66.b		; 14 66 ; Test and reset bits $66.b [Reads: Accumulator] [Flags: Z]
	tsb $7E.b		; 04 7E ; Test and set bits $7E.b [Reads: Accumulator] [Flags: Z]
	tsb $1C5A.w		; 0C 5A 1C ; Test and set bits $1C5A.w [Reads: Accumulator] [Flags: Z]
	ror $38.b,X		; 76 38 ; Rotate right $38.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	bit $0022.w,X		; 3C 22 00 ; Test bits $0022.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	tsb $28.b		; 04 28 ; Test and set bits $28.b [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	jsl $E30F00.l		; 22 00 0F E3 ; Jump to subroutine long $E30F00.l [Writes: Stack Pointer] [Flow: call]
	ora $013F.w,X		; 1D 3F 01 ; OR accumulator with memory $013F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $E701.w,X		; 7E 01 E7 ; Rotate right $E701.w,X [Reads: X Index] [Flags: NCZ]
	tsb $BE.b		; 04 BE ; Test and set bits $BE.b [Reads: Accumulator] [Flags: Z]
	eor $F3.b,X		; 55 F3 ; Exclusive OR accumulator with memory $F3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $42FE.w,X		; 5D FE 42 ; Exclusive OR accumulator with memory $42FE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda [$18.b]		; A7 18 ; Load accumulator (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $180800.l		; 22 00 08 18 ; Jump to subroutine long $180800.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $03.b,S		; 43 03 ; Exclusive OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $0607.w,X		; FD 07 06 ; Subtract with carry $0607.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	asl $3DF2.w		; 0E F2 3D ; Arithmetic shift left $3DF2.w [Flags: NCZ]
	cmp $F3.b		; C5 F3 ; Compare $F3.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($23.b,S),Y		; 13 23 ; OR accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$00.b]		; 47 00 ; Exclusive OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $F80707.l,X		; FF 07 07 F8 ; Subtract with carry (long,X) $F80707.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $8878E0.l,X		; 1F E0 78 88 ; Logical OR long $8878E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$27.b]		; E7 27 ; Subtract with carry (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1807.w		; 0D 07 18 ; Logical OR $1807.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1403.w		; 0D 03 14 ; Logical OR $1403.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $1020.w		; 0C 20 10 ; Test and set bits $1020.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $2171.w		; 20 71 21 ; Jump to subroutine at $2171.w [Writes: Stack Pointer] [Flow: call]
	eor $E3.b,S		; 43 E3 ; Exclusive OR accumulator with stack relative $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $1A.b,S		; 43 1A ; Exclusive OR accumulator with stack relative $1A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $3C3C1E.l,X		; 1F 1E 3C 3C ; Logical OR long $3C3C1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFB00.l,X		; FF 00 FB FF ; Subtract with carry (long,X) $FFFB00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $DF7F7B.l		; 0F 7B 7F DF ; OR accumulator with memory (long) $DF7F7B.l [Writes: Accumulator] [Flags: NZ]
	cpx #$DFAF.w		; E0 AF DF ; Compare #$DFAF.w with X register [Reads: X Index] [Flags: NCZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	clv		; B8 ; Clear overflow flag [Flags: V]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sta $AA.b,S		; 83 AA ; Store accumulator (stack relative) $AA.b,S [Reads: Stack Pointer, Accumulator]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $430200.l,X		; FF 00 02 43 ; Subtract with carry (long,X) $430200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $08FF.w,X		; FD FF 08 ; Subtract with carry $08FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF700.l,X		; FF 00 F7 FF ; Subtract with carry (long,X) $FFF700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0023.w,X		; FD 23 00 ; Subtract with carry $0023.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$13.b],Y		; F7 13 ; Subtract with carry (long indexed) [$13.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $4E93.w		; AE 93 4E ; Load $4E93.w into X register [Writes: X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	rol $FB.b,X		; 36 FB ; Rotate left $FB.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $43.b		; 06 43 ; Arithmetic shift left $43.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($0E.b,S),Y		; F3 0E ; Subtract with carry (stack relative indirect indexed) ($0E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $E3.b		; 05 E3 ; Logical OR $E3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $02FD.w		; 1C FD 02 ; Test and reset bits $02FD.w [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $0025.w		; 20 25 00 ; Jump to subroutine at $0025.w [Writes: Stack Pointer] [Flow: call]
	ora $837D82.l		; 0F 82 7D 83 ; OR accumulator with memory (long) $837D82.l [Writes: Accumulator] [Flags: NZ]
	ror $3FC1.w,X		; 7E C1 3F ; Rotate right $3FC1.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $DFCFB0.l,X		; 9F B0 CF DF ; Store accumulator (long,X) $DFCFB0.l,X [Reads: Accumulator, X Index]
	cpx #$F0EF.w		; E0 EF F0 ; Compare #$F0EF.w with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	jsl $800400.l		; 22 00 04 80 ; Jump to subroutine long $800400.l [Writes: Stack Pointer] [Flow: call]
	cpy #$F0E0.w		; C0 E0 F0 ; Compare #$F0E0.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $7C5B43.l,X		; FF 43 5B 7C ; Subtract with carry (long,X) $7C5B43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $59.b,S		; 43 59 ; Exclusive OR accumulator with stack relative $59.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $DD43.w,X		; 7E 43 DD ; Rotate right $DD43.w,X [Reads: X Index] [Flags: NCZ]
	inc $9903.w,X		; FE 03 99 ; Increment memory $9903.w,X [Reads: X Index] [Flags: NZ]
	inc $FE39.w,X		; FE 39 FE ; Increment memory $FE39.w,X [Reads: X Index] [Flags: NZ]
	and $80.b,S		; 23 80 ; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $BF.b,S		; 03 BF ; OR accumulator with stack relative $BF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp $7FB3.w		; 4C B3 7F ; Jump to $7FB3.w [Flow: jump]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $00FF07.l,X		; FF 07 FF 00 ; Subtract with carry (long,X) $00FF07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$DF.b]		; 67 DF ; Add with carry (long) [$DF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $00259D.l,X		; FF 9D 25 00 ; Subtract with carry (long,X) $00259D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $88.b		; 04 88 ; Test and set bits $88.b [Reads: Accumulator] [Flags: Z]
	sta $CDFE.w,X		; 9D FE CD ; Store accumulator to $CDFE.w,X [Reads: Accumulator, X Index]
	and ($44.b)		; 32 44 ; AND accumulator with memory (indirect) ($44.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0702.w,X		; FD 02 07 ; Subtract with carry $0702.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $9201.w,X		; FE 01 92 ; Increment memory $9201.w,X [Reads: X Index] [Flags: NZ]
	adc $90FF.w		; 6D FF 90 ; Add $90FF.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $0025B8.l,X		; FF B8 25 00 ; Subtract with carry (long,X) $0025B8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $90, $B8		; 90 B8 ; Branch if carry clear to $90, $B8 [Flow: branch]
	cmp ($E0.b),Y		; D1 E0 ; Compare accumulator ($E0.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	and $00FFCE.l,X		; 3F CE FF 00 ; AND accumulator with memory (long,X) $00FFCE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $430CFB.l		; 2F FB 0C 43 ; AND accumulator with memory (long) $430CFB.l [Writes: Accumulator] [Flags: NZ]
	sbc $9E0200.l,X		; FF 00 02 9E ; Subtract with carry (long,X) $9E0200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $FF61.w		; 0C 61 FF ; Test and set bits $FF61.w [Reads: Accumulator] [Flags: Z]
	stz $EFD7.w,X		; 9E D7 EF ; Store zero to $EFD7.w,X [Reads: X Index]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
.ACCU 16
.INDEX 16
	rep #$7D		; C2 7D
.ACCU 16
.INDEX 16
	rep #$3D		; C2 3D
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $020025.l,X		; 7F 25 00 02 ; Add long $020025.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	adc $045083.l,X		; 7F 83 50 04 ; Add long $045083.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $07.b		; 05 07 ; Logical OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $F30F.w,Y		; F9 0F F3 ; Subtract with carry $F30F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $45F5.w		; 0D F5 45 ; Logical OR $45F5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc ($23.b,S),Y		; F3 23 ; Subtract with carry (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $E0.b		; 04 E0 ; Test and set bits $E0.b [Reads: Accumulator] [Flags: Z]
	and $E5CBCB.l		; 2F CB CB E5 ; AND accumulator with memory (long) $E5CBCB.l [Writes: Accumulator] [Flags: NZ]
	sbc $8D.b		; E5 8D ; Subtract $8D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $8181.w		; 8D 81 81 ; Store accumulator to $8181.w [Reads: Accumulator]
	cmp $C5.b		; C5 C5 ; Compare $C5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $D3D9.w,Y		; D9 D9 D3 ; Compare accumulator $D3D9.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp ($FF.b,S),Y		; D3 FF ; Compare accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sbc $F39BF7.l,X		; FF F7 9B F3 ; Subtract with carry (long,X) $F39BF7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFA7BB.l,X		; FF BB A7 FF ; Subtract with carry (long,X) $FFA7BB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $BE8080.l,X		; FF 80 80 BE ; Subtract with carry (long,X) $BE8080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $A3A3.w,Y		; BE A3 A3 ; Load X register $A3A3.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $A3.b,S		; A3 A3 ; Load accumulator (stack relative) $A3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $80BE.w,Y		; BE BE 80 ; Load X register $80BE.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	sbc $5C417F.l,X		; FF 7F 41 5C ; Subtract with carry (long,X) $5C417F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$5C.b],Y		; 57 5C ; Exclusive OR accumulator with memory (long indexed) [$5C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($7F.b,X)		; 41 7F ; Exclusive OR accumulator with memory ($7F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	ora $7F.b,S		; 03 7F ; OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	ldy #$4F45.w		; A0 45 4F ; Load #$4F45.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $BF4007.l		; AF 07 40 BF ; Load long $BF4007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $C03F80.l,X		; 7F 80 3F C0 ; Add long $C03F80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $002210.l		; 22 10 22 00 ; Jump to subroutine long $002210.l [Writes: Stack Pointer] [Flow: call]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $EF,$1F		; 44 1F EF ; Move block positive $EF,$1F [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $7FFE17.l,X		; FF 17 FE 7F ; Subtract with carry (long,X) $7FFE17.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FBBF.w,X		; FD BF FB ; Subtract with carry $FBBF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $EFEFF7.l,X		; DF F7 EF EF ; Compare accumulator (long,X) $EFEFF7.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc [$DF.b],Y		; F7 DF ; Subtract with carry (long indexed) [$DF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lda $FE7FFD.l,X		; BF FD 7F FE ; Load long $FE7FFD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FBFD.w,X		; FE FD FB ; Increment memory $FBFD.w,X [Reads: X Index] [Flags: NZ]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $977FBF.l,X		; DF BF 7F 97 ; Compare accumulator (long,X) $977FBF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	adc $03.b,S		; 63 03 ; Add with carry (stack relative) $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$CB5F.w		; A0 5F CB ; Load #$CB5F.w into Y register [Writes: Y Index] [Flags: NZ]
	and $25.b,S		; 23 25 ; AND accumulator with stack relative $25.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $0001.w		; 1C 01 00 ; Test and reset bits $0001.w [Reads: Accumulator] [Flags: Z]
	trb $A947.w		; 1C 47 A9 ; Test and reset bits $A947.w [Reads: Accumulator] [Flags: Z]
	adc ($43.b,X)		; 61 43 ; Add with carry ($43.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $A0.b,S		; 03 A0 ; OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $2320E8.l,X		; 5F E8 20 23 ; Exclusive OR accumulator with memory (long,X) $2320E8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $1F18.w,X		; 1E 18 1F ; Arithmetic shift left $1F18.w,X [Reads: X Index] [Flags: NCZ]
	ora $CF1F00.l,X		; 1F 00 1F CF ; Logical OR long $CF1F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ldy #$D018.w		; A0 18 D0 ; Load #$D018.w into Y register [Writes: Y Index] [Flags: NZ]
	eor $9060EF.l		; 4F EF 60 90 ; Exclusive OR accumulator with memory (long) $9060EF.l [Writes: Accumulator] [Flags: NZ]
	.db $70, $98		; 70 98 ; Branch if overflow set to $70, $98 [Flow: branch]
	adc $837E89.l,X		; 7F 89 7E 83 ; Add long $837E89.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $4700.w,X		; 7D 00 47 ; Add $4700.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $0F10.w		; 20 10 0F ; Jump to subroutine at $0F10.w [Writes: Stack Pointer] [Flow: call]
	jsl $FF2500.l		; 22 00 25 FF ; Jump to subroutine long $FF2500.l [Writes: Stack Pointer] [Flow: call]
	ora #$3C3C.w		; 09 3C 3C ; Logical OR #$3C3C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sbc $FF3CFF.l,X		; FF FF 3C FF ; Subtract with carry (long,X) $FF3CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $C31400.l		; 22 00 14 C3 ; Jump to subroutine long $C31400.l [Writes: Stack Pointer] [Flow: call]
	sbc $00003C.l,X		; FF 3C 00 00 ; Subtract with carry (long,X) $00003C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E31C00.l,X		; FF 00 1C E3 ; Subtract with carry (long,X) $E31C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	rol $C1FF.w,X		; 3E FF C1 ; Rotate left $C1FF.w,X [Reads: X Index] [Flags: NCZ]
	sbc $7E8181.l,X		; FF 81 81 7E ; Subtract with carry (long,X) $7E8181.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $FFFF.w,X		; 7E FF FF ; Rotate right $FFFF.w,X [Reads: X Index] [Flags: NCZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cop $7E.b		; 02 7E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$06DF.w		; A0 DF 06 ; Load #$06DF.w into Y register [Writes: Y Index] [Flags: NZ]
	dec $D9A0.w,X		; DE A0 D9 ; Decrement memory $D9A0.w,X [Reads: X Index] [Flags: NZ]
	jsr $E0DC.w		; 20 DC E0 ; Jump to subroutine at $E0DC.w [Writes: Stack Pointer] [Flow: call]
	sta $1B0023.l,X		; 9F 23 00 1B ; Store accumulator (long,X) $1B0023.l,X [Reads: Accumulator, X Index]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc ($F3.b,X)		; 61 F3 ; Add with carry ($F3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	and ($C0.b,X)		; 21 C0 ; Logical AND ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $430000.l		; 2F 00 00 43 ; AND accumulator with memory (long) $430000.l [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $F9.b		; 06 F9 ; Arithmetic shift left $F9.b [Reads: Direct Page] [Flags: NCZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $E01FC0.l,X		; 3F C0 1F E0 ; AND accumulator with memory (long,X) $E01FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $F807F0.l		; 0F F0 07 F8 ; OR accumulator with memory (long) $F807F0.l [Writes: Accumulator] [Flags: NZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($F8.b,S),Y		; F3 F8 ; Subtract with carry (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($CF30.w,X)		; FC 30 CF ; Jump to subroutine indirect indexed ($CF30.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and ($CD.b)		; 32 CD ; AND accumulator with memory (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc [$88.b],Y		; 77 88 ; Add with carry (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $2363.w		; 9C 63 23 ; Store zero to $2363.w
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $9CDD.w		; 1C DD 9C ; Test and reset bits $9CDD.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	pei ($D5.b)		; D4 D5 ; Push effective indirect address ($D5.b) [Reads: Direct Page] [Writes: Stack Pointer]
	.db $90, $93		; 90 93 ; Branch if carry clear to $90, $93 [Flow: branch]
	jsr $CE3F.w		; 20 3F CE ; Jump to subroutine at $CE3F.w [Writes: Stack Pointer] [Flow: call]
	sbc $2EF312.l,X		; FF 12 F3 2E ; Subtract with carry (long,X) $2EF312.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $CF07.w		; ED 07 CF ; Subtract $CF07.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inc $C0EC.w		; EE EC C0 ; Increment $C0EC.w [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $47F0.w		; 1C F0 47 ; Test and reset bits $47F0.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	adc $605FA1.l,X		; 7F A1 5F 60 ; Add long $605FA1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $A3.b,S		; 83 A3 ; Store accumulator (stack relative) $A3.b,S [Reads: Stack Pointer, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $E3.b,S		; 43 E3 ; Exclusive OR accumulator with stack relative $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $AB43.w,X		; 3C 43 AB ; Test bits $AB43.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	adc $02.b,S		; 63 02 ; Add with carry (stack relative) $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	adc $AB.b,S		; 63 AB ; Add with carry (stack relative) $AB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $62, $A9, $27		; 62 A9 27 ; Push effective relative address $62, $A9, $27 [Writes: Stack Pointer]
	trb $2FE0.w		; 1C E0 2F ; Test and reset bits $2FE0.w [Reads: Accumulator] [Flags: Z]
	ora $9C6CE0.l,X		; 1F E0 6C 9C ; Logical OR long $9C6CE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp [$31.b],Y		; D7 31 ; Compare accumulator (long indexed) [$31.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ldx $546E.w		; AE 6E 54 ; Load $546E.w into X register [Writes: X Index] [Flags: NZ]
	jmp.w [$382A]		; DC 2A 38 ; Jump long indirect [$382A] [Flow: jump]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	rol $E39D.w		; 2E 9D E3 ; Rotate left $E39D.w [Flags: NCZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $2311.w		; 0E 11 23 ; Arithmetic shift left $2311.w [Flags: NCZ]
	cmp [$C1.b]		; C7 C1 ; Compare accumulator (long) [$C1.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($80.b),Y		; F1 80 ; Subtract with carry ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$FF00.w		; E0 00 FF ; Compare #$FF00.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $708CF8.l,X		; FF F8 8C 70 ; Subtract with carry (long,X) $708CF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7581.w,X		; FD 81 75 ; Subtract with carry $7581.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $1915.w,Y		; 79 15 19 ; Add $1915.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $001F.w		; 0E 1F 00 ; Arithmetic shift left $001F.w [Flags: NCZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $86.b		; 06 86 ; Arithmetic shift left $86.b [Reads: Direct Page] [Flags: NCZ]
	inc $97.b		; E6 97 ; Increment $97.b [Reads: Direct Page] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$FEFE.w		; 09 FE FE ; Logical OR #$FEFE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($F9FC.w,X)		; FC FC F9 ; Jump to subroutine indirect indexed ($F9FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $F3F3.w,Y		; F9 F3 F3 ; Subtract with carry $F3F3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $E7.b		; E6 E7 ; Increment $E7.b [Reads: Direct Page] [Flags: NZ]
	jsl $010400.l		; 22 00 04 01 ; Jump to subroutine long $010400.l [Writes: Stack Pointer] [Flow: call]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $4B18.w		; 0C 18 4B ; Test and set bits $4B18.w [Reads: Accumulator] [Flags: Z]
	ldy #$03DF.w		; A0 DF 03 ; Load #$03DF.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	sta $0027F0.l		; 8F F0 27 00 ; Store accumulator (long) $0027F0.l [Reads: Accumulator]
	trb $01.b		; 14 01 ; Test and reset bits $01.b [Reads: Accumulator] [Flags: Z]
	sbc $FC1CE3.l,X		; FF E3 1C FC ; Subtract with carry (long,X) $FC1CE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $B5.b,S		; 03 B5 ; OR accumulator with stack relative $B5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$FB.b]		; 07 FB ; OR accumulator with memory (long) [$FB.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($FD.b)		; 72 FD ; Add with carry (indirect) ($FD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $7C85.w		; 0C 85 7C ; Test and set bits $7C85.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $22.b,S		; C3 22 ; Compare accumulator (stack relative) $22.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sbc $FFC309.l,X		; FF 09 C3 FF ; Subtract with carry (long,X) $FFC309.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF44E0.l,X		; FF E0 44 FF ; Subtract with carry (long,X) $FF44E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$8045.w		; C0 45 80 ; Compare #$8045.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $FF0005.l,X		; FF 05 00 FF ; Subtract with carry (long,X) $FF0005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($C0E0.w,X)		; FC E0 C0 ; Jump to subroutine indirect indexed ($C0E0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$8022.w		; C0 22 80 ; Compare #$8022.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $7E.b,S		; 43 7E ; Exclusive OR accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($19.b,X)		; 81 19 ; Store accumulator ($19.b,X) [Reads: Direct Page, Accumulator, X Index]
	rol $BDC1.w,X		; 3E C1 BD ; Rotate left $BDC1.w,X [Reads: X Index] [Flags: NCZ]
	eor $F9.b,S		; 43 F9 ; Exclusive OR accumulator with stack relative $F9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$F3.b]		; 07 F3 ; OR accumulator with memory (long) [$F3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F1FE7.l		; 0F E7 1F 1F ; OR accumulator with memory (long) $1F1FE7.l [Writes: Accumulator] [Flags: NZ]
	sbc $CCFCFC.l,X		; FF FC FC CC ; Subtract with carry (long,X) $CCFCFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($E1.b,X)		; E1 E1 ; Subtract with carry ($E1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $07.b,S		; 63 07 ; Add with carry (stack relative) $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $1D817E.l,X		; 1F 7E 81 1D ; Logical OR long $1D817E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $0E.b,S		; E3 0E ; Subtract stack-relative $0E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc ($83.b),Y		; F1 83 ; Subtract with carry ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx #$E002.w		; A2 02 E0 ; Load #$E002.w into X register [Writes: X Index] [Flags: NZ]
	and $1C.b		; 25 1C ; Logical AND $1C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $1F.b,S		; E3 1F ; Subtract stack-relative $1F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc ($3E.b,X)		; E1 3E ; Subtract with carry ($3E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($F0.b,X)		; C1 F0 ; Compare accumulator ($F0.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sbc $FCFC.w,Y		; F9 FC FC ; Subtract with carry $FCFC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pea $FDF8.w		; F4 F8 FD ; Push absolute address $FDF8.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	jsr ($F93E.w,X)		; FC 3E F9 ; Jump to subroutine indirect indexed ($F93E.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $FD.b		; 05 FD ; Logical OR $FD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7F09.w,Y		; 79 09 7F ; Add $7F09.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $7C.b		; 05 7C ; Logical OR $7C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $D3.b,X		; 34 D3 ; Test bits $D3.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	.db $D0, $4F		; D0 4F ; Branch if not equal to $D0, $4F [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $80.b		; 86 80 ; Store X register to $80.b [Reads: X Index]
	sta $0F.b,S		; 83 0F ; Store accumulator (stack relative) $0F.b,S [Reads: Stack Pointer, Accumulator]
	and $000097.l,X		; 3F 97 00 00 ; AND accumulator with memory (long,X) $000097.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$B7.b],Y		; 17 B7 ; OR accumulator with memory (long indexed) [$B7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $D030EF.l		; 4F EF 30 D0 ; Exclusive OR accumulator with memory (long) $D030EF.l [Writes: Accumulator] [Flags: NZ]
	eor $CF68A0.l,X		; 5F A0 68 CF ; Exclusive OR accumulator with memory (long,X) $CF68A0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	lda $4FD01F.l		; AF 1F D0 4F ; Load long $4FD01F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $000060.l		; AF 60 00 00 ; Load long $000060.l into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $0717.w		; 20 17 07 ; Jump to subroutine at $0717.w [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $9710.w		; 20 10 97 ; Jump to subroutine at $9710.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$E620.w		; E0 20 E6 ; Compare #$E620.w with X register [Reads: X Index] [Flags: NCZ]
	ror $8F8B.w		; 6E 8B 8F ; Rotate right $8F8B.w [Flags: NCZ]
	ora #$9C09.w		; 09 09 9C ; Logical OR #$9C09.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $B3		; 10 B3 ; Branch if plus to $10, $B3 [Flow: branch]
	and $ADFF.w		; 2D FF AD ; Logical AND $ADFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $23BD.w,Y		; 59 BD 23 ; Exclusive OR accumulator with memory $23BD.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($70.b),Y		; 11 70 ; OR accumulator with memory ($70.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $EF.b,X		; F6 EF ; Increment memory $EF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cmp ($52.b)		; D2 52 ; Compare accumulator (indirect) ($52.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ldx $DC.b		; A6 DC ; Load $DC.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda [$72.b],Y		; B7 72 ; Load accumulator (long indexed) [$72.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda #$A579.w		; A9 79 A5 ; Load #$A579.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $7EA2.w,X		; 7D A2 7E ; Add $7EA2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $44.b,S		; A3 44 ; Load accumulator (stack relative) $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $A005A1.l,X		; 7F A1 05 A0 ; Add long $A005A1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $02060C.l,X		; 7F 0C 06 02 ; Add long $02060C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $91.b,X		; B5 91 ; Load $91.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp [$A2.b],Y		; D7 A2 ; Compare accumulator (long indexed) [$A2.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $B1AE64.l,X		; 5F 64 AE B1 ; Exclusive OR accumulator with memory (long,X) $B1AE64.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($DC.b,S),Y		; D3 DC ; Compare accumulator (stack relative indirect indexed) ($DC.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	and $00EE.w		; 2D EE 00 ; Logical AND $00EE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $F510.w		; 20 10 F5 ; Jump to subroutine at $F510.w [Writes: Stack Pointer] [Flow: call]
	ora $1915.w,Y		; 19 15 19 ; OR accumulator with memory $1915.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($F9.b),Y		; F1 F9 ; Subtract with carry ($F9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0EF5.w		; 0D F5 0E ; Logical OR $0EF5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc [$FE.b],Y		; F7 FE ; Subtract with carry (long indexed) [$FE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$8B.b]		; 07 8B ; OR accumulator with memory (long) [$8B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc [$34.b],Y		; 77 34 ; Add with carry (long indexed) [$34.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: NZ]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$7B28.w		; E0 28 7B ; Compare #$7B28.w with X register [Reads: X Index] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $FF06FF.l		; 8F FF 06 FF ; Store accumulator (long) $FF06FF.l [Reads: Accumulator]
	ora $34FD.w,X		; 1D FD 34 ; OR accumulator with memory $34FD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pea $68A8.w		; F4 A8 68 ; Push absolute address $68A8.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $90, $F1		; 90 F1 ; Branch if carry clear to $90, $F1 [Flow: branch]
	cpx #$87DF.w		; E0 DF 87 ; Compare #$87DF.w with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0F.b		; 06 0F ; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: NCZ]
	ora $E8000E.l,X		; 1F 0E 00 E8 ; Logical OR long $E8000E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FFF1.w		; EE F1 FF ; Increment $FFF1.w [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $FF		; 70 FF ; Branch if overflow set to $70, $FF [Flow: branch]
	ora #$458F.w		; 09 8F 45 ; Logical OR #$458F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp [$05.b]		; C7 05 ; Compare accumulator (long) [$05.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc [$00.b]		; E7 00 ; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0022F1.l,X		; FF F1 22 00 ; Subtract with carry (long,X) $0022F1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$70.b],Y		; 17 70 ; OR accumulator with memory (long indexed) [$70.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $D1.b		; 00 D1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($E8.b,X)		; 41 E8 ; Exclusive OR accumulator with memory ($E8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda [$70.b],Y		; B7 70 ; Load accumulator (long indexed) [$70.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp $5FE43F.l		; CF 3F E4 5F ; Compare accumulator (long) $5FE43F.l [Reads: Accumulator] [Flags: NCZ]
	ldy $6F.b,X		; B4 6F ; Load Y register $6F.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$3E.b],Y		; 77 3E ; Add with carry (long indexed) [$3E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $23070F.l,X		; 1F 0F 07 23 ; Logical OR long $23070F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $80.b		; 85 80 ; Store accumulator to $80.b [Reads: Accumulator]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $F7.b		; 02 F7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0D.b		; 06 0D ; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: NCZ]
	asl $FEF9.w		; 0E F9 FE ; Arithmetic shift left $FEF9.w [Flags: NCZ]
	ora #$0BFE.w		; 09 FE 0B ; Logical OR #$0BFE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($FA05.w,X)		; FC 05 FA ; Jump to subroutine indirect indexed ($FA05.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ror $F8FC.w,X		; 7E FC F8 ; Rotate right $F8FC.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $2A.b,S		; 83 2A ; Store accumulator (stack relative) $2A.b,S [Reads: Stack Pointer, Accumulator]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $E718E0.l,X		; 1F E0 18 E7 ; Logical OR long $E718E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$00.b]		; 47 00 ; Exclusive OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $26F800.l,X		; FF 00 F8 26 ; Subtract with carry (long,X) $26F800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7F8F1B.l,X		; FF 1B 8F 7F ; Subtract with carry (long,X) $7F8F1B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$0F.b],Y		; F7 0F ; Subtract with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora [$79.b]		; 07 79 ; OR accumulator with memory (long) [$79.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$FE.b]		; 87 FE ; Store accumulator (long) [$FE.b] [Reads: Direct Page, Accumulator]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	asl $0FF1.w		; 0E F1 0F ; Arithmetic shift left $0FF1.w [Flags: NCZ]
	ora [$F3.b]		; 07 F3 ; OR accumulator with memory (long) [$F3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FCFE.w,X		; FE FE FC ; Increment memory $FCFE.w,X [Reads: X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	adc [$9C.b],Y		; 77 9C ; Add with carry (long indexed) [$9C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $43.b,S		; 63 43 ; Add with carry (stack relative) $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $770B00.l,X		; FF 00 0B 77 ; Subtract with carry (long,X) $770B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($CD.b)		; 32 CD ; AND accumulator with memory (indirect) ($CD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $CF		; 30 CF ; Branch if minus to $30, $CF [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $08.b,S		; 23 08 ; AND accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stz $23DD.w		; 9C DD 23 ; Store zero to $23DD.w
	sbc $019898.l,X		; FF 98 98 01 ; Subtract with carry (long,X) $019898.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $3F0E00.l		; 22 00 0E 3F ; Jump to subroutine long $3F0E00.l [Writes: Stack Pointer] [Flow: call]
	and $BC80FF.l,X		; 3F FF 80 BC ; AND accumulator with memory (long,X) $BC80FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $E0FE18.l,X		; 7F 18 FE E0 ; Add long $E0FE18.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($FBE0.w,X)		; FC E0 FB ; Jump to subroutine indirect indexed ($FBE0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$3983.w		; C0 83 39 ; Compare #$3983.w with Y register [Reads: Y Index] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $4E.b		; 04 4E ; Test and set bits $4E.b [Reads: Accumulator] [Flags: Z]
	sbc $002800.l,X		; FF 00 28 00 ; Subtract with carry (long,X) $002800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$42.b]		; 27 42 ; AND accumulator with memory (long) [$42.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $80A1.w,X		; 1E A1 80 ; Arithmetic shift left $80A1.w,X [Reads: X Index] [Flags: NCZ]
	eor ($C0.b),Y		; 51 C0 ; Exclusive OR accumulator with memory ($C0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit #$0360.w		; 89 60 03 ; Test bits #$0360.w with accumulator [Reads: Accumulator] [Flags: Z]
	sbc ($D8.b)		; F2 D8 ; Subtract with carry (indirect) ($D8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora [$AD.b],Y		; 17 AD ; OR accumulator with memory (long indexed) [$AD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $E141.w,Y		; BE 41 E1 ; Load X register $E141.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sbc $0D1F7F.l,X		; FF 7F 1F 0D ; Subtract with carry (long,X) $0D1F7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $40.b		; E5 40 ; Subtract $40.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $A07FA3.l,X		; 7F A3 7F A0 ; Add long $A07FA3.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $23BE41.l,X		; 7F 41 BE 23 ; Add long $23BE41.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp.w [$EC93]		; DC 93 EC ; Jump long indirect [$EC93] [Flow: jump]
	cmp $F8C7F0.l		; CF F0 C7 F8 ; Compare accumulator (long) $F8C7F0.l [Reads: Accumulator] [Flags: NCZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$1774.w		; E0 74 17 ; Compare #$1774.w with X register [Reads: X Index] [Flags: NCZ]
	sbc [$64.b],Y		; F7 64 ; Subtract with carry (long indexed) [$64.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $90, $E6		; 90 E6 ; Branch if carry clear to $90, $E6 [Flow: branch]
	bit $92.b		; 24 92 ; Test bits $92.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor [$2B.b]		; 47 2B ; Exclusive OR accumulator with memory (long) [$2B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $9AD7.w		; 8E D7 9A ; Store X register to $9AD7.w [Reads: X Index]
	and $263B32.l		; 2F 32 3B 26 ; AND accumulator with memory (long) $263B32.l [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $70381B.l		; 0F 1B 38 70 ; OR accumulator with memory (long) $70381B.l [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$33C0.w		; C0 C0 33 ; Compare #$33C0.w with Y register [Reads: Y Index] [Flags: NCZ]
	sty $7C.b		; 84 7C ; Store Y register to $7C.b [Reads: Y Index]
	ora [$7B.b]		; 07 7B ; OR accumulator with memory (long) [$7B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$79.b]		; 87 79 ; Store accumulator (long) [$79.b] [Reads: Direct Page, Accumulator]
	ldx $7B.b,Y		; B6 7B ; Load X register $7B.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sta $86.b		; 85 86 ; Store accumulator to $86.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	asl $76.b		; 06 76 ; Arithmetic shift left $76.b [Reads: Direct Page] [Flags: NCZ]
	stx $78.b,Y		; 96 78 ; Store X register $78.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $80, $30		; 80 30 ; Branch always to $80, $30 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$FFE6.w		; 09 E6 FF ; Logical OR #$FFE6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $3E7F.w		; 6E 7F 3E ; Rotate right $3E7F.w [Flags: NCZ]
	and $583C3C.l,X		; 3F 3C 3C 58 ; AND accumulator with memory (long,X) $583C3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora ($31.b,X)		; 01 31 ; Logical OR ($31.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $50, $5F		; 50 5F ; Branch if overflow clear to $50, $5F [Flow: branch]
	dec $80DF.w,X		; DE DF 80 ; Decrement memory $80DF.w,X [Reads: X Index] [Flags: NZ]
.ACCU 16
	rep #$E6		; C2 E6
	sbc $B0CEEF.l		; EF EF CE B0 ; Subtract with carry (long) $B0CEEF.l [Writes: Accumulator] [Flags: NCVZ]
	rol $FEF0.w,X		; 3E F0 FE ; Rotate left $FEF0.w,X [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1C10.w		; 1C 10 1C ; Test and reset bits $1C10.w [Reads: Accumulator] [Flags: Z]
	trb $BC.b		; 14 BC ; Test and reset bits $BC.b [Reads: Accumulator] [Flags: Z]
	bit $E4.b		; 24 E4 ; Test bits $E4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	mvp $82,$C4		; 44 C4 82 ; Move block positive $82,$C4 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	stx $81.b		; 86 81 ; Store X register to $81.b [Reads: X Index]
	sta [$E1.b]		; 87 E1 ; Store accumulator (long) [$E1.b] [Reads: Direct Page, Accumulator]
	sbc ($E3.b,S),Y		; F3 E3 ; Subtract with carry (stack relative indirect indexed) ($E3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor ($3B.b,S),Y		; 53 3B ; XOR accumulator (stack relative indirect indexed) ($3B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $00F8.w,Y		; F9 F8 00 ; Subtract with carry $00F8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc [$0B.b],Y		; 77 0B ; Add with carry (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$0F.b]		; 87 0F ; Store accumulator (long) [$0F.b] [Reads: Direct Page, Accumulator]
	adc [$7F.b],Y		; 77 7F ; Add with carry (long indexed) [$7F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$CFFF.w		; E0 FF CF ; Compare #$CFFF.w with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $90		; F0 90 ; Branch if equal to $F0, $90 [Flow: branch]
	sbc $F4F6F7.l		; EF F7 F6 F4 ; Subtract with carry (long) $F4F6F7.l [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $80		; F0 80 ; Branch if equal to $F0, $80 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	sta ($89.b,X)		; 81 89 ; Store accumulator ($89.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc ($CB.b,S),Y		; F3 CB ; Subtract with carry (stack relative indirect indexed) ($CB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $F7.b,S		; 43 F7 ; Exclusive OR accumulator with stack relative $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $830000.l,X		; FF 00 00 83 ; Subtract with carry (long,X) $830000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $00.b,Y		; B6 00 ; Load X register $00.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc [$76.b],Y		; F7 76 ; Subtract with carry (long indexed) [$76.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $24.b,X		; 34 24 ; Test bits $24.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8D83F0.l,X		; FF F0 83 8D ; Subtract with carry (long,X) $8D83F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $43.b		; 02 43 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2200.l,X		; FF 00 22 FF ; Subtract with carry (long,X) $FF2200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	stx $02.b		; 86 02 ; Store X register to $02.b [Reads: X Index]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $F0,$FF		; 44 FF F0 ; Move block positive $F0,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $E0.b,S		; 43 E0 ; Exclusive OR accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FFC043.l,X		; FF 43 C0 FF ; Subtract with carry (long,X) $FFC043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$FC.b]		; 07 FC ; OR accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	cpx #$C0E0.w		; E0 E0 C0 ; Compare #$C0E0.w with X register [Reads: X Index] [Flags: NCZ]
	cpy #$0097.w		; C0 97 00 ; Compare #$0097.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $8F7080.l,X		; 7F 80 70 8F ; Add long $8F7080.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $B090CF.l,X		; 7F CF 90 B0 ; Add long $B090CF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $7F8040.l		; 4F 40 80 7F ; Exclusive OR accumulator with memory (long) $7F8040.l [Writes: Accumulator] [Flags: NZ]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $010022.l,X		; FF 22 00 01 ; Subtract with carry (long,X) $010022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FF22BF.l		; 4F BF 22 FF ; Exclusive OR accumulator with memory (long) $FF22BF.l [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $011100.l		; 0F 00 11 01 ; OR accumulator with memory (long) $011100.l [Writes: Accumulator] [Flags: NZ]
	jsr $6100.w		; 20 00 61 ; Jump to subroutine at $6100.w [Writes: Stack Pointer] [Flow: call]
	and ($FF.b,X)		; 21 FF ; Logical AND ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rol $E343.w,X		; 3E 43 E3 ; Rotate left $E343.w,X [Reads: X Index] [Flags: NCZ]
	.db $42, $07		; 42 07 ; Reserved instruction
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1E1F.w		; 0E 1F 1E ; Arithmetic shift left $1E1F.w [Flags: NCZ]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $37FF.w,X		; 3C FF 37 ; Test bits $37FF.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $FB.b		; 06 FB ; Arithmetic shift left $FB.b [Reads: Direct Page] [Flags: NCZ]
	ora $EF1FF6.l		; 0F F6 1F EF ; OR accumulator with memory (long) $EF1FF6.l [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $14FFF0.l,X		; 1F F0 FF 14 ; Logical OR long $14FFF0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $E0DF30.l		; 0F 30 DF E0 ; OR accumulator with memory (long) $E0DF30.l [Writes: Accumulator] [Flags: NZ]
	and $31FFE0.l,X		; 3F E0 FF 31 ; AND accumulator with memory (long,X) $31FFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $F11F.w		; EE 1F F1 ; Increment $F11F.w [Flags: NZ]
	asl $04FF.w		; 0E FF 04 ; Arithmetic shift left $04FF.w [Flags: NCZ]
	sbc $27BF44.l,X		; FF 44 BF 27 ; Subtract with carry (long,X) $27BF44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $40FF00.l,X		; FF 00 FF 40 ; Subtract with carry (long,X) $40FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$F03F.w		; E0 3F F0 ; Compare #$F03F.w with X register [Reads: X Index] [Flags: NCZ]
	ora $CF2FDF.l,X		; 1F DF 2F CF ; Logical OR long $CF2FDF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	mvp $CC,$38		; 44 38 CC ; Move block positive $CC,$38 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $7F.b,S		; 23 7F ; AND accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $FF0A78.l		; 22 78 0A FF ; Jump to subroutine long $FF0A78.l [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($FA0F.w,X)		; FC 0F FA ; Jump to subroutine indirect indexed ($FA0F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inc $F3.b,X		; F6 F3 ; Increment memory $F3.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	mvp $33,$0E		; 44 0E 33 ; Move block positive $33,$0E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FE.b,S		; 23 FE ; AND accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $FF431E.l		; 22 1E 43 FF ; Jump to subroutine long $FF431E.l [Writes: Stack Pointer] [Flow: call]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $230025.l,X		; FF 25 00 23 ; Subtract with carry (long,X) $230025.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4F0022.l,X		; FF 22 00 4F ; Subtract with carry (long,X) $4F0022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy $2738.w		; CC 38 27 ; Compare $2738.w with Y register [Reads: Y Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $C100FF.l,X		; FF FF 00 C1 ; Subtract with carry (long,X) $C100FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $42, $43		; 42 43 ; Reserved instruction
	lda $043E.w,X		; BD 3E 04 ; Load $043E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $817E.w,X		; FD 7E 81 ; Subtract with carry $817E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $22FF.w,X		; 7E FF 22 ; Rotate right $22FF.w,X [Reads: X Index] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $4040.w,X		; 3C 40 40 ; Test bits $4040.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jsl $AA8300.l		; 22 00 83 AA ; Jump to subroutine long $AA8300.l [Writes: Stack Pointer] [Flow: call]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $833E.w,X		; BD 3E 83 ; Load $833E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $2300.w,Y		; B9 00 23 ; Load $2300.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $3FE000.l,X		; FF 00 E0 3F ; Subtract with carry (long,X) $3FE000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $6FD070.l		; CF 70 D0 6F ; Compare accumulator (long) $6FD070.l [Reads: Accumulator] [Flags: NCZ]
	cpy #$F37F.w		; C0 7F F3 ; Compare #$F37F.w with Y register [Reads: Y Index] [Flags: NCZ]
	adc $FF3FFF.l,X		; 7F FF 3F FF ; Add long $FF3FFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $233F00.l,X		; 1F 00 3F 23 ; Logical OR long $233F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $1F3F01.l,X		; 7F 01 3F 1F ; Add long $1F3F01.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $7A.b,S		; 83 7A ; Store accumulator (stack relative) $7A.b,S [Reads: Stack Pointer, Accumulator]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $9F6000.l,X		; FF 00 60 9F ; Subtract with carry (long,X) $9F6000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $01FF23.l		; 8F 23 FF 01 ; Store accumulator (long) $01FF23.l [Reads: Accumulator]
	inc $2500.w,X		; FE 00 25 ; Increment memory $2500.w,X [Reads: X Index] [Flags: NZ]
	sbc $85FE00.l,X		; FF 00 FE 85 ; Subtract with carry (long,X) $85FE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	tsb $63.b		; 04 63 ; Test and set bits $63.b [Reads: Accumulator] [Flags: Z]
	stz $FF00.w		; 9C 00 FF ; Store zero to $FF00.w
	jsr ($FF23.w,X)		; FC 23 FF ; Jump to subroutine indirect indexed ($FF23.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $007984.l,X		; FF 84 79 00 ; Subtract with carry (long,X) $007984.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $7EFF18.l,X		; 7F 18 FF 7E ; Add long $7EFF18.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $020022.l,X		; FF 22 00 02 ; Subtract with carry (long,X) $020022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $24		; 10 24 ; Branch if plus to $10, $24 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	sta $47.b,S		; 83 47 ; Store accumulator (stack relative) $47.b,S [Reads: Stack Pointer, Accumulator]
	ora ($E4.b,X)		; 01 E4 ; Logical OR ($E4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	cpx #$FF27.w		; E0 27 FF ; Compare #$FF27.w with X register [Reads: X Index] [Flags: NCZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc $00FF28.l,X		; FF 28 FF 00 ; Subtract with carry (long,X) $00FF28.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FF04.l,X		; FF 04 FF 00 ; Subtract with carry (long,X) $00FF04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $10FF20.l,X		; FF 20 FF 10 ; Subtract with carry (long,X) $10FF20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	sbc $F9DE31.l,X		; FF 31 DE F9 ; Subtract with carry (long,X) $F9DE31.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$FC.b],Y		; 37 FC ; AND accumulator with memory (long indexed) [$FC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $FF07FC.l		; 0F FC 07 FF ; OR accumulator with memory (long) $FF07FC.l [Writes: Accumulator] [Flags: NZ]
	jsl $FF22DF.l		; 22 DF 22 FF ; Jump to subroutine long $FF22DF.l [Writes: Stack Pointer] [Flow: call]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $04FF44.l		; 0F 44 FF 04 ; OR accumulator with memory (long) $04FF44.l [Writes: Accumulator] [Flags: NZ]
	sbc $FFF40F.l,X		; FF 0F F4 FF ; Subtract with carry (long,X) $FFF40F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $90FFF8.l		; 0F F8 FF 90 ; OR accumulator with memory (long) $90FFF8.l [Writes: Accumulator] [Flags: NZ]
	sbc $10FD12.l,X		; FF 12 FD 10 ; Subtract with carry (long,X) $10FD12.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $430027.l,X		; FF 27 00 43 ; Subtract with carry (long,X) $430027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy HDMATBL3L.w		; CC 38 43 ; Compare HDMATBL3L.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $D80738.l		; CF 38 07 D8 ; Compare accumulator (long) $D80738.l [Reads: Accumulator] [Flags: NCZ]
	and [$F0.b],Y		; 37 F0 ; AND accumulator with memory (long indexed) [$F0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $FF7FDF.l		; 2F DF 7F FF ; AND accumulator with memory (long) $FF7FDF.l [Writes: Accumulator] [Flags: NZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and $7F.b,S		; 23 7F ; AND accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $33.b,S		; 43 33 ; Exclusive OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $F30B.w		; 0E 0B F3 ; Arithmetic shift left $F30B.w [Flags: NCZ]
	asl $1EF3.w		; 0E F3 1E ; Arithmetic shift left $1EF3.w [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc $F60F.w		; EE 0F F6 ; Increment $F60F.w [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inc $00FF.w,X		; FE FF 00 ; Increment memory $00FF.w,X [Reads: X Index] [Flags: NZ]
	jsl $FE231E.l		; 22 1E 23 FE ; Jump to subroutine long $FE231E.l [Writes: Stack Pointer] [Flow: call]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $230023.l,X		; FF 23 00 23 ; Subtract with carry (long,X) $230023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4F0000.l,X		; FF 00 00 4F ; Subtract with carry (long,X) $4F0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($0E.b,S),Y		; 33 0E ; AND accumulator (stack relative indirect indexed) ($0E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$1E.b]		; 27 1E ; AND accumulator with memory (long) [$1E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $AA.b,S		; 83 AA ; Store accumulator (stack relative) $AA.b,S [Reads: Stack Pointer, Accumulator]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $863E.w,X		; BD 3E 86 ; Load $863E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $B9.b,S		; 83 B9 ; Store accumulator (stack relative) $B9.b,S [Reads: Stack Pointer, Accumulator]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C10100.l,X		; FF 00 01 C1 ; Subtract with carry (long,X) $C10100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $42, $43		; 42 43 ; Reserved instruction
	lda $843E.w,X		; BD 3E 84 ; Load $843E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b)		; B2 00 ; Load accumulator (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $3C0200.l		; 22 00 02 3C ; Jump to subroutine long $3C0200.l [Writes: Stack Pointer] [Flow: call]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsl $DA8700.l		; 22 00 87 DA ; Jump to subroutine long $DA8700.l [Writes: Stack Pointer] [Flow: call]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 8
.INDEX 8
	sep #$7F		; E2 7F
	sbc [$84.b],Y		; F7 84 ; Subtract with carry (long indexed) [$84.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $7F.b		; 24 7F ; Test bits $7F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $1F3F.w		; 0C 3F 1F ; Test and set bits $1F3F.w [Reads: Accumulator] [Flags: Z]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $7303.w,X		; FD 03 73 ; Subtract with carry $7303.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $FF01.w		; 8D 01 FF ; Store accumulator to $FF01.w [Reads: Accumulator]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $010583.l		; 0F 83 05 01 ; OR accumulator with memory (long) $010583.l [Writes: Accumulator] [Flags: NZ]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $FF24.w,X		; FE 24 FF ; Increment memory $FF24.w,X [Reads: X Index] [Flags: NZ]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr ($0A88.w,X)		; FC 88 0A ; Jump to subroutine indirect indexed ($0A88.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FF0002.l,X		; FF 02 00 FF ; Subtract with carry (long,X) $FF0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $870022.l,X		; FF 22 00 87 ; Subtract with carry (long,X) $870022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $01.b,S		; 23 01 ; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2500.l,X		; FF 00 25 FF ; Subtract with carry (long,X) $FF2500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $00DC89.l,X		; 7F 89 DC 00 ; Add long $00DC89.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $E43F00.l,X		; 7F 00 3F E4 ; Add long $E43F00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor #$00.b		; 49 00 ; Exclusive OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CF.b		; 00 CF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $B7,$00		; 44 00 B7 ; Move block positive $B7,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsb $00CF.w		; 0C CF 00 ; Test and set bits $00CF.w [Reads: Accumulator] [Flags: Z]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sty $75.b		; 84 75 ; Store Y register to $75.b [Reads: Y Index]
	stx $04FB.w		; 8E FB 04 ; Store X register to $04FB.w [Reads: X Index]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	.db $30, $22		; 30 22 ; Branch if minus to $30, $22 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($44.b,S),Y		; F3 44 ; Subtract with carry (stack relative indirect indexed) ($44.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F3.b		; 02 F3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $6F,$00		; 44 00 6F ; Move block positive $6F,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $1E0C00.l,X		; 9F 00 0C 1E ; Store accumulator (long,X) $1E0C00.l,X [Reads: Accumulator, X Index]
	asl $600C.w,X		; 1E 0C 60 ; Arithmetic shift left $600C.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $F0		; [PATTERN: Memory clearing operation] F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $4361.w,X		; 9E 61 43 ; Store zero to $4361.w,X [Reads: X Index]
	ora $0293.w		; 0D 93 02 ; Logical OR $0293.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stz $F361.w,X		; 9E 61 F3 ; Store zero to $F361.w,X [Reads: X Index]
	mvp $ED,$00		; 44 00 ED ; Move block positive $ED,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsb $F3.b		; 04 F3 ; Test and set bits $F3.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $3F.b		; 84 3F ; Store Y register to $3F.b [Reads: Y Index]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $B94380.l,X		; 7F 80 43 B9 ; Add long $B94380.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $01.b		; C6 01 ; Decrement $01.b [Reads: Direct Page] [Flags: NZ]
	eor $B743B0.l		; 4F B0 43 B7 ; Exclusive OR accumulator with memory (long) $B743B0.l [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $CC.b,S		; 03 CC ; OR accumulator with stack relative $CC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($FC.b,S),Y		; 33 FC ; AND accumulator (stack relative indirect indexed) ($FC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $2A.b,S		; 03 2A ; OR accumulator with stack relative $2A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $38		; 10 38 ; Branch if plus to $10, $38 [Flow: branch]
	.db $10, $26		; 10 26 ; Branch if plus to $10, $26 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora $40.b,S		; 03 40 ; OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsl $7F0300.l		; 22 00 03 7F ; Jump to subroutine long $7F0300.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $C3		; 80 C3 ; Branch always to $80, $C3 [Flow: branch]
	mvp $BB,$47		; 44 47 BB ; Move block positive $BB,$47 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	bit $8305.w,X		; 3C 05 83 ; Test bits $8305.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jmp ($807F.w,X)		; 7C 7F 80 ; Jump indirect indexed to ($807F.w,X) [Reads: X Index] [Flow: jump]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $40.b,S		; 23 40 ; AND accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E1.b,X)		; 01 E1 ; Logical OR ($E1.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $1EDD47.l		; 22 47 DD 1E ; Jump to subroutine long $1EDD47.l [Writes: Stack Pointer] [Flow: call]
	ora $C1.b		; 05 C1 ; Logical OR $C1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $01FE.w,X		; 3E FE 01 ; Rotate left $01FE.w,X [Reads: X Index] [Flags: NCZ]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $20.b,S		; 23 20 ; AND accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit #$56.b		; 89 56 ; Test bits #$56.b with accumulator [Reads: Accumulator] [Flags: Z]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$7F.b		; E0 7F ; Compare #$7F.b with X register [Reads: X Index] [Flags: NCZ]
	inc $3F.b,X		; F6 3F ; Increment memory $3F.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $3FFF1F.l,X		; FF 1F FF 3F ; Subtract with carry (long,X) $3FFF1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $0D7F23.l,X		; 3F 23 7F 0D ; AND accumulator with memory (long,X) $0D7F23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $033F1F.l,X		; 3F 1F 3F 03 ; AND accumulator with memory (long,X) $033F1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $07F9.w,X		; FE F9 07 ; Increment memory $07F9.w,X [Reads: X Index] [Flags: NZ]
	ora $FB.b		; 05 FB ; Logical OR $FB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc [$85.b],Y		; 77 85 ; Add with carry (long indexed) [$85.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $24.b		; 02 24 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FCFE01.l,X		; FF 01 FE FC ; Subtract with carry (long,X) $FCFE01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FB.b,S		; 43 FB ; Exclusive OR accumulator with stack relative $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta [$20.b]		; 87 20 ; Store accumulator (long) [$20.b] [Reads: Direct Page, Accumulator]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $1F0320.l,X		; DF 20 03 1F ; Compare accumulator (long,X) $1F0320.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cpx #$DF.b		; E0 DF ; Compare #$DF.b with X register [Reads: X Index] [Flags: NCZ]
	jsr $3887.w		; 20 87 38 ; Jump to subroutine at $3887.w [Writes: Stack Pointer] [Flow: call]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $87.b		; 00 87 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($00.b,S),Y		; F3 00 ; Subtract with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2500.l,X		; FF 00 25 FF ; Subtract with carry (long,X) $FF2500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C2.b,S		; 03 C2 ; OR accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $47.b		; 45 47 ; Exclusive OR $47.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	and $8205.w,X		; 3D 05 82 ; AND accumulator with memory $8205.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $01FE.w,X		; 7D FE 01 ; Add $01FE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $40.b,S		; 23 40 ; AND accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$61.b		; C0 61 ; Compare #$61.b with Y register [Reads: Y Index] [Flags: NCZ]
	ldx #$47.b		; A2 47 ; Load #$47.b into X register [Writes: X Index] [Flags: NZ]
	eor $059E.w,X		; 5D 9E 05 ; Exclusive OR accumulator with memory $059E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($BE.b,X)		; 41 BE ; Exclusive OR accumulator with memory ($BE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $1C0080.l,X		; 7F 80 00 1C ; Add long $1C0080.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $20.b,S		; 23 20 ; AND accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $46.b,S		; 83 46 ; Store accumulator (stack relative) $46.b,S [Reads: Stack Pointer, Accumulator]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$B8.b]		; 47 B8 ; Exclusive OR accumulator with memory (long) [$B8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $807FA0.l,X		; 5F A0 7F 80 ; Exclusive OR accumulator with memory (long,X) $807FA0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $30CF00.l,X		; FF 00 CF 30 ; Subtract with carry (long,X) $30CF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $9F.b,S		; 43 9F ; Exclusive OR accumulator with stack relative $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $E000F8.l		; 22 F8 00 E0 ; Jump to subroutine long $E000F8.l [Writes: Stack Pointer] [Flow: call]
	jsl $FF47F8.l		; 22 F8 47 FF ; Jump to subroutine long $FF47F8.l [Writes: Stack Pointer] [Flow: call]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FA01.w,X		; FE 01 FA ; Increment memory $FA01.w,X [Reads: X Index] [Flags: NZ]
	ora $78.b		; 05 78 ; Logical OR $78.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$38.b]		; 87 38 ; Store accumulator (long) [$38.b] [Reads: Direct Page, Accumulator]
	cmp [$00.b]		; C7 00 ; Compare accumulator (long) [$00.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: NCZ]
	sbc $01FE08.l,X		; FF 08 FE 01 ; Subtract with carry (long,X) $01FE08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pea $700B.w		; F4 0B 70 ; Push absolute address $700B.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sta $00DF20.l		; 8F 20 DF 00 ; Store accumulator (long) $00DF20.l [Reads: Accumulator]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $F838FF.l		; 0F FF 38 F8 ; OR accumulator with memory (long) $F838FF.l [Writes: Accumulator] [Flags: NZ]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: NCZ]
	ora $00FF47.l		; 0F 47 FF 00 ; OR accumulator with memory (long) $00FF47.l [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$1F.b]		; 07 1F ; OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora #$FF.b		; 09 FF ; Logical OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($FF.b,X)		; C1 FF ; Compare accumulator ($FF.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	trb $001C.w		; 1C 1C 00 ; Test and reset bits $001C.w [Reads: Accumulator] [Flags: Z]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0AE51F.l,X		; FF 1F E5 0A ; Subtract with carry (long,X) $0AE51F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FF3CFF.l,X		; 1F FF 3C FF ; Logical OR long $FF3CFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	mvp $70,$FF		; 44 FF 70 ; Move block positive $70,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora #$E0.b		; 09 E0 ; Logical OR #$E0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $81FFC0.l,X		; FF C0 FF 81 ; Subtract with carry (long,X) $81FFC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $7F3F3F.l,X		; 1F 3F 3F 7F ; Logical OR long $7F3F3F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $06FF23.l,X		; 7F 23 FF 06 ; Add long $06FF23.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $443FFF.l		; 0F FF 3F 44 ; OR accumulator with memory (long) $443FFF.l [Writes: Accumulator] [Flags: NZ]
	sbc $FC027F.l,X		; FF 7F 02 FC ; Subtract with carry (long,X) $FC027F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF2AF8.l,X		; FF F8 2A FF ; Subtract with carry (long,X) $FF2AF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $0A.b		; 84 0A ; Store Y register to $0A.b [Reads: Y Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator]
	ora [$83.b]		; 07 83 ; OR accumulator with memory (long) [$83.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $FFF804.l,X		; FF 04 F8 FF ; Subtract with carry (long,X) $FFF804.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($FEFF.w,X)		; FC FF FE ; Jump to subroutine indirect indexed ($FEFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: NCZ]
	cop $7F.b		; 02 7F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF253F.l,X		; FF 3F 25 FF ; Subtract with carry (long,X) $FF253F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $00FF48.l,X		; 3F 48 FF 00 ; AND accumulator with memory (long,X) $00FF48.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2EF0.l,X		; FF F0 2E FF ; Subtract with carry (long,X) $FF2EF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $7F.b		; 02 7F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF481F.l,X		; FF 1F 48 FF ; Subtract with carry (long,X) $FF481F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$27.b		; C0 27 ; Compare #$27.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $3F27E0.l,X		; FF E0 27 3F ; Subtract with carry (long,X) $3F27E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DF.b,S		; C3 DF ; Compare accumulator (stack relative) $DF.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sbc [$AF.b]		; E7 AF ; Subtract with carry (long) [$AF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda [$9F.b],Y		; B7 9F ; Load accumulator (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta [$FE.b],Y		; 97 FE ; Store accumulator (long indexed) [$FE.b],Y [Reads: Direct Page, Y Index, Accumulator]
	inc $6C.b,X		; F6 6C ; Increment memory $6C.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	pea $6090.w		; F4 90 60 ; Push absolute address $6090.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor [$67.b]		; 47 67 ; Exclusive OR accumulator with memory (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $30CF00.l,X		; FF 00 CF 30 ; Subtract with carry (long,X) $30CF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $E5DFA8.l,X		; 9F A8 DF E5 ; Store accumulator (long,X) $E5DFA8.l,X [Reads: Accumulator, X Index]
	dec $EC57.w,X		; DE 57 EC ; Decrement memory $EC57.w,X [Reads: X Index] [Flags: NZ]
	eor [$E9.b],Y		; 57 E9 ; Exclusive OR accumulator with memory (long indexed) [$E9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $0025E3.l,X		; 1F E3 25 00 ; Logical OR long $0025E3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $46.b,S		; 03 46 ; OR accumulator with stack relative $46.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $0F041F.l,X		; FF 1F 04 0F ; Subtract with carry (long,X) $0F041F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $01FF07.l,X		; FF 07 FF 01 ; Subtract with carry (long,X) $01FF07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $070F04.l,X		; 1F 04 0F 07 ; Logical OR long $070F04.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0002.l,X		; FF 02 00 FF ; Subtract with carry (long,X) $FF0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000005.l,X		; FF 05 00 00 ; Subtract with carry (long,X) $000005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFE0.l,X		; FF E0 FF F8 ; Subtract with carry (long,X) $F8FFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $263F00.l,X		; FF 00 3F 26 ; Subtract with carry (long,X) $263F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C3F00.l,X		; FF 00 3F 2C ; Subtract with carry (long,X) $2C3F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF802.l,X		; FF 02 F8 FF ; Subtract with carry (long,X) $FFF802.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$25.b		; E0 25 ; Compare #$25.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $E0F80D.l,X		; FF 0D F8 E0 ; Subtract with carry (long,X) $E0F80D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $C73FCF.l,X		; 3F CF 3F C7 ; AND accumulator with memory (long,X) $C73FCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $E31FE7.l,X		; 1F E7 1F E3 ; Logical OR long $E31FE7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $F00FF1.l		; 0F F1 0F F0 ; OR accumulator with memory (long) $F00FF1.l [Writes: Accumulator] [Flags: NZ]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $0F.b		; 04 0F ; Test and set bits $0F.b [Reads: Accumulator] [Flags: Z]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $7F0400.l		; 22 00 04 7F ; Jump to subroutine long $7F0400.l [Writes: Stack Pointer] [Flow: call]
	ora $03031F.l,X		; 1F 1F 03 03 ; Logical OR long $03031F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $28031F.l,X		; 7F 1F 03 28 ; Add long $28031F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $031F00.l		; 0F 00 1F 03 ; OR accumulator with memory (long) $031F00.l [Writes: Accumulator] [Flags: NZ]
	ora $002507.l,X		; 1F 07 25 00 ; Logical OR long $002507.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $7F0F06.l,X		; 3F 06 0F 7F ; AND accumulator with memory (long,X) $7F0F06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FF1E7F.l,X		; 1F 7F 1E FF ; Logical OR long $FF1E7F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $FF45.w,X		; 3E 45 FF ; Rotate left $FF45.w,X [Reads: X Index] [Flags: NCZ]
	bit $0703.w,X		; 3C 03 07 ; Test bits $0703.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora $231F1F.l		; 0F 1F 1F 23 ; OR accumulator with memory (long) $231F1F.l [Writes: Accumulator] [Flags: NZ]
	and $83FF03.l,X		; 3F 03 FF 83 ; AND accumulator with memory (long,X) $83FF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF4403.l,X		; FF 03 44 FF ; Subtract with carry (long,X) $FF4403.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$46.b]		; 07 46 ; OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FF28FF.l		; 0F FF 28 FF ; OR accumulator with memory (long) $FF28FF.l [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF28FC.l,X		; FF FC 28 FF ; Subtract with carry (long,X) $FF28FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $70, $02		; 70 02 ; Branch if overflow set to $70, $02 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $FF437C.l,X		; FF 7C 43 FF ; Subtract with carry (long,X) $FF437C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $02FF28.l,X		; 3F 28 FF 02 ; AND accumulator with memory (long,X) $02FF28.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $06FF24.l,X		; 1F 24 FF 06 ; Logical OR long $06FF24.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($E0FF.w,X)		; FC FF E0 ; Jump to subroutine indirect indexed ($E0FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $8FFFC3.l,X		; FF C3 FF 8F ; Subtract with carry (long,X) $8FFFC3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$C3.b		; E0 C3 ; Compare #$C3.b with X register [Reads: X Index] [Flags: NCZ]
	sta $003284.l		; 8F 84 32 00 ; Store accumulator (long) $003284.l [Reads: Accumulator]
	.db $10, $C7		; 10 C7 ; Branch if plus to $10, $C7 [Flow: branch]
	sbc $1CFF8F.l,X		; FF 8F FF 1C ; Subtract with carry (long,X) $1CFF8F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FF38.l,X		; FF 38 FF F0 ; Subtract with carry (long,X) $F0FF38.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0F8E0.l,X		; FF E0 F8 E0 ; Subtract with carry (long,X) $E0F8E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$8F.b]		; C7 8F ; Compare accumulator (long) [$8F.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $FF223F.l,X		; 1F 3F 22 FF ; Logical OR long $FF223F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $E000FF.l		; 22 FF 00 E0 ; Jump to subroutine long $E000FF.l [Writes: Stack Pointer] [Flow: call]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sty $1D.b		; 84 1D ; Store Y register to $1D.b [Reads: Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $10FF26.l,X		; 7F 26 FF 10 ; Add long $10FF26.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $F30F.w		; 0C 0F F3 ; Test and set bits $F30F.w [Reads: Accumulator] [Flags: Z]
	jsr ($F8E7.w,X)		; FC E7 F8 ; Jump to subroutine indirect indexed ($F8E7.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp $E01FF0.l		; CF F0 1F E0 ; Compare accumulator (long) $E01FF0.l [Reads: Accumulator] [Flags: NCZ]
	and $8F7FC7.l,X		; 3F C7 7F 8F ; AND accumulator with memory (long,X) $8F7FC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $23F01F.l,X		; FF 1F F0 23 ; Subtract with carry (long,X) $23F01F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $021A85.l,X		; 1F 85 1A 02 ; Logical OR long $021A85.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $3EFF.w,X		; 1E FF 3E ; Arithmetic shift left $3EFF.w,X [Reads: X Index] [Flags: NCZ]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $7883.w,X		; 3C 83 78 ; Test bits $7883.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $03FC11.l,X		; 3F 11 FC 03 ; AND accumulator with memory (long,X) $03FC11.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FFC1.w,X		; FE C1 FF ; Increment memory $FFC1.w,X [Reads: X Index] [Flags: NZ]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: NCZ]
	sbc [$F7.b]		; E7 F7 ; Subtract with carry (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FCEFF1.l		; EF F1 EF FC ; Subtract with carry (long) $FCEFF1.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $F2.b,S		; E3 F2 ; Subtract stack-relative $F2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $C000.w		; ED 00 C0 ; Subtract $C000.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and $E0.b		; 25 E0 ; Logical AND $E0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $46BC43.l		; 0F 43 BC 46 ; OR accumulator with memory (long) $46BC43.l [Writes: Accumulator] [Flags: NZ]
	lda $211FE3.l,X		; BF E3 1F 21 ; Load long $211FE3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $C8EF90.l,X		; DF 90 EF C8 ; Compare accumulator (long,X) $C8EF90.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc [$E4.b],Y		; F7 E4 ; Subtract with carry (long indexed) [$E4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	stz $FB.b		; 64 FB ; Store zero to $FB.b
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$A8.b]		; 87 A8 ; Store accumulator (long) [$A8.b] [Reads: Direct Page, Accumulator]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $DF.b		; E4 DF ; Compare $DF.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	mvn $50,$EF		; 54 EF 50 ; Move block negative $50,$EF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $27E01F.l		; EF 1F E0 27 ; Subtract with carry (long) $27E01F.l [Writes: Accumulator] [Flags: NCVZ]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F80500.l,X		; FF 00 05 F8 ; Subtract with carry (long,X) $F80500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$F0.b]		; 07 F0 ; OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $26CFF0.l		; 0F F0 CF 26 ; OR accumulator with memory (long) $26CFF0.l [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: NCZ]
	rol $FF44.w,X		; 3E 44 FF ; Rotate left $FF44.w,X [Reads: X Index] [Flags: NCZ]
	and $FF1F08.l,X		; 3F 08 1F FF ; AND accumulator with memory (long,X) $FF1F08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $7F9F7F.l,X		; 1F 7F 9F 7F ; Logical OR long $7F9F7F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $22CF3F.l		; 8F 3F CF 22 ; Store accumulator (long) $22CF3F.l [Reads: Accumulator]
	and $091F22.l,X		; 3F 22 1F 09 ; AND accumulator with memory (long,X) $091F22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $02070F.l		; 0F 0F 07 02 ; OR accumulator with memory (long) $02070F.l [Writes: Accumulator] [Flags: NZ]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	ora DMALEN0L.w		; 0D 05 43 ; Logical OR DMALEN0L.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$0F.b],Y		; 17 0F ; OR accumulator with memory (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1718.w		; 0D 18 17 ; Logical OR $1718.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $040608.l		; 0F 08 06 04 ; OR accumulator with memory (long) $040608.l [Writes: Accumulator] [Flags: NZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $07.b		; 45 07 ; Exclusive OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $3CFF.w		; 4E FF 3C ; Logical shift right $3CFF.w [Flags: NCZ]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$3F.b]		; 27 3F ; AND accumulator with memory (long) [$3F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp $1FFF.w		; 4C FF 1F ; Jump to $1FFF.w [Flow: jump]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF280F.l,X		; FF 0F 28 FF ; Subtract with carry (long,X) $FF280F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF34FE.l,X		; FF FE 34 FF ; Subtract with carry (long,X) $FF34FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $C5.b,S		; 83 C5 ; Store accumulator (stack relative) $C5.b,S [Reads: Stack Pointer, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $84.b,S		; 03 84 ; OR accumulator with stack relative $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $00.b		; 66 00 ; Rotate right $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $F0.b,S		; 83 F0 ; Store accumulator (stack relative) $F0.b,S [Reads: Stack Pointer, Accumulator]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFC706.l,X		; FF 06 C7 FF ; Subtract with carry (long,X) $FFC706.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($FF.b,S),Y		; B3 FF ; Load accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator]
	cmp [$2C.b]		; C7 2C ; Compare accumulator (long) [$2C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $FF3617.l,X		; FF 17 36 FF ; Subtract with carry (long,X) $FF3617.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $C2BDD9.l,X		; 3F D9 BD C2 ; AND accumulator with memory (long,X) $C2BDD9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$DF.b		; E0 DF ; Compare #$DF.b with X register [Reads: X Index] [Flags: NCZ]
	cmp [$B8.b]		; C7 B8 ; Compare accumulator (long) [$B8.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $A0DF20.l,X		; DF 20 DF A0 ; Compare accumulator (long,X) $A0DF20.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $D9FF80.l,X		; FF 80 FF D9 ; Subtract with carry (long,X) $D9FF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	sty $18.b		; 84 18 ; Store Y register to $18.b [Reads: Y Index]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$01.b]		; 87 01 ; Store accumulator (long) [$01.b] [Reads: Direct Page, Accumulator]
	cop $1F.b		; 02 1F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2C3F.l,X		; FF 3F 2C FF ; Subtract with carry (long,X) $FF2C3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $C0.b		; 02 C0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $828381.l,X		; FF 81 83 82 ; Subtract with carry (long,X) $828381.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $1F020F.l,X		; FF 0F 02 1F ; Subtract with carry (long,X) $1F020F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF2E3F.l,X		; FF 3F 2E FF ; Subtract with carry (long,X) $FF2E3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $24.b		; 84 24 ; Store Y register to $24.b [Reads: Y Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE24E0.l,X		; FF E0 24 FE ; Subtract with carry (long,X) $FE24E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($F0F8.w,X)		; FC F8 F0 ; Jump to subroutine indirect indexed ($F0F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $BFD8.w,X		; DE D8 BF ; Decrement memory $BFD8.w,X [Reads: X Index] [Flags: NZ]
	sty $47.b		; 84 47 ; Store Y register to $47.b [Reads: Y Index]
	sty $07.b		; 84 07 ; Store Y register to $07.b [Reads: Y Index]
	stz $F91F.w		; 9C 1F F9 ; Store zero to $F91F.w
	ror $3CC3.w,X		; 7E C3 3C ; Rotate right $3CC3.w,X [Reads: X Index] [Flags: NCZ]
	sbc $80C000.l,X		; FF 00 C0 80 ; Subtract with carry (long,X) $80C000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	stx $79.b		; 86 79 ; Store X register to $79.b [Reads: X Index]
	sta [$78.b]		; 87 78 ; Store accumulator (long) [$78.b] [Reads: Direct Page, Accumulator]
	cmp $3A8430.l		; CF 30 84 3A ; Compare accumulator (long) $3A8430.l [Reads: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $23FFFF.l,X		; 7F FF FF 23 ; Add long $23FFFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$1F.b]		; 07 1F ; OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $CF30FF.l,X		; 7F FF 30 CF ; Add long $CF30FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $CF3FC7.l,X		; 9F C7 3F CF ; Store accumulator (long,X) $CF3FC7.l,X [Reads: Accumulator, X Index]
	and $C73FC0.l,X		; 3F C0 3F C7 ; AND accumulator with memory (long,X) $C73FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sta [$F3.b],Y		; 97 F3 ; Store accumulator (long indexed) [$F3.b],Y [Reads: Direct Page, Y Index, Accumulator]
	cmp $0C0025.l		; CF 25 00 0C ; Compare accumulator (long) $0C0025.l [Reads: Accumulator] [Flags: NCZ]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	.db $F0, $CF		; F0 CF ; Branch if equal to $F0, $CF [Flow: branch]
	sbc [$CF.b],Y		; F7 CF ; Subtract with carry (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $90		; F0 90 ; Branch if equal to $F0, $90 [Flow: branch]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $0E,$00		; 44 00 0E ; Move block positive $0E,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora [$C0.b]		; 07 C0 ; OR accumulator with memory (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $0F1F3F.l,X		; FF 3F 1F 0F ; Subtract with carry (long,X) $0F1F3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $012087.l		; 0F 87 20 01 ; OR accumulator with memory (long) $012087.l [Writes: Accumulator] [Flags: NZ]
	asl $4F.b		; 06 4F ; Arithmetic shift left $4F.b [Reads: Direct Page] [Flags: NCZ]
	sbc ($4F.b),Y		; F1 4F ; Subtract with carry ($4F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $67		; F0 67 ; Branch if equal to $F0, $67 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	and [$85.b],Y		; 37 85 ; AND accumulator with memory (long indexed) [$85.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $002201.l		; 2F 01 22 00 ; AND accumulator with memory (long) $002201.l [Writes: Accumulator] [Flags: NZ]
	ora [$F2.b],Y		; 17 F2 ; OR accumulator with memory (long indexed) [$F2.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $EEF6.w		; CE F6 EE ; Decrement $EEF6.w [Flags: NZ]
	sbc [$AF.b],Y		; F7 AF ; Subtract with carry (long indexed) [$AF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora [$39.b]		; 07 39 ; OR accumulator with memory (long) [$39.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$1C.b]		; 07 1C ; OR accumulator with memory (long) [$1C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C1.b		; 00 C1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($E0.b,X)		; E1 E0 ; Subtract with carry ($E0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$30.b		; E0 30 ; Compare #$30.b with X register [Reads: X Index] [Flags: NCZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	tsb $45.b		; 04 45 ; Test and set bits $45.b [Reads: Accumulator] [Flags: Z]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($F807.w,X)		; FC 07 F8 ; Jump to subroutine indirect indexed ($F807.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $E31FF0.l		; 0F F0 1F E3 ; OR accumulator with memory (long) $E31FF0.l [Writes: Accumulator] [Flags: NZ]
	ora $0025E7.l,X		; 1F E7 25 00 ; Logical OR long $0025E7.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $FF44.w,X		; 3E 44 FF ; Rotate left $FF44.w,X [Reads: X Index] [Flags: NCZ]
	and $7F1F45.l,X		; 3F 45 1F 7F ; AND accumulator with memory (long,X) $7F1F45.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $3F220F.l,X		; 3F 0F 22 3F ; AND accumulator with memory (long,X) $3F220F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0F001F.l		; 22 1F 00 0F ; Jump to subroutine long $0F001F.l [Writes: Stack Pointer] [Flow: call]
	sta $C7.b,S		; 83 C7 ; Store accumulator (stack relative) $C7.b,S [Reads: Stack Pointer, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $85.b,S		; 03 85 ; OR accumulator with stack relative $85.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ora $44.b,S		; 03 44 ; OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $F800F0.l,X		; FF F0 00 F8 ; Subtract with carry (long,X) $F800F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $00FF.w		; 2E FF 00 ; Rotate left $00FF.w [Flags: NCZ]
	and $00C684.l,X		; 3F 84 C6 00 ; AND accumulator with memory (long,X) $00C684.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $20E400.l,X		; FF 00 E4 20 ; Subtract with carry (long,X) $20E400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0000E.l,X		; FF 0E 00 F0 ; Subtract with carry (long,X) $F0000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $079E61.l		; 0F 61 9E 07 ; OR accumulator with memory (long) $079E61.l [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $E79FF0.l		; 8F F0 9F E7 ; Store accumulator (long) $E79FF0.l [Reads: Accumulator]
	and $9F7FCF.l,X		; 3F CF 7F 9F ; AND accumulator with memory (long,X) $9F7FCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF441F.l		; 0F 1F 44 FF ; OR accumulator with memory (long) $FF441F.l [Writes: Accumulator] [Flags: NZ]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $3C0003.l,X		; 7F 03 00 3C ; Add long $3C0003.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $EC.b,S		; 83 EC ; Store accumulator (stack relative) $EC.b,S [Reads: Stack Pointer, Accumulator]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $0000C0.l,X		; FF C0 00 00 ; Subtract with carry (long,X) $0000C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $233F1F.l		; 0F 1F 3F 23 ; OR accumulator with memory (long) $233F1F.l [Writes: Accumulator] [Flags: NZ]
	sbc $FF8002.l,X		; FF 02 80 FF ; Subtract with carry (long,X) $FF8002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000680.l,X		; FF 80 06 00 ; Subtract with carry (long,X) $000680.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $C07F80.l,X		; 7F 80 7F C0 ; Add long $C07F80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $7483F6.l,X		; 3F F6 83 74 ; AND accumulator with memory (long,X) $7483F6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,S		; 03 15 ; OR accumulator with stack relative $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$F6.b		; C0 F6 ; Compare #$F6.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $C4FBF0.l,X		; FF F0 FB C4 ; Subtract with carry (long,X) $C4FBF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($0C.b,S),Y		; F3 0C ; Subtract with carry (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E106.w,Y		; F9 06 E1 ; Subtract with carry $E106.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $8CF3.w,X		; 1E F3 8C ; Arithmetic shift left $8CF3.w,X [Reads: X Index] [Flags: NCZ]
	inc $C9.b,X		; F6 C9 ; Increment memory $C9.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy #$4E.b		; C0 4E ; Compare #$4E.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $002800.l,X		; FF 00 28 00 ; Subtract with carry (long,X) $002800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F6.b		; 06 F6 ; Arithmetic shift left $F6.b [Reads: Direct Page] [Flags: NCZ]
	ora $3F27F8.l		; 0F F8 27 3F ; OR accumulator with memory (long) $3F27F8.l [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $0F0844.l,X		; 1F 44 08 0F ; Logical OR long $0F0844.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $073F03.l,X		; 1F 03 3F 07 ; Logical OR long $073F03.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($27.b,S),Y		; 13 27 ; OR accumulator (stack relative indirect indexed) ($27.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $18F1.w		; 0E F1 18 ; Arithmetic shift left $18F1.w [Flags: NCZ]
	sbc [$32.b]		; E7 32 ; Subtract with carry (long) [$32.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $18CF30.l		; CF 30 CF 18 ; Compare accumulator (long) $18CF30.l [Reads: Accumulator] [Flags: NCZ]
	sbc [$0C.b]		; E7 0C ; Subtract with carry (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($27.b,S),Y		; F3 27 ; Subtract with carry (stack relative indirect indexed) ($27.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc ($FE.b),Y		; 71 FE ; Add with carry ($FE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$3F.b]		; C7 3F ; Compare accumulator (long) [$3F.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $9F7F43.l		; CF 43 7F 9F ; Compare accumulator (long) $9F7F43.l [Reads: Accumulator] [Flags: NCZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $3EFF44.l,X		; 3F 44 FF 3E ; AND accumulator with memory (long,X) $3EFF44.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $77.b		; 84 77 ; Store Y register to $77.b [Reads: Y Index]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $846000.l,X		; 3F 00 60 84 ; AND accumulator with memory (long,X) $846000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $FC.b,S		; C3 FC ; Compare accumulator (stack relative) $FC.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp [$F8.b]		; C7 F8 ; Compare accumulator (long) [$F8.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $E35FF0.l		; CF F0 5F E3 ; Compare accumulator (long) $E35FF0.l [Reads: Accumulator] [Flags: NCZ]
	eor $0025E7.l,X		; 5F E7 25 00 ; Exclusive OR accumulator with memory (long,X) $0025E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$27.b]		; 07 27 ; OR accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $073F00.l,X		; 1F 00 3F 07 ; Logical OR long $073F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $00250F.l,X		; 7F 0F 25 00 ; Add long $00250F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $05A686.l		; 0F 86 A6 05 ; OR accumulator with memory (long) $05A686.l [Writes: Accumulator] [Flags: NZ]
	sta $E5.b		; 85 E5 ; Store accumulator to $E5.b [Reads: Accumulator]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0022E0.l,X		; FF E0 22 00 ; Subtract with carry (long,X) $0022E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF223F.l,X		; 1F 3F 22 FF ; Logical OR long $FF223F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $F0FF3F.l,X		; FF 3F FF F0 ; Subtract with carry (long,X) $F0FF3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $052783.l,X		; FF 83 27 05 ; Subtract with carry (long,X) $052783.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $1D.b		; 84 1D ; Store Y register to $1D.b [Reads: Y Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $3F.b		; 02 3F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07433F.l		; 0F 3F 43 07 ; OR accumulator with memory (long) $07433F.l [Writes: Accumulator] [Flags: NZ]
	ora $0F0302.l,X		; 1F 02 03 0F ; Logical OR long $0F0302.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	mvp $01,$04		; 44 04 01 ; Move block positive $01,$04 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $30.b		; 84 30 ; Store Y register to $30.b [Reads: Y Index]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $0C.b,S		; 23 0C ; AND accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $F3F3FF.l,X		; FF FF F3 F3 ; Subtract with carry (long,X) $F3F3FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $273F22.l,X		; 7F 22 3F 27 ; Add long $273F22.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $07.b,S		; 23 07 ; AND accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $FE.b,X		; 15 FE ; OR accumulator with memory $FE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$F8F8]		; DC F8 F8 ; Jump long indirect [$F8F8] [Flow: jump]
	and $7F703F.l,X		; 3F 3F 70 7F ; AND accumulator with memory (long,X) $7F703F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: NCZ]
	sta ($FF.b,X)		; 81 FF ; Store accumulator ($FF.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta $FF1FFF.l		; 8F FF 1F FF ; Store accumulator (long) $FF1FFF.l [Reads: Accumulator]
	asl $C0FE.w,X		; 1E FE C0 ; Arithmetic shift left $C0FE.w,X [Reads: X Index] [Flags: NCZ]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($3C.b,X)		; 01 3C ; Logical OR ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $F17F78.l,X		; 3F 78 7F F1 ; AND accumulator with memory (long,X) $F17F78.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	mvp $F3,$FF		; 44 FF F3 ; Move block positive $F3,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora [$E7.b]		; 07 E7 ; OR accumulator with memory (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0CFE66.l,X		; FF 66 FE 0C ; Subtract with carry (long,X) $0CFE66.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($80C0.w,X)		; FC C0 80 ; Jump to subroutine indirect indexed ($80C0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b),Y		; 11 01 ; OR accumulator with memory ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $9F.b,S		; 03 9F ; OR accumulator with stack relative $9F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$4F.b		; E0 4F ; Compare #$4F.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $A1		; F0 A1 ; Branch if equal to $F0, $A1 [Flow: branch]
	ror $3FD0.w,X		; 7E D0 3F ; Rotate right $3FD0.w,X [Reads: X Index] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $3DCF36.l,X		; 9F 36 CF 3D ; Store accumulator (long,X) $3DCF36.l,X [Reads: Accumulator, X Index]
	cmp $BF.b,S		; C3 BF ; Compare accumulator (stack relative) $BF.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($27.b,X)		; C1 27 ; Compare accumulator ($27.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$F8.b]		; 47 F8 ; Exclusive OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $7C.b,S		; A3 7C ; Load accumulator (stack relative) $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $E43E.w,Y		; D9 3E E4 ; Compare accumulator $E43E.w,Y [Reads: Y Index] [Flags: NCZ]
	ora $3E877A.l,X		; 1F 7A 87 3E ; Logical OR long $3E877A.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $3D.b,S		; C3 3D ; Compare accumulator (stack relative) $3D.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp $3E.b,S		; C3 3E ; Compare accumulator (stack relative) $3E.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($27.b,X)		; C1 27 ; Compare accumulator ($27.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $7F0100.l,X		; FF 00 01 7F ; Subtract with carry (long,X) $7F0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $45		; 80 45 ; Branch always to $80, $45 [Flow: branch]
	and $FF0CC0.l,X		; 3F C0 0C FF ; AND accumulator with memory (long,X) $FF0CC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $03070F.l,X		; 3F 0F 07 03 ; AND accumulator with memory (long,X) $03070F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($7E.b,X)		; 01 7E ; Logical OR ($7E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $80FF9C.l,X		; 7F 9C FF 80 ; Add long $80FF9C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $C0,$FF		; 44 FF C0 ; Move block positive $C0,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora ($C5.b,X)		; 01 C5 ; Logical OR ($C5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	eor $CB.b,S		; 43 CB ; Exclusive OR accumulator with stack relative $CB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $26		; 80 26 ; Branch always to $80, $26 [Flow: branch]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $FA.b		; E4 FA ; Compare $FA.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $E2.b		; 05 E2 ; Logical OR $E2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $FEC6.w,X		; FE C6 FE ; Increment memory $FEC6.w,X [Reads: X Index] [Flags: NZ]
	sty $26FC.w		; 8C FC 26 ; Store Y register to $26FC.w [Reads: Y Index]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	cpx #$23.b		; E0 23 ; Compare #$23.b with X register [Reads: X Index] [Flags: NCZ]
	.db $82, $46, $A0		; 82 46 A0 ; Branch always long to $82, $46, $A0 [Flow: branch]
	adc $B1.b,S		; 63 B1 ; Add with carry (stack relative) $B1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($5F.b),Y		; 71 5F ; Add with carry ($5F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $DF9FAF.l,X		; 3F AF 9F DF ; AND accumulator with memory (long,X) $DF9FAF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$33.b		; C0 33 ; Compare #$33.b with Y register [Reads: Y Index] [Flags: NCZ]
	and ($39.b,S),Y		; 33 39 ; AND accumulator (stack relative indirect indexed) ($39.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $800E.w		; 1C 0E 80 ; Test and reset bits $800E.w [Reads: Accumulator] [Flags: Z]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp $7FBF3F.l		; CF 3F BF 7F ; Compare accumulator (long) $7FBF3F.l [Reads: Accumulator] [Flags: NCZ]
	.db $70, $FF		; 70 FF ; Branch if overflow set to $70, $FF [Flow: branch]
	adc [$FF.b]		; 67 FF ; Add with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpy $DBFC.w		; CC FC DB ; Compare $DBFC.w with Y register [Reads: Y Index] [Flags: NCZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cmp [$F7.b],Y		; D7 F7 ; Compare accumulator (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $97.b,S		; 43 97 ; Exclusive OR accumulator with stack relative $97.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda [$07.b],Y		; B7 07 ; Load accumulator (long indexed) [$07.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($33.b,S),Y		; 13 33 ; OR accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sec		; 38 ; Set carry flag [Flags: C]
	ora [$1F.b],Y		; 17 1F ; OR accumulator with memory (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $000883.l		; 8F 83 08 00 ; Store accumulator (long) $000883.l [Reads: Accumulator]
	ora ($4F.b,S),Y		; 13 4F ; OR accumulator (stack relative indirect indexed) ($4F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $E0C7CF.l		; 4F CF C7 E0 ; Exclusive OR accumulator with memory (long) $E0C7CF.l [Writes: Accumulator] [Flags: NZ]
	.db $70, $7F		; 70 7F ; Branch if overflow set to $70, $7F [Flow: branch]
	and $E3F0CF.l,X		; 3F CF F0 E3 ; AND accumulator with memory (long,X) $E3F0CF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $C23D.w		; 1C 3D C2 ; Test and reset bits $C23D.w [Reads: Accumulator] [Flags: Z]
	asl $1BF1.w		; 0E F1 1B ; Arithmetic shift left $1BF1.w [Flags: NCZ]
	trb $F3F3.w		; 1C F3 F3 ; Test and reset bits $F3F3.w [Reads: Accumulator] [Flags: Z]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($E0.b,S),Y		; 13 E0 ; OR accumulator (stack relative indirect indexed) ($E0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($FFFF.w,X)		; FC FF FF ; Jump to subroutine indirect indexed ($FFFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $FCC3E0.l,X		; 9F E0 C3 FC ; Store accumulator (long,X) $FCC3E0.l,X [Reads: Accumulator, X Index]
	sbc ($7E.b,X)		; E1 7E ; Subtract with carry ($7E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda $4BDF2E.l,X		; BF 2E DF 4B ; Load long $4BDF2E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc [$ED.b],Y		; 77 ED ; Add with carry (long indexed) [$ED.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc [$F5.b],Y		; F7 F5 ; Subtract with carry (long indexed) [$F5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	eor $AF.b,S		; 43 AF ; Exclusive OR accumulator with stack relative $AF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $B7A704.l,X		; BF 04 A7 B7 ; Load long $B7A704.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $464FBF.l,X		; 9F BF 4F 46 ; Store accumulator (long,X) $464FBF.l,X [Reads: Accumulator, X Index]
	adc $47032F.l		; 6F 2F 03 47 ; Add with carry (long) $47032F.l [Writes: Accumulator] [Flags: NCVZ]
	eor [$4F.b]		; 47 4F ; Exclusive OR accumulator with memory (long) [$4F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $439F23.l		; 4F 23 9F 43 ; Exclusive OR accumulator with memory (long) $439F23.l [Writes: Accumulator] [Flags: NZ]
	sbc $FD.b,X		; F5 FD ; Subtract $FD.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $E5.b		; 04 E5 ; Test and set bits $E5.b [Reads: Accumulator] [Flags: Z]
	sbc $FDF9.w		; ED F9 FD ; Subtract $FDF9.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc ($46.b)		; F2 46 ; Subtract with carry (indirect) ($46.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $F4.b,X		; F6 F4 ; Increment memory $F4.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora $E2.b,S		; 03 E2 ; OR accumulator with stack relative $E2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$F2		; E2 F2
	sbc ($23.b)		; F2 23 ; Subtract with carry (indirect) ($23.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $6108.w,Y		; F9 08 61 ; Subtract with carry $6108.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($33.b,X)		; E1 33 ; Subtract with carry ($33.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($1F.b,S),Y		; F3 1F ; Subtract with carry (stack relative indirect indexed) ($1F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0FFC7.l,X		; FF C7 FF E0 ; Subtract with carry (long,X) $E0FFC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $EF05FF.l		; 22 FF 05 EF ; Jump to subroutine long $EF05FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $1EF8F8.l		; EF F8 F8 1E ; Subtract with carry (long) $1EF8F8.l [Writes: Accumulator] [Flags: NCVZ]
	tsb $0023.w		; 0C 23 00 ; Test and set bits $0023.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	stx $FC8F.w		; 8E 8F FC ; Store X register to $FC8F.w [Reads: X Index]
	sbc $E3FFF8.l,X		; FF F8 FF E3 ; Subtract with carry (long,X) $E3FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF2207.l,X		; FF 07 22 FF ; Subtract with carry (long,X) $FF2207.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $F3.b		; 04 F3 ; Test and set bits $F3.b [Reads: Accumulator] [Flags: Z]
	sbc ($1F.b,S),Y		; F3 1F ; Subtract with carry (stack relative indirect indexed) ($1F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $002470.l,X		; 1F 70 24 00 ; Logical OR long $002470.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$31.b		; E0 31 ; Compare #$31.b with X register [Reads: X Index] [Flags: NCZ]
	ora $F838FF.l		; 0F FF 38 F8 ; OR accumulator with memory (long) $F838FF.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sbc ($F1.b),Y		; F1 F1 ; Subtract with carry ($F1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F0F.w		; 0D 0F 1F ; Logical OR $1F0F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0E0F07.l,X		; 1F 07 0F 0E ; Logical OR long $0E0F07.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $F83C.w		; 1C 3C F8 ; Test and reset bits $F83C.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	tsb $18FC.w		; 0C FC 18 ; Test and set bits $18FC.w [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $71F9.w,Y		; 39 F9 71 ; AND accumulator with memory $71F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($F3.b),Y		; F1 F3 ; Subtract with carry ($F3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($E3.b,S),Y		; F3 E3 ; Subtract with carry (stack relative indirect indexed) ($E3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C7.b,S		; E3 C7 ; Subtract stack-relative $C7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp [$07.b]		; C7 07 ; Compare accumulator (long) [$07.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $1C0C.w		; 0E 0C 1C ; Arithmetic shift left $1C0C.w [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $0060.w		; 8D 60 00 ; Store accumulator to $0060.w [Reads: Accumulator]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp ($27.b,X)		; C1 27 ; Compare accumulator ($27.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $7E1F.w		; EC 1F 7E ; Compare $7E1F.w with X register [Reads: X Index] [Flags: NCZ]
	sta [$3F.b]		; 87 3F ; Store accumulator (long) [$3F.b] [Reads: Direct Page, Accumulator]
	cmp $3F.b,S		; C3 3F ; Compare accumulator (stack relative) $3F.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($3F.b,X)		; C1 3F ; Compare accumulator ($3F.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cpy #$27.b		; C0 27 ; Compare #$27.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $988300.l,X		; FF 00 83 98 ; Subtract with carry (long,X) $988300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A083E0.l,X		; 1F E0 83 A0 ; Logical OR long $A083E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$22.b]		; 07 22 ; OR accumulator with memory (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $81FF.w		; 9C FF 81 ; Store zero to $81FF.w
	inc $FCC3.w,X		; FE C3 FC ; Increment memory $FCC3.w,X [Reads: X Index] [Flags: NZ]
	dec $F9.b		; C6 F9 ; Decrement $F9.b [Reads: Direct Page] [Flags: NZ]
	cmp $DBF3.w		; CD F3 DB ; Compare $DBF3.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sbc [$70.b]		; E7 70 ; Subtract with carry (long) [$70.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	eor $EE.b		; 45 EE ; Exclusive OR $EE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($43.b)		; F2 43 ; Subtract with carry (indirect) ($43.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dec $05F2.w		; CE F2 05 ; Decrement $05F2.w [Flags: NZ]
	stx $8AF2.w		; 8E F2 8A ; Store X register to $8AF2.w [Reads: X Index]
	inc $12.b,X		; F6 12 ; Increment memory $12.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $0127.w		; EE 27 01 ; Increment $0127.w [Flags: NZ]
	ora $1F.b		; 05 1F ; Logical OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $7FBF3F.l,X		; DF 3F BF 7F ; Compare accumulator (long,X) $7FBF3F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	adc $01FF29.l,X		; 7F 29 FF 01 ; Add long $01FF29.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF257F.l,X		; 3F 7F 25 FF ; AND accumulator with memory (long,X) $FF257F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $F807.w,X		; 1D 07 F8 ; OR accumulator with memory $F807.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($FC.b,S),Y		; F3 FC ; Subtract with carry (stack relative indirect indexed) ($FC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $E6E704.l		; 0F 04 E7 E6 ; OR accumulator with memory (long) $E6E704.l [Writes: Accumulator] [Flags: NZ]
	sbc [$F6.b],Y		; F7 F6 ; Subtract with carry (long indexed) [$F6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFF4.l,X		; FF F4 FF F0 ; Subtract with carry (long,X) $F0FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F00001.l,X		; FF 01 00 F0 ; Subtract with carry (long,X) $F00001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $77		; F0 77 ; Branch if equal to $F0, $77 [Flow: branch]
	adc [$0F.b],Y		; 77 0F ; Add with carry (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $838787.l		; 0F 87 87 83 ; OR accumulator with memory (long) $838787.l [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F1.b),Y		; F1 F1 ; Subtract with carry ($F1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8FF9.w,Y		; F9 F9 8F ; Subtract with carry $8FF9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($79.b,S),Y		; F3 79 ; Subtract with carry (stack relative indirect indexed) ($79.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora $0C0D.w,X		; 1D 0D 0C ; OR accumulator with memory $0C0D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $2306.w		; 0E 06 23 ; Arithmetic shift left $2306.w [Flags: NCZ]
	sbc $FCFC0B.l,X		; FF 0B FC FC ; Subtract with carry (long,X) $FCFC0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FBFB1F.l,X		; 1F 1F FB FB ; Logical OR long $FBFB1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $B8B8EF.l		; EF EF B8 B8 ; Subtract with carry (long) $B8B8EF.l [Writes: Accumulator] [Flags: NCVZ]
	jsl $F804FF.l		; 22 FF 04 F8 ; Jump to subroutine long $F804FF.l [Writes: Stack Pointer] [Flow: call]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	ora $8C837F.l,X		; 1F 7F 83 8C ; Logical OR long $8C837F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: NCZ]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $CF.b,S		; 23 CF ; AND accumulator with stack relative $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $9F9F8F.l		; 8F 8F 9F 9F ; Store accumulator (long) $9F9F8F.l [Reads: Accumulator]
	.db $F0, $C7		; F0 C7 ; Branch if equal to $F0, $C7 [Flow: branch]
	sta $3030B8.l,X		; 9F B8 30 30 ; Store accumulator (long,X) $3030B8.l,X [Reads: Accumulator, X Index]
	.db $70, $60		; 70 60 ; Branch if overflow set to $70, $60 [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	.db $F0, $FE		; F0 FE ; Branch if equal to $F0, $FE [Flow: branch]
	ora $E0.b,S		; 03 E0 ; OR accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $FEC2.w,X		; FE C2 FE ; Increment memory $FEC2.w,X [Reads: X Index] [Flags: NZ]
	and [$01.b]		; 27 01 ; AND accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	inc $03.b		; E6 03 ; Increment $03.b [Reads: Direct Page] [Flags: NZ]
	sta ($EE.b)		; 92 EE ; Store accumulator (indirect) ($EE.b) [Reads: Direct Page, Accumulator]
	bit $DC.b		; 24 DC ; Test bits $DC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	rol $01.b		; 26 01 ; Rotate left $01.b [Reads: Direct Page] [Flags: NCZ]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora $07071F.l,X		; 1F 1F 07 07 ; Logical OR long $07071F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($81.b,X)		; 81 81 ; Store accumulator ($81.b,X) [Reads: Direct Page, Accumulator, X Index]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$F7.b]		; 07 F7 ; OR accumulator with memory (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $003C.w,X		; 7E 3C 00 ; Rotate right $003C.w,X [Reads: X Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	and $0C.b,S		; 23 0C ; AND accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($F3.b,X)		; E1 F3 ; Subtract with carry ($F3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($23.b,S),Y		; F3 23 ; Subtract with carry (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3F307.l,X		; FF 07 F3 F3 ; Subtract with carry (long,X) $F3F307.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000C1E.l,X		; FF 1E 0C 00 ; Subtract with carry (long,X) $000C1E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($3F.b,S),Y		; 33 3F ; AND accumulator (stack relative indirect indexed) ($3F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $F0.b,S		; 43 F0 ; Exclusive OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FF9043.l,X		; FF 43 90 FF ; Subtract with carry (long,X) $FF9043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F0.b		; 06 F0 ; Arithmetic shift left $F0.b [Reads: Direct Page] [Flags: NCZ]
	sbc $C1FFE0.l,X		; FF E0 FF C1 ; Subtract with carry (long,X) $C1FFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0026C0.l,X		; FF C0 26 00 ; Subtract with carry (long,X) $0026C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0E.b,S		; 03 0E ; OR accumulator with stack relative $0E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $831F1C.l		; 0F 1C 1F 83 ; OR accumulator with memory (long) $831F1C.l [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	mvp $C0,$FF		; 44 FF C0 ; Move block positive $C0,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $C1.b,S		; 03 C1 ; OR accumulator with stack relative $C1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $25E0F0.l,X		; FF F0 E0 25 ; Subtract with carry (long,X) $25E0F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $FA.b		; E4 FA ; Compare $FA.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $E6.b,S		; 03 E6 ; OR accumulator with stack relative $E6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp $43F5.w		; CD F5 43 ; Compare $43F5.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $24E5.w,X		; 9D E5 24 ; Store accumulator to $24E5.w,X [Reads: Accumulator, X Index]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $45E5.w,Y		; D9 E5 45 ; Compare accumulator $45E5.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp $ED.b,X		; D5 ED ; Compare accumulator $ED.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($F5.b,X)		; 01 F5 ; Logical OR ($F5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $ED43.w		; ED 43 ED ; Subtract $ED43.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc $01.b,X		; F5 01 ; Subtract $01.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc #$F5.b		; E9 F5 ; Subtract #$F5.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$9F.b		; 49 9F ; Exclusive OR #$9F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	cmp $EF43E0.l,X		; DF E0 43 EF ; Compare accumulator (long,X) $EF43E0.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sty $77.b		; 84 77 ; Store Y register to $77.b [Reads: Y Index]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($3C.b,S),Y		; D3 3C ; Compare accumulator (stack relative indirect indexed) ($3C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sbc $1C.b,S		; E3 1C ; Subtract stack-relative $1C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	adc [$88.b],Y		; 77 88 ; Add with carry (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $3F.b,S		; 43 3F ; Exclusive OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: NCZ]
	adc $002780.l,X		; 7F 80 27 00 ; Add long $002780.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpx #$45.b		; E0 45 ; Compare #$45.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $FE0100.l,X		; FF 00 01 FE ; Subtract with carry (long,X) $FE0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($45.b,X)		; 01 45 ; Logical OR ($45.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr ($2703.w,X)		; FC 03 27 ; Jump to subroutine indirect indexed ($2703.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc $FB.b,S		; 63 FB ; Add with carry (stack relative) $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $FF25.w,X		; FE 25 FF ; Increment memory $FF25.w,X [Reads: X Index] [Flags: NZ]
	eor $F0.b,S		; 43 F0 ; Exclusive OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $83FC01.l		; 0F 01 FC 83 ; OR accumulator with memory (long) $83FC01.l [Writes: Accumulator] [Flags: NZ]
	eor $FC.b,S		; 43 FC ; Exclusive OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $01.b,S		; C3 01 ; Compare accumulator (stack relative) $01.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta [$43.b]		; 87 43 ; Store accumulator (long) [$43.b] [Reads: Direct Page, Accumulator]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $1FE043.l,X		; FF 43 E0 1F ; Subtract with carry (long,X) $1FE043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $C0.b,S		; 43 C0 ; Exclusive OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $1FE001.l,X		; 3F 01 E0 1F ; AND accumulator with memory (long,X) $1FE001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$1F.b]		; 07 1F ; OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $7FB83F.l,X		; DF 3F B8 7F ; Compare accumulator (long,X) $7FB83F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $70, $FF		; 70 FF ; Branch if overflow set to $70, $FF [Flow: branch]
	.db $F0, $44		; F0 44 ; Branch if equal to $F0, $44 [Flow: branch]
	jsr ($04F3.w,X)		; FC F3 04 ; Jump to subroutine indirect indexed ($04F3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Stack Pointer, Accumulator]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $45FF25.l,X		; 7F 25 FF 45 ; Add long $45FF25.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$3C.b		; 09 3C ; Logical OR #$3C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7E.b,S		; C3 7E ; Compare accumulator (stack relative) $7E.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta ($FF.b,X)		; 81 FF ; Store accumulator ($FF.b,X) [Reads: Direct Page, Accumulator, X Index]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FF273C.l,X		; FF 3C 27 FF ; Subtract with carry (long,X) $FF273C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $06.b		; 14 06 ; Test and reset bits $06.b [Reads: Accumulator] [Flags: Z]
	inc $FE0E.w,X		; FE 0E FE ; Increment memory $FE0E.w,X [Reads: X Index] [Flags: NZ]
	trb $F8FC.w		; 1C FC F8 ; Test and reset bits $F8FC.w [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $0101FF.l,X		; FF FF 01 01 ; Subtract with carry (long,X) $0101FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $07FF22.l		; 0F 22 FF 07 ; OR accumulator with memory (long) $07FF22.l [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora ($F2.b)		; 12 F2 ; OR accumulator with memory (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $E6.b		; E6 E6 ; Increment $E6.b [Reads: Direct Page] [Flags: NZ]
	tsb $830C.w		; 0C 0C 83 ; Test and set bits $830C.w [Reads: Accumulator] [Flags: Z]
	lsr $04.b,X		; 56 04 ; Logical shift right $04.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $E0.b		; 06 E0 ; Arithmetic shift left $E0.b [Reads: Direct Page] [Flags: NCZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF241F.l		; 0F 1F 24 FF ; OR accumulator with memory (long) $FF241F.l [Writes: Accumulator] [Flags: NZ]
	ora $C0FFF8.l		; 0F F8 FF C0 ; OR accumulator with memory (long) $C0FFF8.l [Writes: Accumulator] [Flags: NZ]
	sbc $1CFF07.l,X		; FF 07 FF 1C ; Subtract with carry (long,X) $1CFF07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($F7F7.w,X)		; FC F7 F7 ; Jump to subroutine indirect indexed ($F7F7.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $78789F.l,X		; 9F 9F 78 78 ; Store accumulator (long,X) $78789F.l,X [Reads: Accumulator, X Index]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: NCZ]
	jsl $031400.l		; 22 00 14 03 ; Jump to subroutine long $031400.l [Writes: Stack Pointer] [Flow: call]
	ora $FFFF7F.l		; 0F 7F FF FF ; OR accumulator with memory (long) $FFFF7F.l [Writes: Accumulator] [Flags: NZ]
	ora $FF03FF.l,X		; 1F FF 03 FF ; Logical OR long $FF03FF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	adc $F3DFDF.l,X		; 7F DF DF F3 ; Add long $F3DFDF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($3C.b,S),Y		; F3 3C ; Subtract with carry (stack relative indirect indexed) ($3C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	bit $0F0F.w,X		; 3C 0F 0F ; Test bits $0F0F.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jsl $800000.l		; 22 00 00 80 ; Jump to subroutine long $800000.l [Writes: Stack Pointer] [Flow: call]
	sta $34.b,S		; 83 34 ; Store accumulator (stack relative) $34.b,S [Reads: Stack Pointer, Accumulator]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $FE.b		; 06 FE ; Arithmetic shift left $FE.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	ora $E3.b,S		; 03 E3 ; OR accumulator with stack relative $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$E7.b]		; 27 E7 ; AND accumulator with memory (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$C7.b]		; 47 C7 ; Exclusive OR accumulator with memory (long) [$C7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1F1F8F.l		; 8F 8F 1F 1F ; Store accumulator (long) $1F1F8F.l [Reads: Accumulator]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $38181C.l		; 0F 1C 18 38 ; OR accumulator with memory (long) $38181C.l [Writes: Accumulator] [Flags: NZ]
	.db $70, $E0		; 70 E0 ; Branch if overflow set to $70, $E0 [Flow: branch]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$F9.b		; 09 F9 ; Logical OR #$F9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($F3.b,S),Y		; 13 F3 ; OR accumulator (stack relative indirect indexed) ($F3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $27.b,S		; 43 27 ; Exclusive OR accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc [$0B.b]		; E7 0B ; Subtract with carry (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor $8F8ECF.l		; 4F CF 8E 8F ; Exclusive OR accumulator with memory (long) $8F8ECF.l [Writes: Accumulator] [Flags: NZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $30, $70		; 30 70 ; Branch if minus to $30, $70 [Flow: branch]
	eor $9D.b,S		; 43 9D ; Exclusive OR accumulator with stack relative $9D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $05.b		; E5 05 ; Subtract $05.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$F5.b		; C9 F5 ; Compare #$F5.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $EE.b,X		; F6 EE ; Increment memory $EE.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc ($45.b)		; F2 45 ; Subtract with carry (indirect) ($45.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx $FA.b		; E4 FA ; Compare $FA.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	jsl $012402.l		; 22 02 24 01 ; Jump to subroutine long $012402.l [Writes: Stack Pointer] [Flow: call]
	ora ($EA.b,X)		; 01 EA ; Logical OR ($EA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $43.b,X		; F6 43 ; Increment memory $43.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $43F2.w		; EE F2 43 ; Increment $43F2.w [Flags: NZ]
	dec $45F2.w		; CE F2 45 ; Decrement $45F2.w [Flags: NZ]
	dec $27E2.w,X		; DE E2 27 ; Decrement memory $27E2.w,X [Reads: X Index] [Flags: NZ]
	ora ($4B.b,X)		; 01 4B ; Logical OR ($4B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc [$F8.b]		; E7 F8 ; Subtract with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $C7.b,S		; 03 C7 ; OR accumulator with stack relative $C7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta [$F8.b]		; 87 F8 ; Store accumulator (long) [$F8.b] [Reads: Direct Page, Accumulator]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $78.b,S		; 83 78 ; Store accumulator (stack relative) $78.b,S [Reads: Stack Pointer, Accumulator]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($3E.b),Y		; D1 3E ; Compare accumulator ($3E.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc ($1E.b,X)		; E1 1E ; Subtract with carry ($1E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($8C.b,S),Y		; 73 8C ; Add with carry (stack relative indirect indexed) ($8C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $3F.b,S		; 43 3F ; Exclusive OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: NCZ]
	adc $002780.l,X		; 7F 80 27 00 ; Add long $002780.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $38.b,S		; 03 38 ; OR accumulator with stack relative $38.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $437F72.l,X		; 3F 72 7F 43 ; AND accumulator with memory (long,X) $437F72.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $FD		; 90 FD ; Branch if carry clear to $90, $FD [Flow: branch]
	ora #$F4.b		; 09 F4 ; Logical OR #$F4.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FBC2.w,X		; FD C2 FB ; Subtract with carry $FBC2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	jsl $042202.l		; 22 02 22 04 ; Jump to subroutine long $042202.l [Writes: Stack Pointer] [Flow: call]
	and $FF.b,X		; 35 FF ; Logical AND $FF.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$7F.b		; 09 7F ; Logical OR #$7F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and $FCFBF8.l,X		; 3F F8 FB FC ; AND accumulator with memory (long,X) $FCFBF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0EFE.w,X		; 1D FE 0E ; OR accumulator with memory $0EFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $3F440F.l,X		; FF 0F 44 3F ; Subtract with carry (long,X) $3F440F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $3FC104.l		; CF 04 C1 3F ; Compare accumulator (long) $3FC104.l [Reads: Accumulator] [Flags: NCZ]
	cpy #$FC.b		; C0 FC ; Compare #$FC.b with Y register [Reads: Y Index] [Flags: NCZ]
	inc $FF25.w,X		; FE 25 FF ; Increment memory $FF25.w,X [Reads: X Index] [Flags: NZ]
	mvp $01,$FE		; 44 FE 01 ; Move block positive $01,$FE [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cop $81.b		; 02 81 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $43F1.w,X		; FE F1 43 ; Increment memory $43F1.w,X [Reads: X Index] [Flags: NZ]
	sbc $FF29F0.l,X		; FF F0 29 FF ; Subtract with carry (long,X) $FF29F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $7F.b,S		; 03 7F ; OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $4507F8.l,X		; 3F F8 07 45 ; AND accumulator with memory (long,X) $4507F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: NCZ]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: NCZ]
	sbc $08FF29.l,X		; FF 29 FF 08 ; Subtract with carry (long,X) $08FF29.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $18FF.w,X		; 3C FF 18 ; Test bits $18FF.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $817E00.l,X		; FF 00 7E 81 ; Subtract with carry (long,X) $817E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $44C3.w,X		; 3C C3 44 ; Test bits $44C3.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $FFC014.l,X		; FF 14 C0 FF ; Subtract with carry (long,X) $FFC014.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $EF1BF0.l		; 8F F0 1B EF ; Store accumulator (long) $EF1BF0.l [Reads: Accumulator]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	cmp $3FD035.l		; CF 35 D0 3F ; Compare accumulator (long) $3FD035.l [Reads: Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $E0DFC0.l,X		; BF C0 DF E0 ; Load long $E0DFC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsl $C00E00.l		; 22 00 0E C0 ; Jump to subroutine long $C00E00.l [Writes: Stack Pointer] [Flow: call]
	and $AF0FF0.l,X		; 3F F0 0F AF ; AND accumulator with memory (long,X) $AF0FF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $38		; B0 38 ; Branch if carry set to $B0, $38 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $DFFFCF.l		; EF CF FF DF ; Subtract with carry (long) $DFFFCF.l [Writes: Accumulator] [Flags: NCVZ]
	and $223FC0.l,X		; 3F C0 3F 22 ; AND accumulator with memory (long,X) $223FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $C000C0.l,X		; DF C0 00 C0 ; Compare accumulator (long,X) $C000C0.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $00FF47.l,X		; FF 47 FF 00 ; Subtract with carry (long,X) $00FF47.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $F3.b,S		; 03 F3 ; OR accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $03FC.w		; 0C FC 03 ; Test and set bits $03FC.w [Reads: Accumulator] [Flags: Z]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $002507.l,X		; 1F 07 25 00 ; Logical OR long $002507.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $C03F30.l		; CF 30 3F C0 ; Compare accumulator (long) $C03F30.l [Reads: Accumulator] [Flags: NCZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpx #$25.b		; E0 25 ; Compare #$25.b with X register [Reads: X Index] [Flags: NCZ]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$F4.b],Y		; 37 F4 ; AND accumulator with memory (long indexed) [$F4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$67.b],Y		; 17 67 ; OR accumulator with memory (long indexed) [$67.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpx $63.b		; E4 63 ; Compare $63.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $EB.b		; E4 EB ; Compare $EB.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $CCCB.w		; EC CB CC ; Compare $CCCB.w with X register [Reads: X Index] [Flags: NCZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sty $1C13.w		; 8C 13 1C ; Store Y register to $1C13.w [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $30		; 10 30 ; Branch if plus to $10, $30 [Flow: branch]
	.db $70, $E0		; 70 E0 ; Branch if overflow set to $70, $E0 [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: NCZ]
	eor $E0.b,S		; 43 E0 ; Exclusive OR accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0FF001.l,X		; 1F 01 F0 0F ; Logical OR long $0FF001.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $F8.b,S		; 43 F8 ; Exclusive OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cmp [$25.b]		; C7 25 ; Compare accumulator (long) [$25.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $1F3F07.l,X		; FF 07 3F 1F ; Subtract with carry (long,X) $1F3F07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F43F0.l		; 0F F0 43 1F ; OR accumulator with memory (long) $1F43F0.l [Writes: Accumulator] [Flags: NZ]
	cpx #$43.b		; E0 43 ; Compare #$43.b with X register [Reads: X Index] [Flags: NCZ]
	and $7C01C0.l,X		; 3F C0 01 7C ; AND accumulator with memory (long,X) $7C01C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $24.b,S		; 83 24 ; Store accumulator (stack relative) $24.b,S [Reads: Stack Pointer, Accumulator]
	sbc $FCFE06.l,X		; FF 06 FE FC ; Subtract with carry (long,X) $FCFE06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF24F0.l		; 0F F0 24 FF ; OR accumulator with memory (long) $FF24F0.l [Writes: Accumulator] [Flags: NZ]
	cpx #$26.b		; E0 26 ; Compare #$26.b with X register [Reads: X Index] [Flags: NCZ]
	ora $DF0007.l		; 0F 07 00 DF ; OR accumulator with memory (long) $DF0007.l [Writes: Accumulator] [Flags: NZ]
	ora $BD5FDF.l,X		; 1F DF 5F BD ; Logical OR long $BD5FDF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $7F7F.w,X		; BD 7F 7F ; Load $7F7F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $E6DD.w,X		; DD DD E6 ; Compare accumulator $E6DD.w,X [Reads: X Index] [Flags: NCZ]
	sbc [$D8.b]		; E7 D8 ; Subtract with carry (long) [$D8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dec $B9A1.w,X		; DE A1 B9 ; Decrement memory $B9A1.w,X [Reads: X Index] [Flags: NZ]
	and $FF7F3F.l,X		; 3F 3F 7F FF ; AND accumulator with memory (long,X) $FF7F3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $E1F8.w,X		; FE F8 E1 ; Increment memory $E1F8.w,X [Reads: X Index] [Flags: NZ]
	dec $FF.b		; C6 FF ; Decrement $FF.b [Reads: Direct Page] [Flags: NZ]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$4F.b		; E0 4F ; Compare #$4F.b with X register [Reads: X Index] [Flags: NCZ]
	.db $70, $27		; 70 27 ; Branch if overflow set to $70, $27 [Flow: branch]
	clv		; B8 ; Clear overflow flag [Flags: V]
	sta ($DC.b,S),Y		; 93 DC ; Store accumulator (stack relative indirect indexed) ($DC.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp #$EE.b		; C9 EE ; Compare #$EE.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $E5.b,S		; 43 E5 ; Exclusive OR accumulator with stack relative $E5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $1F.b,X		; F6 1F ; Increment memory $1F.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora $418307.l		; 0F 07 83 41 ; OR accumulator with memory (long) $418307.l [Writes: Accumulator] [Flags: NZ]
	jsr $C890.w		; 20 90 C8 ; Jump to subroutine at $C890.w [Writes: Stack Pointer] [Flow: call]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $B0, $BF		; B0 BF ; Branch if carry set to $B0, $BF [Flow: branch]
	sbc ($F3.b,S),Y		; F3 F3 ; Subtract with carry (stack relative indirect indexed) ($F3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F7FD.w,X		; FD FD F7 ; Subtract with carry $F7FD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$1F.b],Y		; F7 1F ; Subtract with carry (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $EFFBFB.l,X		; 1F FB FB EF ; Logical OR long $EFFBFB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $C0B8B8.l		; EF B8 B8 C0 ; Subtract with carry (long) $C0B8B8.l [Writes: Accumulator] [Flags: NCVZ]
	jsr ($F8FE.w,X)		; FC FE F8 ; Jump to subroutine indirect indexed ($F8FE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	ora $34437F.l,X		; 1F 7F 43 34 ; Logical OR long $34437F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy $DA13.w		; CC 13 DA ; Compare $DA13.w with Y register [Reads: Y Index] [Flags: NCZ]
	inc $ED.b		; E6 ED ; Increment $ED.b [Reads: Direct Page] [Flags: NZ]
	sbc ($F6.b,S),Y		; F3 F6 ; Subtract with carry (stack relative indirect indexed) ($F6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DCDB.w,Y		; F9 DB DC ; Subtract with carry $DCDB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $031C.w		; 1C 1C 03 ; Test and reset bits $031C.w [Reads: Accumulator] [Flags: Z]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$F8.b		; E0 F8 ; Compare #$F8.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $23C025.l,X		; FF 25 C0 23 ; Subtract with carry (long,X) $23C025.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$05.b		; E0 05 ; Compare #$05.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp $3F22FF.l		; CF FF 22 3F ; Compare accumulator (long) $3F22FF.l [Reads: Accumulator] [Flags: NCZ]
	ora ($1F.b,S),Y		; 13 1F ; OR accumulator (stack relative indirect indexed) ($1F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00070F.l,X		; 1F 0F 07 00 ; Logical OR long $00070F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $06F3.w		; 0C F3 06 ; Test and set bits $06F3.w [Reads: Accumulator] [Flags: Z]
	sbc $8976.w,Y		; F9 76 89 ; Subtract with carry $8976.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $18.b		; C5 18 ; Compare $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc [$00.b]		; E7 00 ; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF2800.l,X		; FF 00 28 FF ; Subtract with carry (long,X) $FF2800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor #$00.b		; 49 00 ; Exclusive OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FE0105.l,X		; FF 05 01 FE ; Subtract with carry (long,X) $FE0105.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F.b		; 05 1F ; Logical OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$3F.b		; E0 3F ; Compare #$3F.b with X register [Reads: X Index] [Flags: NCZ]
	cmp ($7F.b,X)		; C1 7F ; Compare accumulator ($7F.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sta [$46.b]		; 87 46 ; Store accumulator (long) [$46.b] [Reads: Direct Page, Accumulator]
	adc $87028F.l,X		; 7F 8F 02 87 ; Add long $87028F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF27C3.l,X		; 3F C3 27 FF ; AND accumulator with memory (long,X) $FF27C3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $62.b		; 84 62 ; Store Y register to $62.b [Reads: Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($43.b,X)		; E1 43 ; Subtract with carry ($43.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0F01E3.l,X		; 1F E3 01 0F ; Logical OR long $0F01E3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($43.b),Y		; F1 43 ; Subtract with carry ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $E31C09.l,X		; FF 09 1C E3 ; Subtract with carry (long,X) $E31C09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $FFC1.w,X		; 3E C1 FF ; Rotate left $FFC1.w,X [Reads: X Index] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FF273C.l,X		; FF 3C 27 FF ; Subtract with carry (long,X) $FF273C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F3		; F0 F3 ; Branch if equal to $F0, $F3 [Flow: branch]
	tsb $FF43.w		; 0C 43 FF ; Test and set bits $FF43.w [Reads: Accumulator] [Flags: Z]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$E7.b]		; 07 E7 ; OR accumulator with memory (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp $00FF30.l		; CF 30 FF 00 ; Compare accumulator (long) $00FF30.l [Reads: Accumulator] [Flags: NCZ]
	sbc $1B0028.l,X		; FF 28 00 1B ; Subtract with carry (long,X) $1B0028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($3C.b,S),Y		; 33 3C ; AND accumulator (stack relative indirect indexed) ($3C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $7C.b,S		; 63 7C ; Add with carry (stack relative) $7C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	dec $F9.b		; C6 F9 ; Decrement $F9.b [Reads: Direct Page] [Flags: NZ]
	stx $1CF1.w		; 8E F1 1C ; Store X register to $1CF1.w [Reads: X Index]
	sbc $38.b,S		; E3 38 ; Subtract stack-relative $38.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp [$70.b]		; C7 70 ; Compare accumulator (long) [$70.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $C11FE0.l		; 8F E0 1F C1 ; Store accumulator (long) $C11FE0.l [Reads: Accumulator]
	sta ($03.b,X)		; 81 03 ; Store accumulator ($03.b,X) [Reads: Direct Page, Accumulator, X Index]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $D07F1F.l		; 0F 1F 7F D0 ; OR accumulator with memory (long) $D07F1F.l [Writes: Accumulator] [Flags: NZ]
	sbc $476F50.l		; EF 50 6F 47 ; Subtract with carry (long) $476F50.l [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc [$43.b]		; 67 43 ; Add with carry (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $6F		; 10 6F ; Branch if plus to $10, $6F [Flow: branch]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $8F.b		; 26 8F ; Rotate left $8F.b [Reads: Direct Page] [Flags: NCZ]
	cpx #$67.b		; E0 67 ; Compare #$67.b with X register [Reads: X Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sta [$F3.b]		; 87 F3 ; Store accumulator (long) [$F3.b] [Reads: Direct Page, Accumulator]
	ora $E81CE4.l		; 0F E4 1C E8 ; OR accumulator with memory (long) $E81CE4.l [Writes: Accumulator] [Flags: NZ]
	ora $33D1.w,Y		; 19 D1 33 ; OR accumulator with memory $33D1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 8
	sep #$26		; E2 26
	sta $45.b		; 85 45 ; Store accumulator to $45.b [Reads: Accumulator]
	ora ($93.b,S),Y		; 13 93 ; OR accumulator (stack relative indirect indexed) ($93.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	cmp $C6.b,S		; C3 C6 ; Compare accumulator (stack relative) $C6.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sty $3B19.w		; 8C 19 3B ; Store Y register to $3B19.w [Reads: Y Index]
	adc $F3F807.l,X		; 7F 07 F8 F3 ; Add long $F3F807.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0F08.w,X)		; FC 08 0F ; Jump to subroutine indirect indexed ($0F08.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $F3.b,S		; 03 F3 ; OR accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FC		; F0 FC ; Branch if equal to $F0, $FC [Flow: branch]
	pea $7BF7.w		; F4 F7 7B ; Push absolute address $7BF7.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$00DC]		; DC DC 00 ; Jump long indirect [$00DC] [Flow: jump]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $F803.w		; 0C 03 F8 ; Test and set bits $F803.w [Reads: Accumulator] [Flags: Z]
	jsr ($43FF.w,X)		; FC FF 43 ; Jump to subroutine indirect indexed ($43FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $8E.b,S		; 63 8E ; Add with carry (stack relative) $8E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp $319F18.l		; CF 18 9F 31 ; Compare accumulator (long) $319F18.l [Reads: Accumulator] [Flags: NCZ]
	ldx $BC33.w,Y		; BE 33 BC ; Load X register $BC33.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	and [$38.b]		; 27 38 ; AND accumulator with memory (long) [$38.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $F08F70.l		; 4F 70 8F F0 ; Exclusive OR accumulator with memory (long) $F08F70.l [Writes: Accumulator] [Flags: NZ]
	stz $6030.w		; 9C 30 60 ; Store zero to $6030.w
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cmp ($83.b,X)		; C1 83 ; Compare accumulator ($83.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	ora [$46.b]		; 07 46 ; OR accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$F3.b],Y		; 57 F3 ; Exclusive OR accumulator with memory (long indexed) [$F3.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($FFFC.w,X)		; FC FC FF ; Jump to subroutine indirect indexed ($FFFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $7FFD.w,X		; FD FD 7F ; Subtract with carry $7FFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $CFBDBD.l,X		; 7F BD BD CF ; Add long $CFBDBD.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $F3E4E8.l		; CF E8 E4 F3 ; Compare accumulator (long) $F3E4E8.l [Reads: Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc $7FFF.w,X		; FE FF 7F ; Increment memory $7FFF.w,X [Reads: X Index] [Flags: NZ]
	and $F9ECEC.l,X		; 3F EC EC F9 ; AND accumulator with memory (long,X) $F9ECEC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $E3E3.w,Y		; F9 E3 E3 ; Subtract with carry $E3E3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $CE.b,S		; 43 CE ; Exclusive OR accumulator with stack relative $CE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $8F8C0F.l		; CF 0F 8C 8F ; Compare accumulator (long) $8F8C0F.l [Reads: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $9CC6F3.l,X		; 9F F3 C6 9C ; Store accumulator (long,X) $9CC6F3.l,X [Reads: Accumulator, X Index]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $70, $60		; 70 60 ; Branch if overflow set to $70, $60 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $FA.b,S		; 83 FA ; Store accumulator (stack relative) $FA.b,S [Reads: Stack Pointer, Accumulator]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($DFFC.w,X)		; FC FC DF ; Jump to subroutine indirect indexed ($DFFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $87FF8F.l,X		; FF 8F FF 87 ; Subtract with carry (long,X) $87FF8F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0F9FFF.l,X		; FF FF 9F 0F ; Subtract with carry (long,X) $0F9FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $C70B00.l		; 22 00 0B C7 ; Jump to subroutine long $C70B00.l [Writes: Stack Pointer] [Flow: call]
	sbc $EDF7CB.l,X		; FF CB F7 ED ; Subtract with carry (long,X) $EDF7CB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($E4.b,S),Y		; F3 E4 ; Subtract with carry (stack relative indirect indexed) ($E4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc [$F8.b]		; E7 F8 ; Subtract with carry (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $F9.b		; E6 F9 ; Increment $F9.b [Reads: Direct Page] [Flags: NZ]
	eor $E5.b,S		; 43 E5 ; Exclusive OR accumulator with stack relative $E5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	mvp $10,$FF		; 44 FF 10 ; Move block positive $10,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $20.b,S		; 43 20 ; Exclusive OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FF4043.l,X		; FF 43 40 FF ; Subtract with carry (long,X) $FF4043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $002780.l,X		; FF 80 27 00 ; Subtract with carry (long,X) $002780.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $7F.b,S		; 03 7F ; OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $80, $FF		; 80 FF ; Branch always to $80, $FF [Flow: branch]
	ora ($46.b,X)		; 01 46 ; Logical OR ($46.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $3F431F.l,X		; FF 1F 43 3F ; Subtract with carry (long,X) $3F431F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $277F00.l,X		; FF 00 7F 27 ; Subtract with carry (long,X) $277F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E31F45.l,X		; FF 45 1F E3 ; Subtract with carry (long,X) $E31F45.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $7F.b,S		; C3 7F ; Compare accumulator (stack relative) $7F.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator]
	ora $02A883.l		; 0F 83 A8 02 ; OR accumulator with memory (long) $02A883.l [Writes: Accumulator] [Flags: NZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $7FC13E.l,X		; FF 3E C1 7F ; Subtract with carry (long,X) $7FC13E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $AC833E.l,X		; FF 3E 83 AC ; Subtract with carry (long,X) $AC833E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $015085.l,X		; FF 85 50 01 ; Subtract with carry (long,X) $015085.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $43FF2B.l		; 0F 2B FF 43 ; OR accumulator with memory (long) $43FF2B.l [Writes: Accumulator] [Flags: NZ]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $06.b		; 02 06 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $840E.w,Y		; F9 0E 84 ; Subtract with carry $840E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$01.b],Y		; B7 01 ; Load accumulator (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $223FC0.l		; 0F C0 3F 22 ; OR accumulator with memory (long) $223FC0.l [Writes: Accumulator] [Flags: NZ]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cmp $01.b,S		; C3 01 ; Compare accumulator (stack relative) $01.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $03.b,S		; 43 03 ; Exclusive OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($048B.w,X)		; FC 8B 04 ; Jump to subroutine indirect indexed ($048B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($84.b,X)		; 01 84 ; Logical OR ($84.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,S),Y		; 13 03 ; OR accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $79.b,S		; 03 79 ; OR accumulator with stack relative $79.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $FEF1.w,X		; 7E F1 FE ; Rotate right $FEF1.w,X [Reads: X Index] [Flags: NCZ]
	eor $E3.b,S		; 43 E3 ; Exclusive OR accumulator with stack relative $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($C345.w,X)		; FC 45 C3 ; Jump to subroutine indirect indexed ($C345.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($C702.w,X)		; FC 02 C7 ; Jump to subroutine indirect indexed ($C702.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $27CF30.l		; 4F 30 CF 27 ; Exclusive OR accumulator with memory (long) $27CF30.l [Writes: Accumulator] [Flags: NZ]
	ora $6DA545.l,X		; 1F 45 A5 6D ; Logical OR long $6DA545.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$AA.b		; 09 AA ; Logical OR #$AA.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $7795.w		; 6E 95 77 ; Rotate right $7795.w [Flags: NCZ]
	cmp ($33.b),Y		; D1 33 ; Compare accumulator ($33.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp $E93B.w,Y		; D9 3B E9 ; Compare accumulator $E93B.w,Y [Reads: Y Index] [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $110C13.l		; 22 13 0C 11 ; Jump to subroutine long $110C13.l [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sty $C484.w		; 8C 84 C4 ; Store Y register to $C484.w [Reads: Y Index]
	and $7DC3.w,X		; 3D C3 7D ; AND accumulator with memory $7DC3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $EB.b		; 85 EB ; Store accumulator to $EB.b [Reads: Accumulator]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	dec $36.b,X		; D6 36 ; Decrement memory $36.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	eor [$A5.b]		; 47 A5 ; Exclusive OR accumulator with memory (long) [$A5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $F803.w		; 6D 03 F8 ; Add $F803.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $C4.b,S		; E3 C4 ; Subtract stack-relative $C4.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	bit #$23.b		; 89 23 ; Test bits #$23.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora ($E0.b,S),Y		; 13 E0 ; OR accumulator (stack relative indirect indexed) ($E0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rol $8F.b		; 26 8F ; Rotate left $8F.b [Reads: Direct Page] [Flags: NCZ]
	sta $E97373.l		; 8F 73 73 E9 ; Store accumulator (long) $E97373.l [Reads: Accumulator]
	adc $3CF4.w,Y		; 79 F4 3C ; Add $3CF4.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	wai		; CB ; Wait for interrupt
	and $E817F4.l		; 2F F4 17 E8 ; AND accumulator with memory (long) $E817F4.l [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc [$8F.b],Y		; 77 8F ; Add with carry (long indexed) [$8F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $83078F.l,X		; FF 8F 07 83 ; Subtract with carry (long,X) $83078F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $90, $C8		; 90 C8 ; Branch if carry clear to $90, $C8 [Flow: branch]
	cmp [$E0.b]		; C7 E0 ; Compare accumulator (long) [$E0.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $EFEFBF.l,X		; BF BF EF EF ; Load long $EFEFBF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$BF.b		; A0 BF ; Load #$BF.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	and [$E7.b]		; 27 E7 ; AND accumulator with memory (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $22FC1F.l,X		; 1F 1F FC 22 ; Logical OR long $22FC1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $C0F005.l,X		; FF 05 F0 C0 ; Subtract with carry (long,X) $C0F005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $00E018.l		; 0F 18 E0 00 ; OR accumulator with memory (long) $00E018.l [Writes: Accumulator] [Flags: NZ]
	sta $50.b,S		; 83 50 ; Store accumulator (stack relative) $50.b,S [Reads: Stack Pointer, Accumulator]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($7F83.w,X)		; 7C 83 7F ; Jump indirect indexed to ($7F83.w,X) [Reads: X Index] [Flow: jump]
	.db $80, $3F		; 80 3F ; Branch always to $80, $3F [Flow: branch]
	cpy #$1F.b		; C0 1F ; Compare #$1F.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr ($E0E0.w,X)		; FC E0 E0 ; Jump to subroutine indirect indexed ($E0E0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	jsr ($FF22.w,X)		; FC 22 FF ; Jump to subroutine indirect indexed ($FF22.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $D1FF83.l		; 0F 83 FF D1 ; OR accumulator with memory (long) $D1FF83.l [Writes: Accumulator] [Flags: NZ]
	sbc $CCE7D8.l		; EF D8 E7 CC ; Subtract with carry (long) $CCE7D8.l [Writes: Accumulator] [Flags: NCVZ]
	sbc ($C6.b,S),Y		; F3 C6 ; Subtract with carry (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8C7.w,Y		; F9 C7 F8 ; Subtract with carry $F8C7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $E1DFF0.l		; CF F0 DF E1 ; Compare accumulator (long) $E1DFF0.l [Reads: Accumulator] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF2C00.l,X		; FF 00 2C FF ; Subtract with carry (long,X) $FF2C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$8F.b		; 09 8F ; Logical OR #$8F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F6767.l		; 8F 67 67 0F ; Store accumulator (long) $0F6767.l [Reads: Accumulator]
	ora $FC7676.l		; 0F 76 76 FC ; OR accumulator with memory (long) $FC7676.l [Writes: Accumulator] [Flags: NZ]
	jsr ($FF25.w,X)		; FC 25 FF ; Jump to subroutine indirect indexed ($FF25.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $F7.b		; 04 F7 ; Test and set bits $F7.b [Reads: Accumulator] [Flags: Z]
	sta $B9FFFF.l		; 8F FF FF B9 ; Store accumulator (long) $B9FFFF.l [Reads: Accumulator]
	jmp $FF00.w		; 4C 00 FF ; Jump to $FF00.w [Flow: jump]
	cop $8D.b		; 02 8D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FF00.w		; 4E 00 FF ; Logical shift right $FF00.w [Flags: NCZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FE.b		; 45 FE ; Exclusive OR $FE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FF0043.l,X		; FF 43 00 FF ; Subtract with carry (long,X) $FF0043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $78.b,S		; 83 78 ; Store accumulator (stack relative) $78.b,S [Reads: Stack Pointer, Accumulator]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($0103.w,X)		; FC 03 01 ; Jump to subroutine indirect indexed ($0103.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $2D01.w,X		; FE 01 2D ; Increment memory $2D01.w,X [Reads: X Index] [Flags: NZ]
	sbc $FF7E03.l,X		; FF 03 7E FF ; Subtract with carry (long,X) $FF7E03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $006083.l,X		; FF 83 60 00 ; Subtract with carry (long,X) $006083.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$25.b]		; 07 25 ; OR accumulator with memory (long) [$25.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FF1E08.l,X		; FF 08 1E FF ; Subtract with carry (long,X) $FF1E08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $80FF.w		; 0C FF 80 ; Test and set bits $80FF.w [Reads: Accumulator] [Flags: Z]
	adc $FF1FE0.l,X		; 7F E0 1F FF ; Add long $FF1FE0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora ($80.b),Y		; 11 80 ; OR accumulator with memory ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$87.b		; E0 87 ; Compare #$87.b with X register [Reads: X Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $E11EF0.l		; 0F F0 1E E1 ; OR accumulator with memory (long) $E11EF0.l [Writes: Accumulator] [Flags: NZ]
	rol $7CC1.w,X		; 3E C1 7C ; Rotate left $7CC1.w,X [Reads: X Index] [Flags: NCZ]
	sta $78.b,S		; 83 78 ; Store accumulator (stack relative) $78.b,S [Reads: Stack Pointer, Accumulator]
	sta [$F0.b]		; 87 F0 ; Store accumulator (long) [$F0.b] [Reads: Direct Page, Accumulator]
	ora $841FE0.l		; 0F E0 1F 84 ; OR accumulator with memory (long) $841FE0.l [Writes: Accumulator] [Flags: NZ]
	ora ($03.b)		; 12 03 ; OR accumulator with memory (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $3F.b		; 04 3F ; Test and set bits $3F.b [Reads: Accumulator] [Flags: Z]
	adc $CF30FF.l,X		; 7F FF 30 CF ; Add long $CF30FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$60.b]		; 47 60 ; Exclusive OR accumulator with memory (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $BF4007.l,X		; 9F 07 40 BF ; Store accumulator (long,X) $BF4007.l,X [Reads: Accumulator, X Index]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $7F		; 80 7F ; Branch always to $80, $7F [Flow: branch]
	ora $3F231F.l,X		; 1F 1F 23 3F ; Logical OR long $3F231F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($7F.b,X)		; 01 7F ; Logical OR ($7F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $1BE945.l,X		; 7F 45 E9 1B ; Add long $1BE945.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $D2.b,S		; 03 D2 ; OR accumulator with stack relative $D2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rol $A1.b,X		; 36 A1 ; Rotate left $A1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc $45.b		; 65 45 ; Add $45.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda $6D.b		; A5 6D ; Load $6D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $8901C4.l		; 22 C4 01 89 ; Jump to subroutine long $8901C4.l [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $A54313.l		; 22 13 43 A5 ; Jump to subroutine long $A54313.l [Writes: Stack Pointer] [Flow: call]
	adc $A21B.w		; 6D 1B A2 ; Add $A21B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ror $D0.b		; 66 D0 ; Rotate right $D0.b [Reads: Direct Page] [Flags: NCZ]
	and ($68.b)		; 32 68 ; AND accumulator with memory (indirect) ($68.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $C539.w,Y		; 99 39 C5 ; Store accumulator to $C539.w,Y [Reads: Y Index, Accumulator]
	asl $0FE2.w,X		; 1E E2 0F ; Arithmetic shift left $0FE2.w,X [Reads: X Index] [Flags: NCZ]
	sbc ($13.b),Y		; F1 13 ; Subtract with carry ($13.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($19.b,S),Y		; 13 19 ; OR accumulator (stack relative indirect indexed) ($19.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $E2C6.w		; 8D C6 E2 ; Store accumulator to $E2C6.w [Reads: Accumulator]
	sbc $83FC.w,Y		; F9 FC 83 ; Subtract with carry $83FC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $83		; 30 83 ; Branch if minus to $30, $83 [Flow: branch]
	jsr $0883.w		; 20 83 08 ; Jump to subroutine at $0883.w [Writes: Stack Pointer] [Flow: call]
	sta $18.b,S		; 83 18 ; Store accumulator (stack relative) $18.b,S [Reads: Stack Pointer, Accumulator]
	sta [$10.b]		; 87 10 ; Store accumulator (long) [$10.b] [Reads: Direct Page, Accumulator]
	ora $27.b		; 05 27 ; Logical OR $27.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($F005.w,X)		; 7C 05 F0 ; Jump indirect indexed to ($F005.w,X) [Reads: X Index] [Flow: jump]
	sbc $0FFC03.l,X		; FF 03 FC 0F ; Subtract with carry (long,X) $0FFC03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $45		; F0 45 ; Branch if equal to $F0, $45 [Flow: branch]
	sbc $F80300.l,X		; FF 00 03 F8 ; Subtract with carry (long,X) $F80300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$E0.b]		; 07 E0 ; OR accumulator with memory (long) [$E0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $010022.l,X		; 1F 22 00 01 ; Logical OR long $010022.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $0F.b,S		; 03 0F ; OR accumulator with stack relative $0F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $4885FF.l		; 22 FF 85 48 ; Jump to subroutine long $4885FF.l [Writes: Stack Pointer] [Flow: call]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	eor $F8.b,S		; 43 F8 ; Exclusive OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($2503.w,X)		; FC 03 25 ; Jump to subroutine indirect indexed ($2503.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $3F7F01.l,X		; FF 01 7F 3F ; Subtract with carry (long,X) $3F7F01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $FF00.w		; 4E 00 FF ; Logical shift right $FF00.w [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $BFBF09.l,X		; FF 09 BF BF ; Subtract with carry (long,X) $BFBF09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FCFCFF.l,X		; FF FF FC FC ; Subtract with carry (long,X) $FCFCFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F1.b),Y		; F1 F1 ; Subtract with carry ($F1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FF2FDF.l,X		; DF DF 2F FF ; Compare accumulator (long,X) $FF2FDF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta $7999.w,Y		; 99 99 79 ; Store accumulator to $7999.w,Y [Reads: Y Index, Accumulator]
	adc $7171.w,Y		; 79 71 71 ; Add $7171.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	inc $23FE.w,X		; FE FE 23 ; Increment memory $23FE.w,X [Reads: X Index] [Flags: NZ]
	sbc $FEFE09.l,X		; FF 09 FE FE ; Subtract with carry (long,X) $FEFE09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($0081.w,X)		; 7C 81 00 ; Jump indirect indexed to ($0081.w,X) [Reads: X Index] [Flow: jump]
	sbc $FE936C.l,X		; FF 6C 93 FE ; Subtract with carry (long,X) $FE936C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($49.b,X)		; 01 49 ; Logical OR ($49.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FF2700.l,X		; FF 00 27 FF ; Subtract with carry (long,X) $FF2700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $3FC043.l,X		; FF 43 C0 3F ; Subtract with carry (long,X) $3FC043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($4303.w,X)		; FC 03 43 ; Jump to subroutine indirect indexed ($4303.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FF2700.l,X		; FF 00 27 FF ; Subtract with carry (long,X) $FF2700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FC0FF0.l,X		; FF F0 0F FC ; Subtract with carry (long,X) $FC0FF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $49.b,S		; 03 49 ; OR accumulator with stack relative $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FF2800.l,X		; FF 00 28 FF ; Subtract with carry (long,X) $FF2800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $FF00.w		; 4E 00 FF ; Logical shift right $FF00.w [Flags: NCZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $40CF03.l,X		; FF 03 CF 40 ; Subtract with carry (long,X) $40CF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $E74548.l		; CF 48 45 E7 ; Compare accumulator (long) $E74548.l [Reads: Accumulator] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($CF.b,X)		; 01 CF ; Logical OR ($CF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $CF.b,S		; 43 CF ; Exclusive OR accumulator with stack relative $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora ($37.b,X)		; 01 37 ; Logical OR ($37.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($22.b,S),Y		; 33 22 ; AND accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $33.b		; 06 33 ; Arithmetic shift left $33.b [Reads: Direct Page] [Flags: NCZ]
	and [$37.b],Y		; 37 37 ; AND accumulator with memory (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $01FE00.l,X		; FF 00 FE 01 ; Subtract with carry (long,X) $01FE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FC.b,S		; 43 FC ; Exclusive OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	sbc ($0E.b),Y		; F1 0E ; Subtract with carry ($0E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $70.b		; 06 70 ; Arithmetic shift left $70.b [Reads: Direct Page] [Flags: NCZ]
	sbc $3FFF78.l,X		; FF 78 FF 3F ; Subtract with carry (long,X) $3FFF78.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF441F.l,X		; FF 1F 44 FF ; Subtract with carry (long,X) $FF441F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8F0300.l,X		; FF 00 03 8F ; Subtract with carry (long,X) $8F0300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$C0.b]		; 87 C0 ; Store accumulator (long) [$C0.b] [Reads: Direct Page, Accumulator]
	cpx #$23.b		; E0 23 ; Compare #$23.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $FF0002.l,X		; FF 02 00 FF ; Subtract with carry (long,X) $FF0002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0043.l,X		; FF 43 00 FF ; Subtract with carry (long,X) $FF0043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$2B.b		; E0 2B ; Compare #$2B.b with X register [Reads: X Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	pei ($34.b)		; D4 34 ; Push effective indirect address ($34.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ldy $64.b		; A4 64 ; Load $64.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp [$47.b]		; C7 47 ; Compare accumulator (long) [$47.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $5FDB4F.l		; CF 4F DB 5F ; Compare accumulator (long) $5FDB4F.l [Reads: Accumulator] [Flags: NCZ]
	sbc $DE7F.w,X		; FD 7F DE ; Subtract with carry $DE7F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $1B0B07.l,X		; 5F 07 0B 1B ; Exclusive OR accumulator with memory (long,X) $1B0B07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	jsr $1010.w		; 20 10 10 ; Jump to subroutine at $1010.w [Writes: Stack Pointer] [Flow: call]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	mvp $FF,$44		; 44 44 FF ; Move block positive $FF,$44 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $CFFF9C.l,X		; FF 9C FF CF ; Subtract with carry (long,X) $CFFF9C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFF80.l,X		; FF 80 FF FF ; Subtract with carry (long,X) $FFFF80.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp.w [$BBBB]		; DC BB BB ; Jump long indirect [$BBBB] [Flow: jump]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $3C.b,S		; 03 3C ; OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $5A.b,S		; C3 5A ; Compare accumulator (stack relative) $5A.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	lda $A543.w,X		; BD 43 A5 ; Load $A543.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $9913.w,X		; 7E 13 99 ; Rotate right $9913.w,X [Reads: X Index] [Flags: NCZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $42, $BD		; 42 BD ; Reserved instruction
	bit $C3C3.w,X		; 3C C3 C3 ; Test bits $C3C3.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta ($C3.b,X)		; 81 C3 ; Store accumulator ($C3.b,X) [Reads: Direct Page, Accumulator, X Index]
	dec $47.b		; C6 47 ; Decrement $47.b [Reads: Direct Page] [Flags: NZ]
	sta ($41.b,X)		; 81 41 ; Store accumulator ($41.b,X) [Reads: Direct Page, Accumulator, X Index]
	eor $81.b,S		; 43 81 ; Exclusive OR accumulator with stack relative $81.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($01.b,X)		; 61 01 ; Add with carry ($01.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($71.b,X)		; A1 71 ; Load accumulator ($71.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $B1.b,S		; 43 B1 ; Exclusive OR accumulator with stack relative $B1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $B814.w,Y		; 79 14 B8 ; Add $B814.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($3F38.w,X)		; 7C 38 3F ; Jump indirect indexed to ($3F38.w,X) [Reads: X Index] [Flow: jump]
	ora $070F1F.l,X		; 1F 1F 0F 07 ; Logical OR long $070F1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	nop		; EA ; No operation
	ora $FF09.w,Y		; 19 09 FF ; OR accumulator with memory $FF09.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFE0FF.l		; EF FF E0 FF ; Subtract with carry (long) $FFE0FF.l [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	mvp $FE,$F7		; 44 F7 FE ; Move block positive $FE,$F7 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora ($05.b),Y		; 11 05 ; OR accumulator with memory ($05.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $E7.b		; E6 E7 ; Increment $E7.b [Reads: Direct Page] [Flags: NZ]
	jsr $F030.w		; 20 30 F0 ; Jump to subroutine at $F030.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $80		; F0 80 ; Branch if equal to $F0, $80 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ror $FF7E.w,X		; 7E 7E FF ; Rotate right $FF7E.w,X [Reads: X Index] [Flags: NCZ]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	eor $DB.b,S		; 43 DB ; Exclusive OR accumulator with stack relative $DB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $04.b		; 24 04 ; Test bits $04.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lda $5A.b		; A5 5A ; Load $5A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $DB.b		; A5 DB ; Load $DB.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $040025.l,X		; FF 25 00 04 ; Subtract with carry (long,X) $040025.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F90000.l,X		; FF 00 00 F9 ; Subtract with carry (long,X) $F90000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF27.w,Y		; F9 27 FF ; Subtract with carry $FF27.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$3F.b		; 09 3F ; Logical OR #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and $FFFF00.l,X		; 3F 00 FF FF ; AND accumulator with memory (long,X) $FFFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $3FFF7F.l,X		; 7F 7F FF 3F ; Add long $3FFF7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $0022.w		; CE 22 00 ; Decrement $0022.w [Flags: NZ]
	cpx #$35.b		; E0 35 ; Compare #$35.b with X register [Reads: X Index] [Flags: NCZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $FFA17F.l,X		; 7F 7F A1 FF ; Add long $FFA17F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $59F8.w,X		; 5E F8 59 ; Logical shift right $59F8.w,X [Reads: X Index] [Flags: NCZ]
	cpx $705F.w		; EC 5F 70 ; Compare $705F.w with X register [Reads: X Index] [Flags: NCZ]
	asl $0700.w		; 0E 00 07 ; Arithmetic shift left $0700.w [Flags: NCZ]
	adc $C6C0E1.l,X		; 7F E1 C0 C6 ; Add long $C6C0E1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$41.b		; C0 41 ; Compare #$41.b with Y register [Reads: Y Index] [Flags: NCZ]
	ora [$FC.b]		; 07 FC ; OR accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $18FA.w		; 0C FA 18 ; Test and set bits $18FA.w [Reads: Accumulator] [Flags: Z]
	pea $CF70.w		; F4 70 CF ; Push absolute address $CF70.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	eor $1818CF.l		; 4F CF 18 18 ; Exclusive OR accumulator with memory (long) $1818CF.l [Writes: Accumulator] [Flags: NZ]
	adc ($73.b,S),Y		; 73 73 ; Add with carry (stack relative indirect indexed) ($73.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($F3F9.w,X)		; FC F9 F3 ; Jump to subroutine indirect indexed ($F3F9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$1F.b		; C0 1F ; Compare #$1F.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $30, $E7		; 30 E7 ; Branch if minus to $30, $E7 [Flow: branch]
	sty $001F.w		; 8C 1F 00 ; Store Y register to $001F.w [Reads: Y Index]
	and $30731F.l,X		; 3F 1F 73 30 ; AND accumulator with memory (long,X) $30731F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$20.b]		; E7 20 ; Subtract with carry (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $DF4046.l		; CF 46 40 DF ; Compare accumulator (long) $DF4046.l [Reads: Accumulator] [Flags: NCZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	and [$22.b],Y		; 37 22 ; AND accumulator with memory (long indexed) [$22.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $00FF05.l		; 2F 05 FF 00 ; AND accumulator with memory (long) $00FF05.l [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sec		; 38 ; Set carry flag [Flags: C]
	sta $44.b,S		; 83 44 ; Store accumulator (stack relative) $44.b,S [Reads: Stack Pointer, Accumulator]
	sta $59.b,S		; 83 59 ; Store accumulator (stack relative) $59.b,S [Reads: Stack Pointer, Accumulator]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $4301.w,X		; FE 01 43 ; Increment memory $4301.w,X [Reads: X Index] [Flags: NZ]
	sbc $000300.l,X		; FF 00 03 00 ; Subtract with carry (long,X) $000300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$38.b]		; C7 38 ; Compare accumulator (long) [$38.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $24.b,S		; 83 24 ; Store accumulator (stack relative) $24.b,S [Reads: Stack Pointer, Accumulator]
	sbc $015188.l,X		; FF 88 51 01 ; Subtract with carry (long,X) $015188.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $60FF70.l,X		; FF 70 FF 60 ; Subtract with carry (long,X) $60FF70.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $016084.l,X		; FF 84 60 01 ; Subtract with carry (long,X) $016084.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $C0.b		; 02 C0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00839F.l		; 8F 9F 83 00 ; Store accumulator (long) $00839F.l [Reads: Accumulator]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$60.b]		; E7 60 ; Subtract with carry (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora ($CF.b,X)		; 01 CF ; Logical OR ($CF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $CF.b,S		; 43 CF ; Exclusive OR accumulator with stack relative $CF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora ($37.b,X)		; 01 37 ; Logical OR ($37.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($22.b,S),Y		; 33 22 ; AND accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cop $33.b		; 02 33 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$37.b],Y		; 37 37 ; AND accumulator with memory (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $E3.b,S		; 43 E3 ; Exclusive OR accumulator with stack relative $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $C70B.w		; 1C 0B C7 ; Test and reset bits $C70B.w [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp $708F30.l		; CF 30 8F 70 ; Compare accumulator (long) $708F30.l [Reads: Accumulator] [Flags: NCZ]
	sta $E01F60.l,X		; 9F 60 1F E0 ; Store accumulator (long,X) $E01F60.l,X [Reads: Accumulator, X Index]
	and $FF28C0.l,X		; 3F C0 28 FF ; AND accumulator with memory (long,X) $FF28C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $FF00.w		; 4E 00 FF ; Logical shift right $FF00.w [Flags: NCZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $27FF60.l		; 4F 60 FF 27 ; Exclusive OR accumulator with memory (long) $27FF60.l [Writes: Accumulator] [Flags: NZ]
	sta $00FF4C.l,X		; 9F 4C FF 00 ; Store accumulator (long,X) $00FF4C.l,X [Reads: Accumulator, X Index]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0E.b,X		; F6 0E ; Increment memory $0E.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $E1		; F0 E1 ; Branch if equal to $F0, $E1 [Flow: branch]
	jmp $00FF.w		; 4C FF 00 ; Jump to $00FF.w [Flow: jump]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $240C.w		; 0C 0C 24 ; Test and set bits $240C.w [Reads: Accumulator] [Flags: Z]
	sbc $003CE0.l,X		; FF E0 3C 00 ; Subtract with carry (long,X) $003CE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $01F920.l,X		; DF 20 F9 01 ; Compare accumulator (long,X) $01F920.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	inc $26.b,X		; F6 26 ; Increment memory $26.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cmp $65.b,X		; D5 65 ; Compare accumulator $65.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $FE65.w,X		; DD 65 FE ; Compare accumulator $FE65.w,X [Reads: X Index] [Flags: NCZ]
	lsr $31EF.w,X		; 5E EF 31 ; Logical shift right $31EF.w,X [Reads: X Index] [Flags: NCZ]
	sbc $87E021.l,X		; FF 21 E0 87 ; Subtract with carry (long,X) $87E021.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $1F030F.l		; 0F 0F 03 1F ; OR accumulator with memory (long) $1F030F.l [Writes: Accumulator] [Flags: NZ]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr ($9E7F.w,X)		; FC 7F 9E ; Jump to subroutine indirect indexed ($9E7F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rol $5E8E.w,X		; 3E 8E 5E ; Rotate left $5E8E.w,X [Reads: X Index] [Flags: NCZ]
	lsr $2E.b		; 46 2E ; Logical shift right $2E.b [Reads: Direct Page] [Flags: NCZ]
	and $17.b,S		; 23 17 ; AND accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $07.b		; 04 07 ; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($21.b,X)		; 41 21 ; Exclusive OR accumulator with memory ($21.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($08.b),Y		; 11 08 ; OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$08.b]		; 87 08 ; Store accumulator (long) [$08.b] [Reads: Direct Page, Accumulator]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$88.b]		; 07 88 ; OR accumulator with memory (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator]
	.db $F0, $83		; F0 83 ; Branch if equal to $F0, $83 [Flow: branch]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F7		; F0 F7 ; Branch if equal to $F0, $F7 [Flow: branch]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $830022.l,X		; FF 22 00 83 ; Subtract with carry (long,X) $830022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	cop $84.b		; 02 84 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $030022.l,X		; FF 22 00 03 ; Subtract with carry (long,X) $030022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0E0E00.l,X		; FF 00 0E 0E ; Subtract with carry (long,X) $0E0E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $30.b,S		; 23 30 ; AND accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $C3.b,S		; 03 C3 ; OR accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $85.b,S		; C3 85 ; Compare accumulator (stack relative) $85.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $13.b		; 02 13 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($CF.b),Y		; F1 CF ; Subtract with carry ($CF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $003CFC.l		; CF FC 3C 00 ; Compare accumulator (long) $003CFC.l [Reads: Accumulator] [Flags: NCZ]
	sbc $247800.l,X		; FF 00 78 24 ; Subtract with carry (long,X) $247800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $1B11.w,Y		; 39 11 1B ; AND accumulator with memory $1B11.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($1B.b,S),Y		; 13 1B ; OR accumulator (stack relative indirect indexed) ($1B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $2B.b,S		; 03 2B ; OR accumulator with stack relative $2B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($6B.b,S),Y		; 13 6B ; OR accumulator (stack relative indirect indexed) ($6B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($43.b,S),Y		; 33 43 ; AND accumulator (stack relative indirect indexed) ($43.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	eor ($02.b,S),Y		; 53 02 ; XOR accumulator (stack relative indirect indexed) ($02.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $36.b,S		; 63 36 ; Add with carry (stack relative) $36.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	trb $22.b		; 14 22 ; Test and reset bits $22.b [Reads: Accumulator] [Flags: Z]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cmp [$DF.b]		; C7 DF ; Compare accumulator (long) [$DF.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta ($9E.b)		; 92 9E ; Store accumulator (indirect) ($9E.b) [Reads: Direct Page, Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	rol $3532.w,X		; 3E 32 35 ; Rotate left $3532.w,X [Reads: X Index] [Flags: NCZ]
	eor $33.b,S		; 43 33 ; Exclusive OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $06.b,X		; 34 06 ; Test bits $06.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	and ($35.b)		; 32 35 ; AND accumulator with memory (indirect) ($35.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $1A.b		; 14 1A ; Test and reset bits $1A.b [Reads: Accumulator] [Flags: Z]
	jsr $C161.w		; 20 61 C1 ; Jump to subroutine at $C161.w [Writes: Stack Pointer] [Flow: call]
	and $C8.b,S		; 23 C8 ; AND accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $50, $01		; 50 01 ; Branch if overflow clear to $50, $01 [Flow: branch]
	jsl $0044FF.l		; 22 FF 44 00 ; Jump to subroutine long $0044FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $016183.l,X		; FF 83 61 01 ; Subtract with carry (long,X) $016183.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	ora ($0E.b,X)		; 01 0E ; Logical OR ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $C73FCF.l,X		; 3F CF 3F C7 ; AND accumulator with memory (long,X) $C73FCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $E71FE3.l,X		; 3F E3 1F E7 ; AND accumulator with memory (long,X) $E71FE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $273FCF.l,X		; 1F CF 3F 27 ; Logical OR long $273FCF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000B00.l,X		; FF 00 0B 00 ; Subtract with carry (long,X) $000B00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F1FFC7.l,X		; FF C7 FF F1 ; Subtract with carry (long,X) $F1FFC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F1FFF8.l,X		; FF F8 FF F1 ; Subtract with carry (long,X) $F1FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $27FF8F.l,X		; FF 8F FF 27 ; Subtract with carry (long,X) $27FF8F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $EE61.w		; EE 61 EE ; Increment $EE61.w [Flags: NZ]
	adc #$E6.b		; 69 E6 ; Add #$E6.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc ($43.b,X)		; 61 43 ; Add with carry ($43.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $63.b		; E4 63 ; Compare $63.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ora [$ED.b]		; 07 ED ; OR accumulator with memory (long) [$ED.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $64E768.l		; EF 68 E7 64 ; Subtract with carry (long) $64E768.l [Writes: Accumulator] [Flags: NCVZ]
	ora [$13.b],Y		; 17 13 ; OR accumulator with memory (long indexed) [$13.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $13041B.l		; 22 1B 04 13 ; Jump to subroutine long $13041B.l [Writes: Stack Pointer] [Flow: call]
	ora ($19.b,S),Y		; 13 19 ; OR accumulator (stack relative indirect indexed) ($19.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $7F43C0.l,X		; 3F C0 43 7F ; AND accumulator with memory (long,X) $7F43C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $49		; 80 49 ; Branch always to $80, $49 [Flow: branch]
	sbc $FF2700.l,X		; FF 00 27 FF ; Subtract with carry (long,X) $FF2700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $FF00.w		; 4E 00 FF ; Logical shift right $FF00.w [Flags: NCZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $C0.b		; 46 C0 ; Logical shift right $C0.b [Reads: Direct Page] [Flags: NCZ]
	adc $C07106.l,X		; 7F 06 71 C0 ; Add long $C07106.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $C072C0.l,X		; 7F C0 72 C0 ; Add long $C072C0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $020023.l,X		; 7F 23 00 02 ; Add long $020023.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0D00.w		; 0E 00 0D ; Arithmetic shift left $0D00.w [Flags: NCZ]
	sty $5A.b		; 84 5A ; Store Y register to $5A.b [Reads: Y Index]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $E020FF.l		; CF FF 20 E0 ; Compare accumulator (long) $E020FF.l [Reads: Accumulator] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cmp $34E0DF.l,X		; DF DF E0 34 ; Compare accumulator (long,X) $34E0DF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	jmp $0023.w		; 4C 23 00 ; Jump to $0023.w [Flow: jump]
	ora $1F.b,S		; 03 1F ; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $8300.w		; 20 00 83 ; Jump to subroutine at $8300.w [Writes: Stack Pointer] [Flow: call]
	sta $3A.b,S		; 83 3A ; Store accumulator (stack relative) $3A.b,S [Reads: Stack Pointer, Accumulator]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C7FF.w,Y		; F9 FF C7 ; Subtract with carry $C7FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $83C0C0.l,X		; FF C0 C0 83 ; Subtract with carry (long,X) $83C0C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $003F.w,X		; 1E 3F 00 ; Arithmetic shift left $003F.w,X [Reads: X Index] [Flags: NCZ]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $DD21.w,X		; FD 21 DD ; Subtract with carry $DD21.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $00B8.w		; 1C B8 00 ; Test and reset bits $00B8.w [Reads: Accumulator] [Flags: Z]
	lda $38.b		; A5 38 ; Load $38.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	jmp $BF60E0.l		; 5C E0 60 BF ; Jump long to $BF60E0.l [Flow: jump]
	adc $233FDF.l,X		; 7F DF 3F 23 ; Add long $233FDF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $4247.w,X		; 3E 47 42 ; Rotate left $4247.w,X [Reads: X Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $1F001F.l,X		; 3F 1F 00 1F ; AND accumulator with memory (long,X) $1F001F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $44FD.w,X		; FE FD 44 ; Increment memory $44FD.w,X [Reads: X Index] [Flags: NZ]
	inc $00F9.w,X		; FE F9 00 ; Increment memory $00F9.w,X [Reads: X Index] [Flags: NZ]
	sbc ($44.b),Y		; F1 44 ; Subtract with carry ($44.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $01E1.w,X		; FE E1 01 ; Increment memory $01E1.w,X [Reads: X Index] [Flags: NZ]
	sta ($FE.b,X)		; 81 FE ; Store accumulator ($FE.b,X) [Reads: Direct Page, Accumulator, X Index]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $9D7EBF.l		; 0F BF 7E 9D ; OR accumulator with memory (long) $9D7EBF.l [Writes: Accumulator] [Flags: NZ]
	ror $7E8D.w,X		; 7E 8D 7E ; Rotate right $7E8D.w,X [Reads: X Index] [Flags: NCZ]
	lda ($7E.b,X)		; A1 7E ; Load accumulator ($7E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($7E.b),Y		; B1 7E ; Load accumulator ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $9D7E.w,X		; BD 7E 9D ; Load $9D7E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $BE4D.w,X		; 7E 4D BE ; Rotate right $BE4D.w,X [Reads: X Index] [Flags: NCZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $D2.b,S		; 83 D2 ; Store accumulator (stack relative) $D2.b,S [Reads: Stack Pointer, Accumulator]
	cop $0B.b		; 02 0B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $6E7F.w		; AE 7F 6E ; Load $6E7F.w into X register [Writes: X Index] [Flags: NZ]
	sbc $6FF96E.l,X		; FF 6E F9 6F ; Subtract with carry (long,X) $6FF96E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	adc $25FC.w		; 6D FC 25 ; Add $25FC.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	sta $2503D8.l		; 8F D8 03 25 ; Store accumulator (long) $2503D8.l [Reads: Accumulator]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $04.b,S		; 43 04 ; Exclusive OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $A5.b		; 02 A5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $98E4.w,Y		; 79 E4 98 ; Add $98E4.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($AC.b)		; F2 AC ; Subtract with carry (indirect) ($AC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $3E.b,X		; 34 3E ; Test bits $3E.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora #$1F.b		; 09 1F ; Logical OR #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $171903.l		; 0F 03 19 17 ; OR accumulator with memory (long) $171903.l [Writes: Accumulator] [Flags: NZ]
	cop $83.b		; 02 83 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($70.b,X)		; E1 70 ; Subtract with carry ($70.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $9E.b		; 86 9E ; Store X register to $9E.b [Reads: X Index]
	cmp $F3.b,S		; C3 F3 ; Compare accumulator (stack relative) $F3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	adc $0C79.w,Y		; 79 79 0C ; Add $0C79.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $6787.w		; 0C 87 67 ; Test and set bits $6787.w [Reads: Accumulator] [Flags: Z]
	eor $B3.b,S		; 43 B3 ; Exclusive OR accumulator with stack relative $B3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy #$DC.b		; A0 DC ; Load #$DC.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $90, $EF		; 90 EF ; Branch if carry clear to $90, $EF [Flow: branch]
	adc ($0C.b,X)		; 61 0C ; Add with carry ($0C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $F3.b		; 86 F3 ; Store X register to $F3.b [Reads: X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $0003.w		; 0C 03 00 ; Test and set bits $0003.w [Reads: Accumulator] [Flags: Z]
	sbc $FFC1FF.l,X		; FF FF C1 FF ; Subtract with carry (long,X) $FFC1FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sbc $AEFFBE.l,X		; FF BE FF AE ; Subtract with carry (long,X) $AEFFBE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8DFFBE.l,X		; FF BE FF 8D ; Subtract with carry (long,X) $8DFFBE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFD3.l,X		; FF D3 FF FF ; Subtract with carry (long,X) $FFFFD3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($23.b,X)		; C1 23 ; Compare accumulator ($23.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	sta ($D3.b,X)		; 81 D3 ; Store accumulator ($D3.b,X) [Reads: Direct Page, Accumulator, X Index]
	lsr $FF00.w		; 4E 00 FF ; Logical shift right $FF00.w [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $7E8145.l,X		; FF 45 81 7E ; Subtract with carry (long,X) $7E8145.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	ora ($B3.b,S),Y		; 13 B3 ; OR accumulator (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($99.b)		; 72 99 ; Add with carry (indirect) ($99.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $3CCC.w,Y		; 79 CC 3C ; Add $3CCC.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $1E.b		; E6 1E ; Increment $1E.b [Reads: Direct Page] [Flags: NZ]
	lda ($4F.b,S),Y		; B3 4F ; Load accumulator (stack relative indirect indexed) ($4F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	adc [$EF.b]		; 67 EF ; Add with carry (long) [$EF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $F3		; 70 F3 ; Branch if overflow set to $70, $F3 [Flow: branch]
	jmp ($060C.w,X)		; 7C 0C 06 ; Jump indirect indexed to ($060C.w,X) [Reads: X Index] [Flow: jump]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	sta $3B.b,S		; 83 3B ; Store accumulator (stack relative) $3B.b,S [Reads: Stack Pointer, Accumulator]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $180300.l,X		; FF 00 03 18 ; Subtract with carry (long,X) $180300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $E7.b,S		; C3 E7 ; Compare accumulator (stack relative) $E7.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	jmp ($0023.w,X)		; 7C 23 00 ; Jump indirect indexed to ($0023.w,X) [Reads: X Index] [Flow: jump]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $4300FF.l,X		; 3F FF 00 43 ; AND accumulator with memory (long,X) $4300FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $C3023F.l		; CF 3F 02 C3 ; Compare accumulator (long) $C3023F.l [Reads: Accumulator] [Flags: NCZ]
	and $DB84E1.l,X		; 3F E1 84 DB ; AND accumulator with memory (long,X) $DB84E1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $28.b		; 02 28 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC00FF.l,X		; FF FF 00 FC ; Subtract with carry (long,X) $FC00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8FFFE3.l,X		; FF E3 FF 8F ; Subtract with carry (long,X) $8FFFE3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8FFF1F.l,X		; FF 1F FF 8F ; Subtract with carry (long,X) $8FFF1F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $27FFF1.l,X		; FF F1 FF 27 ; Subtract with carry (long,X) $27FFF1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $38C83F.l		; CF 3F C8 38 ; Compare accumulator (long) $38C83F.l [Reads: Accumulator] [Flags: NCZ]
	eor $C0.b,S		; 43 C0 ; Exclusive OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $1FE001.l,X		; 3F 01 E0 1F ; AND accumulator with memory (long,X) $1FE001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $440022.l,X		; FF 22 00 44 ; Subtract with carry (long,X) $440022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF4500.l,X		; FF 00 45 FF ; Subtract with carry (long,X) $FF4500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A0.b,S		; 03 A0 ; OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $43609F.l,X		; 5F 9F 60 43 ; Exclusive OR accumulator with memory (long,X) $43609F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($6D.b)		; B2 6D ; Load accumulator (indirect) ($6D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $AF.b		; 06 AF ; Arithmetic shift left $AF.b [Reads: Direct Page] [Flags: NCZ]
	.db $70, $DF		; 70 DF ; Branch if overflow set to $70, $DF [Flow: branch]
	and $3F1F60.l,X		; 3F 60 1F 3F ; AND accumulator with memory (long,X) $3F1F60.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$FA.b]		; 07 FA ; OR accumulator with memory (long) [$FA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1BF6.w		; 0D F6 1B ; Logical OR $1BF6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpx $D837.w		; EC 37 D8 ; Compare $D837.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $E0DF30.l		; EF 30 DF E0 ; Subtract with carry (long) $E0DF30.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $050028.l,X		; FF 28 00 05 ; Subtract with carry (long,X) $050028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($9E.b,X)		; 61 9E ; Add with carry ($9E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($8E.b),Y		; 71 8E ; Add with carry ($8E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $432E.w,X		; FD 2E 43 ; Subtract with carry $432E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $436E.w,X		; BD 6E 43 ; Load $436E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($6E.b),Y		; B1 6E ; Load accumulator ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($BD.b,X)		; 01 BD ; Logical OR ($BD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $0027.w,X		; 5E 27 00 ; Logical shift right $0027.w,X [Reads: X Index] [Flags: NCZ]
	ora $6E.b,S		; 03 6E ; OR accumulator with stack relative $6E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $FF6E.w,X		; FE 6E FF ; Increment memory $FF6E.w,X [Reads: X Index] [Flags: NZ]
	eor [$EE.b]		; 47 EE ; Exclusive OR accumulator with memory (long) [$EE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $7F8004.l,X		; 7F 04 80 7F ; Add long $7F8004.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $260100.l,X		; FF 00 01 26 ; Subtract with carry (long,X) $260100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $7F.b,X		; 76 7F ; Rotate right $7F.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	jmp ($5DC3.w,X)		; 7C C3 5D ; Jump indirect indexed to ($5DC3.w,X) [Reads: X Index] [Flow: jump]
	inc $7D.b		; E6 7D ; Increment $7D.b [Reads: Direct Page] [Flags: NZ]
.ACCU 16
	rep #$65		; C2 65
.ACCU 16
.INDEX 16
	rep #$7D		; C2 7D
	rep #$01		; C2 01 ; Reset processor status bits #$01 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	inc $00FF.w,X		; FE FF 00 ; Increment memory $00FF.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $1C0100.l		; 22 00 01 1C ; Jump to subroutine long $1C0100.l [Writes: Stack Pointer] [Flow: call]
	ora $1F3E43.l		; 0F 43 3E 1F ; OR accumulator with memory (long) $1F3E43.l [Writes: Accumulator] [Flags: NZ]
	asl $3A.b		; 06 3A ; Arithmetic shift left $3A.b [Reads: Direct Page] [Flags: NCZ]
	ora $162F.w,X		; 1D 2F 16 ; OR accumulator with memory $162F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $260535.l,X		; 3F 35 05 26 ; AND accumulator with memory (long,X) $260535.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $3F06.w		; 2E 06 3F ; Rotate left $3F06.w [Flags: NCZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($EC.b,S),Y		; 13 EC ; OR accumulator (stack relative indirect indexed) ($EC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $4B.b,X		; B4 4B ; Load Y register $4B.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sbc $F927.w,Y		; F9 27 F9 ; Subtract with carry $F927.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$FC.b],Y		; 77 FC ; Add with carry (long indexed) [$FC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp $0603.w,X		; DD 03 06 ; Compare accumulator $0603.w,X [Reads: X Index] [Flags: NCZ]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $F8		; 70 F8 ; Branch if overflow set to $70, $F8 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	sbc $FFC0FF.l,X		; FF FF C0 FF ; Subtract with carry (long,X) $FFC0FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FFB6FF.l,X		; DF FF B6 FF ; Compare accumulator (long,X) $FFB6FF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda ($FF.b,S),Y		; B3 FF ; Load accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $FF96FF.l,X		; BF FF 96 FF ; Load long $FF96FF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cpy #$23C0.w		; C0 C0 23 ; Compare #$23C0.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cmp #$FF4E.w		; C9 4E FF ; Compare #$FF4E.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AA0400.l,X		; FF 00 04 AA ; Subtract with carry (long,X) $AA0400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $00.b,X		; 55 00 ; Exclusive OR accumulator with memory $00.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF2200.l,X		; FF 00 22 FF ; Subtract with carry (long,X) $FF2200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $E01F17.l,X		; FF 17 1F E0 ; Subtract with carry (long,X) $E01F17.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($CC.b,S),Y		; 33 CC ; AND accumulator (stack relative indirect indexed) ($CC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc [$88.b],Y		; 77 88 ; Add with carry (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $609F00.l,X		; FF 00 9F 60 ; Subtract with carry (long,X) $609F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $FE41.w,Y		; BE 41 FE ; Load X register $FE41.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $86EE.w		; EE EE 86 ; Increment $86EE.w [Flags: NZ]
	adc $3D7D.w,Y		; 79 7D 3D ; Add $3D7D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($45.b,X)		; 81 45 ; Store accumulator ($45.b,X) [Reads: Direct Page, Accumulator, X Index]
	cmp $C709F0.l		; CF F0 09 C7 ; Compare accumulator (long) $C709F0.l [Reads: Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp $FC.b,S		; C3 FC ; Compare accumulator (stack relative) $FC.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $FF		; 70 FF ; Branch if overflow set to $70, $FF [Flow: branch]
	bit $27FF.w,X		; 3C FF 27 ; Test bits $27FF.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $8280.w,X		; 7E 80 82 ; Rotate right $8280.w,X [Reads: X Index] [Flags: NCZ]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $FC		; 80 FC ; Branch always to $80, $FC [Flow: branch]
	sta ($62.b,X)		; 81 62 ; Store accumulator ($62.b,X) [Reads: Direct Page, Accumulator, X Index]
	adc $4002.w,X		; 7D 02 40 ; Add $4002.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $EF14F0.l		; 0F F0 14 EF ; OR accumulator with memory (long) $EF14F0.l [Writes: Accumulator] [Flags: NZ]
	jsl $BF43DF.l		; 22 DF 43 BF ; Jump to subroutine long $BF43DF.l [Writes: Stack Pointer] [Flow: call]
	ldx $807E.w,Y		; BE 7E 80 ; Load X register $807E.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jmp ($7C84.w,X)		; 7C 84 7C ; Jump indirect indexed to ($7C84.w,X) [Reads: X Index] [Flow: jump]
	stx $F07E.w		; 8E 7E F0 ; Store X register to $F07E.w [Reads: X Index]
	cpx #$80C0.w		; E0 C0 80 ; Compare #$80C0.w with X register [Reads: X Index] [Flags: NCZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $EF54F0.l,X		; 9F F0 54 EF ; Store accumulator (long,X) $EF54F0.l,X [Reads: Accumulator, X Index]
	.db $62, $8A, $65		; 62 8A 65 ; Push effective relative address $62, $8A, $65 [Writes: Stack Pointer]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $00.b,X		; 74 00 ; Store zero to $00.b,X [Reads: X Index]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $F807.w,X		; FE 07 F8 ; Increment memory $F807.w,X [Reads: X Index] [Flags: NZ]
	ora $E01FF0.l		; 0F F0 1F E0 ; OR accumulator with memory (long) $E01FF0.l [Writes: Accumulator] [Flags: NZ]
	and $807FC0.l,X		; 3F C0 7F 80 ; AND accumulator with memory (long,X) $807FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $FC81.w,X		; 7E 81 FC ; Rotate right $FC81.w,X [Reads: X Index] [Flags: NCZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($83F8.w,X)		; FC F8 83 ; Jump to subroutine indirect indexed ($83F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BF4300.l,X		; FF 00 43 BF ; Subtract with carry (long,X) $BF4300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora #$609F.w		; 09 9F 60 ; Logical OR #$609F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $0073.w		; 8C 73 00 ; Store Y register to $0073.w [Reads: Y Index]
	sbc $73FF3F.l,X		; FF 3F FF 73 ; Subtract with carry (long,X) $73FF3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $050027.l,X		; FF 27 00 05 ; Subtract with carry (long,X) $050027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $42C3.w,X		; 3C C3 42 ; Test bits $42C3.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sta ($99.b,X)		; 81 99 ; Store accumulator ($99.b,X) [Reads: Direct Page, Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $A5.b,S		; 43 A5 ; Exclusive OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $0D.b		; 24 0D ; Test bits $0D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta $C318.w,Y		; 99 18 C3 ; Store accumulator to $C318.w,Y [Reads: Y Index, Accumulator]
	.db $42, $FF		; 42 FF ; Reserved instruction
	bit $BDC3.w,X		; 3C C3 BD ; Test bits $BDC3.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ror $5A.b		; 66 5A ; Rotate right $5A.b [Reads: Direct Page] [Flags: NCZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ror $3C.b		; 66 3C ; Rotate right $3C.b [Reads: Direct Page] [Flags: NCZ]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 16
	rep #$67		; C2 67
	sty $DB.b		; 84 DB ; Store Y register to $DB.b [Reads: Y Index]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $3D0001.l,X		; FF 01 00 3D ; Subtract with carry (long,X) $3D0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $C08500.l		; 22 00 85 C0 ; Jump to subroutine long $C08500.l [Writes: Stack Pointer] [Flow: call]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00CA.w		; 8D CA 00 ; Store accumulator to $00CA.w [Reads: Accumulator]
	sta $90.b,S		; 83 90 ; Store accumulator (stack relative) $90.b,S [Reads: Stack Pointer, Accumulator]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $A47FD4.l		; 2F D4 7F A4 ; AND accumulator with memory (long) $A47FD4.l [Writes: Accumulator] [Flags: NZ]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $FF43.w		; AC 43 FF ; Load $FF43.w into Y register [Writes: Y Index] [Flags: NZ]
	adc $27.b		; 65 27 ; Add $27.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $CA7F0F.l,X		; FF 0F 7F CA ; Subtract with carry (long,X) $CA7F0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $16FFA6.l,X		; FF A6 FF 16 ; Subtract with carry (long,X) $16FFA6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $D9FF92.l,X		; FF 92 FF D9 ; Subtract with carry (long,X) $D9FF92.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4DFF49.l,X		; FF 49 FF 4D ; Subtract with carry (long,X) $4DFF49.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF270D.l,X		; FF 0D 27 FF ; Subtract with carry (long,X) $FF270D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($FF.b,S),Y		; 53 FF ; XOR accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $FF44.w,Y		; D9 44 FF ; Compare accumulator $FF44.w,Y [Reads: Y Index] [Flags: NCZ]
	cmp ($06.b)		; D2 06 ; Compare accumulator (indirect) ($06.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $B6FF9A.l,X		; FF 9A FF B6 ; Subtract with carry (long,X) $B6FF9A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF2734.l,X		; FF 34 27 FF ; Subtract with carry (long,X) $FF2734.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $009484.l,X		; FF 84 94 00 ; Subtract with carry (long,X) $009484.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $C7.b		; 04 C7 ; Test and set bits $C7.b [Reads: Accumulator] [Flags: Z]
	jmp ($788C.w,X)		; 7C 8C 78 ; Jump indirect indexed to ($788C.w,X) [Reads: X Index] [Flow: jump]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $70.b,S		; 43 70 ; Exclusive OR accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	sbc $F0F8FF.l,X		; FF FF F8 F0 ; Subtract with carry (long,X) $F0F8FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C7.b,S		; E3 C7 ; Subtract stack-relative $C7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp $0043CF.l		; CF CF 43 00 ; Compare accumulator (long) $0043CF.l [Reads: Accumulator] [Flags: NCZ]
	sbc $8F700B.l,X		; FF 0B 70 8F ; Subtract with carry (long,X) $8F700B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda [$78.b],Y		; B7 78 ; Load accumulator (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta [$38.b]		; 87 38 ; Store accumulator (long) [$38.b] [Reads: Direct Page, Accumulator]
	cmp [$00.b]		; C7 00 ; Compare accumulator (long) [$00.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jsr ($9B63.w,X)		; FC 63 9B ; Jump to subroutine indirect indexed ($9B63.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	pea $A883.w		; F4 83 A8 ; Push absolute address $A883.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00FF60.l,X		; 9F 60 FF 00 ; Store accumulator (long,X) $00FF60.l,X [Reads: Accumulator, X Index]
	sbc $EE02.w,X		; FD 02 EE ; Subtract with carry $EE02.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($7F.b),Y		; 11 7F ; OR accumulator with memory ($7F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $3F		; 80 3F ; Branch always to $80, $3F [Flow: branch]
	cpy #$793C.w		; C0 3C 79 ; Compare #$793C.w with Y register [Reads: Y Index] [Flags: NCZ]
	adc ($03.b,S),Y		; 73 03 ; Add with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cmp $FEC0.w,Y		; D9 C0 FE ; Compare accumulator $FEC0.w,Y [Reads: Y Index] [Flags: NCZ]
	eor [$E7.b]		; 47 E7 ; Exclusive OR accumulator with memory (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $E607.w,Y		; F9 07 E6 ; Subtract with carry $E607.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7867.w,Y		; F9 67 78 ; Subtract with carry $7867.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$78.b],Y		; 77 78 ; Add with carry (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($0024.w,X)		; 7C 24 00 ; Jump indirect indexed to ($0024.w,X) [Reads: X Index] [Flow: jump]
	jsl $5F1580.l		; 22 80 15 5F ; Jump to subroutine long $5F1580.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $52		; 80 52 ; Branch always to $80, $52 [Flow: branch]
	.db $80, $5F		; 80 5F ; Branch always to $80, $5F [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $3F		; 80 3F ; Branch always to $80, $3F [Flow: branch]
	cpy #$FC02.w		; C0 02 FC ; Compare #$FC02.w with Y register [Reads: Y Index] [Flags: NCZ]
	rol $3FC0.w,X		; 3E C0 3F ; Rotate left $3FC0.w,X [Reads: X Index] [Flags: NCZ]
	cpy #$ADA0.w		; C0 A0 AD ; Compare #$ADA0.w with Y register [Reads: Y Index] [Flags: NCZ]
	ldy #$C0BF.w		; A0 BF C0 ; Load #$C0BF.w into Y register [Writes: Y Index] [Flags: NZ]
	sbc $FD62.w,X		; FD 62 FD ; Subtract with carry $FD62.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $81.b,Y		; 96 81 ; Store X register $81.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $B27F.w,Y		; 99 7F B2 ; Store accumulator to $B27F.w,Y [Reads: Y Index, Accumulator]
	adc $C47FA2.l,X		; 7F A2 7F C4 ; Add long $C47FA2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $349F64.l,X		; 3F 64 9F 34 ; AND accumulator with memory (long,X) $349F64.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $0FE718.l		; CF 18 E7 0F ; Compare accumulator (long) $0FE718.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpx #$F8F0.w		; E0 F0 F8 ; Compare #$F8F0.w with X register [Reads: X Index] [Flags: NCZ]
	sta $30.b,S		; 83 30 ; Store accumulator (stack relative) $30.b,S [Reads: Stack Pointer, Accumulator]
	sta $20.b,S		; 83 20 ; Store accumulator (stack relative) $20.b,S [Reads: Stack Pointer, Accumulator]
	sta $08.b,S		; 83 08 ; Store accumulator (stack relative) $08.b,S [Reads: Stack Pointer, Accumulator]
	sta $18.b,S		; 83 18 ; Store accumulator (stack relative) $18.b,S [Reads: Stack Pointer, Accumulator]
	sta [$F8.b]		; 87 F8 ; Store accumulator (long) [$F8.b] [Reads: Direct Page, Accumulator]
	ora ($27.b,X)		; 01 27 ; Logical OR ($27.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jmp ($8005.w,X)		; 7C 05 80 ; Jump indirect indexed to ($8005.w,X) [Reads: X Index] [Flow: jump]
	adc $F93FC1.l,X		; 7F C1 3F F9 ; Add long $F93FC1.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$45.b]		; 07 45 ; OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0303.w,X		; FD 03 03 ; Subtract with carry $0303.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7907.w,Y		; F9 07 79 ; Subtract with carry $7907.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$25.b]		; 87 25 ; Store accumulator (long) [$25.b] [Reads: Direct Page, Accumulator]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	sbc ($FF.b,X)		; E1 FF ; Subtract with carry ($FF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$43FF.w		; C0 FF 43 ; Compare #$43FF.w with Y register [Reads: Y Index] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$07.b]		; E7 07 ; Subtract with carry (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$C6FF.w		; C0 FF C6 ; Compare #$C6FF.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $80FF86.l,X		; FF 86 FF 80 ; Subtract with carry (long,X) $80FF86.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $010027.l,X		; FF 27 00 01 ; Subtract with carry (long,X) $010027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $4342.w,X		; BD 42 43 ; Load $4342.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($7E.b),Y		; B1 7E ; Load accumulator ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $7E.b,X		; B5 7E ; Load $7E.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7E.b,X		; 95 7E ; Store accumulator to $7E.b,X [Reads: Accumulator, X Index]
	cmp [$3C.b],Y		; D7 3C ; Compare accumulator (long indexed) [$3C.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc $26FF00.l,X		; FF 00 FF 26 ; Subtract with carry (long,X) $26FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($44.b,X)		; 81 44 ; Store accumulator ($44.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $490100.l,X		; FF 00 01 49 ; Subtract with carry (long,X) $490100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FF46.l,X		; FF 46 FF 00 ; Subtract with carry (long,X) $00FF46.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $5AE512.l,X		; FF 12 E5 5A ; Subtract with carry (long,X) $5AE512.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$42.b]		; E7 42 ; Subtract with carry (long) [$42.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $42E74A.l		; EF 4A E7 42 ; Subtract with carry (long) $42E74A.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $42.b		; E5 42 ; Subtract $42.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda $42.b		; A5 42 ; Load $42.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc [$00.b]		; E7 00 ; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror $0099.w,X		; 7E 99 00 ; Rotate right $0099.w,X [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $22		; 10 22 ; Branch if plus to $10, $22 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $99		; 10 99 ; Branch if plus to $10, $99 [Flow: branch]
	cmp $FF.b,S		; C3 FF ; Compare accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	adc $7F.b,X		; 75 7F ; Add $7F.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($7F.b,S),Y		; B3 7F ; Load accumulator (stack relative indirect indexed) ($7F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	and $CE3FD6.l,X		; 3F D6 3F CE ; AND accumulator with memory (long,X) $CE3FD6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $F807E4.l,X		; 1F E4 07 F8 ; Logical OR long $F807E4.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF640E.l,X		; FF 0E 64 FF ; Subtract with carry (long,X) $FF640E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b,X		; 35 FF ; Logical AND $FF.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $56FFDB.l,X		; FF DB FF 56 ; Subtract with carry (long,X) $56FFDB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A2FF66.l,X		; FF 66 FF A2 ; Subtract with carry (long,X) $A2FF66.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $FF28C4.l,X		; 7F C4 28 FF ; Add long $FF28C4.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $B2.b		; 04 B2 ; Test and set bits $B2.b [Reads: Accumulator] [Flags: Z]
	sbc $2CFFA6.l,X		; FF A6 FF 2C ; Subtract with carry (long,X) $2CFFA6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $4C,$FF		; 44 FF 4C ; Move block positive $4C,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsb $64.b		; 04 64 ; Test and set bits $64.b [Reads: Accumulator] [Flags: Z]
	sbc $23FE35.l,X		; FF 35 FE 23 ; Subtract with carry (long,X) $23FE35.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpx #$0601.w		; E0 01 06 ; Compare #$0601.w with X register [Reads: X Index] [Flags: NCZ]
	ora $380F34.l,X		; 1F 34 0F 38 ; Logical OR long $380F34.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$7F.b]		; 27 7F ; AND accumulator with memory (long) [$7F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $70, $23		; 70 23 ; Branch if overflow set to $70, $23 [Flow: branch]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpy #$F280.w		; C0 80 F2 ; Compare #$F280.w with Y register [Reads: Y Index] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc ($0B.b,S),Y		; F3 0B ; Subtract with carry (stack relative indirect indexed) ($0B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	sbc ($77.b,S),Y		; F3 77 ; Subtract with carry (stack relative indirect indexed) ($77.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc ($4C.b,S),Y		; F3 4C ; Subtract with carry (stack relative indirect indexed) ($4C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cpx #$F51F.w		; E0 1F F5 ; Compare #$F51F.w with X register [Reads: X Index] [Flags: NCZ]
	pea $F8F3.w		; F4 F3 F8 ; Push absolute address $F8F3.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	jsr ($FF22.w,X)		; FC 22 FF ; Jump to subroutine indirect indexed ($FF22.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora [$0F.b],Y		; 17 0F ; OR accumulator with memory (long indexed) [$0F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $30, $D3		; 30 D3 ; Branch if minus to $30, $D3 [Flow: branch]
	.db $42, $A6		; 42 A6 ; Reserved instruction
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy $42.b		; A4 42 ; Load $42.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx $50.b		; A6 50 ; Load $50.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda ($78.b,S),Y		; B3 78 ; Load accumulator (stack relative indirect indexed) ($78.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $E7		; F0 E7 ; Branch if equal to $F0, $E7 [Flow: branch]
	cpy $9B99.w		; CC 99 9B ; Compare $9B99.w with Y register [Reads: Y Index] [Flags: NCZ]
	sta $878C.w,Y		; 99 8C 87 ; Store accumulator to $878C.w,Y [Reads: Y Index, Accumulator]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	.db $50, $FF		; 50 FF ; Branch if overflow clear to $50, $FF [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $14F72A.l,X		; FF 2A F7 14 ; Subtract with carry (long,X) $14F72A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $22FF00.l,X		; FF 00 FF 22 ; Subtract with carry (long,X) $22FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FF0000.l		; 22 00 00 FF ; Jump to subroutine long $FF0000.l [Writes: Stack Pointer] [Flow: call]
	sta $60.b,S		; 83 60 ; Store accumulator (stack relative) $60.b,S [Reads: Stack Pointer, Accumulator]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $DC.b		; 24 DC ; Test bits $DC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldx $76.b,Y		; B6 76 ; Load X register $76.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sta ($73.b,S),Y		; 93 73 ; Store accumulator (stack relative indirect indexed) ($73.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($72.b)		; 92 72 ; Store accumulator (indirect) ($72.b) [Reads: Direct Page, Accumulator]
	sbc $C3E0F0.l,X		; FF F0 E0 C3 ; Subtract with carry (long,X) $C3E0F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $09.b		; 84 09 ; Store Y register to $09.b [Reads: Y Index]
	tsb $830D.w		; 0C 0D 83 ; Test and set bits $830D.w [Reads: Accumulator] [Flags: Z]
	.db $50, $01		; 50 01 ; Branch if overflow clear to $50, $01 [Flow: branch]
	tsb $E41B.w		; 0C 1B E4 ; Test and set bits $E41B.w [Reads: Accumulator] [Flags: Z]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$74.b]		; C7 74 ; Compare accumulator (long) [$74.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $EC3FC9.l		; 8F C9 3F EC ; Store accumulator (long) $EC3FC9.l [Reads: Accumulator]
	ora $FF1FED.l,X		; 1F ED 1F FF ; Logical OR long $FF1FED.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $70.b,S		; 83 70 ; Store accumulator (stack relative) $70.b,S [Reads: Stack Pointer, Accumulator]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $F9.b		; 06 F9 ; Arithmetic shift left $F9.b [Reads: Direct Page] [Flags: NCZ]
	ora $FBE3.w,X		; 1D E3 FB ; OR accumulator with memory $FBE3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$F7.b]		; 07 F7 ; OR accumulator with memory (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $7FFF0F.l		; 0F 0F FF 7F ; OR accumulator with memory (long) $7FFF0F.l [Writes: Accumulator] [Flags: NZ]
	sbc $25FE23.l,X		; FF 23 FE 25 ; Subtract with carry (long,X) $25FE23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $28.b,S		; 83 28 ; Store accumulator (stack relative) $28.b,S [Reads: Stack Pointer, Accumulator]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $22BEFF.l,X		; 9F FF BE 22 ; Store accumulator (long,X) $22BEFF.l,X [Reads: Accumulator, X Index]
	inc $BD05.w,X		; FE 05 BD ; Increment memory $BD05.w,X [Reads: X Index] [Flags: NZ]
	lda $B9B9.w,X		; BD B9 B9 ; Load $B9B9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	jsl $011200.l		; 22 00 12 01 ; Jump to subroutine long $011200.l [Writes: Stack Pointer] [Flow: call]
	ora ($42.b,X)		; 01 42 ; Logical OR ($42.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lsr $3C.b		; 46 3C ; Logical shift right $3C.b [Reads: Direct Page] [Flags: NCZ]
	cpy #$703F.w		; C0 3F 70 ; Compare #$703F.w with Y register [Reads: Y Index] [Flags: NCZ]
	sta $0CE718.l		; 8F 18 E7 0C ; Store accumulator (long) $0CE718.l [Reads: Accumulator]
	sbc ($86.b,S),Y		; F3 86 ; Subtract with carry (stack relative indirect indexed) ($86.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FDC2.w,Y		; F9 C2 FD ; Subtract with carry $FDC2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($FE.b,X)		; E1 FE ; Subtract with carry ($FE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $7D, $0B		; 62 7D 0B ; Push effective relative address $62, $7D, $0B [Writes: Stack Pointer]
	ora $03070F.l,X		; 1F 0F 07 03 ; Logical OR long $03070F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $80, $3C		; 80 3C ; Branch always to $80, $3C [Flow: branch]
	and $CC7F7C.l,X		; 3F 7C 7F CC ; AND accumulator with memory (long,X) $CC7F7C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	mvp $84,$FF		; 44 FF 84 ; Move block positive $84,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora [$85.b]		; 07 85 ; OR accumulator with memory (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $FE81.w,X		; FE 81 FE ; Increment memory $FE81.w,X [Reads: X Index] [Flags: NZ]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Stack Pointer, Accumulator]
	cpy #$2580.w		; C0 80 25 ; Compare #$2580.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $18F3.w		; 0C F3 18 ; Test and set bits $18F3.w [Reads: Accumulator] [Flags: Z]
	sbc [$30.b]		; E7 30 ; Subtract with carry (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $419F60.l		; CF 60 9F 41 ; Compare accumulator (long) $419F60.l [Reads: Accumulator] [Flags: NCZ]
	lda $893FC3.l,X		; BF C3 3F 89 ; Load long $893FC3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$4300.w		; A0 00 43 ; Load #$4300.w into Y register [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc $FF6002.l,X		; FF 02 60 FF ; Subtract with carry (long,X) $FF6002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($22.b,S),Y		; 73 22 ; Add with carry (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C0C003.l,X		; FF 03 C0 C0 ; Subtract with carry (long,X) $C0C003.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $258C.w		; 8C 8C 25 ; Store Y register to $258C.w [Reads: Y Index]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $917173.l,X		; 3F 73 71 91 ; AND accumulator with memory (long,X) $917173.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$23E3.w		; 49 E3 23 ; Exclusive OR #$23E3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $73.b,S		; 43 73 ; Exclusive OR accumulator with stack relative $73.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp $019F24.l		; CF 24 9F 01 ; Compare accumulator (long) $019F24.l [Reads: Accumulator] [Flags: NCZ]
	cmp $0045CF.l		; CF CF 45 00 ; Compare accumulator (long) $0045CF.l [Reads: Accumulator] [Flags: NCZ]
	sbc $DE2109.l,X		; FF 09 21 DE ; Subtract with carry (long,X) $DE2109.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc [$17.b]		; E7 17 ; Subtract with carry (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $5018E8.l		; EF E8 18 50 ; Subtract with carry (long) $5018E8.l [Writes: Accumulator] [Flags: NCVZ]
	lda ($23.b,S),Y		; B3 23 ; Load accumulator (stack relative indirect indexed) ($23.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $F0F813.l,X		; FF 13 F8 F0 ; Subtract with carry (long,X) $F0F813.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$CC.b]		; E7 CC ; Subtract with carry (long) [$CC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $AF		; F0 AF ; Branch if equal to $F0, $AF [Flow: branch]
	inc $19.b		; E6 19 ; Increment $19.b [Reads: Direct Page] [Flags: NZ]
	.db $82, $7D, $80		; 82 7D 80 ; Branch always long to $82, $7D, $80 [Flow: branch]
	adc $69F30C.l,X		; 7F 0C F3 69 ; Add long $69F30C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $20.b,Y		; 96 20 ; Store X register $20.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cmp $27FD02.l,X		; DF 02 FD 27 ; Compare accumulator (long,X) $27FD02.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $F80701.l,X		; FF 01 07 F8 ; Subtract with carry (long,X) $F80701.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $96.b,S		; 83 96 ; Store accumulator (stack relative) $96.b,S [Reads: Stack Pointer, Accumulator]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($7884.w,X)		; 7C 84 78 ; Jump indirect indexed to ($7884.w,X) [Reads: X Index] [Flow: jump]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc ($13.b,S),Y		; F3 13 ; Subtract with carry (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$07.b]		; E7 07 ; Subtract with carry (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$17.b]		; E7 17 ; Subtract with carry (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3F8FF.l,X		; FF FF F8 F3 ; Subtract with carry (long,X) $F3F8FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$CC.b]		; E7 CC ; Subtract with carry (long) [$CC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $30		; 70 30 ; Branch if overflow set to $70, $30 [Flow: branch]
	eor [$67.b]		; 47 67 ; Exclusive OR accumulator with memory (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $DFF0DF.l,X		; FF DF F0 DF ; Subtract with carry (long,X) $DFF0DF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $807FD0.l		; AF D0 7F 80 ; Load long $807FD0.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $988F00.l,X		; FF 00 8F 98 ; Subtract with carry (long,X) $988F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $060300.l,X		; FF 00 03 06 ; Subtract with carry (long,X) $060300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FC03.w,Y		; F9 03 FC ; Subtract with carry $FC03.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $38DF27.l		; 0F 27 DF 38 ; OR accumulator with memory (long) $38DF27.l [Writes: Accumulator] [Flags: NZ]
	cmp [$EF.b]		; C7 EF ; Compare accumulator (long) [$EF.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $10, $65		; 10 65 ; Branch if plus to $10, $65 [Flow: branch]
	sta $F18F75.l,X		; 9F 75 8F F1 ; Store accumulator (long,X) $F18F75.l,X [Reads: Accumulator, X Index]
	ora $1FC03F.l		; 0F 3F C0 1F ; OR accumulator with memory (long) $1FC03F.l [Writes: Accumulator] [Flags: NZ]
	cpx #$C024.w		; E0 24 C0 ; Compare #$C024.w with X register [Reads: X Index] [Flags: NCZ]
	ora ($E0.b),Y		; 11 E0 ; OR accumulator with memory ($E0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sbc $4BFF88.l,X		; FF 88 FF 4B ; Subtract with carry (long,X) $4BFF88.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2CFF00.l,X		; FF 00 FF 2C ; Subtract with carry (long,X) $2CFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00BD42.l,X		; FF 42 BD 00 ; Subtract with carry (long,X) $00BD42.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	wai		; CB ; Wait for interrupt
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $42, $34		; 42 34 ; Reserved instruction
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $BB.b,X		; 76 BB ; Rotate right $BB.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $7C.b		; A4 7C ; Load $7C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cmp [$3F.b]		; C7 3F ; Compare accumulator (long) [$3F.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ror $86.b		; 66 86 ; Rotate right $86.b [Reads: Direct Page] [Flags: NCZ]
	sbc #$0201.w		; E9 01 02 ; Subtract #$0201.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora #$0304.w		; 09 04 03 ; Logical OR #$0304.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $F3.b		; 84 F3 ; Store Y register to $F3.b [Reads: Y Index]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc #$C41F.w		; E9 1F C4 ; Subtract #$C41F.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and $F827DB.l,X		; 3F DB 27 F8 ; AND accumulator with memory (long,X) $F827DB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$79.b]		; 07 79 ; OR accumulator with memory (long) [$79.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $3B.b		; 86 3B ; Store X register to $3B.b [Reads: X Index]
	cpy $1F.b		; C4 1F ; Compare $1F.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cpx #$F00F.w		; E0 0F F0 ; Compare #$F00F.w with X register [Reads: X Index] [Flags: NCZ]
	jsl $F38400.l		; 22 00 84 F3 ; Jump to subroutine long $F38400.l [Writes: Stack Pointer] [Flow: call]
	ora ($4E.b,X)		; 01 4E ; Logical OR ($4E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $FFCF02.l,X		; FF 02 CF FF ; Subtract with carry (long,X) $FFCF02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $23FF24.l		; CF 24 FF 23 ; Compare accumulator (long) $23FF24.l [Reads: Accumulator] [Flags: NCZ]
	sbc $FF01.w,Y		; F9 01 FF ; Subtract with carry $FF01.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $020024.l,X		; FF 24 00 02 ; Subtract with carry (long,X) $020024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $3F		; 30 3F ; Branch if minus to $30, $3F [Flow: branch]
	ora $9F98.w,Y		; 19 98 9F ; OR accumulator with memory $9F98.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $8F9F.w		; 9C 9F 8F ; Store zero to $8F9F.w
	sta $E0C7C7.l		; 8F C7 C7 E0 ; Store accumulator (long) $E0C7C7.l [Reads: Accumulator]
	cpx #$F8F8.w		; E0 F8 F8 ; Compare #$F8F8.w with X register [Reads: X Index] [Flags: NCZ]
	cpy #$60C0.w		; C0 C0 60 ; Compare #$60C0.w with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $38		; 70 38 ; Branch if overflow set to $70, $38 [Flow: branch]
	ora $FC8307.l,X		; 1F 07 83 FC ; Logical OR long $FC8307.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$F8.b]		; 87 F8 ; Store accumulator (long) [$F8.b] [Reads: Direct Page, Accumulator]
	asl $83F1.w		; 0E F1 83 ; Arithmetic shift left $83F1.w [Flags: NCZ]
	cpy $03.b		; C4 03 ; Compare $03.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	ora ($38.b)		; 12 38 ; OR accumulator with memory (indirect) ($38.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp [$F0.b]		; C7 F0 ; Compare accumulator (long) [$F0.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $013FC0.l		; 0F C0 3F 01 ; OR accumulator with memory (long) $013FC0.l [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FFFF3F.l		; 0F 3F FF FF ; OR accumulator with memory (long) $FFFF3F.l [Writes: Accumulator] [Flags: NZ]
	adc $867EBE.l,X		; 7F BE 7E 86 ; Add long $867EBE.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $7E.b		; 46 7E ; Logical shift right $7E.b [Reads: Direct Page] [Flags: NCZ]
	.db $82, $43, $C6		; 82 43 C6 ; Branch always long to $82, $43, $C6 [Flow: branch]
	rol $0000.w,X		; 3E 00 00 ; Rotate left $0000.w,X [Reads: X Index] [Flags: NCZ]
	bit $01.b		; 24 01 ; Test bits $01.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora $81.b		; 05 81 ; Logical OR $81.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($1E.b,X)		; 81 1E ; Store accumulator ($1E.b,X) [Reads: Direct Page, Accumulator, X Index]
	asl $3F3F.w,X		; 1E 3F 3F ; Arithmetic shift left $3F3F.w,X [Reads: X Index] [Flags: NCZ]
	eor $67.b,S		; 43 67 ; Exclusive OR accumulator with stack relative $67.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $3F3F17.l,X		; 7F 17 3F 3F ; Add long $3F3F17.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $7939.w,Y		; 39 39 79 ; AND accumulator with memory $7939.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $7F7F.w,Y		; 79 7F 7F ; Add $7F7F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($C0.b,X)		; E1 C0 ; Subtract with carry ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	cpy #$86C6.w		; C0 C6 86 ; Compare #$86C6.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $7C		; 80 7C ; Branch always to $80, $7C [Flow: branch]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($C3C3.w,X)		; 7C C3 C3 ; Jump indirect indexed to ($C3C3.w,X) [Reads: X Index] [Flow: jump]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($3F.b,X)		; 01 3F ; Logical OR ($3F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $02FF22.l,X		; 3F 22 FF 02 ; AND accumulator with memory (long,X) $02FF22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	bit $FF23.w,X		; 3C 23 FF ; Test bits $FF23.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sta [$06.b]		; 87 06 ; Store accumulator (long) [$06.b] [Reads: Direct Page, Accumulator]
	ora $17.b,S		; 03 17 ; OR accumulator with stack relative $17.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$EF.b],Y		; 17 EF ; OR accumulator with memory (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$0C.b],Y		; F7 0C ; Subtract with carry (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($D9.b,S),Y		; F3 D9 ; Subtract with carry (stack relative indirect indexed) ($D9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cmp $E7CC.w,Y		; D9 CC E7 ; Compare accumulator $E7CC.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	sbc $FF3FC0.l,X		; FF C0 3F FF ; Subtract with carry (long,X) $FF3FC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $837F91.l,X		; 7F 91 7F 83 ; Add long $837F91.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $8CFF.w,X		; 9E FF 8C ; Store zero to $8CFF.w,X [Reads: X Index]
	sbc $100027.l,X		; FF 27 00 10 ; Subtract with carry (long,X) $100027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0F.b		; E6 0F ; Increment $0F.b [Reads: Direct Page] [Flags: NZ]
	sbc ($06.b,X)		; E1 06 ; Subtract with carry ($06.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$84.b]		; 67 84 ; Add with carry (long) [$84.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $86.b		; 65 86 ; Add $86.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $96.b,X		; 75 96 ; Add $96.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E51E.w		; ED 1E E5 ; Subtract $E51E.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $06E1.w		; 0E E1 06 ; Arithmetic shift left $06E1.w [Flags: NCZ]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpx #$C833.w		; E0 33 C8 ; Compare #$C833.w with X register [Reads: X Index] [Flags: NCZ]
	cpy #$D8D0.w		; C0 D0 D8 ; Compare #$D8D0.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc [$04.b]		; E7 04 ; Subtract with carry (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $651E.w,X		; FD 1E 65 ; Subtract with carry $651E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $8E69.w,X		; 9E 69 8E ; Store zero to $8E69.w,X [Reads: X Index]
	adc [$84.b]		; 67 84 ; Add with carry (long) [$84.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $02.b,S		; E3 02 ; Subtract stack-relative $02.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc ($01.b,X)		; E1 01 ; Subtract with carry ($01.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpy #$D0C0.w		; C0 C0 D0 ; Compare #$D0C0.w with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jmp.w [$36DE]		; DC DE 36 ; Jump long indirect [$36DE] [Flow: jump]
	cmp #$E21C.w		; C9 1C E2 ; Compare #$E21C.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora #$0BF5.w		; 09 F5 0B ; Logical OR #$0BF5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc $3B.b,X		; F6 3B ; Increment memory $3B.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: NZ]
	sbc ($07.b,S),Y		; F3 07 ; Subtract with carry (stack relative indirect indexed) ($07.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $FA.b		; 05 FA ; Logical OR $FA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $FAFD.w,X		; FE FD FA ; Increment memory $FAFD.w,X [Reads: X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($FFFF.w,X)		; FC FF FF ; Jump to subroutine indirect indexed ($FFFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $E11E08.l,X		; FF 08 1E E1 ; Subtract with carry (long,X) $E11E08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $19EE.w,X		; 1D EE 19 ; OR accumulator with memory $19EE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $06F9.w		; EE F9 06 ; Increment $06F9.w [Flags: NZ]
	inc $43.b		; E6 43 ; Increment $43.b [Reads: Direct Page] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cpy $14.b		; C4 14 ; Compare $14.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	jsr ($E102.w,X)		; FC 02 E1 ; Jump to subroutine indirect indexed ($E102.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpx #$00E0.w		; E0 E0 00 ; Compare #$00E0.w with X register [Reads: X Index] [Flags: NCZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $81.b,S		; 03 81 ; OR accumulator with stack relative $81.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp $1CE3.w		; 4C E3 1C ; Jump to $1CE3.w [Flow: jump]
	adc $C0BF80.l,X		; 7F 80 BF C0 ; Add long $C0BF80.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $FF4580.l,X		; 7F 80 45 FF ; Add long $FF4580.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $26		; 30 26 ; Branch if minus to $30, $26 [Flow: branch]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $8280.w,X		; 7E 80 82 ; Rotate right $8280.w,X [Reads: X Index] [Flags: NCZ]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $FC		; 80 FC ; Branch always to $80, $FC [Flow: branch]
	sta ($62.b,X)		; 81 62 ; Store accumulator ($62.b,X) [Reads: Direct Page, Accumulator, X Index]
	adc $37E0.w,X		; 7D E0 37 ; Add $37E0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $13E1.w,X		; 1E E1 13 ; Arithmetic shift left $13E1.w,X [Reads: X Index] [Flags: NCZ]
	cpx $E817.w		; EC 17 E8 ; Compare $E817.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $619E00.l,X		; FF 00 9E 61 ; Subtract with carry (long,X) $619E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $FC43.w,X		; BC 43 FC ; Load Y register $FC43.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($E1.b,X)		; 01 E1 ; Logical OR ($E1.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $06EE.w		; EE EE 06 ; Increment $06EE.w [Flags: NZ]
	adc $3B7B.w,Y		; 79 7B 3B ; Add $3B7B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0F.b,S		; 83 0F ; Store accumulator (stack relative) $0F.b,S [Reads: Stack Pointer, Accumulator]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	sbc $43DF22.l		; EF 22 DF 43 ; Subtract with carry (long) $43DF22.l [Writes: Accumulator] [Flags: NCVZ]
	lda $847EBE.l,X		; BF BE 7E 84 ; Load long $847EBE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($7C8C.w,X)		; 7C 8C 7C ; Jump indirect indexed to ($7C8C.w,X) [Reads: X Index] [Flow: jump]
	stz $F07E.w,X		; 9E 7E F0 ; Store zero to $F07E.w,X [Reads: X Index]
	cpx #$80C0.w		; E0 C0 80 ; Compare #$80C0.w with X register [Reads: X Index] [Flags: NCZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $EF54F0.l,X		; 9F F0 54 EF ; Store accumulator (long,X) $EF54F0.l,X [Reads: Accumulator, X Index]
	.db $62, $84, $65		; 62 84 65 ; Push effective relative address $62, $84, $65 [Writes: Stack Pointer]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $7C		; 80 7C ; Branch always to $80, $7C [Flow: branch]
	sty $7C.b		; 84 7C ; Store Y register to $7C.b [Reads: Y Index]
	stx $237E.w		; 8E 7E 23 ; Store X register to $237E.w [Reads: X Index]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $00.b,X		; 74 00 ; Store zero to $00.b,X [Reads: X Index]
	ora ($01.b)		; 12 01 ; OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $F807.w,X		; FE 07 F8 ; Increment memory $F807.w,X [Reads: X Index] [Flags: NZ]
	ora $E01FF0.l		; 0F F0 1F E0 ; OR accumulator with memory (long) $E01FF0.l [Writes: Accumulator] [Flags: NZ]
	rol $7CC1.w,X		; 3E C1 7C ; Rotate left $7CC1.w,X [Reads: X Index] [Flags: NCZ]
	sta $78.b,S		; 83 78 ; Store accumulator (stack relative) $78.b,S [Reads: Stack Pointer, Accumulator]
	sta [$F1.b]		; 87 F1 ; Store accumulator (long) [$F1.b] [Reads: Direct Page, Accumulator]
	ora $F8FCFE.l		; 0F FE FC F8 ; OR accumulator with memory (long) $F8FCFE.l [Writes: Accumulator] [Flags: NZ]
	sta $70.b,S		; 83 70 ; Store accumulator (stack relative) $70.b,S [Reads: Stack Pointer, Accumulator]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor $3D.b,S		; 43 3D ; Exclusive OR accumulator with stack relative $3D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rep #$04		; C2 04 ; Reset processor status bits #$04 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc [$C2.b]		; E7 C2 ; Subtract with carry (long) [$C2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF22E3.l,X		; FF E3 22 FF ; Subtract with carry (long,X) $FF22E3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $9C.b		; 02 9C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $002618.l,X		; FF 18 26 00 ; Subtract with carry (long,X) $002618.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $3C.b,S		; 03 3C ; OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $42.b,S		; C3 42 ; Compare accumulator (stack relative) $42.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta ($44.b,X)		; 81 44 ; Store accumulator ($44.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($18.b,X)		; 81 18 ; Store accumulator ($18.b,X) [Reads: Direct Page, Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $C3		; 42 C3 ; Reserved instruction
	bit $00FF.w,X		; 3C FF 00 ; Test bits $00FF.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cmp $BD.b,S		; C3 BD ; Compare accumulator (stack relative) $BD.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	and $7E.b,S		; 23 7E ; AND accumulator with stack relative $7E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($3C.b,X)		; 01 3C ; Logical OR ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $42, $45		; 42 45 ; Reserved instruction
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $433FFF.l,X		; 7F FF 3F 43 ; Add long $433FFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF2200.l,X		; FF 00 22 FF ; Subtract with carry (long,X) $FF2200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $BF847F.l		; 22 7F 84 BF ; Jump to subroutine long $BF847F.l [Writes: Stack Pointer] [Flow: call]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($18.b,X)		; 81 18 ; Store accumulator ($18.b,X) [Reads: Direct Page, Accumulator, X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$2300.w		; C9 00 23 ; Compare #$2300.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ror $D683.w,X		; 7E 83 D6 ; Rotate right $D683.w,X [Reads: X Index] [Flags: NCZ]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $1FF1.w		; 0E F1 1F ; Arithmetic shift left $1FF1.w [Flags: NCZ]
	inc $F30F.w		; EE 0F F3 ; Increment $F30F.w [Flags: NZ]
	ora $FD.b,S		; 03 FD ; OR accumulator with stack relative $FD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $64BB90.l		; 6F 90 BB 64 ; Add with carry (long) $64BB90.l [Writes: Accumulator] [Flags: NCVZ]
	cmp $FF2774.l,X		; DF 74 27 FF ; Compare accumulator (long,X) $FF2774.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ora $FDC877.l		; 0F 77 C8 FD ; OR accumulator with memory (long) $FDC877.l [Writes: Accumulator] [Flags: NZ]
	stx $CF.b		; 86 CF ; Store X register to $CF.b [Reads: X Index]
	rol $67.b,X		; 36 67 ; Rotate left $67.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda [$D8.b],Y		; B7 D8 ; Load accumulator (long indexed) [$D8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $8CFF4C.l,X		; FF 4C FF 8C ; Subtract with carry (long,X) $8CFF4C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF2788.l,X		; FF 88 27 FF ; Subtract with carry (long,X) $FF2788.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $7B73DE.l		; 0F DE 73 7B ; OR accumulator with memory (long) $7B73DE.l [Writes: Accumulator] [Flags: NZ]
	lda $D67D.w		; AD 7D D6 ; Load $D67D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $6FDA.w		; 6D DA 6F ; Add $6FDA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sbc $92FFDA.l		; EF DA FF 92 ; Subtract with carry (long) $92FFDA.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF2794.l,X		; FF 94 27 FF ; Subtract with carry (long,X) $FF2794.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $009483.l,X		; FF 83 94 00 ; Subtract with carry (long,X) $009483.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp [$7C.b]		; C7 7C ; Compare accumulator (long) [$7C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sty $9878.w		; 8C 78 98 ; Store Y register to $9878.w [Reads: Y Index]
	eor $70.b,S		; 43 70 ; Exclusive OR accumulator with stack relative $70.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	sbc $F0F8FF.l,X		; FF FF F8 F0 ; Subtract with carry (long,X) $F0F8FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C7.b,S		; E3 C7 ; Subtract stack-relative $C7.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp $0043CF.l		; CF CF 43 00 ; Compare accumulator (long) $0043CF.l [Reads: Accumulator] [Flags: NCZ]
	sbc $8F7001.l,X		; FF 01 70 8F ; Subtract with carry (long,X) $8F7001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $78.b,S		; 43 78 ; Exclusive OR accumulator with stack relative $78.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta [$05.b]		; 87 05 ; Store accumulator (long) [$05.b] [Reads: Direct Page, Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$07.b]		; C7 07 ; Compare accumulator (long) [$07.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jsr ($FB0D.w,X)		; FC 0D FB ; Jump to subroutine indirect indexed ($FB0D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $FC		; 10 FC ; Branch if plus to $10, $FC [Flow: branch]
	dec $39.b		; C6 39 ; Decrement $39.b [Reads: Direct Page] [Flags: NZ]
	cmp $7C.b,S		; C3 7C ; Compare accumulator (stack relative) $7C.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cpx $7B.b		; E4 7B ; Compare $7B.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	jsr ($E603.w,X)		; FC 03 E6 ; Jump to subroutine indirect indexed ($E603.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	adc [$99.b],Y		; 77 99 ; Add with carry (long indexed) [$99.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $E41BC0.l,X		; 3F C0 1B E4 ; AND accumulator with memory (long,X) $E41BC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($80.b)		; 12 80 ; OR accumulator with memory (indirect) ($80.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$FEC0.w		; C0 C0 FE ; Compare #$FEC0.w with Y register [Reads: Y Index] [Flags: NCZ]
	and [$F8.b]		; 27 F8 ; AND accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $6CF1.w		; 4E F1 6C ; Logical shift right $6CF1.w [Flags: NCZ]
	sbc ($F5.b,S),Y		; F3 F5 ; Subtract with carry (stack relative indirect indexed) ($F5.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	lsr $D9.b,X		; 56 D9 ; Logical shift right $D9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lda [$78.b],Y		; B7 78 ; Load accumulator (long indexed) [$78.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $24FF30.l		; CF 30 FF 24 ; Compare accumulator (long) $24FF30.l [Reads: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0022.w		; 20 22 00 ; Jump to subroutine at $0022.w [Writes: Stack Pointer] [Flow: call]
	ora $5F.b,X		; 15 5F ; OR accumulator with memory $5F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $52		; 80 52 ; Branch always to $80, $52 [Flow: branch]
	.db $80, $5F		; 80 5F ; Branch always to $80, $5F [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $3F		; 80 3F ; Branch always to $80, $3F [Flow: branch]
	cpy #$FC02.w		; C0 02 FC ; Compare #$FC02.w with Y register [Reads: Y Index] [Flags: NCZ]
	inc $FF00.w,X		; FE 00 FF ; Increment memory $FF00.w,X [Reads: X Index] [Flags: NZ]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $BFA0.w		; AD A0 BF ; Load $BFA0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$62FD.w		; C0 FD 62 ; Compare #$62FD.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $000A.w,X		; FD 0A 00 ; Subtract with carry $000A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $609F40.l,X		; BF 40 9F 60 ; Load long $609F40.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $02FD00.l,X		; FF 00 FD 02 ; Subtract with carry (long,X) $02FD00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $8391.w		; 6E 91 83 ; Rotate right $8391.w [Flags: NCZ]
	sty $1701.w		; 8C 01 17 ; Store Y register to $1701.w [Reads: Y Index]
	and $7B7C.w,Y		; 39 7C 7B ; AND accumulator with memory $7B7C.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $9B.b,S		; 03 9B ; OR accumulator with stack relative $9B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $FEC0.w,Y		; D9 C0 FE ; Compare accumulator $FEC0.w,Y [Reads: Y Index] [Flags: NCZ]
	lda $B27F.w,Y		; B9 7F B2 ; Load $B27F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $C47FA2.l,X		; 7F A2 7F C4 ; Add long $C47FA2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $349F64.l,X		; 3F 64 9F 34 ; AND accumulator with memory (long,X) $349F64.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $0FE718.l		; CF 18 E7 0F ; Compare accumulator (long) $0FE718.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $80.b,S		; 23 80 ; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$F0E0.w		; C0 E0 F0 ; Compare #$F0E0.w with Y register [Reads: Y Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	jsr $4002.w		; 20 02 40 ; Jump to subroutine at $4002.w [Writes: Stack Pointer] [Flow: call]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	jsr $0810.w		; 20 10 08 ; Jump to subroutine at $0810.w [Writes: Stack Pointer] [Flow: call]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($9F.b,X)		; 01 9F ; Logical OR ($9F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $E67F9E.l,X		; 7F 9E 7F E6 ; Add long $E67F9E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $8F4472.l,X		; 1F 72 44 8F ; Logical OR long $8F4472.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($83.b,S),Y		; 73 83 ; Add with carry (stack relative indirect indexed) ($83.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora ($02.b)		; 12 02 ; OR accumulator with memory (indirect) ($02.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $802200.l		; 22 00 22 80 ; Jump to subroutine long $802200.l [Writes: Stack Pointer] [Flow: call]
	jsl $FF0E00.l		; 22 00 0E FF ; Jump to subroutine long $FF0E00.l [Writes: Stack Pointer] [Flow: call]
	ora #$01F7.w		; 09 F7 01 ; Logical OR #$01F7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $18BF58.l,X		; FF 58 BF 18 ; Subtract with carry (long,X) $18BF58.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FD02.l,X		; FF 02 FD 00 ; Subtract with carry (long,X) $00FD02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $27FF60.l,X		; FF 60 FF 27 ; Subtract with carry (long,X) $27FF60.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $30EF00.l,X		; FF 00 EF 30 ; Subtract with carry (long,X) $30EF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EB3443.l		; EF 43 34 EB ; Subtract with carry (long) $EB3443.l [Writes: Accumulator] [Flags: NCVZ]
	asl $14.b		; 06 14 ; Arithmetic shift left $14.b [Reads: Direct Page] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($24.b,X)		; 81 24 ; Store accumulator ($24.b,X) [Reads: Direct Page, Accumulator, X Index]
	ror $3C01.w,X		; 7E 01 3C ; Rotate right $3C01.w,X [Reads: X Index] [Flags: NCZ]
	sta ($44.b,X)		; 81 44 ; Store accumulator ($44.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $880300.l,X		; FF 00 03 88 ; Subtract with carry (long,X) $880300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4475FF.l,X		; FF FF 75 44 ; Subtract with carry (long,X) $4475FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $240100.l,X		; FF 00 01 24 ; Subtract with carry (long,X) $240100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $5A.b,S		; 23 5A ; AND accumulator with stack relative $5A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($18.b)		; 12 18 ; OR accumulator with memory (indirect) ($18.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $6FDB.w,Y		; 99 DB 6F ; Store accumulator to $6FDB.w,Y [Reads: Y Index, Accumulator]
	lda ($3F.b),Y		; B1 3F ; Load accumulator ($3F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $1BDA.w,X		; 3D DA 1B ; AND accumulator with memory $1BDA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $1F.b		; E6 1F ; Increment $1F.b [Reads: Direct Page] [Flags: NZ]
	inc $E41F.w		; EE 1F E4 ; Increment $E41F.w [Flags: NZ]
	asl $F9.b		; 06 F9 ; Arithmetic shift left $F9.b [Reads: Direct Page] [Flags: NCZ]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $669B0F.l,X		; FF 0F 9B 66 ; Subtract with carry (long,X) $669B0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FD72.w		; CD 72 FD ; Compare $FD72.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sbc $66DF92.l,X		; FF 92 DF 66 ; Subtract with carry (long,X) $66DF92.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $A4FF74.l		; CF 74 FF A4 ; Compare accumulator (long) $A4FF74.l [Reads: Accumulator] [Flags: NCZ]
	ror $28C1.w,X		; 7E C1 28 ; Rotate right $28C1.w,X [Reads: X Index] [Flags: NCZ]
	sbc $FB210E.l,X		; FF 0E 21 FB ; Subtract with carry (long,X) $FB210E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $F9.b		; 45 F9 ; Exclusive OR $F9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: NCZ]
	lsr $BF.b		; 46 BF ; Logical shift right $BF.b [Reads: Direct Page] [Flags: NCZ]
	inc $74DF.w		; EE DF 74 ; Increment $74DF.w [Flags: NZ]
	sbc $03FE31.l,X		; FF 31 FE 03 ; Subtract with carry (long,X) $03FE31.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta [$E1.b]		; 87 E1 ; Store accumulator (long) [$E1.b] [Reads: Direct Page, Accumulator]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $380F34.l,X		; 1F 34 0F 38 ; Logical OR long $380F34.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$7F.b]		; 27 7F ; AND accumulator with memory (long) [$7F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $70, $23		; 70 23 ; Branch if overflow set to $70, $23 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpy #$4380.w		; C0 80 43 ; Compare #$4380.w with Y register [Reads: Y Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc [$0B.b],Y		; F7 0B ; Subtract with carry (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$04F7.w		; 09 F7 04 ; Logical OR #$04F7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	adc ($CC.b,S),Y		; 73 CC ; Add with carry (stack relative indirect indexed) ($CC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $8F		; F0 8F ; Branch if equal to $F0, $8F [Flow: branch]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cpx #$221F.w		; E0 1F 22 ; Compare #$221F.w with X register [Reads: X Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	jsr ($FB05.w,X)		; FC 05 FB ; Jump to subroutine indirect indexed ($FB05.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	mvp $0F,$F7		; 44 F7 0F ; Move block positive $0F,$F7 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $08,$F7		; 44 F7 08 ; Move block positive $08,$F7 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $F0.b		; 25 F0 ; Logical AND $F0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	.db $50, $FF		; 50 FF ; Branch if overflow clear to $50, $FF [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $14F72A.l,X		; FF 2A F7 14 ; Subtract with carry (long,X) $14F72A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $22FF00.l,X		; FF 00 FF 22 ; Subtract with carry (long,X) $22FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $E718F0.l		; 0F F0 18 E7 ; OR accumulator with memory (long) $E718F0.l [Writes: Accumulator] [Flags: NZ]
	bit $CC.b,X		; 34 CC ; Test bits $CC.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $50.b,S		; 43 50 ; Exclusive OR accumulator with stack relative $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	jmp.w [$823C]		; DC 3C 82 ; Jump long indirect [$823C] [Flow: jump]
	.db $62, $83, $62		; 62 83 62 ; Push effective relative address $62, $83, $62 [Writes: Stack Pointer]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $1D838F.l		; 8F 8F 83 1D ; Store accumulator (long) $1D838F.l [Reads: Accumulator]
	sta $94.b,S		; 83 94 ; Store accumulator (stack relative) $94.b,S [Reads: Stack Pointer, Accumulator]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$77.b]		; C7 77 ; Compare accumulator (long) [$77.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $9F6F43.l		; 8F 43 6F 9F ; Store accumulator (long) $9F6F43.l [Reads: Accumulator]
	ora $E3.b,S		; 03 E3 ; OR accumulator with stack relative $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $831FFD.l,X		; 1F FD 1F 83 ; Logical OR long $831FFD.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx #$2200.w		; A2 00 22 ; Load #$2200.w into X register [Writes: X Index] [Flags: NZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FCFC0B.l,X		; FF 0B FC FC ; Subtract with carry (long,X) $FCFC0B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FBFB1F.l,X		; 1F 1F FB FB ; Logical OR long $FBFB1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	jsl $F809FF.l		; 22 FF 09 F8 ; Jump to subroutine long $F809FF.l [Writes: Stack Pointer] [Flow: call]
	cpx #$0F07.w		; E0 07 0F ; Compare #$0F07.w with X register [Reads: X Index] [Flags: NCZ]
	ora $DDFFE3.l,X		; 1F E3 FF DD ; Logical OR long $DDFFE3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF22BE.l,X		; FF BE 22 FF ; Subtract with carry (long,X) $FF22BE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$BE.b]		; 07 BE ; OR accumulator with memory (long) [$BE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $DDDD.w,Y		; BE DD DD ; Load X register $DDDD.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $0023FF.l,X		; FF FF 23 00 ; Subtract with carry (long,X) $0023FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$412F.w		; E0 2F 41 ; Compare #$412F.w with X register [Reads: X Index] [Flags: NCZ]
	jsl $00001C.l		; 22 1C 00 00 ; Jump to subroutine long $00001C.l [Writes: Stack Pointer] [Flow: call]
	sbc $180FF0.l,X		; FF F0 0F 18 ; Subtract with carry (long,X) $180FF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$0C.b]		; E7 0C ; Subtract with carry (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($C6.b,S),Y		; F3 C6 ; Subtract with carry (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FD62.w,Y		; F9 62 FD ; Subtract with carry $FD62.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($FC.b,S),Y		; B3 FC ; Load accumulator (stack relative indirect indexed) ($FC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	jmp ($0FFF.w,X)		; 7C FF 0F ; Jump indirect indexed to ($0FFF.w,X) [Reads: X Index] [Flow: jump]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $C7.b		; C4 C7 ; Compare $C7.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sty $398F.w		; 8C 8F 39 ; Store Y register to $398F.w [Reads: Y Index]
	and $E37F71.l,X		; 3F 71 7F E3 ; AND accumulator with memory (long,X) $E37F71.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $8EFFC7.l,X		; FF C7 FF 8E ; Subtract with carry (long,X) $8EFFC7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $38FF3C.l,X		; FF 3C FF 38 ; Subtract with carry (long,X) $38FF3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $C0		; 70 C0 ; Branch if overflow set to $70, $C0 [Flow: branch]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $1CF1.w		; 0E F1 1C ; Arithmetic shift left $1CF1.w [Flags: NCZ]
	sbc $39.b,S		; E3 39 ; Subtract stack-relative $39.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp [$73.b]		; C7 73 ; Compare accumulator (long) [$73.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $CE9F67.l		; 8F 67 9F CE ; Store accumulator (long) $CE9F67.l [Reads: Accumulator]
	rol $A086.w,X		; 3E 86 A0 ; Rotate left $A086.w,X [Reads: X Index] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E7.b,X)		; 01 E7 ; Logical OR ($E7.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $AE.b,S		; 83 AE ; Store accumulator (stack relative) $AE.b,S [Reads: Stack Pointer, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $22.b		; 25 22 ; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $1C0F.w,X		; 3D 0F 1C ; AND accumulator with memory $1C0F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $0000.w		; 1C 00 00 ; Test and reset bits $0000.w [Reads: Accumulator] [Flags: Z]
	adc $63.b,S		; 63 63 ; Add with carry (stack relative) $63.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rep #$C2		; C2 C2 ; Reset processor status bits #$C2 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $FF.b,S		; E3 FF ; Subtract stack-relative $FF.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	stz $9171.w		; 9C 71 91 ; Store zero to $9171.w
	eor #$23E3.w		; 49 E3 23 ; Exclusive OR #$23E3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $73.b,S		; 43 73 ; Exclusive OR accumulator with stack relative $73.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	cmp $839F24.l		; CF 24 9F 83 ; Compare accumulator (long) $839F24.l [Reads: Accumulator] [Flags: NCZ]
	ror $01.b		; 66 01 ; Rotate right $01.b [Reads: Direct Page] [Flags: NCZ]
	ora $FF07.w		; 0D 07 FF ; Logical OR $FF07.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $E738F8.l		; 0F F8 38 E7 ; OR accumulator with memory (long) $E738F8.l [Writes: Accumulator] [Flags: NZ]
	adc $BF5CDF.l		; 6F DF 5C BF ; Add with carry (long) $BF5CDF.l [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $227FB8.l,X		; BF B8 7F 22 ; Load long $227FB8.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $E0F814.l,X		; FF 14 F8 E0 ; Subtract with carry (long,X) $E0F814.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$80C0.w		; C0 C0 80 ; Compare #$80C0.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $AF		; F0 AF ; Branch if equal to $F0, $AF [Flow: branch]
	inc $19.b		; E6 19 ; Increment $19.b [Reads: Direct Page] [Flags: NZ]
	.db $82, $7D, $80		; 82 7D 80 ; Branch always long to $82, $7D, $80 [Flow: branch]
	adc $69F30C.l,X		; 7F 0C F3 69 ; Add long $69F30C.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $20.b,Y		; 96 20 ; Store X register $20.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	cmp $27FD02.l,X		; DF 02 FD 27 ; Compare accumulator (long,X) $27FD02.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $F80717.l,X		; FF 17 07 F8 ; Subtract with carry (long,X) $F80717.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $C03FE0.l,X		; 1F E0 3F C0 ; Logical OR long $C03FE0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($7884.w,X)		; 7C 84 78 ; Jump indirect indexed to ($7884.w,X) [Reads: X Index] [Flow: jump]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc ($13.b,S),Y		; F3 13 ; Subtract with carry (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$07.b]		; E7 07 ; Subtract with carry (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$17.b]		; E7 17 ; Subtract with carry (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F3F8FF.l,X		; FF FF F8 F3 ; Subtract with carry (long,X) $F3F8FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$CC.b]		; E7 CC ; Subtract with carry (long) [$CC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $30		; 70 30 ; Branch if overflow set to $70, $30 [Flow: branch]
	eor [$67.b]		; 47 67 ; Exclusive OR accumulator with memory (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $DFF0DF.l,X		; FF DF F0 DF ; Subtract with carry (long,X) $DFF0DF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $2083D0.l		; AF D0 83 20 ; Load long $2083D0.l into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $002498.l		; 8F 98 24 00 ; Store accumulator (long) $002498.l [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $060300.l,X		; FF 00 03 06 ; Subtract with carry (long,X) $060300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FC03.w,Y		; F9 03 FC ; Subtract with carry $FC03.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $18.b,S		; 03 18 ; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$45.b],Y		; F7 45 ; Subtract with carry (long indexed) [$45.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc [$05.b]		; E7 05 ; Subtract with carry (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	trb $0FF3.w		; 1C F3 0F ; Test and reset bits $0FF3.w [Reads: Accumulator] [Flags: Z]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $F802F0.l		; 22 F0 02 F8 ; Jump to subroutine long $F802F0.l [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($FF22.w,X)		; FC 22 FF ; Jump to subroutine indirect indexed ($FF22.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $FF88.w		; 0D 88 FF ; Logical OR $FF88.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $2CFF00.l,X		; FF 00 FF 2C ; Subtract with carry (long,X) $2CFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00BD42.l,X		; FF 42 BD 00 ; Subtract with carry (long,X) $00BD42.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	wai		; CB ; Wait for interrupt
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$422A.w		; E0 2A 42 ; Compare #$422A.w with X register [Reads: X Index] [Flags: NCZ]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lsr $BD.b,X		; 56 BD ; Logical shift right $BD.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc ($AF.b,X)		; 61 AF ; Add with carry ($AF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $DC.b,X		; 76 DC ; Rotate right $DC.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $1CEB.w,X		; 3E EB 1C ; Rotate left $1CEB.w,X [Reads: X Index] [Flags: NCZ]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $F807C2.l,X		; 3F C2 07 F8 ; AND accumulator with memory (long,X) $F807C2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($02.b,X)		; 21 02 ; Logical AND ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C2		; 80 C2 ; Branch always to $80, $C2 [Flow: branch]
	cpx #$EDF8.w		; E0 F8 ED ; Compare #$EDF8.w with X register [Reads: X Index] [Flags: NCZ]
	and ($DE.b,S),Y		; 33 DE ; AND accumulator (stack relative indirect indexed) ($DE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $D9.b,S		; 23 D9 ; AND accumulator with stack relative $D9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rol $E3.b		; 26 E3 ; Rotate left $E3.b [Reads: Direct Page] [Flags: NCZ]
	ora $08F7.w,X		; 1D F7 08 ; OR accumulator with memory $08F7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $C23D82.l,X		; 7F 82 3D C2 ; Add long $C23D82.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $800400.l		; 22 00 04 80 ; Jump to subroutine long $800400.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpx #$4EF8.w		; E0 F8 4E ; Compare #$4EF8.w with X register [Reads: X Index] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $22DF00.l,X		; FF 00 DF 22 ; Subtract with carry (long,X) $22DF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FBFB06.l,X		; FF 06 FB FB ; Subtract with carry (long,X) $FBFB06.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFEFFF.l,X		; FF FF EF FF ; Subtract with carry (long,X) $FFEFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$22.b]		; E7 22 ; Subtract with carry (long) [$22.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000022.l,X		; FF 22 00 00 ; Subtract with carry (long,X) $000022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $23.b		; 04 23 ; Test and set bits $23.b [Reads: Accumulator] [Flags: Z]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$29.b]		; 27 29 ; AND accumulator with memory (long) [$29.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $9F8C.w,X		; 3E 8C 9F ; Rotate left $9F8C.w,X [Reads: X Index] [Flags: NCZ]
	dec $DF.b,X		; D6 DF ; Decrement memory $DF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	cmp $F0E7E5.l		; CF E5 E7 F0 ; Compare accumulator (long) $F0E7E5.l [Reads: Accumulator] [Flags: NCZ]
	sbc ($FC.b),Y		; F1 FC ; Subtract with carry ($FC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($FEFE.w,X)		; FC FE FE ; Jump to subroutine indirect indexed ($FEFE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$2060.w		; C0 60 20 ; Compare #$2060.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	asl $0103.w		; 0E 03 01 ; Arithmetic shift left $0103.w [Flags: NCZ]
	adc $F1FE.w,Y		; 79 FE F1 ; Add $F1FE.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FEE1.w,X		; FE E1 FE ; Increment memory $FEE1.w,X [Reads: X Index] [Flags: NZ]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Stack Pointer, Accumulator]
	asl $3CE1.w,X		; 1E E1 3C ; Arithmetic shift left $3CE1.w,X [Reads: X Index] [Flags: NCZ]
	cmp $E0.b,S		; C3 E0 ; Compare accumulator (stack relative) $E0.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ora $243FC0.l,X		; 1F C0 3F 24 ; Logical OR long $243FC0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $E160E0.l		; 0F E0 60 E1 ; OR accumulator with memory (long) $E160E0.l [Writes: Accumulator] [Flags: NZ]
	adc ($99.b,X)		; 61 99 ; Add with carry ($99.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $BD4D.w,Y		; 79 4D BD ; Add $BD4D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $4C.b,S		; 43 4C ; Exclusive OR accumulator with stack relative $4C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $4283.w,X		; BC 83 42 ; Load Y register $4283.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $82061E.l,X		; 1F 1E 06 82 ; Logical OR long $82061E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	asl $FF06.w,X		; 1E 06 FF ; Arithmetic shift left $FF06.w,X [Reads: X Index] [Flags: NCZ]
	sbc $FE22F6.l,X		; FF F6 22 FE ; Subtract with carry (long,X) $FE22F6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $FD00E7.l		; 22 E7 00 FD ; Jump to subroutine long $FD00E7.l [Writes: Stack Pointer] [Flow: call]
	jsl $9F11FF.l		; 22 FF 11 9F ; Jump to subroutine long $9F11FF.l [Writes: Stack Pointer] [Flow: call]
	sta $010100.l,X		; 9F 00 01 01 ; Store accumulator (long,X) $010100.l,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp ($FF83.w,X)		; 7C 83 FF ; Jump indirect indexed to ($FF83.w,X) [Reads: X Index] [Flow: jump]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($C3C3.w,X)		; 7C C3 C3 ; Jump indirect indexed to ($C3C3.w,X) [Reads: X Index] [Flow: jump]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($3F.b,X)		; 01 3F ; Logical OR ($3F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $02FF22.l,X		; 3F 22 FF 02 ; AND accumulator with memory (long,X) $02FF22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	bit $FF23.w,X		; 3C 23 FF ; Test bits $FF23.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $B8.b,S		; 43 B8 ; Exclusive OR accumulator with stack relative $B8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $7FBC0B.l,X		; 7F 0B BC 7F ; Add long $7FBC0B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $BF5FBF.l,X		; FF BF 5F BF ; Subtract with carry (long,X) $BF5FBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $E738DF.l		; 6F DF 38 E7 ; Add with carry (long) $E738DF.l [Writes: Accumulator] [Flags: NCVZ]
	ora $8022F8.l		; 0F F8 22 80 ; OR accumulator with memory (long) $8022F8.l [Writes: Accumulator] [Flags: NZ]
	ora $C0.b		; 05 C0 ; Logical OR $C0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$F8E0.w		; C0 E0 F8 ; Compare #$F8E0.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $E383C0.l,X		; FF C0 83 E3 ; Subtract with carry (long,X) $E383C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $837F91.l,X		; 7F 91 7F 83 ; Add long $837F91.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $8CFF.w,X		; 9E FF 8C ; Store zero to $8CFF.w,X [Reads: X Index]
	sbc $100027.l,X		; FF 27 00 10 ; Subtract with carry (long,X) $100027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0F.b		; E6 0F ; Increment $0F.b [Reads: Direct Page] [Flags: NZ]
	sbc ($06.b,X)		; E1 06 ; Subtract with carry ($06.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$84.b]		; 67 84 ; Add with carry (long) [$84.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $86.b		; 65 86 ; Add $86.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $96.b,X		; 75 96 ; Add $96.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E51E.w		; ED 1E E5 ; Subtract $E51E.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl $06E1.w		; 0E E1 06 ; Arithmetic shift left $06E1.w [Flags: NCZ]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpx #$C833.w		; E0 33 C8 ; Compare #$C833.w with X register [Reads: X Index] [Flags: NCZ]
	cpy #$D8D0.w		; C0 D0 D8 ; Compare #$D8D0.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc [$04.b]		; E7 04 ; Subtract with carry (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $651E.w,X		; FD 1E 65 ; Subtract with carry $651E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $8E69.w,X		; 9E 69 8E ; Store zero to $8E69.w,X [Reads: X Index]
	adc [$84.b]		; 67 84 ; Add with carry (long) [$84.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $02.b,S		; E3 02 ; Subtract stack-relative $02.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc ($01.b,X)		; E1 01 ; Subtract with carry ($01.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cpy #$D0C0.w		; C0 C0 D0 ; Compare #$D0C0.w with Y register [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	jmp.w [$36DE]		; DC DE 36 ; Jump long indirect [$36DE] [Flow: jump]
	cmp #$E618.w		; C9 18 E6 ; Compare #$E618.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora #$33F5.w		; 09 F5 33 ; Logical OR #$33F5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec $F60B.w		; CE 0B F6 ; Decrement $F60B.w [Flags: NZ]
	tsb $03F3.w		; 0C F3 03 ; Test and set bits $03F3.w [Reads: Accumulator] [Flags: Z]
	jsr ($F30C.w,X)		; FC 0C F3 ; Jump to subroutine indirect indexed ($F30C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $FAF9.w,X		; FE F9 FA ; Increment memory $FAF9.w,X [Reads: X Index] [Flags: NZ]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	jsr ($FFFB.w,X)		; FC FB FF ; Jump to subroutine indirect indexed ($FFFB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $43FF00.l,X		; FF 00 FF 43 ; Subtract with carry (long,X) $43FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $001300.l,X		; FF 00 13 00 ; Subtract with carry (long,X) $001300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $7D7F5F.l,X		; 7F 5F 7F 7D ; Add long $7D7F5F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $7C37.w,X		; 7E 37 7C ; Rotate right $7C37.w,X [Reads: X Index] [Flags: NCZ]
	ora $FFDFF8.l,X		; 1F F8 DF FF ; Logical OR long $FFDFF8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	wai		; CB ; Wait for interrupt
	cpx $93.b		; E4 93 ; Compare $93.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	stx $94.b		; 86 94 ; Store X register to $94.b [Reads: X Index]
	sbc $00FF43.l,X		; FF 43 FF 00 ; Subtract with carry (long,X) $00FF43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $9103FF.l		; 22 FF 03 91 ; Jump to subroutine long $9103FF.l [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0005.l,X		; FF 05 00 FF ; Subtract with carry (long,X) $FF0005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$90.b],Y		; D7 90 ; Compare accumulator (long indexed) [$90.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc $FF2200.l,X		; FF 00 22 FF ; Subtract with carry (long,X) $FF2200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $1A.b		; 84 1A ; Store Y register to $1A.b [Reads: Y Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc [$FF.b],Y		; 77 FF ; Add with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $43.b,X		; F5 43 ; Subtract $43.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr ($FFFE.w,X)		; FC FE FF ; Jump to subroutine indirect indexed ($FFFE.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($A4.b),Y		; 51 A4 ; Exclusive OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFD00.l,X		; FF 00 FD FF ; Subtract with carry (long,X) $FFFD00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $7FDFFF.l,X		; 7F FF DF 7F ; Add long $7FDFFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $7F.b,X		; 75 7F ; Add $7F.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	inc $FFEF.w,X		; FE EF FF ; Increment memory $FFEF.w,X [Reads: X Index] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $D4.b		; 85 D4 ; Store accumulator to $D4.b [Reads: Accumulator]
	cmp ($ED.b,S),Y		; D3 ED ; Compare accumulator (stack relative indirect indexed) ($ED.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor $F8.b,S		; 43 F8 ; Exclusive OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $38.b,S		; 03 38 ; OR accumulator with stack relative $38.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta $00FF43.l,X		; 9F 43 FF 00 ; Store accumulator (long,X) $00FF43.l,X [Reads: Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpy #$FC0F.w		; C0 0F FC ; Compare #$FC0F.w with Y register [Reads: Y Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp $1CBF80.l,X		; DF 80 BF 1C ; Compare accumulator (long,X) $1CBF80.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0023.w,X		; 7E 23 00 ; Rotate right $0023.w,X [Reads: X Index] [Flags: NCZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($0027.w,X)		; 7C 27 00 ; Jump indirect indexed to ($0027.w,X) [Reads: X Index] [Flow: jump]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $93		; 30 93 ; Branch if minus to $30, $93 [Flow: branch]
	sbc $030023.l,X		; FF 23 00 03 ; Subtract with carry (long,X) $030023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $D6CF00.l,X		; FF 00 CF D6 ; Subtract with carry (long,X) $D6CF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $F0.b,S		; 43 F0 ; Exclusive OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	.db $30, $10		; 30 10 ; Branch if minus to $30, $10 [Flow: branch]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	.db $D0, $90		; D0 90 ; Branch if not equal to $D0, $90 [Flow: branch]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $91		; F0 91 ; Branch if equal to $F0, $91 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $F8.b,S		; 03 F8 ; OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$F0.b]		; 07 F0 ; OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $002B.w,X		; 9E 2B 00 ; Store zero to $002B.w,X [Reads: X Index]
	ora $C0.b,S		; 03 C0 ; OR accumulator with stack relative $C0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$E020.w		; C0 20 E0 ; Compare #$E020.w with Y register [Reads: Y Index] [Flags: NCZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $0027.w		; 20 27 00 ; Jump to subroutine at $0027.w [Writes: Stack Pointer] [Flow: call]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $0704.w		; 0E 04 07 ; Arithmetic shift left $0704.w [Flags: NCZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $0D.b		; 06 0D ; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: NCZ]
	tsb $27.b		; 04 27 ; Test and set bits $27.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF43.l,X		; FF 43 FF 00 ; Subtract with carry (long,X) $00FF43.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $0023FB.l,X		; 7F FB 23 00 ; Add long $0023FB.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($27.b,S),Y		; F3 27 ; Subtract with carry (stack relative indirect indexed) ($27.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$10E0.w		; E0 E0 10 ; Compare #$10E0.w with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $23E0.w		; 20 E0 23 ; Jump to subroutine at $23E0.w [Writes: Stack Pointer] [Flow: call]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$A010.w		; E0 10 A0 ; Compare #$A010.w with X register [Reads: X Index] [Flags: NCZ]
	ldy #$0445.w		; A0 45 04 ; Load #$0445.w into Y register [Writes: Y Index] [Flags: NZ]
	asl $43.b		; 06 43 ; Arithmetic shift left $43.b [Reads: Direct Page] [Flags: NCZ]
	ora #$440D.w		; 09 0D 44 ; Logical OR #$440D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $0F00.w		; 0D 00 0F ; Logical OR $0F00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0B2205.l		; 22 05 22 0B ; Jump to subroutine long $0B2205.l [Writes: Stack Pointer] [Flow: call]
	cpx #$0A53.w		; E0 53 0A ; Compare #$0A53.w with X register [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
.ACCU 8
.INDEX 8
	sep #$FE		; E2 FE
	cpy $7C.b		; C4 7C ; Compare $7C.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	jsr $40E0.w		; 20 E0 40 ; Jump to subroutine at $40E0.w [Writes: Stack Pointer] [Flow: call]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $99		; 80 99 ; Branch always to $80, $99 [Flow: branch]
	lda ($64.b)		; B2 64 ; Load accumulator (indirect) ($64.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $90, $20		; 90 20 ; Branch if carry clear to $90, $20 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	asl $0D09.w		; 0E 09 0D ; Arithmetic shift left $0D09.w [Flags: NCZ]
	ora ($1D.b),Y		; 11 1D ; OR accumulator with memory ($1D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($1B.b,S),Y		; 13 1B ; OR accumulator (stack relative indirect indexed) ($1B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $3A.b,S		; 23 3A ; AND accumulator with stack relative $3A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$37.b]		; 27 37 ; AND accumulator with memory (long) [$37.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$76.b]		; 47 76 ; Exclusive OR accumulator with memory (long) [$76.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $0B0965.l		; 4F 65 09 0B ; Exclusive OR accumulator with memory (long) $0B0965.l [Writes: Accumulator] [Flags: NZ]
	ora ($17.b)		; 12 17 ; OR accumulator with memory (indirect) ($17.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $29.b		; 24 29 ; Test bits $29.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	lsr $FE55.w		; 4E 55 FE ; Logical shift right $FE55.w [Flags: NCZ]
	sbc [$FC.b],Y		; F7 FC ; Subtract with carry (long indexed) [$FC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda [$FC.b],Y		; B7 FC ; Load accumulator (long indexed) [$FC.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $F9EFF8.l,X		; FF F8 EF F9 ; Subtract with carry (long,X) $F9EFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $F2DFF1.l,X		; BF F1 DF F2 ; Load long $F2DFF1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $7EE2.w,X		; FE E2 7E ; Increment memory $7EE2.w,X [Reads: X Index] [Flags: NZ]
	eor ($B6.b,S),Y		; 53 B6 ; XOR accumulator (stack relative indirect indexed) ($B6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $6C.b,X		; D6 6C ; Decrement memory $6C.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	lda $99.b,X		; B5 99 ; Load $99.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	adc ($47.b)		; 72 47 ; Add with carry (indirect) ($47.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $FF63.w,X		; FE 63 FF ; Increment memory $FF63.w,X [Reads: X Index] [Flags: NZ]
	sta ($9D.b),Y		; 91 9D ; Store accumulator ($9D.b),Y [Reads: Direct Page, Y Index, Accumulator]
	bit #$8D.b		; 89 8D ; Test bits #$8D.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $09.b		; 45 09 ; Exclusive OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $4E03.w		; 0D 03 4E ; Logical OR $4E03.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc [$93.b]		; 67 93 ; Add with carry (long) [$93.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor $0A.b,S		; 43 0A ; Exclusive OR accumulator with stack relative $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpx #$21.b		; E0 21 ; Compare #$21.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $FFE0DB.l,X		; FF DB E0 FF ; Subtract with carry (long,X) $FFE0DB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$BF.b		; E0 BF ; Compare #$BF.b with X register [Reads: X Index] [Flags: NCZ]
	sbc [$FF.b]		; E7 FF ; Subtract with carry (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx $7C.b		; E4 7C ; Compare $7C.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $FC.b		; E4 FC ; Compare $FC.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $7C.b		; E4 7C ; Compare $7C.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $DC.b		; E4 DC ; Compare $DC.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $34D7B0.l,X		; BF B0 D7 34 ; Load long $34D7B0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pea $D454.w		; F4 54 D4 ; Push absolute address $D454.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc $FE0795.l,X		; FF 95 07 FE ; Subtract with carry (long,X) $FE0795.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $08FF.w,Y		; F9 FF 08 ; Subtract with carry $08FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $070443.l		; 0F 43 04 07 ; OR accumulator with memory (long) $070443.l [Writes: Accumulator] [Flags: NZ]
	trb $02.b		; 14 02 ; Test and reset bits $02.b [Reads: Accumulator] [Flags: Z]
	ora $94.b,S		; 03 94 ; OR accumulator with stack relative $94.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $FB07.w,X		; FE 07 FB ; Increment memory $FB07.w,X [Reads: X Index] [Flags: NZ]
	ora #$05.b		; 09 05 ; Logical OR #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	sta ($FF.b),Y		; 91 FF ; Store accumulator ($FF.b),Y [Reads: Direct Page, Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $92F794.l,X		; 7F 94 F7 92 ; Add long $92F794.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($92.b,S),Y		; F3 92 ; Subtract with carry (stack relative indirect indexed) ($92.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($92.b,S),Y		; 73 92 ; Add with carry (stack relative indirect indexed) ($92.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	mvp $12,$F3		; 44 F3 12 ; Move block positive $12,$F3 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsb $D3.b		; 04 D3 ; Test and set bits $D3.b [Reads: Accumulator] [Flags: Z]
	eor $D2D4.w,Y		; 59 D4 D2 ; Exclusive OR accumulator with memory $D2D4.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($22.b)		; 52 22 ; Exclusive OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp ($04.b)		; D2 04 ; Compare accumulator (indirect) ($04.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	inc $FCDD.w,X		; FE DD FC ; Increment memory $FCDD.w,X [Reads: X Index] [Flags: NZ]
	eor $7F4378.l,X		; 5F 78 43 7F ; Exclusive OR accumulator with memory (long,X) $7F4378.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $32E0.w,Y		; 79 E0 32 ; Add $32E0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $796779.l		; 6F 79 67 79 ; Add with carry (long) $796779.l [Writes: Accumulator] [Flags: NCVZ]
	adc $DD7F79.l		; 6F 79 7F DD ; Add with carry (long) $DD7F79.l [Writes: Accumulator] [Flags: NCVZ]
	lsr $EC.b,X		; 56 EC ; Logical shift right $EC.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sta $C5ED.w,X		; 9D ED C5 ; Store accumulator to $C5ED.w,X [Reads: Accumulator, X Index]
	sbc $7FED.w		; ED ED 7F ; Subtract $7FED.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp ($3F.b)		; [PATTERN: Memory clearing operation] D2 3F ; Compare accumulator (indirect) ($3F.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $CF1E.w,X		; FD 1E CF ; Subtract with carry $CF1E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $9ED7.w,X		; 9E D7 9E ; Store zero to $9ED7.w,X [Reads: X Index]
	cmp $D99E.w,X		; DD 9E D9 ; Compare accumulator $D99E.w,X [Reads: X Index] [Flags: NCZ]
	stz $9ECF.w,X		; 9E CF 9E ; Store zero to $9ECF.w,X [Reads: X Index]
	cmp [$C2.b],Y		; D7 C2 ; Compare accumulator (long indexed) [$C2.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	adc $A72B.w,X		; 7D 2B A7 ; Add $A72B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $AFB9.w,Y		; B9 B9 AF ; Load $AFB9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $FE.b,X		; B5 FE ; Load $FE.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($EE1F.w,X)		; FC 1F EE ; Jump to subroutine indirect indexed ($EE1F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $FD67FD.l		; 0F FD 67 FD ; OR accumulator with memory (long) $FD67FD.l [Writes: Accumulator] [Flags: NZ]
	eor ($DF.b,S),Y		; 53 DF ; XOR accumulator (stack relative indirect indexed) ($DF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor #$CF.b		; 49 CF ; Exclusive OR #$CF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $44.b,S		; 43 44 ; Exclusive OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$E0.b]		; C7 E0 ; Compare accumulator (long) [$E0.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc $1DEA.w		; ED EA 1D ; Subtract $1DEA.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	jmp ($4B56.w)		; 6C 56 4B ; Jump indirect to ($4B56.w) [Flow: jump]
	eor $45.b		; 45 45 ; Exclusive OR $45.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $70		; 10 70 ; Branch if plus to $10, $70 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	cpy $7C.b		; C4 7C ; Compare $7C.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$FE		; E2 FE
	sbc ($5E.b)		; F2 5E ; Subtract with carry (indirect) ($5E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F86F.w,Y		; F9 6F F8 ; Subtract with carry $F86F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $64C890.l,X		; DF 90 C8 64 ; Compare accumulator (long,X) $64C890.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda ($5A.b)		; B2 5A ; Load accumulator (indirect) ($5A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$6D.b		; A9 6D ; Load #$6D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $EF3F.w		; CC 3F EF ; Compare $EF3F.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $DD9FFB.l,X		; 1F FB 9F DD ; Logical OR long $DD9FFB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $BF3FCB.l,X		; 9F CB 3F BF ; Store accumulator (long,X) $BF3FCB.l,X [Reads: Accumulator, X Index]
	and $BA3FAE.l,X		; 3F AE 3F BA ; AND accumulator with memory (long,X) $BA3FAE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $3B6DBD.l,X		; 3F BD 6D 3B ; AND accumulator with memory (long,X) $3B6DBD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $AB.b,X		; B5 AB ; Load $AB.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $6A.b,X		; 56 6A ; Logical shift right $6A.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	adc $E020.w,X		; 7D 20 E0 ; Add $E020.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $43		; 10 43 ; Branch if plus to $10, $43 [Flow: branch]
	.db $F0, $90		; F0 90 ; Branch if equal to $F0, $90 [Flow: branch]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $74.b,S		; 83 74 ; Store accumulator (stack relative) $74.b,S [Reads: Stack Pointer, Accumulator]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ldy #$90.b		; A0 90 ; Load #$90.b into Y register [Writes: Y Index] [Flags: NZ]
	eor $D0.b,S		; 43 D0 ; Exclusive OR accumulator with stack relative $D0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $01		; 50 01 ; Branch if overflow clear to $50, $01 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $01.b,S		; 23 01 ; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $02.b,S		; 43 02 ; Exclusive OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $07.b		; 04 07 ; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	sta $8A.b,S		; 83 8A ; Store accumulator (stack relative) $8A.b,S [Reads: Stack Pointer, Accumulator]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$02.b]		; 27 02 ; AND accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $8F.b		; 05 8F ; Logical OR $8F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $1FCC9F.l		; EF 9F CC 1F ; Subtract with carry (long) $1FCC9F.l [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and $963FBF.l,X		; 3F BF 3F 96 ; AND accumulator with memory (long,X) $963FBF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $6D7F77.l,X		; 7F 77 7F 6D ; Add long $6D7F77.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $99B7.w,X		; FE B7 99 ; Increment memory $99B7.w,X [Reads: X Index] [Flags: NZ]
	ldy $6930.w		; AC 30 69 ; Load $6930.w into Y register [Writes: Y Index] [Flags: NZ]
	lsr $D3.b,X		; 56 D3 ; Logical shift right $D3.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lda #$B7.b		; A9 B7 ; Load #$B7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx $BC.b		; E4 BC ; Compare $BC.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpy $FC.b		; C4 FC ; Compare $FC.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $90, $70		; 90 70 ; Branch if carry clear to $90, $70 [Flow: branch]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	eor $20.b,S		; 43 20 ; Exclusive OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	bit $A4.b,X		; 34 A4 ; Test bits $A4.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $50, $90		; 50 90 ; Branch if overflow clear to $50, $90 [Flow: branch]
	ldy #$20.b		; A0 20 ; Load #$20.b into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$0D.b		; 09 0D ; Logical OR #$0D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $09.b		; 45 09 ; Exclusive OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0B04.w		; 0D 04 0B ; Logical OR $0B04.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsl $E4440B.l		; 22 0B 44 E4 ; Jump to subroutine long $E4440B.l [Writes: Stack Pointer] [Flow: call]
	stz $FC43.w		; 9C 43 FC ; Store zero to $FC43.w
	cpx $02.b		; E4 02 ; Compare $02.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	jmp ($3CE4.w,X)		; 7C E4 3C ; Jump indirect indexed to ($3CE4.w,X) [Reads: X Index] [Flow: jump]
	eor $E4.b,S		; 43 E4 ; Exclusive OR accumulator with stack relative $E4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($9409.w,X)		; FC 09 94 ; Jump to subroutine indirect indexed ($9409.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sty $54.b,X		; 94 54 ; Store Y register $54.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ldy $74.b,X		; B4 74 ; Load Y register $74.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	trb $74.b		; 14 74 ; Test and reset bits $74.b [Reads: Accumulator] [Flags: Z]
	ldy $02.b,X		; B4 02 ; Load Y register $02.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ora $23.b,S		; 03 23 ; OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($62.b,X)		; 01 62 ; Logical OR ($62.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $0E.b		; 06 0E ; Arithmetic shift left $0E.b [Reads: Direct Page] [Flags: NCZ]
	ora $100D08.l		; 0F 08 0D 10 ; OR accumulator with memory (long) $100D08.l [Writes: Accumulator] [Flags: NZ]
	ora $021B10.l,X		; 1F 10 1B 02 ; Logical OR long $021B10.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($16.b)		; 12 16 ; OR accumulator with memory (indirect) ($16.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $12.b		; 45 12 ; Exclusive OR $12.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($03.b,S),Y		; F3 03 ; Subtract with carry (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ldx #$E3.b		; A2 E3 ; Load #$E3.b into X register [Writes: X Index] [Flags: NZ]
	rep #$C3		; C2 C3 ; Reset processor status bits #$C3 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	eor $82.b		; 45 82 ; Exclusive OR $82.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $22.b,S		; 83 22 ; Store accumulator (stack relative) $22.b,S [Reads: Stack Pointer, Accumulator]
	eor ($01.b)		; 52 01 ; Exclusive OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx #$C2.b		; A2 C2 ; Load #$C2.b into X register [Writes: X Index] [Flags: NZ]
	jsl $28E082.l		; 22 82 E0 28 ; Jump to subroutine long $28E082.l [Writes: Stack Pointer] [Flow: call]
	adc $7957.w,Y		; 79 57 79 ; Add $7957.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $795F79.l,X		; 1F 79 5F 79 ; Logical OR long $795F79.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $793F79.l,X		; 7F 79 3F 79 ; Add long $793F79.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $796779.l,X		; 7F 79 67 79 ; Add long $796779.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $DD8DD5.l,X		; 7F D5 8D DD ; Add long $DD8DD5.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $AD.b,X		; F5 AD ; Subtract $AD.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $F5C5.w,X		; [PATTERN: Memory clearing operation] BD C5 F5 ; Load $F5C5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $9EDF.w,X		; 9E DF 9E ; Store zero to $9EDF.w,X [Reads: X Index]
	cmp $9E.b,X		; D5 9E ; Compare accumulator $9E.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	stz $9EDF.w,X		; 9E DF 9E ; Store zero to $9EDF.w,X [Reads: X Index]
	wai		; CB ; Wait for interrupt
	stz $9EDF.w,X		; 9E DF 9E ; Store zero to $9EDF.w,X [Reads: X Index]
	cmp #$9E.b		; C9 9E ; Compare #$9E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $43BB.w,X		; DD BB 43 ; Compare accumulator $43BB.w,X [Reads: X Index] [Flags: NCZ]
	lda $AB.b,X		; B5 AB ; Load $AB.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $B7.b		; 02 B7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$B9.b		; A9 B9 ; Load #$B9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $42.b,S		; 43 42 ; Exclusive OR accumulator with stack relative $42.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $47.b,S		; C3 47 ; Compare accumulator (stack relative) $47.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	eor ($C1.b,X)		; 41 C1 ; Exclusive OR accumulator with memory ($C1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $40.b,S		; 43 40 ; Exclusive OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $42, $42		; 42 42 ; Reserved instruction
	and $41.b,S		; 23 41 ; AND accumulator with stack relative $41.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $4040.w,Y		; 19 40 40 ; OR accumulator with memory $4040.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($7CF7.w,X)		; 7C F7 7C ; Jump indirect indexed to ($7CF7.w,X) [Reads: X Index] [Flow: jump]
	lda $3CF73C.l		; AF 3C F7 3C ; Load long $3CF73C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc ($3E.b,S),Y		; F3 3E ; Subtract with carry (stack relative indirect indexed) ($3E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$3E.b],Y		; D7 3E ; Compare accumulator (long indexed) [$3E.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc $9EF99E.l,X		; FF 9E F9 9E ; Subtract with carry (long,X) $9EF99E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F6.b],Y		; F7 F6 ; Subtract with carry (long indexed) [$F6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $62.b,X		; 76 62 ; Rotate right $62.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $7B.b		; 45 7B ; Exclusive OR $7B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$B7.b		; A9 B7 ; Load #$B7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $82.b		; 45 82 ; Exclusive OR $82.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $01.b,S		; 83 01 ; Store accumulator (stack relative) $01.b,S [Reads: Stack Pointer, Accumulator]
	mvp $45,$C7		; 44 C7 45 ; Move block positive $45,$C7 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $01,$C6		; 44 C6 01 ; Move block positive $01,$C6 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	inc $8222.w		; EE 22 82 ; Increment $8222.w [Flags: NZ]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $290845.l		; 22 45 08 29 ; Jump to subroutine long $290845.l [Writes: Stack Pointer] [Flow: call]
	adc [$5F.b],Y		; 77 5F ; Add with carry (long indexed) [$5F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $7A.b,S		; 63 7A ; Add with carry (stack relative) $7A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $5B.b,S		; 63 5B ; Add with carry (stack relative) $5B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $7B.b,S		; 63 7B ; Add with carry (stack relative) $7B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	mvp $FD,$C9		; 44 C9 FD ; Move block positive $FD,$C9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $FDC9.w,X		; 3C C9 FD ; Test bits $FDC9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	dec $D7B4.w,X		; DE B4 D7 ; Decrement memory $D7B4.w,X [Reads: X Index] [Flags: NZ]
	inc $EB.b,X		; F6 EB ; Increment memory $EB.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor $C8.b		; 45 C8 ; Exclusive OR $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora ($C4.b,X)		; 01 C4 ; Logical OR ($C4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $EA84.w,X		; 3C 84 EA ; Test bits $EA84.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp.w [$BEE2]		; DC E2 BE ; Jump long indirect [$BEE2] [Flow: jump]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bit $14.b		; 24 14 ; Test bits $14.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pea $B254.w		; F4 54 B2 ; Push absolute address $B254.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	stx $68.b		; 86 68 ; Store X register to $68.b [Reads: X Index]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and $3B.b,S		; 23 3B ; AND accumulator with stack relative $3B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$35.b]		; 27 35 ; AND accumulator with memory (long) [$35.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$77.b]		; 47 77 ; Exclusive OR accumulator with memory (long) [$77.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $0B096D.l		; 4F 6D 09 0B ; Exclusive OR accumulator with memory (long) $0B096D.l [Writes: Accumulator] [Flags: NZ]
	ora ($14.b,S),Y		; 13 14 ; OR accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$2D.b]		; 27 2D ; AND accumulator with memory (long) [$2D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $FE5D.w		; 4D 5D FE ; Exclusive OR $FE5D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $FCF3FC.l,X		; DF FC F3 FC ; Compare accumulator (long,X) $FCF3FC.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sta $F997F8.l,X		; 9F F8 97 F9 ; Store accumulator (long,X) $F997F8.l,X [Reads: Accumulator, X Index]
	sbc $F2DFF1.l,X		; FF F1 DF F2 ; Subtract with carry (long,X) $F2DFF1.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $BEE2.w,X		; 7E E2 BE ; Rotate right $BEE2.w,X [Reads: X Index] [Flags: NCZ]
	eor $96A2.w,X		; 5D A2 96 ; Exclusive OR accumulator with memory $96A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $ED.b		; 14 ED ; Test and reset bits $ED.b [Reads: Accumulator] [Flags: Z]
	sta $927A.w,Y		; 99 7A 92 ; Store accumulator to $927A.w,Y [Reads: Y Index, Accumulator]
	eor $40.b,S		; 43 40 ; Exclusive OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$23.b		; C0 23 ; Compare #$23.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $27		; 80 27 ; Branch always to $80, $27 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$E7.b]		; 07 E7 ; OR accumulator with memory (long) [$E7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $E0DFE0.l,X		; FF E0 DF E0 ; Subtract with carry (long,X) $E0DFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $90, $FF		; 90 FF ; Branch if carry clear to $90, $FF [Flow: branch]
	inc $B087.w		; EE 87 B0 ; Increment $B087.w [Flags: NZ]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $90F7.w,Y		; 39 F7 90 ; AND accumulator with memory $90F7.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $3FD9AE.l,X		; 9F AE D9 3F ; Store accumulator (long,X) $3FD9AE.l,X [Reads: Accumulator, X Index]
	.db $B0, $F7		; B0 F7 ; Branch if carry set to $B0, $F7 [Flow: branch]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $F7.b		; 04 F7 ; Test and set bits $F7.b [Reads: Accumulator] [Flags: Z]
	tsb $FC0B.w		; 0C 0B FC ; Test and set bits $FC0B.w [Reads: Accumulator] [Flags: Z]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	jsr ($0C77.w,X)		; FC 77 0C ; Jump to subroutine indirect indexed ($0C77.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $E0FF04.l,X		; FF 04 FF E0 ; Subtract with carry (long,X) $E0FF04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FA0EE6.l,X		; FF E6 0E FA ; Subtract with carry (long,X) $FA0EE6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $42, $76		; 42 76 ; Reserved instruction
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	asl $9FE6.w		; 0E E6 9F ; Arithmetic shift left $9FE6.w [Flags: NCZ]
	sbc $9FF79F.l,X		; FF 9F F7 9F ; Subtract with carry (long,X) $9FF79F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sta $FB9FEE.l,X		; 9F EE 9F FB ; Store accumulator (long,X) $FB9FEE.l,X [Reads: Accumulator, X Index]
	sta $DC9FD7.l,X		; 9F D7 9F DC ; Store accumulator (long,X) $DC9FD7.l,X [Reads: Accumulator, X Index]
	sta $A7B9CF.l,X		; 9F CF B9 A7 ; Store accumulator (long,X) $A7B9CF.l,X [Reads: Accumulator, X Index]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ldy $BB.b		; A4 BB ; Load $BB.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($AC.b)		; B2 AC ; Load accumulator (indirect) ($AC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	and #$ED.b		; 29 ED ; Logical AND #$ED.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $29.b,S		; 43 29 ; Exclusive OR accumulator with stack relative $29.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx $3113.w		; EC 13 31 ; Compare $3113.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $FA33.w,X		; FD 33 FA ; Subtract with carry $FA33.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($FB.b,S),Y		; 33 FB ; AND accumulator (stack relative indirect indexed) ($FB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $FB.b,S		; 23 FB ; AND accumulator with stack relative $FB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$F6.b]		; 27 F6 ; AND accumulator with memory (long) [$F6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda ($B6.b,S),Y		; B3 B6 ; Load accumulator (stack relative indirect indexed) ($B6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda [$A5.b],Y		; B7 A5 ; Load accumulator (long indexed) [$A5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $FE88.w		; AE 88 FE ; Load $FE88.w into X register [Writes: X Index] [Flags: NZ]
	eor $94.b		; 45 94 ; Exclusive OR $94.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $02.b,X		; F6 02 ; Increment memory $02.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	trb $F7.b		; 14 F7 ; Test and reset bits $F7.b [Reads: Accumulator] [Flags: Z]
	rol $FF43.w,X		; 3E 43 FF ; Rotate left $FF43.w,X [Reads: X Index] [Flags: NCZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C9		; 80 C9 ; Branch always to $80, $C9 [Flow: branch]
	jsl $941BD5.l		; 22 D5 1B 94 ; Jump to subroutine long $941BD5.l [Writes: Stack Pointer] [Flow: call]
	ldx $FF80.w,Y		; BE 80 FF ; Load X register $FF80.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sbc ($FE.b)		; F2 FE ; Subtract with carry (indirect) ($FE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($EE.b)		; F2 EE ; Subtract with carry (indirect) ($EE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($CE.b)		; F2 CE ; Subtract with carry (indirect) ($CE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($BF.b),Y		; F1 BF ; Subtract with carry ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $797F.w,Y		; 79 7F 79 ; Add $797F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $797779.l,X		; 5F 79 77 79 ; Exclusive OR accumulator with memory (long,X) $797779.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $4AAADA.l		; 6F DA AA 4A ; Add with carry (long) $4AAADA.l [Writes: Accumulator] [Flags: NCVZ]
	lda $CDDD.w,Y		; B9 DD CD ; Load $CDDD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $CD.b,X		; B5 CD ; Load $CD.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $01.b,S		; 23 01 ; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $02.b,S		; 43 02 ; Exclusive OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $8C.b,S		; 03 8C ; OR accumulator with stack relative $8C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $02.b,X		; 94 02 ; Store Y register $02.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc $CF9F.w		; ED 9F CF ; Subtract $CF9F.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $AF3FDB.l,X		; 1F DB 3F AF ; Logical OR long $AF3FDB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $5B7FBE.l,X		; 3F BE 7F 5B ; AND accumulator with memory (long,X) $5B7FBE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $F3FE39.l,X		; 7F 39 FE F3 ; Add long $F3FE39.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $AD.b,X		; 94 AD ; Store Y register $AD.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	and $6A.b,S		; 23 6A ; AND accumulator with stack relative $6A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $D1A1.w,Y		; D9 A1 D1 ; Compare accumulator $D1A1.w,Y [Reads: Y Index] [Flags: NCZ]
	cpx $BC.b		; E4 BC ; Compare $BC.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpy $7C.b		; C4 7C ; Compare $7C.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sty $BC.b		; 84 BC ; Store Y register to $BC.b [Reads: Y Index]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	.db $F0, $43		; F0 43 ; Branch if equal to $F0, $43 [Flow: branch]
	jsr $07E0.w		; 20 E0 07 ; Jump to subroutine at $07E0.w [Writes: Stack Pointer] [Flow: call]
	ldy $24.b,X		; B4 24 ; Load Y register $24.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $90		; D0 90 ; Branch if not equal to $D0, $90 [Flow: branch]
	ldy #$20.b		; A0 20 ; Load #$20.b into Y register [Writes: Y Index] [Flags: NZ]
	and [$00.b],Y		; 37 00 ; AND accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $10.b,S		; 43 10 ; Exclusive OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0F0843.l,X		; 1F 43 08 0F ; Logical OR long $0F0843.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$23.b]		; 07 23 ; OR accumulator with memory (long) [$23.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $12.b,X		; 16 12 ; Arithmetic shift left $12.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: NCZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $82.b		; 45 82 ; Exclusive OR $82.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $03.b,S		; 83 03 ; Store accumulator (stack relative) $03.b,S [Reads: Stack Pointer, Accumulator]
	rep #$C3		; C2 C3 ; Reset processor status bits #$C3 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	ldx #$E3.b		; A2 E3 ; Load #$E3.b into X register [Writes: X Index] [Flags: NZ]
	eor $12.b		; 45 12 ; Exclusive OR $12.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($22.b,S),Y		; B3 22 ; Load accumulator (stack relative indirect indexed) ($22.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $82, $01, $C2		; 82 01 C2 ; Branch always long to $82, $01, $C2 [Flow: branch]
	ldx #$22.b		; A2 22 ; Load #$22.b into X register [Writes: X Index] [Flags: NZ]
	eor ($4F.b)		; 52 4F ; Exclusive OR accumulator with memory (indirect) ($4F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $82, $83, $27		; 82 83 27 ; Branch always long to $82, $83, $27 [Flow: branch]
	.db $82, $25, $00		; 82 25 00 ; Branch always long to $82, $25, $00 [Flow: branch]
	ora $10.b,S		; 03 10 ; OR accumulator with stack relative $10.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	eor $44.b,S		; 43 44 ; Exclusive OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp ($8401.w)		; 6C 01 84 ; Jump indirect to ($8401.w) [Flow: jump]
	cpx $0022.w		; EC 22 00 ; Compare $0022.w with X register [Reads: X Index] [Flags: NCZ]
	cpx #$38.b		; E0 38 ; Compare #$38.b with X register [Reads: X Index] [Flags: NCZ]
	.db $10, $28		; 10 28 ; Branch if plus to $10, $28 [Flow: branch]
	mvn $94,$54		; 54 54 94 ; Move block negative $94,$54 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	stz $9EDB.w,X		; 9E DB 9E ; Store zero to $9EDB.w,X [Reads: X Index]
	cmp ($3E.b,S),Y		; D3 3E ; Compare accumulator (stack relative indirect indexed) ($3E.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	lda $3CB53E.l,X		; BF 3E B5 3C ; Load long $3CB53E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7CAF3C.l,X		; 9F 3C AF 7C ; Store accumulator (long,X) $7CAF3C.l,X [Reads: Accumulator, X Index]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp ($BB57.w,X)		; 7C 57 BB ; Jump indirect indexed to ($BB57.w,X) [Reads: X Index] [Flow: jump]
	lda $6D.b,S		; A3 6D ; Load accumulator (stack relative) $6D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $56.b,X		; 55 56 ; Exclusive OR accumulator with memory $56.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	dec $27.b		; C6 27 ; Decrement $27.b [Reads: Direct Page] [Flags: NZ]
	sbc $67.b,X		; F5 67 ; Subtract $67.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($46.b,S),Y		; F3 46 ; Subtract with carry (stack relative indirect indexed) ($46.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$4E.b],Y		; F7 4E ; Subtract with carry (long indexed) [$4E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E34E.w		; ED 4E E3 ; Subtract $E34E.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sty $9CEF.w		; 8C EF 9C ; Store Y register to $9CEF.w [Reads: Y Index]
	cmp [$9C.b]		; C7 9C ; Compare accumulator (long) [$9C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$28.b],Y		; D7 28 ; Compare accumulator (long indexed) [$28.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $9E5359.l		; 4F 59 53 9E ; Exclusive OR accumulator with memory (long) $9E5359.l [Writes: Accumulator] [Flags: NZ]
	ldx #$A6.b		; A2 A6 ; Load #$A6.b into X register [Writes: X Index] [Flags: NZ]
	sbc $AEFFE5.l,X		; FF E5 FF AE ; Subtract with carry (long,X) $AEFFE5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FF7F03.l,X		; FF 03 7F FF ; Subtract with carry (long,X) $FF7F03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C1.b,X)		; 41 C1 ; Exclusive OR accumulator with memory ($C1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $80.b,S		; 23 80 ; AND accumulator with stack relative $80.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($A4.b)		; 12 A4 ; OR accumulator with memory (indirect) ($A4.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $417F00.l,X		; FF 00 7F 41 ; Subtract with carry (long,X) $417F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc $3C57FC.l,X		; 7F FC 57 3C ; Add long $3C57FC.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($3C.b,S),Y		; F3 3C ; Subtract with carry (stack relative indirect indexed) ($3C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lda [$3C.b]		; A7 3C ; Load accumulator (long) [$3C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$1E.b],Y		; B7 1E ; Load accumulator (long indexed) [$1E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $4F.b,S		; 83 4F ; Store accumulator (stack relative) $4F.b,S [Reads: Stack Pointer, Accumulator]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$3C.b],Y		; D7 3C ; Compare accumulator (long indexed) [$3C.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	lsr $E2.b,X		; 56 E2 ; Logical shift right $E2.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $62.b		; 66 62 ; Rotate right $62.b [Reads: Direct Page] [Flags: NCZ]
	and $B5A3.w,X		; 3D A3 B5 ; AND accumulator with memory $B5A3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$80.b]		; 27 80 ; AND accumulator with memory (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$40.b]		; 47 40 ; Exclusive OR accumulator with memory (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$23.b		; C0 23 ; Compare #$23.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($86.b,S),Y		; 33 86 ; AND accumulator (stack relative indirect indexed) ($86.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx $03.b		; E4 03 ; Compare $03.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $16.b		; 04 16 ; Test and set bits $16.b [Reads: Accumulator] [Flags: Z]
	rol $2A.b		; 26 2A ; Rotate left $2A.b [Reads: Direct Page] [Flags: NCZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor $17FF.w,X		; 5D FF 17 ; Exclusive OR accumulator with memory $17FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FC7F.w,X		; FE 7F FC ; Increment memory $FC7F.w,X [Reads: X Index] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($F8D7.w,X)		; FC D7 F8 ; Jump to subroutine indirect indexed ($F8D7.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $F177F9.l,X		; FF F9 77 F1 ; Subtract with carry (long,X) $F177F9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $E21EF2.l,X		; BF F2 1E E2 ; Load long $E21EF2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $5A6B.w,Y		; BE 6B 5A ; Load X register $5A6B.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	dec $B4.b		; C6 B4 ; Decrement $B4.b [Reads: Direct Page] [Flags: NZ]
	eor $B9.b,X		; 55 B9 ; Exclusive OR accumulator with memory $B9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda ($43.b)		; B2 43 ; Load accumulator (indirect) ($43.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy #$23.b		; C0 23 ; Compare #$23.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $27		; 80 27 ; Branch always to $80, $27 [Flow: branch]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $09.b,S		; 03 09 ; OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0C09.w		; 0D 09 0C ; Logical OR $0C09.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $09.b		; 45 09 ; Exclusive OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $25E0.w		; 0D E0 25 ; Logical OR $25E0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($1D.b),Y		; 11 1D ; OR accumulator with memory ($1D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $3A.b,S		; 23 3A ; AND accumulator with stack relative $3A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$F5.b]		; C7 F5 ; Compare accumulator (long) [$F5.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($26.b,S),Y		; 13 26 ; OR accumulator (stack relative indirect indexed) ($26.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $7CE4.w		; CD E4 7C ; Compare $7CE4.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cpx $DC.b		; E4 DC ; Compare $DC.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $BC.b		; E4 BC ; Compare $BC.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $FC.b		; E4 FC ; Compare $FC.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc [$BF.b]		; E7 BF ; Subtract with carry (long) [$BF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$7F.b		; E0 7F ; Compare #$7F.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $D434DC.l,X		; FF DC 34 D4 ; Subtract with carry (long,X) $D434DC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $F4.b		; 14 F4 ; Test and reset bits $F4.b [Reads: Accumulator] [Flags: Z]
	lda [$30.b],Y		; B7 30 ; Load accumulator (long indexed) [$30.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $026250.l,X		; 1F 50 62 02 ; Logical OR long $026250.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $07.b		; 14 07 ; Test and reset bits $07.b [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $FCF9.w		; 0E F9 FC ; Arithmetic shift left $FCF9.w [Flags: NCZ]
	ora $FA.b,S		; 03 FA ; OR accumulator with stack relative $FA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0402E7.l,X		; FF E7 02 04 ; Subtract with carry (long,X) $0402E7.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $09.b		; 05 09 ; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	asl $FC.b		; 06 FC ; Arithmetic shift left $FC.b [Reads: Direct Page] [Flags: NCZ]
	dec $43.b		; C6 43 ; Decrement $43.b [Reads: Direct Page] [Flags: NZ]
	ora ($73.b)		; 12 73 ; OR accumulator with memory (indirect) ($73.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $92.b		; 45 92 ; Exclusive OR $92.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($05.b,S),Y		; F3 05 ; Subtract with carry (stack relative indirect indexed) ($05.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sty $77.b,X		; 94 77 ; Store Y register $77.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $FD91.w,X		; FE 91 FD ; Increment memory $FD91.w,X [Reads: X Index] [Flags: NZ]
	and $D2.b,S		; 23 D2 ; AND accumulator with stack relative $D2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $5452.w,X		; 1D 52 54 ; OR accumulator with memory $5452.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $79D2.w,Y		; D9 D2 79 ; Compare accumulator $79D2.w,Y [Reads: Y Index] [Flags: NCZ]
	eor [$79.b],Y		; 57 79 ; Exclusive OR accumulator with memory (long indexed) [$79.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $795F79.l,X		; 7F 79 5F 79 ; Add long $795F79.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$79.b],Y		; 37 79 ; AND accumulator with memory (long indexed) [$79.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$78.b]		; 67 78 ; Add with carry (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $FFACF8.l,X		; 7F F8 AC FF ; Add long $FFACF8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $DDED95.l,X		; 9F 95 ED DD ; Store accumulator (long,X) $DDED95.l,X [Reads: Accumulator, X Index]
	lda $E5.b		; A5 E5 ; Load $E5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($958F.w,X)		; FC 8F 95 ; Jump to subroutine indirect indexed ($958F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $01.b,S		; 23 01 ; AND accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,X		; 15 02 ; OR accumulator with memory $02.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $01FE00.l,X		; FF 00 FE 01 ; Subtract with carry (long,X) $01FE00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($84.b)		; B2 84 ; Load accumulator (indirect) ($84.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$DC04]		; DC 04 DC ; Jump long indirect [$DC04] [Flow: jump]
	eor $24.b,S		; 43 24 ; Exclusive OR accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $27E0.w,X		; BC E0 27 ; Load Y register $27E0.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	stz $7C.b		; 64 7C ; Store zero to $7C.b
	adc $5D.b		; 65 5D ; Add $5D.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc $DF.b		; E6 DF ; Increment $DF.b [Reads: Direct Page] [Flags: NZ]
	cpx $7F.b		; E4 7F ; Compare $7F.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ldy $34.b,X		; B4 34 ; Load Y register $34.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	stz $54.b,X		; 74 54 ; Store zero to $54.b,X [Reads: X Index]
	pea $96D5.w		; F4 D5 96 ; Push absolute address $96D5.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	bit $9E.b,X		; 34 9E ; Test bits $9E.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	cmp $9ECB9E.l,X		; DF 9E CB 9E ; Compare accumulator (long,X) $9ECB9E.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cmp $9ED59E.l,X		; DF 9E D5 9E ; Compare accumulator (long,X) $9ED59E.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cmp ($1E.b,S),Y		; D3 1E ; Compare accumulator (stack relative indirect indexed) ($1E.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp [$3F.b],Y		; D7 3F ; Compare accumulator (long indexed) [$3F.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ldx $1E7F.w,Y		; BE 7F 1E ; Load X register $1E7F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda $BD.b,S		; A3 BD ; Load accumulator (stack relative) $BD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $A3.b,X		; B5 A3 ; Load $A3.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and [$6E.b],Y		; 37 6E ; AND accumulator with memory (long indexed) [$6E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	eor $44.b,S		; 43 44 ; Exclusive OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $E0.b		; C6 E0 ; Decrement $E0.b [Reads: Direct Page] [Flags: NZ]
	eor $49.b		; 45 49 ; Exclusive OR $49.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $DB53.w		; CD 53 DB ; Compare $DB53.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc [$F6.b]		; 67 F6 ; Add with carry (long) [$F6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora $171FED.l		; 0F ED 1F 17 ; OR accumulator with memory (long) $171FED.l [Writes: Accumulator] [Flags: NZ]
	inc $4563.w,X		; FE 63 45 ; Increment memory $4563.w,X [Reads: X Index] [Flags: NZ]
	eor $4B.b		; 45 4B ; Exclusive OR $4B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$6C.b],Y		; 57 6C ; Exclusive OR accumulator with memory (long indexed) [$6C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $F5.b,X		; 15 F5 ; OR accumulator with memory $F5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $F8.b,S		; 63 F8 ; Add with carry (stack relative) $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F1AFF9.l,X		; FF F9 AF F1 ; Subtract with carry (long,X) $F1AFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $E28FF2.l,X		; 7F F2 8F E2 ; Add long $E28FF2.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $88FFC4.l,X		; DF C4 FF 88 ; Compare accumulator (long,X) $88FFC4.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ror $FD11.w,X		; 7E 11 FD ; Rotate right $FD11.w,X [Reads: X Index] [Flags: NCZ]
	jsr ($5925.w,X)		; FC 25 59 ; Jump to subroutine indirect indexed ($5925.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp ($64.b)		; D2 64 ; Compare accumulator (indirect) ($64.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor #$93.b		; 49 93 ; Exclusive OR #$93.b with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp $39BF39.l,X		; DF 39 BF 39 ; Compare accumulator (long,X) $39BF39.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sta [$39.b],Y		; 97 39 ; Store accumulator (long indexed) [$39.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $727F71.l		; AF 71 7F 72 ; Load long $727F71.l into accumulator [Writes: Accumulator] [Flags: NZ]
	rol $BFF1.w		; 2E F1 BF ; Rotate left $BFF1.w [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	adc [$3C.b]		; 67 3C ; Add with carry (long) [$3C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $45.b,X		; 75 45 ; Add $45.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $AAE9.w		; 6D E9 AA ; Add $AAE9.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $8064.w,Y		; 99 64 80 ; Store accumulator to $8064.w,Y [Reads: Y Index, Accumulator]
	.db $80, $29		; 80 29 ; Branch always to $80, $29 [Flow: branch]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $82, $83, $80		; 82 83 80 ; Branch always long to $82, $83, $80 [Flow: branch]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($82.b,X)		; 01 82 ; Logical OR ($82.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $9EDD.w,X		; 9E DD 9E ; Store zero to $9EDD.w,X [Reads: X Index]
	cmp [$8F.b],Y		; D7 8F ; Compare accumulator (long indexed) [$8F.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc $674F.w		; ED 4F 67 ; Subtract $674F.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor $E78F62.l		; 4F 62 8F E7 ; Exclusive OR accumulator with memory (long) $E78F62.l [Writes: Accumulator] [Flags: NZ]
	ora $BB3FDE.l,X		; 1F DE 3F BB ; Logical OR long $BB3FDE.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $9DB7.w		; AD B7 9D ; Load $9DB7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($52.b,S),Y		; 53 52 ; XOR accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $3E.b,X		; 95 3E ; Store accumulator to $3E.b,X [Reads: Accumulator, X Index]
	eor ($40.b)		; 52 40 ; Exclusive OR accumulator with memory (indirect) ($40.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$47.b		; C0 47 ; Compare #$47.b with Y register [Reads: Y Index] [Flags: NCZ]
	jsr $07E0.w		; 20 E0 07 ; Jump to subroutine at $07E0.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpy $7C.b		; C4 7C ; Compare $7C.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $A022.w		; 20 22 A0 ; Jump to subroutine at $A022.w [Writes: Stack Pointer] [Flow: call]
	cpx #$26.b		; E0 26 ; Compare #$26.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $C8		; 90 C8 ; Branch if carry clear to $90, $C8 [Flow: branch]
	stz $8F.b		; 64 8F ; Store zero to $8F.b
	sbc $1FDB9F.l		; EF 9F DB 1F ; Subtract with carry (long) $1FDB9F.l [Writes: Accumulator] [Flags: NCVZ]
	cmp $3FA73F.l		; CF 3F A7 3F ; Compare accumulator (long) $3FA73F.l [Reads: Accumulator] [Flags: NCZ]
	ldx $7F.b,Y		; B6 7F ; Load X register $7F.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	eor $FE7B7F.l,X		; 5F 7F 7B FE ; Exclusive OR accumulator with memory (long,X) $FE7B7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	stx $BB.b,Y		; 96 BB ; Store X register $BB.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	rol $5663.w		; 2E 63 56 ; Rotate left $5663.w [Flags: NCZ]
	cmp $A9F3.w,X		; DD F3 A9 ; Compare accumulator $A9F3.w,X [Reads: X Index] [Flags: NCZ]
	cpx $DC.b		; E4 DC ; Compare $DC.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpy $7C.b		; C4 7C ; Compare $7C.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $90, $F0		; 90 F0 ; Branch if carry clear to $90, $F0 [Flow: branch]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	eor $20.b,S		; 43 20 ; Exclusive OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$08.b		; E0 08 ; Compare #$08.b with X register [Reads: X Index] [Flags: NCZ]
	pei ($64.b)		; D4 64 ; Push effective indirect address ($64.b) [Reads: Direct Page] [Writes: Stack Pointer]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $90		; D0 90 ; Branch if not equal to $D0, $90 [Flow: branch]
	ldy #$20.b		; A0 20 ; Load #$20.b into Y register [Writes: Y Index] [Flags: NZ]
	ora ($63.b,X)		; 01 63 ; Logical OR ($63.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1C.b,X)		; 01 1C ; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $1C11.w		; 0E 11 1C ; Arithmetic shift left $1C11.w [Flags: NCZ]
	and $3B.b,S		; 23 3B ; AND accumulator with stack relative $3B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor [$76.b]		; 47 76 ; Exclusive OR accumulator with memory (long) [$76.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0201EC.l		; 8F EC 01 02 ; Store accumulator (long) $0201EC.l [Reads: Accumulator]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	ora ($27.b)		; 12 27 ; OR accumulator with memory (indirect) ($27.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp $0F98.w		; 4C 98 0F ; Jump to $0F98.w [Flow: jump]
	sbc $00DF00.l		; EF 00 DF 00 ; Subtract with carry (long) $00DF00.l [Writes: Accumulator] [Flags: NCVZ]
	adc $90FF9F.l,X		; 7F 9F FF 90 ; Add long $90FF9F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $45		; F0 45 ; Branch if equal to $F0, $45 [Flow: branch]
	jsr $04E0.w		; 20 E0 04 ; Jump to subroutine at $04E0.w [Writes: Stack Pointer] [Flow: call]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	adc $D0DFC0.l,X		; 7F C0 DF D0 ; Add long $D0DFC0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FF04A0.l		; 22 A0 04 FF ; Jump to subroutine long $FF04A0.l [Writes: Stack Pointer] [Flow: call]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FF2200.l,X		; FF 00 22 FF ; Subtract with carry (long,X) $FF2200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $13.b,S		; 03 13 ; OR accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $23FF00.l,X		; FF 00 FF 23 ; Subtract with carry (long,X) $23FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $FA.b,S		; 83 FA ; Store accumulator (stack relative) $FA.b,S [Reads: Stack Pointer, Accumulator]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $030027.l,X		; FF 27 00 03 ; Subtract with carry (long,X) $030027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $CF.b		; C6 CF ; Decrement $CF.b [Reads: Direct Page] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $E4.b		; 04 E4 ; Test and set bits $E4.b [Reads: Accumulator] [Flags: Z]
	dec $FD00.w,X		; DE 00 FD ; Decrement memory $FD00.w,X [Reads: X Index] [Flags: NZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $030027.l,X		; FF 27 00 03 ; Subtract with carry (long,X) $030027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $F3.b,X		; 55 F3 ; Exclusive OR accumulator with memory $F3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$F0.b]		; 07 F0 ; OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $07FF00.l,X		; 5F 00 FF 07 ; Exclusive OR accumulator with memory (long,X) $07FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $27F8F8.l,X		; FF F8 F8 27 ; Subtract with carry (long,X) $27F8F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $07F0.w,X		; 1E F0 07 ; Arithmetic shift left $07F0.w,X [Reads: X Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $33.b		; 04 33 ; Test and set bits $33.b [Reads: Accumulator] [Flags: Z]
	sbc $F7E0.w,Y		; F9 E0 F7 ; Subtract with carry $F7E0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $3F22.w		; 20 22 3F ; Jump to subroutine at $3F22.w [Writes: Stack Pointer] [Flow: call]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $34.b,S		; 03 34 ; OR accumulator with stack relative $34.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $233F20.l		; EF 20 3F 23 ; Subtract with carry (long) $233F20.l [Writes: Accumulator] [Flags: NCVZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($0057.w,X)		; FC 57 00 ; Jump to subroutine indirect indexed ($0057.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FF2200.l,X		; FF 00 22 FF ; Subtract with carry (long,X) $FF2200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $23FF00.l,X		; FF 00 FF 23 ; Subtract with carry (long,X) $23FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $22,$C7		; 44 C7 22 ; Move block positive $22,$C7 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cmp [$27.b]		; C7 27 ; Compare accumulator (long) [$27.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $44,$45		; 44 45 44 ; Move block positive $44,$45 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cmp [$23.b]		; C7 23 ; Compare accumulator (long) [$23.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FF007F.l,X		; 7F 7F 00 FF ; Add long $FF007F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $030027.l,X		; FF 27 00 03 ; Subtract with carry (long,X) $030027.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF00FF.l,X		; FF FF 00 FF ; Subtract with carry (long,X) $FF00FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FE.b,S		; 43 FE ; Exclusive OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0027.w,X		; FE 27 00 ; Increment memory $0027.w,X [Reads: X Index] [Flags: NZ]
	ora $F2.b,S		; 03 F2 ; OR accumulator with stack relative $F2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $C3.b		; 02 C3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: NCZ]
	cmp $05.b,S		; C3 05 ; Compare accumulator (stack relative) $05.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	.db $42, $81		; 42 81 ; Reserved instruction
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $24.b,S		; C3 24 ; Compare accumulator (stack relative) $24.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	jsl $C30542.l		; 22 42 05 C3 ; Jump to subroutine long $C30542.l [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $12.b,S		; 83 12 ; Store accumulator (stack relative) $12.b,S [Reads: Stack Pointer, Accumulator]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D7.b		; 00 D7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($00.b,S),Y		; 93 00 ; Store accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pea $7605.w		; F4 05 76 ; Push absolute address $7605.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	mvn $3B,$FF		; 54 FF 3B ; Move block negative $3B,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $443F00.l,X		; 1F 00 3F 44 ; Logical OR long $443F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	and $132C00.l,X		; 3F 00 2C 13 ; AND accumulator with memory (long,X) $132C00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $111120.l,X		; 1F 20 11 11 ; Logical OR long $111120.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $233F.w		; 2C 3F 23 ; Test bits $233F.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $070044.l		; 8F 44 00 07 ; Store accumulator (long) $070044.l [Reads: Accumulator]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta [$00.b]		; 87 00 ; Store accumulator (long) [$00.b] [Reads: Direct Page, Accumulator]
	sty $03.b		; 84 03 ; Store Y register to $03.b [Reads: Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$88.b]		; 07 88 ; OR accumulator with memory (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	sty $87.b		; 84 87 ; Store Y register to $87.b [Reads: Y Index]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $87.b		; 02 87 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CF.b		; 00 CF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: NCZ]
	sta [$83.b]		; 87 83 ; Store accumulator (long) [$83.b] [Reads: Direct Page, Accumulator]
	rol $03.b		; 26 03 ; Rotate left $03.b [Reads: Direct Page] [Flags: NCZ]
	ora ($87.b,X)		; 01 87 ; Logical OR ($87.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $870084.l		; 22 84 00 87 ; Jump to subroutine long $870084.l [Writes: Stack Pointer] [Flow: call]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $B1.b		; 02 B1 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $BD,$00		; 44 00 BD ; Move block positive $BD,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda $1CA300.l,X		; BF 00 A3 1C ; Load long $1CA300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($4A.b),Y		; B1 4A ; Load accumulator ($4A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $A5.b		; A5 A5 ; Load $A5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $BF.b,S		; A3 BF ; Load accumulator (stack relative) $BF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $DE.b		; 04 DE ; Test and set bits $DE.b [Reads: Accumulator] [Flags: Z]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $DF,$00		; 44 00 DF ; Move block positive $DF,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cpx #$26.b		; E0 26 ; Compare #$26.b with X register [Reads: X Index] [Flags: NCZ]
	.db $50, $8F		; 50 8F ; Branch if overflow clear to $50, $8F [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $5221.w,X		; DE 21 52 ; Decrement memory $5221.w,X [Reads: X Index] [Flags: NZ]
	eor ($52.b,S),Y		; 53 52 ; XOR accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $020000.l,X		; DF 00 00 02 ; Compare accumulator (long,X) $020000.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $E5.b		; 02 E5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $A5.b		; 14 A5 ; Test and reset bits $A5.b [Reads: Accumulator] [Flags: Z]
	.db $42, $80		; 42 80 ; Reserved instruction
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $F7.b,S		; 43 F7 ; Exclusive OR accumulator with stack relative $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $63.b,X		; 94 63 ; Store Y register $63.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora $9A.b,S		; 03 9A ; OR accumulator with stack relative $9A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stx $94.b,Y		; 96 94 ; Store X register $94.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sbc [$23.b],Y		; F7 23 ; Subtract with carry (long indexed) [$23.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9C.b		; 00 9C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $92.b		; 00 92 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	stz $94.b		; 64 94 ; Store zero to $94.b
	sta ($9E.b)		; 92 9E ; Store accumulator (indirect) ($9E.b) [Reads: Direct Page, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: NCZ]
	sbc $005E10.l,X		; FF 10 5E 00 ; Subtract with carry (long,X) $005E10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $1200.w,X		; 1E 00 12 ; Arithmetic shift left $1200.w,X [Reads: X Index] [Flags: NCZ]
	tsb $4000.w		; 0C 00 40 ; Test and set bits $4000.w [Reads: Accumulator] [Flags: Z]
	lda $52B380.l,X		; BF 80 B3 52 ; Load long $52B380.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($1E.b)		; 12 1E ; OR accumulator with memory (indirect) ($1E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $84		; 80 84 ; Branch always to $80, $84 [Flow: branch]
	cmp $02.b,X		; D5 02 ; Compare accumulator $02.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $BD00FD.l		; 0F FD 00 BD ; OR accumulator with memory (long) $BD00FD.l [Writes: Accumulator] [Flags: NZ]
	brk $3D.b		; 00 3D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $6542.w,X		; 7D 42 65 ; Add $6542.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $25.b		; A5 25 ; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $020023.l,X		; 3F 23 00 02 ; AND accumulator with memory (long,X) $020023.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $46FF00.l		; EF 00 FF 46 ; Subtract with carry (long) $46FF00.l [Writes: Accumulator] [Flags: NCVZ]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $29.b		; 05 29 ; Logical OR $29.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $22		; 10 22 ; Branch if plus to $10, $22 [Flow: branch]
	and #$18.b		; 29 18 ; Logical AND #$18.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $200000.l		; EF 00 00 20 ; Subtract with carry (long) $200000.l [Writes: Accumulator] [Flags: NCVZ]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $14D3.w		; 20 D3 14 ; Jump to subroutine at $14D3.w [Writes: Stack Pointer] [Flow: call]
	cmp ($22.b)		; D2 22 ; Compare accumulator (indirect) ($22.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $42, $E3		; 42 E3 ; Reserved instruction
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $F0.b		; 04 F0 ; Test and set bits $F0.b [Reads: Accumulator] [Flags: Z]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $67.b		; 84 67 ; Store Y register to $67.b [Reads: Y Index]
	ora $09.b,S		; 03 09 ; OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($8C.b,S),Y		; 53 8C ; XOR accumulator (stack relative indirect indexed) ($8C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	stz $52.b		; 64 52 ; Store zero to $52.b
	eor ($DF.b,S),Y		; 53 DF ; XOR accumulator (stack relative indirect indexed) ($DF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $F9,$00		; 44 00 F9 ; Move block positive $F9,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr ($6400.w,X)		; FC 00 64 ; Jump to subroutine indirect indexed ($6400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $89.b		; 04 89 ; Test and set bits $89.b [Reads: Accumulator] [Flags: Z]
	bit #$64.b		; 89 64 ; Test bits #$64.b with accumulator [Reads: Accumulator] [Flags: Z]
	jsr ($7883.w,X)		; FC 83 78 ; Jump to subroutine indirect indexed ($7883.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $FF0044.l,X		; 7F 44 00 FF ; Add long $FF0044.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	cop $7D.b		; 02 7D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
	and #$B5.b		; 29 B5 ; Logical AND #$B5.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($46.b,X)		; 81 46 ; Store accumulator ($46.b,X) [Reads: Direct Page, Accumulator, X Index]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $3C00.w,X		; BD 00 3C ; Load $3C00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $6600.w,X		; 7E 00 66 ; Rotate right $6600.w,X [Reads: X Index] [Flags: NCZ]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $133F.w,X		; 3C 3F 13 ; Test bits $133F.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	jsr $7F1F.w		; 20 1F 7F ; Jump to subroutine at $7F1F.w [Writes: Stack Pointer] [Flow: call]
	and ($52.b,S),Y		; 33 52 ; AND accumulator (stack relative indirect indexed) ($52.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($73.b,X)		; 21 73 ; Logical AND ($73.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $3F1400.l		; 22 00 14 3F ; Jump to subroutine long $3F1400.l [Writes: Stack Pointer] [Flow: call]
	jsr $737F.w		; 20 7F 73 ; Jump to subroutine at $737F.w [Writes: Stack Pointer] [Flow: call]
	eor ($8C.b)		; 52 8C ; Exclusive OR accumulator with memory (indirect) ($8C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($00.b,S),Y		; 73 00 ; Add with carry (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sta [$03.b]		; 87 03 ; Store accumulator (long) [$03.b] [Reads: Direct Page, Accumulator]
	sty $03.b		; 84 03 ; Store Y register to $03.b [Reads: Y Index]
	cmp [$83.b]		; C7 83 ; Compare accumulator (long) [$83.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	mvp $C7,$83		; 44 83 C7 ; Move block positive $C7,$83 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $870600.l		; 22 00 06 87 ; Jump to subroutine long $870600.l [Writes: Stack Pointer] [Flow: call]
	sty $C7.b		; 84 C7 ; Store Y register to $C7.b [Reads: Y Index]
	cmp [$44.b]		; C7 44 ; Compare accumulator (long) [$44.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp [$84.b]		; C7 84 ; Compare accumulator (long) [$84.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta [$04.b],Y		; 97 04 ; Store accumulator (long indexed) [$04.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ora $87.b,S		; 03 87 ; OR accumulator with stack relative $87.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $94.b,S		; 03 94 ; OR accumulator with stack relative $94.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $43.b,S		; 03 43 ; OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $F70000.l,X		; FF 00 00 F7 ; Subtract with carry (long,X) $F70000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $871400.l		; 22 00 14 87 ; Jump to subroutine long $871400.l [Writes: Stack Pointer] [Flow: call]
	sty $87.b		; 84 87 ; Store Y register to $87.b [Reads: Y Index]
	sta [$EC.b],Y		; 97 EC ; Store accumulator (long indexed) [$EC.b],Y [Reads: Direct Page, Y Index, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc [$00.b],Y		; F7 00 ; Subtract with carry (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $16A916.l,X		; BF 16 A9 16 ; Load long $16A916.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $11AA13.l,X		; BF 13 AA 11 ; Load long $11AA13.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $BF0F00.l		; 22 00 0F BF ; Jump to subroutine long $BF0F00.l [Writes: Stack Pointer] [Flow: call]
	lda #$BF.b		; A9 BF ; Load #$BF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	eor $B8.b		; 45 B8 ; Exclusive OR $B8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $5F.b		; 00 5F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $8C53.w		; 8D 53 8C ; Store accumulator to $8C53.w [Reads: Accumulator]
	dec $528C.w,X		; DE 8C 52 ; Decrement memory $528C.w,X [Reads: X Index] [Flags: NZ]
	sty $6483.w		; 8C 83 64 ; Store Y register to $6483.w [Reads: Y Index]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stz $0022.w,X		; [PATTERN: Memory clearing operation] 9E 22 00 ; Store zero to $0022.w,X [Reads: X Index]
	trb $DF.b		; 14 DF ; Test and reset bits $DF.b [Reads: Accumulator] [Flags: Z]
	eor ($DE.b,S),Y		; 53 DE ; XOR accumulator (stack relative indirect indexed) ($DE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $6152.w,X		; DE 52 61 ; Decrement memory $6152.w,X [Reads: X Index] [Flags: NZ]
	stz $C000.w,X		; 9E 00 C0 ; Store zero to $C000.w,X [Reads: X Index]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	adc ($00.b),Y		; 71 00 ; Add with carry ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $0022.w		; 20 22 00 ; Jump to subroutine at $0022.w [Writes: Stack Pointer] [Flow: call]
	trb $C0.b		; 14 C0 ; Test and reset bits $C0.b [Reads: Accumulator] [Flags: Z]
	jsr $E0E0.w		; 20 E0 E0 ; Jump to subroutine at $E0E0.w [Writes: Stack Pointer] [Flow: call]
	.db $50, $51		; 50 51 ; Branch if overflow clear to $50, $51 [Flow: branch]
	jsr $F700.w		; 20 00 F7 ; Jump to subroutine at $F700.w [Writes: Stack Pointer] [Flow: call]
	adc $94.b,S		; 63 94 ; Add with carry (stack relative) $94.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $F7.b,S		; 63 F7 ; Add with carry (stack relative) $F7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $92.b,S		; 63 92 ; Add with carry (stack relative) $92.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($F3.b,X)		; 61 F3 ; Add with carry ($F3.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $F71400.l		; 22 00 14 F7 ; Jump to subroutine long $F71400.l [Writes: Stack Pointer] [Flow: call]
	sty $F7.b,X		; 94 F7 ; Store Y register $F7.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sbc ($92.b,S),Y		; F3 92 ; Subtract with carry (stack relative indirect indexed) ($92.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0C92.w		; 0C 92 0C ; Test and set bits $0C92.w [Reads: Accumulator] [Flags: Z]
	stz $940C.w,X		; 9E 0C 94 ; Store zero to $940C.w,X [Reads: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr ($F800.w,X)		; FC 00 F8 ; Jump to subroutine indirect indexed ($F800.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $9E0B00.l		; 22 00 0B 9E ; Jump to subroutine long $9E0B00.l [Writes: Stack Pointer] [Flow: call]
	sta ($9E.b)		; 92 9E ; Store accumulator (indirect) ($9E.b) [Reads: Direct Page, Accumulator]
	stz $0864.w		; 9C 64 08 ; Store zero to $0864.w
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	asl $120C.w,X		; 1E 0C 12 ; Arithmetic shift left $120C.w,X [Reads: X Index] [Flags: NCZ]
	tsb $4083.w		; 0C 83 40 ; Test and set bits $4083.w [Reads: Accumulator] [Flags: Z]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $3F00.w,X		; 1E 00 3F ; Arithmetic shift left $3F00.w,X [Reads: X Index] [Flags: NCZ]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $1E1400.l		; 22 00 14 1E ; Jump to subroutine long $1E1400.l [Writes: Stack Pointer] [Flow: call]
	ora ($1E.b)		; 12 1E ; OR accumulator with memory (indirect) ($1E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $2112.w,X		; 1E 12 21 ; Arithmetic shift left $2112.w,X [Reads: X Index] [Flags: NCZ]
	asl $3F00.w,X		; 1E 00 3F ; Arithmetic shift left $3F00.w,X [Reads: X Index] [Flags: NCZ]
	ora $3D1827.l,X		; 1F 27 18 3D ; Logical OR long $3D1827.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	and $18.b		; 25 18 ; Logical AND $18.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7F00.w,X		; 3D 00 7F ; AND accumulator with memory $7F00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $3D.b		; 00 3D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $3F0F00.l		; 22 00 0F 3F ; Jump to subroutine long $3F0F00.l [Writes: Stack Pointer] [Flow: call]
	and [$3D.b]		; 27 3D ; AND accumulator with memory (long) [$3D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $4225.w,X		; 3D 25 42 ; AND accumulator with memory $4225.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $EF00.w,X		; 3D 00 EF ; AND accumulator with memory $EF00.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp [$29.b]		; C7 29 ; Compare accumulator (long) [$29.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	dec $EF.b		; C6 EF ; Decrement $EF.b [Reads: Direct Page] [Flags: NZ]
	dec $29.b		; C6 29 ; Decrement $29.b [Reads: Direct Page] [Flags: NZ]
	dec $84.b		; C6 84 ; Decrement $84.b [Reads: Direct Page] [Flags: NZ]
	pea $2203.w		; F4 03 22 ; Push absolute address $2203.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $EFEF29.l		; EF 29 EF EF ; Subtract with carry (long) $EFEF29.l [Writes: Accumulator] [Flags: NCVZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $C1E300.l		; EF 00 E3 C1 ; Subtract with carry (long) $C1E300.l [Writes: Accumulator] [Flags: NCVZ]
	ldx #$41.b		; A2 41 ; Load #$41.b into X register [Writes: X Index] [Flags: NZ]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $0C8301.l		; 22 01 83 0C ; Jump to subroutine long $0C8301.l [Writes: Stack Pointer] [Flow: call]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	sbc $22.b,S		; E3 22 ; Subtract stack-relative $22.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A2.b,S		; E3 A2 ; Subtract stack-relative $A2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor $23.b,S		; 43 23 ; Exclusive OR accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp ($14.b)		; D2 14 ; Compare accumulator (indirect) ($14.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $00.b,S		; E3 00 ; Subtract stack-relative $00.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc $4998.w,X		; FD 98 49 ; Subtract with carry $4998.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $F3		; B0 F3 ; Branch if carry set to $B0, $F3 [Flow: branch]
	sta ($42.b,X)		; 81 42 ; Store accumulator ($42.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($84.b,X)		; 81 84 ; Store accumulator ($84.b,X) [Reads: Direct Page, Accumulator, X Index]
	ldy $2202.w,X		; BC 02 22 ; Load Y register $2202.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F349.w,X		; FD 49 F3 ; Subtract with carry $F349.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $42.b,S		; C3 42 ; Compare accumulator (stack relative) $42.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	bit $C3.b		; 24 C3 ; Test bits $C3.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $F8.b		; 04 F8 ; Test and set bits $F8.b [Reads: Accumulator] [Flags: Z]
	inc $939C.w,X		; FE 9C 93 ; Increment memory $939C.w,X [Reads: X Index] [Flags: NZ]
	tsb $839F.w		; 0C 9F 83 ; Test and set bits $839F.w [Reads: Accumulator] [Flags: Z]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	jsl $FC1400.l		; 22 00 14 FC ; Jump to subroutine long $FC1400.l [Writes: Stack Pointer] [Flow: call]
	tsb $FE.b		; 04 FE ; Test and set bits $FE.b [Reads: Accumulator] [Flags: Z]
	sta $9E6193.l,X		; 9F 93 61 9E ; Store accumulator (long,X) $9E6193.l,X [Reads: Accumulator, X Index]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($0C.b)		; 12 0C ; OR accumulator with memory (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $864906.l		; 8F 06 49 86 ; Store accumulator (long) $864906.l [Reads: Accumulator]
	inc $FC00.w,X		; FE 00 FC ; Increment memory $FC00.w,X [Reads: X Index] [Flags: NZ]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $3C0B00.l		; 22 00 0B 3C ; Jump to subroutine long $3C0B00.l [Writes: Stack Pointer] [Flow: call]
	ora ($8F.b)		; 12 8F ; OR accumulator with memory (indirect) ($8F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $B84432.l		; CF 32 44 B8 ; Compare accumulator (long) $B84432.l [Reads: Accumulator] [Flags: NCZ]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sta $E8.b,S		; 83 E8 ; Store accumulator (stack relative) $E8.b,S [Reads: Stack Pointer, Accumulator]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $7E00.w,X		; 3C 00 7E ; Test bits $7E00.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $3C0700.l		; 22 00 07 3C ; Jump to subroutine long $3C0700.l [Writes: Stack Pointer] [Flow: call]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $4224.w,X		; 3C 24 42 ; Test bits $4224.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	bit $FF00.w,X		; 3C 00 FF ; Test bits $FF00.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $2B7FFF.l,X		; 1F FF 7F 2B ; Logical OR long $2B7FFF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $7F1F01.l,X		; FF 01 1F 7F ; Subtract with carry (long,X) $7F1F01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $FF.b		; 26 FF ; Rotate left $FF.b [Reads: Direct Page] [Flags: NCZ]
	ora ($9E.b,S),Y		; 13 9E ; OR accumulator (stack relative indirect indexed) ($9E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FBFFE6.l,X		; FF E6 FF FB ; Subtract with carry (long,X) $FBFFE6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $82FFC5.l,X		; FF C5 FF 82 ; Subtract with carry (long,X) $82FFC5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9CE381.l,X		; FF 81 E3 9C ; Subtract with carry (long,X) $9CE381.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($3E.b,X)		; C1 3E ; Compare accumulator ($3E.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sta $FDFBE7.l,X		; 9F E7 FB FD ; Store accumulator (long,X) $FDFBE7.l,X [Reads: Accumulator, X Index]
	inc $FF22.w,X		; FE 22 FF ; Increment memory $FF22.w,X [Reads: X Index] [Flags: NZ]
	ora ($E3.b,X)		; 01 E3 ; Logical OR ($E3.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	trb $C143.w		; 1C 43 C1 ; Test and reset bits $C143.w [Reads: Accumulator] [Flags: Z]
	rol $E309.w,X		; 3E 09 E3 ; Rotate left $E309.w,X [Reads: X Index] [Flags: NCZ]
	stz $C0FF.w		; 9C FF C0 ; Store zero to $C0FF.w
	sbc $B8FF60.l,X		; FF 60 FF B8 ; Subtract with carry (long,X) $B8FF60.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF2451.l,X		; FF 51 24 FF ; Subtract with carry (long,X) $FF2451.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $7C.b		; 02 7C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cmp [$46.b],Y		; D7 46 ; Compare accumulator (long indexed) [$46.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc $CF0087.l,X		; FF 87 00 CF ; Subtract with carry (long,X) $CF0087.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$FF.b]		; 47 FF ; Exclusive OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $FF23.w,X		; FE 23 FF ; Increment memory $FF23.w,X [Reads: X Index] [Flags: NZ]
	and $FE.b,S		; 23 FE ; AND accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jmp ($FF45.w,X)		; 7C 45 FF ; Jump indirect indexed to ($FF45.w,X) [Reads: X Index] [Flow: jump]
	adc $00FF26.l,X		; 7F 26 FF 00 ; Add long $00FF26.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and $7F.b,S		; 23 7F ; AND accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF33FC.l,X		; FF FC 33 FF ; Subtract with carry (long,X) $FF33FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$27.b		; E0 27 ; Compare #$27.b with X register [Reads: X Index] [Flags: NCZ]
	and $E7DFC3.l,X		; 3F C3 DF E7 ; AND accumulator with memory (long,X) $E7DFC3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $979FB7.l		; AF B7 9F 97 ; Load long $979FB7.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc $6CF6.w,X		; FE F6 6C ; Increment memory $6CF6.w,X [Reads: X Index] [Flags: NZ]
	pea $6090.w		; F4 90 60 ; Push absolute address $6090.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor [$67.b]		; 47 67 ; Exclusive OR accumulator with memory (long) [$67.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $22DD00.l,X		; FF 00 DD 22 ; Subtract with carry (long,X) $22DD00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	bit $B7.b		; 24 B7 ; Test bits $B7.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc $A0DFD0.l		; 6F D0 DF A0 ; Add with carry (long) $A0DFD0.l [Writes: Accumulator] [Flags: NCVZ]
	lda $CF7F4B.l,X		; BF 4B 7F CF ; Load long $CF7F4B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $011000.l		; 22 00 10 01 ; Jump to subroutine long $011000.l [Writes: Stack Pointer] [Flow: call]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $FEFF0F.l		; 0F 0F FF FE ; OR accumulator with memory (long) $FEFF0F.l [Writes: Accumulator] [Flags: NZ]
	sbc $3EFF7E.l,X		; FF 7E FF 3E ; Subtract with carry (long,X) $3EFF7E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $03FF0E.l,X		; FF 0E FF 03 ; Subtract with carry (long,X) $03FF0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF4301.l,X		; FF 01 43 FF ; Subtract with carry (long,X) $FF4301.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $3E7E.w,X		; FE 7E 3E ; Increment memory $3E7E.w,X [Reads: X Index] [Flags: NZ]
	asl $0103.w		; 0E 03 01 ; Arithmetic shift left $0103.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	sbc $BFFF7F.l,X		; FF 7F FF BF ; Subtract with carry (long,X) $BFFF7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FF0F.l,X		; FF 0F FF 00 ; Subtract with carry (long,X) $00FF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $7F04FF.l		; 22 FF 04 7F ; Jump to subroutine long $7F04FF.l [Writes: Stack Pointer] [Flow: call]
	adc $000FBF.l,X		; 7F BF 0F 00 ; Add long $000FBF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $06FF22.l,X		; 7F 22 FF 06 ; Add long $06FF22.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FCFF.w,X		; FE FF FC ; Increment memory $FCFF.w,X [Reads: X Index] [Flags: NZ]
	sbc $00FFF0.l,X		; FF F0 FF 00 ; Subtract with carry (long,X) $00FFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($00F0.w,X)		; FC F0 00 ; Jump to subroutine indirect indexed ($00F0.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsl $FC0CFF.l		; 22 FF 0C FC ; Jump to subroutine long $FC0CFF.l [Writes: Stack Pointer] [Flow: call]
	inc $FDF1.w,X		; FE F1 FD ; Increment memory $FDF1.w,X [Reads: X Index] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$FF		; E2 FF
	cmp [$FF.b]		; C7 FF ; Compare accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $FF78FF.l		; 4F FF 78 FF ; Exclusive OR accumulator with memory (long) $FF78FF.l [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cop $7F.b		; 02 7F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $3F.b		; 45 3F ; Exclusive OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $07FF43.l		; CF 43 FF 07 ; Compare accumulator (long) $07FF43.l [Reads: Accumulator] [Flags: NCZ]
	ora $7F.b		; 05 7F ; Logical OR $7F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta [$3F.b]		; 87 3F ; Store accumulator (long) [$3F.b] [Reads: Direct Page, Accumulator]
	cmp $1F.b,S		; C3 1F ; Compare accumulator (stack relative) $1F.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sbc ($22.b,X)		; E1 22 ; Subtract with carry ($22.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $080722.l		; 0F 22 07 08 ; OR accumulator with memory (long) $080722.l [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $007F01.l,X		; FF 01 7F 00 ; Subtract with carry (long,X) $007F01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $280700.l,X		; 1F 00 07 28 ; Logical OR long $280700.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $071F7F.l,X		; FF 7F 1F 07 ; Subtract with carry (long,X) $071F7F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0F.b,X)		; 01 0F ; Logical OR ($0F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $1F.b,S		; 03 1F ; OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $00220F.l,X		; 3F 0F 22 00 ; AND accumulator with memory (long,X) $00220F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $BB.b		; 84 BB ; Store Y register to $BB.b [Reads: Y Index]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $197F1F.l,X		; 7F 1F 7F 19 ; Add long $197F1F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $21FF31.l,X		; FF 31 FF 21 ; Subtract with carry (long,X) $21FF31.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $27FF23.l,X		; FF 23 FF 27 ; Subtract with carry (long,X) $27FF23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3CFF3F.l,X		; FF 3F FF 3C ; Subtract with carry (long,X) $3CFF3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $3F241F.l,X		; 1F 1F 24 3F ; Logical OR long $3F241F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $3C.b		; 02 3C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF44FC.l,X		; FF FC 44 FF ; Subtract with carry (long,X) $FF44FC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $E004FF.l		; 22 FF 04 E0 ; Jump to subroutine long $E004FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $E0FF10.l,X		; FF 10 FF E0 ; Subtract with carry (long,X) $E0FF10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cop $E0.b		; 02 E0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C143FF.l,X		; 1F FF 43 C1 ; Logical OR long $C143FF.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $E303.w,X		; 3E 03 E3 ; Rotate left $E303.w,X [Reads: X Index] [Flags: NCZ]
	trb $01FF.w		; 1C FF 01 ; Test and reset bits $01FF.w [Reads: Accumulator] [Flags: Z]
	jsl $0104FF.l		; 22 FF 04 01 ; Jump to subroutine long $0104FF.l [Writes: Stack Pointer] [Flow: call]
	sbc $718F02.l,X		; FF 02 8F 71 ; Subtract with carry (long,X) $718F02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FB45FB.l,X		; FF FB 45 FB ; Subtract with carry (long,X) $FB45FB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $F9.b		; C5 F9 ; Compare $F9.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ldx $FC.b		; A6 FC ; Load $FC.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $FF.b		; 24 FF ; Test bits $FF.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	sbc $B8F734.l		; EF 34 F7 B8 ; Subtract with carry (long) $B8F734.l [Writes: Accumulator] [Flags: NCVZ]
	cmp [$D7.b]		; C7 D7 ; Compare accumulator (long) [$D7.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	lda [$37.b],Y		; B7 37 ; Load accumulator (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$3B.b],Y		; 37 3B ; AND accumulator with memory (long indexed) [$3B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $45BF.w,X		; 3C BF 45 ; Test bits $45BF.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $FF22FE.l,X		; FF FE 22 FF ; Subtract with carry (long,X) $FF22FE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $7E.b		; 06 7E ; Arithmetic shift left $7E.b [Reads: Direct Page] [Flags: NCZ]
	sbc $09FF3C.l,X		; FF 3C FF 09 ; Subtract with carry (long,X) $09FF3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF2300.l,X		; FF 00 23 FF ; Subtract with carry (long,X) $FF2300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $093C7E.l		; 0F 7E 3C 09 ; OR accumulator with memory (long) $093C7E.l [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00FF.w		; 0E FF 00 ; Arithmetic shift left $00FF.w [Flags: NCZ]
	sbc $11FF01.l,X		; FF 01 FF 11 ; Subtract with carry (long,X) $11FF01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FCFF70.l,X		; FF 70 FF FC ; Subtract with carry (long,X) $FCFF70.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $7F03FF.l		; 22 FF 03 7F ; Jump to subroutine long $7F03FF.l [Writes: Stack Pointer] [Flow: call]
	inc $81E0.w,X		; FE E0 81 ; Increment memory $81E0.w,X [Reads: X Index] [Flags: NZ]
	sta $10.b,S		; 83 10 ; Store accumulator (stack relative) $10.b,S [Reads: Stack Pointer, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $00FF43.l,X		; 7F 43 FF 00 ; Add long $00FF43.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $FF8301.l,X		; FF 01 83 FF ; Subtract with carry (long,X) $FF8301.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FF2500.l		; 22 00 25 FF ; Jump to subroutine long $FF2500.l [Writes: Stack Pointer] [Flow: call]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FF44FC.l		; 0F FC 44 FF ; OR accumulator with memory (long) $FF44FC.l [Writes: Accumulator] [Flags: NZ]
	inc $FD08.w,X		; FE 08 FD ; Increment memory $FD08.w,X [Reads: X Index] [Flags: NZ]
	inc $FCFB.w,X		; FE FB FC ; Increment memory $FCFB.w,X [Reads: X Index] [Flags: NZ]
	ora [$F9.b]		; 07 F9 ; OR accumulator with memory (long) [$F9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $24F000.l,X		; FF 00 F0 24 ; Subtract with carry (long,X) $24F000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $9F7F9F.l,X		; FF 9F 7F 9F ; Subtract with carry (long,X) $9F7F9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $708333.l,X		; FF 33 83 70 ; Subtract with carry (long,X) $708333.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $3C023F.l,X		; FF 3F 02 3C ; Subtract with carry (long,X) $3C023F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $3F241F.l,X		; 1F 1F 24 3F ; Logical OR long $3F241F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $3C.b		; 04 3C ; Test and set bits $3C.b [Reads: Accumulator] [Flags: Z]
	sbc $C0FF00.l,X		; FF 00 FF C0 ; Subtract with carry (long,X) $C0FF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $F8.b,S		; 43 F8 ; Exclusive OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc [$09.b]		; 67 09 ; Add with carry (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$2F.b],Y		; F7 2F ; Subtract with carry (long indexed) [$2F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F02F.w,Y		; F9 2F F0 ; Subtract with carry $F02F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0001FE.l		; 0F FE 01 00 ; OR accumulator with memory (long) $0001FE.l [Writes: Accumulator] [Flags: NZ]
	cpy #$25.b		; C0 25 ; Compare #$25.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpx #$0F.b		; E0 0F ; Compare #$0F.b with X register [Reads: X Index] [Flags: NCZ]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $907F10.l,X		; FF 10 7F 90 ; Subtract with carry (long,X) $907F10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$98.b],Y		; 77 98 ; Add with carry (long indexed) [$98.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp $DFC7BF.l		; CF BF C7 DF ; Compare accumulator (long) $DFC7BF.l [Reads: Accumulator] [Flags: NCZ]
	cpx #$67.b		; E0 67 ; Compare #$67.b with X register [Reads: X Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $DC00FF.l		; 0F FF 00 DC ; OR accumulator with memory (long) $DC00FF.l [Writes: Accumulator] [Flags: NZ]
	and $F8.b,S		; 23 F8 ; AND accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$B0.b]		; 27 B0 ; AND accumulator with memory (long) [$B0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $D4DC6B.l		; 6F 6B DC D4 ; Add with carry (long) $D4DC6B.l [Writes: Accumulator] [Flags: NCVZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	adc [$57.b],Y		; 77 57 ; Add with carry (long indexed) [$57.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $490027.l		; EF 27 00 49 ; Subtract with carry (long) $490027.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $F80500.l,X		; FF 00 05 F8 ; Subtract with carry (long,X) $F80500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$F0.b]		; 07 F0 ; OR accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $26CFF0.l		; 0F F0 CF 26 ; OR accumulator with memory (long) $26CFF0.l [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: NCZ]
	and $FF3BFF.l,X		; 3F FF 3B FF ; AND accumulator with memory (long,X) $FF3BFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and [$FF.b],Y		; 37 FF ; AND accumulator with memory (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $8F7F43.l		; 2F 43 7F 8F ; AND accumulator with memory (long) $8F7F43.l [Writes: Accumulator] [Flags: NZ]
	asl $3F.b		; 06 3F ; Arithmetic shift left $3F.b [Reads: Direct Page] [Flags: NCZ]
	cmp $373B3F.l		; CF 3F 3B 37 ; Compare accumulator (long) $373B3F.l [Reads: Accumulator] [Flags: NCZ]
	and [$2F.b]		; 27 2F ; AND accumulator with memory (long) [$2F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $3F0E0F.l		; 22 0F 0E 3F ; Jump to subroutine long $3F0E0F.l [Writes: Stack Pointer] [Flow: call]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $3352.w,X		; 3E 52 33 ; Rotate left $3352.w,X [Reads: X Index] [Flags: NCZ]
	lsr $37.b,X		; 56 37 ; Logical shift right $37.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	jmp $403F.w		; 4C 3F 40 ; Jump to $403F.w [Flow: jump]
	and $7F1E61.l,X		; 3F 61 1E 7F ; AND accumulator with memory (long,X) $7F1E61.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $0C0900.l		; 22 00 09 0C ; Jump to subroutine long $0C0900.l [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $013F07.l,X		; 3F 07 3F 01 ; AND accumulator with memory (long,X) $013F07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $1F.b,S		; 43 1F ; Exclusive OR accumulator with stack relative $1F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $000700.l		; 0F 00 07 00 ; OR accumulator with memory (long) $000700.l [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $1F1F3F.l,X		; 3F 3F 1F 1F ; AND accumulator with memory (long,X) $1F1F3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $013583.l		; 0F 83 35 01 ; OR accumulator with memory (long) $013583.l [Writes: Accumulator] [Flags: NZ]
	ora $3B.b		; 05 3B ; Logical OR $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0FFF17.l,X		; FF 17 FF 0F ; Subtract with carry (long,X) $0FFF17.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $016B83.l,X		; FF 83 6B 01 ; Subtract with carry (long,X) $016B83.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $173B03.l,X		; 3F 03 3B 17 ; AND accumulator with memory (long,X) $173B03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $3F231F.l		; 0F 1F 23 3F ; OR accumulator with memory (long) $3F231F.l [Writes: Accumulator] [Flags: NZ]
	mvp $E0,$FF		; 44 FF E0 ; Move block positive $E0,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $FF.b		; 46 FF ; Logical shift right $FF.b [Reads: Direct Page] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF27F0.l,X		; FF F0 27 FF ; Subtract with carry (long,X) $FF27F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $07.b,S		; 43 07 ; Exclusive OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $01FF70.l		; 8F 70 FF 01 ; Store accumulator (long) $01FF70.l [Reads: Accumulator]
	sbc $07FF03.l,X		; FF 03 FF 07 ; Subtract with carry (long,X) $07FF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1DFF0E.l,X		; FF 0E FF 1D ; Subtract with carry (long,X) $1DFF0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$FE.b],Y		; 17 FE ; OR accumulator with memory (long indexed) [$FE.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $9FF8.w,X		; FD F8 9F ; Subtract with carry $9FF8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E0FFCF.l,X		; FF CF FF E0 ; Subtract with carry (long,X) $E0FFCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $BFFFCF.l,X		; FF CF FF BF ; Subtract with carry (long,X) $BFFFCF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $C0FF70.l,X		; FF 70 FF C0 ; Subtract with carry (long,X) $C0FF70.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($9F83.w,X)		; FC 83 9F ; Jump to subroutine indirect indexed ($9F83.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp $BFCFE0.l		; CF E0 CF BF ; Compare accumulator (long) $BFCFE0.l [Reads: Accumulator] [Flags: NCZ]
	adc $06FF25.l,X		; 7F 25 FF 06 ; Add long $06FF25.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$FF.b]		; C7 FF ; Compare accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	lda ($FF.b,S),Y		; B3 FF ; Load accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $FF.b,S		; 83 FF ; Store accumulator (stack relative) $FF.b,S [Reads: Stack Pointer, Accumulator]
	cmp [$2C.b]		; C7 2C ; Compare accumulator (long) [$2C.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $62040E.l,X		; FF 0E 04 62 ; Subtract with carry (long,X) $62040E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $11.b		; 26 11 ; Rotate left $11.b [Reads: Direct Page] [Flags: NCZ]
	and $2082.w,X		; 3D 82 20 ; AND accumulator with memory $2082.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $DFB847.l,X		; DF 47 B8 DF ; Compare accumulator (long,X) $DFB847.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	jsr $205F.w		; 20 5F 20 ; Jump to subroutine at $205F.w [Writes: Stack Pointer] [Flow: call]
	adc $010028.l,X		; 7F 28 00 01 ; Add long $010028.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF47FD.l,X		; FF FD 47 FF ; Subtract with carry (long,X) $FF47FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FF24.w,X		; FE 24 FF ; Increment memory $FF24.w,X [Reads: X Index] [Flags: NZ]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FE23.w,X		; FD 23 FE ; Subtract with carry $FE23.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $440F00.l,X		; FF 00 0F 44 ; Subtract with carry (long,X) $440F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1C000E.l,X		; FF 0E 00 1C ; Subtract with carry (long,X) $1C000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $0A.b		; 84 0A ; Store Y register to $0A.b [Reads: Y Index]
	ora $E0.b,S		; 03 E0 ; OR accumulator with stack relative $E0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $C0.b		; 24 C0 ; Test bits $C0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sbc $FEFF00.l,X		; FF 00 FF FE ; Subtract with carry (long,X) $FEFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $F8FC.w,X		; FE FC F8 ; Increment memory $F8FC.w,X [Reads: X Index] [Flags: NZ]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $3FD8.w,X		; 1E D8 3F ; Arithmetic shift left $3FD8.w,X [Reads: X Index] [Flags: NCZ]
	sty $B44F.w		; 8C 4F B4 ; Store Y register to $B44F.w [Reads: Y Index]
	ora [$FC.b]		; 07 FC ; OR accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$BD.b]		; 47 BD ; Exclusive OR accumulator with memory (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $DB.b		; 66 DB ; Rotate right $DB.b [Reads: Direct Page] [Flags: NCZ]
	and $027F.w,X		; 3D 7F 02 ; AND accumulator with memory $027F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $30, $48		; 30 48 ; Branch if minus to $30, $48 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($43.b,X)		; 81 43 ; Store accumulator ($43.b,X) [Reads: Direct Page, Accumulator, X Index]
	bit $FB.b		; 24 FB ; Test bits $FB.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor $84.b,S		; 43 84 ; Exclusive OR accumulator with stack relative $84.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $86.b		; 05 86 ; Logical OR $86.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $708F.w,Y		; 79 8F 70 ; Add $708F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF220F.l,X		; FF 0F 22 FF ; Subtract with carry (long,X) $FF220F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $FF0F.w		; 0C 0F FF ; Test and set bits $FF0F.w [Reads: Accumulator] [Flags: Z]
	sbc $5BDEAD.l,X		; FF AD DE 5B ; Subtract with carry (long,X) $5BDEAD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $7B94.w,X		; BC 94 7B ; Load Y register $7B94.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	adc [$96.b],Y		; 77 96 ; Add with carry (long indexed) [$96.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $9443.w		; 6E 43 94 ; Rotate right $9443.w [Flags: NCZ]
	jmp ($D301.w)		; 6C 01 D3 ; Jump indirect to ($D301.w) [Flow: jump]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $0301.w		; 0E 01 03 ; Arithmetic shift left $0301.w [Flags: NCZ]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $CF		; F0 CF ; Branch if equal to $F0, $CF [Flow: branch]
	sbc [$CF.b],Y		; F7 CF ; Subtract with carry (long indexed) [$CF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $90		; F0 90 ; Branch if equal to $F0, $90 [Flow: branch]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $0E,$00		; 44 00 0E ; Move block positive $0E,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora [$C0.b]		; 07 C0 ; OR accumulator with memory (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $0F1F3F.l,X		; FF 3F 1F 0F ; Subtract with carry (long,X) $0F1F3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $CF3F43.l		; 0F 43 3F CF ; OR accumulator with memory (long) $CF3F43.l [Writes: Accumulator] [Flags: NZ]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $E71F46.l		; EF 46 1F E7 ; Subtract with carry (long) $E71F46.l [Writes: Accumulator] [Flags: NCVZ]
	cop $E3.b		; 02 E3 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0F22E1.l,X		; 1F E1 22 0F ; Logical OR long $0F22E1.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $030C07.l		; 22 07 0C 03 ; Jump to subroutine long $030C07.l [Writes: Stack Pointer] [Flow: call]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sty $C8FF.w		; 8C FF C8 ; Store Y register to $C8FF.w [Reads: Y Index]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jmp ($2FFC.w)		; 6C FC 2F ; Jump indirect to ($2FFC.w) [Flow: jump]
	sbc $843F07.l,X		; FF 07 3F 84 ; Subtract with carry (long,X) $843F07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $02.b,X		; D5 02 ; Compare accumulator $02.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	ora $F9060F.l,X		; 1F 0F 06 F9 ; Logical OR long $F9060F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $03.b,S		; 43 03 ; Exclusive OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($0F05.w,X)		; FC 05 0F ; Jump to subroutine indirect indexed ($0F05.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc ($1F.b),Y		; F1 1F ; Subtract with carry ($1F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1F.b,S		; E3 1F ; Subtract stack-relative $1F.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc [$43.b]		; E7 43 ; Subtract with carry (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $0022CF.l,X		; 3F CF 22 00 ; AND accumulator with memory (long,X) $0022CF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $BB.b		; 85 BB ; Store accumulator to $BB.b [Reads: Accumulator]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($02.b,X)		; A1 02 ; Load accumulator ($02.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0F3F01.l		; 0F 01 3F 0F ; OR accumulator with memory (long) $0F3F01.l [Writes: Accumulator] [Flags: NZ]
	sty $B0.b		; 84 B0 ; Store Y register to $B0.b [Reads: Y Index]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $030483.l		; 0F 83 04 03 ; OR accumulator with memory (long) $030483.l [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $FFCF02.l,X		; FF 02 CF FF ; Subtract with carry (long,X) $FFCF02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$28.b]		; 87 28 ; Store accumulator (long) [$28.b] [Reads: Direct Page, Accumulator]
	sbc $FF3B02.l,X		; FF 02 3B FF ; Subtract with carry (long,X) $FF3B02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $44.b,X		; 76 44 ; Rotate right $44.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $D843EC.l,X		; FF EC 43 D8 ; Subtract with carry (long,X) $D843EC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFB80A.l,X		; FF 0A B8 FF ; Subtract with carry (long,X) $FFB80A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc [$EF.b],Y		; F7 EF ; Subtract with carry (long indexed) [$EF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $BFDFDF.l		; EF DF DF BF ; Subtract with carry (long) $BFDFDF.l [Writes: Accumulator] [Flags: NCVZ]
	lda $07F845.l,X		; BF 45 F8 07 ; Load long $07F845.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $46.b,S		; 03 46 ; OR accumulator with stack relative $46.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $700000.l,X		; FF 00 00 70 ; Subtract with carry (long,X) $700000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F0000E.l,X		; FF 0E 00 F0 ; Subtract with carry (long,X) $F0000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $019F60.l		; 0F 60 9F 01 ; OR accumulator with memory (long) $019F60.l [Writes: Accumulator] [Flags: NZ]
	inc $FC83.w,X		; FE 83 FC ; Increment memory $FC83.w,X [Reads: X Index] [Flags: NZ]
	sta [$F8.b]		; 87 F8 ; Store accumulator (long) [$F8.b] [Reads: Direct Page, Accumulator]
	ora [$F9.b]		; 07 F9 ; OR accumulator with memory (long) [$F9.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $0025C0.l,X		; 3F C0 25 00 ; AND accumulator with memory (long,X) $0025C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($E01F.w,X)		; FC 1F E0 ; Jump to subroutine indirect indexed ($E01F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $E68581.l,X		; 7F 81 85 E6 ; Add long $E68581.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $007F03.l,X		; FF 03 7F 00 ; Subtract with carry (long,X) $007F03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $F3.b		; 84 F3 ; Store Y register to $F3.b [Reads: Y Index]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $807F00.l,X		; 7F 00 7F 80 ; Add long $807F00.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $00,$7F		; 44 7F 00 ; Move block positive $00,$7F [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	asl $80.b		; 06 80 ; Arithmetic shift left $80.b [Reads: Direct Page] [Flags: NCZ]
	and $201F40.l,X		; 3F 40 1F 20 ; AND accumulator with memory (long,X) $201F40.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FB30CF.l		; 0F CF 30 FB ; OR accumulator with memory (long) $FB30CF.l [Writes: Accumulator] [Flags: NZ]
	tsb $F3.b		; 04 F3 ; Test and set bits $F3.b [Reads: Accumulator] [Flags: Z]
	tsb $9AE5.w		; 0C E5 9A ; Test and set bits $9AE5.w [Reads: Accumulator] [Flags: Z]
	sbc $FBC6.w,Y		; F9 C6 FB ; Subtract with carry $FBC6.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $FF.b		; E4 FF ; Compare $FF.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $F0, $FE		; F0 FE ; Branch if equal to $F0, $FE [Flow: branch]
	sbc ($22.b),Y		; F1 22 ; Subtract with carry ($22.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $4E		; F0 4E ; Branch if equal to $F0, $4E [Flow: branch]
	sbc $002800.l,X		; FF 00 28 00 ; Subtract with carry (long,X) $002800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$FE.b]		; 07 FE ; OR accumulator with memory (long) [$FE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $3F3EFF.l,X		; FF FF 3E 3F ; Subtract with carry (long,X) $3F3EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $091F.w		; 1C 1F 09 ; Test and reset bits $091F.w [Reads: Accumulator] [Flags: Z]
	sta $58.b,S		; 83 58 ; Store accumulator (stack relative) $58.b,S [Reads: Stack Pointer, Accumulator]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $E0030F.l,X		; 3F 0F 03 E0 ; AND accumulator with memory (long,X) $E0030F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	ora $BC83.w,Y		; 19 83 BC ; OR accumulator with memory $BC83.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $BE4DC0.l,X		; 3F C0 4D BE ; AND accumulator with memory (long,X) $BE4DC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($B3.b)		; 52 B3 ; Exclusive OR accumulator with memory (indirect) ($B3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr $B7.b,X		; 56 B7 ; Logical shift right $B7.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	jmp $40BF.w		; 4C BF 40 ; Jump to $40BF.w [Flow: jump]
	lda $1FDE21.l,X		; BF 21 DE 1F ; Load long $1FDE21.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$83.b		; E0 83 ; Compare #$83.b with X register [Reads: X Index] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cop $23.b		; 02 23 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $997F9F.l,X		; 7F 9F 7F 99 ; Add long $997F9F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $016C.w		; 8D 6C 01 ; Store accumulator to $016C.w [Reads: Accumulator]
	bit $3F.b		; 24 3F ; Test bits $3F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $DF3C.w		; 0C 3C DF ; Test and set bits $DF3C.w [Reads: Accumulator] [Flags: Z]
	and $BB3EDD.l,X		; 3F DD 3E BB ; AND accumulator with memory (long,X) $BB3EDD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($F937.w,X)		; 7C 37 F9 ; Jump indirect indexed to ($F937.w,X) [Reads: X Index] [Flow: jump]
	and $E75FF3.l		; 2F F3 5F E7 ; AND accumulator with memory (long) $E75FF3.l [Writes: Accumulator] [Flags: NZ]
	eor $7F.b,S		; 43 7F ; Exclusive OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $840022.l		; CF 22 00 84 ; Compare accumulator (long) $840022.l [Reads: Accumulator] [Flags: NCZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($01.b)		; 52 01 ; Exclusive OR accumulator with memory (indirect) ($01.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	eor $01.b,S		; 43 01 ; Exclusive OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $867F00.l,X		; 1F 00 7F 86 ; Logical OR long $867F00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $01.b		; E5 01 ; Subtract $01.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsl $EF88FF.l		; 22 FF 88 EF ; Jump to subroutine long $EF88FF.l [Writes: Stack Pointer] [Flow: call]
	tsb $43.b		; 04 43 ; Test and set bits $43.b [Reads: Accumulator] [Flags: Z]
	sbc $FF2800.l,X		; FF 00 28 FF ; Subtract with carry (long,X) $FF2800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($83.b,X)		; 01 83 ; Logical OR ($83.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $250022.l,X		; FF 22 00 25 ; Subtract with carry (long,X) $250022.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0F1F46.l,X		; FF 46 1F 0F ; Subtract with carry (long,X) $0F1F46.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $07.b		; 45 07 ; Exclusive OR $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F0302.l,X		; 1F 02 03 1F ; Logical OR long $1F0302.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $010722.l		; 0F 22 07 01 ; OR accumulator with memory (long) $010722.l [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $1832E0.l,X		; FF E0 32 18 ; Subtract with carry (long,X) $1832E0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	tsb $E7FC.w		; 0C FC E7 ; Test and set bits $E7FC.w [Reads: Accumulator] [Flags: Z]
	sbc $0F1F10.l,X		; FF 10 1F 0F ; Subtract with carry (long,X) $0F1F10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $150606.l		; 0F 06 06 15 ; OR accumulator with memory (long) $150606.l [Writes: Accumulator] [Flags: NZ]
	ora $25.b,X		; 15 25 ; OR accumulator with memory $25.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $07.b		; 25 07 ; Logical AND $07.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$F0.b		; E0 F0 ; Compare #$F0.b with X register [Reads: X Index] [Flags: NCZ]
	sbc $FBFB.w,Y		; F9 FB FB ; Subtract with carry $FBFB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $E73F30.l,X		; 1F 30 3F E7 ; Logical OR long $E73F30.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $F0F808.l,X		; FF 08 F8 F0 ; Subtract with carry (long,X) $F0F808.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $60		; F0 60 ; Branch if equal to $F0, $60 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clv		; B8 ; Clear overflow flag [Flags: V]
	clv		; B8 ; Clear overflow flag [Flags: V]
	bit $E02C.w		; 2C 2C E0 ; Test bits $E02C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FDFDF.l,X		; 9F DF DF 0F ; Store accumulator (long,X) $0FDFDF.l,X [Reads: Accumulator, X Index]
	sbc $FE221E.l,X		; FF 1E 22 FE ; Subtract with carry (long,X) $FE221E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$24.b		; E0 24 ; Compare #$24.b with X register [Reads: X Index] [Flags: NCZ]
	adc $3F3F7F.l,X		; 7F 7F 3F 3F ; Add long $3F3F7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0C0C1F.l,X		; 1F 1F 0C 0C ; Logical OR long $0C0C1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy #$E6.b		; C0 E6 ; Compare #$E6.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora $1CF9.w,Y		; 19 F9 1C ; OR accumulator with memory $1CF9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($FF0F.w,X)		; FC 0F FF ; Jump to subroutine indirect indexed ($FF0F.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc [$FF.b],Y		; 77 FF ; Add with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $9AC7C4.l,X		; FF C4 C7 9A ; Subtract with carry (long,X) $9AC7C4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	jmp ($00FF.w,X)		; 7C FF 00 ; Jump indirect indexed to ($00FF.w,X) [Reads: X Index] [Flow: jump]
	sta $F08F60.l,X		; 9F 60 8F F0 ; Store accumulator (long,X) $F08F60.l,X [Reads: Accumulator, X Index]
	cmp $66F9F0.l		; CF F0 F9 66 ; Compare accumulator (long) $66F9F0.l [Reads: Accumulator] [Flags: NCZ]
	pea $F60F.w		; F4 0F F6 ; Push absolute address $F60F.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora $2706F9.l		; 0F F9 06 27 ; OR accumulator with memory (long) $2706F9.l [Writes: Accumulator] [Flags: NZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $06F900.l,X		; FF 00 F9 06 ; Subtract with carry (long,X) $06F900.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9F0E.w,Y		; F9 0E 9F ; Subtract with carry $9F0E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $0F.b		; 64 0F ; Store zero to $0F.b
	.db $F0, $4F		; F0 4F ; Branch if equal to $F0, $4F [Flow: branch]
	.db $F0, $9F		; F0 9F ; Branch if equal to $F0, $9F [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $450028.l,X		; FF 28 00 45 ; Subtract with carry (long,X) $450028.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $36E000.l,X		; FF 00 E0 36 ; Subtract with carry (long,X) $36E000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $70AF20.l,X		; DF 20 AF 70 ; Compare accumulator (long,X) $70AF20.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	lda [$78.b]		; A7 78 ; Load accumulator (long) [$78.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $00FF30.l		; CF 30 FF 00 ; Compare accumulator (long) $00FF30.l [Reads: Accumulator] [Flags: NCZ]
	adc $070F3F.l,X		; 7F 3F 0F 07 ; Add long $070F3F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $0DFE.w		; 0E FE 0D ; Arithmetic shift left $0DFE.w [Flags: NCZ]
	sbc $FC04.w,X		; FD 04 FC ; Subtract with carry $FC04.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($FE.b)		; 32 FE ; AND accumulator with memory (indirect) ($FE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$EF.b		; 29 EF ; Logical AND #$EF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $E7.b		; 24 E7 ; Test bits $E7.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $030100.l,X		; FF 00 01 03 ; Subtract with carry (long,X) $030100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $33		; 80 33 ; Branch always to $80, $33 [Flow: branch]
	cpy $EEDD.w		; CC DD EE ; Compare $EEDD.w with Y register [Reads: Y Index] [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ror $35.b,X		; 76 35 ; Rotate right $35.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $0F220E.l,X		; 1F 0E 22 0F ; Logical OR long $0F220E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $800400.l		; 22 00 04 80 ; Jump to subroutine long $800400.l [Writes: Stack Pointer] [Flow: call]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	eor $85.b,S		; 43 85 ; Exclusive OR accumulator with stack relative $85.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $23E0.w		; 4D E0 23 ; Exclusive OR $23E0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $82, $46, $A0		; 82 46 A0 ; Branch always long to $82, $46, $A0 [Flow: branch]
	adc $B1.b,S		; 63 B1 ; Add with carry (stack relative) $B1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($5F.b),Y		; 71 5F ; Add with carry ($5F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $DF9FAF.l,X		; 3F AF 9F DF ; AND accumulator with memory (long,X) $DF9FAF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$33.b		; C0 33 ; Compare #$33.b with Y register [Reads: Y Index] [Flags: NCZ]
	and ($39.b,S),Y		; 33 39 ; AND accumulator (stack relative indirect indexed) ($39.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $800E.w		; 1C 0E 80 ; Test and reset bits $800E.w [Reads: Accumulator] [Flags: Z]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: NCZ]
	jsr ($F903.w,X)		; FC 03 F9 ; Jump to subroutine indirect indexed ($F903.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora [$BC.b]		; 07 BC ; OR accumulator with memory (long) [$BC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $31.b,S		; 43 31 ; Exclusive OR accumulator with stack relative $31.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $B3D828.l		; CF 28 D8 B3 ; Compare accumulator (long) $B3D828.l [Reads: Accumulator] [Flags: NCZ]
	eor ($07.b,S),Y		; 53 07 ; XOR accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc [$AF.b]		; E7 AF ; Subtract with carry (long) [$AF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $040023.l		; EF 23 00 04 ; Subtract with carry (long) $040023.l [Writes: Accumulator] [Flags: NCVZ]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $22AF1F.l,X		; 1F 1F AF 22 ; Logical OR long $22AF1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $E7E70B.l		; EF 0B E7 E7 ; Subtract with carry (long) $E7E70B.l [Writes: Accumulator] [Flags: NCVZ]
	and ($33.b,S),Y		; 33 33 ; AND accumulator (stack relative indirect indexed) ($33.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $C7C70F.l		; 0F 0F C7 C7 ; OR accumulator with memory (long) $C7C70F.l [Writes: Accumulator] [Flags: NZ]
	dec $22CF.w		; CE CF 22 ; Decrement $22CF.w [Flags: NZ]
	ora $E7CF10.l,X		; 1F 10 CF E7 ; Logical OR long $E7CF10.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	.db $F0, $CF		; F0 CF ; Branch if equal to $F0, $CF [Flow: branch]
	.db $F0, $E3		; F0 E3 ; Branch if equal to $F0, $E3 [Flow: branch]
	trb $C23D.w		; 1C 3D C2 ; Test and reset bits $C23D.w [Reads: Accumulator] [Flags: Z]
	asl $1BF1.w		; 0E F1 1B ; Arithmetic shift left $1BF1.w [Flags: NCZ]
	trb $F3F3.w		; 1C F3 F3 ; Test and reset bits $F3F3.w [Reads: Accumulator] [Flags: Z]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($E0.b,S),Y		; 13 E0 ; OR accumulator (stack relative indirect indexed) ($E0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($FFFF.w,X)		; FC FF FF ; Jump to subroutine indirect indexed ($FFFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $FCC3E0.l,X		; 9F E0 C3 FC ; Store accumulator (long,X) $FCC3E0.l,X [Reads: Accumulator, X Index]
	sbc ($7E.b,X)		; E1 7E ; Subtract with carry ($7E.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda $4BDF2E.l,X		; BF 2E DF 4B ; Load long $4BDF2E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc [$ED.b],Y		; 77 ED ; Add with carry (long indexed) [$ED.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc [$F5.b],Y		; F7 F5 ; Subtract with carry (long indexed) [$F5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	eor $3F.b,S		; 43 3F ; Exclusive OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $DF1F04.l,X		; FF 04 1F DF ; Subtract with carry (long,X) $DF1F04.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $263FFF.l,X		; 7F FF 3F 26 ; Add long $263FFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $1F1F03.l,X		; BF 03 1F 1F ; Load long $1F1F03.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $7F233F.l,X		; 3F 3F 23 7F ; AND accumulator with memory (long,X) $7F233F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $FC.b,S		; 43 FC ; Exclusive OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FBF804.l,X		; FF 04 F8 FB ; Subtract with carry (long,X) $FBF804.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FCFF.w,X		; FE FF FC ; Increment memory $FCFF.w,X [Reads: X Index] [Flags: NZ]
	rol $FD.b		; 26 FD ; Rotate left $FD.b [Reads: Direct Page] [Flags: NCZ]
	ora $F8.b,S		; 03 F8 ; OR accumulator with stack relative $F8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($23FC.w,X)		; FC FC 23 ; Jump to subroutine indirect indexed ($23FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $5E12.w,X		; FE 12 5E ; Increment memory $5E12.w,X [Reads: X Index] [Flags: NZ]
	lsr $BFB9.w,X		; 5E B9 BF ; Logical shift right $BFB9.w,X [Reads: X Index] [Flags: NCZ]
	.db $70, $7F		; 70 7F ; Branch if overflow set to $70, $7F [Flow: branch]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	cmp [$FF.b]		; C7 FF ; Compare accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $FF1FFF.l		; 0F FF 1F FF ; OR accumulator with memory (long) $FF1FFF.l [Writes: Accumulator] [Flags: NZ]
	jsr ($E1FC.w,X)		; FC FC E1 ; Jump to subroutine indirect indexed ($E1FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($03.b,S),Y		; 13 03 ; OR accumulator (stack relative indirect indexed) ($03.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ror $66.b		; 66 66 ; Rotate right $66.b [Reads: Direct Page] [Flags: NCZ]
	lda ($F3.b,S),Y		; B3 F3 ; Load accumulator (stack relative indirect indexed) ($F3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora $FFC7FF.l		; 0F FF C7 FF ; OR accumulator with memory (long) $FFC7FF.l [Writes: Accumulator] [Flags: NZ]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	and $070F9F.l,X		; 3F 9F 0F 07 ; AND accumulator with memory (long,X) $070F9F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b,S		; 23 00 ; AND accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($C0.b,S),Y		; 13 C0 ; OR accumulator (stack relative indirect indexed) ($C0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jmp $9F4C.w		; 4C 4C 9F ; Jump to $9F4C.w [Flow: jump]
	sta $F03F38.l,X		; 9F 38 3F F0 ; Store accumulator (long,X) $F03F38.l,X [Reads: Accumulator, X Index]
	sbc $00FFE0.l,X		; FF E0 FF 00 ; Subtract with carry (long,X) $00FFE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0CFF07.l,X		; FF 07 FF 0C ; Subtract with carry (long,X) $0CFF07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($E0F3.w,X)		; FC F3 E0 ; Jump to subroutine indirect indexed ($E0F3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cpy #$23.b		; C0 23 ; Compare #$23.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $42.b,S		; 23 42 ; AND accumulator with stack relative $42.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $83.b,S		; 43 83 ; Exclusive OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $43.b,S		; 83 43 ; Store accumulator (stack relative) $43.b,S [Reads: Stack Pointer, Accumulator]
	eor $85.b,S		; 43 85 ; Exclusive OR accumulator with stack relative $85.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta [$F8.b]		; 87 F8 ; Store accumulator (long) [$F8.b] [Reads: Direct Page, Accumulator]
	sbc $9DFF00.l,X		; FF 00 FF 9D ; Subtract with carry (long,X) $9DFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FC23.l,X		; FF 23 FC 00 ; Subtract with carry (long,X) $00FC23.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsl $608F00.l		; 22 00 8F 60 ; Jump to subroutine long $608F00.l [Writes: Stack Pointer] [Flow: call]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $200500.l,X		; FF 00 05 20 ; Subtract with carry (long,X) $200500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $78C770.l		; CF 70 C7 78 ; Compare accumulator (long) $78C770.l [Reads: Accumulator] [Flags: NCZ]
	sbc $009D8A.l		; EF 8A 9D 00 ; Subtract with carry (long) $009D8A.l [Writes: Accumulator] [Flags: NCVZ]
	ora $F3F7F8.l		; 0F F8 F7 F3 ; OR accumulator with memory (long) $F3F7F8.l [Writes: Accumulator] [Flags: NZ]
	sbc $27DFE7.l		; EF E7 DF 27 ; Subtract with carry (long) $27DFE7.l [Writes: Accumulator] [Flags: NCVZ]
	cmp $EFE7DF.l,X		; DF DF E7 EF ; Compare accumulator (long,X) $EFE7DF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc ($F7.b,S),Y		; F3 F7 ; Subtract with carry (stack relative indirect indexed) ($F7.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $ECEB.w,Y		; F9 EB EC ; Subtract with carry $ECEB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $00.b		; 26 00 ; Rotate left $00.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($F817.w,X)		; FC 17 F8 ; Jump to subroutine indirect indexed ($F817.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ldx $DCD1.w		; AE D1 DC ; Load $DCD1.w into X register [Writes: X Index] [Flags: NZ]
	sbc $99.b,S		; E3 99 ; Subtract stack-relative $99.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	lda [$AC.b]		; A7 AC ; Load accumulator (long) [$AC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($EE.b,S),Y		; B3 EE ; Load accumulator (stack relative indirect indexed) ($EE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc ($9C.b),Y		; F1 9C ; Subtract with carry ($9C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $23.b,S		; E3 23 ; Subtract stack-relative $23.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $3DDE.w,X		; 1E DE 3D ; Arithmetic shift left $3DDE.w,X [Reads: X Index] [Flags: NCZ]
	lda $7D7D.w,X		; BD 7D 7D ; Load $7D7D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DBDBFF.l,X		; FF FF DB DB ; Subtract with carry (long,X) $DBDBFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $7F3FBF.l,X		; BF BF 3F 7F ; Load long $7F3FBF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$2F.b		; E0 2F ; Compare #$2F.b with X register [Reads: X Index] [Flags: NCZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($FC.b,S),Y		; F3 FC ; Subtract with carry (stack relative indirect indexed) ($FC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $E6E704.l		; 0F 04 E7 E6 ; OR accumulator with memory (long) $E6E704.l [Writes: Accumulator] [Flags: NZ]
	sbc [$F6.b],Y		; F7 F6 ; Subtract with carry (long indexed) [$F6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FFF4.l,X		; FF F4 FF F0 ; Subtract with carry (long,X) $F0FFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F00001.l,X		; FF 01 00 F0 ; Subtract with carry (long,X) $F00001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $F7		; F0 F7 ; Branch if equal to $F0, $F7 [Flow: branch]
	sbc [$9F.b],Y		; F7 9F ; Subtract with carry (long indexed) [$9F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $628787.l,X		; 9F 87 87 62 ; Store accumulator (long,X) $628787.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$73		; E2 73
	sbc ($B3.b,S),Y		; F3 B3 ; Subtract with carry (stack relative indirect indexed) ($B3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($D9.b,S),Y		; F3 D9 ; Subtract with carry (stack relative indirect indexed) ($D9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7969.w,Y		; F9 69 79 ; Subtract with carry $7969.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $1D7963.l		; 0F 63 79 1D ; OR accumulator with memory (long) $1D7963.l [Writes: Accumulator] [Flags: NZ]
	tsb $060C.w		; 0C 0C 06 ; Test and set bits $060C.w [Reads: Accumulator] [Flags: Z]
	stx $23.b		; 86 23 ; Store X register to $23.b [Reads: X Index]
	sbc $FCFC05.l,X		; FF 05 FC FC ; Subtract with carry (long,X) $FCFC05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $5E831F.l,X		; 1F 1F 83 5E ; Logical OR long $5E831F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	jsl $45E0FF.l		; 22 FF E0 45 ; Jump to subroutine long $45E0FF.l [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	ora $EFEF1F.l		; 0F 1F EF EF ; OR accumulator with memory (long) $EFEF1F.l [Writes: Accumulator] [Flags: NZ]
	sbc $E1F9.w,Y		; F9 F9 E1 ; Subtract with carry $E1F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($46.b,X)		; E1 46 ; Subtract with carry ($46.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$CE.b]		; 47 CE ; Exclusive OR accumulator with memory (long) [$CE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $9BCFCD.l		; CF CD CF 9B ; Compare accumulator (long) $9BCFCD.l [Reads: Accumulator] [Flags: NCZ]
	sta $F09E96.l,X		; 9F 96 9E F0 ; Store accumulator (long,X) $F09E96.l,X [Reads: Accumulator, X Index]
	dec $9E.b		; C6 9E ; Decrement $9E.b [Reads: Direct Page] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($88.b,X)		; 61 88 ; Add with carry ($88.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$3F.b],Y		; F7 3F ; Subtract with carry (long indexed) [$3F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $83C343.l,X		; FF 43 C3 83 ; Subtract with carry (long,X) $83C343.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b,S		; 83 03 ; Store accumulator (stack relative) $03.b,S [Reads: Stack Pointer, Accumulator]
	ora $33.b,S		; 03 33 ; OR accumulator with stack relative $33.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($66.b,S),Y		; 33 66 ; AND accumulator (stack relative indirect indexed) ($66.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc [$CE.b]		; 67 CE ; Add with carry (long) [$CE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $3C0000.l		; CF 00 00 3C ; Compare accumulator (long) $3C0000.l [Reads: Accumulator] [Flags: NCZ]
	jmp ($FCFC.w,X)		; 7C FC FC ; Jump indirect indexed to ($FCFC.w,X) [Reads: X Index] [Flow: jump]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $67		; F0 67 ; Branch if equal to $F0, $67 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dec $3CF1.w		; CE F1 3C ; Decrement $3CF1.w [Flags: NZ]
	cmp $F9.b,S		; C3 F9 ; Compare accumulator (stack relative) $F9.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ora [$ED.b]		; 07 ED ; OR accumulator with memory (long) [$ED.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($C6.b,S),Y		; 13 C6 ; OR accumulator (stack relative indirect indexed) ($C6.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $7CBB.w,Y		; 39 BB 7C ; AND accumulator with memory $7CBB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $80CE.w		; 4D CE 80 ; Exclusive OR $80CE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $F330.w		; 0C 30 F3 ; Test and set bits $F330.w [Reads: Accumulator] [Flags: Z]
	sbc ($A7.b,S),Y		; F3 A7 ; Subtract with carry (stack relative indirect indexed) ($A7.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	lda [$2C.b]		; A7 2C ; Load accumulator (long) [$2C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $2828.w		; 2C 28 28 ; Test bits $2828.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $F0		; F0 F0 ; Branch if equal to $F0, $F0 [Flow: branch]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0DDF22.l		; 0F 22 DF 0D ; OR accumulator with memory (long) $0DDF22.l [Writes: Accumulator] [Flags: NZ]
	ora $03070F.l,X		; 1F 0F 07 03 ; Logical OR long $03070F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $EFEFDF.l,X		; DF DF EF EF ; Compare accumulator (long,X) $EFEFDF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	rol $36.b,X		; 36 36 ; Rotate left $36.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $62, $02, $06		; 62 02 06 ; Push effective relative address $62, $02, $06 [Writes: Stack Pointer]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $F9F0E0.l		; 0F E0 F0 F9 ; OR accumulator with memory (long) $F9F0E0.l [Writes: Accumulator] [Flags: NZ]
	sbc $E483.w,X		; FD 83 E4 ; Subtract with carry $E483.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	pei ($D4.b)		; D4 D4 ; Push effective indirect address ($D4.b) [Reads: Direct Page] [Writes: Stack Pointer]
	stz $2C9C.w		; 9C 9C 2C ; Store zero to $2C9C.w
	bit $FFC0.w,X		; 3C C0 FF ; Test bits $FFC0.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	trb $3EFF.w		; 1C FF 3E ; Test and reset bits $3EFF.w [Reads: Accumulator] [Flags: Z]
	sbc $EFCF07.l,X		; FF 07 CF EF ; Subtract with carry (long,X) $EFCF07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$C3.b]		; E7 C3 ; Subtract with carry (long) [$C3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsl $B20300.l		; 22 00 03 B2 ; Jump to subroutine long $B20300.l [Writes: Stack Pointer] [Flow: call]
	sbc ($6D.b,S),Y		; F3 6D ; Subtract with carry (stack relative indirect indexed) ($6D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $D027.w		; ED 27 D0 ; Subtract $D027.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $68.b		; 05 68 ; Logical OR $68.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda ($F1.b),Y		; B1 F1 ; Load accumulator ($F1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $231E.w		; 0C 1E 23 ; Test and set bits $231E.w [Reads: Accumulator] [Flags: Z]
	and $1F2BE0.l,X		; 3F E0 2B 1F ; AND accumulator with memory (long,X) $1F2BE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl $03FC.w		; 0E FC 03 ; Arithmetic shift left $03FC.w [Flags: NCZ]
	asl $AFE1.w,X		; 1E E1 AF ; Arithmetic shift left $AFE1.w,X [Reads: X Index] [Flags: NCZ]
	.db $B0, $37		; B0 37 ; Branch if carry set to $B0, $37 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rol $39.b,X		; 36 39 ; Rotate left $39.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sta $1A93.w		; 8D 93 1A ; Store accumulator to $1A93.w [Reads: Accumulator]
	inc $FA.b		; E6 FA ; Increment $FA.b [Reads: Direct Page] [Flags: NZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $E566CC.l		; 4F CC 66 E5 ; Exclusive OR accumulator with memory (long) $E566CC.l [Writes: Accumulator] [Flags: NZ]
	and $FDFB.w,X		; 3D FB FD ; AND accumulator with memory $FDFB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1E.b,S		; 03 1E ; OR accumulator with stack relative $1E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc ($3F.b,X)		; E1 3F ; Subtract with carry ($3F.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $7F		; 30 7F ; Branch if minus to $30, $7F [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ror $3079.w,X		; 7E 79 30 ; Rotate right $3079.w,X [Reads: X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsl $C00200.l		; 22 00 02 C0 ; Jump to subroutine long $C00200.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	eor $4F.b,S		; 43 4F ; Exclusive OR accumulator with stack relative $4F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dec $A503.w		; CE 03 A5 ; Decrement $A503.w [Flags: NZ]
	ror $DB.b		; 66 DB ; Rotate right $DB.b [Reads: Direct Page] [Flags: NCZ]
	bit $B583.w,X		; 3C 83 B5 ; Test bits $B583.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $7867F0.l		; CF F0 67 78 ; Compare accumulator (long) $7867F0.l [Reads: Accumulator] [Flags: NCZ]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sta $B8.b,S		; 83 B8 ; Store accumulator (stack relative) $B8.b,S [Reads: Stack Pointer, Accumulator]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $9B.b,S		; 83 9B ; Store accumulator (stack relative) $9B.b,S [Reads: Stack Pointer, Accumulator]
	jmp ($3CC3.w,X)		; 7C C3 3C ; Jump indirect indexed to ($3CC3.w,X) [Reads: X Index] [Flow: jump]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	eor $FF.b,S		; 43 FF ; Exclusive OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $F8.b		; 04 F8 ; Test and set bits $F8.b [Reads: Accumulator] [Flags: Z]
	ora [$FC.b]		; 07 FC ; OR accumulator with memory (long) [$FC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $27.b,S		; 03 27 ; OR accumulator with stack relative $27.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $8F03F0.l		; 0F F0 03 8F ; OR accumulator with memory (long) $8F03F0.l [Writes: Accumulator] [Flags: NZ]
	.db $70, $DF		; 70 DF ; Branch if overflow set to $70, $DF [Flow: branch]
	jsr $FF43.w		; 20 43 FF ; Jump to subroutine at $FF43.w [Writes: Stack Pointer] [Flow: call]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($F003.w,X)		; FC 03 F0 ; Jump to subroutine indirect indexed ($F003.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $010027.l		; 0F 27 00 01 ; OR accumulator with memory (long) $010027.l [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $BC, $00		; 62 BC 00 ; Push effective relative address $62, $BC, $00 [Writes: Stack Pointer]
	ldx $1883.w,Y		; BE 83 18 ; Load X register $1883.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $62, $02, $03		; 62 02 03 ; Push effective relative address $62, $02, $03 [Writes: Stack Pointer]
	sbc $FCFD.w,X		; FD FD FC ; Subtract with carry $FCFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FF25.w,X		; FE 25 FF ; Increment memory $FF25.w,X [Reads: X Index] [Flags: NZ]
	eor $F0.b,S		; 43 F0 ; Exclusive OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $83FC01.l		; 0F 01 FC 83 ; OR accumulator with memory (long) $83FC01.l [Writes: Accumulator] [Flags: NZ]
	eor $FC.b,S		; 43 FC ; Exclusive OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $01.b,S		; C3 01 ; Compare accumulator (stack relative) $01.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta [$43.b]		; 87 43 ; Store accumulator (long) [$43.b] [Reads: Direct Page, Accumulator]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$00.b		; 49 00 ; Exclusive OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $7F8005.l,X		; FF 05 80 7F ; Subtract with carry (long,X) $7F8005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpx #$1F.b		; E0 1F ; Compare #$1F.b with X register [Reads: X Index] [Flags: NCZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$1F.b]		; 07 1F ; OR accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $7FB83F.l,X		; DF 3F B8 7F ; Compare accumulator (long,X) $7FB83F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $70, $FF		; 70 FF ; Branch if overflow set to $70, $FF [Flow: branch]
	.db $F0, $44		; F0 44 ; Branch if equal to $F0, $44 [Flow: branch]
	jsr ($04F3.w,X)		; FC F3 04 ; Jump to subroutine indirect indexed ($04F3.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $FC.b,S		; 83 FC ; Store accumulator (stack relative) $FC.b,S [Reads: Stack Pointer, Accumulator]
	ora $3F.b,S		; 03 3F ; OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $45FF25.l,X		; 7F 25 FF 45 ; Add long $45FF25.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$3C.b		; 09 3C ; Logical OR #$3C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7E.b,S		; C3 7E ; Compare accumulator (stack relative) $7E.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta ($FF.b,X)		; 81 FF ; Store accumulator ($FF.b,X) [Reads: Direct Page, Accumulator, X Index]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; [PATTERN: Memory clearing operation] 18 ; Clear carry flag [Flags: C]
	sbc $FF273C.l,X		; FF 3C 27 FF ; Subtract with carry (long,X) $FF273C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($9D.b)		; 12 9D ; OR accumulator with memory (indirect) ($9D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $3C3B.w,X		; 9E 3B 3C ; Store zero to $3C3B.w,X [Reads: X Index]
	stz $7B.b,X		; 74 7B ; Store zero to $7B.b,X [Reads: X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc [$C0.b],Y		; F7 C0 ; Subtract with carry (long indexed) [$C0.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta ($F1.b),Y		; 91 F1 ; Store accumulator ($F1.b),Y [Reads: Direct Page, Y Index, Accumulator]
	and $E3.b,S		; 23 E3 ; AND accumulator with stack relative $E3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy #$E0.b		; C0 E0 ; Compare #$E0.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	sta $03.b,S		; 83 03 ; Store accumulator (stack relative) $03.b,S [Reads: Stack Pointer, Accumulator]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $6DC645.l,X		; 3F 45 C6 6D ; AND accumulator with memory (long,X) $6DC645.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FCB3.w		; EE B3 FC ; Increment $FCB3.w [Flags: NZ]
	dec $60F1.w		; CE F1 60 ; Decrement $60F1.w [Flags: NZ]
	adc $DBBFB8.l,X		; 7F B8 BF DB ; Add long $DBBFB8.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $38BEB2.l,X		; DF B2 BE 38 ; Compare accumulator (long,X) $38BEB2.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $10, $84		; 10 84 ; Branch if plus to $10, $84 [Flow: branch]
	cmp ($00.b),Y		; D1 00 ; Compare accumulator ($00.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp ($07.b,X)		; C1 07 ; Compare accumulator ($07.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sbc $E0FFC0.l,X		; FF C0 FF E0 ; Subtract with carry (long,X) $E0FFC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $23BFB0.l,X		; FF B0 BF 23 ; Subtract with carry (long,X) $23BFB0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $3B2B03.l,X		; 1F 03 2B 3B ; Logical OR long $3B2B03.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pei ($F4.b)		; D4 F4 ; Push effective indirect address ($F4.b) [Reads: Direct Page] [Writes: Stack Pointer]
	jsl $C01400.l		; 22 00 14 C0 ; Jump to subroutine long $C01400.l [Writes: Stack Pointer] [Flow: call]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: NCZ]
	cmp [$0F.b]		; C7 0F ; Compare accumulator (long) [$0F.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FAFD.w		; 0D FD FA ; Logical OR $FAFD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	bit $3C.b		; 24 3C ; Test bits $3C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora ($1F.b,S),Y		; 13 1F ; OR accumulator (stack relative indirect indexed) ($1F.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $58E000.l		; 22 00 E0 58 ; Jump to subroutine long $58E000.l [Writes: Stack Pointer] [Flow: call]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$C3.b]		; 07 C3 ; OR accumulator with memory (long) [$C3.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$71.b		; E0 71 ; Compare #$71.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($69.b),Y		; F1 69 ; Subtract with carry ($69.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc #$B1.b		; E9 B1 ; Subtract #$B1.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc ($72.b),Y		; F1 72 ; Subtract with carry ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($5C.b,S),Y		; 73 5C ; Add with carry (stack relative indirect indexed) ($5C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc $C17F40.l,X		; 7F 40 7F C1 ; Add long $C17F40.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0EFF83.l,X		; FF 83 FF 0E ; Subtract with carry (long,X) $0EFF83.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $9C1E.w,X		; 1E 1E 9C ; Arithmetic shift left $9C1E.w,X [Reads: X Index] [Flags: NCZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $007F.w,X		; 5E 7F 00 ; Logical shift right $007F.w,X [Reads: X Index] [Flags: NCZ]
	and $0C3F07.l,X		; [PATTERN: Memory clearing operation] 3F 07 3F 0C ; AND accumulator with memory (long,X) $0C3F07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($F919.w,X)		; 7C 19 F9 ; Jump indirect indexed to ($F919.w,X) [Reads: X Index] [Flow: jump]
	and ($F2.b)		; 32 F2 ; AND accumulator with memory (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $E4.b		; 64 E4 ; Store zero to $E4.b
	stz $F4.b,X		; 74 F4 ; Store zero to $F4.b,X [Reads: X Index]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpy #$83.b		; C0 83 ; Compare #$83.b with Y register [Reads: Y Index] [Flags: NCZ]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $06FA0F.l,X		; 1F 0F FA 06 ; Logical OR long $06FA0F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc $8D.b		; E6 8D ; Increment $8D.b [Reads: Direct Page] [Flags: NZ]
	sta ($36.b,S),Y		; 93 36 ; Store accumulator (stack relative indirect indexed) ($36.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	and $3837.w,Y		; 39 37 38 ; AND accumulator with memory $3837.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $E11EB0.l		; AF B0 1E E1 ; Load long $E11EB0.l into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr ($0103.w,X)		; FC 03 01 ; Jump to subroutine indirect indexed ($0103.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp ($3C7A.w,X)		; 7C 7A 3C ; Jump indirect indexed to ($3C7A.w,X) [Reads: X Index] [Flow: jump]
	and ($FD.b)		; 32 FD ; AND accumulator with memory (indirect) ($FD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $1E.b,S		; E3 1E ; Subtract stack-relative $1E.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc ($DF.b,X)		; E1 DF ; Subtract with carry ($DF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	and [$E4.b]		; 27 E4 ; AND accumulator with memory (long) [$E4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $4F.b,S		; 43 4F ; Exclusive OR accumulator with stack relative $4F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy $8101.w		; CC 01 81 ; Compare $8101.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp ($22.b,X)		; C1 22 ; Compare accumulator ($22.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	eor $67.b		; 45 67 ; Exclusive OR $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora #$1F.b		; 09 1F ; Logical OR #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$E3.b		; E0 E3 ; Compare #$E3.b with X register [Reads: X Index] [Flags: NCZ]
	trb $3EDD.w		; 1C DD 3E ; Test and reset bits $3EDD.w [Reads: Accumulator] [Flags: Z]
	lda [$66.b]		; A7 66 ; Load accumulator (long) [$66.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $83224E.l		; CF 4E 22 83 ; Compare accumulator (long) $83224E.l [Reads: Accumulator] [Flags: NCZ]
	trb $03.b		; 14 03 ; Test and reset bits $03.b [Reads: Accumulator] [Flags: Z]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $30, $3B		; 30 3B ; Branch if minus to $30, $3B [Flow: branch]
	jsr ($7E9D.w,X)		; FC 9D 7E ; Jump to subroutine indirect indexed ($7E9D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp $C13E.w		; CD 3E C1 ; Compare $C13E.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	rol $0CF3.w,X		; 3E F3 0C ; Rotate left $0CF3.w,X [Reads: X Index] [Flags: NCZ]
	sbc $F80700.l,X		; FF 00 07 F8 ; Subtract with carry (long,X) $F80700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr ($0028.w,X)		; FC 28 00 ; Jump to subroutine indirect indexed ($0028.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $00FF.w		; 0E FF 00 ; Arithmetic shift left $00FF.w [Flags: NCZ]
	sbc $1CFF0F.l,X		; FF 0F FF 1C ; Subtract with carry (long,X) $1CFF0F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($F939.w,X)		; FC 39 F9 ; Jump to subroutine indirect indexed ($F939.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc ($F2.b)		; 72 F2 ; Add with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $E5.b		; 25 E5 ; Logical AND $E5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$E6.b]		; 07 E6 ; OR accumulator with memory (long) [$E6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $030600.l		; 22 00 06 03 ; Jump to subroutine long $030600.l [Writes: Stack Pointer] [Flow: call]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $7F1C.w,X		; 1E 1C 7F ; Arithmetic shift left $7F1C.w,X [Reads: X Index] [Flags: NCZ]
	adc $85BF23.l,X		; 7F 23 BF 85 ; Add long $85BF23.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $0303.w,X		; DE 03 03 ; Decrement memory $0303.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	and $273D.w,X		; 3D 3D 27 ; AND accumulator with memory $273D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FBF807.l,X		; FF 07 F8 FB ; Subtract with carry (long,X) $FBF807.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($FE1D.w,X)		; FC 1D FE ; Jump to subroutine indirect indexed ($FE1D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $0FFF.w		; 0E FF 0F ; Arithmetic shift left $0FFF.w [Flags: NCZ]
	mvp $CF,$3F		; 44 3F CF ; Move block positive $CF,$3F [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsb $C1.b		; 04 C1 ; Test and set bits $C1.b [Reads: Accumulator] [Flags: Z]
	and $FEFCC0.l,X		; 3F C0 FC FE ; AND accumulator with memory (long,X) $FEFCC0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FC.b		; 05 FC ; Logical OR $FC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta ($44.b,X)		; 81 44 ; Store accumulator ($44.b,X) [Reads: Direct Page, Accumulator, X Index]
	sbc $F800F0.l,X		; FF F0 00 F8 ; Subtract with carry (long,X) $F800F0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7F.b,S		; 03 7F ; OR accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $4507F8.l,X		; 3F F8 07 45 ; AND accumulator with memory (long,X) $4507F8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: NCZ]
	lsr $00.b		; 46 00 ; Logical shift right $00.b [Reads: Direct Page] [Flags: NCZ]
	sbc $08FF29.l,X		; FF 29 FF 08 ; Subtract with carry (long,X) $08FF29.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $18FF.w,X		; 3C FF 18 ; Test bits $18FF.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $817E00.l,X		; FF 00 7E 81 ; Subtract with carry (long,X) $817E00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $44C3.w,X		; 3C C3 44 ; Test bits $44C3.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $807F11.l,X		; FF 11 7F 80 ; Subtract with carry (long,X) $807F11.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $8360.w,X		; BC 60 83 ; Load Y register $8360.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jmp ($43BC.w,X)		; 7C BC 43 ; Jump indirect indexed to ($43BC.w,X) [Reads: X Index] [Flow: jump]
	sta [$40.b],Y		; 97 40 ; Store accumulator (long indexed) [$40.b],Y [Reads: Direct Page, Y Index, Accumulator]
	pea $FF28.w		; F4 28 FF ; Push absolute address $FF28.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	and $7F.b,S		; 23 7F ; AND accumulator with stack relative $7F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	ora $22.b,S		; 03 22 ; OR accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	trb $03.b		; 14 03 ; Test and reset bits $03.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $7C.b		; C4 7C ; Compare $7C.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	adc $800080.l,X		; 7F 80 00 80 ; Add long $800080.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $809F.w		; 20 9F 80 ; Jump to subroutine at $809F.w [Writes: Stack Pointer] [Flow: call]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $E743FF.l,X		; 7F FF 43 E7 ; Add long $E743FF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $00027F.l		; 22 7F 02 00 ; Jump to subroutine long $00027F.l [Writes: Stack Pointer] [Flow: call]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF01.l,X		; FF 01 FF 00 ; Subtract with carry (long,X) $00FF01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $3F.b,S		; 43 3F ; Exclusive OR accumulator with stack relative $3F.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$0B.b		; C0 0B ; Compare #$0B.b with Y register [Reads: Y Index] [Flags: NCZ]
	adc $98E7C0.l,X		; 7F C0 E7 98 ; Add long $98E7C0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$3C.b]		; E7 3C ; Subtract with carry (long) [$3C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	bit $18E7.w,X		; 3C E7 18 ; Test bits $18E7.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora $00250F.l,X		; 1F 0F 25 00 ; Logical OR long $00250F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $0903.w,X		; FE 03 09 ; Increment memory $0903.w,X [Reads: X Index] [Flags: NZ]
	sbc $18E701.l,X		; FF 01 E7 18 ; Subtract with carry (long,X) $18E701.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $3C.b,S		; C3 3C ; Compare accumulator (stack relative) $3C.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sbc [$18.b]		; E7 18 ; Subtract with carry (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $5271.w,X		; BD 71 52 ; Load $5271.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($32.b,S),Y		; 13 32 ; OR accumulator (stack relative indirect indexed) ($32.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $FEDD7E.l,X		; 5F 7E DD FE ; Exclusive OR accumulator with memory (long,X) $FEDD7E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($FE.b,X)		; 81 FE ; Store accumulator ($FE.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta $1B.b,S		; 83 1B ; Store accumulator (stack relative) $1B.b,S [Reads: Stack Pointer, Accumulator]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $2480.w		; CC 80 24 ; Compare $2480.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C00700.l,X		; FF 00 07 C0 ; Subtract with carry (long,X) $C00700.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $F01FE0.l,X		; 3F E0 1F F0 ; AND accumulator with memory (long,X) $F01FE0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $25CFB0.l		; 0F B0 CF 25 ; OR accumulator with memory (long) $25CFB0.l [Writes: Accumulator] [Flags: NZ]
	sbc $1F3F07.l,X		; FF 07 3F 1F ; Subtract with carry (long,X) $1F3F07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FE.b,X)		; 01 FE ; Logical OR ($FE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F43F0.l		; 0F F0 43 1F ; OR accumulator with memory (long) $1F43F0.l [Writes: Accumulator] [Flags: NZ]
	cpx #$43.b		; E0 43 ; Compare #$43.b with X register [Reads: X Index] [Flags: NCZ]
	and $7F01C0.l,X		; 3F C0 01 7F ; AND accumulator with memory (long,X) $7F01C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	sbc $FCFE05.l,X		; FF 05 FE FC ; Subtract with carry (long,X) $FCFE05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$3F.b		; C0 3F ; Compare #$3F.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	eor $FF.b		; 45 FF ; Exclusive OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $04FB10.l		; EF 10 FB 04 ; Subtract with carry (long) $04FB10.l [Writes: Accumulator] [Flags: NCVZ]
	and $FF24C0.l,X		; 3F C0 24 FF ; AND accumulator with memory (long,X) $FF24C0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $1F0003.l		; 0F 03 00 1F ; OR accumulator with memory (long) $1F0003.l [Writes: Accumulator] [Flags: NZ]
	cmp $7FBF3F.l,X		; DF 3F BF 7F ; Compare accumulator (long,X) $7FBF3F.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	adc $E0FF23.l,X		; 7F 23 FF E0 ; Add long $E0FF23.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FE.b		; 25 FE ; Logical AND $FE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $E1FEF8.l,X		; FF F8 FE E1 ; Subtract with carry (long,X) $E1FEF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $7F3F.w,Y		; F9 3F 7F ; Subtract with carry $7F3F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0FCFF.l,X		; FF FF FC F0 ; Subtract with carry (long,X) $F0FCFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($86.b,X)		; C1 86 ; Compare accumulator ($86.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sbc [$08.b],Y		; F7 08 ; Subtract with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $7867E0.l,X		; 1F E0 67 78 ; Logical OR long $7867E0.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b)		; 52 DD ; Exclusive OR accumulator with memory (indirect) ($DD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	cpx $7655.w		; EC 55 76 ; Compare $7655.w with X register [Reads: X Index] [Flags: NCZ]
	lda $B6.b		; A5 B6 ; Load $B6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $F6.b		; E5 F6 ; Subtract $F6.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($20.b,X)		; 81 20 ; Store accumulator ($20.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $10, $88		; 10 88 ; Branch if plus to $10, $88 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and $FF.b,S		; 23 FF ; AND accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr ($F7FC.w,X)		; FC FC F7 ; Jump to subroutine indirect indexed ($F7FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc [$1F.b],Y		; F7 1F ; Subtract with carry (long indexed) [$1F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $F7FBFB.l,X		; 1F FB FB F7 ; Logical OR long $F7FBFB.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$E8.b],Y		; F7 E8 ; Subtract with carry (long indexed) [$E8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	jsl $43E0FF.l		; 22 FF E0 43 ; Jump to subroutine long $43E0FF.l [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	ora $73001F.l		; 0F 1F 00 73 ; OR accumulator with memory (long) $73001F.l [Writes: Accumulator] [Flags: NZ]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $37.b		; 24 37 ; Test bits $37.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	sbc $F3.b,S		; E3 F3 ; Subtract stack-relative $F3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $17EFEF.l,X		; DF EF EF 17 ; Compare accumulator (long,X) $17EFEF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	ora [$8C.b],Y		; 17 8C ; OR accumulator with memory (long indexed) [$8C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tsb $E007.w		; 0C 07 E0 ; Test and set bits $E007.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	asl $FE.b		; 06 FE ; Arithmetic shift left $FE.b [Reads: Direct Page] [Flags: NCZ]
	and ($FF.b,S),Y		; 33 FF ; AND accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc $C3C7C6.l		; EF C6 C7 C3 ; Subtract with carry (long) $C3C7C6.l [Writes: Accumulator] [Flags: NCVZ]
	cmp $53.b,S		; C3 53 ; Compare accumulator (stack relative) $53.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($67.b,S),Y		; D3 67 ; Compare accumulator (stack relative indirect indexed) ($67.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	sbc [$3E.b]		; E7 3E ; Subtract with carry (long) [$3E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $100001.l,X		; FF 01 00 10 ; Subtract with carry (long,X) $100001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	bit $183C.w,X		; 3C 3C 18 ; Test bits $183C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $06F30C.l,X		; FF 0C F3 06 ; Subtract with carry (long,X) $06F30C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8976.w,Y		; F9 76 89 ; Subtract with carry $8976.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $18.b		; C5 18 ; Compare $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc [$00.b]		; E7 00 ; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF2800.l,X		; FF 00 28 FF ; Subtract with carry (long,X) $FF2800.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor #$00.b		; 49 00 ; Exclusive OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FE0105.l,X		; FF 05 01 FE ; Subtract with carry (long,X) $FE0105.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $1F.b		; 05 1F ; Logical OR $1F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$3F.b		; E0 3F ; Compare #$3F.b with X register [Reads: X Index] [Flags: NCZ]
	cmp ($7F.b,X)		; C1 7F ; Compare accumulator ($7F.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sta [$46.b]		; 87 46 ; Store accumulator (long) [$46.b] [Reads: Direct Page, Accumulator]
	adc $87028F.l,X		; 7F 8F 02 87 ; Add long $87028F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $FF27C3.l,X		; 3F C3 27 FF ; AND accumulator with memory (long,X) $FF27C3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $62.b		; 84 62 ; Store Y register to $62.b [Reads: Y Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($43.b,X)		; E1 43 ; Subtract with carry ($43.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0F01E3.l,X		; 1F E3 01 0F ; Logical OR long $0F01E3.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($43.b),Y		; F1 43 ; Subtract with carry ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$F8.b]		; 07 F8 ; OR accumulator with memory (long) [$F8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $00.b		; 45 00 ; Exclusive OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $E31C09.l,X		; FF 09 1C E3 ; Subtract with carry (long,X) $E31C09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $FFC1.w,X		; 3E C1 FF ; Rotate left $FFC1.w,X [Reads: X Index] [Flags: NCZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FF283C.l,X		; FF 3C 28 FF ; Subtract with carry (long,X) $FF283C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $3B.b,S		; 83 3B ; Store accumulator (stack relative) $3B.b,S [Reads: Stack Pointer, Accumulator]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $E603.w,X		; FD 03 E6 ; Subtract with carry $E603.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0A85.w,Y		; 19 85 0A ; OR accumulator with memory $0A85.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $807F00.l,X		; FF 00 7F 80 ; Subtract with carry (long,X) $807F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $83BFC0.l,X		; 7F C0 BF 83 ; Add long $83BFC0.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $0300.w		; 6D 00 03 ; Add $0300.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta ($F0.b),Y		; 91 F0 ; Store accumulator ($F0.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $13F8.w,Y		; 99 F8 13 ; Store accumulator to $13F8.w,Y [Reads: Y Index, Accumulator]
	sbc ($1F.b)		; F2 1F ; Subtract with carry (indirect) ($1F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($F807.w,X)		; FC 07 F8 ; Jump to subroutine indirect indexed ($F807.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $3CE1.w,X		; 1E E1 3C ; Arithmetic shift left $3CE1.w,X [Reads: X Index] [Flags: NCZ]
	cmp $F8.b,S		; C3 F8 ; Compare accumulator (stack relative) $F8.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ora [$0E.b]		; 07 0E ; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $000C.w		; 0E 0C 00 ; Arithmetic shift left $000C.w [Flags: NCZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$0F.b]		; 07 0F ; OR accumulator with memory (long) [$0F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	sbc [$49.b]		; E7 49 ; Subtract with carry (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	adc [$04.b]		; 67 04 ; Add with carry (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc [$10.b]		; 67 10 ; Add with carry (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $8F260F.l		; 6F 0F 26 8F ; Add with carry (long) $8F260F.l [Writes: Accumulator] [Flags: NCVZ]
	cpx #$5C.b		; E0 5C ; Compare #$5C.b with X register [Reads: X Index] [Flags: NCZ]
	jmp ($F383.w,X)		; 7C 83 F3 ; Jump indirect indexed to ($F383.w,X) [Reads: X Index] [Flow: jump]
	ora $E81CE4.l		; 0F E4 1C E8 ; OR accumulator with memory (long) $E81CE4.l [Writes: Accumulator] [Flags: NZ]
	ora $33D1.w,Y		; 19 D1 33 ; OR accumulator with memory $33D1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 8
	sep #$26		; E2 26
	sta $45.b		; 85 45 ; Store accumulator to $45.b [Reads: Accumulator]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $E0		; F0 E0 ; Branch if equal to $F0, $E0 [Flow: branch]
	cmp $C6.b,S		; C3 C6 ; Compare accumulator (stack relative) $C6.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sty $3B19.w		; 8C 19 3B ; Store Y register to $3B19.w [Reads: Y Index]
	adc $F3F00F.l,X		; 7F 0F F0 F3 ; Add long $F3F00F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0F08.w,X)		; FC 08 0F ; Jump to subroutine indirect indexed ($0F08.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $C3.b,S		; 03 C3 ; OR accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$F0.b		; C0 F0 ; Compare #$F0.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $30, $3C		; 30 3C ; Branch if minus to $30, $3C [Flow: branch]
	cpy $C7.b		; C4 C7 ; Compare $C7.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	ora $FCF8C3.l		; 0F C3 F8 FC ; OR accumulator with memory (long) $FCF8C3.l [Writes: Accumulator] [Flags: NZ]
	cmp $E3.b,S		; C3 E3 ; Compare accumulator (stack relative) $E3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	stx $18CF.w		; 8E CF 18 ; Store X register to $18CF.w [Reads: X Index]
	sta $23BE31.l,X		; 9F 31 BE 23 ; Store accumulator (long,X) $23BE31.l,X [Reads: Accumulator, X Index]
	ldy $3827.w,X		; BC 27 38 ; Load Y register $3827.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	eor $F0CF70.l		; 4F 70 CF F0 ; Exclusive OR accumulator with memory (long) $F0CF70.l [Writes: Accumulator] [Flags: NZ]
	trb $6030.w		; 1C 30 60 ; Test and reset bits $6030.w [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cmp ($83.b,X)		; C1 83 ; Compare accumulator ($83.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	ora [$C6.b]		; 07 C6 ; OR accumulator with memory (long) [$C6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp [$D3.b],Y		; D7 D3 ; Compare accumulator (long indexed) [$D3.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx $F7F4.w		; EC F4 F7 ; Compare $F7F4.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $FEF9.w,Y		; F9 F9 FE ; Subtract with carry $FEF9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $7F7F.w,X		; FE 7F 7F ; Increment memory $7F7F.w,X [Reads: X Index] [Flags: NZ]
	and $E4E83F.l,X		; 3F 3F E8 E4 ; AND accumulator with memory (long,X) $E4E83F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc ($F8.b,S),Y		; F3 F8 ; Subtract with carry (stack relative indirect indexed) ($F8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	inc $FF22.w,X		; FE 22 FF ; Increment memory $FF22.w,X [Reads: X Index] [Flags: NZ]
	ora [$EC.b]		; 07 EC ; OR accumulator with memory (long) [$EC.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx $F9F9.w		; EC F9 F9 ; Compare $F9F9.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $E3.b,S		; E3 E3 ; Subtract stack-relative $E3.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $CE.b,S		; 43 CE ; Exclusive OR accumulator with stack relative $CE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp $8C33E0.l		; CF E0 33 8C ; Compare accumulator (long) $8C33E0.l [Reads: Accumulator] [Flags: NCZ]
	sta $F39F98.l		; 8F 98 9F F3 ; Store accumulator (long) $F39F98.l [Reads: Accumulator]
	dec $9C.b		; C6 9C ; Decrement $9C.b [Reads: Direct Page] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $70, $60		; 70 60 ; Branch if overflow set to $70, $60 [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	jmp ($C47C.w)		; 6C 7C C4 ; Jump indirect to ($C47C.w) [Flow: jump]
	jsr ($F64A.w,X)		; FC 4A F6 ; Jump to subroutine indirect indexed ($F64A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $F6F3.w		; 6D F3 F6 ; Add $F6F3.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $CC4B.w,Y		; 79 4B CC ; Add $CC4B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $83CF.w,X		; FE CF 83 ; Increment memory $83CF.w,X [Reads: X Index] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $1B		; 30 1B ; Branch if minus to $30, $1B [Flow: branch]
	jsr ($F946.w,X)		; FC 46 F9 ; Jump to subroutine indirect indexed ($F946.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	adc $B4F3.w		; 6D F3 B4 ; Add $B4F3.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	sta ($9C.b)		; 92 9C ; Store accumulator (indirect) ($9C.b) [Reads: Direct Page, Accumulator]
	sta ($9D.b,S),Y		; 93 9D ; Store accumulator (stack relative indirect indexed) ($9D.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	.db $62, $FC, $06		; 62 FC 06 ; Push effective relative address $62, $FC, $06 [Writes: Stack Pointer]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsl $410400.l		; 22 00 04 41 ; Jump to subroutine long $410400.l [Writes: Stack Pointer] [Flow: call]
	adc ($60.b,X)		; 61 60 ; Add with carry ($60.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	mvp $10,$FF		; 44 FF 10 ; Move block positive $10,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $20.b,S		; 43 20 ; Exclusive OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FF4043.l,X		; FF 43 40 FF ; Subtract with carry (long,X) $FF4043.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $002780.l,X		; FF 80 27 00 ; Subtract with carry (long,X) $002780.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $A0.b,S		; 83 A0 ; Store accumulator (stack relative) $A0.b,S [Reads: Stack Pointer, Accumulator]
	ora ($46.b,X)		; 01 46 ; Logical OR ($46.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $3F431F.l,X		; FF 1F 43 3F ; Subtract with carry (long,X) $3F431F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $277F00.l,X		; FF 00 7F 27 ; Subtract with carry (long,X) $277F00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E31F45.l,X		; FF 45 1F E3 ; Subtract with carry (long,X) $E31F45.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $7F.b,S		; C3 7F ; Compare accumulator (stack relative) $7F.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	sta [$FF.b]		; 87 FF ; Store accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator]
	ora $02A883.l		; 0F 83 A8 02 ; OR accumulator with memory (long) $02A883.l [Writes: Accumulator] [Flags: NZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $7FC13E.l,X		; FF 3E C1 7F ; Subtract with carry (long,X) $7FC13E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $83		; 80 83 ; Branch always to $80, $83 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $AC833E.l,X		; FF 3E 83 AC ; Subtract with carry (long,X) $AC833E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $27.b		; 02 27 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $015085.l,X		; FF 85 50 01 ; Subtract with carry (long,X) $015085.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0BFF2B.l		; 0F 2B FF 0B ; OR accumulator with memory (long) $0BFF2B.l [Writes: Accumulator] [Flags: NZ]
	sbc ($F0.b),Y		; F1 F0 ; Subtract with carry ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc #$E8.b		; E9 E8 ; Subtract #$E8.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F2.b,S),Y		; F3 F2 ; Subtract with carry (stack relative indirect indexed) ($F2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc [$74.b],Y		; 77 74 ; Add with carry (long indexed) [$74.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $615E78.l,X		; 5F 78 5E 61 ; Exclusive OR accumulator with memory (long,X) $615E78.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $BC.b		; 84 BC ; Store Y register to $BC.b [Reads: Y Index]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rol $1E.b,X		; 36 1E ; Rotate left $1E.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	trb $8198.w		; 1C 98 81 ; Test and reset bits $8198.w [Reads: Accumulator] [Flags: Z]
	sta $07.b,S		; 83 07 ; Store accumulator (stack relative) $07.b,S [Reads: Stack Pointer, Accumulator]
	ora $017E5D.l,X		; 1F 5D 7E 01 ; Logical OR long $017E5D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rol $3807.w,X		; 3E 07 38 ; Rotate left $3807.w,X [Reads: X Index] [Flags: NCZ]
	ora $E11E70.l		; 0F 70 1E E1 ; OR accumulator with memory (long) $E11E70.l [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	cmp [$F0.b]		; C7 F0 ; Compare accumulator (long) [$F0.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $801FE0.l		; 0F E0 1F 80 ; OR accumulator with memory (long) $801FE0.l [Writes: Accumulator] [Flags: NZ]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	sta ($07.b,X)		; 81 07 ; Store accumulator ($07.b,X) [Reads: Direct Page, Accumulator, X Index]
	ora $FF3F1F.l		; 0F 1F 3F FF ; OR accumulator with memory (long) $FF3F1F.l [Writes: Accumulator] [Flags: NZ]
	inc $3435.w,X		; FE 35 34 ; Increment memory $3435.w,X [Reads: X Index] [Flags: NZ]
	cmp $D4.b,X		; D5 D4 ; Compare accumulator $D4.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sta $3C2F9E.l,X		; 9F 9E 2F 3C ; Store accumulator (long,X) $3C2F9E.l,X [Reads: Accumulator, X Index]
	cmp ($FE.b,X)		; C1 FE ; Compare accumulator ($FE.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FD.b)		; 12 FD ; OR accumulator with memory (indirect) ($FD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $C0E4.w		; EE E4 C0 ; Increment $C0E4.w [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($4F.b,X)		; 01 4F ; Logical OR ($4F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $30, $CF		; 30 CF ; Branch if minus to $30, $CF [Flow: branch]
	and [$1F.b]		; 27 1F ; AND accumulator with memory (long) [$1F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $B7.b,S		; 43 B7 ; Exclusive OR accumulator with stack relative $B7.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $6DA91B.l,X		; 7F 1B A9 6D ; Add long $6DA91B.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ror $37F5.w		; 6E F5 37 ; Rotate right $37F5.w [Flags: NCZ]
	eor ($B3.b),Y		; 51 B3 ; Exclusive OR accumulator with memory ($B3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $A91B.w,Y		; F9 1B A9 ; Subtract with carry $A91B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b,S),Y		; 13 11 ; OR accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $8484.w		; 0C 84 84 ; Test and set bits $8484.w [Reads: Accumulator] [Flags: Z]
	and $7DC3.w,X		; 3D C3 7D ; AND accumulator with memory $7DC3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $EB.b		; 85 EB ; Store accumulator to $EB.b [Reads: Accumulator]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	dec $36.b,X		; D6 36 ; Decrement memory $36.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	eor [$A5.b]		; 47 A5 ; Exclusive OR accumulator with memory (long) [$A5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $F803.w		; 6D 03 F8 ; Add $F803.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sbc $C4.b,S		; E3 C4 ; Subtract stack-relative $C4.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	bit #$23.b		; 89 23 ; Test bits #$23.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora ($E0.b,S),Y		; 13 E0 ; OR accumulator (stack relative indirect indexed) ($E0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$4F.b]		; 27 4F ; AND accumulator with memory (long) [$4F.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $EBF7F7.l		; 4F F7 F7 EB ; Exclusive OR accumulator with memory (long) $EBF7F7.l [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pea $CB3C.w		; F4 3C CB ; Push absolute address $CB3C.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	and $E817F4.l		; 2F F4 17 E8 ; AND accumulator with memory (long) $E817F4.l [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc [$8F.b],Y		; 77 8F ; Add with carry (long indexed) [$8F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $83070F.l,X		; BF 0F 07 83 ; Load long $83070F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $90, $C8		; 90 C8 ; Branch if carry clear to $90, $C8 [Flow: branch]
	cmp [$E0.b]		; C7 E0 ; Compare accumulator (long) [$E0.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jsr ($F3FC.w,X)		; FC FC F3 ; Jump to subroutine indirect indexed ($F3FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc ($CC.b,S),Y		; F3 CC ; Subtract with carry (stack relative indirect indexed) ($CC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cmp $C93E32.l		; CF 32 3E C9 ; Compare accumulator (long) $C93E32.l [Reads: Accumulator] [Flags: NCZ]
	sbc $E727.w,Y		; F9 27 E7 ; Subtract with carry $E727.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $7C1F.w,X		; 1E 1F 7C ; Arithmetic shift left $7C1F.w,X [Reads: X Index] [Flags: NCZ]
	adc $00A383.l,X		; 7F 83 A3 00 ; Add long $00A383.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: NCZ]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora [$7C.b],Y		; 17 7C ; OR accumulator with memory (long indexed) [$7C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7F.b,S		; 83 7F ; Store accumulator (stack relative) $7F.b,S [Reads: Stack Pointer, Accumulator]
	.db $80, $3D		; 80 3D ; Branch always to $80, $3D [Flow: branch]
.INDEX 16
	rep #$1F		; C2 1F
	cpx #$F00F.w		; E0 0F F0 ; Compare #$F00F.w with X register [Reads: X Index] [Flags: NCZ]
	ora $FC.b,S		; 03 FC ; OR accumulator with stack relative $FC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpx #$F0E0.w		; E0 E0 F0 ; Compare #$F0E0.w with X register [Reads: X Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	jsr ($FF22.w,X)		; FC 22 FF ; Jump to subroutine indirect indexed ($FF22.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	.db $10, $8B		; 10 8B ; Branch if plus to $10, $8B [Flow: branch]
	jmp $3CD3.w		; 4C D3 3C ; Jump to $3CD3.w [Flow: jump]
	adc [$98.b]		; 67 98 ; Add with carry (long) [$98.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda $E0DFC0.l,X		; BF C0 DF E0 ; Load long $E0DFC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec $6CF1.w		; CE F1 6C ; Decrement $6CF1.w [Flags: NZ]
	adc ($64.b,S),Y		; 73 64 ; Add with carry (stack relative indirect indexed) ($64.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $24		; 30 24 ; Branch if minus to $30, $24 [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	lsr $FF00.w		; 4E 00 FF ; Logical shift right $FF00.w [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $EFEF09.l,X		; FF 09 EF EF ; Subtract with carry (long,X) $EFEF09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $9F9FCF.l		; CF CF 9F 9F ; Compare accumulator (long) $9F9FCF.l [Reads: Accumulator] [Flags: NCZ]
	inc $FCFE.w,X		; FE FE FC ; Increment memory $FCFE.w,X [Reads: X Index] [Flags: NZ]
	jsr ($FF2B.w,X)		; FC 2B FF ; Jump to subroutine indirect indexed ($FF2B.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $FF00.w		; 4C 00 FF ; Jump to $FF00.w [Flow: jump]
	cop $8D.b		; 02 8D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $FF.b		; 25 FF ; Logical AND $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0027FF.l		; 2F FF 27 00 ; AND accumulator with memory (long) $0027FF.l [Writes: Accumulator] [Flags: NZ]
	sta $80.b,S		; 83 80 ; Store accumulator (stack relative) $80.b,S [Reads: Stack Pointer, Accumulator]
	ora ($43.b,X)		; 01 43 ; Logical OR ($43.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FE0300.l,X		; FF 00 03 FE ; Subtract with carry (long,X) $FE0300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($FC.b,X)		; 01 FC ; Logical OR ($FC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $83.b,S		; 03 83 ; OR accumulator with stack relative $83.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($04.b)		; 52 04 ; Exclusive OR accumulator with memory (indirect) ($04.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$FF.b]		; 27 FF ; AND accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $007883.l,X		; FF 83 78 00 ; Subtract with carry (long,X) $007883.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$43.b]		; 07 43 ; OR accumulator with memory (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($0103.w,X)		; FC 03 01 ; Jump to subroutine indirect indexed ($0103.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	inc $2701.w,X		; FE 01 27 ; Increment memory $2701.w,X [Reads: X Index] [Flags: NZ]
	sbc $FFC70E.l,X		; FF 0E C7 FF ; Subtract with carry (long,X) $FFC70E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$B1FF.w		; E0 FF B1 ; Compare #$B1FF.w with X register [Reads: X Index] [Flags: NCZ]
	lda $101F11.l,X		; BF 11 1F 10 ; Load long $101F11.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $DF302F.l,X		; 1F 2F 30 DF ; Logical OR long $DF302F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$22FF.w		; E0 FF 22 ; Compare #$22FF.w with X register [Reads: X Index] [Flags: NCZ]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$E0E0.w		; C0 E0 E0 ; Compare #$E0E0.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$0F00.w		; C0 00 0F ; Compare #$0F00.w with Y register [Reads: Y Index] [Flags: NCZ]
	sbc ($FF.b),Y		; F1 FF ; Subtract with carry ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $FD.b		; 85 FD ; Store accumulator to $FD.b [Reads: Accumulator]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	pea $FB0C.w		; F4 0C FB ; Push absolute address $FB0C.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $031F00.l		; 22 00 1F 03 ; Jump to subroutine long $031F00.l [Writes: Stack Pointer] [Flow: call]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	sbc ($2B.b),Y		; F1 2B ; Subtract with carry ($2B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	nop		; EA ; No operation
	and ($F2.b,S),Y		; 33 F2 ; AND accumulator (stack relative indirect indexed) ($F2.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and [$F4.b],Y		; 37 F4 ; AND accumulator with memory (long indexed) [$F4.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $1E		; Opcode 1E overrunning bank boundry at 09FFFF. Skipping. ; Arithmetic shift left $1E [Reads: X Index] [Flags: NCZ]
.ENDS
