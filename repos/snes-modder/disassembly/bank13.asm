.BANK 13 SLOT 0
.ORG $0000

.SECTION "Bank13" FORCE

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $01,$01		; 44 01 01 ; Move block positive $01,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $02,$02		; 44 02 02 ; Move block positive $02,$02 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0200.l,X		; FF 00 02 FE ; Subtract with carry (long,X) $FE0200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	mvp $00,$01		; 44 01 00 ; Move block positive $00,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $01,$01		; 44 01 01 ; Move block positive $01,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $FF,$01		; 44 01 FF ; Move block positive $FF,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000100.l,X		; FF 00 01 00 ; Subtract with carry (long,X) $000100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $01,$01		; 44 01 01 ; Move block positive $01,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $01,$02		; 44 02 01 ; Move block positive $01,$02 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0200.l,X		; FF 00 02 FF ; Subtract with carry (long,X) $FF0200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $01,$01		; 44 01 01 ; Move block positive $01,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $01,$01		; 44 01 01 ; Move block positive $01,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $01,$02		; 44 02 01 ; Move block positive $01,$02 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0100.l,X		; FF 00 01 FF ; Subtract with carry (long,X) $FF0100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora $FF0000.l		; 0F 00 00 FF ; OR accumulator with memory (long) $FF0000.l [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0000.l,X		; FF 00 00 FF ; Subtract with carry (long,X) $FF0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	mvp $00,$01		; 44 01 00 ; Move block positive $00,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004400.l,X		; FF 00 44 00 ; Subtract with carry (long,X) $004400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	mvp $01,$02		; 44 02 01 ; Move block positive $01,$02 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FF0200.l,X		; FF 00 02 FF ; Subtract with carry (long,X) $FF0200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $01,$00		; 44 00 01 ; Move block positive $01,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0000.w,X		; FE 00 00 ; Increment memory $0000.w,X [Reads: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	mvp $FF,$02		; 44 02 FF ; Move block positive $FF,$02 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $FC,$02		; 44 02 FC ; Move block positive $FC,$02 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $FF,$02		; 44 02 FF ; Move block positive $FF,$02 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $00,$01		; 44 01 00 ; Move block positive $00,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: NCZ]
	mvp $FF,$05		; 44 05 FF ; Move block positive $FF,$05 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $44.b,S		; 03 44 ; OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $4405.w		; 0C 05 44 ; Test and set bits $4405.w [Reads: Accumulator] [Flags: Z]
	tsb $4405.w		; 0C 05 44 ; Test and set bits $4405.w [Reads: Accumulator] [Flags: Z]
	ora $00FD.w		; 0D FD 00 ; Logical OR $00FD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $00FB.w		; 0C FB 00 ; Test and set bits $00FB.w [Reads: Accumulator] [Flags: Z]
	tsb $00FB.w		; 0C FB 00 ; Test and set bits $00FB.w [Reads: Accumulator] [Flags: Z]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0000.l,X		; FF 00 00 FE ; Subtract with carry (long,X) $FE0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0000.l,X		; FF 00 00 FE ; Subtract with carry (long,X) $FE0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FE0000.l,X		; FF 00 00 FE ; Subtract with carry (long,X) $FE0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0400.w,X		; FE 00 04 ; Increment memory $0400.w,X [Reads: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $004400.l,X		; FF 00 44 00 ; Subtract with carry (long,X) $004400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $01,$FF		; 44 FF 01 ; Move block positive $01,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $FF,$FF		; 44 FF FF ; Move block positive $FF,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFF00.l,X		; FF 00 FF FF ; Subtract with carry (long,X) $FFFF00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	mvp $01,$02		; 44 02 01 ; Move block positive $01,$02 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $FF,$01		; 44 01 FF ; Move block positive $FF,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000200.l,X		; FF 00 02 00 ; Subtract with carry (long,X) $000200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $01,$02		; 44 02 01 ; Move block positive $01,$02 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $02,$02		; 44 02 02 ; Move block positive $02,$02 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$01		; 44 01 00 ; Move block positive $00,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $00,$02		; 44 02 00 ; Move block positive $00,$02 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $00,$01		; 44 01 00 ; Move block positive $00,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $00,$FF		; 44 FF 00 ; Move block positive $00,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $00,$01		; 44 01 00 ; Move block positive $00,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $00,$00		; 44 00 00 ; Move block positive $00,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $010144.l,X		; FF 44 01 01 ; Subtract with carry (long,X) $010144.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $01,$00		; 44 00 01 ; Move block positive $01,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $01,$00		; 44 00 01 ; Move block positive $01,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	mvp $FC,$01		; 44 01 FC ; Move block positive $FC,$01 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	mvp $FF,$00		; 44 00 FF ; Move block positive $FF,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $00,$FE		; 44 FE 00 ; Move block positive $00,$FE [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0004.w,X		; FE 04 00 ; Increment memory $0004.w,X [Reads: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0800.w		; 0C 00 08 ; Test and set bits $0800.w [Reads: Accumulator] [Flags: Z]
	asl $8000.w		; 0E 00 80 ; Arithmetic shift left $8000.w [Flags: NCZ]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cpy #$48.b		; C0 48 ; Compare #$48.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$48.b		; C0 48 ; Compare #$48.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$48.b		; C0 48 ; Compare #$48.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: NCZ]
	ora $2A.b		; 05 2A ; Logical OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $2A.b		; 06 2A ; Arithmetic shift left $2A.b [Reads: Direct Page] [Flags: NCZ]
	sbc $6A06FF.l,X		; FF FF 06 6A ; Subtract with carry (long,X) $6A06FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $6A.b		; 05 6A ; Logical OR $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $AA05FF.l,X		; FF FF 05 AA ; Subtract with carry (long,X) $AA05FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $AA.b		; 06 AA ; Arithmetic shift left $AA.b [Reads: Direct Page] [Flags: NCZ]
	sbc $2A05FF.l,X		; FF FF 05 2A ; Subtract with carry (long,X) $2A05FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $2A.b		; 06 2A ; Arithmetic shift left $2A.b [Reads: Direct Page] [Flags: NCZ]
	sbc $EA06FF.l,X		; FF FF 06 EA ; Subtract with carry (long,X) $EA06FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $EA.b		; 05 EA ; Logical OR $EA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $6A06FF.l,X		; FF FF 06 6A ; Subtract with carry (long,X) $6A06FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $6A.b		; 05 6A ; Logical OR $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $2A05FF.l,X		; FF FF 05 2A ; Subtract with carry (long,X) $2A05FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2A15FF.l,X		; FF FF 15 2A ; Subtract with carry (long,X) $2A15FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $AA.b,X		; 15 AA ; OR accumulator with memory $AA.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $AA05FF.l,X		; FF FF 05 AA ; Subtract with carry (long,X) $AA05FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $2A.b		; 05 2A ; Logical OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $2A15FF.l,X		; FF FF 15 2A ; Subtract with carry (long,X) $2A15FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $AA.b,X		; 15 AA ; OR accumulator with memory $AA.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $AA05FF.l,X		; FF FF 05 AA ; Subtract with carry (long,X) $AA05FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $6A.b		; 05 6A ; Logical OR $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $6A15FF.l,X		; FF FF 15 6A ; Subtract with carry (long,X) $6A15FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $EA.b,X		; 15 EA ; OR accumulator with memory $EA.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $EA05FF.l,X		; FF FF 05 EA ; Subtract with carry (long,X) $EA05FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $2A.b		; 05 2A ; Logical OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $AA.b		; 05 AA ; Logical OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $6A.b		; 05 6A ; Logical OR $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $EA.b		; 05 EA ; Logical OR $EA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $2A.b		; 05 2A ; Logical OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $AA.b		; 05 AA ; Logical OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $6A.b		; 05 6A ; Logical OR $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $EA.b		; 05 EA ; Logical OR $EA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $2A.b		; 05 2A ; Logical OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $AA.b		; 05 AA ; Logical OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $6A.b		; 05 6A ; Logical OR $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $EA.b		; 05 EA ; Logical OR $EA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $2A.b		; 05 2A ; Logical OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $AA.b		; 05 AA ; Logical OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $6A.b		; 05 6A ; Logical OR $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $EA.b		; 05 EA ; Logical OR $EA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $AA.b,X		; 15 AA ; OR accumulator with memory $AA.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$22.b		; 09 22 ; Logical OR #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $2219FF.l,X		; FF FF 19 22 ; Subtract with carry (long,X) $2219FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$22.b		; 09 22 ; Logical OR #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $2219FF.l,X		; FF FF 19 22 ; Subtract with carry (long,X) $2219FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsl $19FFFF.l		; 22 FF FF 19 ; Jump to subroutine long $19FFFF.l [Writes: Stack Pointer] [Flow: call]
	jsl $FFA219.l		; 22 19 A2 FF ; Jump to subroutine long $FFA219.l [Writes: Stack Pointer] [Flow: call]
	sbc $09A209.l,X		; FF 09 A2 09 ; Subtract with carry (long,X) $09A209.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $19FFFF.l		; 22 FF FF 19 ; Jump to subroutine long $19FFFF.l [Writes: Stack Pointer] [Flow: call]
	jsl $FF2209.l		; 22 09 22 FF ; Jump to subroutine long $FF2209.l [Writes: Stack Pointer] [Flow: call]
	sbc $09FFFF.l,X		; FF FF FF 09 ; Subtract with carry (long,X) $09FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FFFFFF.l		; 22 FF FF FF ; Jump to subroutine long $FFFFFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $092219.l,X		; FF 19 22 09 ; Subtract with carry (long,X) $092219.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $09FFFF.l		; 22 FF FF 09 ; Jump to subroutine long $09FFFF.l [Writes: Stack Pointer] [Flow: call]
	.db $62, $FF, $FF		; 62 FF FF ; Push effective relative address $62, $FF, $FF [Writes: Stack Pointer]
	sbc $6209FF.l,X		; FF FF 09 62 ; Subtract with carry (long,X) $6209FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FF62.w,Y		; 19 62 FF ; OR accumulator with memory $FF62.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $09A209.l,X		; FF 09 A2 09 ; Subtract with carry (long,X) $09A209.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.ACCU 8
.INDEX 8
	sep #$FF		; E2 FF
	sbc $092209.l,X		; FF 09 22 09 ; Subtract with carry (long,X) $092209.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $FF, $FF		; 62 FF FF ; Push effective relative address $62, $FF, $FF [Writes: Stack Pointer]
	ora #$62.b		; 09 62 ; Logical OR #$62.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $E209FF.l,X		; FF FF 09 E2 ; Subtract with carry (long,X) $E209FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$22.b		; 09 22 ; Logical OR #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $A209FF.l,X		; FF FF 09 A2 ; Subtract with carry (long,X) $A209FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$A2.b		; 09 A2 ; Logical OR #$A2.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$62.b		; 09 62 ; Logical OR #$62.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$22.b		; 09 22 ; Logical OR #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$E2.b		; 09 E2 ; Logical OR #$E2.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$22.b		; 09 22 ; Logical OR #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$22.b		; 09 22 ; Logical OR #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$62.b		; 09 62 ; Logical OR #$62.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$62.b		; 09 62 ; Logical OR #$62.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsl $FFFFFF.l		; 22 FF FF FF ; Jump to subroutine long $FFFFFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FF221A.l,X		; FF 1A 22 FF ; Subtract with carry (long,X) $FF221A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1AFFFF.l,X		; FF FF FF 1A ; Subtract with carry (long,X) $1AFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FFFFFF.l		; 22 FF FF FF ; Jump to subroutine long $FFFFFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FF221A.l,X		; FF 1A 22 FF ; Subtract with carry (long,X) $FF221A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09FFFF.l,X		; FF FF FF 09 ; Subtract with carry (long,X) $09FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FFFFFF.l		; 22 FF FF FF ; Jump to subroutine long $FFFFFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FF2209.l,X		; FF 09 22 FF ; Subtract with carry (long,X) $FF2209.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09FFFF.l,X		; FF FF FF 09 ; Subtract with carry (long,X) $09FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FFFFFF.l		; 22 FF FF FF ; Jump to subroutine long $FFFFFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FFE209.l,X		; FF 09 E2 FF ; Subtract with carry (long,X) $FFE209.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09FFFF.l,X		; FF FF FF 09 ; Subtract with carry (long,X) $09FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FFFFFF.l		; 22 FF FF FF ; Jump to subroutine long $FFFFFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FF2209.l,X		; FF 09 22 FF ; Subtract with carry (long,X) $FF2209.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09FFFF.l,X		; FF FF FF 09 ; Subtract with carry (long,X) $09FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FFFFFF.l		; 22 FF FF FF ; Jump to subroutine long $FFFFFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FF2209.l,X		; FF 09 22 FF ; Subtract with carry (long,X) $FF2209.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09FFFF.l,X		; FF FF FF 09 ; Subtract with carry (long,X) $09FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FFFFFF.l		; 22 FF FF FF ; Jump to subroutine long $FFFFFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FF2209.l,X		; FF 09 22 FF ; Subtract with carry (long,X) $FF2209.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09FFFF.l,X		; FF FF FF 09 ; Subtract with carry (long,X) $09FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $FFFFFF.l		; 22 FF FF FF ; Jump to subroutine long $FFFFFF.l [Writes: Stack Pointer] [Flow: call]
	sbc $FF2209.l,X		; FF 09 22 FF ; Subtract with carry (long,X) $FF2209.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $092219.l,X		; FF 19 22 09 ; Subtract with carry (long,X) $092219.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsl $19FFFF.l		; 22 FF FF 19 ; Jump to subroutine long $19FFFF.l [Writes: Stack Pointer] [Flow: call]
	jsl $FF2209.l		; 22 09 22 FF ; Jump to subroutine long $FF2209.l [Writes: Stack Pointer] [Flow: call]
	sbc $092219.l,X		; FF 19 22 09 ; Subtract with carry (long,X) $092219.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $FF, $FF		; 62 FF FF ; Push effective relative address $62, $FF, $FF [Writes: Stack Pointer]
	ora $0962.w,Y		; 19 62 09 ; OR accumulator with memory $0962.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $19FFFF.l		; 22 FF FF 19 ; Jump to subroutine long $19FFFF.l [Writes: Stack Pointer] [Flow: call]
	jsl $FF2209.l		; 22 09 22 FF ; Jump to subroutine long $FF2209.l [Writes: Stack Pointer] [Flow: call]
	sbc $19FFFF.l,X		; FF FF FF 19 ; Subtract with carry (long,X) $19FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	ldx #$FF.b		; A2 FF ; Load #$FF.b into X register [Writes: X Index] [Flags: NZ]
	sbc $FF6209.l,X		; FF 09 62 FF ; Subtract with carry (long,X) $FF6209.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09FFFF.l,X		; FF FF FF 09 ; Subtract with carry (long,X) $09FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.INDEX 8
	sep #$19		; E2 19
.ACCU 8
.INDEX 8
	sep #$FF		; E2 FF
	sbc $FF2809.l,X		; FF 09 28 FF ; Subtract with carry (long,X) $FF2809.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $07FFFF.l,X		; FF FF FF 07 ; Subtract with carry (long,X) $07FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$2A.b]		; 07 2A ; OR accumulator with memory (long) [$2A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$2A.b]		; 07 2A ; OR accumulator with memory (long) [$2A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$6A.b]		; 07 6A ; OR accumulator with memory (long) [$6A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$2A.b]		; 07 2A ; OR accumulator with memory (long) [$2A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$6A.b]		; 07 6A ; OR accumulator with memory (long) [$6A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$2A.b]		; 07 2A ; OR accumulator with memory (long) [$2A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$6A.b]		; 07 6A ; OR accumulator with memory (long) [$6A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $2819FF.l,X		; FF FF 19 28 ; Subtract with carry (long,X) $2819FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $2819FF.l,X		; FF FF 19 28 ; Subtract with carry (long,X) $2819FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $2819FF.l,X		; FF FF 19 28 ; Subtract with carry (long,X) $2819FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FFA8.w,Y		; 19 A8 FF ; OR accumulator with memory $FFA8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $09A809.l,X		; FF 09 A8 09 ; Subtract with carry (long,X) $09A809.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $2819FF.l,X		; FF FF 19 28 ; Subtract with carry (long,X) $2819FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$28.b		; 09 28 ; Logical OR #$28.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0928.w,Y		; 19 28 09 ; OR accumulator with memory $0928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $6809FF.l,X		; FF FF 09 68 ; Subtract with carry (long,X) $6809FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$68.b		; 09 68 ; Logical OR #$68.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $FF68.w,Y		; 19 68 FF ; OR accumulator with memory $FF68.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $6C286C.l,X		; FF 6C 28 6C ; Subtract with carry (long,X) $6C286C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $286EFF.l,X		; FF FF 6E 28 ; Subtract with carry (long,X) $286EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $7E68.w		; 6E 68 7E ; Rotate right $7E68.w [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ror $D868.w,X		; [PATTERN: Memory clearing operation] 7E 68 D8 ; Rotate right $D868.w,X [Reads: X Index] [Flags: NCZ]
	bit $D8.b		; 24 D8 ; Test bits $D8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $D9.b		; 64 D9 ; Store zero to $D9.b
	bit $D9.b		; 24 D9 ; Test bits $D9.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $DA.b		; 64 DA ; Store zero to $DA.b
	bit $DA.b		; 24 DA ; Test bits $DA.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $C8.b		; 64 C8 ; Store zero to $C8.b
	jsl $C962C8.l		; 22 C8 62 C9 ; Jump to subroutine long $C962C8.l [Writes: Stack Pointer] [Flow: call]
	jsl $CA62C9.l		; 22 C9 62 CA ; Jump to subroutine long $CA62C9.l [Writes: Stack Pointer] [Flow: call]
	jsl $0062CA.l		; 22 CA 62 00 ; Jump to subroutine long $0062CA.l [Writes: Stack Pointer] [Flow: call]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B1.b		; 00 B1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B2.b		; 00 B2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B3.b		; 00 B3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B5.b		; 00 B5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BA.b		; 00 BA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BB.b		; 00 BB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C1.b		; 00 C1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $31.b		; 00 31 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $33.b		; 00 33 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $34.b		; 00 34 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $35.b		; 00 35 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $39.b		; 00 39 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3D.b		; 00 3D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $41.b		; 00 41 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4A.b		; 00 4A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $75.b		; 00 75 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A3.b		; 00 A3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CF.b		; 00 CF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D1.b		; 00 D1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D2.b		; 00 D2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D3.b		; 00 D3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D4.b		; 00 D4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D4.b		; 00 D4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D6.b		; 00 D6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D7.b		; 00 D7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D6.b		; 00 D6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D7.b		; 00 D7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $53.b		; 00 53 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $57.b		; 00 57 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $59.b		; 00 59 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5B.b		; 00 5B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $59.b		; 00 59 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5C.b		; 00 5C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5D.b		; 00 5D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5F.b		; 00 5F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $65.b		; 00 65 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2C.b		; 00 2C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6F.b		; 00 6F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D9.b		; 00 D9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DC.b		; 00 DC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DE.b		; 00 DE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $92.b		; 00 92 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $93.b		; 00 93 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $94.b		; 00 94 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $95.b		; 00 95 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9C.b		; 00 9C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9C.b		; 00 9C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A1.b		; 00 A1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $99.b		; 00 99 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9C.b		; 00 9C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A1.b		; 00 A1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CD.b		; 00 CD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CD.b		; 00 CD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E3.b		; 00 E3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E6.b		; 00 E6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E9.b		; 00 E9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EA.b		; 00 EA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EB.b		; 00 EB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EF.b		; 00 EF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DB.b		; 00 DB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($17.b,X)		; 01 17 ; Logical OR ($17.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($19.b,X)		; 01 19 ; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($19.b,X)		; 01 19 ; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($19.b,X)		; 01 19 ; Logical OR ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($0A.b,X)		; 01 0A ; Logical OR ($0A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1A.b,X)		; 01 1A ; Logical OR ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1A.b,X)		; 01 1A ; Logical OR ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1A.b,X)		; 01 1A ; Logical OR ($1A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($F5.b,X)		; 01 F5 ; Logical OR ($F5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F2.b		; 00 F2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $75.b		; 00 75 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($15.b,X)		; 01 15 ; Logical OR ($15.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1C.b,X)		; 01 1C ; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1B.b,X)		; 01 1B ; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1D.b,X)		; 01 1D ; Logical OR ($1D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1E.b,X)		; 01 1E ; Logical OR ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1F.b,X)		; 01 1F ; Logical OR ($1F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1E.b,X)		; 01 1E ; Logical OR ($1E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($21.b,X)		; 01 21 ; Logical OR ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($21.b,X)		; 01 21 ; Logical OR ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($6F.b,X)		; 01 6F ; Logical OR ($6F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($6A.b,X)		; 01 6A ; Logical OR ($6A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($66.b,X)		; 01 66 ; Logical OR ($66.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6D.b		; 00 6D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6E.b		; 00 6E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CB.b		; 00 CB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($2B.b,X)		; 01 2B ; Logical OR ($2B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($2C.b,X)		; 01 2C ; Logical OR ($2C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($2D.b,X)		; 01 2D ; Logical OR ($2D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($2E.b,X)		; 01 2E ; Logical OR ($2E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3F.b,X)		; 01 3F ; Logical OR ($3F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4F.b		; 00 4F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($50.b,X)		; 01 50 ; Logical OR ($50.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $51.b		; 00 51 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $51.b		; 00 51 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7A.b		; 00 7A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7B.b		; 00 7B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0302FF.l,X		; FF FF 02 03 ; Subtract with carry (long,X) $0302FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $17.b,X		; 15 17 ; OR accumulator with memory $17.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FF1715.l,X		; FF 15 17 FF ; Subtract with carry (long,X) $FF1715.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $18.b,X		; 16 18 ; Arithmetic shift left $18.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $131715.l,X		; FF 15 17 13 ; Subtract with carry (long,X) $131715.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0911FF.l		; 0F FF 11 09 ; OR accumulator with memory (long) $0911FF.l [Writes: Accumulator] [Flags: NZ]
	ora $09FF.w		; 0D FF 09 ; Logical OR $09FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($0D.b)		; 12 0D ; OR accumulator with memory (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $0F110A.l,X		; FF 0A 11 0F ; Subtract with carry (long,X) $0F110A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $17FFFF.l,X		; FF FF FF 17 ; Subtract with carry (long,X) $17FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$FF.b],Y		; 17 FF ; OR accumulator with memory (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $1515FF.l,X		; FF FF 15 15 ; Subtract with carry (long,X) $1515FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1818FF.l,X		; FF FF 18 18 ; Subtract with carry (long,X) $1818FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1717FF.l,X		; FF FF 17 17 ; Subtract with carry (long,X) $1717FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1AFFFF.l,X		; FF FF FF 1A ; Subtract with carry (long,X) $1AFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1919FF.l,X		; FF FF 19 19 ; Subtract with carry (long,X) $1919FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FFFF.w,Y		; 19 FF FF ; OR accumulator with memory $FFFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF1816.l,X		; FF 16 18 FF ; Subtract with carry (long,X) $FF1816.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $18.b,X		; 16 18 ; Arithmetic shift left $18.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0C14FF.l,X		; FF FF 14 0C ; Subtract with carry (long,X) $0C14FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	ora ($0A.b)		; 12 0A ; OR accumulator with memory (indirect) ($0A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $FFFF.w		; 0E FF FF ; Arithmetic shift left $FFFF.w [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $18FFFF.l,X		; FF FF FF 18 ; Subtract with carry (long,X) $18FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF1818.l,X		; FF 18 18 FF ; Subtract with carry (long,X) $FF1818.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF1616.l,X		; FF 16 16 FF ; Subtract with carry (long,X) $FF1616.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $061A.w		; 0E 1A 06 ; Arithmetic shift left $061A.w [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0D.b		; 02 0D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0B07.w,Y		; 19 07 0B ; OR accumulator with memory $0B07.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($17.b,S),Y		; 13 17 ; OR accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($06.b,X)		; 01 06 ; Logical OR ($06.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0719.w		; 0D 19 07 ; Logical OR $0719.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: NCZ]
	ora ($16.b)		; 12 16 ; OR accumulator with memory (indirect) ($16.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $0A071B.l		; 0F 1B 07 0A ; OR accumulator with memory (long) $0A071B.l [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $0A.b		; 06 0A ; Arithmetic shift left $0A.b [Reads: Direct Page] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0A08FF.l,X		; FF FF 08 0A ; Subtract with carry (long,X) $0A08FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $211D.w		; 20 1D 21 ; Jump to subroutine at $211D.w [Writes: Stack Pointer] [Flow: call]
	ora $1E22.w,X		; 1D 22 1E ; OR accumulator with memory $1E22.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1F2625.l,X		; 1F 25 26 1F ; Logical OR long $1F2625.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $24.b,S		; 23 24 ; AND accumulator with stack relative $24.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$28.b		; 29 28 ; Logical AND #$28.b with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $2A2A.w		; 2C 2A 2A ; Test bits $2A2A.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $2929.w		; 2D 29 29 ; Logical AND $2929.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($31.b),Y		; 31 31 ; AND accumulator with memory ($31.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($2F.b)		; 32 2F ; AND accumulator with memory (indirect) ($2F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $FFFF30.l		; 2F 30 FF FF ; AND accumulator with memory (long) $FFFF30.l [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $080AFF.l,X		; FF FF 0A 08 ; Subtract with carry (long,X) $080AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$0B.b		; 09 0B ; Logical OR #$0B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $030300.l,X		; FF 00 03 03 ; Subtract with carry (long,X) $030300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $050501.l,X		; FF 01 05 05 ; Subtract with carry (long,X) $050501.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $030300.l,X		; FF 00 03 03 ; Subtract with carry (long,X) $030300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $050501.l,X		; FF 01 05 05 ; Subtract with carry (long,X) $050501.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	tsb $0A.b		; 04 0A ; Test and set bits $0A.b [Reads: Accumulator] [Flags: Z]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $04070B.l		; 0F 0B 07 04 ; OR accumulator with memory (long) $04070B.l [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	trb $FFFF.w		; 1C FF FF ; Test and reset bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $33FFFF.l,X		; FF FF FF 33 ; Subtract with carry (long,X) $33FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $35.b,X		; 34 35 ; Test bits $35.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	rol $FF.b,X		; 36 FF ; Rotate left $FF.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $44FFFF.l,X		; FF FF FF 44 ; Subtract with carry (long,X) $44FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $44,$46		; 44 46 44 ; Move block positive $44,$46 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $47,$43		; 44 43 47 ; Move block positive $47,$43 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $49,$4A		; 44 4A 49 ; Move block positive $49,$4A [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$37.b],Y		; 37 37 ; AND accumulator with memory (long indexed) [$37.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	and $3B3A.w,Y		; 39 3A 3B ; AND accumulator with memory $3B3A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $3E3D.w,X		; 3C 3D 3E ; Test bits $3E3D.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	and $064140.l,X		; 3F 40 41 06 ; AND accumulator with memory (long,X) $064140.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0E0501.l,X		; FF 01 05 0E ; Subtract with carry (long,X) $0E0501.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0919.w		; 0D 19 09 ; Logical OR $0919.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($17.b,S),Y		; 13 17 ; OR accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $0D.b		; 02 0D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0A06.w,Y		; 19 06 0A ; OR accumulator with memory $0A06.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($16.b)		; 12 16 ; OR accumulator with memory (indirect) ($16.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0F.b		; 04 0F ; Test and set bits $0F.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0001FF.l,X		; FF FF 01 00 ; Subtract with carry (long,X) $0001FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0300FF.l,X		; FF FF 00 03 ; Subtract with carry (long,X) $0300FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $0302FF.l,X		; FF FF 02 03 ; Subtract with carry (long,X) $0302FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $020202.l,X		; FF 02 02 02 ; Subtract with carry (long,X) $020202.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b,S		; 03 FF ; OR accumulator with stack relative $FF.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FE0509.l,X		; FF 09 05 FE ; Subtract with carry (long,X) $FE0509.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $09FF.w,X		; FD FF 09 ; Subtract with carry $09FF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $13110D.l		; 0F 0D 11 13 ; OR accumulator with memory (long) $13110D.l [Writes: Accumulator] [Flags: NZ]
	ora ($0F.b),Y		; 11 0F ; OR accumulator with memory ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $FE0B.w		; 0D 0B FE ; Logical OR $FE0B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	ora $13130E.l		; 0F 0E 13 13 ; OR accumulator with memory (long) $13130E.l [Writes: Accumulator] [Flags: NZ]
	inc $0302.w,X		; FE 02 03 ; Increment memory $0302.w,X [Reads: X Index] [Flags: NZ]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	ora $13130E.l		; 0F 0E 13 13 ; OR accumulator with memory (long) $13130E.l [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jsr ($FBFD.w,X)		; FC FD FB ; Jump to subroutine indirect indexed ($FBFD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($10FD.w,X)		; FC FD 10 ; Jump to subroutine indirect indexed ($10FD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora ($12.b),Y		; 11 12 ; OR accumulator with memory ($12.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($0D.b)		; 12 0D ; OR accumulator with memory (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $0D0F.w		; 0E 0F 0D ; Arithmetic shift left $0D0F.w [Flags: NCZ]
	asl $0D0F.w		; 0E 0F 0D ; Arithmetic shift left $0D0F.w [Flags: NCZ]
	asl $0D0F.w		; 0E 0F 0D ; Arithmetic shift left $0D0F.w [Flags: NCZ]
	asl $FD0F.w		; 0E 0F FD ; Arithmetic shift left $FD0F.w [Flags: NCZ]
	sbc $0C02.w,Y		; F9 02 0C ; Subtract with carry $0C02.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0F0A0D.l		; 0F 0D 0A 0F ; OR accumulator with memory (long) $0F0A0D.l [Writes: Accumulator] [Flags: NZ]
	ora $FF0A.w		; 0D 0A FF ; Logical OR $FF0A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $060302.l,X		; FF 02 03 06 ; Subtract with carry (long,X) $060302.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $F8.b		; 06 F8 ; Arithmetic shift left $F8.b [Reads: Direct Page] [Flags: NCZ]
	sbc $FDFD.w,X		; FD FD FD ; Subtract with carry $FDFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($FE.b)		; 12 FE ; OR accumulator with memory (indirect) ($FE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0E02.w,X		; FE 02 0E ; Increment memory $0E02.w,X [Reads: X Index] [Flags: NZ]
	ora $09.b		; 05 09 ; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0A0D.w		; 0D 0D 0A ; Logical OR $0A0D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr ($0B0A.w,X)		; FC 0A 0B ; Jump to subroutine indirect indexed ($0B0A.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FFFF.w,X)		; FC FF FF ; Jump to subroutine indirect indexed ($FFFF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FCFF.l,X		; FF FF FC F8 ; Subtract with carry (long,X) $F8FCFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0F.b		; 06 0F ; Arithmetic shift left $0F.b [Reads: Direct Page] [Flags: NCZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $F906.w		; 0E 06 F9 ; Arithmetic shift left $F906.w [Flags: NCZ]
	sbc $110E.w,Y		; F9 0E 11 ; Subtract with carry $110E.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	ora $0C.b		; 05 0C ; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0A0608.l,X		; FF 08 06 0A ; Subtract with carry (long,X) $0A0608.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0A0608.l,X		; FF 08 06 0A ; Subtract with carry (long,X) $0A0608.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0A0608.l,X		; FF 08 06 0A ; Subtract with carry (long,X) $0A0608.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0A0608.l,X		; FF 08 06 0A ; Subtract with carry (long,X) $0A0608.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	jsr ($FBFB.w,X)		; FC FB FB ; Jump to subroutine indirect indexed ($FBFB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FBFBFB.l,X		; FF FB FB FB ; Subtract with carry (long,X) $FBFBFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $13110D.l		; 0F 0D 11 13 ; OR accumulator with memory (long) $13110D.l [Writes: Accumulator] [Flags: NZ]
	ora $F9FD.w		; 0D FD F9 ; Logical OR $F9FD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0C1102.l,X		; FF 02 11 0C ; Subtract with carry (long,X) $0C1102.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $FFFF.w		; 0C FF FF ; Test and set bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FE05FF.l,X		; FF FF 05 FE ; Subtract with carry (long,X) $FE05FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F9.b],Y		; F7 F9 ; Subtract with carry (long indexed) [$F9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $0210.w,X		; FE 10 02 ; Increment memory $0210.w,X [Reads: X Index] [Flags: NZ]
	inc $020C.w,X		; FE 0C 02 ; Increment memory $020C.w,X [Reads: X Index] [Flags: NZ]
	inc $FC0C.w,X		; FE 0C FC ; Increment memory $FC0C.w,X [Reads: X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	trb $0F.b		; 14 0F ; Test and reset bits $0F.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0EF8.w,X		; FD F8 0E ; Subtract with carry $0EF8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FB0F.w,X		; FD 0F FB ; Subtract with carry $FB0F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$05.b		; 09 05 ; Logical OR #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $F5F7.w,X		; FD F7 F5 ; Subtract with carry $F5F7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F7.b),Y		; F1 F7 ; Subtract with carry ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0B00.w,X)		; FC 00 0B ; Jump to subroutine indirect indexed ($0B00.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $110C.w		; 0E 0C 11 ; Arithmetic shift left $110C.w [Flags: NCZ]
	ora ($17.b,S),Y		; 13 17 ; OR accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($0F.b),Y		; 11 0F ; OR accumulator with memory ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $FFFE.w		; 0D FE FF ; Logical OR $FFFE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	ora ($FE.b,S),Y		; 13 FE ; OR accumulator (stack relative indirect indexed) ($FE.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $090000.l,X		; FF 00 00 09 ; Subtract with carry (long,X) $090000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $1010.w		; 0C 10 10 ; Test and set bits $1010.w [Reads: Accumulator] [Flags: Z]
	ora ($FF.b,S),Y		; 13 FF ; OR accumulator (stack relative indirect indexed) ($FF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0BFFFF.l,X		; FF FF FF 0B ; Subtract with carry (long,X) $0BFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $F3.b,X		; F6 F3 ; Increment memory $F3.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc ($F8.b),Y		; F1 F8 ; Subtract with carry ($F8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $0C08.w,X		; FD 08 0C ; Subtract with carry $0C08.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $030F.w		; 0E 0F 03 ; Arithmetic shift left $030F.w [Flags: NCZ]
	inc $F5F9.w,X		; FE F9 F5 ; Increment memory $F5F9.w,X [Reads: X Index] [Flags: NZ]
	sbc ($F5.b)		; F2 F5 ; Subtract with carry (indirect) ($F5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F9.b],Y		; F7 F9 ; Subtract with carry (long indexed) [$F9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $090B.w		; 0E 0B 09 ; Arithmetic shift left $090B.w [Flags: NCZ]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $FD02.w,X		; FD 02 FD ; Subtract with carry $FD02.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pea $F8F0.w		; F4 F0 F8 ; Push absolute address $F8F0.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	tsb $0810.w		; 0C 10 08 ; Test and set bits $0810.w [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0CFCFF.l,X		; FF FF FC 0C ; Subtract with carry (long,X) $0CFCFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $0AFE.w,X		; FE FE 0A ; Increment memory $0AFE.w,X [Reads: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc $F5.b,X		; F6 F5 ; Increment memory $F5.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $FBFB.w,X		; FE FB FB ; Increment memory $FBFB.w,X [Reads: X Index] [Flags: NZ]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $FE.b		; 02 FE ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02FD.w,X		; FD FD 02 ; Subtract with carry $02FD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $08F9.w,X		; FD F9 08 ; Subtract with carry $08F9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0DFFFF.l,X		; FF FF FF 0D ; Subtract with carry (long,X) $0DFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0E.b		; 06 0E ; Arithmetic shift left $0E.b [Reads: Direct Page] [Flags: NCZ]
	asl $FF08.w		; 0E 08 FF ; Arithmetic shift left $FF08.w [Flags: NCZ]
	sbc ($F2.b)		; F2 F2 ; Subtract with carry (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $03FB09.l,X		; FF 09 FB 03 ; Subtract with carry (long,X) $03FB09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $F4F5.w		; 0D F5 F4 ; Logical OR $F4F5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4F3F2.l,X		; FF F2 F3 F4 ; Subtract with carry (long,X) $F4F3F2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0C0D0E.l,X		; FF 0E 0D 0C ; Subtract with carry (long,X) $0C0D0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F4F3F2.l,X		; FF F2 F3 F4 ; Subtract with carry (long,X) $F4F3F2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0C0D0E.l,X		; FF 0E 0D 0C ; Subtract with carry (long,X) $0C0D0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$F7.b]		; 07 F7 ; OR accumulator with memory (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0A0E.w		; 0E 0E 0A ; Arithmetic shift left $0A0E.w [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $080B.w		; 0E 0B 08 ; Arithmetic shift left $080B.w [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $0C0C0E.l		; 0F 0E 0C 0C ; OR accumulator with memory (long) $0C0C0E.l [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $040A0E.l		; 0F 0E 0A 04 ; OR accumulator with memory (long) $040A0E.l [Writes: Accumulator] [Flags: NZ]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	sbc $FF0F.w,Y		; F9 0F FF ; Subtract with carry $FF0F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09FD.w,X		; FD FD 09 ; Subtract with carry $09FD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0A08.w		; 0C 08 0A ; Test and set bits $0A08.w [Reads: Accumulator] [Flags: Z]
	ora $F3.b,S		; 03 F3 ; OR accumulator with stack relative $F3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $05.b,X		; F6 05 ; Increment memory $05.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora $0D0D.w		; 0D 0D 0D ; Logical OR $0D0D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	cop $F5.b		; 02 F5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F7		; F0 F7 ; Branch if equal to $F0, $F7 [Flow: branch]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$F5.b],Y		; F7 F5 ; Subtract with carry (long indexed) [$F5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $FFF9.w		; 0C F9 FF ; Test and set bits $FFF9.w [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: NCZ]
	sbc $F2F5FB.l,X		; FF FB F5 F2 ; Subtract with carry (long,X) $F2F5FB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $FBFA.w,Y		; F9 FA FB ; Subtract with carry $FBFA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0E0A.w		; 0C 0A 0E ; Test and set bits $0E0A.w [Reads: Accumulator] [Flags: Z]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc ($F0.b,S),Y		; F3 F0 ; Subtract with carry (stack relative indirect indexed) ($F0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cpx $F4F1.w		; EC F1 F4 ; Compare $F4F1.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $0A05.w,Y		; F9 05 0A ; Subtract with carry $0A05.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $1410.w		; 0D 10 14 ; Logical OR $1410.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00070C.l		; 0F 0C 07 00 ; OR accumulator with memory (long) $00070C.l [Writes: Accumulator] [Flags: NZ]
	sbc $0808FF.l,X		; FF FF 08 08 ; Subtract with carry (long,X) $0808FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0A07.l,X		; FF 07 0A FF ; Subtract with carry (long,X) $FF0A07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FF0C08.l,X		; FF 08 0C FF ; Subtract with carry (long,X) $FF0C08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0702.w		; 0C 02 07 ; Test and set bits $0702.w [Reads: Accumulator] [Flags: Z]
	ora $14FF.w		; 0D FF 14 ; Logical OR $14FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $FF07.w		; 0E 07 FF ; Arithmetic shift left $FF07.w [Flags: NCZ]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FFFF.l,X		; FF FF FF F8 ; Subtract with carry (long,X) $F8FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $05FFFF.l,X		; FF FF FF 05 ; Subtract with carry (long,X) $05FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0B05.l,X		; FF 05 0B FF ; Subtract with carry (long,X) $FF0B05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0106.l,X		; FF 06 01 FF ; Subtract with carry (long,X) $FF0106.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0F0D.l,X		; FF 0D 0F FF ; Subtract with carry (long,X) $FF0F0D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0F0D.l,X		; FF 0D 0F FF ; Subtract with carry (long,X) $FF0F0D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0C0CFF.l,X		; FF FF 0C 0C ; Subtract with carry (long,X) $0C0CFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $FFFF.w		; 0C FF FF ; Test and set bits $FFFF.w [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	sbc $FF08FF.l,X		; FF FF 08 FF ; Subtract with carry (long,X) $FF08FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $040404.l,X		; FF 04 04 04 ; Subtract with carry (long,X) $040404.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF7F9.l,X		; FF F9 F7 FF ; Subtract with carry (long,X) $FFF7F9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora $FF10.w		; 0D 10 FF ; Logical OR $FF10.w with accumulator [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sed		; F8 ; Set decimal flag [Flags: D]
	inc $FBFA.w,X		; FE FA FB ; Increment memory $FBFA.w,X [Reads: X Index] [Flags: NZ]
	sbc $FAFBFF.l,X		; FF FF FB FA ; Subtract with carry (long,X) $FAFBFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0904FD.l,X		; FF FD 04 09 ; Subtract with carry (long,X) $0904FD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF040B.l,X		; FF 0B 04 FF ; Subtract with carry (long,X) $FF040B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FBFFFF.l,X		; FF FF FF FB ; Subtract with carry (long,X) $FBFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF8FB.l,X		; FF FB F8 FF ; Subtract with carry (long,X) $FFF8FB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF8FB.l,X		; FF FB F8 FF ; Subtract with carry (long,X) $FFF8FB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF110F.l,X		; FF 0F 11 FF ; Subtract with carry (long,X) $FF110F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF7F9.l,X		; FF F9 F7 FF ; Subtract with carry (long,X) $FFF7F9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F9FDFF.l,X		; FF FF FD F9 ; Subtract with carry (long,X) $F9FDFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFF.w,X		; FD FF FF ; Subtract with carry $FFFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $FFFF0B.l		; 0F 0B FF FF ; OR accumulator with memory (long) $FFFF0B.l [Writes: Accumulator] [Flags: NZ]
	.db $10, $FF		; 10 FF ; Branch if plus to $10, $FF [Flow: branch]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0A07.l,X		; FF 07 0A FF ; Subtract with carry (long,X) $FF0A07.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0702FF.l,X		; FF FF 02 07 ; Subtract with carry (long,X) $0702FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $14FF.w		; 0D FF 14 ; Logical OR $14FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $FF07.w		; 0E 07 FF ; Arithmetic shift left $FF07.w [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $0B.b		; 05 0B ; Logical OR $0B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0B05.l,X		; FF 05 0B FF ; Subtract with carry (long,X) $FF0B05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0106.l,X		; FF 06 01 FF ; Subtract with carry (long,X) $FF0106.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $110FFF.l,X		; FF FF 0F 11 ; Subtract with carry (long,X) $110FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF1210.l,X		; FF 10 12 FF ; Subtract with carry (long,X) $FF1210.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0D0E0A.l,X		; FF 0A 0E 0D ; Subtract with carry (long,X) $0D0E0A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0E0E09.l,X		; FF 09 0E 0E ; Subtract with carry (long,X) $0E0E09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF100D.l,X		; FF 0D 10 FF ; Subtract with carry (long,X) $FF100D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FF10.w		; 0D 10 FF ; Logical OR $FF10.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $FF100D.l,X		; FF 0D 10 FF ; Subtract with carry (long,X) $FF100D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora $09.b		; 05 09 ; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$07.b		; 09 07 ; Logical OR #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $080C.w		; 0C 0C 08 ; Test and set bits $080C.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: NCZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $10.b		; 05 10 ; Logical OR $10.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $070805.l,X		; FF 05 08 07 ; Subtract with carry (long,X) $070805.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FF.b		; 05 FF ; Logical OR $FF.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $06FFFF.l,X		; FF FF FF 06 ; Subtract with carry (long,X) $06FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0B.b		; 06 0B ; Arithmetic shift left $0B.b [Reads: Direct Page] [Flags: NCZ]
	ora [$04.b]		; 07 04 ; OR accumulator with memory (long) [$04.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0B0A.w		; 0C 0A 0B ; Test and set bits $0B0A.w [Reads: Accumulator] [Flags: Z]
	tsb $0605.w		; 0C 05 06 ; Test and set bits $0605.w [Reads: Accumulator] [Flags: Z]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $050AFF.l,X		; FF FF 0A 05 ; Subtract with carry (long,X) $050AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($0A.b,X)		; 01 0A ; Logical OR ($0A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $050505.l,X		; FF 05 05 05 ; Subtract with carry (long,X) $050505.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$FF.b]		; 07 FF ; OR accumulator with memory (long) [$FF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFF09.l,X		; FF 09 FF FF ; Subtract with carry (long,X) $FFFF09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0705.l,X		; FF 05 07 FF ; Subtract with carry (long,X) $FF0705.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: NCZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $F6F9.w,Y		; F9 F9 F6 ; Subtract with carry $F6F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $00.b,X		; F6 00 ; Increment memory $00.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $010000.l,X		; FF 00 00 01 ; Subtract with carry (long,X) $010000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $02FC08.l,X		; FF 08 FC 02 ; Subtract with carry (long,X) $02FC08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0909.w,X		; FD 09 09 ; Subtract with carry $0909.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$F6.b		; 09 F6 ; Logical OR #$F6.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $09.b		; 05 09 ; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($00F6.w,X)		; FC F6 00 ; Jump to subroutine indirect indexed ($00F6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $FC.b		; 05 FC ; Logical OR $FC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($F8FC.w,X)		; FC FC F8 ; Jump to subroutine indirect indexed ($F8FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F8FCFF.l,X		; FF FF FC F8 ; Subtract with carry (long,X) $F8FCFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr ($FCFC.w,X)		; FC FC FC ; Jump to subroutine indirect indexed ($FCFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($FBFB.w,X)		; FC FB FB ; Jump to subroutine indirect indexed ($FBFB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $FB.b,X		; F6 FB ; Increment memory $FB.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $FCFC.w,Y		; F9 FC FC ; Subtract with carry $FCFC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $090909.l,X		; FF 09 09 09 ; Subtract with carry (long,X) $090909.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFA.l,X		; FF FA FF FF ; Subtract with carry (long,X) $FFFFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFF60A.l,X		; FF 0A F6 FF ; Subtract with carry (long,X) $FFF60A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $01.b,X		; F6 01 ; Increment memory $01.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FEFFFF.l,X		; FF FF FF FE ; Subtract with carry (long,X) $FEFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FFFE.w,X		; FE FE FF ; Increment memory $FFFE.w,X [Reads: X Index] [Flags: NZ]
	inc $10FE.w,X		; FE FE 10 ; Increment memory $10FE.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($10.b),Y		; 11 10 ; OR accumulator with memory ($10.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	ora $FE.b		; 05 FE ; Logical OR $FE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $0907.w,X		; FD 07 09 ; Subtract with carry $0907.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $1B1915.l		; 0F 15 19 1B ; OR accumulator with memory (long) $1B1915.l [Writes: Accumulator] [Flags: NZ]
	ora $0D17.w,Y		; 19 17 0D ; OR accumulator with memory $0D17.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	inc $0302.w,X		; FE 02 03 ; Increment memory $0302.w,X [Reads: X Index] [Flags: NZ]
	tsb $0F0C.w		; 0C 0C 0F ; Test and set bits $0F0C.w [Reads: Accumulator] [Flags: Z]
	asl $1B.b,X		; 16 1B ; Arithmetic shift left $1B.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	inc $0302.w,X		; FE 02 03 ; Increment memory $0302.w,X [Reads: X Index] [Flags: NZ]
	tsb $0F0C.w		; 0C 0C 0F ; Test and set bits $0F0C.w [Reads: Accumulator] [Flags: Z]
	asl $1B.b,X		; 16 1B ; Arithmetic shift left $1B.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	jsr ($FBFD.w,X)		; FC FD FB ; Jump to subroutine indirect indexed ($FBFD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($18FD.w,X)		; FC FD 18 ; Jump to subroutine indirect indexed ($18FD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $181A.w,Y		; 19 1A 18 ; OR accumulator with memory $181A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $0D1A.w,Y		; 19 1A 0D ; OR accumulator with memory $0D1A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $0D0F.w		; 0E 0F 0D ; Arithmetic shift left $0D0F.w [Flags: NCZ]
	asl $0D0F.w		; 0E 0F 0D ; Arithmetic shift left $0D0F.w [Flags: NCZ]
	asl $0D0F.w		; 0E 0F 0D ; Arithmetic shift left $0D0F.w [Flags: NCZ]
	asl $FD0F.w		; 0E 0F FD ; Arithmetic shift left $FD0F.w [Flags: NCZ]
	sbc $1402.w,Y		; F9 02 14 ; Subtract with carry $1402.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A0F.w		; 0D 0F 0A ; Logical OR $0A0F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $800F.w		; 0D 0F 80 ; Logical OR $800F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $F9		; 80 F9 ; Branch always to $80, $F9 [Flow: branch]
	sbc $0AFDFE.l,X		; FF FE FD 0A ; Subtract with carry (long,X) $0AFDFE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc $0E03.w,X		; FE 03 0E ; Increment memory $0E03.w,X [Reads: X Index] [Flags: NZ]
	inc $0E03.w,X		; FE 03 0E ; Increment memory $0E03.w,X [Reads: X Index] [Flags: NZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	jsr ($06F8.w,X)		; FC F8 06 ; Jump to subroutine indirect indexed ($06F8.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $0E1A1A.l		; 0F 1A 1A 0E ; OR accumulator with memory (long) $0E1A1A.l [Writes: Accumulator] [Flags: NZ]
	asl $F9.b		; 06 F9 ; Arithmetic shift left $F9.b [Reads: Direct Page] [Flags: NCZ]
	sbc $1A16.w,Y		; F9 16 1A ; Subtract with carry $1A16.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	ora $0C.b		; 05 0C ; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $FB		; 10 FB ; Branch if plus to $10, $FB [Flow: branch]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	jsr ($FBFB.w,X)		; FC FB FB ; Jump to subroutine indirect indexed ($FBFB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FBFBFB.l,X		; FF FB FB FB ; Subtract with carry (long,X) $FBFBFB.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $1B1915.l		; 0F 15 19 1B ; OR accumulator with memory (long) $1B1915.l [Writes: Accumulator] [Flags: NZ]
	ora $F9FD.w		; 0D FD F9 ; Logical OR $F9FD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora ($80.b)		; 12 80 ; OR accumulator with memory (indirect) ($80.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	jsr ($04FB.w,X)		; FC FB 04 ; Jump to subroutine indirect indexed ($04FB.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $0F14.w		; 0E 14 0F ; Arithmetic shift left $0F14.w [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $0EF8.w,X		; FD F8 0E ; Subtract with carry $0EF8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $800F.w,X		; FD 0F 80 ; Subtract with carry $800F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	ora #$05.b		; 09 05 ; Logical OR #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $F5F7.w,X		; FD F7 F5 ; Subtract with carry $F5F7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F7.b),Y		; F1 F7 ; Subtract with carry ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($0B08.w,X)		; FC 08 0B ; Jump to subroutine indirect indexed ($0B08.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	asl $1914.w		; 0E 14 19 ; Arithmetic shift left $1914.w [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $0D1719.l,X		; 1F 19 17 0D ; Logical OR long $0D1719.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $00FF.w,X		; FE FF 00 ; Increment memory $00FF.w,X [Reads: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	asl $FFFE.w,X		; 1E FE FF ; Arithmetic shift left $FFFE.w,X [Reads: X Index] [Flags: NCZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	asl $8080.w,X		; 1E 80 80 ; Arithmetic shift left $8080.w,X [Reads: X Index] [Flags: NCZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	ora ($12.b,S),Y		; 13 12 ; OR accumulator (stack relative indirect indexed) ($12.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $000A.w		; 0E 0A 00 ; Arithmetic shift left $000A.w [Flags: NCZ]
	jsr ($F3F6.w,X)		; FC F6 F3 ; Jump to subroutine indirect indexed ($F3F6.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc ($F8.b),Y		; F1 F8 ; Subtract with carry ($F8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $1612.w		; 0C 12 16 ; Test and set bits $1612.w [Reads: Accumulator] [Flags: Z]
	ora [$03.b],Y		; 17 03 ; OR accumulator with memory (long indexed) [$03.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $F5F9.w,X		; FE F9 F5 ; Increment memory $F5F9.w,X [Reads: X Index] [Flags: NZ]
	sbc ($F5.b)		; F2 F5 ; Subtract with carry (indirect) ($F5.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$01.b],Y		; F7 01 ; Subtract with carry (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $131613.l		; 0F 13 16 13 ; OR accumulator with memory (long) $131613.l [Writes: Accumulator] [Flags: NZ]
	ora ($07.b),Y		; 11 07 ; OR accumulator with memory ($07.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$F6.b]		; 07 F6 ; OR accumulator with memory (long) [$F6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $12.b,X		; F6 12 ; Increment memory $12.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($FD.b)		; 12 FD ; OR accumulator with memory (indirect) ($FD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $FD.b		; 02 FD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$0A.b]		; 07 0A ; OR accumulator with memory (long) [$0A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $E8		; F0 E8 ; Branch if equal to $F0, $E8 [Flow: branch]
	cpx $1810.w		; EC 10 18 ; Compare $1810.w with X register [Reads: X Index] [Flags: NCZ]
	trb $80.b		; 14 80 ; Test and reset bits $80.b [Reads: Accumulator] [Flags: Z]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $FE		; 80 FE ; Branch always to $80, $FE [Flow: branch]
	inc $0AFE.w,X		; FE FE 0A ; Increment memory $0AFE.w,X [Reads: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($F6.b,X)		; 01 F6 ; Logical OR ($F6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $07.b,X		; F5 07 ; Subtract $07.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	ora $1606.w		; 0D 06 16 ; Logical OR $1606.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $08.b,X		; 16 08 ; Arithmetic shift left $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $FFF2F2.l,X		; FF F2 F2 FF ; Subtract with carry (long,X) $FFF2F2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$FB.b		; 09 FB ; Logical OR #$FB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $12.b,S		; 03 12 ; OR accumulator with stack relative $12.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $F5.b,X		; 15 F5 ; OR accumulator with memory $F5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	pea $8080.w		; F4 80 80 ; Push absolute address $8080.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	ora [$F7.b]		; 07 F7 ; OR accumulator with memory (long) [$F7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0E.b,X		; 16 0E ; Arithmetic shift left $0E.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $080B.w		; 0E 0B 08 ; Arithmetic shift left $080B.w [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$16.b],Y		; 17 16 ; OR accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora [$0E.b],Y		; 17 0E ; OR accumulator with memory (long indexed) [$0E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $800C.w		; 0C 0C 80 ; Test and set bits $800C.w [Reads: Accumulator] [Flags: Z]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	ora $100D.w		; 0D 0D 10 ; Logical OR $100D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $F5.b		; 02 F5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $F7		; F0 F7 ; Branch if equal to $F0, $F7 [Flow: branch]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$F5.b],Y		; F7 F5 ; Subtract with carry (long indexed) [$F5.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	ora ($0F.b),Y		; 11 0F ; OR accumulator with memory ($0F.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $FF03.w		; 0E 03 FF ; Arithmetic shift left $FF03.w [Flags: NCZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $F2.b,X		; F5 F2 ; Subtract $F2.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $03FA.w,Y		; F9 FA 03 ; Subtract with carry $03FA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $1612.w		; 0C 12 16 ; Test and set bits $1612.w [Reads: Accumulator] [Flags: Z]
	ora $FE.b,S		; 03 FE ; OR accumulator with stack relative $FE.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc ($F0.b,S),Y		; F3 F0 ; Subtract with carry (stack relative indirect indexed) ($F0.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cpx $F4F1.w		; EC F1 F4 ; Compare $F4F1.w with X register [Reads: X Index] [Flags: NCZ]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $15		; 10 15 ; Branch if plus to $10, $15 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1417.w		; 1C 17 14 ; Test and reset bits $1417.w [Reads: Accumulator] [Flags: Z]
	ora [$02.b]		; 07 02 ; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $0A.b,S		; 03 0A ; OR accumulator with stack relative $0A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: NCZ]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $76.b		; 00 76 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7A.b		; 00 7A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $92.b		; 00 92 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9A.b		; 00 9A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B2.b		; 00 B2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D4.b		; 00 D4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($10.b,X)		; 01 10 ; Logical OR ($10.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($2C.b,X)		; 01 2C ; Logical OR ($2C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3C.b,X)		; 01 3C ; Logical OR ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($53.b,X)		; 01 53 ; Logical OR ($53.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($6B.b,X)		; 01 6B ; Logical OR ($6B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($76.b,X)		; 01 76 ; Logical OR ($76.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($86.b,X)		; 01 86 ; Logical OR ($86.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($8C.b,X)		; 01 8C ; Logical OR ($8C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($92.b,X)		; 01 92 ; Logical OR ($92.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($98.b,X)		; 01 98 ; Logical OR ($98.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A4.b,X)		; 01 A4 ; Logical OR ($A4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A6.b,X)		; 01 A6 ; Logical OR ($A6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A8.b,X)		; 01 A8 ; Logical OR ($A8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($AC.b,X)		; 01 AC ; Logical OR ($AC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($BC.b,X)		; 01 BC ; Logical OR ($BC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D4.b,X)		; 01 D4 ; Logical OR ($D4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D5.b,X)		; 01 D5 ; Logical OR ($D5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D6.b,X)		; 01 D6 ; Logical OR ($D6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($DB.b,X)		; 01 DB ; Logical OR ($DB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($09.b,X)		; 01 09 ; Logical OR ($09.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $77.b		; 00 77 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2D.b		; 00 2D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $94.b		; 00 94 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B2.b		; 00 B2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DA.b		; 00 DA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($14.b,X)		; 01 14 ; Logical OR ($14.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($23.b,X)		; 01 23 ; Logical OR ($23.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3C.b,X)		; 01 3C ; Logical OR ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($59.b,X)		; 01 59 ; Logical OR ($59.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($6B.b,X)		; 01 6B ; Logical OR ($6B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7A.b,X)		; 01 7A ; Logical OR ($7A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($89.b,X)		; 01 89 ; Logical OR ($89.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($8F.b,X)		; 01 8F ; Logical OR ($8F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($92.b,X)		; 01 92 ; Logical OR ($92.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($9B.b,X)		; 01 9B ; Logical OR ($9B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A4.b,X)		; 01 A4 ; Logical OR ($A4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A6.b,X)		; 01 A6 ; Logical OR ($A6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A9.b,X)		; 01 A9 ; Logical OR ($A9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($B0.b,X)		; 01 B0 ; Logical OR ($B0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($BF.b,X)		; 01 BF ; Logical OR ($BF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D4.b,X)		; 01 D4 ; Logical OR ($D4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D5.b,X)		; 01 D5 ; Logical OR ($D5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D6.b,X)		; 01 D6 ; Logical OR ($D6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($E4.b,X)		; 01 E4 ; Logical OR ($E4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($12.b,X)		; 01 12 ; Logical OR ($12.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $78.b		; 00 78 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $36.b		; 00 36 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B2.b		; 00 B2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0C.b,X)		; 01 0C ; Logical OR ($0C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($26.b,X)		; 01 26 ; Logical OR ($26.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3C.b,X)		; 01 3C ; Logical OR ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($5F.b,X)		; 01 5F ; Logical OR ($5F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($6B.b,X)		; 01 6B ; Logical OR ($6B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($7E.b,X)		; 01 7E ; Logical OR ($7E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($86.b,X)		; 01 86 ; Logical OR ($86.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($8C.b,X)		; 01 8C ; Logical OR ($8C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($92.b,X)		; 01 92 ; Logical OR ($92.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($9E.b,X)		; 01 9E ; Logical OR ($9E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A4.b,X)		; 01 A4 ; Logical OR ($A4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A6.b,X)		; 01 A6 ; Logical OR ($A6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($AA.b,X)		; 01 AA ; Logical OR ($AA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($B4.b,X)		; 01 B4 ; Logical OR ($B4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($C2.b,X)		; 01 C2 ; Logical OR ($C2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D4.b,X)		; 01 D4 ; Logical OR ($D4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D5.b,X)		; 01 D5 ; Logical OR ($D5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D6.b,X)		; 01 D6 ; Logical OR ($D6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($ED.b,X)		; 01 ED ; Logical OR ($ED.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1B.b,X)		; 01 1B ; Logical OR ($1B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $69.b		; 00 69 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B2.b		; 00 B2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E6.b		; 00 E6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0E.b,X)		; 01 0E ; Logical OR ($0E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($1C.b,X)		; 01 1C ; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($29.b,X)		; 01 29 ; Logical OR ($29.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3C.b,X)		; 01 3C ; Logical OR ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($65.b,X)		; 01 65 ; Logical OR ($65.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($6B.b,X)		; 01 6B ; Logical OR ($6B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($82.b,X)		; 01 82 ; Logical OR ($82.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($89.b,X)		; 01 89 ; Logical OR ($89.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($8F.b,X)		; 01 8F ; Logical OR ($8F.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($92.b,X)		; 01 92 ; Logical OR ($92.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A1.b,X)		; 01 A1 ; Logical OR ($A1.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A4.b,X)		; 01 A4 ; Logical OR ($A4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A6.b,X)		; 01 A6 ; Logical OR ($A6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($AB.b,X)		; 01 AB ; Logical OR ($AB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($B8.b,X)		; 01 B8 ; Logical OR ($B8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($C5.b,X)		; 01 C5 ; Logical OR ($C5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D4.b,X)		; 01 D4 ; Logical OR ($D4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D5.b,X)		; 01 D5 ; Logical OR ($D5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D6.b,X)		; 01 D6 ; Logical OR ($D6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($F6.b,X)		; 01 F6 ; Logical OR ($F6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3D.b		; 00 3D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3D.b		; 00 3D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3D.b		; 00 3D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6A.b		; 00 6A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3D.b		; 00 3D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0814.w		; 0C 14 08 ; Test and set bits $0814.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0C04.w		; 0C 04 0C ; Test and set bits $0C04.w [Reads: Accumulator] [Flags: Z]
	tsb $1810.w		; 0C 10 18 ; Test and set bits $1810.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	trb $1008.w		; 1C 08 10 ; Test and reset bits $1008.w [Reads: Accumulator] [Flags: Z]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $10.b		; 04 10 ; Test and set bits $10.b [Reads: Accumulator] [Flags: Z]
	trb $001C.w		; 1C 1C 00 ; Test and reset bits $001C.w [Reads: Accumulator] [Flags: Z]
	trb $1800.w		; 1C 00 18 ; Test and reset bits $1800.w [Reads: Accumulator] [Flags: Z]
	trb $1C0C.w		; 1C 0C 1C ; Test and reset bits $1C0C.w [Reads: Accumulator] [Flags: Z]
	bit $1C.b		; 24 1C ; Test bits $1C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	trb $1C.b		; 14 1C ; Test and reset bits $1C.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	trb $1C.b		; 14 1C ; Test and reset bits $1C.b [Reads: Accumulator] [Flags: Z]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	jsr $140C.w		; 20 0C 14 ; Jump to subroutine at $140C.w [Writes: Stack Pointer] [Flow: call]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	jsr $0C14.w		; 20 14 0C ; Jump to subroutine at $0C14.w [Writes: Stack Pointer] [Flow: call]
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $0018.w		; 20 18 00 ; Jump to subroutine at $0018.w [Writes: Stack Pointer] [Flow: call]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $1C00.w		; 20 00 1C ; Jump to subroutine at $1C00.w [Writes: Stack Pointer] [Flow: call]
	bit $10.b		; 24 10 ; Test bits $10.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $0824.w		; 1C 24 08 ; Test and reset bits $0824.w [Reads: Accumulator] [Flags: Z]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	trb $24.b		; 14 24 ; Test and reset bits $24.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $1424.w		; 20 24 14 ; Jump to subroutine at $1424.w [Writes: Stack Pointer] [Flow: call]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $10.b		; 24 10 ; Test bits $10.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	trb $0C0C.w		; 1C 0C 0C ; Test and reset bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $A078.w		; 0C 78 A0 ; Test and set bits $A078.w [Reads: Accumulator] [Flags: Z]
	cpy #$A0.b		; C0 A0 ; Compare #$A0.b with Y register [Reads: Y Index] [Flags: NCZ]
	sty $A0.b		; 84 A0 ; Store Y register to $A0.b [Reads: Y Index]
	cpy $90A0.w		; CC A0 90 ; Compare $90A0.w with Y register [Reads: Y Index] [Flags: NCZ]
	ldy #$D8.b		; A0 D8 ; Load #$D8.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$9C.b		; A0 9C ; Load #$9C.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$E4.b		; A0 E4 ; Load #$E4.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$A8.b		; A0 A8 ; Load #$A8.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$F0.b		; A0 F0 ; Load #$F0.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$B4.b		; A0 B4 ; Load #$B4.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$FC.b		; A0 FC ; Load #$FC.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$90.b		; A0 90 ; Load #$90.b into Y register [Writes: Y Index] [Flags: NZ]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1000.w		; 20 00 10 ; Jump to subroutine at $1000.w [Writes: Stack Pointer] [Flow: call]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	jsr $2322.w		; 20 22 23 ; Jump to subroutine at $2322.w [Writes: Stack Pointer] [Flow: call]
	and $26.b		; 25 26 ; Logical AND $26.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $0B0B.w		; 0C 0B 0B ; Test and set bits $0B0B.w [Reads: Accumulator] [Flags: Z]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0004.w		; 0D 04 00 ; Logical OR $0004.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFD.l,X		; FF FD FF 00 ; Subtract with carry (long,X) $00FFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFD.l,X		; FF FD FF 00 ; Subtract with carry (long,X) $00FFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFD.l,X		; FF FD FF 00 ; Subtract with carry (long,X) $00FFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FFFD.l,X		; FF FD FF 00 ; Subtract with carry (long,X) $00FFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $32		; D0 32 ; Branch if not equal to $D0, $32 [Flow: branch]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$0C.b		; A0 0C ; Load #$0C.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $A15E.w,Y		; B9 5E A1 ; Load $A15E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $45.b		; 85 45 ; Store accumulator to $45.b [Reads: Accumulator]
	sta $44.b		; 85 44 ; Store accumulator to $44.b [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $0351.w		; AD 51 03 ; Load $0351.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	stz $73.b		; 64 73 ; Store zero to $73.b
.ACCU 16
	rep #$20		; C2 20
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $A126.w,X		; BD 26 A1 ; Load $A126.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $64.b		; 85 64 ; Store accumulator to $64.b [Reads: Accumulator]
	lda $0FB3.w		; AD B3 0F ; Load $0FB3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $A120.w,Y		; B9 20 A1 ; Load $A120.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0352.w		; 8D 52 03 ; Store accumulator to $0352.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$16.b		; C9 16 ; Compare #$16.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	ldy #$1F.b		; A0 1F ; Load #$1F.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $037D.w		; AD 7D 03 ; Load $037D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $82, $12, $02		; 82 12 02 ; Branch always long to $82, $12, $02 [Flow: branch]
	lda $03EF.w		; AD EF 03 ; Load $03EF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	ldy #$24.b		; A0 24 ; Load #$24.b into Y register [Writes: Y Index] [Flags: NZ]
	stz $02.b		; 64 02 ; Store zero to $02.b
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0323.w		; 8D 23 03 ; Store accumulator to $0323.w [Reads: Accumulator]
	.db $82, $01, $02		; 82 01 02 ; Branch always long to $82, $01, $02 [Flow: branch]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	ldy #$21.b		; A0 21 ; Load #$21.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0323.w		; 8D 23 03 ; Store accumulator to $0323.w [Reads: Accumulator]
	.db $82, $EC, $01		; 82 EC 01 ; Branch always long to $82, $EC, $01 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0351.w		; AD 51 03 ; Load $0351.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$0A.b		; A0 0A ; Load #$0A.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	ldy #$0A.b		; A0 0A ; Load #$0A.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	ldx $2F.b		; A6 2F ; Load $2F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $38		; F0 38 ; Branch if equal to $F0, $38 [Flow: branch]
	cpx #$06.b		; E0 06 ; Compare #$06.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $34		; F0 34 ; Branch if equal to $F0, $34 [Flow: branch]
	ldx $2E.b		; A6 2E ; Load $2E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $A131.w,X		; BD 31 A1 ; Load $A131.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$19.b		; A0 19 ; Load #$19.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $28		; F0 28 ; Branch if equal to $F0, $28 [Flow: branch]
	ldy #$1A.b		; A0 1A ; Load #$1A.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	lda $0376.w		; AD 76 03 ; Load $0376.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	ldy #$18.b		; A0 18 ; Load #$18.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $030A.w		; AD 0A 03 ; Load $030A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0D.b		; 29 0D ; Logical AND #$0D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0323.w		; 8D 23 03 ; Store accumulator to $0323.w [Reads: Accumulator]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
	stz $64.b		; 64 64 ; Store zero to $64.b
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
	ldy #$11.b		; A0 11 ; Load #$11.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $033C.w		; AD 3C 03 ; Load $033C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $033D.w		; 0D 3D 03 ; Logical OR $033D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $033E.w		; 0D 3E 03 ; Logical OR $033E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $033F.w		; 0D 3F 03 ; Logical OR $033F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	ldy #$13.b		; A0 13 ; Load #$13.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $02CC.w		; AD CC 02 ; Load $02CC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $032A.w		; AD 2A 03 ; Load $032A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$12.b		; A0 12 ; Load #$12.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $82, $45, $01		; 82 45 01 ; Branch always long to $82, $45, $01 [Flow: branch]
	lda $02DA.w		; AD DA 02 ; Load $02DA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	stz $02.b		; 64 02 ; Store zero to $02.b
	ldy #$1E.b		; A0 1E ; Load #$1E.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$1D.b		; A0 1D ; Load #$1D.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $EC		; 80 EC ; Branch always to $80, $EC [Flow: branch]
	lda $036B.w		; AD 6B 03 ; Load $036B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $030A.w		; AD 0A 03 ; Load $030A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$1B.b		; A0 1B ; Load #$1B.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $DC		; 80 DC ; Branch always to $80, $DC [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $4C		; F0 4C ; Branch if equal to $F0, $4C [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $44		; D0 44 ; Branch if not equal to $D0, $44 [Flow: branch]
	ldy #$13.b		; A0 13 ; Load #$13.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$18.b		; 29 18 ; Logical AND #$18.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $079635.l,X		; BF 35 96 07 ; Load long $079635.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $82, $05, $01		; 82 05 01 ; Branch always long to $82, $05, $01 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $034E.w		; AD 4E 03 ; Load $034E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
	stz $64.b		; 64 64 ; Store zero to $64.b
	.db $82, $82, $00		; 82 82 00 ; Branch always long to $82, $82, $00 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0360.w		; AD 60 03 ; Load $0360.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	ldy #$14.b		; A0 14 ; Load #$14.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $82, $D4, $00		; 82 D4 00 ; Branch always long to $82, $D4, $00 [Flow: branch]
	lda $5B.b		; A5 5B ; Load $5B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $27		; F0 27 ; Branch if equal to $F0, $27 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $A124.w		; AD 24 A1 ; Load $A124.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0352.w		; 8D 52 03 ; Store accumulator to $0352.w [Reads: Accumulator]
	lda $A125.w		; AD 25 A1 ; Load $A125.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0353.w		; 8D 53 03 ; Store accumulator to $0353.w [Reads: Accumulator]
	lda $5A.b		; A5 5A ; Load $5A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	lda $65.b		; A5 65 ; Load $65.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $65.b		; 85 65 ; Store accumulator to $65.b [Reads: Accumulator]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $82, $A9, $00		; 82 A9 00 ; Branch always long to $82, $A9, $00 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	jsr $AAC3.w		; 20 C3 AA ; Jump to subroutine at $AAC3.w [Writes: Stack Pointer] [Flow: call]
	cpx #$06.b		; E0 06 ; Compare #$06.b with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0323.w		; 8D 23 03 ; Store accumulator to $0323.w [Reads: Accumulator]
	ldy $A148.w,X		; BC 48 A1 ; Load Y register $A148.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $1D		; 90 1D ; Branch if carry clear to $90, $1D [Flow: branch]
	lda $0309.w		; AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $0309.w		; AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	ldy #$10.b		; A0 10 ; Load #$10.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $74, $00		; 82 74 00 ; Branch always long to $82, $74, $00 [Flow: branch]
	lda $030A.w		; AD 0A 03 ; Load $030A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $25		; 80 25 ; Branch always to $80, $25 [Flow: branch]
	lda $0377.w		; AD 77 03 ; Load $0377.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $1B		; 80 1B ; Branch always to $80, $1B [Flow: branch]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	jsr $AAC3.w		; 20 C3 AA ; Jump to subroutine at $AAC3.w [Writes: Stack Pointer] [Flow: call]
	ldy $A13A.w,X		; BC 3A A1 ; Load Y register $A13A.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	jsr $AAC3.w		; 20 C3 AA ; Jump to subroutine at $AAC3.w [Writes: Stack Pointer] [Flow: call]
	ldy $A142.w,X		; BC 42 A1 ; Load Y register $A142.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $80, $46		; 80 46 ; Branch always to $80, $46 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldy #$15.b		; A0 15 ; Load #$15.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	cmp #$1E.b		; C9 1E ; Compare #$1E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $031C.w		; AD 1C 03 ; Load $031C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	ldy #$27.b		; A0 27 ; Load #$27.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0A.b		; E9 0A ; Subtract #$0A.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $0354.w		; 8C 54 03 ; Store Y register to $0354.w [Reads: Y Index]
	cpy #$05.b		; C0 05 ; Compare #$05.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $64.b		; A5 64 ; Load $64.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $035D.w		; 8D 5D 03 ; Store accumulator to $035D.w [Reads: Accumulator]
	lda $65.b		; A5 65 ; Load $65.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $035E.w		; 8D 5E 03 ; Store accumulator to $035E.w [Reads: Accumulator]
	stz $03.b		; 64 03 ; Store zero to $03.b
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $A070.w,X		; BD 70 A0 ; Load $A070.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $A030.w,X		; BD 30 A0 ; Load $A030.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $9EF0.w,Y		; B9 F0 9E ; Load $9EF0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $9CF1.w,Y		; B9 F1 9C ; Load $9CF1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda #$0E00.w		; A9 00 0E ; Load #$0E00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0346.w		; [PATTERN: Memory clearing operation] 8D 46 03 ; Store accumulator to $0346.w [Reads: Accumulator]
	lda $0ABD.w		; AD BD 0A ; Load $0ABD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0346.w		; 9C 46 03 ; Store zero to $0346.w
	stz $0102.w		; 9C 02 01 ; Store zero to $0102.w
	stz $0104.w		; 9C 04 01 ; Store zero to $0104.w
	ldx #$000C.w		; A2 0C 00 ; Load #$000C.w into X register [Writes: X Index] [Flags: NZ]
	lda $0354.w		; AD 54 03 ; Load $0354.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $A150.w,X		; DD 50 A1 ; Compare accumulator $A150.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F1		; 10 F1 ; Branch if plus to $10, $F1 [Flow: branch]
	.db $82, $2D, $01		; 82 2D 01 ; Branch always long to $82, $2D, $01 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $74.b		; 65 74 ; Add $74.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $76.b		; A5 76 ; Load $76.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $A038.w,X		; 7D 38 A0 ; Add $A038.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	ldy $74.b		; A4 74 ; Load $74.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $89F9.w,Y		; B9 F9 89 ; Load $89F9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $7D, $00		; 82 7D 00 ; Branch always long to $82, $7D, $00 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0102.w		; 8D 02 01 ; Store accumulator to $0102.w [Reads: Accumulator]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $A108.w,X		; BD 08 A1 ; Load $A108.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldy $04.b		; A4 04 ; Load $04.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($0A.b),Y		; B1 0A ; Load accumulator ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0352.w		; 6D 52 03 ; Add $0352.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $74.b		; A4 74 ; Load $74.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $25.b		; A5 25 ; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda $92ED.w,Y		; B9 ED 92 ; Load $92ED.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0F.b		; E5 0F ; Subtract $0F.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0801.w,X		; 9D 01 08 ; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	lda $9369.w,Y		; B9 69 93 ; Load $9369.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $89F9.w,Y		; B9 F9 89 ; Load $89F9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $838C.w,Y		; B9 8C 83 ; Load $838C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$C000.w		; 29 00 C0 ; Logical AND #$C000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $64.b		; 05 64 ; Logical OR $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0346.w		; 0D 46 03 ; Logical OR $0346.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0004.w		; 09 04 00 ; Logical OR #$0004.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0A20.w,X		; BD 20 0A ; Load $0A20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	ldy $74.b		; A4 74 ; Load $74.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $8A75.w,Y		; B9 75 8A ; Load $8A75.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $7D, $00		; 82 7D 00 ; Branch always long to $82, $7D, $00 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0104.w		; 8D 04 01 ; Store accumulator to $0104.w [Reads: Accumulator]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $A10C.w,X		; BD 0C A1 ; Load $A10C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldy $04.b		; A4 04 ; Load $04.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($0A.b),Y		; B1 0A ; Load accumulator ($0A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0352.w		; 6D 52 03 ; Add $0352.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $74.b		; A4 74 ; Load $74.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $25.b		; A5 25 ; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda $93E5.w,Y		; B9 E5 93 ; Load $93E5.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0F.b		; E5 0F ; Subtract $0F.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0801.w,X		; 9D 01 08 ; Store accumulator to $0801.w,X [Reads: Accumulator, X Index]
	lda $9461.w,Y		; B9 61 94 ; Load $9461.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $8A75.w,Y		; B9 75 8A ; Load $8A75.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $838C.w,Y		; B9 8C 83 ; Load $838C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$C000.w		; 29 00 C0 ; Logical AND #$C000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $64.b		; 05 64 ; Logical OR $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0346.w		; 0D 46 03 ; Logical OR $0346.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0014.w		; 09 14 00 ; Logical OR #$0014.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0A20.w,X		; BD 20 0A ; Load $0A20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	lda $0309.w		; AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0004.w		; 29 04 00 ; Logical AND #$0004.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $ADB6.w		; 20 B6 AD ; Jump to subroutine at $ADB6.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $5F		; 80 5F ; Branch always to $80, $5F [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	cmp #$0009.w		; C9 09 00 ; Compare #$0009.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $41		; F0 41 ; Branch if equal to $F0, $41 [Flow: branch]
	cmp #$000A.w		; C9 0A 00 ; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	cmp #$0003.w		; C9 03 00 ; Compare #$0003.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	cmp #$001E.w		; C9 1E 00 ; Compare #$001E.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda $03EF.w		; AD EF 03 ; Load $03EF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0360.w		; 0D 60 03 ; Logical OR $0360.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0040.w		; 29 40 00 ; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$003D.w		; 29 3D 00 ; Logical AND #$003D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0093.w		; 29 93 00 ; Logical AND #$0093.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0080.w		; 29 80 00 ; Logical AND #$0080.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $AB6E.w		; 20 6E AB ; Jump to subroutine at $AB6E.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $43, $01		; 82 43 01 ; Branch always long to $82, $43, $01 [Flow: branch]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $25.b		; A5 25 ; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8EEF.w,Y		; 79 EF 8E ; Add $8EEF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0B.b		; E5 0B ; Subtract $0B.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $90EE.w,Y		; 79 EE 90 ; Add $90EE.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $3D.b		; A5 3D ; Load $3D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $98F3.w,Y		; B9 F3 98 ; Load $98F3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $44.b		; [PATTERN: Memory clearing operation] 85 44 ; Store accumulator to $44.b [Reads: Accumulator]
	lda $9AF2.w,Y		; B9 F2 9A ; Load $9AF2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $45.b		; 85 45 ; Store accumulator to $45.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	stz $0F.b		; 64 0F ; Store zero to $0F.b
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	ldy $0307.w		; AC 07 03 ; Load $0307.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $A12E.w,Y		; B9 2E A1 ; Load $A12E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $0303.w		; AD 03 03 ; Load $0303.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	stz $06.b		; 64 06 ; Store zero to $06.b
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $A110.w,X		; BD 10 A1 ; Load $A110.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($74.b),Y		; B1 74 ; Load accumulator ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0352.w		; 6D 52 03 ; Add $0352.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $ACD5.w		; 20 D5 AC ; Jump to subroutine at $ACD5.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $839B.w,Y		; B9 9B 83 ; Load $839B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $69		; F0 69 ; Branch if equal to $F0, $69 [Flow: branch]
	and #$CFFF.w		; 29 FF CF ; Logical AND #$CFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $64.b		; 05 64 ; Logical OR $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	and #$0E00.w		; 29 00 0E ; Logical AND #$0E00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0200.w		; C9 00 02 ; Compare #$0200.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	lda $0346.w		; AD 46 03 ; Load $0346.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0802.w,X		; BD 02 08 ; Load $0802.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$F1FF.w		; 29 FF F1 ; Logical AND #$F1FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0600.w		; 09 00 06 ; Logical OR #$0600.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $0802.w,X		; BD 02 08 ; Load $0802.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$F1FF.w		; 29 FF F1 ; Logical AND #$F1FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $74.b		; E5 74 ; Subtract $74.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $65, $FF		; 82 65 FF ; Branch always long to $82, $65, $FF [Flow: branch]
.INDEX 8
	sep #$10		; E2 10
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EF35A.l		; AF 5A F3 7E ; Load long $7EF35A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $ABE6.w		; 20 E6 AB ; Jump to subroutine at $ABE6.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $BB, $00		; 82 BB 00 ; Branch always long to $82, $BB, $00 [Flow: branch]
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $25.b		; A5 25 ; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $94DD.w,Y		; 79 DD 94 ; Add $94DD.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0B.b		; E5 0B ; Subtract $0B.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $96DC.w,Y		; 79 DC 96 ; Add $96DC.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $96DC.w,Y		; B9 DC 96 ; Load $96DC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $AFC0.w		; 20 C0 AF ; Jump to subroutine at $AFC0.w [Writes: Stack Pointer] [Flow: call]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	lda $0347.w		; AD 47 03 ; Load $0347.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	stz $06.b		; 64 06 ; Store zero to $06.b
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $A118.w,X		; BD 18 A1 ; Load $A118.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($74.b),Y		; B1 74 ; Load accumulator ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0352.w		; 6D 52 03 ; Add $0352.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	stz $74.b		; 64 74 ; Store zero to $74.b
	lda $8563.w,Y		; B9 63 85 ; Load $8563.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	and #$C1FF.w		; 29 FF C1 ; Logical AND #$C1FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $64.b		; 05 64 ; Logical OR $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $03FA.w		; 0D FA 03 ; Logical OR $03FA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0B.b		; A5 0B ; Load $0B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $AD		; D0 AD ; Branch if not equal to $D0, $AD [Flow: branch]
.INDEX 8
	sep #$10		; E2 10
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $4B.b		; A5 4B ; Load $4B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $E9, $00		; 82 E9 00 ; Branch always long to $82, $E9, $00 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$16.b		; C9 16 ; Compare #$16.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lda $0354.w		; AD 54 03 ; Load $0354.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $0351.w		; AD 51 03 ; Load $0351.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $AED1.w		; 20 D1 AE ; Jump to subroutine at $AED1.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $1F		; 80 1F ; Branch always to $80, $1F [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $5B.b		; A5 5B ; Load $5B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $5A.b		; A5 5A ; Load $5A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jsr $AE3B.w		; 20 3B AE ; Jump to subroutine at $AE3B.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $B0, $00		; 82 B0 00 ; Branch always long to $82, $B0, $00 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $0A.b		; 84 0A ; Store Y register to $0A.b [Reads: Y Index]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	lda $0323.w		; AD 23 03 ; Load $0323.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $98DB.w,Y		; B9 DB 98 ; Load $98DB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $C4		; D0 C4 ; Branch if not equal to $D0, $C4 [Flow: branch]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $98DB.w,Y		; 79 DB 98 ; Add $98DB.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $98E7.w,Y		; 79 E7 98 ; Add $98E7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $A11C.w,X		; BD 1C A1 ; Load $A11C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($74.b),Y		; B1 74 ; Load accumulator ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0352.w		; 6D 52 03 ; Add $0352.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $85CF.w,Y		; B9 CF 85 ; Load $85CF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$CFFF.w		; 29 FF CF ; Logical AND #$CFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $035D.w		; 0D 5D 03 ; Logical OR $035D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0806.w,X		; 9D 06 08 ; Store accumulator to $0806.w,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0800.w		; 69 00 08 ; Add #$0800.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0804.w,X		; 9D 04 08 ; Store accumulator to $0804.w,X [Reads: Accumulator, X Index]
	lda $0346.w		; AD 46 03 ; Load $0346.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0802.w,X		; BD 02 08 ; Load $0802.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$F1FF.w		; 29 FF F1 ; Logical AND #$F1FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0600.w		; 09 00 06 ; Logical OR #$0600.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda $0806.w,X		; BD 06 08 ; Load $0806.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$F1FF.w		; 29 FF F1 ; Logical AND #$F1FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0600.w		; 09 00 06 ; Logical OR #$0600.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0806.w,X		; 9D 06 08 ; Store accumulator to $0806.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $0A20.w,X		; 9E 20 0A ; Store zero to $0A20.w,X [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $A114.w,X		; BD 14 A1 ; Load $A114.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	ldy $04.b		; A4 04 ; Load $04.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($74.b),Y		; B1 74 ; Load accumulator ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0352.w		; 6D 52 03 ; Add $0352.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $85FB.w,Y		; B9 FB 85 ; Load $85FB.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0100.w		; 8D 00 01 ; Store accumulator to $0100.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $4B.b		; A5 4B ; Load $4B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $9C, $00		; 82 9C 00 ; Branch always long to $82, $9C, $00 [Flow: branch]
	lda $25.b		; A5 25 ; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8000.w,Y		; 79 00 80 ; Add $8000.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0F.b		; E5 0F ; Subtract $0F.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8001.w,Y		; 79 01 80 ; Add $8001.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $8002.w,Y		; B9 02 80 ; Load $8002.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	and #$F000.w		; 29 00 F0 ; Logical AND #$F000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$F000.w		; C9 00 F0 ; Compare #$F000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	ora $64.b		; 05 64 ; Logical OR $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0346.w		; 0D 46 03 ; Logical OR $0346.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	stz $02.b		; 64 02 ; Store zero to $02.b
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00F8.w		; C9 F8 00 ; Compare #$00F8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0A20.w,X		; BD 20 0A ; Load $0A20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$0002.w		; 09 02 00 ; Logical OR #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F00.w		; 29 00 0F ; Logical AND #$0F00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0F00.w		; C9 00 0F ; Compare #$0F00.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2B		; F0 2B ; Branch if equal to $F0, $2B [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $64.b		; 05 64 ; Logical OR $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0346.w		; 0D 46 03 ; Logical OR $0346.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0002.w		; 09 02 00 ; Logical OR #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0806.w,X		; 9D 06 08 ; Store accumulator to $0806.w,X [Reads: Accumulator, X Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0E.b		; E5 0E ; Subtract $0E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0800.w		; 69 00 08 ; Add #$0800.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0804.w,X		; 9D 04 08 ; Store accumulator to $0804.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0A21.w,X		; BD 21 0A ; Load $0A21.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0002.w		; 09 02 00 ; Logical OR #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A21.w,X		; 9D 21 0A ; Store accumulator to $0A21.w,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $37		; 90 37 ; Branch if carry clear to $90, $37 [Flow: branch]
	cmp #$00FC.w		; C9 FC 00 ; Compare #$00FC.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $32		; B0 32 ; Branch if carry set to $B0, $32 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $28		; 90 28 ; Branch if carry clear to $90, $28 [Flow: branch]
	cmp #$00E0.w		; C9 E0 00 ; Compare #$00E0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $23		; B0 23 ; Branch if carry set to $B0, $23 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $031F.w		; 8D 1F 03 ; Store accumulator to $031F.w [Reads: Accumulator]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $4B.b		; A5 4B ; Load $4B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $4C		; F0 4C ; Branch if equal to $F0, $4C [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0352.w		; AD 52 03 ; Load $0352.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$0101.w		; A9 01 01 ; Load #$0101.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	sta $0A22.w,X		; 9D 22 0A ; Store accumulator to $0A22.w,X [Reads: Accumulator, X Index]
	sta $0A24.w,X		; 9D 24 0A ; Store accumulator to $0A24.w,X [Reads: Accumulator, X Index]
	sta $0A26.w,X		; 9D 26 0A ; Store accumulator to $0A26.w,X [Reads: Accumulator, X Index]
	sta $0A28.w,X		; 9D 28 0A ; Store accumulator to $0A28.w,X [Reads: Accumulator, X Index]
	sta $0A2A.w,X		; 9D 2A 0A ; Store accumulator to $0A2A.w,X [Reads: Accumulator, X Index]
	lda $4B.b		; A5 4B ; Load $4B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$000C.w		; C9 0C 00 ; Compare #$000C.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $A11C.w,X		; BD 1C A1 ; Load $A11C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($74.b),Y		; B1 74 ; Load accumulator ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0352.w		; 6D 52 03 ; Add $0352.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $0A20.w,X		; 9E 20 0A ; Store zero to $0A20.w,X [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$07.b		; A2 07 ; Load #$07.b into X register [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0E0E.w		; 0C 0E 0E ; Test and set bits $0E0E.w [Reads: Accumulator] [Flags: Z]
	asl $000E.w		; 0E 0E 00 ; Arithmetic shift left $000E.w [Flags: NCZ]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $080A.w		; 0E 0A 08 ; Arithmetic shift left $080A.w [Flags: NCZ]
	ora $0D08.w		; 0D 08 0D ; Logical OR $0D08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor ($40.b,X)		; 41 40 ; Exclusive OR accumulator with memory ($40.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($18.b,X)		; 41 18 ; Exclusive OR accumulator with memory ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $2419.w,Y		; 19 19 24 ; OR accumulator with memory $2419.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($25.b,X)		; 21 25 ; Logical AND ($25.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $22.b,S		; 23 22 ; AND accumulator with stack relative $22.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $2326.w		; 20 26 23 ; Jump to subroutine at $2326.w [Writes: Stack Pointer] [Flow: call]
	and $26.b		; 25 26 ; Logical AND $26.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $292A28.l		; 22 28 2A 29 ; Jump to subroutine long $292A28.l [Writes: Stack Pointer] [Flow: call]
	and #$2C.b		; 29 2C ; Logical AND #$2C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $C2.b		; 02 C2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $A4		; 30 A4 ; Branch if minus to $30, $A4 [Flow: branch]
	cop $B9.b		; 02 B9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($8A.b),Y		; F1 8A ; Subtract with carry ($8A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $4BF000.l,X		; FF 00 F0 4B ; Subtract with carry (long,X) $4BF000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $AB22.w,X		; BD 22 AB ; Load $AB22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $BC8A.w		; 0C 8A BC ; Test and set bits $BC8A.w [Reads: Accumulator] [Flags: Z]
	cpy $C9AA.w		; CC AA C9 ; Compare $C9AA.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $9000.w,X		; 1D 00 90 ; OR accumulator with memory $9000.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $AD.b		; 24 AD ; Test bits $AD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$8A.b		; 09 8A ; Logical OR #$8A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$1D.b		; E9 1D ; Subtract #$1D.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $AB18.w,X		; BC 18 AB ; Load Y register $AB18.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $0109.w		; AD 09 01 ; Load $0109.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $8D0A05.l,X		; FF 05 0A 8D ; Subtract with carry (long,X) $8D0A05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda $0107.w		; AD 07 01 ; Load $0107.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $8D0A05.l,X		; FF 05 0A 8D ; Subtract with carry (long,X) $8D0A05.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$01.b]		; 07 01 ; OR accumulator with memory (long) [$01.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $080A.w		; 0E 0A 08 ; Arithmetic shift left $080A.w [Flags: NCZ]
	ora $0D08.w		; 0D 08 0D ; Logical OR $0D08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	ldy $02.b		; A4 02 ; Load $02.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $8CF0.w,Y		; B9 F0 8C ; Load $8CF0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $4C		; F0 4C ; Branch if equal to $F0, $4C [Flow: branch]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $ABCA.w,X		; BC CA AB ; Load Y register $ABCA.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	and #$00F8.w		; 29 F8 00 ; Logical AND #$00F8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0005.w		; 29 05 00 ; Logical AND #$0005.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $ABDC.w,X		; BC DC AB ; Load Y register $ABDC.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $0109.w		; AD 09 01 ; Load $0109.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0109.w		; 8D 09 01 ; Store accumulator to $0109.w [Reads: Accumulator]
	and #$0007.w		; 29 07 00 ; Logical AND #$0007.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $0108.w		; AD 08 01 ; Load $0108.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0108.w		; 8D 08 01 ; Store accumulator to $0108.w [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $2F6A.w,X		; 3E 6A 2F ; Rotate left $2F6A.w,X [Reads: X Index] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and $2A056A.l		; 2F 6A 05 2A ; AND accumulator with memory (long) $2A056A.l [Writes: Accumulator] [Flags: NZ]
	and $2A3E2A.l		; 2F 2A 3E 2A ; AND accumulator with memory (long) $2A3E2A.l [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $AA3EFF.l,X		; FF FF 3E AA ; Subtract with carry (long,X) $AA3EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $AA2FAA.l		; 2F AA 2F AA ; AND accumulator with memory (long) $AA2FAA.l [Writes: Accumulator] [Flags: NZ]
	ora $AA.b		; 05 AA ; Logical OR $AA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $EA3EEA.l		; 2F EA 3E EA ; AND accumulator with memory (long) $EA3EEA.l [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2A3EFF.l,X		; FF FF 3E 2A ; Subtract with carry (long,X) $2A3EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $2A3F2A.l,X		; 3F 2A 3F 2A ; AND accumulator with memory (long,X) $2A3F2A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $2A.b		; 05 2A ; Logical OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $AA3EAA.l,X		; 3F AA 3E AA ; AND accumulator with memory (long,X) $AA3EAA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $6A3EFF.l,X		; FF FF 3E 6A ; Subtract with carry (long,X) $6A3EFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $6A3F6A.l,X		; 3F 6A 3F 6A ; AND accumulator with memory (long,X) $6A3F6A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $6A.b		; 05 6A ; Logical OR $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $EA3EEA.l,X		; 3F EA 3E EA ; AND accumulator with memory (long,X) $EA3EEA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc ($F1.b,S),Y		; F3 F1 ; Subtract with carry (stack relative indirect indexed) ($F1.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc ($FB.b,S),Y		; F3 FB ; Subtract with carry (stack relative indirect indexed) ($FB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $16FFFF.l,X		; FF FF FF 16 ; Subtract with carry (long,X) $16FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1B23.w,X		; 1D 23 1B ; OR accumulator with memory $1B23.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1A14.w		; 0C 14 1A ; Test and set bits $1A14.w [Reads: Accumulator] [Flags: Z]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $1A14.w		; 0C 14 1A ; Test and set bits $1A14.w [Reads: Accumulator] [Flags: Z]
	sbc $0FFFFF.l,X		; FF FF FF 0F ; Subtract with carry (long,X) $0FFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $FF08.w		; 0D 08 FF ; Logical OR $FF08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc $F2.b,X		; F6 F2 ; Increment memory $F2.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $FAFFFF.l,X		; FF FF FF FA ; Subtract with carry (long,X) $FAFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0801.w,X		; FD 01 08 ; Subtract with carry $0801.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $15		; 10 15 ; Branch if plus to $10, $15 [Flow: branch]
	sbc $F5FFFF.l,X		; FF FF FF F5 ; Subtract with carry (long,X) $F5FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($EE.b),Y		; F1 EE ; Subtract with carry ($EE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $FFFFF4.l		; EF F4 FF FF ; Subtract with carry (long) $FFFFF4.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $1A1713.l,X		; FF 13 17 1A ; Subtract with carry (long,X) $1A1713.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $1419.w		; 20 19 14 ; Jump to subroutine at $1419.w [Writes: Stack Pointer] [Flow: call]
	sbc $480AA5.l,X		; FF A5 0A 48 ; Subtract with carry (long,X) $480AA5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $9B, $00		; 82 9B 00 ; Branch always long to $82, $9B, $00 [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F4		; F0 F4 ; Branch if equal to $F0, $F4 [Flow: branch]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
	cmp #$0001.w		; C9 01 00 ; Compare #$0001.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $EA		; F0 EA ; Branch if equal to $F0, $EA [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0080.w		; 29 80 00 ; Logical AND #$0080.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $E3		; F0 E3 ; Branch if equal to $F0, $E3 [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0009.w		; C9 09 00 ; Compare #$0009.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $D9		; B0 D9 ; Branch if carry set to $B0, $D9 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $AC45.w,Y		; B9 45 AC ; Load $AC45.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $59		; F0 59 ; Branch if equal to $F0, $59 [Flow: branch]
	and #$CFFF.w		; 29 FF CF ; Logical AND #$CFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $64.b		; 05 64 ; Logical OR $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda $0346.w		; AD 46 03 ; Load $0346.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0802.w,X		; BD 02 08 ; Load $0802.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$F1FF.w		; 29 FF F1 ; Logical AND #$F1FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0600.w		; 09 00 06 ; Logical OR #$0600.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $AC8D.w,Y		; B9 8D AC ; Load $AC8D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $ACB1.w,Y		; B9 B1 AC ; Load $ACB1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $AC8D.w,Y		; B9 8D AC ; Load $AC8D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $44.b		; 85 44 ; Store accumulator to $44.b [Reads: Accumulator]
	lda $ACB1.w,Y		; B9 B1 AC ; Load $ACB1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $45.b		; 85 45 ; Store accumulator to $45.b [Reads: Accumulator]
	jsr $AFC0.w		; 20 C0 AF ; Jump to subroutine at $AFC0.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0004.w		; E9 04 00 ; Subtract #$0004.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $03FA.w		; 0D FA 03 ; Logical OR $03FA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A20.w,X		; 9D 20 0A ; Store accumulator to $0A20.w,X [Reads: Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$FF26.w		; 09 26 FF ; Logical OR #$FF26.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FFFF.l,X		; FF FF FF 00 ; Subtract with carry (long,X) $00FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFF08.l,X		; FF 08 FF FF ; Subtract with carry (long,X) $FFFF08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0508.l,X		; FF 08 05 FF ; Subtract with carry (long,X) $FF0508.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $020508.l,X		; FF 08 05 02 ; Subtract with carry (long,X) $020508.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFF0E.l,X		; FF 0E FF FF ; Subtract with carry (long,X) $FFFF0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF160E.l,X		; FF 0E 16 FF ; Subtract with carry (long,X) $FF160E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $1E160E.l,X		; FF 0E 16 1E ; Subtract with carry (long,X) $1E160E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E20400.l,X		; FF 00 04 E2 ; Subtract with carry (long,X) $E20400.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $AAC3.w		; 20 C3 AA ; Jump to subroutine at $AAC3.w [Writes: Stack Pointer] [Flow: call]
	lda $ADB4.w,X		; BD B4 AD ; Load $ADB4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $030E.w		; 6D 0E 03 ; Add $030E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda #$8D42.w		; A9 42 8D ; Load #$8D42.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$C201.w		; 09 01 C2 ; Logical OR #$C201.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	adc ($BD.b)		; 72 BD ; Add with carry (indirect) ($BD.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $A1		; 10 A1 ; Branch if plus to $10, $A1 [Flow: branch]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($74.b),Y		; B1 74 ; Load accumulator ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0352.w		; 6D 52 03 ; Add $0352.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	stz $06.b		; 64 06 ; Store zero to $06.b
.ACCU 8
	sep #$20		; E2 20
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AD94.w,Y		; 79 94 AD ; Add $AD94.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $ADA4.w,Y		; 79 A4 AD ; Add $ADA4.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $AD84.w,Y		; B9 84 AD ; Load $AD84.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $AD82.w,Y		; B9 82 AD ; Load $AD82.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$CFFF.w		; 29 FF CF ; Logical AND #$CFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $64.b		; 05 64 ; Logical OR $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	stz $0A20.w,X		; 9E 20 0A ; Store zero to $0A20.w,X [Reads: X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $B7		; D0 B7 ; Branch if not equal to $D0, $B7 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $A0.b		; 04 A0 ; Test and set bits $A0.b [Reads: Accumulator] [Flags: Z]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($38.b),Y		; 51 38 ; Exclusive OR accumulator with memory ($38.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc #$380C.w		; E9 0C 38 ; Subtract #$380C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b		; E5 20 ; Subtract $20.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$B0F0.w		; C9 F0 B0 ; Compare #$B0F0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $30C9.w		; 0C C9 30 ; Test and set bits $30C9.w [Reads: Accumulator] [Flags: Z]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldy #$C904.w		; A0 04 C9 ; Load #$C904.w into Y register [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldy #$9808.w		; A0 08 98 ; Load #$9808.w into Y register [Writes: Y Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $AE38.w,X		; BD 38 AE ; Load $AE38.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $51.b		; A5 51 ; Load $51.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$380C.w		; E9 0C 38 ; Subtract #$380C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$851D.w		; 69 1D 85 ; Add #$851D.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora [$A5.b]		; 07 A5 ; OR accumulator with memory (long) [$A5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $04.b		; 64 04 ; Store zero to $04.b
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $A11C.w,X		; BD 1C A1 ; Load $A11C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($74.b),Y		; B1 74 ; Load accumulator ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0352.w		; 6D 52 03 ; Add $0352.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $85CF.w,Y		; B9 CF 85 ; Load $85CF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	and #$CFFF.w		; 29 FF CF ; Logical AND #$CFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $035D.w		; 0D 5D 03 ; Logical OR $035D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	stz $0A20.w,X		; 9E 20 0A ; Store zero to $0A20.w,X [Reads: X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
.INDEX 8
	sep #$10		; E2 10
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $0356.w		; AD 56 03 ; Load $0356.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0356.w		; 8D 56 03 ; Store accumulator to $0356.w [Reads: Accumulator]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	stz $0356.w		; 9C 56 03 ; Store zero to $0356.w
	lda $0355.w		; AD 55 03 ; Load $0355.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0355.w		; 8D 55 03 ; Store accumulator to $0355.w [Reads: Accumulator]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0355.w		; 9C 55 03 ; Store zero to $0355.w
	lda $7EF35A.l		; AF 5A F3 7E ; Load long $7EF35A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0323.w		; AD 23 03 ; Load $0323.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $AECD.w,Y		; 79 CD AE ; Add $AECD.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $98DB.w,Y		; 79 DB 98 ; Add $98DB.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $98E7.w,Y		; 79 E7 98 ; Add $98E7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0355.w		; AD 55 03 ; Load $0355.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $8D.b		; 85 8D ; Store accumulator to $8D.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $A11C.w,X		; BD 1C A1 ; Load $A11C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $A11D.w,X		; BD 1D A1 ; Load $A11D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
	ldy $04.b		; A4 04 ; Load $04.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($74.b),Y		; B1 74 ; Load accumulator ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $0351.w		; AD 51 03 ; Load $0351.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $AECA.w,Y		; B9 CA AE ; Load $AECA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $0354.w		; CD 54 03 ; Compare $0354.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $8D.b		; 64 8D ; Store zero to $8D.b
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F1		; 10 F1 ; Branch if plus to $10, $F1 [Flow: branch]
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$03.b		; E9 03 ; Subtract #$03.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $8D.b		; 85 8D ; Store accumulator to $8D.b [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8D.b		; 65 8D ; Add $8D.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8D.b		; 65 8D ; Add $8D.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0352.w		; 6D 52 03 ; Add $0352.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $85CF.w,Y		; B9 CF 85 ; Load $85CF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$CFFF.w		; 29 FF CF ; Logical AND #$CFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $035D.w		; 0D 5D 03 ; Logical OR $035D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0802.w,X		; 9D 02 08 ; Store accumulator to $0802.w,X [Reads: Accumulator, X Index]
	lda $85D1.w,Y		; B9 D1 85 ; Load $85D1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $035D.w		; 0D 5D 03 ; Logical OR $035D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0806.w,X		; 9D 06 08 ; Store accumulator to $0806.w,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0800.w,X		; 9D 00 08 ; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0800.w		; 69 00 08 ; Add #$0800.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0804.w,X		; 9D 04 08 ; Store accumulator to $0804.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $0A20.w,X		; 9E 20 0A ; Store zero to $0A20.w,X [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $A6		; 30 A6 ; Branch if minus to $30, $A6 [Flow: branch]
	rol $54AD.w		; 2E AD 54 ; Rotate left $54AD.w [Flags: NCZ]
	ora $C9.b,S		; 03 C9 ; OR accumulator with stack relative $C9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $04D0.w,Y		; 19 D0 04 ; OR accumulator with memory $04D0.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $A131.w,X		; BD 31 A1 ; Load $A131.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $AF9D.w,X		; BD 9D AF ; Load $AF9D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03FA.w		; 8D FA 03 ; Store accumulator to $03FA.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $01FFFF.l,X		; FF FF FF 01 ; Subtract with carry (long,X) $01FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $81, $84		; 82 81 84 ; Branch always long to $82, $81, $84 [Flow: branch]
	sty $84.b		; 84 84 ; Store Y register to $84.b [Reads: Y Index]
	cop $0F.b		; 02 0F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0403.w		; 20 03 04 ; Jump to subroutine at $0403.w [Writes: Stack Pointer] [Flow: call]
	sty $01.b		; 84 01 ; Store Y register to $01.b [Reads: Y Index]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $A2.b		; 04 A2 ; Test and set bits $A2.b [Reads: Accumulator] [Flags: Z]
	sta $04.b,S		; 83 04 ; Store accumulator (stack relative) $04.b,S [Reads: Stack Pointer, Accumulator]
	cop $82.b		; 02 82 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $62, $82, $80		; 62 82 80 ; Push effective relative address $62, $82, $80 [Writes: Stack Pointer]
	.db $80, $85		; 80 85 ; Branch always to $80, $85 [Flow: branch]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $83.b		; 04 83 ; Test and set bits $83.b [Reads: Accumulator] [Flags: Z]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $A2, $A2		; 82 A2 A2 ; Branch always long to $82, $A2, $A2 [Flow: branch]
	lda $AA.b,S		; A3 AA ; Load accumulator (stack relative) $AA.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $A4.b,S		; A3 A4 ; Load accumulator (stack relative) $A4.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $82, $82, $83		; 82 82 83 ; Branch always long to $82, $82, $83 [Flow: branch]
	.db $82, $80, $82		; 82 80 82 ; Branch always long to $82, $80, $82 [Flow: branch]
	.db $82, $A5, $80		; 82 A5 80 ; Branch always long to $82, $A5, $80 [Flow: branch]
	ldy $82.b		; A4 82 ; Load $82.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta ($82.b,X)		; 81 82 ; Store accumulator ($82.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $82, $82, $81		; 82 82 81 ; Branch always long to $82, $82, $81 [Flow: branch]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora [$02.b]		; 07 02 ; OR accumulator with memory (long) [$02.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $22.b		; 02 22 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $0782.w		; 20 82 07 ; Jump to subroutine at $0782.w [Writes: Stack Pointer] [Flow: call]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	and ($05.b,X)		; 21 05 ; Logical AND ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $02.b,S		; 83 02 ; Store accumulator (stack relative) $02.b,S [Reads: Stack Pointer, Accumulator]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $03.b,S		; 83 03 ; Store accumulator (stack relative) $03.b,S [Reads: Stack Pointer, Accumulator]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $A0.b		; 04 A0 ; Test and set bits $A0.b [Reads: Accumulator] [Flags: Z]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $8B.b,S		; 03 8B ; OR accumulator with stack relative $8B.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stx $C2.b		; 86 C2 ; Store X register to $C2.b [Reads: X Index]
	.db $82, $81, $04		; 82 81 04 ; Branch always long to $82, $81, $04 [Flow: branch]
	.db $82, $21, $06		; 82 21 06 ; Branch always long to $82, $21, $06 [Flow: branch]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($87.b,X)		; 01 87 ; Logical OR ($87.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	sta $02.b,S		; 83 02 ; Store accumulator (stack relative) $02.b,S [Reads: Stack Pointer, Accumulator]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $21		; 80 21 ; Branch always to $80, $21 [Flow: branch]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $8081A1.l		; 8F A1 81 80 ; Store accumulator (long) $8081A1.l [Reads: Accumulator]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $A1		; 80 A1 ; Branch always to $80, $A1 [Flow: branch]
	.db $80, $81		; 80 81 ; Branch always to $80, $81 [Flow: branch]
	sta ($86.b,X)		; 81 86 ; Store accumulator ($86.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($82.b,X)		; 81 82 ; Store accumulator ($82.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $82, $80, $80		; 82 80 80 ; Branch always long to $82, $80, $80 [Flow: branch]
	sta $06.b,S		; 83 06 ; Store accumulator (stack relative) $06.b,S [Reads: Stack Pointer, Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $060C.w		; 0C 0C 06 ; Test and set bits $060C.w [Reads: Accumulator] [Flags: Z]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: NCZ]
	ldy $04.b		; A4 04 ; Load $04.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $82, $81, $83		; 82 81 83 ; Branch always long to $82, $81, $83 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	sta ($82.b,X)		; 81 82 ; Store accumulator ($82.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $82, $82, $83		; 82 82 83 ; Branch always long to $82, $82, $83 [Flow: branch]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	sta ($82.b,X)		; 81 82 ; Store accumulator ($82.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	sta ($82.b,X)		; 81 82 ; Store accumulator ($82.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($82.b,X)		; 81 82 ; Store accumulator ($82.b,X) [Reads: Direct Page, Accumulator, X Index]
	ldy #$A3A1.w		; A0 A1 A3 ; Load #$A3A1.w into Y register [Writes: Y Index] [Flags: NZ]
	lda ($A1.b,X)		; A1 A1 ; Load accumulator ($A1.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($83.b,X)		; A1 83 ; Load accumulator ($83.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $83.b		; 85 83 ; Store accumulator to $83.b [Reads: Accumulator]
	sta $83.b,S		; 83 83 ; Store accumulator (stack relative) $83.b,S [Reads: Stack Pointer, Accumulator]
	sta $0C.b,S		; 83 0C ; Store accumulator (stack relative) $0C.b,S [Reads: Stack Pointer, Accumulator]
	asl $FF.b		; 06 FF ; Arithmetic shift left $FF.b [Reads: Direct Page] [Flags: NCZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $FF04.w		; 0C 04 FF ; Test and set bits $FF04.w [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0002.w		; 0C 02 00 ; Test and set bits $0002.w [Reads: Accumulator] [Flags: Z]
	trb $04.b		; 14 04 ; Test and reset bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	sbc $030200.l,X		; FF 00 02 03 ; Subtract with carry (long,X) $030200.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $030300.l,X		; FF 00 03 03 ; Subtract with carry (long,X) $030300.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $040602.l,X		; FF 02 06 04 ; Subtract with carry (long,X) $040602.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $081030.l,X		; FF 30 10 08 ; Subtract with carry (long,X) $081030.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $000002.l,X		; FF 02 00 00 ; Subtract with carry (long,X) $000002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0404.l,X		; FF 04 04 FF ; Subtract with carry (long,X) $FF0404.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $10FFFF.l,X		; FF FF FF 10 ; Subtract with carry (long,X) $10FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($FF.b,X)		; 01 FF ; Logical OR ($FF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $FF.b		; 04 FF ; Test and set bits $FF.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $600000.l,X		; FF 00 00 60 ; Subtract with carry (long,X) $600000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFF18.l,X		; FF 18 FF FF ; Subtract with carry (long,X) $FFFF18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FF0403.l,X		; FF 03 04 FF ; Subtract with carry (long,X) $FF0403.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $0820.w		; 20 20 08 ; Jump to subroutine at $0820.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $30, $FF		; 30 FF ; Branch if minus to $30, $FF [Flow: branch]
	cop $FF.b		; 02 FF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $10FFFF.l,X		; FF FF FF 10 ; Subtract with carry (long,X) $10FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0010.w		; 0C 10 00 ; Test and set bits $0010.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $30		; 80 30 ; Branch always to $80, $30 [Flow: branch]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $28.b		; 05 28 ; Logical OR $28.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000FF.l,X		; FF FF 00 00 ; Subtract with carry (long,X) $0000FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $81.b,S		; 83 81 ; Store accumulator (stack relative) $81.b,S [Reads: Stack Pointer, Accumulator]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,S),Y		; 13 01 ; OR accumulator (stack relative indirect indexed) ($01.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($11.b,X)		; 01 11 ; Logical OR ($11.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	trb $01.b		; 14 01 ; Test and reset bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $04.b		; 14 04 ; Test and reset bits $04.b [Reads: Accumulator] [Flags: Z]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $05.b,X		; 15 05 ; OR accumulator with memory $05.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $05.b,S		; 03 05 ; OR accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05.b,X		; 15 05 ; OR accumulator with memory $05.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $05.b		; 06 05 ; Arithmetic shift left $05.b [Reads: Direct Page] [Flags: NCZ]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$15.b],Y		; 17 15 ; OR accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $05.b,X		; 15 05 ; OR accumulator with memory $05.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $83.b		; 85 83 ; Store accumulator to $83.b [Reads: Accumulator]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$05.b],Y		; 17 05 ; OR accumulator with memory (long indexed) [$05.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $03.b		; 04 03 ; Test and set bits $03.b [Reads: Accumulator] [Flags: Z]
	cop $10.b		; 02 10 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$17.b]		; 07 17 ; OR accumulator with memory (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $07.b,X		; 15 07 ; OR accumulator with memory $07.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $10.b		; 06 10 ; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: NCZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0019.w,Y		; 19 19 00 ; OR accumulator with memory $0019.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $1B0B.w,Y		; 19 0B 1B ; OR accumulator with memory $1B0B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D01.w,X		; 1D 01 1D ; OR accumulator with memory $1D01.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1B8D.w,Y		; 19 8D 1B ; OR accumulator with memory $1B8D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$9D.b		; 09 9D ; Logical OR #$9D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and $0901.w,X		; 3D 01 09 ; AND accumulator with memory $0901.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($40.b),Y		; 11 40 ; OR accumulator with memory ($40.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($4D.b,X)		; 01 4D ; Logical OR ($4D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $1D07.w,Y		; 19 07 1D ; OR accumulator with memory $1D07.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $4D80.w,Y		; 59 80 4D ; Exclusive OR accumulator with memory $4D80.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora ($49.b,X)		; 01 49 ; Logical OR ($49.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($03.b,X)		; 41 03 ; Exclusive OR accumulator with memory ($03.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($15.b,S),Y		; 13 15 ; OR accumulator (stack relative indirect indexed) ($15.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($18.b,X)		; 41 18 ; Exclusive OR accumulator with memory ($18.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $4D4B49.l		; 0F 49 4B 4D ; OR accumulator with memory (long) $4D4B49.l [Writes: Accumulator] [Flags: NZ]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$4D.b		; 49 4D ; Exclusive OR #$4D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$40.b		; 49 40 ; Exclusive OR #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $4947.w		; 4D 47 49 ; Exclusive OR $4947.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($74.b,X)		; 41 74 ; Exclusive OR accumulator with memory ($74.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$5B.b]		; 47 5B ; Exclusive OR accumulator with memory (long) [$5B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor ($49.b),Y		; 51 49 ; Exclusive OR accumulator with memory ($49.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $035D.w,X		; 1D 5D 03 ; OR accumulator with memory $035D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $171B.w,Y		; 19 1B 17 ; OR accumulator with memory $171B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1917.w,Y		; 19 17 19 ; OR accumulator with memory $1917.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$1B.b],Y		; 17 1B ; OR accumulator with memory (long indexed) [$1B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1909.w		; 0D 09 19 ; Logical OR $1909.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $5D49.w,Y		; 19 49 5D ; OR accumulator with memory $5D49.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	eor #$0D.b		; 49 0D ; Exclusive OR #$0D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $13.b,S		; 03 13 ; OR accumulator with stack relative $13.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($1B.b,X)		; 41 1B ; Exclusive OR accumulator with memory ($1B.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	eor $4343.w,X		; 5D 43 43 ; Exclusive OR accumulator with memory $4343.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $494D.w		; 4D 4D 49 ; Exclusive OR $494D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor ($4D.b,X)		; 41 4D ; Exclusive OR accumulator with memory ($4D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $4D4D.w		; 4D 4D 4D ; Exclusive OR $4D4D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $C409.w,X		; 1D 09 C4 ; OR accumulator with memory $C409.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $090D.w		; 0D 0D 09 ; Logical OR $090D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor [$47.b]		; 47 47 ; Exclusive OR accumulator with memory (long) [$47.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($47.b,X)		; 41 47 ; Exclusive OR accumulator with memory ($47.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rol $8B.b,X		; 36 8B ; Rotate left $8B.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor #$1D.b		; 49 1D ; Exclusive OR #$1D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$43.b		; 49 43 ; Exclusive OR #$43.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	eor ($0D.b,X)		; 41 0D ; Exclusive OR accumulator with memory ($0D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0D43.w,X		; 1D 43 0D ; OR accumulator with memory $0D43.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $0D.b,S		; 43 0D ; Exclusive OR accumulator with stack relative $0D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $4D4D.w,X		; 1D 4D 4D ; OR accumulator with memory $4D4D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0101.w		; 0D 01 01 ; Logical OR $0101.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $01.b		; 05 01 ; Logical OR $01.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$17.b]		; 07 17 ; OR accumulator with memory (long) [$17.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0D0D.w,Y		; 19 0D 0D ; OR accumulator with memory $0D0D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $4D		; 80 4D ; Branch always to $80, $4D [Flow: branch]
	ora $1917.w,Y		; 19 17 19 ; OR accumulator with memory $1917.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora #$0D.b		; 09 0D ; Logical OR #$0D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora ($49.b)		; 12 49 ; OR accumulator with memory (indirect) ($49.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	ror $40.b,X		; 76 40 ; Rotate right $40.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $5841.w,Y		; 59 41 58 ; Exclusive OR accumulator with memory $5841.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $445B73.l		; 4F 73 5B 44 ; Exclusive OR accumulator with memory (long) $445B73.l [Writes: Accumulator] [Flags: NZ]
	eor ($51.b,X)		; 41 51 ; Exclusive OR accumulator with memory ($51.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ora $0000.w		; 0D 00 00 ; Logical OR $0000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0B4B.w		; 0D 4B 0B ; Logical OR $0B4B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $0B41.w,Y		; 59 41 0B ; Exclusive OR accumulator with memory $0B41.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $0D01.w		; 0D 01 0D ; Logical OR $0D01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $5000.w		; 0D 00 50 ; Logical OR $5000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $5144.w		; 4C 44 51 ; Jump to $5144.w [Flow: jump]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc ($F8.b)		; F2 F8 ; Subtract with carry (indirect) ($F8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	pea $D4F2.w		; F4 F2 D4 ; Push absolute address $D4F2.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pei ($D4.b)		; D4 D4 ; Push effective indirect address ($D4.b) [Reads: Direct Page] [Writes: Stack Pointer]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	pea $D8F4.w		; F4 F4 D8 ; Push absolute address $D8F4.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sed		; F8 ; Set decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp $C169C8.l,X		; DF C8 69 C1 ; Compare accumulator (long,X) $C169C8.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cmp ($D2.b)		; D2 D2 ; Compare accumulator (indirect) ($D2.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	jmp.w [$C1C7]		; DC C7 C1 ; Jump long indirect [$C1C7] [Flow: jump]
	cmp [$C7.b]		; C7 C7 ; Compare accumulator (long) [$C7.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$C1.b]		; C7 C1 ; Compare accumulator (long) [$C1.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $43.b,S		; 43 43 ; Exclusive OR accumulator with stack relative $43.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0000.w		; 1C 00 00 ; Test and reset bits $0000.w [Reads: Accumulator] [Flags: Z]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0007.w		; C0 07 00 ; Compare #$0007.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$45.b]		; 07 45 ; OR accumulator with memory (long) [$45.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora $0000.w		; 0D 00 00 ; Logical OR $0000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0707.w		; 0D 07 07 ; Logical OR $0707.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0700.w		; 0D 00 07 ; Logical OR $0700.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($09.b)		; 12 09 ; OR accumulator with memory (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	rol $402E.w		; 2E 2E 40 ; Rotate left $402E.w [Flags: NCZ]
	asl $0053.w,X		; 1E 53 00 ; Arithmetic shift left $0053.w,X [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora $0000.w,Y		; 19 00 00 ; OR accumulator with memory $0000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A0A.w		; 0D 0A 0A ; Logical OR $0A0A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$4000.w		; C0 00 40 ; Compare #$4000.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$4000.w		; C0 00 40 ; Compare #$4000.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	brk $D4.b		; 00 D4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pei ($D4.b)		; D4 D4 ; Push effective indirect address ($D4.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($00.b)		; D4 00 ; Push effective indirect address ($00.b) [Reads: Direct Page] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0000.w,X		; 1D 00 00 ; OR accumulator with memory $0000.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit #$80.b		; 89 80 ; Test bits #$80.b with accumulator [Reads: Accumulator] [Flags: Z]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	trb $4000.w		; 1C 00 40 ; Test and reset bits $4000.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0307.w		; 1C 07 03 ; Test and reset bits $0307.w [Reads: Accumulator] [Flags: Z]
	ora $44.b,S		; 03 44 ; OR accumulator with stack relative $44.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $44,$44		; 44 44 44 ; Move block positive $44,$44 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	mvp $44,$43		; 44 43 44 ; Move block positive $44,$43 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $40.b,S		; 43 40 ; Exclusive OR accumulator with stack relative $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cpy #$C7C0.w		; C0 C0 C7 ; Compare #$C7C0.w with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $C3.b,S		; C3 C3 ; Compare accumulator (stack relative) $C3.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cpy #$081B.w		; C0 1B 08 ; Compare #$081B.w with Y register [Reads: Y Index] [Flags: NCZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0400.w		; 20 00 04 ; Jump to subroutine at $0400.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($61.b,X)		; 61 61 ; Add with carry ($61.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($00.b,X)		; 61 00 ; Add with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $70, $00		; 70 00 ; Branch if overflow set to $70, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $90, $90		; 90 90 ; Branch if carry clear to $90, $90 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	rep #$00		; C2 00 ; Reset processor status bits #$00 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	jsr $0200.w		; 20 00 02 ; Jump to subroutine at $0200.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stx $84.b,Y		; 96 84 ; Store X register $84.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $A0		; 80 A0 ; Branch always to $80, $A0 [Flow: branch]
	sta $97.b,S		; 83 97 ; Store accumulator (stack relative) $97.b,S [Reads: Stack Pointer, Accumulator]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	sty $91.b,X		; 94 91 ; Store Y register $91.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $92		; 80 92 ; Branch always to $80, $92 [Flow: branch]
	stx $80.b,Y		; 96 80 ; Store X register $80.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	.db $82, $06, $06		; 82 06 06 ; Branch always long to $82, $06, $06 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $90, $80		; 90 80 ; Branch if carry clear to $90, $80 [Flow: branch]
	sta ($91.b),Y		; 91 91 ; Store accumulator ($91.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($97.b),Y		; 91 97 ; Store accumulator ($97.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($95.b),Y		; 91 95 ; Store accumulator ($95.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $93.b,X		; 95 93 ; Store accumulator to $93.b,X [Reads: Accumulator, X Index]
	sta [$14.b],Y		; 97 14 ; Store accumulator (long indexed) [$14.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($82.b,X)		; 81 82 ; Store accumulator ($82.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $82, $80, $85		; 82 80 85 ; Branch always long to $82, $80, $85 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	tsb $80.b		; 04 80 ; Test and set bits $80.b [Reads: Accumulator] [Flags: Z]
	sta ($80.b),Y		; 91 80 ; Store accumulator ($80.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $82, $8A, $80		; 82 8A 80 ; Branch always long to $82, $8A, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $92		; 80 92 ; Branch always to $80, $92 [Flow: branch]
	sta ($80.b),Y		; 91 80 ; Store accumulator ($80.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $82, $81, $81		; 82 81 81 ; Branch always long to $82, $81, $81 [Flow: branch]
	.db $80, $81		; 80 81 ; Branch always to $80, $81 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	sta [$80.b],Y		; 97 80 ; Store accumulator (long indexed) [$80.b],Y [Reads: Direct Page, Y Index, Accumulator]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $C2		; 80 C2 ; Branch always to $80, $C2 [Flow: branch]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	ora $17.b,X		; 15 17 ; OR accumulator with memory $17.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cpy #$4013.w		; C0 13 40 ; Compare #$4013.w with Y register [Reads: Y Index] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $10.b		; 06 10 ; Arithmetic shift left $10.b [Reads: Direct Page] [Flags: NCZ]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($46.b,S),Y		; 13 46 ; OR accumulator (stack relative indirect indexed) ($46.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($80.b),Y		; 11 80 ; OR accumulator with memory ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $81.b,X		; 16 81 ; Arithmetic shift left $81.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sta [$82.b]		; 87 82 ; Store accumulator (long) [$82.b] [Reads: Direct Page, Accumulator]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $17		; 10 17 ; Branch if plus to $10, $17 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $0020.w		; 20 20 00 ; Jump to subroutine at $0020.w [Writes: Stack Pointer] [Flow: call]
	sta ($00.b,X)		; 81 00 ; Store accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	bit $80.b		; 24 80 ; Test bits $80.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	sta ($05.b,X)		; 81 05 ; Store accumulator ($05.b,X) [Reads: Direct Page, Accumulator, X Index]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $84.b		; 84 84 ; Store Y register to $84.b [Reads: Y Index]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $82		; 80 82 ; Branch always to $80, $82 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $82, $08		; 82 82 08 ; Branch always long to $82, $82, $08 [Flow: branch]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	jsl $0DB871.l		; 22 71 B8 0D ; Jump to subroutine long $0DB871.l [Writes: Stack Pointer] [Flow: call]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $B080.w,Y		; B9 80 B0 ; Load $B080.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	lda $B173.w,Y		; B9 73 B1 ; Load $B173.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0E50.w,X		; 9D 50 0E ; Store accumulator to $0E50.w,X [Reads: Accumulator, X Index]
	lda $B44C.w,Y		; B9 4C B4 ; Load $B44C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F60.w,X		; 9D 60 0F ; Store accumulator to $0F60.w,X [Reads: Accumulator, X Index]
	lda $B632.w,Y		; B9 32 B6 ; Load $B632.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0BE0.w,X		; 9D E0 0B ; Store accumulator to $0BE0.w,X [Reads: Accumulator, X Index]
	lda $B725.w,Y		; B9 25 B7 ; Load $B725.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0CAA.w,X		; 9D AA 0C ; Store accumulator to $0CAA.w,X [Reads: Accumulator, X Index]
	lda $B266.w,Y		; B9 66 B2 ; Load $B266.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0CD2.w,X		; 9D D2 0C ; Store accumulator to $0CD2.w,X [Reads: Accumulator, X Index]
	lda $B53F.w,Y		; B9 3F B5 ; Load $B53F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0B6B.w,X		; 9D 6B 0B ; Store accumulator to $0B6B.w,X [Reads: Accumulator, X Index]
	lda $040A.w		; AD 0A 04 ; Load $040A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $1B.b		; A4 1B ; Load $1B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	lda $048E.w		; AD 8E 04 ; Load $048E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C9A.w,X		; 9D 9A 0C ; Store accumulator to $0C9A.w,X [Reads: Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy $0E20.w,X		; BC 20 0E ; Load Y register $0E20.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $B359.w,Y		; B9 59 B3 ; Load $B359.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0E60.w,X		; 9D 60 0E ; Store accumulator to $0E60.w,X [Reads: Accumulator, X Index]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	plb		; [PATTERN: Memory clearing operation] AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0F00.w,X		; 9E 00 0F ; Store zero to $0F00.w,X [Reads: X Index]
	stz $0E90.w,X		; 9E 90 0E ; Store zero to $0E90.w,X [Reads: X Index]
	stz $0D50.w,X		; [PATTERN: Memory clearing operation] 9E 50 0D ; Store zero to $0D50.w,X [Reads: X Index]
	stz $0D40.w,X		; 9E 40 0D ; Store zero to $0D40.w,X [Reads: X Index]
	stz $0F80.w,X		; 9E 80 0F ; Store zero to $0F80.w,X [Reads: X Index]
	stz $0D70.w,X		; 9E 70 0D ; Store zero to $0D70.w,X [Reads: X Index]
	stz $0D60.w,X		; 9E 60 0D ; Store zero to $0D60.w,X [Reads: X Index]
	stz $0F90.w,X		; [PATTERN: Memory clearing operation] 9E 90 0F ; Store zero to $0F90.w,X [Reads: X Index]
	stz $0D80.w,X		; 9E 80 0D ; Store zero to $0D80.w,X [Reads: X Index]
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	stz $0DE0.w,X		; 9E E0 0D ; Store zero to $0DE0.w,X [Reads: X Index]
	stz $0DF0.w,X		; 9E F0 0D ; Store zero to $0DF0.w,X [Reads: X Index]
	stz $0E00.w,X		; [PATTERN: Memory clearing operation] 9E 00 0E ; Store zero to $0E00.w,X [Reads: X Index]
	stz $0E10.w,X		; 9E 10 0E ; Store zero to $0E10.w,X [Reads: X Index]
	stz $0F10.w,X		; 9E 10 0F ; Store zero to $0F10.w,X [Reads: X Index]
	stz $0EB0.w,X		; 9E B0 0E ; Store zero to $0EB0.w,X [Reads: X Index]
	stz $0EC0.w,X		; 9E C0 0E ; Store zero to $0EC0.w,X [Reads: X Index]
	stz $0ED0.w,X		; [PATTERN: Memory clearing operation] 9E D0 0E ; Store zero to $0ED0.w,X [Reads: X Index]
	stz $0EF0.w,X		; 9E F0 0E ; Store zero to $0EF0.w,X [Reads: X Index]
	stz $0E70.w,X		; 9E 70 0E ; Store zero to $0E70.w,X [Reads: X Index]
	stz $0F70.w,X		; 9E 70 0F ; Store zero to $0F70.w,X [Reads: X Index]
	stz $0E50.w,X		; 9E 50 0E ; Store zero to $0E50.w,X [Reads: X Index]
	stz $0EA0.w,X		; [PATTERN: Memory clearing operation] 9E A0 0E ; Store zero to $0EA0.w,X [Reads: X Index]
	stz $0F40.w,X		; 9E 40 0F ; Store zero to $0F40.w,X [Reads: X Index]
	stz $0F30.w,X		; 9E 30 0F ; Store zero to $0F30.w,X [Reads: X Index]
	stz $0D90.w,X		; 9E 90 0D ; Store zero to $0D90.w,X [Reads: X Index]
	stz $0DA0.w,X		; 9E A0 0D ; Store zero to $0DA0.w,X [Reads: X Index]
	stz $0DB0.w,X		; [PATTERN: Memory clearing operation] 9E B0 0D ; Store zero to $0DB0.w,X [Reads: X Index]
	stz $0BB0.w,X		; 9E B0 0B ; Store zero to $0BB0.w,X [Reads: X Index]
	stz $0E80.w,X		; 9E 80 0E ; Store zero to $0E80.w,X [Reads: X Index]
	stz $0BA0.w,X		; 9E A0 0B ; Store zero to $0BA0.w,X [Reads: X Index]
	stz $0B89.w,X		; 9E 89 0B ; Store zero to $0B89.w,X [Reads: X Index]
	stz $0F50.w,X		; [PATTERN: Memory clearing operation] 9E 50 0F ; Store zero to $0F50.w,X [Reads: X Index]
	stz $0B58.w,X		; 9E 58 0B ; Store zero to $0B58.w,X [Reads: X Index]
	stz $0CE2.w,X		; 9E E2 0C ; Store zero to $0CE2.w,X [Reads: X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7FFA1C.l,X		; 9F 1C FA 7F ; Store accumulator (long,X) $7FFA1C.l,X [Reads: Accumulator, X Index]
	sta $7FFA2C.l,X		; 9F 2C FA 7F ; Store accumulator (long,X) $7FFA2C.l,X [Reads: Accumulator, X Index]
	sta $7FFA3C.l,X		; 9F 3C FA 7F ; Store accumulator (long,X) $7FFA3C.l,X [Reads: Accumulator, X Index]
	sta $7FFA4C.l,X		; 9F 4C FA 7F ; Store accumulator (long,X) $7FFA4C.l,X [Reads: Accumulator, X Index]
	sta $7FF9C2.l,X		; 9F C2 F9 7F ; Store accumulator (long,X) $7FF9C2.l,X [Reads: Accumulator, X Index]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $FCFF.w		; 20 FF FC ; Jump to subroutine at $FCFF.w [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $40.b		; 04 40 ; Test and set bits $40.b [Reads: Accumulator] [Flags: Z]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FCFF40.l,X		; FF 40 FF FC ; Subtract with carry (long,X) $FCFF40.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; [PATTERN: Memory clearing operation] 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc $20FBFC.l,X		; FF FC FB 20 ; Subtract with carry (long,X) $20FBFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $18.b		; 64 18 ; Store zero to $18.b
	stz $00.b		; 64 00 ; Store zero to $00.b
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFA.w,Y		; F9 FA FF ; Subtract with carry $FFFA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $00.b		; 64 00 ; Store zero to $00.b
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc $1004.w,X		; FD 04 10 ; Subtract with carry $1004.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	inc $0004.w,X		; FE 04 00 ; Increment memory $0004.w,X [Reads: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc $0000.w,X		; FD 00 00 ; Subtract with carry $0000.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $FF40.w		; 20 40 FF ; Jump to subroutine at $FF40.w [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda SLHV.w		; AD 37 21 ; Load SLHV.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda OPHCT.w		; AD 3C 21 ; Load OPHCT.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $1A.b		; 65 1A ; Add $1A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $0FA1.w		; 6D A1 0F ; Add $0FA1.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0FA1.w		; 8D A1 0F ; Store accumulator to $0FA1.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$8000.w		; A0 00 80 ; Load #$8000.w into Y register [Writes: Y Index] [Flags: NZ]
	ora ($A0.b)		; 12 A0 ; OR accumulator with memory (indirect) ($A0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $04A0.w		; 0E A0 04 ; Arithmetic shift left $04A0.w [Flags: NCZ]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	ldy #$8006.w		; A0 06 80 ; Load #$8006.w into Y register [Writes: Y Index] [Flags: NZ]
	asl $A0.b		; 06 A0 ; Arithmetic shift left $A0.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	ldy #$8B0A.w		; A0 0A 8B ; Load #$8B0A.w into Y register [Writes: Y Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $BB0A.w		; 20 0A BB ; Jump to subroutine at $BB0A.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc ($01.b),Y		; 71 01 ; Add with carry ($01.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($00.b),Y		; 31 00 ; AND accumulator with memory ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($00.b,X)		; C1 00 ; Compare accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	eor ($01.b,X)		; 41 01 ; Exclusive OR accumulator with memory ($01.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($01.b),Y		; D1 01 ; Compare accumulator ($01.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	.db $50, $00		; 50 00 ; Branch if overflow clear to $50, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	cpx #$1000.w		; E0 00 10 ; Compare #$1000.w with X register [Reads: X Index] [Flags: NCZ]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D0.b,X)		; 01 D0 ; Logical OR ($D0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($D4.b,X)		; 01 D4 ; Logical OR ($D4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($DC.b,X)		; 01 DC ; Logical OR ($DC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($E4.b,X)		; 01 E4 ; Logical OR ($E4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $38.b		; 00 38 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($24.b,X)		; 01 24 ; Logical OR ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($28.b,X)		; 01 28 ; Logical OR ($28.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($2C.b,X)		; 01 2C ; Logical OR ($2C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($30.b,X)		; 01 30 ; Logical OR ($30.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($34.b,X)		; 01 34 ; Logical OR ($34.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($38.b,X)		; 01 38 ; Logical OR ($38.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3C.b,X)		; 01 3C ; Logical OR ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($40.b,X)		; 01 40 ; Logical OR ($40.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($50.b,X)		; 01 50 ; Logical OR ($50.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($90.b,X)		; 01 90 ; Logical OR ($90.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($B8.b,X)		; 01 B8 ; Logical OR ($B8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $0F9C.w		; 0E 9C 0F ; Arithmetic shift left $0F9C.w [Flags: NCZ]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $E0B9.w		; 20 B9 E0 ; Jump to subroutine at $E0B9.w [Writes: Stack Pointer] [Flow: call]
	ora $189085.l		; 0F 85 90 18 ; OR accumulator with memory (long) $189085.l [Writes: Accumulator] [Flags: NZ]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp $BA9E.w,Y		; D9 9E BA ; Compare accumulator $BA9E.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $90, $23		; 90 23 ; Branch if carry clear to $90, $23 [Flow: branch]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	stz $0D.b		; 64 0D ; Store zero to $0D.b
	lda $0FEC.w,Y		; B9 EC 0F ; Load $0FEC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0FEC.w,Y		; 99 EC 0F ; Store accumulator to $0FEC.w,Y [Reads: Y Index, Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $BAAA.w,Y		; B9 AA BA ; Load $BAAA.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	sta $0FE0.w,Y		; 99 E0 0F ; Store accumulator to $0FE0.w,Y [Reads: Y Index, Accumulator]
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldy $90.b		; A4 90 ; Load $90.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $41		; 80 41 ; Branch always to $80, $41 [Flow: branch]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $3A		; 80 3A ; Branch always to $80, $3A [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $012D.w		; AC 2D 01 ; Load $012D.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $BB98.w		; 20 98 BB ; Jump to subroutine at $BB98.w [Writes: Stack Pointer] [Flow: call]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $012E.w		; AC 2E 01 ; Load $012E.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $BB98.w		; 20 98 BB ; Jump to subroutine at $BB98.w [Writes: Stack Pointer] [Flow: call]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $012F.w		; AC 2F 01 ; Load $012F.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsr $BB98.w		; 20 98 BB ; Jump to subroutine at $BB98.w [Writes: Stack Pointer] [Flow: call]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	jsl $0DBBA1.l		; 22 A1 BB 0D ; Jump to subroutine long $0DBBA1.l [Writes: Stack Pointer] [Flow: call]
	ora $0D.b		; 05 0D ; Logical OR $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$3800.w		; A2 00 38 ; Load #$3800.w into X register [Writes: X Index] [Flags: NZ]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0050.w		; E9 50 00 ; Subtract #$0050.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0050.w		; C9 50 00 ; Compare #$0050.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp #$0000.w		; C9 00 00 ; Compare #$0000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $0DBB5B.l,X		; BF 5B BB 0D ; Load long $0DBB5B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0DBBC8.l,X		; BF C8 BB 0D ; Load long $0DBBC8.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	.db $80, $43		; 80 43 ; Branch always to $80, $43 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	.db $80, $43		; 80 43 ; Branch always to $80, $43 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ldx $43.b,Y		; B6 43 ; Load X register $43.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ldx $43.b,Y		; B6 43 ; Load X register $43.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	lda [$43.b],Y		; B7 43 ; Load accumulator (long indexed) [$43.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $00.b,S		; 43 00 ; Exclusive OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $00.b,S		; 83 00 ; Store accumulator (stack relative) $00.b,S [Reads: Stack Pointer, Accumulator]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B6.b		; 00 B6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B7.b		; 00 B7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000A4E.l,X		; FF 4E 0A 00 ; Subtract with carry (long,X) $000A4E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $004A4E.l,X		; FF 4E 4A 00 ; Subtract with carry (long,X) $004A4E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5E.b		; 00 5E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6C.b		; 00 6C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $008A.w,X		; 5E 8A 00 ; Logical shift right $008A.w,X [Reads: X Index] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00CA.w,X		; 5E CA 00 ; Logical shift right $00CA.w,X [Reads: X Index] [Flags: NCZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $6C0000.l,X		; FF 00 00 6C ; Subtract with carry (long,X) $6C0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $6C0000.l,X		; FF 00 00 6C ; Subtract with carry (long,X) $6C0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $15		; 30 15 ; Branch if minus to $30, $15 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$BBE0.w		; 69 E0 BB ; Add #$BBE0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $06E416.l		; 22 16 E4 06 ; Jump to subroutine long $06E416.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0000B2.l,X		; FF B2 00 00 ; Subtract with carry (long,X) $0000B2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B3.l,X		; FF B3 00 00 ; Subtract with carry (long,X) $0000B3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B2.l,X		; FF B2 00 00 ; Subtract with carry (long,X) $0000B2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B3.l,X		; FF B3 00 00 ; Subtract with carry (long,X) $0000B3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B2.l,X		; FF B2 00 00 ; Subtract with carry (long,X) $0000B2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B3.l,X		; FF B3 00 00 ; Subtract with carry (long,X) $0000B3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B2.l,X		; FF B2 00 00 ; Subtract with carry (long,X) $0000B2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B3.l,X		; FF B3 00 00 ; Subtract with carry (long,X) $0000B3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B2.l,X		; FF B2 00 00 ; Subtract with carry (long,X) $0000B2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B3.l,X		; FF B3 00 00 ; Subtract with carry (long,X) $0000B3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0000B2.l,X		; FF B2 00 00 ; Subtract with carry (long,X) $0000B2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B3.l,X		; FF B3 00 00 ; Subtract with carry (long,X) $0000B3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0000B2.l,X		; FF B2 00 00 ; Subtract with carry (long,X) $0000B2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B3.l,X		; FF B3 00 00 ; Subtract with carry (long,X) $0000B3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B2.l,X		; FF B2 00 00 ; Subtract with carry (long,X) $0000B2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000B3.l,X		; FF B3 00 00 ; Subtract with carry (long,X) $0000B3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $8B.b		; 02 8B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc #$BD46.w		; 69 46 BD ; Add #$BD46.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($C5FF.w,X)		; FC FF C5 ; Jump to subroutine indirect indexed ($C5FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0040C5.l,X		; FF C5 40 00 ; Subtract with carry (long,X) $0040C5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0000.w		; C0 00 00 ; Compare #$0000.w with Y register [Reads: Y Index] [Flags: NCZ]
	jsr ($00FF.w,X)		; FC FF 00 ; Jump to subroutine indirect indexed ($00FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $D2.b		; 00 D2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($00.b)		; D2 00 ; Compare accumulator (indirect) ($00.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($00FF.w,X)		; FC FF 00 ; Jump to subroutine indirect indexed ($00FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $D2.b		; 00 D2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0000.w		; C0 00 00 ; Compare #$0000.w with Y register [Reads: Y Index] [Flags: NCZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp ($80.b)		; D2 80 ; Compare accumulator (indirect) ($80.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$BE28.w		; 69 28 BE ; Add #$BE28.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $A60000.l,X		; FF 00 00 A6 ; Subtract with carry (long,X) $A60000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $A60000.l,X		; FF 00 00 A6 ; Subtract with carry (long,X) $A60000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $A60000.l,X		; FF 00 00 A6 ; Subtract with carry (long,X) $A60000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $AC0000.l,X		; FF 00 00 AC ; Subtract with carry (long,X) $AC0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $BA.b		; 00 BA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BB.b		; 00 BB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A80000.l,X		; FF 00 00 A8 ; Subtract with carry (long,X) $A80000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	brk $BB.b		; 00 BB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BA.b		; 00 BA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $0000.w		; AE 00 00 ; Load $0000.w into X register [Writes: X Index] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	lda $000000.l		; AF 00 00 00 ; Load long $000000.l into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $BF00.w		; 0C 00 BF ; Test and set bits $BF00.w [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $0000.w		; AE 00 00 ; Load $0000.w into X register [Writes: X Index] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $00FF.w,X		; FE FF 00 ; Increment memory $00FF.w,X [Reads: X Index] [Flags: NZ]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $08FF.w,X		; FE FF 08 ; Increment memory $08FF.w,X [Reads: X Index] [Flags: NZ]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$BE86.w		; 69 86 BE ; Add #$BE86.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$BF66.w		; A9 66 BF ; Load #$BF66.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $ED		; 80 ED ; Branch always to $80, $ED [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000008.l,X		; FF 08 00 00 ; Subtract with carry (long,X) $000008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A00000.l,X		; FF 00 00 A0 ; Subtract with carry (long,X) $A00000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A1.b		; 00 A1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000008.l,X		; FF 08 00 00 ; Subtract with carry (long,X) $000008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A10001.l,X		; FF 01 00 A1 ; Subtract with carry (long,X) $A10001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00000E.l,X		; FF 0E 00 00 ; Subtract with carry (long,X) $00000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A30000.l,X		; FF 00 00 A3 ; Subtract with carry (long,X) $A30000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00000E.l,X		; FF 0E 00 00 ; Subtract with carry (long,X) $00000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A40001.l,X		; FF 01 00 A4 ; Subtract with carry (long,X) $A40001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $40.b,S		; A3 40 ; Load accumulator (stack relative) $40.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00000C.l,X		; FF 0C 00 00 ; Subtract with carry (long,X) $00000C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00400C.l,X		; FF 0C 40 00 ; Subtract with carry (long,X) $00400C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx $40.b		; A6 40 ; Load $40.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00400C.l,X		; FF 0C 40 00 ; Subtract with carry (long,X) $00400C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $82, $80		; 82 82 80 ; Branch always long to $82, $82, $80 [Flow: branch]
	sty $88.b		; 84 88 ; Store Y register to $88.b [Reads: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	stx $84.b		; 86 84 ; Store X register to $84.b [Reads: X Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc #$BFD6.w		; 69 D6 BF ; Add #$BFD6.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	lda $0E00.w,X		; BD 00 0E ; Load $0E00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $C096.w,X		; BD 96 C0 ; Load $C096.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$9102.w		; A0 02 91 ; Load #$9102.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $90, $C8		; 90 C8 ; Branch if carry clear to $90, $C8 [Flow: branch]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $C09E.w,X		; 1D 9E C0 ; OR accumulator with memory $C09E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $40.b		; 06 40 ; Arithmetic shift left $40.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $40.b		; 06 40 ; Arithmetic shift left $40.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $40.b		; 06 40 ; Arithmetic shift left $40.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $40.b		; 06 40 ; Arithmetic shift left $40.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $0000.w		; 2E 00 00 ; Rotate left $0000.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000002.l,X		; FF 02 00 00 ; Subtract with carry (long,X) $000002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004002.l,X		; FF 02 40 00 ; Subtract with carry (long,X) $004002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2E.b		; 00 2E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $40.b		; 24 40 ; Test bits $40.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cop $40.b		; 02 40 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0040.w		; 0E 40 00 ; Arithmetic shift left $0040.w [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004002.l,X		; FF 02 40 00 ; Subtract with carry (long,X) $004002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $F8FF.w,X		; FE FF F8 ; Increment memory $F8FF.w,X [Reads: X Index] [Flags: NZ]
	sbc $000002.l,X		; FF 02 00 00 ; Subtract with carry (long,X) $000002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000004.l,X		; FF 04 00 00 ; Subtract with carry (long,X) $000004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000004.l,X		; FF 04 00 00 ; Subtract with carry (long,X) $000004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $22.b		; 04 22 ; Test and set bits $22.b [Reads: Accumulator] [Flags: Z]
	asl $E4.b,X		; 16 E4 ; Arithmetic shift left $E4.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $6B.b		; 06 6B ; Arithmetic shift left $6B.b [Reads: Direct Page] [Flags: NCZ]
	lda $0E10.w,X		; BD 10 0E ; Load $0E10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F6		; D0 F6 ; Branch if not equal to $D0, $F6 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc #$C0F3.w		; 69 F3 C0 ; Add #$C0F3.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $1C		; B0 1C ; Branch if carry set to $B0, $1C [Flow: branch]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0EB0.w,X		; BD B0 0E ; Load $0EB0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $C213.w,X		; BD 13 C2 ; Load $C213.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$9102.w		; A0 02 91 ; Load #$9102.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $90, $C8		; 90 C8 ; Branch if carry clear to $90, $C8 [Flow: branch]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$8F.b		; 29 8F ; Logical AND #$8F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $C26A.w,X		; 1D 6A C2 ; OR accumulator with memory $C26A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $70, $30		; 70 30 ; Branch if overflow set to $70, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	lda $0F20.w,X		; BD 20 0F ; Load $0F20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $05.b		; 64 05 ; Store zero to $05.b
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	lda #$1000.w		; A9 00 10 ; Load #$1000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01F8.w		; 29 F8 01 ; Logical AND #$01F8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $05.b		; 65 05 ; Add $05.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $05FAA2.l		; 22 A2 FA 05 ; Jump to subroutine long $05FAA2.l [Writes: Stack Pointer] [Flow: call]
.INDEX 16
	rep #$10		; C2 10
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	sta $0FA5.w		; 8D A5 0F ; Store accumulator to $0FA5.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0DB971.l,X		; BF 71 B9 0D ; Load long $0DB971.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $C2D9.w		; 20 D9 C2 ; Jump to subroutine at $C2D9.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	eor $C3.b,S		; 43 C3 ; Exclusive OR accumulator with stack relative $C3.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cmp $E6.b,S		; C3 E6 ; Compare accumulator (stack relative) $E6.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
.ACCU 16
	rep #$20		; C2 20
	sta ($C4.b,X)		; 81 C4 ; Store accumulator ($C4.b,X) [Reads: Direct Page, Accumulator, X Index]
	jsr $D49F.w		; 20 9F D4 ; Jump to subroutine at $D49F.w [Writes: Stack Pointer] [Flow: call]
	jsl $1EF4F3.l		; 22 F3 F4 1E ; Jump to subroutine long $1EF4F3.l [Writes: Stack Pointer] [Flow: call]
	jsl $05DCA2.l		; 22 A2 DC 05 ; Jump to subroutine long $05DCA2.l [Writes: Stack Pointer] [Flow: call]
	stz $0EB0.w,X		; 9E B0 0E ; Store zero to $0EB0.w,X [Reads: X Index]
	lda #$A072.w		; A9 72 A0 ; Load #$A072.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda [$E1.b]		; A7 E1 ; Load accumulator (long) [$E1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $90.b		; 05 90 ; Logical OR $90.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $9D.b		; 06 9D ; Arithmetic shift left $9D.b [Reads: Direct Page] [Flags: NCZ]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$D003.w		; 29 03 D0 ; Logical AND #$D003.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($A9.b,S),Y		; 13 A9 ; OR accumulator (stack relative indirect indexed) ($A9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $9D.b		; 02 9D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	jsl $06EAA0.l		; 22 A0 EA 06 ; Jump to subroutine long $06EAA0.l [Writes: Stack Pointer] [Flow: call]
	cpy #$03.b		; C0 03 ; Compare #$03.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda #$9D0F.w		; A9 0F 9D ; Load #$9D0F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $50, $0F		; 50 0F ; Branch if overflow clear to $50, $0F [Flow: branch]
	jsl $06F864.l		; 22 64 F8 06 ; Jump to subroutine long $06F864.l [Writes: Stack Pointer] [Flow: call]
	jsl $1DCC9E.l		; 22 9E CC 1D ; Jump to subroutine long $1DCC9E.l [Writes: Stack Pointer] [Flow: call]
	jsr $D49F.w		; 20 9F D4 ; Jump to subroutine at $D49F.w [Writes: Stack Pointer] [Flow: call]
	jsl $1EF4F3.l		; 22 F3 F4 1E ; Jump to subroutine long $1EF4F3.l [Writes: Stack Pointer] [Flow: call]
	lda #$A071.w		; A9 71 A0 ; Load #$A071.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($22.b,X)		; 01 22 ; Logical OR ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda [$E1.b]		; A7 E1 ; Load accumulator (long) [$E1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $9D.b		; 02 9D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C3E1.w		; 20 E1 C3 ; Jump to subroutine at $C3E1.w [Writes: Stack Pointer] [Flow: call]
	jsr $D49F.w		; 20 9F D4 ; Jump to subroutine at $D49F.w [Writes: Stack Pointer] [Flow: call]
	jsl $1EF4F3.l		; 22 F3 F4 1E ; Jump to subroutine long $1EF4F3.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$B030.w		; C9 30 B0 ; Compare #$B030.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $A9.b		; 04 A9 ; Test and set bits $A9.b [Reads: Accumulator] [Flags: Z]
	cop $80.b		; 02 80 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0A.b		; 04 0A ; Test and set bits $0A.b [Reads: Accumulator] [Flags: Z]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$9D01.w		; 29 01 9D ; Logical AND #$9D01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	lda $7EF34C.l		; AF 4C F3 7E ; Load long $7EF34C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$B002.w		; C9 02 B0 ; Compare #$B002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	lda #$A0A1.w		; A9 A1 A0 ; Load #$A0A1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$E1.b]		; A7 E1 ; Load accumulator (long) [$E1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $90.b		; 05 90 ; Logical OR $90.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$A0A4.w		; A9 A4 A0 ; Load #$A0A4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$E1.b]		; A7 E1 ; Load accumulator (long) [$E1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $90.b		; 05 90 ; Logical OR $90.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$D00D.w		; C9 0D D0 ; Compare #$D00D.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $F0.b		; 24 F0 ; Test bits $F0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $50, $16		; 50 16 ; Branch if overflow clear to $50, $16 [Flow: branch]
	jsl $06F129.l		; 22 29 F1 06 ; Jump to subroutine long $06F129.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $10		; 90 10 ; Branch if carry clear to $90, $10 [Flow: branch]
	lda #$A0A2.w		; A9 A2 A0 ; Load #$A0A2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $05E2.w,Y		; 19 E2 05 ; OR accumulator with memory $05E2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	lda #$9D02.w		; A9 02 9D ; Load #$9D02.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$A0A3.w		; A9 A3 A0 ; Load #$A0A3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$E1.b]		; A7 E1 ; Load accumulator (long) [$E1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $9D.b		; 02 9D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FF.w,Y		; F9 FF 86 ; Subtract with carry $86FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000086.l,X		; FF 86 00 00 ; Subtract with carry (long,X) $000086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000084.l,X		; FF 84 00 00 ; Subtract with carry (long,X) $000084.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $85.b		; 02 85 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: NCZ]
	ora [$BD.b]		; 07 BD ; OR accumulator with memory (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$85B1.w		; 69 B1 85 ; Add #$85B1.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$69C3.w		; A9 C3 69 ; Load #$69C3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$7522.w		; 09 22 75 ; Logical OR #$7522.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $542205.l,X		; DF 05 22 54 ; Compare accumulator (long,X) $542205.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	jmp.w [$6006]		; DC 06 60 ; Jump long indirect [$6006] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00000C.l,X		; FF 0C 00 00 ; Subtract with carry (long,X) $00000C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00000C.l,X		; FF 0C 00 00 ; Subtract with carry (long,X) $00000C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00000C.l,X		; FF 0C 00 00 ; Subtract with carry (long,X) $00000C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00000C.l,X		; FF 0C 00 00 ; Subtract with carry (long,X) $00000C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00000E.l,X		; FF 0E 00 00 ; Subtract with carry (long,X) $00000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00000E.l,X		; FF 0E 00 00 ; Subtract with carry (long,X) $00000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $00400E.l,X		; FF 0E 40 00 ; Subtract with carry (long,X) $00400E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00400E.l,X		; FF 0E 40 00 ; Subtract with carry (long,X) $00400E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$8502.w		; A9 02 85 ; Load #$8502.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: NCZ]
	ora [$BD.b]		; 07 BD ; OR accumulator with memory (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$8501.w		; 69 01 85 ; Add #$8501.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$69C4.w		; A9 C4 69 ; Load #$69C4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$7522.w		; 09 22 75 ; Logical OR #$7522.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $542205.l,X		; DF 05 22 54 ; Compare accumulator (long,X) $542205.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	jmp.w [$6006]		; DC 06 60 ; Jump long indirect [$6006] [Flow: jump]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $C4AD.w		; 20 AD C4 ; Jump to subroutine at $C4AD.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C4EB.w		; 20 EB C4 ; Jump to subroutine at $C4EB.w [Writes: Stack Pointer] [Flow: call]
	jsr $D49F.w		; 20 9F D4 ; Jump to subroutine at $D49F.w [Writes: Stack Pointer] [Flow: call]
	lda #$A0A5.w		; A9 A5 A0 ; Load #$A0A5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda [$E1.b]		; A7 E1 ; Load accumulator (long) [$E1.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $22.b		; 05 22 ; Logical OR $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($F4.b,S),Y		; F3 F4 ; Subtract with carry (stack relative indirect indexed) ($F4.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	asl $1AA5.w,X		; 1E A5 1A ; Arithmetic shift left $1AA5.w,X [Reads: X Index] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$9D01.w		; 29 01 9D ; Logical AND #$9D01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8EFF.w,Y		; F9 FF 8E ; Subtract with carry $8EFF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00008E.l,X		; FF 8E 00 00 ; Subtract with carry (long,X) $00008E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $85.b		; 02 85 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: NCZ]
	ora [$BD.b]		; 07 BD ; OR accumulator with memory (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$85CB.w		; 69 CB 85 ; Add #$85CB.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$69C4.w		; A9 C4 69 ; Load #$69C4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$7522.w		; 09 22 75 ; Logical OR #$7522.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $542205.l,X		; DF 05 22 54 ; Compare accumulator (long,X) $542205.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	jmp.w [$6006]		; DC 06 60 ; Jump long indirect [$6006] [Flow: jump]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $C51B.w		; 20 1B C5 ; Jump to subroutine at $C51B.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $2E2D.w		; 2C 2D 2E ; Test bits $2E2D.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $0101.w		; 2D 01 01 ; Logical AND $0101.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $C6BA.w		; 20 BA C6 ; Jump to subroutine at $C6BA.w [Writes: Stack Pointer] [Flow: call]
	jsr $D49F.w		; 20 9F D4 ; Jump to subroutine at $D49F.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $C58F.w		; 20 8F C5 ; Jump to subroutine at $C58F.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0FF540.l		; 22 40 F5 0F ; Jump to subroutine long $0FF540.l [Writes: Stack Pointer] [Flow: call]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	jsl $0791B9.l		; 22 B9 91 07 ; Jump to subroutine long $0791B9.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsl $07F4D0.l		; 22 D0 F4 07 ; Jump to subroutine long $07F4D0.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $38		; B0 38 ; Branch if carry set to $B0, $38 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $C58F.w		; 20 8F C5 ; Jump to subroutine at $C58F.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $31		; B0 31 ; Branch if carry set to $B0, $31 [Flow: branch]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F080.w		; 29 80 F0 ; Logical AND #$F080.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0D10.w,X		; DD 10 0D ; Compare accumulator $0D10.w,X [Reads: X Index] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$8501.w		; 29 01 85 ; Logical AND #$8501.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($AF.b,X)		; 01 AF ; Logical OR ($AF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $7EF3.w,Y		; 59 F3 7E ; Exclusive OR accumulator with memory $7EF3.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$9002.w		; C9 02 90 ; Compare #$9002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $A9.b		; 04 A9 ; Test and set bits $A9.b [Reads: Accumulator] [Flags: Z]
	cop $85.b		; 02 85 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($18.b,X)		; 01 18 ; Logical OR ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $C513.w,Y		; B9 13 C5 ; Load $C513.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $C517.w,Y		; B9 17 C5 ; Load $C517.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$9D01.w		; 29 01 9D ; Logical AND #$9D01.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	.db $62, $00, $6A		; 62 00 6A ; Push effective relative address $62, $00, $6A [Writes: Stack Pointer]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $D8AD.w		; 20 AD D8 ; Jump to subroutine at $D8AD.w [Writes: Stack Pointer] [Flow: call]
	ora $22E538.l		; 0F 38 E5 22 ; OR accumulator with memory (long) $22E538.l [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C57F.w,Y		; 79 7F C5 ; Add $C57F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $C587.w,Y		; D9 87 C5 ; Compare accumulator $C587.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $B0, $0F		; B0 0F ; Branch if carry set to $B0, $0F [Flow: branch]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $20.b		; E5 20 ; Subtract $20.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $C583.w,Y		; 79 83 C5 ; Add $C583.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $C58B.w,Y		; D9 8B C5 ; Compare accumulator $C58B.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc #$FF.b		; E9 FF ; Subtract #$FF.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $0002.w,Y		; BE 02 00 ; Load X register $0002.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BF0005.l,X		; FF 05 00 BF ; Subtract with carry (long,X) $BF0005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BF0005.l,X		; FF 05 00 BF ; Subtract with carry (long,X) $BF0005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $11.b		; 00 11 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $19.b		; 00 19 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $00		; 42 00 ; Reserved instruction
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A8FFF8.l,X		; FF F8 FF A8 ; Subtract with carry (long,X) $A8FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ldx $40.b		; A6 40 ; Load $40.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $F800.w,X		; 1E 00 F8 ; Arithmetic shift left $F800.w,X [Reads: X Index] [Flags: NCZ]
	sbc $0000A8.l,X		; FF A8 00 00 ; Subtract with carry (long,X) $0000A8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $1F.b		; 02 1F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BE0005.l,X		; FF 05 00 BE ; Subtract with carry (long,X) $BE0005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BF0005.l,X		; FF 05 00 BF ; Subtract with carry (long,X) $BF0005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BF0005.l,X		; FF 05 00 BF ; Subtract with carry (long,X) $BF0005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $00		; 42 00 ; Reserved instruction
	brk $E1.b		; 00 E1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A8FFF8.l,X		; FF F8 FF A8 ; Subtract with carry (long,X) $A8FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ldy $40.b		; A4 40 ; Load $40.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FFF800.l,X		; 1F 00 F8 FF ; Logical OR long $FFF800.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $1F.b		; 02 1F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $ED.b		; 02 ED ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BE0005.l,X		; FF 05 00 BE ; Subtract with carry (long,X) $BE0005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F5.b		; 00 F5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BF0005.l,X		; FF 05 00 BF ; Subtract with carry (long,X) $BF0005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $BF0005.l,X		; FF 05 00 BF ; Subtract with carry (long,X) $BF0005.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1D.b		; 00 1D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $42, $00		; 42 00 ; Reserved instruction
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0EFFF8.l,X		; FF F8 FF 0E ; Subtract with carry (long,X) $0EFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ldy $40.b		; A4 40 ; Load $40.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $F800.w		; 20 00 F8 ; Jump to subroutine at $F800.w [Writes: Stack Pointer] [Flow: call]
	sbc $00000E.l,X		; FF 0E 00 00 ; Subtract with carry (long,X) $00000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $1F.b		; 02 1F ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$B2.b		; 69 B2 ; Add #$B2.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$C5.b		; A9 C5 ; Load #$C5.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF70.l		; 22 70 DF 05 ; Jump to subroutine long $05DF70.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $C6E6.w		; 20 E6 C6 ; Jump to subroutine at $C6E6.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $C737.w		; 20 37 C7 ; Jump to subroutine at $C737.w [Writes: Stack Pointer] [Flow: call]
	jsr $D49F.w		; 20 9F D4 ; Jump to subroutine at $D49F.w [Writes: Stack Pointer] [Flow: call]
	lda #$B5.b		; A9 B5 ; Load #$B5.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	jsl $1EF4F3.l		; 22 F3 F4 1E ; Jump to subroutine long $1EF4F3.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $1A.b		; 05 1A ; Logical OR $1A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	sbc ($FF.b)		; F2 FF ; Subtract with carry (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldx $0000.w		; AE 00 00 ; Load $0000.w into X register [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000082.l,X		; FF 82 00 00 ; Subtract with carry (long,X) $000082.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000AE.l,X		; FF AE 00 00 ; Subtract with carry (long,X) $0000AE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000080.l,X		; FF 80 00 00 ; Subtract with carry (long,X) $000080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $85.b,S		; 03 85 ; OR accumulator with stack relative $85.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: NCZ]
	ora [$BD.b]		; 07 BD ; OR accumulator with memory (long) [$BD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$07.b		; 69 07 ; Add #$07.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$C7.b		; A9 C7 ; Load #$C7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $C762.w		; 20 62 C7 ; Jump to subroutine at $C762.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E80.w,X		; BD 80 0E ; Load $0E80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	sta $C7.b,S		; 83 C7 ; Store accumulator (stack relative) $C7.b,S [Reads: Stack Pointer, Accumulator]
	adc $20C7.w		; 6D C7 20 ; Add $20C7.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $2922D4.l,X		; 9F D4 22 29 ; Store accumulator (long,X) $2922D4.l,X [Reads: Accumulator, X Index]
	sbc ($06.b),Y		; F1 06 ; Subtract with carry ($06.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $0FF540.l		; 22 40 F5 0F ; Jump to subroutine long $0FF540.l [Writes: Stack Pointer] [Flow: call]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	jsl $0791B9.l		; 22 B9 91 07 ; Jump to subroutine long $0791B9.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $CB01.w		; 20 01 CB ; Jump to subroutine at $CB01.w [Writes: Stack Pointer] [Flow: call]
	jsr $D49F.w		; 20 9F D4 ; Jump to subroutine at $D49F.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cmp [$96.b]		; C7 96 ; Compare accumulator (long) [$96.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp #$BD.b		; C9 BD ; Compare #$BD.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda $DEC7.w,Y		; B9 C7 DE ; Load $DEC7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp [$E7.b]		; C7 E7 ; Compare accumulator (long) [$E7.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$FF.b]		; C7 FF ; Compare accumulator (long) [$FF.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$49.b]		; C7 49 ; Compare accumulator (long) [$49.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$76.b		; C9 76 ; Compare #$76.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$95.b		; C9 95 ; Compare #$95.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1E.b		; 00 1E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $C7B1.w,Y		; D9 B1 C7 ; Compare accumulator $C7B1.w,Y [Reads: Y Index] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$F2.b		; A9 F2 ; Load #$F2.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$F3.b		; A9 F3 ; Load #$F3.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$F5.b		; A9 F5 ; Load #$F5.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	nop		; EA ; No operation
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cpx $EEED.w		; EC ED EE ; Compare $EEED.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $F6F1F0.l		; EF F0 F1 F6 ; Subtract with carry (long) $F6F1F0.l [Writes: Accumulator] [Flags: NCVZ]
	sbc [$F8.b],Y		; F7 F8 ; Subtract with carry (long indexed) [$F8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FBFA.w,Y		; F9 FA FB ; Subtract with carry $FBFA.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($00FD.w,X)		; FC FD 00 ; Jump to subroutine indirect indexed ($00FD.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	stz $03.b		; [PATTERN: Memory clearing operation] 64 03 ; Store zero to $03.b
	lda $7EF3C7.l		; AF C7 F3 7E ; Load long $7EF3C7.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $07		; B0 07 ; Branch if carry set to $B0, $07 [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $01.b		; 64 01 ; Store zero to $01.b
	jmp $C92F.w		; 4C 2F C9 ; Jump to $C92F.w [Flow: jump]
	lda $7EF34E.l		; AF 4E F3 7E ; Load long $7EF34E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $C92F.w		; 4C 2F C9 ; Jump to $C92F.w [Flow: jump]
	lda $7EF374.l		; AF 74 F3 7E ; Load long $7EF374.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $C92F.w		; 4C 2F C9 ; Jump to $C92F.w [Flow: jump]
	lda $7EF344.l		; AF 44 F3 7E ; Load long $7EF344.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $C92F.w		; 4C 2F C9 ; Jump to $C92F.w [Flow: jump]
	lda $7EF356.l		; AF 56 F3 7E ; Load long $7EF356.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $C92F.w		; 4C 2F C9 ; Jump to $C92F.w [Flow: jump]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $7E		; B0 7E ; Branch if carry set to $B0, $7E [Flow: branch]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $07		; B0 07 ; Branch if carry set to $B0, $07 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $6F		; B0 6F ; Branch if carry set to $B0, $6F [Flow: branch]
	lda $7EF37B.l		; AF 7B F3 7E ; Load long $7EF37B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $62		; B0 62 ; Branch if carry set to $B0, $62 [Flow: branch]
	lda $7EF347.l		; AF 47 F3 7E ; Load long $7EF347.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $55		; B0 55 ; Branch if carry set to $B0, $55 [Flow: branch]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $46		; B0 46 ; Branch if carry set to $B0, $46 [Flow: branch]
	lda $7EF3C9.l		; AF C9 F3 7E ; Load long $7EF3C9.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $37		; B0 37 ; Branch if carry set to $B0, $37 [Flow: branch]
	lda $7EF352.l		; AF 52 F3 7E ; Load long $7EF352.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $2A		; B0 2A ; Branch if carry set to $B0, $2A [Flow: branch]
	lda $7EF2DB.l		; AF DB F2 7E ; Load long $7EF2DB.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $1B		; B0 1B ; Branch if carry set to $B0, $1B [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $07		; B0 07 ; Branch if carry set to $B0, $07 [Flow: branch]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $C953.w		; 20 53 C9 ; Jump to subroutine at $C953.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF3C6.l		; AF C6 F3 7E ; Load long $7EF3C6.l into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$40.b		; 49 40 ; Exclusive OR #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3C6.l		; 8F C6 F3 7E ; Store accumulator (long) $7EF3C6.l [Reads: Accumulator]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0000.w,Y		; B9 00 00 ; Load $0000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $C829.w,Y		; B9 29 C8 ; Load $C829.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $C839.w,Y		; B9 39 C8 ; Load $C839.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $03.b		; A4 03 ; Load $03.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $B0, $02		; [PATTERN: Memory clearing operation] B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	sty $03.b		; 84 03 ; Store Y register to $03.b [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $02.b		; [PATTERN: Memory clearing operation] 64 02 ; Store zero to $02.b
	stz $04.b		; 64 04 ; Store zero to $04.b
	stz $06.b		; 64 06 ; Store zero to $06.b
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $C7B1.w,Y		; B9 B1 C7 ; Load $C7B1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp $CA2D.w		; 4C 2D CA ; Jump to $CA2D.w [Flow: jump]
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $C7B1.w,Y		; F9 B1 C7 ; Subtract with carry $C7B1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	lda $D2C9.w		; AD C9 D2 ; Load $D2C9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$DB.b		; C9 DB ; Compare #$DB.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$F3.b		; C9 F3 ; Compare #$F3.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$49.b		; C9 49 ; Compare #$49.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $81CA.w,X		; 1D CA 81 ; OR accumulator with memory $81CA.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ldy #$CA.b		; A0 CA ; Load #$CA.b into Y register [Writes: Y Index] [Flags: NZ]
	stz $0DC0.w,X		; 9E C0 0D ; Store zero to $0DC0.w,X [Reads: X Index]
	jsl $0DBA71.l		; 22 71 BA 0D ; Jump to subroutine long $0DBA71.l [Writes: Stack Pointer] [Flow: call]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0D90.w,X		; 9D 90 0D ; Store accumulator to $0D90.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $C7B1.w,Y		; D9 B1 C7 ; Compare accumulator $C7B1.w,Y [Reads: Y Index] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$F2.b		; A9 F2 ; Load #$F2.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$F3.b		; A9 F3 ; Load #$F3.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$F5.b		; A9 F5 ; Load #$F5.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; [PATTERN: Memory clearing operation] A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D80.w,X		; 9D 80 0D ; Store accumulator to $0D80.w,X [Reads: Accumulator, X Index]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $02.b		; [PATTERN: Memory clearing operation] 64 02 ; Store zero to $02.b
	stz $04.b		; 64 04 ; Store zero to $04.b
	stz $06.b		; 64 06 ; Store zero to $06.b
	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $C7B1.w,Y		; B9 B1 C7 ; Load $C7B1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$2710.w		; C9 10 27 ; Compare #$2710.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	sbc #$2710.w		; E9 10 27 ; Subtract #$2710.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $F6		; 80 F6 ; Branch always to $80, $F6 [Flow: branch]
	cmp #$03E8.w		; C9 E8 03 ; Compare #$03E8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	sbc #$0064.w		; E9 64 00 ; Subtract #$0064.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $F4		; 80 F4 ; Branch always to $80, $F4 [Flow: branch]
	cmp #$0064.w		; C9 64 00 ; Compare #$0064.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	sbc #$0064.w		; E9 64 00 ; Subtract #$0064.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $F4		; 80 F4 ; Branch always to $80, $F4 [Flow: branch]
	cmp #$000A.w		; C9 0A 00 ; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	sbc #$000A.w		; E9 0A 00 ; Subtract #$000A.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $F4		; 80 F4 ; Branch always to $80, $F4 [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $02.b		; 05 02 ; Logical OR $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1CF2.w		; 8D F2 1C ; Store accumulator to $1CF2.w [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1CF3.w		; 8D F3 1C ; Store accumulator to $1CF3.w [Reads: Accumulator]
	lda #$F4.b		; A9 F4 ; Load #$F4.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0D90.w,X		; BC 90 0D ; Load Y register $0D90.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $C7B1.w,Y		; F9 B1 C7 ; Subtract with carry $C7B1.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	stz $02E4.w		; 9C E4 02 ; Store zero to $02E4.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $D0, $FF		; D0 FF ; Branch if not equal to $D0, $FF [Flow: branch]
	tsb $0000.w		; 0C 00 00 ; Test and set bits $0000.w [Reads: Accumulator] [Flags: Z]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00002C.l,X		; FF 2C 00 00 ; Subtract with carry (long,X) $00002C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00402C.l,X		; FF 2C 40 00 ; Subtract with carry (long,X) $00402C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00000A.l,X		; FF 0A 00 00 ; Subtract with carry (long,X) $00000A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00002A.l,X		; FF 2A 00 00 ; Subtract with carry (long,X) $00002A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00402A.l,X		; FF 2A 40 00 ; Subtract with carry (long,X) $00402A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $66FFD8.l,X		; FF D8 FF 66 ; Subtract with carry (long,X) $66FFD8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004066.l,X		; FF 66 40 00 ; Subtract with carry (long,X) $004066.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $66FFD8.l,X		; FF D8 FF 66 ; Subtract with carry (long,X) $66FFD8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $68FFD8.l,X		; FF D8 FF 68 ; Subtract with carry (long,X) $68FFD8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D8.b		; 00 D8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004068.l,X		; FF 68 40 00 ; Subtract with carry (long,X) $004068.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $68FFD8.l,X		; FF D8 FF 68 ; Subtract with carry (long,X) $68FFD8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $AF.b		; 02 AF ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc ($7E.b,S),Y		; F3 7E ; Subtract with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$A1.b		; 69 A1 ; Add #$A1.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$CA.b		; A9 CA ; Load #$CA.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$31.b		; A9 31 ; Load #$31.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $1DF65D.l		; 22 5D F6 1D ; Jump to subroutine long $1DF65D.l [Writes: Stack Pointer] [Flow: call]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Y Index, Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Y Index, Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Y Index, Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Y Index, Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E80.w,Y		; 99 80 0E ; Store accumulator to $0E80.w,Y [Reads: Y Index, Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F60.w,Y		; 99 60 0F ; Store accumulator to $0F60.w,Y [Reads: Y Index, Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0BA0.w,Y		; 99 A0 0B ; Store accumulator to $0BA0.w,Y [Reads: Y Index, Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $CB5C.w		; 20 5C CB ; Jump to subroutine at $CB5C.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1AF92C.l		; 22 2C F9 1A ; Jump to subroutine long $1AF92C.l [Writes: Stack Pointer] [Flow: call]
	jsr $D49F.w		; 20 9F D4 ; Jump to subroutine at $D49F.w [Writes: Stack Pointer] [Flow: call]
	jsl $05DCA2.l		; 22 A2 DC 05 ; Jump to subroutine long $05DCA2.l [Writes: Stack Pointer] [Flow: call]
	jsl $06EAA0.l		; 22 A0 EA 06 ; Jump to subroutine long $06EAA0.l [Writes: Stack Pointer] [Flow: call]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$03.b		; 49 03 ; Exclusive OR #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	ror $E0CB.w,X		; 7E CB E0 ; Rotate right $E0CB.w,X [Reads: X Index] [Flags: NCZ]
	wai		; CB ; Wait for interrupt
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $22.b		; C5 22 ; Compare $22.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	lda #$CC.b		; A9 CC ; Load #$CC.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E1F0.l		; 22 F0 E1 05 ; Jump to subroutine long $05E1F0.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $21		; 90 21 ; Branch if carry clear to $90, $21 [Flow: branch]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7FFE00.l		; 8F 00 FE 7F ; Store accumulator (long) $7FFE00.l [Reads: Accumulator]
	sta $7FFE01.l		; [PATTERN: Memory clearing operation] 8F 01 FE 7F ; Store accumulator (long) $7FFE01.l [Reads: Accumulator]
	sta $7FFE02.l		; 8F 02 FE 7F ; Store accumulator (long) $7FFE02.l [Reads: Accumulator]
	sta $7FFE03.l		; 8F 03 FE 7F ; Store accumulator (long) $7FFE03.l [Reads: Accumulator]
	stz $0D90.w,X		; 9E 90 0D ; Store zero to $0D90.w,X [Reads: X Index]
	stz $0ABF.w		; 9C BF 0A ; Store zero to $0ABF.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E1F0.l		; 22 F0 E1 05 ; Jump to subroutine long $05E1F0.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0D90.w,X		; FE 90 0D ; Increment memory $0D90.w,X [Reads: X Index] [Flags: NZ]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$3F.b		; C9 3F ; Compare #$3F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	stz $0D90.w,X		; 9E 90 0D ; Store zero to $0D90.w,X [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $7FFE00.l		; AF 00 FE 7F ; Load long $7FFE00.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7FFE00.l		; 8F 00 FE 7F ; Store accumulator (long) $7FFE00.l [Reads: Accumulator]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $7FFE02.l		; AF 02 FE 7F ; Load long $7FFE02.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7FFE02.l		; 8F 02 FE 7F ; Store accumulator (long) $7FFE02.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $CBF2.w		; 20 F2 CB ; Jump to subroutine at $CBF2.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DCDA7.l		; 22 A7 CD 0D ; Jump to subroutine long $0DCDA7.l [Writes: Stack Pointer] [Flow: call]
	jsr $D49F.w		; 20 9F D4 ; Jump to subroutine at $D49F.w [Writes: Stack Pointer] [Flow: call]
	jsl $05DCA2.l		; 22 A2 DC 05 ; Jump to subroutine long $05DCA2.l [Writes: Stack Pointer] [Flow: call]
	stz $0EB0.w,X		; 9E B0 0E ; Store zero to $0EB0.w,X [Reads: X Index]
	jsl $1EF4F3.l		; 22 F3 F4 1E ; Jump to subroutine long $1EF4F3.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DC0.w,X		; 9D C0 0D ; Store accumulator to $0DC0.w,X [Reads: Accumulator, X Index]
	lda $0ABF.w		; AD BF 0A ; Load $0ABF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $0D80.w,X		; BD 80 0D ; Load $0D80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	and $A7CC.w		; 2D CC A7 ; Logical AND $A7CC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $CCF4.w		; CC F4 CC ; Compare $CCF4.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $CD.b		; 05 CD ; Logical OR $CD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $CD.b,X		; 16 CD ; Arithmetic shift left $CD.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E1F0.l		; 22 F0 E1 05 ; Jump to subroutine long $05E1F0.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $7FFE00.l		; AF 00 FE 7F ; Load long $7FFE00.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7FFE04.l		; [PATTERN: Memory clearing operation] 8F 04 FE 7F ; Store accumulator (long) $7FFE04.l [Reads: Accumulator]
	lda $7FFE02.l		; AF 02 FE 7F ; Load long $7FFE02.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7FFE06.l		; 8F 06 FE 7F ; Store accumulator (long) $7FFE06.l [Reads: Accumulator]
	stz $00.b		; 64 00 ; Store zero to $00.b
	stz $02.b		; 64 02 ; Store zero to $02.b
	stz $04.b		; [PATTERN: Memory clearing operation] 64 04 ; Store zero to $04.b
	stz $06.b		; 64 06 ; Store zero to $06.b
	lda $7FFE04.l		; AF 04 FE 7F ; Load long $7FFE04.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$1770.w		; C9 70 17 ; Compare #$1770.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $05		; 90 05 ; Branch if carry clear to $90, $05 [Flow: branch]
	sbc #$1770.w		; E9 70 17 ; Subtract #$1770.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $F6		; 80 F6 ; Branch always to $80, $F6 [Flow: branch]
	cmp #$0258.w		; C9 58 02 ; Compare #$0258.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	sbc #$0258.w		; E9 58 02 ; Subtract #$0258.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $F4		; 80 F4 ; Branch always to $80, $F4 [Flow: branch]
	cmp #$003C.w		; C9 3C 00 ; Compare #$003C.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	sbc #$003C.w		; E9 3C 00 ; Subtract #$003C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $F4		; 80 F4 ; Branch always to $80, $F4 [Flow: branch]
	cmp #$000A.w		; C9 0A 00 ; Compare #$000A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	sbc #$000A.w		; E9 0A 00 ; Subtract #$000A.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $F4		; 80 F4 ; Branch always to $80, $F4 [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1CF2.w		; 8D F2 1C ; Store accumulator to $1CF2.w [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1CF3.w		; 8D F3 1C ; Store accumulator to $1CF3.w [Reads: Accumulator]
	lda #$CB.b		; A9 CB ; Load #$CB.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E1F0.l		; 22 F0 E1 05 ; Jump to subroutine long $05E1F0.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7EF280.l,X		; BF 80 F2 7E ; Load long $7EF280.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	lda #$CF.b		; A9 CF ; Load #$CF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7FFE05.l		; AF 05 FE 7F ; Load long $7FFE05.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	lda $7FFE04.l		; AF 04 FE 7F ; Load long $7FFE04.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $12		; B0 12 ; Branch if carry set to $B0, $12 [Flow: branch]
	inc $0D80.w,X		; FE 80 0D ; Increment memory $0D80.w,X [Reads: X Index] [Flags: NZ]
	lda #$CD.b		; A9 CD ; Load #$CD.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$CE.b		; A9 CE ; Load #$CE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E219.l		; 22 19 E2 05 ; Jump to subroutine long $05E219.l [Writes: Stack Pointer] [Flow: call]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$CE.b		; A9 CE ; Load #$CE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E1F0.l		; 22 F0 E1 05 ; Jump to subroutine long $05E1F0.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$CD.b		; A9 CD ; Load #$CD.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$CF.b		; A9 CF ; Load #$CF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $05E1A7.l		; 22 A7 E1 05 ; Jump to subroutine long $05E1A7.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	sta $0EB0.w,X		; 9D B0 0E ; Store accumulator to $0EB0.w,X [Reads: Accumulator, X Index]
	sta $0DE0.w,X		; 9D E0 0D ; Store accumulator to $0DE0.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004002.l,X		; FF 02 40 00 ; Subtract with carry (long,X) $004002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004002.l,X		; FF 02 40 00 ; Subtract with carry (long,X) $004002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000002.l,X		; FF 02 00 00 ; Subtract with carry (long,X) $000002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000002.l,X		; FF 02 00 00 ; Subtract with carry (long,X) $000002.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $8B.b		; 02 8B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$27.b		; 69 27 ; Add #$27.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$CD.b		; A9 CD ; Load #$CD.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sbc $20FF.w,Y		; F9 FF 20 ; Subtract with carry $20FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000120.l,X		; FF 20 01 00 ; Subtract with carry (long,X) $000120.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000120.l,X		; FF 20 01 00 ; Subtract with carry (long,X) $000120.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000120.l,X		; FF 20 01 00 ; Subtract with carry (long,X) $000120.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000120.l,X		; FF 20 01 00 ; Subtract with carry (long,X) $000120.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000120.l,X		; FF 20 01 00 ; Subtract with carry (long,X) $000120.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004120.l,X		; FF 20 41 00 ; Subtract with carry (long,X) $004120.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004120.l,X		; FF 20 41 00 ; Subtract with carry (long,X) $004120.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$20.b		; C0 20 ; Compare #$20.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $CE4F.w,Y		; B9 4F CE ; Load $CE4F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AE8.w		; 8D E8 0A ; Store accumulator to $0AE8.w [Reads: Accumulator]
	lda $CE50.w,Y		; B9 50 CE ; Load $CE50.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AEA.w		; 8D EA 0A ; Store accumulator to $0AEA.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$CF.b		; 69 CF ; Add #$CF.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$CD.b		; A9 CD ; Load #$CD.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000E20.l,X		; FF 20 0E 00 ; Subtract with carry (long,X) $000E20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000E20.l,X		; FF 20 0E 00 ; Subtract with carry (long,X) $000E20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $26.b		; 00 26 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $0200.w		; 4E 00 02 ; Logical shift right $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000E0E.l,X		; FF 0E 0E 00 ; Subtract with carry (long,X) $000E0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000E0E.l,X		; FF 0E 0E 00 ; Subtract with carry (long,X) $000E0E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000E22.l,X		; FF 22 0E 00 ; Subtract with carry (long,X) $000E22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $000E22.l,X		; FF 22 0E 00 ; Subtract with carry (long,X) $000E22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $004E22.l,X		; FF 22 4E 00 ; Subtract with carry (long,X) $004E22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $28.b		; 00 28 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $0200.w		; 4E 00 02 ; Logical shift right $0200.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $004E22.l,X		; FF 22 4E 00 ; Subtract with carry (long,X) $004E22.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $0200.w		; 4E 00 02 ; Logical shift right $0200.w [Flags: NCZ]
	sbc $01FF.w,Y		; F9 FF 01 ; Subtract with carry $01FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $000E.w		; 0C 0E 00 ; Test and set bits $000E.w [Reads: Accumulator] [Flags: Z]
	cop $F9.b		; 02 F9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0A0001.l,X		; FF 01 00 0A ; Subtract with carry (long,X) $0A0001.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $000E.w		; 0C 0E 00 ; Test and set bits $000E.w [Reads: Accumulator] [Flags: Z]
	cop $8B.b		; 02 8B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$91.b		; 69 91 ; Add #$91.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$CE.b		; 69 CE ; Add #$CE.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $000A.w,Y		; BE 0A 00 ; Load X register $000A.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $000A.w,Y		; BE 0A 00 ; Load X register $000A.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $000A.w,Y		; BE 0A 00 ; Load X register $000A.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $000A.w,Y		; BE 0A 00 ; Load X register $000A.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$59.b		; 69 59 ; Add #$59.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$CF.b		; A9 CF ; Load #$CF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $FF		; F0 FF ; Branch if equal to $F0, $FF [Flow: branch]
	inc $06.b		; E6 06 ; Increment $06.b [Reads: Direct Page] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0006C8.l,X		; FF C8 06 00 ; Subtract with carry (long,X) $0006C8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0006E6.l,X		; FF E6 06 00 ; Subtract with carry (long,X) $0006E6.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0006CA.l,X		; FF CA 06 00 ; Subtract with carry (long,X) $0006CA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0006E8.l,X		; FF E8 06 00 ; Subtract with carry (long,X) $0006E8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0006CA.l,X		; FF CA 06 00 ; Subtract with carry (long,X) $0006CA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000CC.l,X		; FF CC 00 00 ; Subtract with carry (long,X) $0000CC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0000DC.l,X		; FF DC 00 00 ; Subtract with carry (long,X) $0000DC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $8B.b		; 02 8B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8BFF.w,X		; FD FF 8B ; Subtract with carry $8BFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8B0000.l,X		; FF 00 00 8B ; Subtract with carry (long,X) $8B0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00008A.l,X		; FF 8A 00 00 ; Subtract with carry (long,X) $00008A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $FB.b		; 02 FB ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8A0000.l,X		; FF 00 00 8A ; Subtract with carry (long,X) $8A0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000086.l,X		; FF 86 00 00 ; Subtract with carry (long,X) $000086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F9.b		; 02 F9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $860000.l,X		; FF 00 00 86 ; Subtract with carry (long,X) $860000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $008086.l,X		; FF 86 80 00 ; Subtract with carry (long,X) $008086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $F7.b		; 02 F7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $860000.l,X		; FF 00 00 86 ; Subtract with carry (long,X) $860000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F7.b		; 00 F7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00C086.l,X		; FF 86 C0 00 ; Subtract with carry (long,X) $00C086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $09.b		; 02 09 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	cop $F7.b		; 02 F7 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $860000.l,X		; FF 00 00 86 ; Subtract with carry (long,X) $860000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004086.l,X		; FF 86 40 00 ; Subtract with carry (long,X) $004086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00FF.w,Y		; F9 FF 00 ; Subtract with carry $00FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $40.b		; 86 40 ; Store X register to $40.b [Reads: X Index]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,X		; 9D 50 0F ; Store accumulator to $0F50.w,X [Reads: Accumulator, X Index]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$60.b		; 69 60 ; Add #$60.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $8CFFF0.l,X		; FF F0 FF 8C ; Subtract with carry (long,X) $8CFFF0.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00408C.l,X		; FF 8C 40 00 ; Subtract with carry (long,X) $00408C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AC0000.l,X		; FF 00 00 AC ; Subtract with carry (long,X) $AC0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $8AFFF3.l,X		; FF F3 FF 8A ; Subtract with carry (long,X) $8AFFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F3.b		; 00 F3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00408A.l,X		; FF 8A 40 00 ; Subtract with carry (long,X) $00408A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AC0000.l,X		; FF 00 00 AC ; Subtract with carry (long,X) $AC0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $8AFFF8.l,X		; FF F8 FF 8A ; Subtract with carry (long,X) $8AFFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00408A.l,X		; FF 8A 40 00 ; Subtract with carry (long,X) $00408A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AC0000.l,X		; FF 00 00 AC ; Subtract with carry (long,X) $AC0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $8AFFFC.l,X		; FF FC FF 8A ; Subtract with carry (long,X) $8AFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00408A.l,X		; FF 8A 40 00 ; Subtract with carry (long,X) $00408A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AA0000.l,X		; FF 00 00 AA ; Subtract with carry (long,X) $AA0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $AA0000.l,X		; FF 00 00 AA ; Subtract with carry (long,X) $AA0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $AA0000.l,X		; FF 00 00 AA ; Subtract with carry (long,X) $AA0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$42.b		; 69 42 ; Add #$42.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$D1.b		; A9 D1 ; Load #$D1.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $02FF.w,Y		; F9 FF 02 ; Subtract with carry $02FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $02FF.w,Y		; F9 FF 02 ; Subtract with carry $02FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0000.w		; 8D 00 00 ; Store accumulator to $0000.w [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0000.w		; 8D 00 00 ; Store accumulator to $0000.w [Reads: Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $01FF.w,Y		; F9 FF 01 ; Subtract with carry $01FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $01FF.w,Y		; F9 FF 01 ; Subtract with carry $01FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0200.w		; 0D 00 02 ; Logical OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0000.w		; 8D 00 00 ; Store accumulator to $0000.w [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0000.w		; 8D 00 00 ; Store accumulator to $0000.w [Reads: Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $4C.b		; 04 4C ; Test and set bits $4C.b [Reads: Accumulator] [Flags: Z]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $08FF.w,Y		; F9 FF 08 ; Subtract with carry $08FF.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0000.w		; 8D 00 00 ; Store accumulator to $0000.w [Reads: Accumulator]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $0000.w		; 8D 00 00 ; Store accumulator to $0000.w [Reads: Accumulator]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $07FFFF.l,X		; FF FF FF 07 ; Subtract with carry (long,X) $07FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $0200.w		; 4D 00 02 ; Exclusive OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0C.b,S		; 23 0C ; AND accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $0C.b,S		; 23 0C ; AND accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $8D.b		; 05 8D ; Logical OR $8D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0007FF.l,X		; FF FF 07 00 ; Subtract with carry (long,X) $0007FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $8D.b		; 06 8D ; Arithmetic shift left $8D.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $0E.b		; 02 0E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $070000.l,X		; FF 00 00 07 ; Subtract with carry (long,X) $070000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $0200.w		; 4D 00 02 ; Exclusive OR $0200.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $FF.b,X		; F6 FF ; Increment memory $FF.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $0D07FF.l		; EF FF 07 0D ; Subtract with carry (long) $0D07FF.l [Writes: Accumulator] [Flags: NCVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FFF400.l		; 0F 00 F4 FF ; OR accumulator with memory (long) $FFF400.l [Writes: Accumulator] [Flags: NZ]
	ora $8D.b,X		; 15 8D ; OR accumulator with memory $8D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $FFFC00.l		; 0F 00 FC FF ; OR accumulator with memory (long) $FFFC00.l [Writes: Accumulator] [Flags: NZ]
	ora $8D.b		; 05 8D ; Logical OR $8D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $FF.b		; E4 FF ; Compare $FF.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $0200.w		; 0E 00 02 ; Arithmetic shift left $0200.w [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $20FFED.l,X		; FF ED FF 20 ; Subtract with carry (long,X) $20FFED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004C20.l,X		; FF 20 4C 00 ; Subtract with carry (long,X) $004C20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000E08.l,X		; FF 08 0E 00 ; Subtract with carry (long,X) $000E08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000E08.l,X		; FF 08 0E 00 ; Subtract with carry (long,X) $000E08.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $20FFED.l,X		; FF ED FF 20 ; Subtract with carry (long,X) $20FFED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004C20.l,X		; FF 20 4C 00 ; Subtract with carry (long,X) $004C20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $20FFED.l,X		; FF ED FF 20 ; Subtract with carry (long,X) $20FFED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0200.w		; 0C 00 02 ; Test and set bits $0200.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $ED.b		; 00 ED ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $004C20.l,X		; FF 20 4C 00 ; Subtract with carry (long,X) $004C20.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$D203.w		; 69 03 D2 ; Add #$D203.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$0006.w		; A9 06 00 ; Load #$0006.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $D383.w,Y		; B9 83 D3 ; Load $D383.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0107.w		; 8D 07 01 ; Store accumulator to $0107.w [Reads: Accumulator]
	lda $D38A.w,Y		; B9 8A D3 ; Load $D38A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0108.w		; 8D 08 01 ; Store accumulator to $0108.w [Reads: Accumulator]
	jsl $05DF70.l		; 22 70 DF 05 ; Jump to subroutine long $05DF70.l [Writes: Stack Pointer] [Flow: call]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $00000E.l,X		; FF 0E 00 00 ; Subtract with carry (long,X) $00000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0A0006.l,X		; FF 06 00 0A ; Subtract with carry (long,X) $0A0006.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $02,$00		; 44 00 02 ; Move block positive $02,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0A000E.l,X		; FF 0E 00 0A ; Subtract with carry (long,X) $0A000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00000E.l,X		; FF 0E 00 00 ; Subtract with carry (long,X) $00000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00000E.l,X		; FF 0E 00 00 ; Subtract with carry (long,X) $00000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0A0006.l,X		; FF 06 00 0A ; Subtract with carry (long,X) $0A0006.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $02,$00		; 44 00 02 ; Move block positive $02,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0A000E.l,X		; FF 0E 00 0A ; Subtract with carry (long,X) $0A000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00002E.l,X		; FF 2E 00 00 ; Subtract with carry (long,X) $00002E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00002E.l,X		; FF 2E 00 00 ; Subtract with carry (long,X) $00002E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0A0007.l,X		; FF 07 00 0A ; Subtract with carry (long,X) $0A0007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvp $02,$00		; 44 00 02 ; Move block positive $02,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $0A000E.l,X		; FF 0E 00 0A ; Subtract with carry (long,X) $0A000E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cop $8B.b		; 02 8B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$EB.b		; 69 EB ; Add #$EB.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$D3.b		; A9 D3 ; Load #$D3.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	jsl $05DF75.l		; 22 75 DF 05 ; Jump to subroutine long $05DF75.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $0FC1.w		; AD C1 0F ; Load $0FC1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $0CAA.w,X		; BD AA 0C ; Load $0CAA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $07		; 30 07 ; Branch if minus to $30, $07 [Flow: branch]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $40.b		; C6 40 ; Decrement $40.b [Reads: Direct Page] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $40.b		; C6 40 ; Decrement $40.b [Reads: Direct Page] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $40.b		; C4 40 ; Compare $40.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $40.b		; C4 40 ; Compare $40.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy $00.b		; C4 00 ; Compare $00.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $C00000.l,X		; FF 00 00 C0 ; Subtract with carry (long,X) $C00000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $C20000.l,X		; FF 00 00 C2 ; Subtract with carry (long,X) $C20000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $E00000.l,X		; FF 00 00 E0 ; Subtract with carry (long,X) $E00000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $E20000.l,X		; FF 00 00 E2 ; Subtract with carry (long,X) $E20000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $E40000.l,X		; FF 00 00 E4 ; Subtract with carry (long,X) $E40000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $40.b		; E6 40 ; Increment $40.b [Reads: Direct Page] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $40.b		; E6 40 ; Increment $40.b [Reads: Direct Page] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$D4BC.w		; 69 BC D4 ; Add #$D4BC.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FF.b,X		; F5 FF ; Subtract $FF.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $00C19B.l,X		; FF 9B C1 00 ; Subtract with carry (long,X) $00C19B.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,X)		; 41 00 ; Exclusive OR accumulator with memory ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFFA.l,X		; FF FA FF 8A ; Subtract with carry (long,X) $8AFFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $8AFFF2.l,X		; FF F2 FF 8A ; Subtract with carry (long,X) $8AFFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $F1.b		; 02 F1 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFFA.l,X		; FF FA FF 86 ; Subtract with carry (long,X) $86FFFA.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFF2.l,X		; FF F2 FF 86 ; Subtract with carry (long,X) $86FFF2.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFFC.l,X		; FF FC FF 86 ; Subtract with carry (long,X) $86FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFFC.l,X		; FF FC FF 86 ; Subtract with carry (long,X) $86FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $86FFFC.l,X		; FF FC FF 86 ; Subtract with carry (long,X) $86FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AAFFFC.l,X		; FF FC FF AA ; Subtract with carry (long,X) $AAFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AAFFFC.l,X		; FF FC FF AA ; Subtract with carry (long,X) $AAFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $FC.b		; 02 FC ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $AAFFFC.l,X		; FF FC FF AA ; Subtract with carry (long,X) $AAFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $8B.b		; 02 8B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $0DF0.w,X		; BD F0 0D ; Load $0DF0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0DD0.w,X		; 9E D0 0D ; Store zero to $0DD0.w,X [Reads: X Index]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc #$D58E.w		; 69 8E D5 ; Add #$D58E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$88.b		; C9 88 ; Compare #$88.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0B6B.w,Y		; B9 6B 0B ; Load $0B6B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $64		; D0 64 ; Branch if not equal to $D0, $64 [Flow: branch]
	lda $0D10.w,Y		; B9 10 0D ; Load $0D10.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0D30.w,Y		; B9 30 0D ; Load $0D30.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0D00.w,Y		; B9 00 0D ; Load $0D00.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0D20.w,Y		; B9 20 0D ; Load $0D20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $0FD8.w		; AD D8 0F ; Load $0FD8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $3F		; B0 3F ; Branch if carry set to $B0, $3F [Flow: branch]
	lda $0FDA.w		; AD DA 0F ; Load $0FDA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$FFF8.w		; 69 F8 FF ; Add #$FFF8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $30		; B0 30 ; Branch if carry set to $B0, $30 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $0E20.w,Y		; B9 20 0E ; Load $0E20.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$75.b		; C9 75 ; Compare #$75.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0E90.w,Y		; 99 90 0E ; Store accumulator to $0E90.w,Y [Reads: Y Index, Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	jsl $06ECE0.l		; 22 E0 EC 06 ; Jump to subroutine long $06ECE0.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0EA0.w,Y		; 99 A0 0E ; Store accumulator to $0EA0.w,Y [Reads: Y Index, Accumulator]
	lda $0D50.w,X		; BD 50 0D ; Load $0D50.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0F40.w,Y		; 99 40 0F ; Store accumulator to $0F40.w,Y [Reads: Y Index, Accumulator]
	lda $0D40.w,X		; BD 40 0D ; Load $0D40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0F30.w,Y		; 99 30 0F ; Store accumulator to $0F30.w,Y [Reads: Y Index, Accumulator]
	inc $0DA0.w,X		; FE A0 0D ; Increment memory $0DA0.w,X [Reads: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $CC0000.l,X		; FF 00 00 CC ; Subtract with carry (long,X) $CC0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $CE0000.l,X		; FF 00 00 CE ; Subtract with carry (long,X) $CE0000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CE.b		; 00 CE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $D74A.w		; 20 4A D7 ; Jump to subroutine at $D74A.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0FB5.w		; 8D B5 0F ; Store accumulator to $0FB5.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($90.b),Y		; B1 90 ; Load accumulator ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0FB6.w		; 8D B6 0F ; Store accumulator to $0FB6.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$D6A6.w		; 69 A6 D6 ; Add #$D6A6.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0018.w		; 69 18 00 ; Add #$0018.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	lda $92.b		; A5 92 ; Load $92.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0006.w		; 69 06 00 ; Add #$0006.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $92.b		; 85 92 ; Store accumulator to $92.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	lda $0E40.w,X		; BD 40 0E ; Load $0E40.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$06.b		; E9 06 ; Subtract #$06.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0E40.w,X		; 9D 40 0E ; Store accumulator to $0E40.w,X [Reads: Accumulator, X Index]
	jsr $D858.w		; 20 58 D8 ; Jump to subroutine at $D858.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $EDFD.w		; EE FD ED ; Increment $EDFD.w [Flags: NZ]
	sbc $FDEE.w,X		; FD EE FD ; Subtract with carry $FDEE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FD.w		; ED FD 00 ; Subtract $00FD.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $BD		; 80 BD ; Branch always to $80, $BD [Flow: branch]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $E8		; D0 E8 ; Branch if not equal to $D0, $E8 [Flow: branch]
	lda $0F00.w,X		; BD 00 0F ; Load $0F00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $E3		; D0 E3 ; Branch if not equal to $D0, $E3 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$14.b		; A0 14 ; Load #$14.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0D90.w,X		; 7D 90 0D ; Add $0D90.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$15.b		; A0 15 ; Load #$15.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0DA0.w,X		; 7D A0 0D ; Add $0DA0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$16.b		; A0 16 ; Load #$16.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $0DE0.w,X		; BD E0 0D ; Load $0DE0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $0DA0.w,X		; BD A0 0D ; Load $0DA0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $D80F.w,X		; BD 0F D8 ; Load $D80F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	jsr $D813.w		; 20 13 D8 ; Jump to subroutine at $D813.w [Writes: Stack Pointer] [Flow: call]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $0D.b		; A5 0D ; Load $0D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta WRMPYA.w		; 8D 02 42 ; Store accumulator to WRMPYA.w [Reads: Accumulator]
	lda $D80F.w,X		; BD 0F D8 ; Load $D80F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	jsr $D813.w		; 20 13 D8 ; Jump to subroutine at $D813.w [Writes: Stack Pointer] [Flow: call]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0B.b		; A6 0B ; Load $0B.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $D73A.w,X		; BD 3A D7 ; Load $D73A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $D742.w,X		; BD 42 D7 ; Load $D742.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $AD		; 10 AD ; Branch if plus to $10, $AD [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $06FEB4.l		; 22 B4 FE 06 ; Jump to subroutine long $06FEB4.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($66.b,S),Y		; 33 66 ; AND accumulator (stack relative indirect indexed) ($66.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $EACC.w,Y		; 99 CC EA ; Store accumulator to $EACC.w,Y [Reads: Y Index, Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($FC04.w,X)		; FC 04 FC ; Jump to subroutine indirect indexed ($FC04.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($FC04.w,X)		; FC 04 FC ; Jump to subroutine indirect indexed ($FC04.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	jsr ($0404.w,X)		; FC 04 04 ; Jump to subroutine indirect indexed ($0404.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($04FC.w,X)		; FC FC 04 ; Jump to subroutine indirect indexed ($04FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	jsr ($0404.w,X)		; FC 04 04 ; Jump to subroutine indirect indexed ($0404.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	jsr ($04FC.w,X)		; FC FC 04 ; Jump to subroutine indirect indexed ($04FC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $FC.b		; 04 FC ; Test and set bits $FC.b [Reads: Accumulator] [Flags: Z]
	jsr ($0404.w,X)		; FC 04 04 ; Jump to subroutine indirect indexed ($0404.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ror $7E6F.w		; 6E 6F 7E ; Rotate right $7E6F.w [Flags: NCZ]
	adc $737C63.l,X		; 7F 63 7C 73 ; Add long $737C63.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($7C0B.w,X)		; 7C 0B 7C ; Jump indirect indexed to ($7C0B.w,X) [Reads: X Index] [Flow: jump]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jmp ($F9EC.w,X)		; 7C EC F9 ; Jump indirect indexed to ($F9EC.w,X) [Reads: X Index] [Flow: jump]
	jsr ($EAF9.w,X)		; FC F9 EA ; Jump to subroutine indirect indexed ($EAF9.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and #$2F.b		; 29 2F ; Logical AND #$2F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $0ED0.w,X		; BD D0 0E ; Load $0ED0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $51		; F0 51 ; Branch if equal to $F0, $51 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $0E30.w,X		; BD 30 0E ; Load $0E30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$02.b		; 69 02 ; Add #$02.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA88.l		; 22 88 BA 0D ; Jump to subroutine long $0DBA88.l [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	stx $03.b		; 86 03 ; Store X register to $03.b [Reads: X Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0FB5.w		; AD B5 0F ; Load $0FB5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D817.w,X		; 7D 17 D8 ; Add $D817.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $0FB6.w		; AD B6 0F ; Load $0FB6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D82B.w,X		; 7D 2B D8 ; Add $D82B.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $D83F.w,X		; BD 3F D8 ; Load $D83F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldx $02.b		; A6 02 ; Load $02.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $D853.w,X		; BD 53 D8 ; Load $D853.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx $03.b		; A6 03 ; Load $03.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $D0		; 10 D0 ; Branch if plus to $10, $D0 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $06FEB4.l		; 22 B4 FE 06 ; Jump to subroutine long $06FEB4.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $80FFF8.l,X		; FF F8 FF 80 ; Subtract with carry (long,X) $80FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000082.l,X		; FF 82 00 00 ; Subtract with carry (long,X) $000082.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A00008.l,X		; FF 08 00 A0 ; Subtract with carry (long,X) $A00008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F9.b		; 02 F9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $80FFF9.l,X		; FF F9 FF 80 ; Subtract with carry (long,X) $80FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000082.l,X		; FF 82 00 00 ; Subtract with carry (long,X) $000082.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F9.b		; 02 F9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A00007.l,X		; FF 07 00 A0 ; Subtract with carry (long,X) $A00007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F9.b		; 02 F9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $84FFF9.l,X		; FF F9 FF 84 ; Subtract with carry (long,X) $84FFF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000086.l,X		; FF 86 00 00 ; Subtract with carry (long,X) $000086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F9.b		; 02 F9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A40007.l,X		; FF 07 00 A4 ; Subtract with carry (long,X) $A40007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $07.b		; 02 07 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $84FFF8.l,X		; FF F8 FF 84 ; Subtract with carry (long,X) $84FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F8.b		; 00 F8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000086.l,X		; FF 86 00 00 ; Subtract with carry (long,X) $000086.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $F8.b		; 02 F8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $A40008.l,X		; FF 08 00 A4 ; Subtract with carry (long,X) $A40008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F9FFFC.l,X		; FF FC FF F9 ; Subtract with carry (long,X) $F9FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F9FFF8.l,X		; FF F8 FF F9 ; Subtract with carry (long,X) $F9FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FEFFFC.l,X		; FF FC FF FE ; Subtract with carry (long,X) $FEFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $020000.l,X		; FF 00 00 02 ; Subtract with carry (long,X) $020000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F9FFFC.l,X		; FF FC FF F9 ; Subtract with carry (long,X) $F9FFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F9FFF8.l,X		; FF F8 FF F9 ; Subtract with carry (long,X) $F9FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FEFFFC.l,X		; FF FC FF FE ; Subtract with carry (long,X) $FEFFFC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $AAACAC.l,X		; FF AC AC AA ; Subtract with carry (long,X) $AAACAC.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $8C8C.w		; 8C 8C 8C ; Store Y register to $8C8C.w [Reads: Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $AAAC.w		; AC AC AA ; Load $AAAC.w into Y register [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	sty $8C8C.w		; 8C 8C 8C ; Store Y register to $8C8C.w [Reads: Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $4040.w		; AC 40 40 ; Load $4040.w into Y register [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	cpy #$8B.b		; C0 8B ; Compare #$8B.b with Y register [Reads: Y Index] [Flags: NCZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsl $06E416.l		; 22 16 E4 06 ; Jump to subroutine long $06E416.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $6C		; B0 6C ; Branch if carry set to $B0, $6C [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $0D90.w,X		; BD 90 0D ; Load $0D90.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D92F.w,X		; 7D 2F D9 ; Add $D92F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	and #$0100.w		; 29 00 01 ; Logical AND #$0100.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D94F.w,X		; 7D 4F D9 ; Add $D94F.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $D96F.w,X		; BD 6F D9 ; Load $D96F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $D97F.w,X		; BD 7F D9 ; Load $D97F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0F.b		; 05 0F ; Logical OR $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$D8AF.w		; 69 AF D8 ; Add #$D8AF.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $90.b		; A5 90 ; Load $90.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0004.w		; 69 04 00 ; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $90.b		; 85 90 ; Store accumulator to $90.b [Reads: Accumulator]
	inc $92.b		; E6 92 ; Increment $92.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $05DF6C.l		; 22 6C DF 05 ; Jump to subroutine long $05DF6C.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBB8A.l		; 22 8A BB 0D ; Jump to subroutine long $0DBB8A.l [Writes: Stack Pointer] [Flow: call]
	ldy #$0D.b		; A0 0D ; Load #$0D.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$55.b		; A9 55 ; Load #$55.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $1DF65F.l		; 22 5F F6 1D ; Jump to subroutine long $1DF65F.l [Writes: Stack Pointer] [Flow: call]
	.db $30, $5D		; 30 5D ; Branch if minus to $30, $5D [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0D10.w,Y		; 99 10 0D ; Store accumulator to $0D10.w,Y [Reads: Y Index, Accumulator]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0D30.w,Y		; 99 30 0D ; Store accumulator to $0D30.w,Y [Reads: Y Index, Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0D00.w,Y		; 99 00 0D ; Store accumulator to $0D00.w,Y [Reads: Y Index, Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0D20.w,Y		; 99 20 0D ; Store accumulator to $0D20.w,Y [Reads: Y Index, Accumulator]
	lda $0E60.w,Y		; B9 60 0E ; Load $0E60.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$40.b		; 09 40 ; Logical OR #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E60.w,Y		; 99 60 0E ; Store accumulator to $0E60.w,Y [Reads: Y Index, Accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F50.w,Y		; 99 50 0F ; Store accumulator to $0F50.w,Y [Reads: Y Index, Accumulator]
	lda #$54.b		; A9 54 ; Load #$54.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F60.w,Y		; 99 60 0F ; Store accumulator to $0F60.w,Y [Reads: Y Index, Accumulator]
	sta $0E90.w,Y		; 99 90 0E ; Store accumulator to $0E90.w,Y [Reads: Y Index, Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E40.w,Y		; 99 40 0E ; Store accumulator to $0E40.w,Y [Reads: Y Index, Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $06EA12.l		; 22 12 EA 06 ; Jump to subroutine long $06EA12.l [Writes: Stack Pointer] [Flow: call]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0DF0.w,X		; 9D F0 0D ; Store accumulator to $0DF0.w,X [Reads: Accumulator, X Index]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E00.w,X		; 9D 00 0E ; Store accumulator to $0E00.w,X [Reads: Accumulator, X Index]
	stz $0BE0.w,X		; 9E E0 0B ; Store zero to $0BE0.w,X [Reads: X Index]
	lda #$48.b		; A9 48 ; Load #$48.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0CAA.w,X		; 9D AA 0C ; Store accumulator to $0CAA.w,X [Reads: Accumulator, X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000000.l,X		; FF 00 00 00 ; Subtract with carry (long,X) $000000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F600.w,X		; FD 00 F6 ; Subtract with carry $F600.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $00.b,X		; F6 00 ; Increment memory $00.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc $26.b,X		; F6 26 ; Increment memory $26.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $3A.b		; 06 3A ; Arithmetic shift left $3A.b [Reads: Direct Page] [Flags: NCZ]
	rol $06.b		; 26 06 ; Rotate left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $26.b		; 06 26 ; Arithmetic shift left $26.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	rol $06.b		; 26 06 ; Rotate left $06.b [Reads: Direct Page] [Flags: NCZ]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $8B.b		; 02 8B ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsl $06F864.l		; 22 64 F8 06 ; Jump to subroutine long $06F864.l [Writes: Stack Pointer] [Flow: call]
	jsl $06E416.l		; 22 16 E4 06 ; Jump to subroutine long $06E416.l [Writes: Stack Pointer] [Flow: call]
	lda $0DC0.w,X		; BD C0 0D ; Load $0DC0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $0DC0.w,X		; 7D C0 0D ; Add $0DC0.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $DA79.w,X		; 7D 79 DA ; Add $DA79.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $DA88.w,X		; 7D 88 DA ; Add $DA88.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $DA97.w,X		; BD 97 DA ; Load $DA97.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $DAA6.w,X		; 1D A6 DA ; OR accumulator with memory $DAA6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $DAB5.w,X		; BD B5 DA ; Load $DAB5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $CB		; 10 CB ; Branch if plus to $10, $CB [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	jsl $06DC54.l		; 22 54 DC 06 ; Jump to subroutine long $06DC54.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $201510.l,X		; FF 10 15 20 ; Subtract with carry (long,X) $201510.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $30.b		; 25 30 ; Logical AND $30.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $40.b,X		; 35 40 ; Logical AND $40.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $0A		; 50 0A ; Branch if overflow clear to $50, $0A [Flow: branch]
	ora $1E1914.l		; 0F 14 19 1E ; OR accumulator with memory (long) $1E1914.l [Writes: Accumulator] [Flags: NZ]
	and $28.b,S		; 23 28 ; AND accumulator with stack relative $28.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($30.b)		; 32 30 ; AND accumulator with memory (indirect) ($30.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $40.b,X		; 35 40 ; Logical AND $40.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $50.b		; 45 50 ; Exclusive OR $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $60.b,X		; 55 60 ; Exclusive OR accumulator with memory $60.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $1E		; 70 1E ; Branch if overflow set to $70, $1E [Flow: branch]
	and $28.b,S		; 23 28 ; AND accumulator with stack relative $28.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $3732.w		; 2D 32 37 ; Logical AND $3732.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $0946.w,X		; 3C 46 09 ; Test bits $0946.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$11.b		; 09 11 ; Logical OR #$11.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $E399.w		; 20 99 E3 ; Jump to subroutine at $E399.w [Writes: Stack Pointer] [Flow: call]
	jsr $DFA9.w		; 20 A9 DF ; Jump to subroutine at $DFA9.w [Writes: Stack Pointer] [Flow: call]
	jsr $FA70.w		; 20 70 FA ; Jump to subroutine at $FA70.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF373.l		; AF 73 F3 7E ; Load long $7EF373.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $38		; F0 38 ; Branch if equal to $F0, $38 [Flow: branch]
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF36E.l		; 8F 6E F3 7E ; Store accumulator (long) $7EF36E.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF373.l		; 8F 73 F3 7E ; Store accumulator (long) $7EF373.l [Reads: Accumulator]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	lda $7EF373.l		; AF 73 F3 7E ; Load long $7EF373.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF373.l		; 8F 73 F3 7E ; Store accumulator (long) $7EF373.l [Reads: Accumulator]
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF36E.l		; 8F 6E F3 7E ; Store accumulator (long) $7EF36E.l [Reads: Accumulator]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $012E.w		; AD 2E 01 ; Load $012E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$2D.b		; A9 2D ; Load #$2D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EF362.l		; AF 62 F3 7E ; Load long $7EF362.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7EF360.l		; CF 60 F3 7E ; Compare accumulator (long) $7EF360.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	.db $30, $0C		; 30 0C ; Branch if minus to $30, $0C [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$03E8.w		; C9 E8 03 ; Compare #$03E8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	lda #$03E7.w		; A9 E7 03 ; Load #$03E7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
	sta $7EF362.l		; 8F 62 F3 7E ; Store accumulator (long) $7EF362.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $012E.w		; AD 2E 01 ; Load $012E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $0CFD.w		; AD FD 0C ; Load $0CFD.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc $0CFD.w		; EE FD 0C ; Increment $0CFD.w [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$29.b		; A9 29 ; Load #$29.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $0CFD.w		; 9C FD 0C ; Store zero to $0CFD.w
	lda $7EF375.l		; AF 75 F3 7E ; Load long $7EF375.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	lda $7EF375.l		; AF 75 F3 7E ; Load long $7EF375.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF375.l		; 8F 75 F3 7E ; Store accumulator (long) $7EF375.l [Reads: Accumulator]
	lda $7EF370.l		; AF 70 F3 7E ; Load long $7EF370.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $7EF343.l		; AF 43 F3 7E ; Load long $7EF343.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $DB48.w,Y		; D9 48 DB ; Compare accumulator $DB48.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF343.l		; 8F 43 F3 7E ; Store accumulator (long) $7EF343.l [Reads: Accumulator]
	lda $7EF376.l		; AF 76 F3 7E ; Load long $7EF376.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	lda $7EF376.l		; AF 76 F3 7E ; Load long $7EF376.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF376.l		; 8F 76 F3 7E ; Store accumulator (long) $7EF376.l [Reads: Accumulator]
	lda $7EF371.l		; AF 71 F3 7E ; Load long $7EF371.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $7EF377.l		; AF 77 F3 7E ; Load long $7EF377.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $DB58.w,Y		; D9 58 DB ; Compare accumulator $DB58.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF377.l		; 8F 77 F3 7E ; Store accumulator (long) $7EF377.l [Reads: Accumulator]
	lda $7EF340.l		; AF 40 F3 7E ; Load long $7EF340.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $7EF340.l		; AF 40 F3 7E ; Load long $7EF340.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF340.l		; 8F 40 F3 7E ; Store accumulator (long) $7EF340.l [Reads: Accumulator]
	jsl $0DDB7F.l		; 22 7F DB 0D ; Jump to subroutine long $0DDB7F.l [Writes: Stack Pointer] [Flow: call]
	lda $02E4.w		; AD E4 02 ; Load $02E4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	lda $7EF372.l		; AF 72 F3 7E ; Load long $7EF372.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $DB60.w,X		; DD 60 DB ; Compare accumulator $DB60.w,X [Reads: X Index] [Flags: NCZ]
	.db $B0, $17		; B0 17 ; Branch if carry set to $B0, $17 [Flow: branch]
	lda $04CA.w		; AD CA 04 ; Load $04CA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $012E.w		; AD 2E 01 ; Load $012E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04CA.w		; 8D CA 04 ; Store accumulator to $04CA.w [Reads: Accumulator]
	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	dec $04CA.w		; CE CA 04 ; Decrement $04CA.w [Flags: NZ]
	lda $020A.w		; AD 0A 02 ; Load $020A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $5A		; D0 5A ; Branch if not equal to $D0, $5A [Flow: branch]
	lda $7EF372.l		; AF 72 F3 7E ; Load long $7EF372.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $67		; F0 67 ; Branch if equal to $F0, $67 [Flow: branch]
	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7EF36C.l		; CF 6C F3 7E ; Compare accumulator (long) $7EF36C.l [Reads: Accumulator] [Flags: NCZ]
	.db $90, $10		; 90 10 ; Branch if carry clear to $90, $10 [Flow: branch]
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF36D.l		; 8F 6D F3 7E ; Store accumulator (long) $7EF36D.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	.db $80, $4D		; 80 4D ; Branch always to $80, $4D [Flow: branch]
	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF36D.l		; 8F 6D F3 7E ; Store accumulator (long) $7EF36D.l [Reads: Accumulator]
	lda $012F.w		; AD 2F 01 ; Load $012F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7EF36C.l		; CF 6C F3 7E ; Compare accumulator (long) $7EF36C.l [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF36D.l		; 8F 6D F3 7E ; Store accumulator (long) $7EF36D.l [Reads: Accumulator]
	lda $7EF372.l		; AF 72 F3 7E ; Load long $7EF372.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	inc $020A.w		; EE 0A 02 ; Increment $020A.w [Flags: NZ]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0208.w		; 8D 08 02 ; Store accumulator to $0208.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	jsr $FC09.w		; 20 09 FC ; Jump to subroutine at $FC09.w [Writes: Stack Pointer] [Flow: call]
	jsr $F14F.w		; 20 4F F1 ; Jump to subroutine at $F14F.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $16.b		; E6 16 ; Increment $16.b [Reads: Direct Page] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$FFFF.w		; A9 FF FF ; Load #$FFFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	jsr $FB94.w		; 20 94 FB ; Jump to subroutine at $FB94.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $16.b		; E6 16 ; Increment $16.b [Reads: Direct Page] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $DD36.w		; 20 36 DD ; Jump to subroutine at $DD36.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $DFAF.w		; 20 AF DF ; Jump to subroutine at $DFAF.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0206.w		; EE 06 02 ; Increment $0206.w [Flags: NZ]
	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	cmp $DDAB.w,X		; DD AB DD ; Compare accumulator $DDAB.w,X [Reads: X Index] [Flags: NCZ]
	eor $6EDE.w,Y		; 59 DE 6E ; Exclusive OR accumulator with memory $6EDE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $DF15.w,X		; DE 15 DF ; Decrement memory $DF15.w,X [Reads: X Index] [Flags: NZ]
	lda #$DF.b		; A9 DF ; Load #$DF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	cmp $02DFFB.l,X		; DF FB DF 02 ; Compare accumulator (long,X) $02DFFB.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cpx #$8C.b		; E0 8C ; Compare #$8C.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$DF.b		; E0 DF ; Compare #$DF.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$FD.b		; E0 FD ; Compare #$FD.b with X register [Reads: X Index] [Flags: NCZ]
	sep #$46		; E2 46 ; Set processor status bits #$46 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc $C2.b,S		; E3 C2 ; Subtract stack-relative $C2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	jsr $00A2.w		; 20 A2 00 ; Jump to subroutine at $00A2.w [Writes: Stack Pointer] [Flow: call]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $009D.w		; 20 9D 00 ; Jump to subroutine at $009D.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $9D		; 10 9D ; Branch if plus to $10, $9D [Flow: branch]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	sta $1100.w,X		; 9D 00 11 ; Store accumulator to $1100.w,X [Reads: Accumulator, X Index]
	sta $1180.w,X		; 9D 80 11 ; Store accumulator to $1180.w,X [Reads: Accumulator, X Index]
	sta $1200.w,X		; 9D 00 12 ; Store accumulator to $1200.w,X [Reads: Accumulator, X Index]
	sta $1280.w,X		; 9D 80 12 ; Store accumulator to $1280.w,X [Reads: Accumulator, X Index]
	sta $1300.w,X		; 9D 00 13 ; Store accumulator to $1300.w,X [Reads: Accumulator, X Index]
	sta $1380.w,X		; 9D 80 13 ; Store accumulator to $1380.w,X [Reads: Accumulator, X Index]
	sta $1400.w,X		; 9D 00 14 ; Store accumulator to $1400.w,X [Reads: Accumulator, X Index]
	sta $1480.w,X		; 9D 80 14 ; Store accumulator to $1480.w,X [Reads: Accumulator, X Index]
	sta $1500.w,X		; 9D 00 15 ; Store accumulator to $1500.w,X [Reads: Accumulator, X Index]
	sta $1580.w,X		; 9D 80 15 ; Store accumulator to $1580.w,X [Reads: Accumulator, X Index]
	sta $1600.w,X		; 9D 00 16 ; Store accumulator to $1600.w,X [Reads: Accumulator, X Index]
	sta $1680.w,X		; 9D 80 16 ; Store accumulator to $1680.w,X [Reads: Accumulator, X Index]
	sta $1700.w,X		; 9D 00 17 ; Store accumulator to $1700.w,X [Reads: Accumulator, X Index]
	sta $1780.w,X		; 9D 80 17 ; Store accumulator to $1780.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $CA		; D0 CA ; Branch if not equal to $D0, $CA [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E399.w		; 20 99 E3 ; Jump to subroutine at $E399.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E3C8.w		; 20 C8 E3 ; Jump to subroutine at $E3C8.w [Writes: Stack Pointer] [Flow: call]
	jsr $E3D9.w		; 20 D9 E3 ; Jump to subroutine at $E3D9.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E3C8.w		; 20 C8 E3 ; Jump to subroutine at $E3C8.w [Writes: Stack Pointer] [Flow: call]
	jsr $E647.w		; 20 47 E6 ; Jump to subroutine at $E647.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E3C8.w		; 20 C8 E3 ; Jump to subroutine at $E3C8.w [Writes: Stack Pointer] [Flow: call]
	jsr $E6B6.w		; 20 B6 E6 ; Jump to subroutine at $E6B6.w [Writes: Stack Pointer] [Flow: call]
	jsr $E7B7.w		; 20 B7 E7 ; Jump to subroutine at $E7B7.w [Writes: Stack Pointer] [Flow: call]
	jsr $E9C8.w		; 20 C8 E9 ; Jump to subroutine at $E9C8.w [Writes: Stack Pointer] [Flow: call]
	jsr $ECE9.w		; 20 E9 EC ; Jump to subroutine at $ECE9.w [Writes: Stack Pointer] [Flow: call]
	jsr $ED04.w		; 20 04 ED ; Jump to subroutine at $ED04.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E3C8.w		; 20 C8 E3 ; Jump to subroutine at $E3C8.w [Writes: Stack Pointer] [Flow: call]
	jsr $ED29.w		; 20 29 ED ; Jump to subroutine at $ED29.w [Writes: Stack Pointer] [Flow: call]
	jsr $EE21.w		; 20 21 EE ; Jump to subroutine at $EE21.w [Writes: Stack Pointer] [Flow: call]
	jsr $EE3C.w		; 20 3C EE ; Jump to subroutine at $EE3C.w [Writes: Stack Pointer] [Flow: call]
	jsr $EE57.w		; 20 57 EE ; Jump to subroutine at $EE57.w [Writes: Stack Pointer] [Flow: call]
	jsr $EF39.w		; 20 39 EF ; Jump to subroutine at $EF39.w [Writes: Stack Pointer] [Flow: call]
	ldx #$12.b		; A2 12 ; Load #$12.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF340.l		; AF 40 F3 7E ; Load long $7EF340.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EF341.l,X		; 1F 41 F3 7E ; Logical OR long $7EF341.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $50		; F0 50 ; Branch if equal to $F0, $50 [Flow: branch]
	lda $7EF35C.l		; AF 5C F3 7E ; Load long $7EF35C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EF35D.l		; 0F 5D F3 7E ; OR accumulator with memory (long) $7EF35D.l [Writes: Accumulator] [Flags: NZ]
	ora $7EF35E.l		; 0F 5E F3 7E ; OR accumulator with memory (long) $7EF35E.l [Writes: Accumulator] [Flags: NZ]
	ora $7EF35F.l		; 0F 5F F3 7E ; OR accumulator with memory (long) $7EF35F.l [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	.db $80, $1E		; 80 1E ; Branch always to $80, $1E [Flow: branch]
	lda $7EF34F.l		; AF 4F F3 7E ; Load long $7EF34F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $7EF35C.l		; AF 5C F3 7E ; Load long $7EF35C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $7EF35D.l		; AF 5D F3 7E ; Load long $7EF35D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $7EF35E.l		; AF 5E F3 7E ; Load long $7EF35E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EF34F.l		; 8F 4F F3 7E ; Store accumulator (long) $7EF34F.l [Reads: Accumulator]
	jsr $DEB0.w		; 20 B0 DE ; Jump to subroutine at $DEB0.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	jsr $DEE2.w		; 20 E2 DE ; Jump to subroutine at $DEE2.w [Writes: Stack Pointer] [Flow: call]
	jsr $EB3A.w		; 20 3A EB ; Jump to subroutine at $EB3A.w [Writes: Stack Pointer] [Flow: call]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E3C8.w		; 20 C8 E3 ; Jump to subroutine at $E3C8.w [Writes: Stack Pointer] [Flow: call]
	jsr $EF67.w		; 20 67 EF ; Jump to subroutine at $EF67.w [Writes: Stack Pointer] [Flow: call]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0207.w		; 8D 07 02 ; Store accumulator to $0207.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $EA.b		; A5 EA ; Load $EA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $EA.b		; 85 EA ; Store accumulator to $EA.b [Reads: Accumulator]
	cmp #$FF18.w		; C9 18 FF ; Compare #$FF18.w with accumulator [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$12.b		; A2 12 ; Load #$12.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF340.l		; AF 40 F3 7E ; Load long $7EF340.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EF341.l,X		; 1F 41 F3 7E ; Logical OR long $7EF341.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	jsr $DEB0.w		; 20 B0 DE ; Jump to subroutine at $DEB0.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	jsr $DEE2.w		; 20 E2 DE ; Jump to subroutine at $DEE2.w [Writes: Stack Pointer] [Flow: call]
	jsr $EB3A.w		; 20 3A EB ; Jump to subroutine at $EB3A.w [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0200.w		; 8D 00 02 ; Store accumulator to $0200.w [Reads: Accumulator]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0200.w		; 8D 00 02 ; Store accumulator to $0200.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0200.w		; 8D 00 02 ; Store accumulator to $0200.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $0202.w		; AE 02 02 ; Load $0202.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EF33F.l,X		; BF 3F F3 7E ; Load long $7EF33F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0202.w		; 8D 02 02 ; Store accumulator to $0202.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$15.b		; C9 15 ; Compare #$15.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0202.w		; 8D 02 02 ; Store accumulator to $0202.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $DEBD.w		; 20 BD DE ; Jump to subroutine at $DEBD.w [Writes: Stack Pointer] [Flow: call]
	jsr $DEB0.w		; 20 B0 DE ; Jump to subroutine at $DEB0.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $DECB.w		; 20 CB DE ; Jump to subroutine at $DECB.w [Writes: Stack Pointer] [Flow: call]
	jsr $DEB0.w		; 20 B0 DE ; Jump to subroutine at $DEB0.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $F8		; 90 F8 ; Branch if carry clear to $90, $F8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $DEBD.w		; 20 BD DE ; Jump to subroutine at $DEBD.w [Writes: Stack Pointer] [Flow: call]
	jsr $DEBD.w		; 20 BD DE ; Jump to subroutine at $DEBD.w [Writes: Stack Pointer] [Flow: call]
	jsr $DEBD.w		; 20 BD DE ; Jump to subroutine at $DEBD.w [Writes: Stack Pointer] [Flow: call]
	jsr $DEBD.w		; 20 BD DE ; Jump to subroutine at $DEBD.w [Writes: Stack Pointer] [Flow: call]
	jsr $DEBD.w		; 20 BD DE ; Jump to subroutine at $DEBD.w [Writes: Stack Pointer] [Flow: call]
	jsr $DEB0.w		; 20 B0 DE ; Jump to subroutine at $DEB0.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $EC		; 90 EC ; Branch if carry clear to $90, $EC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $DECB.w		; 20 CB DE ; Jump to subroutine at $DECB.w [Writes: Stack Pointer] [Flow: call]
	jsr $DECB.w		; 20 CB DE ; Jump to subroutine at $DECB.w [Writes: Stack Pointer] [Flow: call]
	jsr $DECB.w		; 20 CB DE ; Jump to subroutine at $DECB.w [Writes: Stack Pointer] [Flow: call]
	jsr $DECB.w		; 20 CB DE ; Jump to subroutine at $DECB.w [Writes: Stack Pointer] [Flow: call]
	jsr $DECB.w		; 20 CB DE ; Jump to subroutine at $DECB.w [Writes: Stack Pointer] [Flow: call]
	jsr $DEB0.w		; 20 B0 DE ; Jump to subroutine at $DEB0.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $EC		; 90 EC ; Branch if carry clear to $90, $EC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0207.w		; EE 07 02 ; Increment $0207.w [Flags: NZ]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $BD.b		; 64 BD ; Store zero to $BD.b
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0200.w		; 8D 00 02 ; Store accumulator to $0200.w [Reads: Accumulator]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $BD.b		; A5 BD ; Load $BD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $55		; D0 55 ; Branch if not equal to $D0, $55 [Flow: branch]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $F7.b		; A5 F7 ; Load $F7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	ldx $0202.w		; AE 02 02 ; Load $0202.w into X register [Writes: X Index] [Flags: NZ]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF33F.l,X		; 9F 3F F3 7E ; Store accumulator (long,X) $7EF33F.l,X [Reads: Accumulator, X Index]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $DEEB.w		; 20 EB DE ; Jump to subroutine at $DEEB.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $1F		; 80 1F ; Branch always to $80, $1F [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $DF00.w		; 20 00 DF ; Jump to subroutine at $DF00.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $DED9.w		; 20 D9 DE ; Jump to subroutine at $DED9.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	jsr $DEE2.w		; 20 E2 DE ; Jump to subroutine at $DEE2.w [Writes: Stack Pointer] [Flow: call]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $BD.b		; 85 BD ; Store accumulator to $BD.b [Reads: Accumulator]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0207.w		; 8D 07 02 ; Store accumulator to $0207.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E3C8.w		; 20 C8 E3 ; Jump to subroutine at $E3C8.w [Writes: Stack Pointer] [Flow: call]
	jsr $E3D9.w		; 20 D9 E3 ; Jump to subroutine at $E3D9.w [Writes: Stack Pointer] [Flow: call]
	jsr $EB3A.w		; 20 3A EB ; Jump to subroutine at $EB3A.w [Writes: Stack Pointer] [Flow: call]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0200.w		; 8D 00 02 ; Store accumulator to $0200.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	jsr $FA85.w		; 20 85 FA ; Jump to subroutine at $FA85.w [Writes: Stack Pointer] [Flow: call]
	ldx $0202.w		; AE 02 02 ; Load $0202.w into X register [Writes: X Index] [Flags: NZ]
	lda $0DFA15.l,X		; BF 15 FA 0D ; Load long $0DFA15.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0303.w		; 8D 03 03 ; Store accumulator to $0303.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $EA.b		; A5 EA ; Load $EA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $EA.b		; [PATTERN: Memory clearing operation] 85 EA ; Store accumulator to $EA.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $D0, $32		; D0 32 ; Branch if not equal to $D0, $32 [Flow: branch]
	jsr $FA70.w		; 20 70 FA ; Jump to subroutine at $FA70.w [Writes: Stack Pointer] [Flow: call]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	stz $11.b		; 64 11 ; Store zero to $11.b
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $0DFA33.l		; 22 33 FA 0D ; Jump to subroutine long $0DFA33.l [Writes: Stack Pointer] [Flow: call]
	lda $0303.w		; AD 03 03 ; Load $0303.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $034B.w		; 8D 4B 03 ; Store accumulator to $034B.w [Reads: Accumulator]
	stz $020B.w		; [PATTERN: Memory clearing operation] 9C 0B 02 ; Store zero to $020B.w
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $020B.w		; AD 0B 02 ; Load $020B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $C3		; D0 C3 ; Branch if not equal to $D0, $C3 [Flow: branch]
	stz $034B.w		; 9C 4B 03 ; Store zero to $034B.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0205.w		; 9C 05 02 ; Store zero to $0205.w
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0205.w		; AD 05 02 ; Load $0205.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$207F.w		; A9 7F 20 ; Load #$207F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $12EA.w,X		; 9D EA 12 ; Store accumulator to $12EA.w,X [Reads: Accumulator, X Index]
	sta $12EC.w,X		; 9D EC 12 ; Store accumulator to $12EC.w,X [Reads: Accumulator, X Index]
	sta $12EE.w,X		; 9D EE 12 ; Store accumulator to $12EE.w,X [Reads: Accumulator, X Index]
	sta $12F0.w,X		; 9D F0 12 ; Store accumulator to $12F0.w,X [Reads: Accumulator, X Index]
	sta $12F2.w,X		; 9D F2 12 ; Store accumulator to $12F2.w,X [Reads: Accumulator, X Index]
	sta $12F4.w,X		; 9D F4 12 ; Store accumulator to $12F4.w,X [Reads: Accumulator, X Index]
	sta $12F6.w,X		; 9D F6 12 ; Store accumulator to $12F6.w,X [Reads: Accumulator, X Index]
	sta $12F8.w,X		; 9D F8 12 ; Store accumulator to $12F8.w,X [Reads: Accumulator, X Index]
	sta $12FA.w,X		; 9D FA 12 ; Store accumulator to $12FA.w,X [Reads: Accumulator, X Index]
	sta $12FC.w,X		; 9D FC 12 ; Store accumulator to $12FC.w,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $0205.w		; EE 05 02 ; Increment $0205.w [Flags: NZ]
	lda $0205.w		; AD 05 02 ; Load $0205.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0205.w		; 8D 05 02 ; Store accumulator to $0205.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F928.w,Y		; F9 28 F9 ; Subtract with carry $F928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F928.w,Y		; F9 28 F9 ; Subtract with carry $F928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F928.w,Y		; F9 28 F9 ; Subtract with carry $F928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F928.w,Y		; F9 28 F9 ; Subtract with carry $F928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F9A8.w,Y		; F9 A8 F9 ; Subtract with carry $F9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F9A8.w,Y		; F9 A8 F9 ; Subtract with carry $F9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F9A8.w,Y		; F9 A8 F9 ; Subtract with carry $F9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F9A8.w,Y		; F9 A8 F9 ; Subtract with carry $F9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0205.w		; AD 05 02 ; Load $0205.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$0012.w		; A0 12 00 ; Load #$0012.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $E050.w,Y		; B9 50 E0 ; Load $E050.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $12FC.w,X		; 9D FC 12 ; Store accumulator to $12FC.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ldy #$0012.w		; A0 12 00 ; Load #$0012.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $E064.w,Y		; B9 64 E0 ; Load $E064.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $133C.w,X		; 9D 3C 13 ; Store accumulator to $133C.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
	ldx #$0012.w		; A2 12 00 ; Load #$0012.w into X register [Writes: X Index] [Flags: NZ]
	lda $E078.w,X		; BD 78 E0 ; Load $E078.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $176A.w,X		; 9D 6A 17 ; Store accumulator to $176A.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	dec $0205.w		; CE 05 02 ; Decrement $0205.w [Flags: NZ]
	lda $0205.w		; AD 05 02 ; Load $0205.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $0207.w		; EE 07 02 ; Increment $0207.w [Flags: NZ]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0200.w		; 8D 00 02 ; Store accumulator to $0200.w [Reads: Accumulator]
	.db $80, $36		; 80 36 ; Branch always to $80, $36 [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $DED9.w		; 20 D9 DE ; Jump to subroutine at $DED9.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $DEE2.w		; 20 E2 DE ; Jump to subroutine at $DEE2.w [Writes: Stack Pointer] [Flow: call]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0207.w		; 8D 07 02 ; Store accumulator to $0207.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E3C8.w		; 20 C8 E3 ; Jump to subroutine at $E3C8.w [Writes: Stack Pointer] [Flow: call]
	jsr $E3D9.w		; 20 D9 E3 ; Jump to subroutine at $E3D9.w [Writes: Stack Pointer] [Flow: call]
	jsr $EB3A.w		; 20 3A EB ; Jump to subroutine at $EB3A.w [Writes: Stack Pointer] [Flow: call]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	stz $0205.w		; 9C 05 02 ; Store zero to $0205.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E17F.w		; 20 7F E1 ; Jump to subroutine at $E17F.w [Writes: Stack Pointer] [Flow: call]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF34F.l		; AF 4F F3 7E ; Load long $7EF34F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF35C.l,X		; BF 5C F3 7E ; Load long $7EF35C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F2		; F0 F2 ; Branch if equal to $F0, $F2 [Flow: branch]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF35C.l,X		; BF 5C F3 7E ; Load long $7EF35C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F2		; F0 F2 ; Branch if equal to $F0, $F2 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $02.b		; C5 02 ; Compare $02.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF34F.l		; 8F 4F F3 7E ; Store accumulator (long) $7EF34F.l [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0207.w		; 8D 07 02 ; Store accumulator to $0207.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $88.b		; 02 88 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $C2.b,S		; 03 C2 ; OR accumulator with stack relative $C2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $24.b,X		; F5 24 ; Subtract $24.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $132C.w,X		; 9D 2C 13 ; Store accumulator to $132C.w,X [Reads: Accumulator, X Index]
	sta $136C.w,X		; 9D 6C 13 ; Store accumulator to $136C.w,X [Reads: Accumulator, X Index]
	sta $13AC.w,X		; 9D AC 13 ; Store accumulator to $13AC.w,X [Reads: Accumulator, X Index]
	sta $13EC.w,X		; 9D EC 13 ; Store accumulator to $13EC.w,X [Reads: Accumulator, X Index]
	sta $142C.w,X		; 9D 2C 14 ; Store accumulator to $142C.w,X [Reads: Accumulator, X Index]
	sta $146C.w,X		; 9D 6C 14 ; Store accumulator to $146C.w,X [Reads: Accumulator, X Index]
	sta $14AC.w,X		; 9D AC 14 ; Store accumulator to $14AC.w,X [Reads: Accumulator, X Index]
	sta $14EC.w,X		; 9D EC 14 ; Store accumulator to $14EC.w,X [Reads: Accumulator, X Index]
	sta $152C.w,X		; 9D 2C 15 ; Store accumulator to $152C.w,X [Reads: Accumulator, X Index]
	sta $156C.w,X		; 9D 6C 15 ; Store accumulator to $156C.w,X [Reads: Accumulator, X Index]
	sta $15AC.w,X		; 9D AC 15 ; Store accumulator to $15AC.w,X [Reads: Accumulator, X Index]
	sta $15EC.w,X		; 9D EC 15 ; Store accumulator to $15EC.w,X [Reads: Accumulator, X Index]
	sta $162C.w,X		; 9D 2C 16 ; Store accumulator to $162C.w,X [Reads: Accumulator, X Index]
	sta $166C.w,X		; 9D 6C 16 ; Store accumulator to $166C.w,X [Reads: Accumulator, X Index]
	sta $16AC.w,X		; 9D AC 16 ; Store accumulator to $16AC.w,X [Reads: Accumulator, X Index]
	sta $16EC.w,X		; 9D EC 16 ; Store accumulator to $16EC.w,X [Reads: Accumulator, X Index]
	sta $172C.w,X		; 9D 2C 17 ; Store accumulator to $172C.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $C8		; 10 C8 ; Branch if plus to $10, $C8 [Flow: branch]
	lda #$72.b		; A9 72 ; Load #$72.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($85.b,S),Y		; 13 85 ; OR accumulator (stack relative indirect indexed) ($85.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $297EF3.l		; 5C F3 7E 29 ; Jump long to $297EF3.l [Flow: jump]
	sbc $028500.l,X		; FF 00 85 02 ; Subtract with carry (long,X) $028500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$51.b		; A9 51 ; Load #$51.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc [$85.b],Y		; F7 85 ; Subtract with carry (long indexed) [$85.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	adc ($E3.b)		; 72 E3 ; Add with carry (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda #$72.b		; A9 72 ; Load #$72.b into accumulator [Writes: Accumulator] [Flags: NZ]
	trb $85.b		; 14 85 ; Test and reset bits $85.b [Reads: Accumulator] [Flags: Z]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $7EF3.w,X		; 5D F3 7E ; Exclusive OR accumulator with memory $7EF3.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($F7.b),Y		; 51 F7 ; Exclusive OR accumulator with memory ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$72.b		; A9 72 ; Load #$72.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $85.b,X		; 15 85 ; OR accumulator with memory $85.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $7EF3.w,X		; 5E F3 7E ; Logical shift right $7EF3.w,X [Reads: X Index] [Flags: NCZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($F7.b),Y		; 51 F7 ; Exclusive OR accumulator with memory ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$72.b		; A9 72 ; Load #$72.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $85.b,X		; 16 85 ; Arithmetic shift left $85.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $297EF3.l,X		; 5F F3 7E 29 ; Exclusive OR accumulator with memory (long,X) $297EF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $028500.l,X		; FF 00 85 02 ; Subtract with carry (long,X) $028500.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$51.b		; A9 51 ; Load #$51.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc [$85.b],Y		; F7 85 ; Subtract with carry (long indexed) [$85.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	adc ($E3.b)		; 72 E3 ; Add with carry (indirect) ($E3.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	trb $85.b		; 14 85 ; Test and reset bits $85.b [Reads: Accumulator] [Flags: Z]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $297EF3.l		; 4F F3 7E 29 ; Exclusive OR accumulator with memory (long) $297EF3.l [Writes: Accumulator] [Flags: NZ]
	sbc $D0AA00.l,X		; FF 00 AA D0 ; Subtract with carry (long,X) $D0AA00.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $A9.b		; 05 A9 ; Logical OR $A9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $7EF35B.l,X		; BF 5B F3 7E ; Load long $7EF35B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($F7.b),Y		; 51 F7 ; Exclusive OR accumulator with memory ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $FAD5.w,X		; BC D5 FA ; Load Y register $FAD5.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0000.w,Y		; B9 00 00 ; Load $0000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $11B2.w		; 8D B2 11 ; Store accumulator to $11B2.w [Reads: Accumulator]
	lda $0002.w,Y		; B9 02 00 ; Load $0002.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $11B4.w		; 8D B4 11 ; Store accumulator to $11B4.w [Reads: Accumulator]
	lda $0040.w,Y		; B9 40 00 ; Load $0040.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $11F2.w		; 8D F2 11 ; Store accumulator to $11F2.w [Reads: Accumulator]
	lda $0042.w,Y		; B9 42 00 ; Load $0042.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $11F4.w		; 8D F4 11 ; Store accumulator to $11F4.w [Reads: Accumulator]
	lda $7EF34F.l		; AF 4F F3 7E ; Load long $7EF34F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $E177.w,Y		; B9 77 E1 ; Load $E177.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0207.w		; AD 07 02 ; Load $0207.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	lda #$61.b		; A9 61 ; Load #$61.b into accumulator [Writes: Accumulator] [Flags: NZ]
	bit $AA99.w,X		; 3C 99 AA ; Test bits $AA99.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora ($09.b)		; 12 09 ; OR accumulator with memory (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $12AC.w,Y		; 99 AC 12 ; Store accumulator to $12AC.w,Y [Reads: Y Index, Accumulator]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: NZ]
	bit $E899.w,X		; 3C 99 E8 ; Test bits $E899.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora ($09.b)		; 12 09 ; OR accumulator with memory (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $12EE.w,Y		; 99 EE 12 ; Store accumulator to $12EE.w,Y [Reads: Y Index, Accumulator]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $2899.w,X		; BC 99 28 ; Load Y register $2899.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora ($09.b,S),Y		; 13 09 ; OR accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $132E.w,Y		; 99 2E 13 ; Store accumulator to $132E.w,Y [Reads: Y Index, Accumulator]
	lda #$61.b		; A9 61 ; Load #$61.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $6A99.w,X		; BC 99 6A ; Load Y register $6A99.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora ($09.b,S),Y		; 13 09 ; OR accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $136C.w,Y		; 99 6C 13 ; Store accumulator to $136C.w,Y [Reads: Y Index, Accumulator]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: NZ]
	bit $A899.w,X		; 3C 99 A8 ; Test bits $A899.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	ora ($09.b)		; 12 09 ; OR accumulator with memory (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $12AE.w,Y		; 99 AE 12 ; Store accumulator to $12AE.w,Y [Reads: Y Index, Accumulator]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $99		; 80 99 ; Branch always to $80, $99 [Flow: branch]
	ror $4913.w		; 6E 13 49 ; Rotate right $4913.w [Flags: NCZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $1368.w,Y		; 99 68 13 ; Store accumulator to $1368.w,Y [Reads: Y Index, Accumulator]
	lda $7EF34F.l		; AF 4F F3 7E ; Load long $7EF34F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$AA.b]		; 27 AA ; AND accumulator with memory (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $7EF35B.l,X		; BF 5B F3 7E ; Load long $7EF35B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor #$F4.b		; 49 F4 ; Exclusive OR #$F4.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $122C.w,Y		; 99 2C 12 ; Store accumulator to $122C.w,Y [Reads: Y Index, Accumulator]
	lda $F459.w,X		; BD 59 F4 ; Load $F459.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $126C.w,Y		; 99 6C 12 ; Store accumulator to $126C.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$10.b		; C0 10 ; Compare #$10.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0205.w		; AD 05 02 ; Load $0205.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$207F.w		; A9 7F 20 ; Load #$207F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $12EA.w,X		; 9D EA 12 ; Store accumulator to $12EA.w,X [Reads: Accumulator, X Index]
	sta $12EC.w,X		; 9D EC 12 ; Store accumulator to $12EC.w,X [Reads: Accumulator, X Index]
	sta $12EE.w,X		; 9D EE 12 ; Store accumulator to $12EE.w,X [Reads: Accumulator, X Index]
	sta $12F0.w,X		; 9D F0 12 ; Store accumulator to $12F0.w,X [Reads: Accumulator, X Index]
	sta $12F2.w,X		; 9D F2 12 ; Store accumulator to $12F2.w,X [Reads: Accumulator, X Index]
	sta $12F4.w,X		; 9D F4 12 ; Store accumulator to $12F4.w,X [Reads: Accumulator, X Index]
	sta $12F6.w,X		; 9D F6 12 ; Store accumulator to $12F6.w,X [Reads: Accumulator, X Index]
	sta $12F8.w,X		; 9D F8 12 ; Store accumulator to $12F8.w,X [Reads: Accumulator, X Index]
	sta $12FA.w,X		; 9D FA 12 ; Store accumulator to $12FA.w,X [Reads: Accumulator, X Index]
	sta $12FC.w,X		; 9D FC 12 ; Store accumulator to $12FC.w,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $0205.w		; EE 05 02 ; Increment $0205.w [Flags: NZ]
	lda $0205.w		; AD 05 02 ; Load $0205.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E9C8.w		; 20 C8 E9 ; Jump to subroutine at $E9C8.w [Writes: Stack Pointer] [Flow: call]
	jsr $ECE9.w		; 20 E9 EC ; Jump to subroutine at $ECE9.w [Writes: Stack Pointer] [Flow: call]
	jsr $ED04.w		; 20 04 ED ; Jump to subroutine at $ED04.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E3C8.w		; 20 C8 E3 ; Jump to subroutine at $E3C8.w [Writes: Stack Pointer] [Flow: call]
	jsr $ED29.w		; 20 29 ED ; Jump to subroutine at $ED29.w [Writes: Stack Pointer] [Flow: call]
	jsr $EE21.w		; 20 21 EE ; Jump to subroutine at $EE21.w [Writes: Stack Pointer] [Flow: call]
	jsr $EE3C.w		; 20 3C EE ; Jump to subroutine at $EE3C.w [Writes: Stack Pointer] [Flow: call]
	jsr $EE57.w		; 20 57 EE ; Jump to subroutine at $EE57.w [Writes: Stack Pointer] [Flow: call]
	jsr $EF39.w		; 20 39 EF ; Jump to subroutine at $EF39.w [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0200.w		; 8D 00 02 ; Store accumulator to $0200.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda ($04.b),Y		; B1 04 ; Load accumulator ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0000.w,X		; 9D 00 00 ; Store accumulator to $0000.w,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($04.b),Y		; B1 04 ; Load accumulator ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0002.w,X		; 9D 02 00 ; Store accumulator to $0002.w,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($04.b),Y		; B1 04 ; Load accumulator ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0040.w,X		; 9D 40 00 ; Store accumulator to $0040.w,X [Reads: Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($04.b),Y		; B1 04 ; Load accumulator ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0042.w,X		; 9D 42 00 ; Store accumulator to $0042.w,X [Reads: Accumulator, X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E399.w		; 20 99 E3 ; Jump to subroutine at $E399.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldx #$12.b		; A2 12 ; Load #$12.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF340.l		; AF 40 F3 7E ; Load long $7EF340.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $7EF341.l,X		; 1F 41 F3 7E ; Logical OR long $7EF341.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F9		; [PATTERN: Memory clearing operation] 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	stz $0202.w		; 9C 02 02 ; Store zero to $0202.w
	stz $0203.w		; 9C 03 02 ; Store zero to $0203.w
	stz $0204.w		; 9C 04 02 ; Store zero to $0204.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0202.w		; 8D 02 02 ; Store accumulator to $0202.w [Reads: Accumulator]
	jsr $DEB0.w		; 20 B0 DE ; Jump to subroutine at $DEB0.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $F0		; B0 F0 ; Branch if carry set to $B0, $F0 [Flow: branch]
	jmp $DEE2.w		; 4C E2 DE ; Jump to $DEE2.w [Flow: jump]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldx #$E3.b		; A2 E3 ; Load #$E3.b into X register [Writes: X Index] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$FF.b		; A2 FF ; Load #$FF.b into X register [Writes: X Index] [Flags: NZ]
	stx $01.b		; 86 01 ; Store X register to $01.b [Reads: X Index]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$3CFB.w		; A9 FB 3C ; Load #$3CFB.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1142.w		; 8D 42 11 ; Store accumulator to $1142.w [Reads: Accumulator]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14C2.w		; 8D C2 14 ; Store accumulator to $14C2.w [Reads: Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14E6.w		; 8D E6 14 ; Store accumulator to $14E6.w [Reads: Accumulator]
	eor #$8000.w		; 49 00 80 ; Exclusive OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1166.w		; 8D 66 11 ; Store accumulator to $1166.w [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$000C.w		; A0 0C 00 ; Load #$000C.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$3CFC.w		; A9 FC 3C ; Load #$3CFC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1182.w,X		; 9D 82 11 ; Store accumulator to $1182.w,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11A6.w,X		; 9D A6 11 ; Store accumulator to $11A6.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $E9		; 10 E9 ; Branch if plus to $10, $E9 [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0010.w		; A0 10 00 ; Load #$0010.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$3CF9.w		; A9 F9 3C ; Load #$3CF9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1144.w,X		; 9D 44 11 ; Store accumulator to $1144.w,X [Reads: Accumulator, X Index]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14C4.w,X		; 9D C4 14 ; Store accumulator to $14C4.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0010.w		; A0 10 00 ; Load #$0010.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$24F5.w		; A9 F5 24 ; Load #$24F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1184.w,X		; 9D 84 11 ; Store accumulator to $1184.w,X [Reads: Accumulator, X Index]
	sta $11C4.w,X		; 9D C4 11 ; Store accumulator to $11C4.w,X [Reads: Accumulator, X Index]
	sta $1204.w,X		; 9D 04 12 ; Store accumulator to $1204.w,X [Reads: Accumulator, X Index]
	sta $1244.w,X		; 9D 44 12 ; Store accumulator to $1244.w,X [Reads: Accumulator, X Index]
	sta $1284.w,X		; 9D 84 12 ; Store accumulator to $1284.w,X [Reads: Accumulator, X Index]
	sta $12C4.w,X		; 9D C4 12 ; Store accumulator to $12C4.w,X [Reads: Accumulator, X Index]
	sta $1304.w,X		; 9D 04 13 ; Store accumulator to $1304.w,X [Reads: Accumulator, X Index]
	sta $1344.w,X		; 9D 44 13 ; Store accumulator to $1344.w,X [Reads: Accumulator, X Index]
	sta $1384.w,X		; 9D 84 13 ; Store accumulator to $1384.w,X [Reads: Accumulator, X Index]
	sta $13C4.w,X		; 9D C4 13 ; Store accumulator to $13C4.w,X [Reads: Accumulator, X Index]
	sta $1404.w,X		; 9D 04 14 ; Store accumulator to $1404.w,X [Reads: Accumulator, X Index]
	sta $1444.w,X		; 9D 44 14 ; Store accumulator to $1444.w,X [Reads: Accumulator, X Index]
	sta $1484.w,X		; 9D 84 14 ; Store accumulator to $1484.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $D4		; 10 D4 ; Branch if plus to $10, $D4 [Flow: branch]
	lda #$3CF0.w		; A9 F0 3C ; Load #$3CF0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1184.w		; 8D 84 11 ; Store accumulator to $1184.w [Reads: Accumulator]
	lda #$3CF1.w		; A9 F1 3C ; Load #$3CF1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11C4.w		; 8D C4 11 ; Store accumulator to $11C4.w [Reads: Accumulator]
	lda #$246E.w		; A9 6E 24 ; Load #$246E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1146.w		; 8D 46 11 ; Store accumulator to $1146.w [Reads: Accumulator]
	lda #$246F.w		; A9 6F 24 ; Load #$246F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1148.w		; 8D 48 11 ; Store accumulator to $1148.w [Reads: Accumulator]
	lda #$11C8.w		; A9 C8 11 ; Load #$11C8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF340.l		; AF 40 F3 7E ; Load long $7EF340.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F629.w		; A9 29 F6 ; Load #$F629.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$11CE.w		; A9 CE 11 ; Load #$11CE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF341.l		; AF 41 F3 7E ; Load long $7EF341.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F651.w		; A9 51 F6 ; Load #$F651.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$11D4.w		; A9 D4 11 ; Load #$11D4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF342.l		; AF 42 F3 7E ; Load long $7EF342.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F669.w		; A9 69 F6 ; Load #$F669.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$11DA.w		; A9 DA 11 ; Load #$11DA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF343.l		; AF 43 F3 7E ; Load long $7EF343.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F679.w		; A9 79 F6 ; Load #$F679.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$11E0.w		; A9 E0 11 ; Load #$11E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF344.l		; AF 44 F3 7E ; Load long $7EF344.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F689.w		; A9 89 F6 ; Load #$F689.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1288.w		; A9 88 12 ; Load #$1288.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF345.l		; AF 45 F3 7E ; Load long $7EF345.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F6A1.w		; A9 A1 F6 ; Load #$F6A1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$128E.w		; A9 8E 12 ; Load #$128E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF346.l		; AF 46 F3 7E ; Load long $7EF346.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F6B1.w		; A9 B1 F6 ; Load #$F6B1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1294.w		; A9 94 12 ; Load #$1294.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF347.l		; AF 47 F3 7E ; Load long $7EF347.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F6C1.w		; A9 C1 F6 ; Load #$F6C1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$129A.w		; A9 9A 12 ; Load #$129A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF348.l		; AF 48 F3 7E ; Load long $7EF348.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F6D1.w		; A9 D1 F6 ; Load #$F6D1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$12A0.w		; A9 A0 12 ; Load #$12A0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF349.l		; AF 49 F3 7E ; Load long $7EF349.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F6E1.w		; A9 E1 F6 ; Load #$F6E1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1348.w		; A9 48 13 ; Load #$1348.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF34A.l		; AF 4A F3 7E ; Load long $7EF34A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F6F1.w		; A9 F1 F6 ; Load #$F6F1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$134E.w		; A9 4E 13 ; Load #$134E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF34B.l		; AF 4B F3 7E ; Load long $7EF34B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F701.w		; A9 01 F7 ; Load #$F701.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1354.w		; A9 54 13 ; Load #$1354.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF34C.l		; AF 4C F3 7E ; Load long $7EF34C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F711.w		; A9 11 F7 ; Load #$F711.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$135A.w		; A9 5A 13 ; Load #$135A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF34D.l		; AF 4D F3 7E ; Load long $7EF34D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F731.w		; A9 31 F7 ; Load #$F731.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1360.w		; A9 60 13 ; Load #$1360.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF34E.l		; AF 4E F3 7E ; Load long $7EF34E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F741.w		; A9 41 F7 ; Load #$F741.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1408.w		; A9 08 14 ; Load #$1408.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF34F.l		; AF 4F F3 7E ; Load long $7EF34F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $7EF35B.l,X		; BF 5B F3 7E ; Load long $7EF35B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F751.w		; A9 51 F7 ; Load #$F751.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$140E.w		; A9 0E 14 ; Load #$140E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF350.l		; AF 50 F3 7E ; Load long $7EF350.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F799.w		; A9 99 F7 ; Load #$F799.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1414.w		; A9 14 14 ; Load #$1414.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF351.l		; AF 51 F3 7E ; Load long $7EF351.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F7A9.w		; A9 A9 F7 ; Load #$F7A9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$141A.w		; A9 1A 14 ; Load #$141A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF352.l		; AF 52 F3 7E ; Load long $7EF352.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F7B9.w		; A9 B9 F7 ; Load #$F7B9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1420.w		; A9 20 14 ; Load #$1420.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF353.l		; AF 53 F3 7E ; Load long $7EF353.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F7C9.w		; A9 C9 F7 ; Load #$F7C9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$3CFB.w		; A9 FB 3C ; Load #$3CFB.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $116A.w		; 8D 6A 11 ; Store accumulator to $116A.w [Reads: Accumulator]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $12AA.w		; 8D AA 12 ; Store accumulator to $12AA.w [Reads: Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $12BC.w		; 8D BC 12 ; Store accumulator to $12BC.w [Reads: Accumulator]
	eor #$8000.w		; 49 00 80 ; Exclusive OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $117C.w		; 8D 7C 11 ; Store accumulator to $117C.w [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0003.w		; A0 03 00 ; Load #$0003.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$3CFC.w		; A9 FC 3C ; Load #$3CFC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $11AA.w,X		; 9D AA 11 ; Store accumulator to $11AA.w,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11BC.w,X		; 9D BC 11 ; Store accumulator to $11BC.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $E9		; 10 E9 ; Branch if plus to $10, $E9 [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0007.w		; A0 07 00 ; Load #$0007.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$3CF9.w		; A9 F9 3C ; Load #$3CF9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $116C.w,X		; 9D 6C 11 ; Store accumulator to $116C.w,X [Reads: Accumulator, X Index]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $12AC.w,X		; 9D AC 12 ; Store accumulator to $12AC.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0007.w		; A0 07 00 ; Load #$0007.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$24F5.w		; A9 F5 24 ; Load #$24F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11AC.w,X		; 9D AC 11 ; Store accumulator to $11AC.w,X [Reads: Accumulator, X Index]
	sta $11EC.w,X		; 9D EC 11 ; Store accumulator to $11EC.w,X [Reads: Accumulator, X Index]
	sta $122C.w,X		; 9D 2C 12 ; Store accumulator to $122C.w,X [Reads: Accumulator, X Index]
	sta $126C.w,X		; 9D 6C 12 ; Store accumulator to $126C.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0010.w		; A0 10 00 ; Load #$0010.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$24F5.w		; A9 F5 24 ; Load #$24F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1584.w,X		; 9D 84 15 ; Store accumulator to $1584.w,X [Reads: Accumulator, X Index]
	sta $15C4.w,X		; 9D C4 15 ; Store accumulator to $15C4.w,X [Reads: Accumulator, X Index]
	sta $1604.w,X		; 9D 04 16 ; Store accumulator to $1604.w,X [Reads: Accumulator, X Index]
	sta $1644.w,X		; 9D 44 16 ; Store accumulator to $1644.w,X [Reads: Accumulator, X Index]
	sta $1684.w,X		; 9D 84 16 ; Store accumulator to $1684.w,X [Reads: Accumulator, X Index]
	sta $16C4.w,X		; 9D C4 16 ; Store accumulator to $16C4.w,X [Reads: Accumulator, X Index]
	sta $1704.w,X		; 9D 04 17 ; Store accumulator to $1704.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $E6		; 10 E6 ; Branch if plus to $10, $E6 [Flow: branch]
	lda $7EF378.l		; AF 78 F3 7E ; Load long $7EF378.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	.db $90, $3C		; 90 3C ; Branch if carry clear to $90, $3C [Flow: branch]
	lda $F959.w,X		; BD 59 F9 ; Load $F959.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1588.w,Y		; 99 88 15 ; Store accumulator to $1588.w,Y [Reads: Y Index, Accumulator]
	lda $F95B.w,X		; BD 5B F9 ; Load $F95B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $158A.w,Y		; 99 8A 15 ; Store accumulator to $158A.w,Y [Reads: Y Index, Accumulator]
	lda $F95D.w,X		; BD 5D F9 ; Load $F95D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $158C.w,Y		; 99 8C 15 ; Store accumulator to $158C.w,Y [Reads: Y Index, Accumulator]
	lda $F95F.w,X		; BD 5F F9 ; Load $F95F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $158E.w,Y		; 99 8E 15 ; Store accumulator to $158E.w,Y [Reads: Y Index, Accumulator]
	lda $F961.w,X		; BD 61 F9 ; Load $F961.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1590.w,Y		; 99 90 15 ; Store accumulator to $1590.w,Y [Reads: Y Index, Accumulator]
	lda $F963.w,X		; BD 63 F9 ; Load $F963.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $15C8.w,Y		; 99 C8 15 ; Store accumulator to $15C8.w,Y [Reads: Y Index, Accumulator]
	lda $F965.w,X		; BD 65 F9 ; Load $F965.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $15CA.w,Y		; 99 CA 15 ; Store accumulator to $15CA.w,Y [Reads: Y Index, Accumulator]
	lda $F967.w,X		; BD 67 F9 ; Load $F967.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $15CC.w,Y		; 99 CC 15 ; Store accumulator to $15CC.w,Y [Reads: Y Index, Accumulator]
	lda $F969.w,X		; BD 69 F9 ; Load $F969.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $15CE.w,Y		; 99 CE 15 ; Store accumulator to $15CE.w,Y [Reads: Y Index, Accumulator]
	lda $F96B.w,X		; BD 6B F9 ; Load $F96B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $15D0.w,Y		; 99 D0 15 ; Store accumulator to $15D0.w,Y [Reads: Y Index, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0014.w		; 69 14 00 ; Add #$0014.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000A.w		; 69 0A 00 ; Add #$000A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $B0		; D0 B0 ; Branch if not equal to $D0, $B0 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0058.w		; 69 58 00 ; Add #$0058.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	dec $04.b		; C6 04 ; Decrement $04.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $A1		; D0 A1 ; Branch if not equal to $D0, $A1 [Flow: branch]
	lda #$24FB.w		; A9 FB 24 ; Load #$24FB.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1542.w		; 8D 42 15 ; Store accumulator to $1542.w [Reads: Accumulator]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1742.w		; 8D 42 17 ; Store accumulator to $1742.w [Reads: Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1766.w		; 8D 66 17 ; Store accumulator to $1766.w [Reads: Accumulator]
	eor #$8000.w		; 49 00 80 ; Exclusive OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1566.w		; 8D 66 15 ; Store accumulator to $1566.w [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0006.w		; A0 06 00 ; Load #$0006.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$24FC.w		; A9 FC 24 ; Load #$24FC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1582.w,X		; 9D 82 15 ; Store accumulator to $1582.w,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $15A6.w,X		; 9D A6 15 ; Store accumulator to $15A6.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $E9		; 10 E9 ; Branch if plus to $10, $E9 [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0010.w		; A0 10 00 ; Load #$0010.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$24F9.w		; A9 F9 24 ; Load #$24F9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1544.w,X		; 9D 44 15 ; Store accumulator to $1544.w,X [Reads: Accumulator, X Index]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1744.w,X		; 9D 44 17 ; Store accumulator to $1744.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	lda #$A4F0.w		; A9 F0 A4 ; Load #$A4F0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1584.w		; 8D 84 15 ; Store accumulator to $1584.w [Reads: Accumulator]
	lda #$24F2.w		; A9 F2 24 ; Load #$24F2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $15C4.w		; 8D C4 15 ; Store accumulator to $15C4.w [Reads: Accumulator]
	lda #$2482.w		; A9 82 24 ; Load #$2482.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1546.w		; 8D 46 15 ; Store accumulator to $1546.w [Reads: Accumulator]
	lda #$2483.w		; A9 83 24 ; Load #$2483.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1548.w		; 8D 48 15 ; Store accumulator to $1548.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$16D0.w		; A9 D0 16 ; Load #$16D0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF354.l		; AF 54 F3 7E ; Load long $7EF354.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F7E9.w		; A9 E9 F7 ; Load #$F7E9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$16C8.w		; A9 C8 16 ; Load #$16C8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF355.l		; AF 55 F3 7E ; Load long $7EF355.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F801.w		; A9 01 F8 ; Load #$F801.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$16D8.w		; A9 D8 16 ; Load #$16D8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF356.l		; AF 56 F3 7E ; Load long $7EF356.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F811.w		; A9 11 F8 ; Load #$F811.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF354.l		; AF 54 F3 7E ; Load long $7EF354.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	cmp #$0001.w		; C9 01 00 ; Compare #$0001.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E81A.w		; 20 1A E8 ; Jump to subroutine at $E81A.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E81A.w		; 20 1A E8 ; Jump to subroutine at $E81A.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $F931.w,X		; BD 31 F9 ; Load $F931.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1588.w		; 8D 88 15 ; Store accumulator to $1588.w [Reads: Accumulator]
	lda $F933.w,X		; BD 33 F9 ; Load $F933.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $158A.w		; 8D 8A 15 ; Store accumulator to $158A.w [Reads: Accumulator]
	lda $F935.w,X		; BD 35 F9 ; Load $F935.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $158C.w		; 8D 8C 15 ; Store accumulator to $158C.w [Reads: Accumulator]
	lda $F937.w,X		; BD 37 F9 ; Load $F937.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $158E.w		; 8D 8E 15 ; Store accumulator to $158E.w [Reads: Accumulator]
	lda $F939.w,X		; BD 39 F9 ; Load $F939.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1590.w		; 8D 90 15 ; Store accumulator to $1590.w [Reads: Accumulator]
	lda $F93B.w,X		; BD 3B F9 ; Load $F93B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $15C8.w		; 8D C8 15 ; Store accumulator to $15C8.w [Reads: Accumulator]
	lda $F93D.w,X		; BD 3D F9 ; Load $F93D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $15CA.w		; 8D CA 15 ; Store accumulator to $15CA.w [Reads: Accumulator]
	lda $F93F.w,X		; BD 3F F9 ; Load $F93F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $15CC.w		; 8D CC 15 ; Store accumulator to $15CC.w [Reads: Accumulator]
	lda $F941.w,X		; BD 41 F9 ; Load $F941.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $15CE.w		; 8D CE 15 ; Store accumulator to $15CE.w [Reads: Accumulator]
	lda $F943.w,X		; BD 43 F9 ; Load $F943.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $15D0.w		; 8D D0 15 ; Store accumulator to $15D0.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F928.w,Y		; F9 28 F9 ; Subtract with carry $F928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F928.w,Y		; F9 28 F9 ; Subtract with carry $F928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F928.w,Y		; F9 28 F9 ; Subtract with carry $F928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F928.w,Y		; F9 28 F9 ; Subtract with carry $F928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($2128.w,X)		; FC 28 21 ; Jump to subroutine indirect indexed ($2128.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $22.b		; 25 22 ; Logical AND $22.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $23.b		; 25 23 ; Logical AND $23.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $24.b		; 25 24 ; Logical AND $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $3F.b		; 25 3F ; Logical AND $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3B.b		; 24 3B ; Test bits $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and ($3C.b,X)		; 21 3C ; Logical AND ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($F5.b,X)		; 21 F5 ; Logical AND ($F5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3D.b		; 24 3D ; Test bits $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and ($3E.b,X)		; 21 3E ; Logical AND ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($F5.b,X)		; 21 F5 ; Logical AND ($F5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $3B.b		; 24 3B ; Test bits $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and ($3C.b,X)		; 21 3C ; Logical AND ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($F5.b,X)		; 21 F5 ; Logical AND ($F5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3B.b		; 24 3B ; Test bits $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and ($3C.b,X)		; 21 3C ; Logical AND ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($F5.b,X)		; 21 F5 ; Logical AND ($F5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $3D.b		; 24 3D ; Test bits $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and ($3E.b,X)		; 21 3E ; Logical AND ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($F5.b,X)		; 21 F5 ; Logical AND ($F5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3D.b		; 24 3D ; Test bits $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and ($3E.b,X)		; 21 3E ; Logical AND ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($F5.b,X)		; 21 F5 ; Logical AND ($F5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F9A8.w,Y		; F9 A8 F9 ; Subtract with carry $F9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F9A8.w,Y		; F9 A8 F9 ; Subtract with carry $F9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F9A8.w,Y		; F9 A8 F9 ; Subtract with carry $F9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F9A8.w,Y		; F9 A8 F9 ; Subtract with carry $F9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F928.w,Y		; F9 28 F9 ; Subtract with carry $F928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F928.w,Y		; F9 28 F9 ; Subtract with carry $F928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F928.w,Y		; F9 28 F9 ; Subtract with carry $F928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $F928.w,Y		; F9 28 F9 ; Subtract with carry $F928.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($2F28.w,X)		; FC 28 2F ; Jump to subroutine indirect indexed ($2F28.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	and $34.b		; 25 34 ; Logical AND $34.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $35.b		; 25 35 ; Logical AND $35.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $36.b		; 25 36 ; Logical AND $36.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $37.b		; 25 37 ; Logical AND $37.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $46.b		; 24 46 ; Test bits $46.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and ($47.b),Y		; 31 47 ; AND accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($46.b),Y		; 31 46 ; AND accumulator with memory ($46.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($47.b),Y		; 31 47 ; AND accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($F5.b),Y		; 31 F5 ; AND accumulator with memory ($F5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $46.b		; 24 46 ; Test bits $46.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and ($47.b),Y		; 31 47 ; AND accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($46.b),Y		; 31 46 ; AND accumulator with memory ($46.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($47.b),Y		; 31 47 ; AND accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($46.b),Y		; 31 46 ; AND accumulator with memory ($46.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($47.b),Y		; 31 47 ; AND accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($F5.b),Y		; 31 F5 ; AND accumulator with memory ($F5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsr ($F528.w,X)		; FC 28 F5 ; Jump to subroutine indirect indexed ($F528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $46.b		; 24 46 ; Test bits $46.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and ($47.b),Y		; 31 47 ; AND accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($46.b),Y		; 31 46 ; AND accumulator with memory ($46.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($47.b),Y		; 31 47 ; AND accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($F5.b),Y		; 31 F5 ; AND accumulator with memory ($F5.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FC.b		; 24 FC ; Test bits $FC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F9A8.w,Y		; F9 A8 F9 ; Subtract with carry $F9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F9A8.w,Y		; F9 A8 F9 ; Subtract with carry $F9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F9A8.w,Y		; F9 A8 F9 ; Subtract with carry $F9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $F9A8.w,Y		; F9 A8 F9 ; Subtract with carry $F9A8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jmp $EA62.w		; 4C 62 EA ; Jump to $EA62.w [Flow: jump]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $E860.w,X		; BD 60 E8 ; Load $E860.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $12EA.w,X		; 9D EA 12 ; Store accumulator to $12EA.w,X [Reads: Accumulator, X Index]
	lda $E874.w,X		; BD 74 E8 ; Load $E874.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $132A.w,X		; 9D 2A 13 ; Store accumulator to $132A.w,X [Reads: Accumulator, X Index]
	lda $E888.w,X		; BD 88 E8 ; Load $E888.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $136A.w,X		; 9D 6A 13 ; Store accumulator to $136A.w,X [Reads: Accumulator, X Index]
	lda $E89C.w,X		; BD 9C E8 ; Load $E89C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $13AA.w,X		; 9D AA 13 ; Store accumulator to $13AA.w,X [Reads: Accumulator, X Index]
	lda $E8B0.w,X		; BD B0 E8 ; Load $E8B0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $13EA.w,X		; 9D EA 13 ; Store accumulator to $13EA.w,X [Reads: Accumulator, X Index]
	lda $E8C4.w,X		; BD C4 E8 ; Load $E8C4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $142A.w,X		; 9D 2A 14 ; Store accumulator to $142A.w,X [Reads: Accumulator, X Index]
	lda $E8D8.w,X		; BD D8 E8 ; Load $E8D8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $146A.w,X		; 9D 6A 14 ; Store accumulator to $146A.w,X [Reads: Accumulator, X Index]
	lda $E8EC.w,X		; BD EC E8 ; Load $E8EC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $14AA.w,X		; 9D AA 14 ; Store accumulator to $14AA.w,X [Reads: Accumulator, X Index]
	lda $E900.w,X		; BD 00 E9 ; Load $E900.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $14EA.w,X		; 9D EA 14 ; Store accumulator to $14EA.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0014.w		; E0 14 00 ; Compare #$0014.w with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $C3		; 90 C3 ; Branch if carry clear to $90, $C3 [Flow: branch]
	lda #$13B2.w		; A9 B2 13 ; Load #$13B2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF374.l		; AF 74 F3 7E ; Load long $7EF374.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F8D1.w		; A9 D1 F8 ; Load #$F8D1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$146E.w		; A9 6E 14 ; Load #$146E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $02.b		; 64 02 ; Store zero to $02.b
	lda $7EF374.l		; AF 74 F3 7E ; Load long $7EF374.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: NZ]
	lda #$F8E1.w		; A9 E1 F8 ; Load #$F8E1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1476.w		; A9 76 14 ; Load #$1476.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $02.b		; 64 02 ; Store zero to $02.b
	lda $7EF374.l		; AF 74 F3 7E ; Load long $7EF374.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0004.w		; 29 04 00 ; Logical AND #$0004.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: NZ]
	lda #$F8F1.w		; A9 F1 F8 ; Load #$F8F1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $E914.w,X		; BD 14 E9 ; Load $E914.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $12EA.w,X		; 9D EA 12 ; Store accumulator to $12EA.w,X [Reads: Accumulator, X Index]
	lda $E928.w,X		; BD 28 E9 ; Load $E928.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $132A.w,X		; 9D 2A 13 ; Store accumulator to $132A.w,X [Reads: Accumulator, X Index]
	lda $E93C.w,X		; BD 3C E9 ; Load $E93C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $136A.w,X		; 9D 6A 13 ; Store accumulator to $136A.w,X [Reads: Accumulator, X Index]
	lda $E950.w,X		; BD 50 E9 ; Load $E950.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $13AA.w,X		; 9D AA 13 ; Store accumulator to $13AA.w,X [Reads: Accumulator, X Index]
	lda $E964.w,X		; BD 64 E9 ; Load $E964.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $13EA.w,X		; 9D EA 13 ; Store accumulator to $13EA.w,X [Reads: Accumulator, X Index]
	lda $E978.w,X		; BD 78 E9 ; Load $E978.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $142A.w,X		; 9D 2A 14 ; Store accumulator to $142A.w,X [Reads: Accumulator, X Index]
	lda $E98C.w,X		; BD 8C E9 ; Load $E98C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $146A.w,X		; 9D 6A 14 ; Store accumulator to $146A.w,X [Reads: Accumulator, X Index]
	lda $E9A0.w,X		; BD A0 E9 ; Load $E9A0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $14AA.w,X		; 9D AA 14 ; Store accumulator to $14AA.w,X [Reads: Accumulator, X Index]
	lda $E9B4.w,X		; BD B4 E9 ; Load $E9B4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $14EA.w,X		; 9D EA 14 ; Store accumulator to $14EA.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0014.w		; E0 14 00 ; Compare #$0014.w with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $C3		; 90 C3 ; Branch if carry clear to $90, $C3 [Flow: branch]
	lda $7EF37A.l		; AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$2D44.w		; A9 44 2D ; Load #$2D44.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13B0.w		; 8D B0 13 ; Store accumulator to $13B0.w [Reads: Accumulator]
	lda #$2D45.w		; A9 45 2D ; Load #$2D45.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13B2.w		; 8D B2 13 ; Store accumulator to $13B2.w [Reads: Accumulator]
	lda $7EF37A.l		; AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$2D44.w		; A9 44 2D ; Load #$2D44.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13B4.w		; 8D B4 13 ; Store accumulator to $13B4.w [Reads: Accumulator]
	lda #$2D45.w		; A9 45 2D ; Load #$2D45.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13B6.w		; 8D B6 13 ; Store accumulator to $13B6.w [Reads: Accumulator]
	lda $7EF37A.l		; AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0004.w		; 29 04 00 ; Logical AND #$0004.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$2D44.w		; A9 44 2D ; Load #$2D44.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $142E.w		; 8D 2E 14 ; Store accumulator to $142E.w [Reads: Accumulator]
	lda #$2D45.w		; A9 45 2D ; Load #$2D45.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1430.w		; 8D 30 14 ; Store accumulator to $1430.w [Reads: Accumulator]
	lda $7EF37A.l		; AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0008.w		; 29 08 00 ; Logical AND #$0008.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$2D44.w		; A9 44 2D ; Load #$2D44.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1432.w		; 8D 32 14 ; Store accumulator to $1432.w [Reads: Accumulator]
	lda #$2D45.w		; A9 45 2D ; Load #$2D45.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1434.w		; 8D 34 14 ; Store accumulator to $1434.w [Reads: Accumulator]
	lda $7EF37A.l		; AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0010.w		; 29 10 00 ; Logical AND #$0010.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$2D44.w		; A9 44 2D ; Load #$2D44.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1436.w		; 8D 36 14 ; Store accumulator to $1436.w [Reads: Accumulator]
	lda #$2D45.w		; A9 45 2D ; Load #$2D45.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1438.w		; 8D 38 14 ; Store accumulator to $1438.w [Reads: Accumulator]
	lda $7EF37A.l		; AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0020.w		; 29 20 00 ; Logical AND #$0020.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$2D44.w		; A9 44 2D ; Load #$2D44.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14B0.w		; 8D B0 14 ; Store accumulator to $14B0.w [Reads: Accumulator]
	lda #$2D45.w		; A9 45 2D ; Load #$2D45.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14B2.w		; 8D B2 14 ; Store accumulator to $14B2.w [Reads: Accumulator]
	lda $7EF37A.l		; AF 7A F3 7E ; Load long $7EF37A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0040.w		; 29 40 00 ; Logical AND #$0040.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda #$2D44.w		; A9 44 2D ; Load #$2D44.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14B4.w		; 8D B4 14 ; Store accumulator to $14B4.w [Reads: Accumulator]
	lda #$2D45.w		; A9 45 2D ; Load #$2D45.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14B6.w		; 8D B6 14 ; Store accumulator to $14B6.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $FAD5.w,X		; BC D5 FA ; Load Y register $FAD5.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0000.w,Y		; B9 00 00 ; Load $0000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $11B2.w		; 8D B2 11 ; Store accumulator to $11B2.w [Reads: Accumulator]
	lda $0002.w,Y		; B9 02 00 ; Load $0002.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $11B4.w		; 8D B4 11 ; Store accumulator to $11B4.w [Reads: Accumulator]
	lda $0040.w,Y		; B9 40 00 ; Load $0040.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $11F2.w		; 8D F2 11 ; Store accumulator to $11F2.w [Reads: Accumulator]
	lda $0042.w,Y		; B9 42 00 ; Load $0042.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $11F4.w		; 8D F4 11 ; Store accumulator to $11F4.w [Reads: Accumulator]
	lda $0207.w		; AD 07 02 ; Load $0207.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0010.w		; 29 10 00 ; Logical AND #$0010.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $48		; F0 48 ; Branch if equal to $F0, $48 [Flow: branch]
	lda #$3C61.w		; A9 61 3C ; Load #$3C61.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $FFC0.w,Y		; 99 C0 FF ; Store accumulator to $FFC0.w,Y [Reads: Y Index, Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $FFC2.w,Y		; 99 C2 FF ; Store accumulator to $FFC2.w,Y [Reads: Y Index, Accumulator]
	lda #$3C70.w		; A9 70 3C ; Load #$3C70.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $FFFE.w,Y		; 99 FE FF ; Store accumulator to $FFFE.w,Y [Reads: Y Index, Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0004.w,Y		; 99 04 00 ; Store accumulator to $0004.w,Y [Reads: Y Index, Accumulator]
	lda #$BC70.w		; A9 70 BC ; Load #$BC70.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $003E.w,Y		; 99 3E 00 ; Store accumulator to $003E.w,Y [Reads: Y Index, Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0044.w,Y		; 99 44 00 ; Store accumulator to $0044.w,Y [Reads: Y Index, Accumulator]
	lda #$BC61.w		; A9 61 BC ; Load #$BC61.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0080.w,Y		; 99 80 00 ; Store accumulator to $0080.w,Y [Reads: Y Index, Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0082.w,Y		; 99 82 00 ; Store accumulator to $0082.w,Y [Reads: Y Index, Accumulator]
	lda #$3C60.w		; A9 60 3C ; Load #$3C60.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $FFBE.w,Y		; 99 BE FF ; Store accumulator to $FFBE.w,Y [Reads: Y Index, Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $FFC4.w,Y		; 99 C4 FF ; Store accumulator to $FFC4.w,Y [Reads: Y Index, Accumulator]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0084.w,Y		; 99 84 00 ; Store accumulator to $0084.w,Y [Reads: Y Index, Accumulator]
	eor #$4000.w		; 49 00 40 ; Exclusive OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $007E.w,Y		; 99 7E 00 ; Store accumulator to $007E.w,Y [Reads: Y Index, Accumulator]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
	lda $7EF34F.l		; AF 4F F3 7E ; Load long $7EF34F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2A		; F0 2A ; Branch if equal to $F0, $2A [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF35B.l,X		; BF 5B F3 7E ; Load long $7EF35B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $F449.w,X		; BD 49 F4 ; Load $F449.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $122C.w,Y		; 99 2C 12 ; Store accumulator to $122C.w,Y [Reads: Y Index, Accumulator]
	lda $F459.w,X		; BD 59 F4 ; Load $F459.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $126C.w,Y		; 99 6C 12 ; Store accumulator to $126C.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0010.w		; C0 10 00 ; Compare #$0010.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $EB		; 90 EB ; Branch if carry clear to $90, $EB [Flow: branch]
	jmp $ECE6.w		; 4C E6 EC ; Jump to $ECE6.w [Flow: jump]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0005.w		; C9 05 00 ; Compare #$0005.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	lda $7EF344.l		; AF 44 F3 7E ; Load long $7EF344.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $F549.w,X		; BD 49 F5 ; Load $F549.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $122C.w,Y		; 99 2C 12 ; Store accumulator to $122C.w,Y [Reads: Y Index, Accumulator]
	lda $F559.w,X		; BD 59 F5 ; Load $F559.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $126C.w,Y		; 99 6C 12 ; Store accumulator to $126C.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0010.w		; C0 10 00 ; Compare #$0010.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $EB		; 90 EB ; Branch if carry clear to $90, $EB [Flow: branch]
	jmp $ECE6.w		; 4C E6 EC ; Jump to $ECE6.w [Flow: jump]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0014.w		; C9 14 00 ; Compare #$0014.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	lda $7EF353.l		; AF 53 F3 7E ; Load long $7EF353.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $F5A9.w,X		; BD A9 F5 ; Load $F5A9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $122C.w,Y		; 99 2C 12 ; Store accumulator to $122C.w,Y [Reads: Y Index, Accumulator]
	lda $F5B9.w,X		; BD B9 F5 ; Load $F5B9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $126C.w,Y		; 99 6C 12 ; Store accumulator to $126C.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0010.w		; C0 10 00 ; Compare #$0010.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $EB		; 90 EB ; Branch if carry clear to $90, $EB [Flow: branch]
	jmp $ECE6.w		; 4C E6 EC ; Jump to $ECE6.w [Flow: jump]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$000D.w		; C9 0D 00 ; Compare #$000D.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2B		; D0 2B ; Branch if not equal to $D0, $2B [Flow: branch]
	lda $7EF34C.l		; AF 4C F3 7E ; Load long $7EF34C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $F569.w,X		; BD 69 F5 ; Load $F569.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $122C.w,Y		; 99 2C 12 ; Store accumulator to $122C.w,Y [Reads: Y Index, Accumulator]
	lda $F579.w,X		; BD 79 F5 ; Load $F579.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $126C.w,Y		; 99 6C 12 ; Store accumulator to $126C.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0010.w		; C0 10 00 ; Compare #$0010.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $EB		; 90 EB ; Branch if carry clear to $90, $EB [Flow: branch]
	.db $80, $54		; 80 54 ; Branch always to $80, $54 [Flow: branch]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0001.w		; C9 01 00 ; Compare #$0001.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2B		; D0 2B ; Branch if not equal to $D0, $2B [Flow: branch]
	lda $7EF340.l		; AF 40 F3 7E ; Load long $7EF340.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $F5C9.w,X		; BD C9 F5 ; Load $F5C9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $122C.w,Y		; 99 2C 12 ; Store accumulator to $122C.w,Y [Reads: Y Index, Accumulator]
	lda $F5D9.w,X		; BD D9 F5 ; Load $F5D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $126C.w,Y		; 99 6C 12 ; Store accumulator to $126C.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0010.w		; C0 10 00 ; Compare #$0010.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $EB		; 90 EB ; Branch if carry clear to $90, $EB [Flow: branch]
	.db $80, $1E		; 80 1E ; Branch always to $80, $1E [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $F1C9.w,X		; BD C9 F1 ; Load $F1C9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $122C.w,Y		; 99 2C 12 ; Store accumulator to $122C.w,Y [Reads: Y Index, Accumulator]
	lda $F1D9.w,X		; BD D9 F1 ; Load $F1D9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $126C.w,Y		; 99 6C 12 ; Store accumulator to $126C.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0010.w		; C0 10 00 ; Compare #$0010.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $EB		; 90 EB ; Branch if carry clear to $90, $EB [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$16E0.w		; A9 E0 16 ; Load #$16E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F821.w		; A9 21 F8 ; Load #$F821.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $7A24.w,Y		; 79 24 7A ; Add $7A24.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	bit $7B.b		; 24 7B ; Test bits $7B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $7C.b		; 24 7C ; Test bits $7C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $8C.b		; 24 8C ; Test bits $8C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $69.b		; 24 69 ; Test bits $69.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $6A.b		; 24 6A ; Test bits $6A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $6B.b		; 24 6B ; Test bits $6B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $6C.b		; 24 6C ; Test bits $6C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $6D.b		; 24 6D ; Test bits $6D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $6E.b		; 24 6E ; Test bits $6E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $6F.b		; 24 6F ; Test bits $6F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $C2.b		; 24 C2 ; Test bits $C2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $30, $A9		; 30 A9 ; Branch if minus to $30, $A9 [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $156A.w		; 8D 6A 15 ; Store accumulator to $156A.w [Reads: Accumulator]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $8D		; 80 8D ; Branch always to $80, $8D [Flow: branch]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora [$09.b],Y		; 17 09 ; OR accumulator with memory (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $177C.w		; 8D 7C 17 ; Store accumulator to $177C.w [Reads: Accumulator]
	eor #$00.b		; 49 00 ; Exclusive OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $8D		; 80 8D ; Branch always to $80, $8D [Flow: branch]
	jmp ($A215.w,X)		; 7C 15 A2 ; Jump indirect indexed to ($A215.w,X) [Reads: X Index] [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($2528.w,X)		; FC 28 25 ; Jump to subroutine indirect indexed ($2528.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ora $09.b,X		; 15 09 ; OR accumulator with memory $09.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $15BC.w,X		; 9D BC 15 ; Store accumulator to $15BC.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$40.b		; 69 40 ; Add #$40.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $E9		; 10 E9 ; Branch if plus to $10, $E9 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$F9.b		; A9 F9 ; Load #$F9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $156C.w,X		; 9D 6C 15 ; Store accumulator to $156C.w,X [Reads: Accumulator, X Index]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $9D		; 80 9D ; Branch always to $80, $9D [Flow: branch]
	jmp ($E817.w)		; 6C 17 E8 ; Jump indirect to ($E817.w) [Flow: jump]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$F5.b		; A9 F5 ; Load #$F5.b into accumulator [Writes: Accumulator] [Flags: NZ]
	bit $9D.b		; 24 9D ; Test bits $9D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy $9D15.w		; AC 15 9D ; Load $9D15.w into Y register [Writes: Y Index] [Flags: NZ]
	cpx $9D15.w		; EC 15 9D ; Compare $9D15.w with X register [Reads: X Index] [Flags: NCZ]
	bit $9D16.w		; 2C 16 9D ; Test bits $9D16.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	jmp ($9D16.w)		; 6C 16 9D ; Jump indirect to ($9D16.w) [Flow: jump]
	ldy $9D16.w		; AC 16 9D ; Load $9D16.w into Y register [Writes: Y Index] [Flags: NZ]
	cpx $9D16.w		; EC 16 9D ; Compare $9D16.w with X register [Reads: X Index] [Flags: NCZ]
	bit $E817.w		; 2C 17 E8 ; Test bits $E817.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $E6		; 10 E6 ; Branch if plus to $10, $E6 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$D7.b		; A9 D7 ; Load #$D7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $166C.w,X		; 9D 6C 16 ; Store accumulator to $166C.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $ED09.w,X		; BD 09 ED ; Load $ED09.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $15AC.w,X		; 9D AC 15 ; Store accumulator to $15AC.w,X [Reads: Accumulator, X Index]
	lda $ED19.w,X		; BD 19 ED ; Load $ED19.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $16AC.w,X		; 9D AC 16 ; Store accumulator to $16AC.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $EB		; 10 EB ; Branch if plus to $10, $EB [Flow: branch]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $27D000.l,X		; FF 00 D0 27 ; Subtract with carry (long,X) $27D000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$F5.b		; A9 F5 ; Load #$F5.b into accumulator [Writes: Accumulator] [Flags: NZ]
	bit $9D.b		; 24 9D ; Test bits $9D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ldy $E816.w		; AC 16 E8 ; Load $E816.w into Y register [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	lda #$F2.b		; A9 F2 ; Load #$F2.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $85.b,X		; 16 85 ; Arithmetic shift left $85.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc ($7E.b,S),Y		; F3 7E ; Subtract with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A9.b		; 02 A9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($F9.b),Y		; 11 F9 ; OR accumulator with memory ($F9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$15EC.w		; A9 EC 15 ; Load #$15EC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F839.w		; A9 39 F8 ; Load #$F839.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$15F2.w		; A9 F2 15 ; Load #$15F2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF35A.l		; AF 5A F3 7E ; Load long $7EF35A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F861.w		; A9 61 F8 ; Load #$F861.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$15F8.w		; A9 F8 15 ; Load #$15F8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF35B.l		; AF 5B F3 7E ; Load long $7EF35B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F881.w		; A9 81 F8 ; Load #$F881.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF366.l		; AF 66 F3 7E ; Load long $7EF366.l into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $FC		; 10 FC ; Branch if plus to $10, $FC [Flow: branch]
	.db $90, $1A		; 90 1A ; Branch if carry clear to $90, $1A [Flow: branch]
	jsr $EEB6.w		; 20 B6 EE ; Jump to subroutine at $EEB6.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$16F8.w		; A9 F8 16 ; Load #$16F8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F8A9.w		; A9 A9 F8 ; Load #$F8A9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF368.l		; AF 68 F3 7E ; Load long $7EF368.l into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $FC		; 10 FC ; Branch if plus to $10, $FC [Flow: branch]
	.db $90, $12		; 90 12 ; Branch if carry clear to $90, $12 [Flow: branch]
	lda #$16EC.w		; A9 EC 16 ; Load #$16EC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F8C1.w		; A9 C1 F8 ; Load #$F8C1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsl $008781.l		; 22 81 87 00 ; Jump to subroutine long $008781.l [Writes: Stack Pointer] [Flow: call]
	jmp.w [$DCEE]		; DC EE DC ; Jump long indirect [$DCEE] [Flow: jump]
	inc $EEE1.w		; EE E1 EE ; Increment $EEE1.w [Flags: NZ]
	inc $DCEE.w		; EE EE DC ; Increment $DCEE.w [Flags: NZ]
	inc $EEF4.w		; EE F4 EE ; Increment $EEF4.w [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $EF00.w		; EE 00 EF ; Increment $EF00.w [Flags: NZ]
	asl $EF.b		; 06 EF ; Arithmetic shift left $EF.b [Reads: Direct Page] [Flags: NCZ]
	tsb $12EF.w		; 0C EF 12 ; Test and set bits $12EF.w [Reads: Accumulator] [Flags: Z]
	sbc $1FEF18.l		; EF 18 EF 1F ; Subtract with carry (long) $1FEF18.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $64EF2C.l		; EF 2C EF 64 ; Subtract with carry (long) $64EF2C.l [Writes: Accumulator] [Flags: NCVZ]
	cop $64.b		; 02 64 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $60.b,S		; 03 60 ; OR accumulator with stack relative $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $7EF340.l		; AF 40 F3 7E ; Load long $7EF340.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F5		; F0 F5 ; Branch if equal to $F0, $F5 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	stz $03.b		; 64 03 ; Store zero to $03.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF354.l		; AF 54 F3 7E ; Load long $7EF354.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $F1		; 80 F1 ; Branch always to $80, $F1 [Flow: branch]
	lda $7EF342.l		; AF 42 F3 7E ; Load long $7EF342.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $EB		; 80 EB ; Branch always to $80, $EB [Flow: branch]
	lda $7EF34B.l		; AF 4B F3 7E ; Load long $7EF34B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $E5		; 80 E5 ; Branch always to $80, $E5 [Flow: branch]
	lda $7EF350.l		; AF 50 F3 7E ; Load long $7EF350.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $DF		; 80 DF ; Branch always to $80, $DF [Flow: branch]
	lda $7EF345.l		; AF 45 F3 7E ; Load long $7EF345.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $D9		; 80 D9 ; Branch always to $80, $D9 [Flow: branch]
	lda $7EF35B.l		; AF 5B F3 7E ; Load long $7EF35B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $D3		; 80 D3 ; Branch always to $80, $D3 [Flow: branch]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $CD		; 80 CD ; Branch always to $80, $CD [Flow: branch]
	lda $7EF354.l		; AF 54 F3 7E ; Load long $7EF354.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $80, $C6		; 80 C6 ; Branch always to $80, $C6 [Flow: branch]
	lda $7EF35A.l		; [PATTERN: Memory clearing operation] AF 5A F3 7E ; Load long $7EF35A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $C0		; F0 C0 ; Branch if equal to $F0, $C0 [Flow: branch]
	stz $02.b		; 64 02 ; Store zero to $02.b
	stz $03.b		; 64 03 ; Store zero to $03.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF35B.l		; [PATTERN: Memory clearing operation] AF 5B F3 7E ; Load long $7EF35B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $B3		; F0 B3 ; Branch if equal to $F0, $B3 [Flow: branch]
	stz $02.b		; 64 02 ; Store zero to $02.b
	stz $03.b		; 64 03 ; Store zero to $03.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $040C.w		; AD 0C 04 ; Load $040C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF364.l		; AF 64 F3 7E ; Load long $7EF364.l into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $FC		; 10 FC ; Branch if plus to $10, $FC [Flow: branch]
	.db $90, $12		; 90 12 ; Branch if carry clear to $90, $12 [Flow: branch]
	lda #$16F2.w		; A9 F2 16 ; Load #$16F2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F899.w		; A9 99 F8 ; Load #$F899.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$28FB.w		; A9 FB 28 ; Load #$28FB.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $12EA.w		; 8D EA 12 ; Store accumulator to $12EA.w [Reads: Accumulator]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $176A.w		; 8D 6A 17 ; Store accumulator to $176A.w [Reads: Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $177C.w		; 8D 7C 17 ; Store accumulator to $177C.w [Reads: Accumulator]
	eor #$8000.w		; 49 00 80 ; Exclusive OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $12FC.w		; 8D FC 12 ; Store accumulator to $12FC.w [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0010.w		; A0 10 00 ; Load #$0010.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$28FC.w		; A9 FC 28 ; Load #$28FC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $132A.w,X		; 9D 2A 13 ; Store accumulator to $132A.w,X [Reads: Accumulator, X Index]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $133C.w,X		; 9D 3C 13 ; Store accumulator to $133C.w,X [Reads: Accumulator, X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $E9		; 10 E9 ; Branch if plus to $10, $E9 [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0007.w		; A0 07 00 ; Load #$0007.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$28F9.w		; A9 F9 28 ; Load #$28F9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $00.b		; 25 00 ; Logical AND $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $12EC.w,X		; 9D EC 12 ; Store accumulator to $12EC.w,X [Reads: Accumulator, X Index]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $176C.w,X		; 9D 6C 17 ; Store accumulator to $176C.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0007.w		; A0 07 00 ; Load #$0007.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$24F5.w		; A9 F5 24 ; Load #$24F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $132C.w,X		; 9D 2C 13 ; Store accumulator to $132C.w,X [Reads: Accumulator, X Index]
	sta $136C.w,X		; 9D 6C 13 ; Store accumulator to $136C.w,X [Reads: Accumulator, X Index]
	sta $13AC.w,X		; 9D AC 13 ; Store accumulator to $13AC.w,X [Reads: Accumulator, X Index]
	sta $13EC.w,X		; 9D EC 13 ; Store accumulator to $13EC.w,X [Reads: Accumulator, X Index]
	sta $142C.w,X		; 9D 2C 14 ; Store accumulator to $142C.w,X [Reads: Accumulator, X Index]
	sta $146C.w,X		; 9D 6C 14 ; Store accumulator to $146C.w,X [Reads: Accumulator, X Index]
	sta $14AC.w,X		; 9D AC 14 ; Store accumulator to $14AC.w,X [Reads: Accumulator, X Index]
	sta $14EC.w,X		; 9D EC 14 ; Store accumulator to $14EC.w,X [Reads: Accumulator, X Index]
	sta $152C.w,X		; 9D 2C 15 ; Store accumulator to $152C.w,X [Reads: Accumulator, X Index]
	sta $156C.w,X		; 9D 6C 15 ; Store accumulator to $156C.w,X [Reads: Accumulator, X Index]
	sta $15AC.w,X		; 9D AC 15 ; Store accumulator to $15AC.w,X [Reads: Accumulator, X Index]
	sta $15EC.w,X		; 9D EC 15 ; Store accumulator to $15EC.w,X [Reads: Accumulator, X Index]
	sta $162C.w,X		; 9D 2C 16 ; Store accumulator to $162C.w,X [Reads: Accumulator, X Index]
	sta $166C.w,X		; 9D 6C 16 ; Store accumulator to $166C.w,X [Reads: Accumulator, X Index]
	sta $16AC.w,X		; 9D AC 16 ; Store accumulator to $16AC.w,X [Reads: Accumulator, X Index]
	sta $16EC.w,X		; 9D EC 16 ; Store accumulator to $16EC.w,X [Reads: Accumulator, X Index]
	sta $172C.w,X		; 9D 2C 17 ; Store accumulator to $172C.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $C8		; 10 C8 ; Branch if plus to $10, $C8 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$1372.w		; A9 72 13 ; Load #$1372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF35C.l		; AF 5C F3 7E ; Load long $7EF35C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F751.w		; A9 51 F7 ; Load #$F751.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1472.w		; A9 72 14 ; Load #$1472.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF35D.l		; AF 5D F3 7E ; Load long $7EF35D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F751.w		; A9 51 F7 ; Load #$F751.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1572.w		; A9 72 15 ; Load #$1572.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF35E.l		; AF 5E F3 7E ; Load long $7EF35E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F751.w		; A9 51 F7 ; Load #$F751.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1672.w		; A9 72 16 ; Load #$1672.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF35F.l		; AF 5F F3 7E ; Load long $7EF35F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F751.w		; A9 51 F7 ; Load #$F751.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda #$1408.w		; A9 08 14 ; Load #$1408.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF34F.l		; AF 4F F3 7E ; Load long $7EF34F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF35B.l,X		; BF 5B F3 7E ; Load long $7EF35B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$F751.w		; A9 51 F7 ; Load #$F751.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $E372.w		; 20 72 E3 ; Jump to subroutine at $E372.w [Writes: Stack Pointer] [Flow: call]
	lda $0202.w		; AD 02 02 ; Load $0202.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $FAD5.w,X		; BC D5 FA ; Load Y register $FAD5.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $0000.w,Y		; B9 00 00 ; Load $0000.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $11B2.w		; 8D B2 11 ; Store accumulator to $11B2.w [Reads: Accumulator]
	lda $0002.w,Y		; B9 02 00 ; Load $0002.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $11B4.w		; 8D B4 11 ; Store accumulator to $11B4.w [Reads: Accumulator]
	lda $0040.w,Y		; B9 40 00 ; Load $0040.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $11F2.w		; 8D F2 11 ; Store accumulator to $11F2.w [Reads: Accumulator]
	lda $0042.w,Y		; B9 42 00 ; Load $0042.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $11F4.w		; 8D F4 11 ; Store accumulator to $11F4.w [Reads: Accumulator]
	lda $7EF34F.l		; AF 4F F3 7E ; Load long $7EF34F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $E177.w,Y		; B9 77 E1 ; Load $E177.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0207.w		; AD 07 02 ; Load $0207.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$3C61.w		; A9 61 3C ; Load #$3C61.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $12AA.w,Y		; 99 AA 12 ; Store accumulator to $12AA.w,Y [Reads: Y Index, Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $12AC.w,Y		; 99 AC 12 ; Store accumulator to $12AC.w,Y [Reads: Y Index, Accumulator]
	lda #$3C70.w		; A9 70 3C ; Load #$3C70.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $12E8.w,Y		; 99 E8 12 ; Store accumulator to $12E8.w,Y [Reads: Y Index, Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $12EE.w,Y		; 99 EE 12 ; Store accumulator to $12EE.w,Y [Reads: Y Index, Accumulator]
	lda #$BC70.w		; A9 70 BC ; Load #$BC70.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1328.w,Y		; 99 28 13 ; Store accumulator to $1328.w,Y [Reads: Y Index, Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $132E.w,Y		; 99 2E 13 ; Store accumulator to $132E.w,Y [Reads: Y Index, Accumulator]
	lda #$BC61.w		; A9 61 BC ; Load #$BC61.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $136A.w,Y		; 99 6A 13 ; Store accumulator to $136A.w,Y [Reads: Y Index, Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $136C.w,Y		; 99 6C 13 ; Store accumulator to $136C.w,Y [Reads: Y Index, Accumulator]
	lda #$3C60.w		; A9 60 3C ; Load #$3C60.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $12A8.w,Y		; 99 A8 12 ; Store accumulator to $12A8.w,Y [Reads: Y Index, Accumulator]
	ora #$4000.w		; 09 00 40 ; Logical OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $12AE.w,Y		; 99 AE 12 ; Store accumulator to $12AE.w,Y [Reads: Y Index, Accumulator]
	ora #$8000.w		; 09 00 80 ; Logical OR #$8000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $136E.w,Y		; 99 6E 13 ; Store accumulator to $136E.w,Y [Reads: Y Index, Accumulator]
	eor #$4000.w		; 49 00 40 ; Exclusive OR #$4000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1368.w,Y		; 99 68 13 ; Store accumulator to $1368.w,Y [Reads: Y Index, Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0207.w		; 8D 07 02 ; Store accumulator to $0207.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $0003.w		; 9C 03 00 ; Store zero to $0003.w
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp $F9F9.w,Y		; D9 F9 F9 ; Compare accumulator $F9F9.w,Y [Reads: Y Index] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $F9F9.w,Y		; F9 F9 F9 ; Subtract with carry $F9F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $03.b,X		; F6 03 ; Increment memory $03.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	.db $80, $F3		; 80 F3 ; Branch always to $80, $F3 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $EE		; 10 EE ; Branch if plus to $10, $EE [Flow: branch]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $03.b,X		; B5 03 ; Load $03.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$7F.b		; C9 7F ; Compare #$7F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ora #$90.b		; 09 90 ; Logical OR #$90.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03.b,X		; 95 03 ; Store accumulator to $03.b,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7EF36C.l		; CF 6C F3 7E ; Compare accumulator (long) $7EF36C.l [Reads: Accumulator] [Flags: NCZ]
	.db $90, $15		; 90 15 ; Branch if carry clear to $90, $15 [Flow: branch]
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF36D.l		; 8F 6D F3 7E ; Store accumulator (long) $7EF36D.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	lda $020A.w		; AD 0A 02 ; Load $020A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$68.b		; A9 68 ; Load #$68.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$C7.b		; A9 C7 ; Load #$C7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	dec $0208.w		; CE 08 02 ; Decrement $0208.w [Flags: NZ]
	.db $D0, $4F		; D0 4F ; Branch if not equal to $D0, $4F [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00F8.w		; 29 F8 00 ; Logical AND #$00F8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp #$0014.w		; C9 14 00 ; Compare #$0014.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	sbc #$0014.w		; E9 14 00 ; Subtract #$0014.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0040.w		; 69 40 00 ; Add #$0040.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldx $0209.w		; AE 09 02 ; Load $0209.w into X register [Writes: X Index] [Flags: NZ]
	lda $0DFA11.l,X		; BF 11 FA 0D ; Load long $0DFA11.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0208.w		; 8D 08 02 ; Store accumulator to $0208.w [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0DFA09.l,X		; BF 09 FA 0D ; Load long $0DFA09.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $0DFA0A.l,X		; BF 0A FA 0D ; Load long $0DFA0A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $0209.w		; AD 09 02 ; Load $0209.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0209.w		; 8D 09 02 ; Store accumulator to $0209.w [Reads: Accumulator]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $FA70.w		; 20 70 FA ; Jump to subroutine at $FA70.w [Writes: Stack Pointer] [Flow: call]
	stz $020A.w		; 9C 0A 02 ; Store zero to $020A.w
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF373.l		; 8F 73 F3 7E ; Store accumulator (long) $7EF373.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$31		; E2 31
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $24.b,X		; F5 24 ; Subtract $24.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $24.b,X		; F5 24 ; Subtract $24.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $24.b,X		; F5 24 ; Subtract $24.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $24.b,X		; F5 24 ; Subtract $24.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $24.b,X		; F5 24 ; Subtract $24.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $24.b,X		; F5 24 ; Subtract $24.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $24.b,X		; F5 24 ; Subtract $24.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $24.b,X		; F5 24 ; Subtract $24.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and $6C.b		; 25 6C ; Logical AND $6C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $70.b		; 24 70 ; Test bits $70.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $71.b		; 25 71 ; Logical AND $71.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $72.b		; 25 72 ; Logical AND $72.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $73.b		; 25 73 ; Logical AND $73.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $74.b		; 25 74 ; Logical AND $74.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $75.b		; 25 75 ; Logical AND $75.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $76.b		; 25 76 ; Logical AND $76.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $77.b		; 25 77 ; Logical AND $77.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $57.b		; 24 57 ; Test bits $57.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5A.b		; 25 5A ; Logical AND $5A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $62.b		; 25 62 ; Logical AND $62.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $57.b		; 25 57 ; Logical AND $57.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $63.b		; 25 63 ; Logical AND $63.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $51.b		; 24 51 ; Test bits $51.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $51.b		; 25 51 ; Logical AND $51.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $5C.b		; 24 5C ; Test bits $5C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $64.b		; 25 64 ; Logical AND $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $62.b		; 25 62 ; Logical AND $62.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $57.b		; 25 57 ; Logical AND $57.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $55.b		; 24 55 ; Test bits $55.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $53.b		; 25 53 ; Logical AND $53.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $58.b		; 24 58 ; Test bits $58.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $52.b		; 25 52 ; Logical AND $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $53.b		; 25 53 ; Logical AND $53.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $51.b		; 24 51 ; Test bits $51.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $51.b		; 25 51 ; Logical AND $51.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $62.b		; 25 62 ; Logical AND $62.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $54.b		; 24 54 ; Test bits $54.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $63.b		; 25 63 ; Logical AND $63.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $57.b		; 25 57 ; Logical AND $57.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $60.b		; 24 60 ; Test bits $60.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $64.b		; 25 64 ; Logical AND $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5A.b		; 25 5A ; Logical AND $5A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $5B.b		; 24 5B ; Test bits $5B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5F.b		; 25 5F ; Logical AND $5F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $5C.b		; 24 5C ; Test bits $5C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $56.b		; 25 56 ; Logical AND $56.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $52.b		; 25 52 ; Logical AND $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $57.b		; 24 57 ; Test bits $57.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $62.b		; 24 62 ; Test bits $62.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $57.b		; 25 57 ; Logical AND $57.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $65.b		; 25 65 ; Logical AND $65.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5B.b		; 25 5B ; Logical AND $5B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $00.b		; 24 00 ; Test bits $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $01.b		; 24 01 ; Test bits $01.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $02.b		; 24 02 ; Test bits $02.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $03.b		; 24 03 ; Test bits $03.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $04.b		; 24 04 ; Test bits $04.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $05.b		; 24 05 ; Test bits $05.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $06.b		; 24 06 ; Test bits $06.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $07.b		; 24 07 ; Test bits $07.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $08.b		; 24 08 ; Test bits $08.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $09.b		; 24 09 ; Test bits $09.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $51.b		; 24 51 ; Test bits $51.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5A.b		; 25 5A ; Logical AND $5A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $5E.b		; 24 5E ; Test bits $5E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $5C.b		; 24 5C ; Test bits $5C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $64.b		; 25 64 ; Logical AND $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $53.b		; 25 53 ; Logical AND $53.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $5C.b		; 24 5C ; Test bits $5C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $64.b		; 25 64 ; Logical AND $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $62.b		; 25 62 ; Logical AND $62.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $57.b		; 25 57 ; Logical AND $57.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $52.b		; 25 52 ; Logical AND $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5D.b		; 25 5D ; Logical AND $5D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $5E.b		; 24 5E ; Test bits $5E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $62.b		; 24 62 ; Test bits $62.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $52.b		; 25 52 ; Logical AND $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5D.b		; 25 5D ; Logical AND $5D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $5E.b		; 24 5E ; Test bits $5E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $51.b		; 24 51 ; Test bits $51.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $68.b		; 25 68 ; Logical AND $68.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5D.b		; 25 5D ; Logical AND $5D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $56.b		; 25 56 ; Logical AND $56.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $52.b		; 25 52 ; Logical AND $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $52.b		; 24 52 ; Test bits $52.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5F.b		; 25 5F ; Logical AND $5F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $5C.b		; 24 5C ; Test bits $5C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $64.b		; 25 64 ; Logical AND $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $62.b		; 25 62 ; Logical AND $62.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $57.b		; 25 57 ; Logical AND $57.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $51.b		; 24 51 ; Test bits $51.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $63.b		; 25 63 ; Logical AND $63.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $63.b		; 25 63 ; Logical AND $63.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5B.b		; 25 5B ; Logical AND $5B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $5B.b		; 24 5B ; Test bits $5B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $55.b		; 25 55 ; Logical AND $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $5C.b		; 24 5C ; Test bits $5C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $53.b		; 25 53 ; Logical AND $53.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $52.b		; 25 52 ; Logical AND $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5D.b		; 25 5D ; Logical AND $5D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $56.b		; 25 56 ; Logical AND $56.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $52.b		; 25 52 ; Logical AND $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $5C.b		; 24 5C ; Test bits $5C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $53.b		; 25 53 ; Logical AND $53.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $52.b		; 25 52 ; Logical AND $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5D.b		; 25 5D ; Logical AND $5D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $52.b		; 25 52 ; Logical AND $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $64.b		; 25 64 ; Logical AND $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $6A.b		; 25 6A ; Logical AND $6A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5B.b		; 25 5B ; Logical AND $5B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5B.b		; 25 5B ; Logical AND $5B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $53.b		; 25 53 ; Logical AND $53.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $52.b		; 25 52 ; Logical AND $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5D.b		; 25 5D ; Logical AND $5D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $55.b		; 24 55 ; Test bits $55.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $51.b		; 24 51 ; Test bits $51.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $56.b		; 24 56 ; Test bits $56.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $53.b		; 25 53 ; Logical AND $53.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $51.b		; 24 51 ; Test bits $51.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5C.b		; 25 5C ; Logical AND $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $56.b		; 25 56 ; Logical AND $56.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $52.b		; 25 52 ; Logical AND $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $5F.b		; 24 5F ; Test bits $5F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $66.b		; 25 66 ; Logical AND $66.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $53.b		; 25 53 ; Logical AND $53.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $55.b		; 24 55 ; Test bits $55.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $5B.b		; 25 5B ; Logical AND $5B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $64.b		; 25 64 ; Logical AND $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $63.b		; 25 63 ; Logical AND $63.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $55.b		; 24 55 ; Test bits $55.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $5B.b		; 25 5B ; Logical AND $5B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $64.b		; 25 64 ; Logical AND $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $63.b		; 25 63 ; Logical AND $63.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $54.b		; 25 54 ; Logical AND $54.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $5C.b		; 24 5C ; Test bits $5C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $50.b		; 25 50 ; Logical AND $50.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $56.b		; 25 56 ; Logical AND $56.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $52.b		; 25 52 ; Logical AND $52.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $5C.b		; 24 5C ; Test bits $5C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $58.b		; 25 58 ; Logical AND $58.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $5E.b		; 25 5E ; Logical AND $5E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $61.b		; 25 61 ; Logical AND $61.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $6B.b		; 24 6B ; Test bits $6B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $6C.b		; 25 6C ; Logical AND $6C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $6E.b		; 25 6E ; Logical AND $6E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $6F.b		; 25 6F ; Logical AND $6F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7C.b		; 25 7C ; Logical AND $7C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7D.b		; 25 7D ; Logical AND $7D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7E.b		; 25 7E ; Logical AND $7E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7F.b		; 25 7F ; Logical AND $7F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $6B.b		; 24 6B ; Test bits $6B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $6C.b		; 25 6C ; Logical AND $6C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $6B.b		; 24 6B ; Test bits $6B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $6C.b		; 25 6C ; Logical AND $6C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $6E.b		; 24 6E ; Test bits $6E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $6F.b		; 25 6F ; Logical AND $6F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $78.b		; 24 78 ; Test bits $78.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $79.b		; 25 79 ; Logical AND $79.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7A.b		; 25 7A ; Logical AND $7A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7B.b		; 25 7B ; Logical AND $7B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7C.b		; 25 7C ; Logical AND $7C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7D.b		; 25 7D ; Logical AND $7D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7E.b		; 25 7E ; Logical AND $7E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $7F.b		; 25 7F ; Logical AND $7F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F5.b		; 25 F5 ; Logical AND $F5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $20F5.w		; 20 F5 20 ; Jump to subroutine at $20F5.w [Writes: Stack Pointer] [Flow: call]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc #$28.b		; E9 28 ; Subtract #$28.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	wai		; CB ; Wait for interrupt
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	eor #$28.b		; 49 28 ; Exclusive OR #$28.b with accumulator [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc #$28.b		; E9 28 ; Subtract #$28.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	wai		; CB ; Wait for interrupt
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bit $CB.b		; 24 CB ; Test bits $CB.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	bit $2CB9.w		; 2C B9 2C ; Test bits $2CB9.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$2C.b		; C9 2C ; Compare #$2C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	bit $B9.b		; 24 B9 ; Test bits $B9.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $C9.b		; 24 C9 ; Test bits $C9.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	jsr $20F5.w		; 20 F5 20 ; Jump to subroutine at $20F5.w [Writes: Stack Pointer] [Flow: call]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $24.b,X		; F5 24 ; Subtract $24.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $24.b,X		; F6 24 ; Increment memory $24.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cpy #$24.b		; C0 24 ; Compare #$24.b with Y register [Reads: Y Index] [Flags: NCZ]
	sbc $24.b,X		; F5 24 ; Subtract $24.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda ($2C.b)		; B2 2C ; Load accumulator (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($2C.b,S),Y		; B3 2C ; Load accumulator (stack relative indirect indexed) ($2C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$2C		; C2 2C
.ACCU 16
	rep #$6C		; C2 6C
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $45,$24		; 44 24 45 ; Move block positive $45,$24 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	bit $46.b		; 24 46 ; Test bits $46.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $47.b		; 24 47 ; Test bits $47.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $3B.b		; 24 3B ; Test bits $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	jsr $203C.w		; 20 3C 20 ; Jump to subroutine at $203C.w [Writes: Stack Pointer] [Flow: call]
	and $3E20.w,X		; 3D 20 3E ; AND accumulator with memory $3E20.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $20F5.w		; 20 F5 20 ; Jump to subroutine at $20F5.w [Writes: Stack Pointer] [Flow: call]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $24		; B0 24 ; Branch if carry set to $B0, $24 [Flow: branch]
	lda ($24.b),Y		; B1 24 ; Load accumulator ($24.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$24.b		; C0 24 ; Compare #$24.b with Y register [Reads: Y Index] [Flags: NCZ]
	cmp ($24.b,X)		; C1 24 ; Compare accumulator ($24.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $2C		; B0 2C ; Branch if carry set to $B0, $2C [Flow: branch]
	ldx $C02C.w,Y		; BE 2C C0 ; Load X register $C02C.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	bit $2CC1.w		; 2C C1 2C ; Test bits $2CC1.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $7E28.w,X		; 7D 28 7E ; Add $7E28.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ror $7DE8.w,X		; 7E E8 7D ; Rotate right $7DE8.w,X [Reads: X Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $28.b,X		; 76 28 ; Rotate right $28.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc [$28.b],Y		; 77 28 ; Add with carry (long indexed) [$28.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$E8.b],Y		; 77 E8 ; Add with carry (long indexed) [$E8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $E8.b,X		; 76 E8 ; Rotate right $E8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $28.b		; 66 28 ; Rotate right $28.b [Reads: Direct Page] [Flags: NCZ]
	adc [$28.b]		; 67 28 ; Add with carry (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc [$E8.b]		; 67 E8 ; Add with carry (long) [$E8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror $E8.b		; 66 E8 ; Rotate right $E8.b [Reads: Direct Page] [Flags: NCZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $BD24.w,X		; BC 24 BD ; Load Y register $BD24.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	bit $CC.b		; 24 CC ; Test bits $CC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $CD.b		; 24 CD ; Test bits $CD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	jsr $20F5.w		; 20 F5 20 ; Jump to subroutine at $20F5.w [Writes: Stack Pointer] [Flow: call]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $20.b,Y		; B6 20 ; Load X register $20.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda [$20.b],Y		; B7 20 ; Load accumulator (long indexed) [$20.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $20.b		; C6 20 ; Decrement $20.b [Reads: Direct Page] [Flags: NZ]
	cmp [$20.b]		; C7 20 ; Compare accumulator (long) [$20.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	cmp ($20.b),Y		; D1 20 ; Compare accumulator ($20.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($20.b,X)		; E1 20 ; Subtract with carry ($20.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	pei ($2C.b)		; D4 2C ; Push effective indirect address ($2C.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $2C.b,X		; D5 2C ; Compare accumulator $2C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $2C.b		; E4 2C ; Compare $2C.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $2C.b		; E5 2C ; Subtract $2C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	pei ($2C.b)		; D4 2C ; Push effective indirect address ($2C.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $2C.b,X		; D5 2C ; Compare accumulator $2C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $2C.b		; E4 2C ; Compare $2C.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $2C.b		; E5 2C ; Subtract $2C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	bit $3C41.w,X		; 3C 41 3C ; Test bits $3C41.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	.db $42, $28		; 42 28 ; Reserved instruction
	eor $3C.b,S		; 43 3C ; Exclusive OR accumulator with stack relative $3C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $3C.b		; A6 3C ; Load $3C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	bit $3CD9.w,X		; 3C D9 3C ; Test bits $3CD9.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $45,$20		; 44 20 45 ; Move block positive $45,$20 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jsr $2046.w		; 20 46 20 ; Jump to subroutine at $2046.w [Writes: Stack Pointer] [Flow: call]
	eor [$20.b]		; 47 20 ; Exclusive OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$28.b],Y		; 37 28 ; AND accumulator with memory (long indexed) [$28.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cmp $2C.b,S		; C3 2C ; Compare accumulator (stack relative) $2C.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($2C.b,S),Y		; D3 2C ; Compare accumulator (stack relative indirect indexed) ($2C.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	cmp ($24.b)		; D2 24 ; Compare accumulator (indirect) ($24.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($64.b)		; D2 64 ; Compare accumulator (indirect) ($64.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$24		; E2 24
	sbc $24.b,S		; E3 24 ; Subtract stack-relative $24.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp ($3C.b)		; D2 3C ; Compare accumulator (indirect) ($3C.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($7C.b)		; D2 7C ; Compare accumulator (indirect) ($7C.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
.ACCU 8
.INDEX 8
	sep #$3C		; E2 3C
	sbc $3C.b,S		; E3 3C ; Subtract stack-relative $3C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	cmp ($2C.b)		; D2 2C ; Compare accumulator (indirect) ($2C.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($6C.b)		; D2 6C ; Compare accumulator (indirect) ($6C.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$2C		; E2 2C
	sbc $2C.b,S		; E3 2C ; Subtract stack-relative $2C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	eor $28.b,X		; 55 28 ; Exclusive OR accumulator with memory $28.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $68.b,X		; 55 68 ; Exclusive OR accumulator with memory $68.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$2C.b],Y		; 57 2C ; Exclusive OR accumulator with memory (long indexed) [$2C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	bit $2837.w		; 2C 37 28 ; Test bits $2837.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $3A28.w,Y		; 39 28 3A ; AND accumulator with memory $3A28.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and [$28.b],Y		; 37 28 ; AND accumulator with memory (long indexed) [$28.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $3A28.w,Y		; 39 28 3A ; AND accumulator with memory $3A28.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp.w [$DD24]		; DC 24 DD ; Jump long indirect [$DD24] [Flow: jump]
	bit $EC.b		; 24 EC ; Test bits $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $ED.b		; 24 ED ; Test bits $ED.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	jsr $20F5.w		; 20 F5 20 ; Jump to subroutine at $20F5.w [Writes: Stack Pointer] [Flow: call]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp.w [$DD2C]		; DC 2C DD ; Jump long indirect [$DD2C] [Flow: jump]
	bit $2CEC.w		; 2C EC 2C ; Test bits $2CEC.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sbc $F52C.w		; ED 2C F5 ; Subtract $F52C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	jsr $20F5.w		; 20 F5 20 ; Jump to subroutine at $20F5.w [Writes: Stack Pointer] [Flow: call]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $24.b,X		; B4 24 ; Load Y register $24.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $24.b,X		; B5 24 ; Load $24.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cpy $24.b		; C4 24 ; Compare $24.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cmp $24.b		; C5 24 ; Compare $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $DF28.w,X		; DE 28 DF ; Decrement memory $DF28.w,X [Reads: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	inc $EF28.w		; EE 28 EF ; Increment $EF28.w [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $62, $2C, $63		; 62 2C 63 ; Push effective relative address $62, $2C, $63 [Writes: Stack Pointer]
	bit $2C72.w		; 2C 72 2C ; Test bits $2C72.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	adc ($2C.b,S),Y		; 73 2C ; Add with carry (stack relative indirect indexed) ($2C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	stx $28.b		; 86 28 ; Store X register to $28.b [Reads: X Index]
	sta [$28.b]		; 87 28 ; Store accumulator (long) [$28.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit #$28.b		; 89 28 ; Test bits #$28.b with accumulator [Reads: Accumulator] [Flags: Z]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $21		; 30 21 ; Branch if minus to $30, $21 [Flow: branch]
	and ($21.b),Y		; 31 21 ; AND accumulator with memory ($21.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and ($41.b,X)		; 21 41 ; Logical AND ($41.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($DA.b,X)		; 21 DA ; Logical AND ($DA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	nop		; EA ; No operation
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and #$34.b		; 29 34 ; Logical AND #$34.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $2B.b,X		; 34 2B ; Test bits $2B.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $2C.b,X		; 34 2C ; Test bits $2C.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $F5.b,X		; 34 F5 ; Test bits $F5.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	jsr $20F5.w		; 20 F5 20 ; Jump to subroutine at $20F5.w [Writes: Stack Pointer] [Flow: call]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	bit $2C9B.w		; 2C 9B 2C ; Test bits $2C9B.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sta $9E2C.w,X		; 9D 2C 9E ; Store accumulator to $9E2C.w,X [Reads: Accumulator, X Index]
	bit $20F5.w		; 2C F5 20 ; Test bits $20F5.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($24.b,S),Y		; 33 24 ; AND accumulator (stack relative indirect indexed) ($24.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $24.b,X		; 34 24 ; Test bits $24.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	and $24.b,X		; 35 24 ; Logical AND $24.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rol $24.b,X		; 36 24 ; Rotate left $24.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $2C.b		; 64 2C ; Store zero to $2C.b
	dec $752C.w		; CE 2C 75 ; Decrement $752C.w [Flags: NZ]
	bit $3D25.w		; 2C 25 3D ; Test bits $3D25.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $2C65.w		; 2C 65 2C ; Test bits $2C65.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	stz $24.b,X		; 74 24 ; Store zero to $24.b,X [Reads: X Index]
	rol $3D.b		; 26 3D ; Rotate left $3D.b [Reads: Direct Page] [Flags: NCZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $65.b		; 24 65 ; Test bits $65.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $74.b		; 24 74 ; Test bits $74.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $2D48.w,X		; 3C 48 2D ; Test bits $2D48.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc $28.b		; 65 28 ; Add $28.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $2C.b,X		; 74 2C ; Store zero to $2C.b,X [Reads: X Index]
	and $F52D.w,Y		; 39 2D F5 ; AND accumulator with memory $F52D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $F5.b		; 24 F5 ; Test bits $F5.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $FD.b		; 24 FD ; Test bits $FD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $6CFD.w		; 2C FD 6C ; Test bits $6CFD.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	inc $FE2C.w,X		; FE 2C FE ; Increment memory $FE2C.w,X [Reads: X Index] [Flags: NZ]
	jmp ($34FF.w)		; 6C FF 34 ; Jump indirect to ($34FF.w) [Flow: jump]
	sbc $349F74.l,X		; FF 74 9F 34 ; Subtract with carry (long,X) $349F74.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $288074.l,X		; 9F 74 80 28 ; Store accumulator (long,X) $288074.l,X [Reads: Accumulator, X Index]
	sta ($28.b,X)		; 81 28 ; Store accumulator ($28.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta $8E28.w		; 8D 28 8E ; Store accumulator to $8E28.w [Reads: Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	bit $7C68.w,X		; 3C 68 7C ; Test bits $7C68.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	bit $7C78.w,X		; 3C 78 7C ; Test bits $7C78.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	bit $6C68.w		; 2C 68 6C ; Test bits $6C68.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	bit $6C78.w		; 2C 78 6C ; Test bits $6C78.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	pla		; [PATTERN: Memory clearing operation] 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	bit $68.b		; 24 68 ; Test bits $68.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $78.b		; 64 78 ; Store zero to $78.b
	bit $78.b		; 24 78 ; Test bits $78.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $F5.b		; 64 F5 ; Store zero to $F5.b
	jsr $20F5.w		; 20 F5 20 ; Jump to subroutine at $20F5.w [Writes: Stack Pointer] [Flow: call]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $64BF24.l,X		; BF 24 BF 64 ; Load long $64BF24.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $6CCF2C.l		; CF 2C CF 6C ; Compare accumulator (long) $6CCF2C.l [Reads: Accumulator] [Flags: NCZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $28.b,X		; D6 28 ; Decrement memory $28.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	dec $68.b,X		; D6 68 ; Decrement memory $68.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $28.b		; E6 28 ; Increment $28.b [Reads: Direct Page] [Flags: NZ]
	sbc [$28.b]		; E7 28 ; Subtract with carry (long) [$28.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	and $4C.b,X		; 35 4C ; Logical AND $4C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $4D.b,X		; 35 4D ; Logical AND $4D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $4E.b,X		; 35 4E ; Logical AND $4E.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $F5.b,X		; 35 F5 ; Logical AND $F5.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $20F5.w		; 20 F5 20 ; Jump to subroutine at $20F5.w [Writes: Stack Pointer] [Flow: call]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $DF28.w,X		; DE 28 DF ; Decrement memory $DF28.w,X [Reads: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	inc $EF28.w		; EE 28 EF ; Increment $EF28.w [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($3C.b),Y		; 31 3C ; AND accumulator with memory ($3C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($3D.b),Y		; 31 3D ; AND accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($3E.b),Y		; 31 3E ; AND accumulator with memory ($3E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($2B.b),Y		; 31 2B ; AND accumulator with memory ($2B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $2C.b		; 25 2C ; Logical AND $2C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $2D.b		; 25 2D ; Logical AND $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $2E.b		; 25 2E ; Logical AND $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $3B.b		; 25 3B ; Logical AND $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($3C.b),Y		; 31 3C ; AND accumulator with memory ($3C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($3D.b),Y		; 31 3D ; AND accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($3E.b),Y		; 31 3E ; AND accumulator with memory ($3E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($2B.b),Y		; 31 2B ; AND accumulator with memory ($2B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $2D2C.w		; 2D 2C 2D ; Logical AND $2D2C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $2E2D.w		; 2D 2D 2E ; Logical AND $2E2D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $313B.w		; 2D 3B 31 ; Logical AND $313B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $3D31.w,X		; 3C 31 3D ; Test bits $3D31.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	and ($3E.b),Y		; 31 3E ; AND accumulator with memory ($3E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($2B.b),Y		; 31 2B ; AND accumulator with memory ($2B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $3D2C.w,X		; 3D 2C 3D ; AND accumulator with memory $3D2C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $2E3D.w		; 2D 3D 2E ; Logical AND $2E3D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $20F5.w,X		; 3D F5 20 ; AND accumulator with memory $20F5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $3D		; 30 3D ; Branch if minus to $30, $3D [Flow: branch]
	and ($3D.b),Y		; 31 3D ; AND accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $3D41.w,X		; 3D 41 3D ; AND accumulator with memory $3D41.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $24.b		; 84 24 ; Store Y register to $24.b [Reads: Y Index]
	sty $64.b		; 84 64 ; Store Y register to $64.b [Reads: Y Index]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	sta $64.b		; [PATTERN: Memory clearing operation] 85 64 ; Store accumulator to $64.b [Reads: Accumulator]
	lda $8424.w		; AD 24 84 ; Load $8424.w into accumulator [Writes: Accumulator] [Flags: NZ]
	stz $85.b		; 64 85 ; Store zero to $85.b
	bit $85.b		; 24 85 ; Test bits $85.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $AD.b		; 64 AD ; Store zero to $AD.b
	bit $84.b		; [PATTERN: Memory clearing operation] 24 84 ; Test bits $84.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $AE.b		; 64 AE ; Store zero to $AE.b
	bit $85.b		; 24 85 ; Test bits $85.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $AD.b		; 64 AD ; Store zero to $AD.b
	bit $AD.b		; 24 AD ; Test bits $AD.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $AE.b		; [PATTERN: Memory clearing operation] 64 AE ; Store zero to $AE.b
	bit $85.b		; 24 85 ; Test bits $85.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	stz $F5.b		; 64 F5 ; Store zero to $F5.b
	bit $2CF5.w		; 2C F5 2C ; Test bits $2CF5.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	and $2D58.w		; 2D 58 2D ; Logical AND $2D58.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $2D.b,X		; 55 2D ; Exclusive OR accumulator with memory $2D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $2D.b,S		; 63 2D ; Add with carry (stack relative) $2D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $2CF5.w		; 2D F5 2C ; Logical AND $2CF5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	and $2D58.w		; 2D 58 2D ; Logical AND $2D58.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $2D.b,X		; 55 2D ; Exclusive OR accumulator with memory $2D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $2D.b,S		; 63 2D ; Add with carry (stack relative) $2D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and #$2D.b		; 29 2D ; Logical AND #$2D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	and $2D58.w		; 2D 58 2D ; Logical AND $2D58.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $2D.b,X		; 55 2D ; Exclusive OR accumulator with memory $2D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $2D.b,S		; 63 2D ; Add with carry (stack relative) $2D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	and [$2D.b]		; 27 2D ; AND accumulator with memory (long) [$2D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($2D.b,X)		; 61 2D ; Add with carry ($2D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $50,$2D		; 54 2D 50 ; Move block negative $50,$2D [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	and $2D53.w		; 2D 53 2D ; Logical AND $2D53.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $2D.b,S		; 63 2D ; Add with carry (stack relative) $2D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $2D		; 50 2D ; Branch if overflow clear to $50, $2D [Flow: branch]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	and $2D5A.w		; 2D 5A 2D ; Logical AND $2D5A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $F52C.w		; 2E 2C F5 ; Rotate left $F52C.w [Flags: NCZ]
	bit $2CF5.w		; 2C F5 2C ; Test bits $2CF5.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor $2D642D.l,X		; 5F 2D 64 2D ; Exclusive OR accumulator with memory (long,X) $2D642D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	and $2D5B.w		; 2D 5B 2D ; Logical AND $2D5B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($2D.b,X)		; 61 2D ; Add with carry ($2D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $2D.b		; 64 2D ; Store zero to $2D.b
	eor $F52D.w,X		; 5D 2D F5 ; Exclusive OR accumulator with memory $F52D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit $2CF5.w		; 2C F5 2C ; Test bits $2CF5.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $2D, $66		; 62 2D 66 ; Push effective relative address $62, $2D, $66 [Writes: Stack Pointer]
	and $2D58.w		; 2D 58 2D ; Logical AND $2D58.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $2CF52D.l		; 5C 2D F5 2C ; Jump long to $2CF52D.l [Flow: jump]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $2C.b,X		; F5 2C ; Subtract $2C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($2C.b,X)		; 01 2C ; Logical OR ($2C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $2C28.w		; 2C 28 2C ; Test bits $2C28.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $A2.b		; 24 A2 ; Test bits $A2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $A1.b		; 24 A1 ; Test bits $A1.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $A0.b		; 24 A0 ; Test bits $A0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $A3.b		; 24 A3 ; Test bits $A3.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $A4.b		; 24 A4 ; Test bits $A4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $A3.b		; 24 A3 ; Test bits $A3.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $A0.b		; 24 A0 ; Test bits $A0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $01.b		; 24 01 ; Test bits $01.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $0A01.w		; 0E 01 0A ; Arithmetic shift left $0A01.w [Flags: NCZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $091110.l		; 0F 10 11 09 ; OR accumulator with memory (long) $091110.l [Writes: Accumulator] [Flags: NZ]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	ora [$0C.b]		; 07 0C ; OR accumulator with memory (long) [$0C.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($0D.b)		; 12 0D ; OR accumulator with memory (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($14.b,S),Y		; 13 14 ; OR accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	ora [$03.b]		; 07 03 ; OR accumulator with memory (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $7EF34A.l		; AF 4A F3 7E ; Load long $7EF34A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	lda $7EC005.l		; AF 05 C0 7E ; Load long $7EC005.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda $0458.w		; AD 58 04 ; Load $0458.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $045A.w		; AD 5A 04 ; Load $045A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	inc $0458.w		; EE 58 04 ; Increment $0458.w [Flags: NZ]
	lda $0414.w		; AD 14 04 ; Load $0414.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $FA70.w		; 20 70 FA ; Jump to subroutine at $FA70.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC017.l		; 8F 17 C0 7E ; Store accumulator (long) $7EC017.l [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF36F.l		; 8F 6F F3 7E ; Store accumulator (long) $7EF36F.l [Reads: Accumulator]
	jsr $FA70.w		; 20 70 FA ; Jump to subroutine at $FA70.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$0149.w		; A9 49 01 ; Load #$0149.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$FE77.w		; A2 77 FE ; Load #$FE77.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$C700.w		; A0 00 C7 ; Load #$C700.w into Y register [Writes: Y Index] [Flags: NZ]
	mvn $0D,$7E		; 54 7E 0D ; Move block negative $0D,$7E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $FB91.w		; 20 91 FB ; Jump to subroutine at $FB91.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $16.b		; E6 16 ; Increment $16.b [Reads: Direct Page] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and #$F6.b		; 29 F6 ; Logical AND #$F6.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($F6.b),Y		; 51 F6 ; Exclusive OR accumulator with memory ($F6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc #$F6.b		; 69 F6 ; Add #$F6.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc $89F6.w,Y		; 79 F6 89 ; Add $89F6.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $A1.b,X		; F6 A1 ; Increment memory $A1.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $B1.b,X		; F6 B1 ; Increment memory $B1.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $C1.b,X		; F6 C1 ; Increment memory $C1.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $D1.b,X		; F6 D1 ; Increment memory $D1.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $E1.b,X		; F6 E1 ; Increment memory $E1.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $F1.b,X		; F6 F1 ; Increment memory $F1.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $01.b,X		; F6 01 ; Increment memory $01.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc [$11.b],Y		; F7 11 ; Subtract with carry (long indexed) [$11.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$31.b],Y		; F7 31 ; Subtract with carry (long indexed) [$31.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$41.b],Y		; F7 41 ; Subtract with carry (long indexed) [$41.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$51.b],Y		; F7 51 ; Subtract with carry (long indexed) [$51.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$99.b],Y		; F7 99 ; Subtract with carry (long indexed) [$99.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$A9.b],Y		; F7 A9 ; Subtract with carry (long indexed) [$A9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$B9.b],Y		; F7 B9 ; Subtract with carry (long indexed) [$B9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$C9.b],Y		; F7 C9 ; Subtract with carry (long indexed) [$C9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$E9.b],Y		; F7 E9 ; Subtract with carry (long indexed) [$E9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$01.b],Y		; F7 01 ; Subtract with carry (long indexed) [$01.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora ($F8.b),Y		; 11 F8 ; OR accumulator with memory ($F8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($F8.b,X)		; 21 F8 ; Logical AND ($F8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($F8.b),Y		; 31 F8 ; AND accumulator with memory ($F8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $61F8.w,Y		; 39 F8 61 ; AND accumulator with memory $61F8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sta ($F8.b,X)		; 81 F8 ; Store accumulator ($F8.b,X) [Reads: Direct Page, Accumulator, X Index]
	eor ($F7.b),Y		; 51 F7 ; Exclusive OR accumulator with memory ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($F7.b),Y		; 51 F7 ; Exclusive OR accumulator with memory ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($F7.b),Y		; 51 F7 ; Exclusive OR accumulator with memory ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($F7.b),Y		; 51 F7 ; Exclusive OR accumulator with memory ($F7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($F9.b,X)		; 01 F9 ; Logical OR ($F9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora ($CE.b),Y		; 11 CE ; OR accumulator with memory ($CE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($D4.b),Y		; 11 D4 ; OR accumulator with memory ($D4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($DA.b),Y		; 11 DA ; OR accumulator with memory ($DA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($E0.b),Y		; 11 E0 ; OR accumulator with memory ($E0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($88.b),Y		; 11 88 ; OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($8E.b)		; 12 8E ; OR accumulator with memory (indirect) ($8E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($94.b)		; 12 94 ; OR accumulator with memory (indirect) ($94.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($9A.b)		; 12 9A ; OR accumulator with memory (indirect) ($9A.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($A0.b)		; 12 A0 ; OR accumulator with memory (indirect) ($A0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($48.b)		; 12 48 ; OR accumulator with memory (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($4E.b,S),Y		; 13 4E ; OR accumulator (stack relative indirect indexed) ($4E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($54.b,S),Y		; 13 54 ; OR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($5A.b,S),Y		; 13 5A ; OR accumulator (stack relative indirect indexed) ($5A.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($60.b,S),Y		; 13 60 ; OR accumulator (stack relative indirect indexed) ($60.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($08.b,S),Y		; 13 08 ; OR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $0E.b		; 14 0E ; Test and reset bits $0E.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $1A.b		; 14 1A ; Test and reset bits $1A.b [Reads: Accumulator] [Flags: Z]
	trb $20.b		; 14 20 ; Test and reset bits $20.b [Reads: Accumulator] [Flags: Z]
	trb $E2.b		; 14 E2 ; Test and reset bits $E2.b [Reads: Accumulator] [Flags: Z]
	.db $30, $AF		; 30 AF ; Branch if minus to $30, $AF [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc ($7E.b,S),Y		; F3 7E ; Subtract with carry (stack relative indirect indexed) ($7E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $24		; 90 24 ; Branch if carry clear to $90, $24 [Flow: branch]
	lda #$86.b		; A9 86 ; Load #$86.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC71E.l		; 8F 1E C7 7E ; Store accumulator (long) $7EC71E.l [Reads: Accumulator]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC71F.l		; 8F 1F C7 7E ; Store accumulator (long) $7EC71F.l [Reads: Accumulator]
	lda #$87.b		; A9 87 ; Load #$87.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC720.l		; 8F 20 C7 7E ; Store accumulator (long) $7EC720.l [Reads: Accumulator]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC721.l		; 8F 21 C7 7E ; Store accumulator (long) $7EC721.l [Reads: Accumulator]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF377.l		; AF 77 F3 7E ; Load long $7EF377.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF377.l		; AF 77 F3 7E ; Load long $7EF377.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EF340.l		; 8F 40 F3 7E ; Store accumulator (long) $7EF340.l [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $0202.w		; AE 02 02 ; Load $0202.w into X register [Writes: X Index] [Flags: NZ]
	.db $F0, $4D		; F0 4D ; Branch if equal to $F0, $4D [Flow: branch]
	lda $7EF33F.l,X		; BF 3F F3 7E ; Load long $7EF33F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$0004.w		; E0 04 00 ; Compare #$0004.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$0010.w		; E0 10 00 ; Compare #$0010.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF35B.l,X		; BF 5B F3 7E ; Load long $7EF35B.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $FA93.w,X		; BD 93 FA ; Load $FA93.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($04.b),Y		; B1 04 ; Load accumulator ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC74A.l		; 8F 4A C7 7E ; Store accumulator (long) $7EC74A.l [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($04.b),Y		; B1 04 ; Load accumulator ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC74C.l		; 8F 4C C7 7E ; Store accumulator (long) $7EC74C.l [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($04.b),Y		; B1 04 ; Load accumulator ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC78A.l		; 8F 8A C7 7E ; Store accumulator (long) $7EC78A.l [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($04.b),Y		; B1 04 ; Load accumulator ($04.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC78C.l		; 8F 8C C7 7E ; Store accumulator (long) $7EC78C.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $FAFD.w		; 20 FD FA ; Jump to subroutine at $FAFD.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$FD.b		; A9 FD ; Load #$FD.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda #$F9.b		; A9 F9 ; Load #$F9.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$68.b		; A9 68 ; Load #$68.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda #$C7.b		; A9 C7 ; Load #$C7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	jsr $FDAB.w		; 20 AB FD ; Jump to subroutine at $FDAB.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda #$FA.b		; A9 FA ; Load #$FA.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$68.b		; A9 68 ; Load #$68.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda #$C7.b		; A9 C7 ; Load #$C7.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7EF36D.l		; CF 6D F3 7E ; Compare accumulator (long) $7EF36D.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp $7EF36D.l		; CF 6D F3 7E ; Compare accumulator (long) $7EF36D.l [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$03.b		; 69 03 ; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	and #$00FC.w		; 29 FC 00 ; Logical AND #$00FC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	jsr $FDAB.w		; 20 AB FD ; Jump to subroutine at $FDAB.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EF37B.l		; AF 7B F3 7E ; Load long $7EF37B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0001.w		; C9 01 00 ; Compare #$0001.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $15		; 90 15 ; Branch if carry clear to $90, $15 [Flow: branch]
	lda #$28F7.w		; A9 F7 28 ; Load #$28F7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC704.l		; 8F 04 C7 7E ; Store accumulator (long) $7EC704.l [Reads: Accumulator]
	lda #$2851.w		; A9 51 28 ; Load #$2851.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC706.l		; 8F 06 C7 7E ; Store accumulator (long) $7EC706.l [Reads: Accumulator]
	lda #$28FA.w		; A9 FA 28 ; Load #$28FA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC708.l		; 8F 08 C7 7E ; Store accumulator (long) $7EC708.l [Reads: Accumulator]
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0007.w		; 69 07 00 ; Add #$0007.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$FFF8.w		; 29 F8 FF ; Logical AND #$FFF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $FDEF.w,X		; BD EF FD ; Load $FDEF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC746.l		; 8F 46 C7 7E ; Store accumulator (long) $7EC746.l [Reads: Accumulator]
	lda $FDF1.w,X		; BD F1 FD ; Load $FDF1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC786.l		; 8F 86 C7 7E ; Store accumulator (long) $7EC786.l [Reads: Accumulator]
	lda $FDF3.w,X		; BD F3 FD ; Load $FDF3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC7C6.l		; 8F C6 C7 7E ; Store accumulator (long) $7EC7C6.l [Reads: Accumulator]
	lda $FDF5.w,X		; BD F5 FD ; Load $FDF5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC806.l		; 8F 06 C8 7E ; Store accumulator (long) $7EC806.l [Reads: Accumulator]
	lda $7EF362.l		; AF 62 F3 7E ; Load long $7EF362.l into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $F0F7.w		; 20 F7 F0 ; Jump to subroutine at $F0F7.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$2400.w		; 09 00 24 ; Logical OR #$2400.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC750.l		; 8F 50 C7 7E ; Store accumulator (long) $7EC750.l [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$2400.w		; 09 00 24 ; Logical OR #$2400.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC752.l		; 8F 52 C7 7E ; Store accumulator (long) $7EC752.l [Reads: Accumulator]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$2400.w		; 09 00 24 ; Logical OR #$2400.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC754.l		; 8F 54 C7 7E ; Store accumulator (long) $7EC754.l [Reads: Accumulator]
	lda $7EF343.l		; AF 43 F3 7E ; Load long $7EF343.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $F0F7.w		; 20 F7 F0 ; Jump to subroutine at $F0F7.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$2400.w		; 09 00 24 ; Logical OR #$2400.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC758.l		; 8F 58 C7 7E ; Store accumulator (long) $7EC758.l [Reads: Accumulator]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$2400.w		; 09 00 24 ; Logical OR #$2400.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC75A.l		; 8F 5A C7 7E ; Store accumulator (long) $7EC75A.l [Reads: Accumulator]
	lda $7EF377.l		; AF 77 F3 7E ; Load long $7EF377.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $F0F7.w		; 20 F7 F0 ; Jump to subroutine at $F0F7.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$2400.w		; 09 00 24 ; Logical OR #$2400.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC75E.l		; 8F 5E C7 7E ; Store accumulator (long) $7EC75E.l [Reads: Accumulator]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$2400.w		; 09 00 24 ; Logical OR #$2400.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC760.l		; 8F 60 C7 7E ; Store accumulator (long) $7EC760.l [Reads: Accumulator]
	lda #$007F.w		; A9 7F 00 ; Load #$007F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $7EF36F.l		; AF 6F F3 7E ; Load long $7EF36F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $F0F7.w		; 20 F7 F0 ; Jump to subroutine at $F0F7.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$2400.w		; 09 00 24 ; Logical OR #$2400.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC764.l		; 8F 64 C7 7E ; Store accumulator (long) $7EC764.l [Reads: Accumulator]
	cmp #$247F.w		; C9 7F 24 ; Compare #$247F.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	sta $7EC724.l		; 8F 24 C7 7E ; Store accumulator (long) $7EC724.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0020.w		; 29 20 00 ; Logical AND #$0020.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $90, $00		; 82 90 00 ; Branch always long to $82, $90, $00 [Flow: branch]
	lda #$0C00.w		; A9 00 0C ; Load #$0C00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $020B.w		; AD 0B 02 ; Load $020B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0020.w		; C9 20 00 ; Compare #$0020.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	lda $0010.w		; AD 10 00 ; Load $0010.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$000E.w		; C9 0E 00 ; Compare #$000E.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $001A.w		; AD 1A 00 ; Load $001A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0004.w		; 29 04 00 ; Logical AND #$0004.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $73		; D0 73 ; Branch if not equal to $D0, $73 [Flow: branch]
	lda $020B.w		; AD 0B 02 ; Load $020B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $6B		; F0 6B ; Branch if equal to $F0, $6B [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $020B.w		; AD 0B 02 ; Load $020B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $F0, $61		; F0 61 ; Branch if equal to $F0, $61 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$2082.w		; A9 82 20 ; Load #$2082.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC742.l,X		; 9F 42 C7 7E ; Store accumulator (long,X) $7EC742.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	lda $020B.w		; AD 0B 02 ; Load $020B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0020.w		; C9 20 00 ; Compare #$0020.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda #$20A5.w		; A9 A5 20 ; Load #$20A5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC742.l,X		; 9F 42 C7 7E ; Store accumulator (long,X) $7EC742.l,X [Reads: Accumulator, X Index]
	lda #$20A6.w		; A9 A6 20 ; Load #$20A6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC744.l,X		; 9F 44 C7 7E ; Store accumulator (long,X) $7EC744.l,X [Reads: Accumulator, X Index]
	.db $80, $36		; 80 36 ; Branch always to $80, $36 [Flow: branch]
	lda $020B.w		; AD 0B 02 ; Load $020B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $14		; B0 14 ; Branch if carry set to $B0, $14 [Flow: branch]
	lda #$2080.w		; A9 80 20 ; Load #$2080.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC742.l,X		; 9F 42 C7 7E ; Store accumulator (long,X) $7EC742.l,X [Reads: Accumulator, X Index]
	lda #$2081.w		; A9 81 20 ; Load #$2081.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC744.l,X		; 9F 44 C7 7E ; Store accumulator (long,X) $7EC744.l,X [Reads: Accumulator, X Index]
	.db $80, $1B		; 80 1B ; Branch always to $80, $1B [Flow: branch]
	lda #$2083.w		; A9 83 20 ; Load #$2083.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC742.l,X		; 9F 42 C7 7E ; Store accumulator (long,X) $7EC742.l,X [Reads: Accumulator, X Index]
	lda #$2084.w		; A9 84 20 ; Load #$2084.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC744.l,X		; 9F 44 C7 7E ; Store accumulator (long,X) $7EC744.l,X [Reads: Accumulator, X Index]
	lda #$2085.w		; A9 85 20 ; Load #$2085.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC746.l,X		; 9F 46 C7 7E ; Store accumulator (long,X) $7EC746.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$12.b		; A2 12 ; Load #$12.b into X register [Writes: X Index] [Flags: NZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $429F20.l,X		; 7F 20 9F 42 ; Add long $429F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$7E.b]		; C7 7E ; Compare accumulator (long) [$7E.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	.db $80, $ED		; 80 ED ; Branch always to $80, $ED [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0008E9.l		; 0F E9 08 00 ; OR accumulator with memory (long) $0008E9.l [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cmp $E8FD.w,Y		; D9 FD E8 ; Compare accumulator $E8FD.w,Y [Reads: Y Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $80, $EA		; 80 EA ; Branch always to $80, $EA [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A0.b		; 05 A0 ; Logical OR $A0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A0.b		; 05 A0 ; Logical OR $A0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$14.b		; E0 14 ; Compare #$14.b with X register [Reads: X Index] [Flags: NCZ]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$18.b]		; 07 18 ; OR accumulator with memory (long) [$18.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc #$40.b		; 69 40 ; Add #$40.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$B7.b]		; 07 B7 ; OR accumulator with memory (long) [$B7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta [$07.b],Y		; 97 07 ; Store accumulator (long indexed) [$07.b],Y [Reads: Direct Page, Y Index, Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $3CF53C.l,X		; 5F 3C F5 3C ; Exclusive OR accumulator with memory (long,X) $3CF53C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $F53C.w		; 4C 3C F5 ; Jump to $F53C.w [Flow: jump]
	bit $3CF5.w,X		; 3C F5 3C ; Test bits $3CF5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $F53C.w		; 4D 3C F5 ; Exclusive OR $F53C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $3CF5.w,X		; 3C F5 3C ; Test bits $3CF5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $F53C.w		; 4E 3C F5 ; Logical shift right $F53C.w [Flags: NCZ]
	bit $3CF5.w,X		; 3C F5 3C ; Test bits $3CF5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $3C5E3C.l,X		; 5F 3C 5E 3C ; Exclusive OR accumulator with memory (long,X) $3C5E3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $5E3C.w		; 4C 3C 5E ; Jump to $5E3C.w [Flow: jump]
	bit $3CF5.w,X		; 3C F5 3C ; Test bits $3CF5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $5E3C.w		; 4D 3C 5E ; Exclusive OR $5E3C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $3CF5.w,X		; 3C F5 3C ; Test bits $3CF5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $5E3C.w		; 4E 3C 5E ; Logical shift right $5E3C.w [Flags: NCZ]
	bit $3CF5.w,X		; 3C F5 3C ; Test bits $3CF5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $3C5E3C.l,X		; 5F 3C 5E 3C ; Exclusive OR accumulator with memory (long,X) $3C5E3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $F53C.w,X		; 5E 3C F5 ; Logical shift right $F53C.w,X [Reads: X Index] [Flags: NCZ]
	bit $3C4C.w,X		; 3C 4C 3C ; Test bits $3C4C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	lsr $5E3C.w,X		; 5E 3C 5E ; Logical shift right $5E3C.w,X [Reads: X Index] [Flags: NCZ]
	bit $3CF5.w,X		; 3C F5 3C ; Test bits $3CF5.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $5E3C.w		; 4D 3C 5E ; Exclusive OR $5E3C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $3C5E.w,X		; 3C 5E 3C ; Test bits $3C5E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	sbc $3C.b,X		; F5 3C ; Subtract $3C.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $5E3C.w		; 4E 3C 5E ; Logical shift right $5E3C.w [Flags: NCZ]
	bit $3C5E.w,X		; 3C 5E 3C ; Test bits $3C5E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $3C5E3C.l,X		; 5F 3C 5E 3C ; Exclusive OR accumulator with memory (long,X) $3C5E3C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $5E3C.w,X		; 5E 3C 5E ; Logical shift right $5E3C.w,X [Reads: X Index] [Flags: NCZ]
	bit $3C4C.w,X		; 3C 4C 3C ; Test bits $3C4C.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	lsr $5E3C.w,X		; 5E 3C 5E ; Logical shift right $5E3C.w,X [Reads: X Index] [Flags: NCZ]
	bit $3C5E.w,X		; 3C 5E 3C ; Test bits $3C5E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $5E3C.w		; 4D 3C 5E ; Exclusive OR $5E3C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $3C5E.w,X		; 3C 5E 3C ; Test bits $3C5E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	lsr $4E3C.w,X		; 5E 3C 4E ; Logical shift right $4E3C.w,X [Reads: X Index] [Flags: NCZ]
	bit $3C5E.w,X		; 3C 5E 3C ; Test bits $3C5E.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	lsr $5E3C.w,X		; 5E 3C 5E ; Logical shift right $5E3C.w,X [Reads: X Index] [Flags: NCZ]
	bit $207F.w,X		; 3C 7F 20 ; Test bits $207F.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	adc $285020.l,X		; 7F 20 50 28 ; Add long $285020.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $A8.b,X		; 56 A8 ; Logical shift right $A8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor ($28.b)		; 52 28 ; Exclusive OR accumulator with memory (indirect) ($28.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jmp $207F28.l		; 5C 28 7F 20 ; Jump long to $207F28.l [Flow: jump]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	bit $207F.w,X		; 3C 7F 20 ; Test bits $207F.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	adc $2C8820.l,X		; 7F 20 88 2C ; Add long $2C8820.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	bit #$2C.b		; 89 2C ; Test bits #$2C.b with accumulator [Reads: Accumulator] [Flags: Z]
	adc $20A720.l,X		; 7F 20 A7 20 ; Add long $20A720.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	adc $287120.l,X		; 7F 20 71 28 ; Add long $287120.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $288B20.l,X		; 7F 20 8B 28 ; Add long $288B20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $24AB28.l		; 8F 28 AB 24 ; Store accumulator (long) $24AB28.l [Reads: Accumulator]
	ldy $8F24.w		; AC 24 8F ; Load $8F24.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $71,$28		; 54 28 71 ; Move block negative $71,$28 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $7F28.w,X		; 5D 28 7F ; Exclusive OR accumulator with memory $7F28.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $207F.w		; 20 7F 20 ; Jump to subroutine at $207F.w [Writes: Stack Pointer] [Flow: call]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $4E,$28		; 54 28 4E ; Move block negative $4E,$28 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $30, $58		; 30 58 ; Branch if minus to $30, $58 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $7F28.w,X		; 5D 28 7F ; Exclusive OR accumulator with memory $7F28.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $207F.w		; 20 7F 20 ; Jump to subroutine at $207F.w [Writes: Stack Pointer] [Flow: call]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $5E,$28		; 54 28 5E ; Move block negative $5E,$28 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $30, $59		; 30 59 ; Branch if minus to $30, $59 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jmp $207FA8.l		; 5C A8 7F 20 ; Jump long to $207FA8.l [Flow: jump]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $285420.l,X		; 7F 20 54 28 ; Add long $285420.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $5430.w,X		; 5E 30 54 ; Logical shift right $5430.w,X [Reads: X Index] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $207F20.l,X		; 7F 20 7F 20 ; Add long $207F20.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $A85020.l,X		; 7F 20 50 A8 ; Add long $A85020.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $28.b,X		; 56 28 ; Logical shift right $28.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $50, $E8		; 50 E8 ; Branch if overflow clear to $50, $E8 [Flow: branch]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 06FFFD. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 06FFFE. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 06FFFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.ENDS
