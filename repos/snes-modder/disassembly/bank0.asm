.BANK 0 SLOT 0
.ORG $0000

.SECTION "Bank0" FORCE

L000000:
	sei		; [PATTERN: Memory clearing operation] Disable interrupts ; Set interrupt disable flag [Flags: I]
	stz NMITIMEN.w		; Interrupt Enable Flags ; Store zero to NMITIMEN.w
	stz HDMAEN.w		; HDMA Channel Enable ; Store zero to HDMAEN.w
	stz MDMAEN.w		; DMA Channel Enable ; Store zero to MDMAEN.w
	stz APUIO0.w		; APU I/O Port 0 ; Store zero to APUIO0.w
	stz APUIO1.w		; [PATTERN: Memory clearing operation] APU I/O Port 1 ; Store zero to APUIO1.w
	stz APUIO2.w		; APU I/O Port 2 ; Store zero to APUIO2.w
	stz APUIO3.w		; APU I/O Port 4 ; Store zero to APUIO3.w
	lda #$8D80.w		; Load #$8D80.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $21.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	xce		; Exchange carry bit to set emulation or native mode ; Exchange carry and emulation bits [Flags: C]
.ACCU 16
	rep #$28
	lda #$0000.w		; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	lda #$01FF.w		; Load #$01FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30
	jsr L000901.w		; Jump to subroutine at L000901.w [Writes: Stack Pointer] [Flow: call]
	jsr L0007C0.w		; Jump to subroutine at L0007C0.w [Writes: Stack Pointer] [Flow: call]
	lda #$81.b		; Load #$81.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta NMITIMEN.w		; Interrupt Enable Flags ; Store accumulator to NMITIMEN.w [Reads: Accumulator]
L000034:
	lda $12.b		; Load $12.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	beq L000034.b		; Branch if equal to L000034.b [Flow: branch]
	cli		; Clear interupt ; Clear interrupt disable flag [Flags: I]
	bra L000051.b		; Branch always to L000051.b [Flow: branch]
	lda $F6.b		; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	beq L000044.b		; Branch if equal to L000044.b [Flow: branch]
	inc $0FD7.w		; Increment $0FD7.w [Flags: NZ]
L000044:
	lda $F6.b		; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bne L000051.b		; Branch if not equal to L000051.b [Flow: branch]
	lda $0FD7.w		; Load $0FD7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bne L00005A.b		; Branch if not equal to L00005A.b [Flow: branch]
L000051:
	inc $1A.b		; Increment $1A.b [Reads: Direct Page] [Flags: NZ]
	jsr L00041E.w		; Jump to subroutine at L00041E.w [Writes: Stack Pointer] [Flow: call]
	jsl L0000B5.l		; Jump to subroutine long L0000B5.l [Writes: Stack Pointer] [Flow: call]
L00005A:
	jsr L0005FC.w		; Jump to subroutine at L0005FC.w [Writes: Stack Pointer] [Flow: call]
	stz $12.b		; Store zero to $12.b
	bra L000034.b		; Branch always to L000034.b [Flow: branch]
	jsr $537D.w		; Jump to subroutine at $537D.w [Writes: Stack Pointer] [Flow: call]
	sta $8A.b		; Store accumulator to $8A.b [Reads: Accumulator]
	rol $1E.b,X		; Rotate left $1E.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldx #$BF.b		; Load #$BF.b into X register [Writes: X Index] [Flags: NZ]
	adc $BF.b,X		; Add $BF.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $1B.b,X		; Add $1B.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; Set carry ; Set carry flag [Flags: C]
	brk $82.b		; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
L000071:
	cmp [$F9.b],Y		; Compare accumulator (long indexed) [$F9.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	bcc L0000BF.b		; Branch if carry clear to L0000BF.b [Flow: branch]
	lda $8AFC.w		; Load $8AFC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $6EECDC.l,X		; Store accumulator (long,X) $6EECDC.l,X [Reads: Accumulator, X Index]
	stx $C1.b		; Store X register to $C1.b [Reads: X Index]
	cmp $D4D0.w		; Compare $D4D0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cld		; Clear decimal ; Clear decimal flag [Flags: D]
	sta ($82.b,X)		; Store accumulator ($82.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta [$83.b]		; Store accumulator (long) [$83.b] [Reads: Direct Page, Accumulator]
	ldy $83.b		; Load $83.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $99.b		; Load $99.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta $99F8.w,Y		; Store accumulator to $99F8.w,Y [Reads: Y Index, Accumulator]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	txs		; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	sbc ($9C.b)		; Subtract with carry (indirect) ($9C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $9E9C.w		; Subtract $9E9C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc [$9E.b],Y		; Subtract with carry (long indexed) [$9E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0C8598.l,X		; Store accumulator (long,X) $0C8598.l,X [Reads: Accumulator, X Index]
	tsb $0C0C.w		; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0202.w		; Test and set bits $0202.w [Reads: Accumulator] [Flags: Z]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $09.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0C.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$02.b		; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $0E.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A4.b		; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bpl L000071.b		; Branch if plus to L000071.b [Flow: branch]
	adc ($80.b,X)		; Add with carry ($80.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $03.b		; Store accumulator to $03.b [Reads: Accumulator]
	lda $807D.w,Y		; Load $807D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
L0000BF:
	sta $04.b		; Store accumulator to $04.b [Reads: Accumulator]
	lda $8099.w,Y		; Load $8099.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; Store accumulator to $05.b [Reads: Accumulator]
	jmp.w [$0003]		; Jump long indirect [$0003] [Flow: jump]
L0000C9:
	sei		; Disable interrupts ; Set interrupt disable flag [Flags: I]
.ACCU 16
.INDEX 16
	rep #$30
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phx		; [PATTERN: Function entry: Index register preservation prologue] Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phb		; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$0000.w		; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tad		; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30
	lda RDNMI.w		; NMI Flag and 5A22 Version ; Load RDNMI.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $012C.w		; Load $012C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	bne L0000EE.b		; Branch if not equal to L0000EE.b [Flow: branch]
	lda APUIO0.w		; APU I/O Port 0 ; Load APUIO0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0133.w		; Compare $0133.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bne L000103.b		; Branch if not equal to L000103.b [Flow: branch]
	stz APUIO0.w		; APU I/O Port 0 ; Store zero to APUIO0.w
	bra L000103.b		; Branch always to L000103.b [Flow: branch]
L0000EE:
	cmp $0133.w		; Compare $0133.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	beq L000103.b		; Branch if equal to L000103.b [Flow: branch]
	sta APUIO0.w		; APU I/O Port 0 ; Store accumulator to APUIO0.w [Reads: Accumulator]
	sta $0133.w		; Store accumulator to $0133.w [Reads: Accumulator]
	cmp #$F2.b		; Compare #$F2.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	bcs L000100.b		; Branch if carry set to L000100.b [Flow: branch]
	sta $0130.w		; Store accumulator to $0130.w [Reads: Accumulator]
L000100:
	stz $012C.w		; Store zero to $012C.w
L000103:
	lda $012D.w		; Load $012D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	bne L000115.b		; Branch if not equal to L000115.b [Flow: branch]
	lda APUIO1.w		; APU I/O Port 1 ; Load APUIO1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0131.w		; Compare $0131.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bne L00011E.b		; Branch if not equal to L00011E.b [Flow: branch]
	stz APUIO1.w		; [PATTERN: Memory clearing operation] APU I/O Port 1 ; Store zero to APUIO1.w
	bra L00011E.b		; Branch always to L00011E.b [Flow: branch]
L000115:
	sta $0131.w		; Store accumulator to $0131.w [Reads: Accumulator]
	sta APUIO1.w		; APU I/O Port 1 ; Store accumulator to APUIO1.w [Reads: Accumulator]
	stz $012D.w		; Store zero to $012D.w
L00011E:
	lda $012E.w		; Load $012E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta APUIO2.w		; [PATTERN: Memory clearing operation] APU I/O Port 2 ; Store accumulator to APUIO2.w [Reads: Accumulator]
	lda $012F.w		; Load $012F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta APUIO3.w		; APU I/O Port 4 ; Store accumulator to APUIO3.w [Reads: Accumulator]
	stz $012E.w		; Store zero to $012E.w
	stz $012F.w		; Store zero to $012F.w
	lda #$80.b		; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta INIDSP.w		; Screen Display ; Store accumulator to INIDSP.w [Reads: Accumulator]
	stz HDMAEN.w		; HDMA Channel Enable ; Store zero to HDMAEN.w
	lda $12.b		; Load $12.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bne L000144.b		; Branch if not equal to L000144.b [Flow: branch]
	inc $12.b		; Increment $12.b [Reads: Direct Page] [Flags: NZ]
	jsr L0009E0.w		; Jump to subroutine at L0009E0.w [Writes: Stack Pointer] [Flow: call]
	jsr L0003D1.w		; Jump to subroutine at L0003D1.w [Writes: Stack Pointer] [Flow: call]
L000144:
	lda $012A.w		; Load $012A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	beq L00014C.b		; Branch if equal to L00014C.b [Flow: branch]
	jmp L00022D.w		; Jump to L00022D.w [Flow: jump]
L00014C:
	lda $96.b		; Load $96.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta W12SEL.w		; Window Mask Settings for BG1 and BG2 ; Store accumulator to W12SEL.w [Reads: Accumulator]
	lda $97.b		; Load $97.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta W34SEL.w		; Window Mask Settings for BG3 and BG4 ; Store accumulator to W34SEL.w [Reads: Accumulator]
	lda $98.b		; Load $98.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta WOBJSEL.w		; Window Mask Settings for Objects and Color Window ; Store accumulator to WOBJSEL.w [Reads: Accumulator]
	lda $99.b		; Load $99.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta CGWSEL.w		; Color Addition Select ; Store accumulator to CGWSEL.w [Reads: Accumulator]
	lda $9A.b		; Load $9A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta CGADSUB.w		; Color Math Designation ; Store accumulator to CGADSUB.w [Reads: Accumulator]
	lda $9C.b		; Load $9C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta COLDATA.w		; Fixed Color Data ; Store accumulator to COLDATA.w [Reads: Accumulator]
	lda $9D.b		; Load $9D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta COLDATA.w		; Fixed Color Data ; Store accumulator to COLDATA.w [Reads: Accumulator]
	lda $9E.b		; Load $9E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta COLDATA.w		; Fixed Color Data ; Store accumulator to COLDATA.w [Reads: Accumulator]
	lda $1C.b		; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta TMAIN.w		; Mainscreen Designation ; Store accumulator to TMAIN.w [Reads: Accumulator]
	lda $1D.b		; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta TSUB.w		; Subscreen Designation ; Store accumulator to TSUB.w [Reads: Accumulator]
	lda $1E.b		; Load $1E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta TMW.w		; Window Mask Designation for the Main Screen ; Store accumulator to TMW.w [Reads: Accumulator]
	lda $1F.b		; Load $1F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta TSW.w		; Window Mask Designation for the Subscreen ; Store accumulator to TSW.w [Reads: Accumulator]
	lda $0120.w		; Load $0120.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG1HOFS.w		; BG1 Horizontal Scroll / Mode 7 BG Horizontal Scroll ; Store accumulator to BG1HOFS.w [Reads: Accumulator]
	lda $0121.w		; Load $0121.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG1HOFS.w		; BG1 Horizontal Scroll / Mode 7 BG Horizontal Scroll ; Store accumulator to BG1HOFS.w [Reads: Accumulator]
	lda $0124.w		; Load $0124.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG1VOFS.w		; BG1 Vertical Scroll / Mode 7 BG Vertical Scroll ; Store accumulator to BG1VOFS.w [Reads: Accumulator]
	lda $0125.w		; Load $0125.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG1VOFS.w		; BG1 Vertical Scroll / Mode 7 BG Vertical Scroll ; Store accumulator to BG1VOFS.w [Reads: Accumulator]
	lda $011E.w		; Load $011E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG2HOFS.w		; BG2 Horizontal Scroll ; Store accumulator to BG2HOFS.w [Reads: Accumulator]
	lda $011F.w		; Load $011F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG2HOFS.w		; BG2 Horizontal Scroll ; Store accumulator to BG2HOFS.w [Reads: Accumulator]
	lda $0122.w		; Load $0122.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG2VOFS.w		; BG2 Vertical Scroll ; Store accumulator to BG2VOFS.w [Reads: Accumulator]
	lda $0123.w		; Load $0123.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG2VOFS.w		; BG2 Vertical Scroll ; Store accumulator to BG2VOFS.w [Reads: Accumulator]
	lda $E4.b		; Load $E4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta BG3HOFS.w		; BG3 Horizontal Scroll ; Store accumulator to BG3HOFS.w [Reads: Accumulator]
	lda $E5.b		; Load $E5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta BG3HOFS.w		; BG3 Horizontal Scroll ; Store accumulator to BG3HOFS.w [Reads: Accumulator]
	lda $EA.b		; Load $EA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta BG3VOFS.w		; BG3 Vertical Scroll ; Store accumulator to BG3VOFS.w [Reads: Accumulator]
	lda $EB.b		; Load $EB.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta BG3VOFS.w		; BG3 Vertical Scroll ; Store accumulator to BG3VOFS.w [Reads: Accumulator]
	lda $95.b		; Load $95.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta MOSAIC.w		; Screen Pixelation ; Store accumulator to MOSAIC.w [Reads: Accumulator]
	lda $94.b		; Load $94.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta BGMODE.w		; BG Mode and Character Size ; Store accumulator to BGMODE.w [Reads: Accumulator]
	and #$07.b		; [PATTERN: Memory clearing operation] Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	bne L000200.b		; Branch if not equal to L000200.b [Flow: branch]
	stz M7B.w		; Mode 7 Matrix B ; Store zero to M7B.w
	stz M7B.w		; Mode 7 Matrix B ; Store zero to M7B.w
	stz M7C.w		; [PATTERN: Memory clearing operation] Mode 7 Matrix C ; Store zero to M7C.w
	stz M7C.w		; Mode 7 Matrix C ; Store zero to M7C.w
	lda $0638.w		; Load $0638.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta M7X.w		; Mode 7 Center X ; Store accumulator to M7X.w [Reads: Accumulator]
	lda $0639.w		; Load $0639.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta M7X.w		; Mode 7 Center X ; Store accumulator to M7X.w [Reads: Accumulator]
	lda $063A.w		; Load $063A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta M7Y.w		; Mode 7 Center Y ; Store accumulator to M7Y.w [Reads: Accumulator]
	lda $063B.w		; Load $063B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta M7Y.w		; Mode 7 Center Y ; Store accumulator to M7Y.w [Reads: Accumulator]
L000200:
	lda $0128.w		; Load $0128.w into accumulator [Writes: Accumulator] [Flags: NZ]
	beq L00021B.b		; Branch if equal to L00021B.b [Flow: branch]
	lda TIMEUP.w		; [PATTERN: Memory clearing operation] IRQ Flag ; Load TIMEUP.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$80.b		; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VTIMEL.w		; V-Count Timer ; Store accumulator to VTIMEL.w [Reads: Accumulator]
	stz VTIMEH.w		; V-Count Timer MSB ; Store zero to VTIMEH.w
	stz HTIMEL.w		; H-Count Timer ; Store zero to HTIMEL.w
	stz HTIMEH.w		; H-Count Timer MSB ; Store zero to HTIMEH.w
	lda #$A1.b		; Load #$A1.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta NMITIMEN.w		; Interrupt Enable Flags ; Store accumulator to NMITIMEN.w [Reads: Accumulator]
L00021B:
	lda $13.b		; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta INIDSP.w		; Screen Display ; Store accumulator to INIDSP.w [Reads: Accumulator]
	lda $9B.b		; Load $9B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta HDMAEN.w		; HDMA Channel Enable ; Store accumulator to HDMAEN.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
L00022C:
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

L00022D:
	jsr L001347.w		; Jump to subroutine at L001347.w [Writes: Stack Pointer] [Flow: call]
	lda $FF.b		; Load $FF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VTIMEL.w		; V-Count Timer ; Store accumulator to VTIMEL.w [Reads: Accumulator]
	stz VTIMEH.w		; V-Count Timer MSB ; Store zero to VTIMEH.w
	lda #$8DA1.w		; Load #$8DA1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $96.b		; Load $96.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta W12SEL.w		; Window Mask Settings for BG1 and BG2 ; Store accumulator to W12SEL.w [Reads: Accumulator]
	lda $97.b		; Load $97.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta W34SEL.w		; Window Mask Settings for BG3 and BG4 ; Store accumulator to W34SEL.w [Reads: Accumulator]
	lda $98.b		; Load $98.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta WOBJSEL.w		; Window Mask Settings for Objects and Color Window ; Store accumulator to WOBJSEL.w [Reads: Accumulator]
	lda $99.b		; Load $99.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta CGWSEL.w		; Color Addition Select ; Store accumulator to CGWSEL.w [Reads: Accumulator]
	lda $9A.b		; Load $9A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta CGADSUB.w		; Color Math Designation ; Store accumulator to CGADSUB.w [Reads: Accumulator]
	lda $9C.b		; Load $9C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta COLDATA.w		; Fixed Color Data ; Store accumulator to COLDATA.w [Reads: Accumulator]
	lda $9D.b		; Load $9D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta COLDATA.w		; Fixed Color Data ; Store accumulator to COLDATA.w [Reads: Accumulator]
	lda $9E.b		; Load $9E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta COLDATA.w		; Fixed Color Data ; Store accumulator to COLDATA.w [Reads: Accumulator]
	lda $1C.b		; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta TMAIN.w		; Mainscreen Designation ; Store accumulator to TMAIN.w [Reads: Accumulator]
	lda $1D.b		; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta TSUB.w		; Subscreen Designation ; Store accumulator to TSUB.w [Reads: Accumulator]
	lda $1E.b		; Load $1E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta TMW.w		; Window Mask Designation for the Main Screen ; Store accumulator to TMW.w [Reads: Accumulator]
	lda $1F.b		; Load $1F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta TSW.w		; Window Mask Designation for the Subscreen ; Store accumulator to TSW.w [Reads: Accumulator]
	lda $0120.w		; Load $0120.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG1HOFS.w		; BG1 Horizontal Scroll / Mode 7 BG Horizontal Scroll ; Store accumulator to BG1HOFS.w [Reads: Accumulator]
	lda $0121.w		; Load $0121.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG1HOFS.w		; BG1 Horizontal Scroll / Mode 7 BG Horizontal Scroll ; Store accumulator to BG1HOFS.w [Reads: Accumulator]
	lda $0124.w		; Load $0124.w into accumulator [Writes: Accumulator] [Flags: NZ]
L000288:
	sta BG1VOFS.w		; BG1 Vertical Scroll / Mode 7 BG Vertical Scroll ; Store accumulator to BG1VOFS.w [Reads: Accumulator]
	lda $0125.w		; Load $0125.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG1VOFS.w		; BG1 Vertical Scroll / Mode 7 BG Vertical Scroll ; Store accumulator to BG1VOFS.w [Reads: Accumulator]
	lda $011E.w		; Load $011E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG2HOFS.w		; BG2 Horizontal Scroll ; Store accumulator to BG2HOFS.w [Reads: Accumulator]
	lda $011F.w		; Load $011F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG2HOFS.w		; BG2 Horizontal Scroll ; Store accumulator to BG2HOFS.w [Reads: Accumulator]
	lda $0122.w		; Load $0122.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG2VOFS.w		; BG2 Vertical Scroll ; Store accumulator to BG2VOFS.w [Reads: Accumulator]
	lda $0123.w		; Load $0123.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG2VOFS.w		; BG2 Vertical Scroll ; Store accumulator to BG2VOFS.w [Reads: Accumulator]
	lda $E4.b		; Load $E4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta BG3HOFS.w		; BG3 Horizontal Scroll ; Store accumulator to BG3HOFS.w [Reads: Accumulator]
	lda $E5.b		; Load $E5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta BG3HOFS.w		; BG3 Horizontal Scroll ; Store accumulator to BG3HOFS.w [Reads: Accumulator]
	lda $EA.b		; Load $EA.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta BG3VOFS.w		; BG3 Vertical Scroll ; Store accumulator to BG3VOFS.w [Reads: Accumulator]
	lda $EB.b		; Load $EB.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta BG3VOFS.w		; BG3 Vertical Scroll ; Store accumulator to BG3VOFS.w [Reads: Accumulator]
	lda $13.b		; Load $13.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta INIDSP.w		; Screen Display ; Store accumulator to INIDSP.w [Reads: Accumulator]
	lda $9B.b		; Load $9B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta HDMAEN.w		; HDMA Channel Enable ; Store accumulator to HDMAEN.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30
	tsa		; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $1F0A.w		; Load $1F0A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tas		; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	stx $1F0A.w		; Store X register to $1F0A.w [Reads: X Index]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

L0002D8:
	sei		; Disable interrupts ; Set interrupt disable flag [Flags: I]
.ACCU 16
.INDEX 16
	rep #$30
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phx		; [PATTERN: Function entry: Index register preservation prologue] Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phd		; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30
	lda $012A.w		; Load $012A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $36		; Invalid branch target (bne L00031F) ; Branch if not equal to $D0, $36 [Flow: branch]
	lda TIMEUP.w		; IRQ Flag ; Load TIMEUP.w into accumulator [Writes: Accumulator] [Flags: NZ]
	bpl L000317.b		; Branch if plus to L000317.b [Flow: branch]
	lda $0128.w		; Load $0128.w into accumulator [Writes: Accumulator] [Flags: NZ]
	beq L000317.b		; Branch if equal to L000317.b [Flow: branch]
L0002F3:
	bit $4212.w		; Test bits $4212.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bvc L0002F3.b		; Branch if overflow clear to L0002F3.b [Flow: branch]
	lda $0630.w		; Load $0630.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta BG3HOFS.w		; [PATTERN: Memory clearing operation] BG3 Horizontal Scroll ; Store accumulator to BG3HOFS.w [Reads: Accumulator]
	lda $0631.w		; Load $0631.w into accumulator [Writes: Accumulator] [Flags: NZ]
L000301:
	sta BG3HOFS.w		; BG3 Horizontal Scroll ; Store accumulator to BG3HOFS.w [Reads: Accumulator]
L000304:
	stz BG3VOFS.w		; BG3 Vertical Scroll ; Store zero to BG3VOFS.w
L000307:
	stz BG3VOFS.w		; BG3 Vertical Scroll ; Store zero to BG3VOFS.w
	lda $0128.w		; Load $0128.w into accumulator [Writes: Accumulator] [Flags: NZ]
	bpl L000317.b		; Branch if plus to L000317.b [Flow: branch]
	stz $0128.w		; Store zero to $0128.w
	lda #$81.b		; Load #$81.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta NMITIMEN.w		; Interrupt Enable Flags ; Store accumulator to NMITIMEN.w [Reads: Accumulator]
L000317:
.ACCU 16
.INDEX 16
	rep #$30
	plb		; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pld		; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ply		; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rti		; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda TIMEUP.w		; AD 11 42 ; Load TIMEUP.w into accumulator [Writes: Accumulator] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $1F0A.w		; AD 0A 1F ; Load $1F0A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	stx $1F0A.w		; 8E 0A 1F ; Store X register to $1F0A.w [Reads: X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$00A9.w		; A9 A9 00 ; Load #$00A9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$007F.w		; A9 7F 00 ; Load #$007F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$007F.w		; A9 7F 00 ; Load #$007F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0300.w		; A9 00 03 ; Load #$0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$007F.w		; A9 7F 00 ; Load #$007F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; [PATTERN: Memory clearing operation] 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$01EC.w		; A9 EC 01 ; Load #$01EC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz VMAIN.w		; 9C 15 21 ; Store zero to VMAIN.w
	stz VMADDL.w		; 9C 16 21 ; Store zero to VMADDL.w
	lda #$1808.w		; A9 08 18 ; Load #$1808.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP1.w		; 8D 10 43 ; Store accumulator to DMAP1.w [Reads: Accumulator]
	stz DMASRC1B.w		; 9C 14 43 ; Store zero to DMASRC1B.w
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC1L.w		; 8D 12 43 ; Store accumulator to DMASRC1L.w [Reads: Accumulator]
	lda #$2000.w		; A9 00 20 ; Load #$2000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN1L.w		; 8D 15 43 ; Store accumulator to DMALEN1L.w [Reads: Accumulator]
	ldy #$8C02.w		; A0 02 8C ; Load #$8C02.w into Y register [Writes: Y Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	.db $42, $A2		; 42 A2 ; Reserved instruction
	.db $80, $8E		; 80 8E ; Branch always to $80, $8E [Flow: branch]
	ora $21.b,X		; 15 21 ; OR accumulator with memory $21.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	stz VMADDL.w		; 9C 16 21 ; Store zero to VMADDL.w
	sta DMALEN1L.w		; 8D 15 43 ; Store accumulator to DMALEN1L.w [Reads: Accumulator]
	lda #$1908.w		; A9 08 19 ; Load #$1908.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP1.w		; 8D 10 43 ; Store accumulator to DMAP1.w [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC1L.w		; 8D 12 43 ; Store accumulator to DMASRC1L.w [Reads: Accumulator]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz VMAIN.w		; 9C 15 21 ; Store zero to VMAIN.w
	lda #$6000.w		; A9 00 60 ; Load #$6000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	lda #$1808.w		; A9 08 18 ; Load #$1808.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP1.w		; 8D 10 43 ; Store accumulator to DMAP1.w [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC1L.w		; 8D 12 43 ; Store accumulator to DMASRC1L.w [Reads: Accumulator]
	lda #$0800.w		; A9 00 08 ; Load #$0800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN1L.w		; 8D 15 43 ; Store accumulator to DMALEN1L.w [Reads: Accumulator]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
	stx VMAIN.w		; 8E 15 21 ; Store X register to VMAIN.w [Reads: X Index]
	sta DMALEN1L.w		; 8D 15 43 ; Store accumulator to DMALEN1L.w [Reads: Accumulator]
	lda #$6000.w		; A9 00 60 ; Load #$6000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	lda #$1908.w		; A9 08 19 ; Load #$1908.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP1.w		; 8D 10 43 ; Store accumulator to DMAP1.w [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC1L.w		; 8D 12 43 ; Store accumulator to DMASRC1L.w [Reads: Accumulator]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L0003D1:
	stz JOYSER0.w		; Joypad Port 1 ; Store zero to JOYSER0.w
	lda JOY1L.w		; Joyport1 Data Low Byte ; Load JOY1L.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda JOY1H.w		; Joyport1 Data High Byte ; Load JOY1H.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; Store accumulator to $01.b [Reads: Accumulator]
	lda $00.b		; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $F2.b		; Store accumulator to $F2.b [Reads: Accumulator]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor $FA.b		; Exclusive OR $FA.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F2.b		; Logical AND $F2.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $F6.b		; Store accumulator to $F6.b [Reads: Accumulator]
	sty $FA.b		; Store Y register to $FA.b [Reads: Y Index]
	lda $01.b		; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $F0.b		; Store accumulator to $F0.b [Reads: Accumulator]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor $F8.b		; Exclusive OR $F8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F0.b		; Logical AND $F0.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $F4.b		; Store accumulator to $F4.b [Reads: Accumulator]
	sty $F8.b		; Store Y register to $F8.b [Reads: Y Index]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda JOY2L.w		; AD 1A 42 ; Load JOY2L.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda JOY2H.w		; AD 1B 42 ; Load JOY2H.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $F3.b		; 85 F3 ; Store accumulator to $F3.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor $FB.b		; 45 FB ; Exclusive OR $FB.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F3.b		; 25 F3 ; Logical AND $F3.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $F7.b		; 85 F7 ; Store accumulator to $F7.b [Reads: Accumulator]
	sty $FB.b		; 84 FB ; Store Y register to $FB.b [Reads: Y Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $F1.b		; 85 F1 ; Store accumulator to $F1.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor $F9.b		; 45 F9 ; Exclusive OR $F9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $F1.b		; 25 F1 ; Logical AND $F1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $F5.b		; 85 F5 ; Store accumulator to $F5.b [Reads: Accumulator]
	sty $F9.b		; 84 F9 ; Store Y register to $F9.b [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L00041E:
	ldx #$A960.w		; Load #$A960.w into X register [Writes: X Index] [Flags: NZ]
	.db $F0, $9D		; F0 9D ; Branch if equal to $F0, $9D [Flow: branch]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $0805.w,X		; Store accumulator to $0805.w,X [Reads: Accumulator, X Index]
	sta $0809.w,X		; Store accumulator to $0809.w,X [Reads: Accumulator, X Index]
	sta $080D.w,X		; Store accumulator to $080D.w,X [Reads: Accumulator, X Index]
	sta $0811.w,X		; Store accumulator to $0811.w,X [Reads: Accumulator, X Index]
	sta $0815.w,X		; Store accumulator to $0815.w,X [Reads: Accumulator, X Index]
	sta $0819.w,X		; Store accumulator to $0819.w,X [Reads: Accumulator, X Index]
	sta $081D.w,X		; Store accumulator to $081D.w,X [Reads: Accumulator, X Index]
L00043A:
	sta $0881.w,X		; Store accumulator to $0881.w,X [Reads: Accumulator, X Index]
	sta $0885.w,X		; Store accumulator to $0885.w,X [Reads: Accumulator, X Index]
	sta $0889.w,X		; Store accumulator to $0889.w,X [Reads: Accumulator, X Index]
	sta $088D.w,X		; Store accumulator to $088D.w,X [Reads: Accumulator, X Index]
	sta $0891.w,X		; Store accumulator to $0891.w,X [Reads: Accumulator, X Index]
	sta $0895.w,X		; Store accumulator to $0895.w,X [Reads: Accumulator, X Index]
	sta $0899.w,X		; Store accumulator to $0899.w,X [Reads: Accumulator, X Index]
	sta $089D.w,X		; Store accumulator to $089D.w,X [Reads: Accumulator, X Index]
	sta $0901.w,X		; Store accumulator to $0901.w,X [Reads: Accumulator, X Index]
	sta $0905.w,X		; Store accumulator to $0905.w,X [Reads: Accumulator, X Index]
	sta $0909.w,X		; Store accumulator to $0909.w,X [Reads: Accumulator, X Index]
	sta $090D.w,X		; Store accumulator to $090D.w,X [Reads: Accumulator, X Index]
	sta $0911.w,X		; Store accumulator to $0911.w,X [Reads: Accumulator, X Index]
	sta $0915.w,X		; Store accumulator to $0915.w,X [Reads: Accumulator, X Index]
	sta $0919.w,X		; Store accumulator to $0919.w,X [Reads: Accumulator, X Index]
L000467:
	sta $091D.w,X		; Store accumulator to $091D.w,X [Reads: Accumulator, X Index]
	sta $0981.w,X		; Store accumulator to $0981.w,X [Reads: Accumulator, X Index]
	sta $0985.w,X		; Store accumulator to $0985.w,X [Reads: Accumulator, X Index]
	sta $0989.w,X		; Store accumulator to $0989.w,X [Reads: Accumulator, X Index]
	sta $098D.w,X		; Store accumulator to $098D.w,X [Reads: Accumulator, X Index]
	sta $0991.w,X		; Store accumulator to $0991.w,X [Reads: Accumulator, X Index]
	sta $0995.w,X		; Store accumulator to $0995.w,X [Reads: Accumulator, X Index]
L00047C:
	sta $0999.w,X		; Store accumulator to $0999.w,X [Reads: Accumulator, X Index]
	sta $099D.w,X		; Store accumulator to $099D.w,X [Reads: Accumulator, X Index]
L000482:
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
L000483:
	sec		; Set carry ; Set carry flag [Flags: C]
L000484:
	sbc #$20.b		; Subtract #$20.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
L000486:
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	bpl L000420.b		; Branch if plus to L000420.b [Flow: branch]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bra L00043A.b		; 80 A4 ; Branch always to L00043A.b [Flow: branch]
	cpy #$00A4.w		; C0 A4 00 ; Compare #$00A4.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda $40.b		; A5 40 ; Load $40.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $90, $20		; 90 20 ; Branch if carry clear to $90, $20 [Flow: branch]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	bcc L000483.b		; 90 E0 ; Branch if carry clear to L000483.b [Flow: branch]
	sta ($A0.b),Y		; 91 A0 ; Store accumulator ($A0.b),Y [Reads: Direct Page, Y Index, Accumulator]
	bcc L000467.b		; 90 C0 ; Branch if carry clear to L000467.b [Flow: branch]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	sta ($40.b),Y		; 91 40 ; Store accumulator ($40.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($00.b),Y		; 91 00 ; Store accumulator ($00.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($40.b,S),Y		; 93 40 ; Store accumulator (stack relative indirect indexed) ($40.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($80.b,S),Y		; 93 80 ; Store accumulator (stack relative indirect indexed) ($80.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($80.b,S),Y		; 93 80 ; Store accumulator (stack relative indirect indexed) ($80.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sty $C0.b,X		; 94 C0 ; Store Y register $C0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $E0.b,X		; 94 E0 ; Store Y register $E0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $C0.b,X		; 94 C0 ; Store Y register $C0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta $00.b,X		; 95 00 ; Store accumulator to $00.b,X [Reads: Accumulator, X Index]
	sta $20.b,X		; 95 20 ; Store accumulator to $20.b,X [Reads: Accumulator, X Index]
	sta $40.b,X		; 95 40 ; Store accumulator to $40.b,X [Reads: Accumulator, X Index]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	sty $40.b,X		; 94 40 ; Store Y register $40.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	stx $80.b,Y		; 96 80 ; Store X register $80.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $A0.b,Y		; 96 A0 ; Store X register $A0.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $80.b,Y		; 96 80 ; Store X register $80.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$C0.b],Y		; 97 C0 ; Store accumulator (long indexed) [$C0.b],Y [Reads: Direct Page, Y Index, Accumulator]
	stx $E0.b,Y		; 96 E0 ; Store X register $E0.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stx $00.b,Y		; 96 00 ; Store X register $00.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$80.b],Y		; 97 80 ; Store accumulator (long indexed) [$80.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sty $00.b,X		; 94 00 ; Store Y register $00.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$8098.w		; A0 98 80 ; Load #$8098.w into Y register [Writes: Y Index] [Flags: NZ]
	sty $80.b,X		; 94 80 ; Store Y register $80.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $80.b,X		; 94 80 ; Store Y register $80.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $80.b,X		; 94 80 ; Store Y register $80.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $80.b,X		; 94 80 ; Store Y register $80.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $C0.b,X		; 94 C0 ; Store Y register $C0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bra L00047C.b		; 80 94 ; Branch always to L00047C.b [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	bra L000482.b		; 80 94 ; Branch always to L000482.b [Flow: branch]
	bra L000484.b		; 80 94 ; Branch always to L000484.b [Flow: branch]
	bra L000486.b		; 80 94 ; Branch always to L000486.b [Flow: branch]
	cpy #$009B.w		; C0 9B 00 ; Compare #$009B.w with Y register [Reads: Y Index] [Flags: NCZ]
	stz $9C40.w		; 9C 40 9C ; Store zero to $9C40.w
	.db $80, $9C		; 80 9C ; Branch always to $80, $9C [Flow: branch]
	cpy #$009C.w		; C0 9C 00 ; Compare #$009C.w with Y register [Reads: Y Index] [Flags: NCZ]
	sta $9D40.w,X		; 9D 40 9D ; Store accumulator to $9D40.w,X [Reads: Accumulator, X Index]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sta $C09F80.l,X		; 9F 80 9F C0 ; Store accumulator (long,X) $C09F80.l,X [Reads: Accumulator, X Index]
	sta $009FE0.l,X		; 9F E0 9F 00 ; Store accumulator (long,X) $009FE0.l,X [Reads: Accumulator, X Index]
	ldy #$9480.w		; A0 80 94 ; Load #$9480.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	brk $A1.b		; 00 A1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	cpy #$0098.w		; C0 98 00 ; Compare #$0098.w with Y register [Reads: Y Index] [Flags: NCZ]
	sta $99C0.w,Y		; 99 C0 99 ; Store accumulator to $99C0.w,Y [Reads: Y Index, Accumulator]
	cpx #$0099.w		; E0 99 00 ; Compare #$0099.w with X register [Reads: X Index] [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	jsr $409A.w		; 20 9A 40 ; Jump to subroutine at $409A.w [Writes: Stack Pointer] [Flow: call]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $9A		; 80 9A ; Branch always to $80, $9A [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	.db $80, $94		; 80 94 ; Branch always to $80, $94 [Flow: branch]
	cpx #$E000.w		; E0 00 E0 ; Compare #$E000.w with X register [Reads: X Index] [Flags: NCZ]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E0.b,X)		; 01 E0 ; Logical OR ($E0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($00.b,S),Y		; B3 00 ; Load accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $C0.b,X		; B4 C0 ; Load Y register $C0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $A0.b,X		; B4 A0 ; Load Y register $A0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	trb $0A98.w		; 1C 98 0A ; Test and reset bits $0A98.w [Reads: Accumulator] [Flags: Z]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0A23.w,X		; Load $0A23.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A22.w,X		; OR accumulator with memory $0A22.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A21.w,X		; OR accumulator with memory $0A21.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A20.w,X		; OR accumulator with memory $0A20.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A00.w,Y		; Store accumulator to $0A00.w,Y [Reads: Y Index, Accumulator]
	lda $0A27.w,X		; Load $0A27.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A26.w,X		; OR accumulator with memory $0A26.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A25.w,X		; OR accumulator with memory $0A25.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A24.w,X		; OR accumulator with memory $0A24.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A01.w,Y		; Store accumulator to $0A01.w,Y [Reads: Y Index, Accumulator]
	lda $0A2B.w,X		; Load $0A2B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A2A.w,X		; OR accumulator with memory $0A2A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A29.w,X		; OR accumulator with memory $0A29.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A28.w,X		; OR accumulator with memory $0A28.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A02.w,Y		; Store accumulator to $0A02.w,Y [Reads: Y Index, Accumulator]
	lda $0A2F.w,X		; Load $0A2F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A2E.w,X		; OR accumulator with memory $0A2E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A2D.w,X		; OR accumulator with memory $0A2D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0A2C.w,X		; OR accumulator with memory $0A2C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A03.w,Y		; Store accumulator to $0A03.w,Y [Reads: Y Index, Accumulator]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bpl L0005FE.b		; Branch if plus to L0005FE.b [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$31
	ldx $0100.w		; Load $0100.w into X register [Writes: X Index] [Flags: NZ]
	lda $9396.w,X		; Load $9396.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0ACC.w		; Store accumulator to $0ACC.w [Reads: Accumulator]
	adc #$0200.w		; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0ACE.w		; Store accumulator to $0ACE.w [Reads: Accumulator]
	lda $95F4.w,X		; Load $95F4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AD0.w		; Store accumulator to $0AD0.w [Reads: Accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0200.w		; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0AD2.w		; Store accumulator to $0AD2.w [Reads: Accumulator]
	ldx $0102.w		; Load $0102.w into X register [Writes: X Index] [Flags: NZ]
	lda $9852.w,X		; Load $9852.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AD4.w		; Store accumulator to $0AD4.w [Reads: Accumulator]
	ldx $0104.w		; Load $0104.w into X register [Writes: X Index] [Flags: NZ]
	lda $9852.w,X		; Load $9852.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AD6.w		; Store accumulator to $0AD6.w [Reads: Accumulator]
.INDEX 8
	sep #$10
	ldx $0107.w		; Load $0107.w into X register [Writes: X Index] [Flags: NZ]
	lda $849C.w,X		; Load $849C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AC0.w		; Store accumulator to $0AC0.w [Reads: Accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0180.w		; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0AC2.w		; Store accumulator to $0AC2.w [Reads: Accumulator]
	ldx $0108.w		; Load $0108.w into X register [Writes: X Index] [Flags: NZ]
	lda $84AC.w,X		; Load $84AC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AC4.w		; Store accumulator to $0AC4.w [Reads: Accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$00C0.w		; Add #$00C0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0AC6.w		; Store accumulator to $0AC6.w [Reads: Accumulator]
	lda $0109.w		; Load $0109.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00F8.w		; Logical AND #$00F8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0109.w		; Load $0109.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $84B2.w,X		; Load $84B2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AC8.w		; Store accumulator to $0AC8.w [Reads: Accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	tyx		; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	adc $85B2.w,X		; Add $85B2.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0ACA.w		; Store accumulator to $0ACA.w [Reads: Accumulator]
	lda $02C3.w		; Load $02C3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0003.w		; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $8494.w,X		; Load $8494.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0AD8.w		; Store accumulator to $0AD8.w [Reads: Accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0100.w		; Add #$0100.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0ADA.w		; Store accumulator to $0ADA.w [Reads: Accumulator]
	lda $7EC00D.l		; Load long $7EC00D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC00D.l		; Store accumulator (long) $7EC00D.l [Reads: Accumulator]
	bne L000719.b		; Branch if not equal to L000719.b [Flow: branch]
	lda #$0009.w		; Load #$0009.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $8C.b		; Load $8C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$B5.b		; Compare #$B5.b with X register [Reads: X Index] [Flags: NCZ]
	beq L0006F7.b		; Branch if equal to L0006F7.b [Flow: branch]
	cpx #$BC.b		; Compare #$BC.b with X register [Reads: X Index] [Flags: NCZ]
	bne L0006FA.b		; Branch if not equal to L0006FA.b [Flow: branch]
L0006F7:
	lda #$0017.w		; Load #$0017.w into accumulator [Writes: Accumulator] [Flags: NZ]
L0006FA:
	sta $7EC00D.l		; Store accumulator (long) $7EC00D.l [Reads: Accumulator]
	lda $7EC00F.l		; Load long $7EC00F.l into accumulator [Writes: Accumulator] [Flags: NZ]
L000702:
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0400.w		; Add #$0400.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0C00.w		; Compare #$0C00.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bne L00070E.b		; Branch if not equal to L00070E.b [Flow: branch]
	lda #$0000.w		; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
L00070E:
	sta $7EC00F.l		; Store accumulator (long) $7EC00F.l [Reads: Accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$A680.w		; Add #$A680.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0ADC.w		; Store accumulator to $0ADC.w [Reads: Accumulator]
L000719:
	lda $7EC013.l		; Load long $7EC013.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC013.l		; Store accumulator (long) $7EC013.l [Reads: Accumulator]
	bne L00074E.b		; Branch if not equal to L00074E.b [Flow: branch]
	lda $7EC015.l		; Load long $7EC015.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0C.b		; Compare #$0C.b with X register [Reads: X Index] [Flags: NCZ]
	bne L000731.b		; Branch if not equal to L000731.b [Flow: branch]
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
L000731:
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC015.l		; Store accumulator (long) $7EC015.l [Reads: Accumulator]
	lda $85D2.w,X		; Load $85D2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC013.l		; Store accumulator (long) $7EC013.l [Reads: Accumulator]
	lda #$B280.w		; Load #$B280.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc $85DE.w,X		; Add $85DE.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0AE0.w		; Store accumulator to $0AE0.w [Reads: Accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0060.w		; Add #$0060.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0AE2.w		; Store accumulator to $0AE2.w [Reads: Accumulator]
L00074E:
	lda $0AE8.w		; Load $0AE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$B940.w		; Add #$B940.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0AEC.w		; Store accumulator to $0AEC.w [Reads: Accumulator]
	adc #$0200.w		; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0AEE.w		; Store accumulator to $0AEE.w [Reads: Accumulator]
	lda $0AEA.w		; Load $0AEA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$B940.w		; Add #$B940.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0AF0.w		; Store accumulator to $0AF0.w [Reads: Accumulator]
	adc #$0200.w		; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0AF2.w		; Store accumulator to $0AF2.w [Reads: Accumulator]
	lda $0AF4.w		; Load $0AF4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc #$B540.w		; Add #$B540.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0AF6.w		; Store accumulator to $0AF6.w [Reads: Accumulator]
	adc #$0200.w		; Add #$0200.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0AF8.w		; Store accumulator to $0AF8.w [Reads: Accumulator]
.ACCU 8
	sep #$20
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $03.b		; 84 03 ; Store Y register to $03.b [Reads: Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldy $03.b		; A4 03 ; Load $03.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jmp.w [$0000]		; DC 00 00 ; Jump long indirect [$0000] [Flow: jump]
	sty $05.b		; 84 05 ; Store Y register to $05.b [Reads: Y Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sty $02.b		; 84 02 ; Store Y register to $02.b [Reads: Y Index]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	adc $03.b		; 65 03 ; Add $03.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$02.b],Y		; B7 02 ; Load accumulator (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$02.b],Y		; B7 02 ; Load accumulator (long indexed) [$02.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldy $05.b		; A4 05 ; Load $05.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jmp.w [$0000]		; DC 00 00 ; Jump long indirect [$0000] [Flow: jump]
L0007C0:
.ACCU 16
.INDEX 16
	rep #$30
	ldy $01FE.w		; Load $01FE.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$03FE.w		; Load #$03FE.w into X register [Writes: X Index] [Flags: NZ]
	lda #$0000.w		; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
L0007CB:
	sta $0000.w,X		; Store accumulator to $0000.w,X [Reads: Accumulator, X Index]
	sta $0400.w,X		; Store accumulator to $0400.w,X [Reads: Accumulator, X Index]
	sta $0800.w,X		; Store accumulator to $0800.w,X [Reads: Accumulator, X Index]
	sta $0C00.w,X		; Store accumulator to $0C00.w,X [Reads: Accumulator, X Index]
	sta $1000.w,X		; Store accumulator to $1000.w,X [Reads: Accumulator, X Index]
	sta $1400.w,X		; Store accumulator to $1400.w,X [Reads: Accumulator, X Index]
	sta $1800.w,X		; Store accumulator to $1800.w,X [Reads: Accumulator, X Index]
	sta $1C00.w,X		; Store accumulator to $1C00.w,X [Reads: Accumulator, X Index]
	dex		; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; [PATTERN: X register countdown loop] Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bne L0007CB.b		; Branch if not equal to L0007CB.b [Flow: branch]
	sta $7EC500.l		; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	sta $701FFE.l		; Store accumulator (long) $701FFE.l [Reads: Accumulator]
	lda $7003E5.l		; Load long $7003E5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$55AA.w		; Compare #$55AA.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	beq L0007FF.b		; Branch if equal to L0007FF.b [Flow: branch]
	lda #$0000.w		; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7003E5.l		; Store accumulator (long) $7003E5.l [Reads: Accumulator]
L0007FF:
	lda $7008E5.l		; Load long $7008E5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$55AA.w		; Compare #$55AA.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	beq L00080F.b		; Branch if equal to L00080F.b [Flow: branch]
	lda #$0000.w		; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7008E5.l		; Store accumulator (long) $7008E5.l [Reads: Accumulator]
L00080F:
	lda $700DE5.l		; Load long $700DE5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$55AA.w		; Compare #$55AA.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	beq L00081F.b		; Branch if equal to L00081F.b [Flow: branch]
	lda #$0000.w		; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
L00081B:
	sta $700DE5.l		; Store accumulator (long) $700DE5.l [Reads: Accumulator]
L00081F:
	sty $01FE.w		; Store Y register to $01FE.w [Reads: Y Index]
	stz TMW.w		; Window Mask Designation for the Main Screen ; Store zero to TMW.w
.ACCU 8
.INDEX 8
	sep #$30
	lda #$80.b		; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13.b		; Store accumulator to $13.b [Reads: Accumulator]
	inc $15.b		; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0708.w		; ED 08 07 ; Subtract $0708.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and $070A.w		; 2D 0A 07 ; Logical AND $070A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $070C.w		; ED 0C 07 ; Subtract $070C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	and $070E.w		; 2D 0E 07 ; Logical AND $070E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7E2000.l,X		; BF 00 20 7E ; Load long $7E2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0008.w		; 29 08 00 ; Logical AND #$0008.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0F8000.l,X		; BF 00 80 0F ; Load long $0F8000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	and #$01FF.w		; 29 FF 01 ; Logical AND #$01FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0E9459.l,X		; BF 59 94 0E ; Load long $0E9459.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L000888:
	php		; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
.ACCU 16
.INDEX 16
	rep #$30
	ldy #$0000.w		; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$BBAA.w		; Load #$BBAA.w into accumulator [Writes: Accumulator] [Flags: NZ]
L000891:
	cmp $2140.w		; Compare $2140.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bne L000891.b		; Branch if not equal to L000891.b [Flow: branch]
.ACCU 8
	sep #$20
	lda #$CC.b		; Load #$CC.b into accumulator [Writes: Accumulator] [Flags: NZ]
	bra L0008CC.b		; Branch always to L0008CC.b [Flow: branch]
L00089C:
	lda [$00.b],Y		; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	bra L0008B9.b		; Branch always to L0008B9.b [Flow: branch]
L0008A4:
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda [$00.b],Y		; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$8000.w		; Compare #$8000.w with Y register [Reads: Y Index] [Flags: NCZ]
	bne L0008B2.b		; Branch if not equal to L0008B2.b [Flow: branch]
	ldy #$0000.w		; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	inc $02.b		; Increment $02.b [Reads: Direct Page] [Flags: NZ]
L0008B2:
	xba		; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
L0008B3:
	cmp $2140.w		; Compare $2140.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bne L0008B3.b		; Branch if not equal to L0008B3.b [Flow: branch]
	inc A		; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
L0008B9:
.ACCU 16
	rep #$20
	sta APUIO0.w		; APU I/O Port 0 ; Store accumulator to APUIO0.w [Reads: Accumulator]
.ACCU 8
	sep #$20
	dex		; [PATTERN: X register countdown loop] Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bne L0008A4.b		; Branch if not equal to L0008A4.b [Flow: branch]
L0008C3:
	cmp $2140.w		; Compare $2140.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bne L0008C3.b		; Branch if not equal to L0008C3.b [Flow: branch]
L0008C8:
	adc #$03.b		; Add #$03.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	beq L0008C8.b		; Branch if equal to L0008C8.b [Flow: branch]
L0008CC:
	pha		; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 16
	rep #$20
	lda [$00.b],Y		; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda [$00.b],Y		; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta APUIO2.w		; APU I/O Port 2 ; Store accumulator to APUIO2.w [Reads: Accumulator]
.ACCU 8
	sep #$20
	cpx #$0001.w		; Compare #$0001.w with X register [Reads: X Index] [Flags: NCZ]
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta APUIO1.w		; APU I/O Port 1 ; Store accumulator to APUIO1.w [Reads: Accumulator]
	adc #$7F.b		; Add #$7F.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	pla		; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta APUIO0.w		; APU I/O Port 0 ; Store accumulator to APUIO0.w [Reads: Accumulator]
L0008EC:
	cmp $2140.w		; [PATTERN: Memory clearing operation] Compare $2140.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bne L0008EC.b		; Branch if not equal to L0008EC.b [Flow: branch]
	bvs L00089C.b		; Branch if overflow set to L00089C.b [Flow: branch]
	stz APUIO0.w		; APU I/O Port 0 ; Store zero to APUIO0.w
	stz APUIO1.w		; APU I/O Port 1 ; Store zero to APUIO1.w
	stz APUIO2.w		; [PATTERN: Memory clearing operation] APU I/O Port 2 ; Store zero to APUIO2.w
	stz APUIO3.w		; APU I/O Port 4 ; Store zero to APUIO3.w
	plp		; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
L000900:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L000901:
	lda #$00.b		; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda #$80.b		; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; Store accumulator to $01.b [Reads: Accumulator]
	lda #$19.b		; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
.BASE $C0
LC0090B:
.BASE $00
L00090B:
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	sei		; Disable interrupts ; Set interrupt disable flag [Flags: I]
	jsr L000888.w		; Jump to subroutine at L000888.w [Writes: Stack Pointer] [Flow: call]
	cli		; Clear interupt ; Clear interrupt disable flag [Flags: I]
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$F5.b		; A9 F5 ; Load #$F5.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$9E.b		; A9 9E ; Load #$9E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	jsr L000888.w		; 20 88 88 ; Jump to subroutine at L000888.w [Writes: Stack Pointer] [Flow: call]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $EC		; 80 EC ; Branch always to $80, $EC [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$D3.b		; A9 D3 ; Load #$D3.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $E0		; 80 E0 ; Branch always to $80, $E0 [Flow: branch]
	lda #$80.b		; [PATTERN: Memory clearing operation] A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta INIDSP.w		; 8D 00 21 ; Store accumulator to INIDSP.w [Reads: Accumulator]
	sta $13.b		; 85 13 ; Store accumulator to $13.b [Reads: Accumulator]
	stz HDMAEN.w		; 9C 0C 42 ; Store zero to HDMAEN.w
	stz $9B.b		; 64 9B ; Store zero to $9B.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$70.b		; A9 70 ; Load #$70.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx $1FFE.w		; AE FE 1F ; Load $1FFE.w into X register [Writes: X Index] [Flags: NZ]
	lda $00848A.l,X		; BF 8A 84 00 ; Load long $00848A.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EF000.l,X		; BF 00 F0 7E ; Load long $7EF000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Y Index, Accumulator]
	sta $0F00.w,Y		; 99 00 0F ; Store accumulator to $0F00.w,Y [Reads: Y Index, Accumulator]
	lda $7EF100.l,X		; BF 00 F1 7E ; Load long $7EF100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0100.w,Y		; 99 00 01 ; Store accumulator to $0100.w,Y [Reads: Y Index, Accumulator]
	sta $1000.w,Y		; 99 00 10 ; Store accumulator to $1000.w,Y [Reads: Y Index, Accumulator]
	lda $7EF200.l,X		; BF 00 F2 7E ; Load long $7EF200.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0200.w,Y		; 99 00 02 ; Store accumulator to $0200.w,Y [Reads: Y Index, Accumulator]
	sta $1100.w,Y		; 99 00 11 ; Store accumulator to $1100.w,Y [Reads: Y Index, Accumulator]
	lda $7EF300.l,X		; BF 00 F3 7E ; Load long $7EF300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0300.w,Y		; 99 00 03 ; Store accumulator to $0300.w,Y [Reads: Y Index, Accumulator]
	sta $1200.w,Y		; 99 00 12 ; Store accumulator to $1200.w,Y [Reads: Y Index, Accumulator]
	lda $7EF400.l,X		; BF 00 F4 7E ; Load long $7EF400.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0400.w,Y		; 99 00 04 ; Store accumulator to $0400.w,Y [Reads: Y Index, Accumulator]
	sta $1300.w,Y		; 99 00 13 ; Store accumulator to $1300.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0100.w		; E0 00 01 ; Compare #$0100.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $C5		; D0 C5 ; Branch if not equal to $D0, $C5 [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7EF000.l,X		; 7F 00 F0 7E ; Add long $7EF000.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$04FE.w		; E0 FE 04 ; Compare #$04FE.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda #$5A5A.w		; A9 5A 5A ; Load #$5A5A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF4FE.l		; 8F FE F4 7E ; Store accumulator (long) $7EF4FE.l [Reads: Accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	sta $7004FE.l,X		; 9F FE 04 70 ; Store accumulator (long,X) $7004FE.l,X [Reads: Accumulator, X Index]
	sta $7013FE.l,X		; 9F FE 13 70 ; Store accumulator (long,X) $7013FE.l,X [Reads: Accumulator, X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $10C2FF.l,X		; FF FF C2 10 ; Subtract with carry (long,X) $10C2FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda #$80.b		; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; Video Port Control ; Store accumulator to VMAIN.w [Reads: Accumulator]
	lda $0710.w		; Load $0710.w into accumulator [Writes: Accumulator] [Flags: NZ]
	beq L0009EF.b		; Branch if equal to L0009EF.b [Flow: branch]
	jmp L000B67.w		; Jump to L000B67.w [Flow: jump]
L0009EF:
	ldx #$01.b		; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stx DMAP0.w		; DMA 0 Control ; Store X register to DMAP0.w [Reads: X Index]
	stx DMAP1.w		; DMA 1 Control ; Store X register to DMAP1.w [Reads: X Index]
	stx DMAP2.w		; DMA 2 Control ; Store X register to DMAP2.w [Reads: X Index]
	stx DMAP3.w		; DMA 3 Control ; Store X register to DMAP3.w [Reads: X Index]
	stx DMAP4.w		; DMA 4 Control ; Store X register to DMAP4.w [Reads: X Index]
	lda #$10.b		; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0B.w		; DMA 0 Source Address Bank ; Store accumulator to DMASRC0B.w [Reads: Accumulator]
	sta DMASRC1B.w		; DMA 1 Source Address Bank ; Store accumulator to DMASRC1B.w [Reads: Accumulator]
	sta DMASRC2B.w		; DMA 2 Source Address Bank ; Store accumulator to DMASRC2B.w [Reads: Accumulator]
	ldy #$00.b		; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	eor ($8C.b,X)		; 41 8C ; Exclusive OR accumulator with memory ($8C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $21.b,X		; 16 21 ; Arithmetic shift left $21.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldy $0ACE.w		; Load $0ACE.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store Y register to DMASRC0L.w [Reads: Y Index]
	ldx #$40.b		; Load #$40.b into X register [Writes: X Index] [Flags: NZ]
	brk $8E.b		; 00 8E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $43.b		; 05 43 ; Logical OR $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $0AD2.w		; Load $0AD2.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC1L.w		; DMA 1 Source Adress Low Byte ; Store Y register to DMASRC1L.w [Reads: Y Index]
	stx DMALEN1L.w		; DMA 1 Transfer Size Low Byte ; Store X register to DMALEN1L.w [Reads: X Index]
	ldy $0AD6.w		; Load $0AD6.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC2L.w		; DMA 2 Source Adress Low Byte ; Store Y register to DMASRC2L.w [Reads: Y Index]
	ldy #$20.b		; Load #$20.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $43.b		; 25 43 ; Logical AND $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$07.b		; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	sty DMALEN2L.w		; DMA 2 Transfer Size Low Byte ; Store Y register to DMALEN2L.w [Reads: Y Index]
	ldy #$00.b		; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sty VMADDL.w		; VRAM Address Low Byte ; Store Y register to VMADDL.w [Reads: Y Index]
	ldy $0ACC.w		; Load $0ACC.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store Y register to DMASRC0L.w [Reads: Y Index]
	stx DMALEN0L.w		; DMA 0 Transfer Size Low Byte ; Store X register to DMALEN0L.w [Reads: X Index]
	ldy $0AD0.w		; Load $0AD0.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC1L.w		; DMA 1 Source Adress Low Byte ; Store Y register to DMASRC1L.w [Reads: Y Index]
	stx DMALEN1L.w		; DMA 1 Transfer Size Low Byte ; Store X register to DMALEN1L.w [Reads: X Index]
	ldy $0AD4.w		; Load $0AD4.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC2L.w		; DMA 2 Source Adress Low Byte ; Store Y register to DMASRC2L.w [Reads: Y Index]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	lda #$7E.b		; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0B.w		; DMA 0 Source Address Bank ; Store accumulator to DMASRC0B.w [Reads: Accumulator]
	sta DMASRC1B.w		; DMA 1 Source Address Bank ; Store accumulator to DMASRC1B.w [Reads: Accumulator]
	sta DMASRC2B.w		; DMA 2 Source Address Bank ; Store accumulator to DMASRC2B.w [Reads: Accumulator]
	sta DMASRC3B.w		; DMA 3 Source Address Bank ; Store accumulator to DMASRC3B.w [Reads: Accumulator]
	sta DMASRC4B.w		; DMA 4 Source Address Bank ; Store accumulator to DMASRC4B.w [Reads: Accumulator]
	ldy $0AC0.w		; Load $0AC0.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store Y register to DMASRC0L.w [Reads: Y Index]
	stx DMALEN0L.w		; DMA 0 Transfer Size Low Byte ; Store X register to DMALEN0L.w [Reads: X Index]
	ldy $0AC4.w		; Load $0AC4.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC1L.w		; DMA 1 Source Adress Low Byte ; Store Y register to DMASRC1L.w [Reads: Y Index]
	stx DMALEN1L.w		; DMA 1 Transfer Size Low Byte ; Store X register to DMALEN1L.w [Reads: X Index]
	ldy $0AC8.w		; Load $0AC8.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC2L.w		; DMA 2 Source Adress Low Byte ; Store Y register to DMASRC2L.w [Reads: Y Index]
	stx DMALEN2L.w		; DMA 2 Transfer Size Low Byte ; Store X register to DMALEN2L.w [Reads: X Index]
	ldy $0AE0.w		; Load $0AE0.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC3L.w		; DMA 3 Source Adress Low Byte ; Store Y register to DMASRC3L.w [Reads: Y Index]
	ldy #$20.b		; Load #$20.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $43.b,X		; 35 43 ; Logical AND $43.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $0AD8.w		; Load $0AD8.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC4L.w		; DMA 4 Source Adress Low Byte ; Store Y register to DMASRC4L.w [Reads: Y Index]
	stx DMALEN4L.w		; DMA 4 Transfer Size Low Byte ; Store X register to DMALEN4L.w [Reads: X Index]
	lda #$1F.b		; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	ldy #$50.b		; Load #$50.b into Y register [Writes: Y Index] [Flags: NZ]
	eor ($8C.b,X)		; 41 8C ; Exclusive OR accumulator with memory ($8C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $21.b,X		; 16 21 ; Arithmetic shift left $21.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldy $0AC2.w		; Load $0AC2.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store Y register to DMASRC0L.w [Reads: Y Index]
	stx DMALEN0L.w		; DMA 0 Transfer Size Low Byte ; Store X register to DMALEN0L.w [Reads: X Index]
	ldy $0AC6.w		; Load $0AC6.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC1L.w		; DMA 1 Source Adress Low Byte ; Store Y register to DMASRC1L.w [Reads: Y Index]
	stx DMALEN1L.w		; DMA 1 Transfer Size Low Byte ; Store X register to DMALEN1L.w [Reads: X Index]
	ldy $0ACA.w		; Load $0ACA.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC2L.w		; DMA 2 Source Adress Low Byte ; Store Y register to DMASRC2L.w [Reads: Y Index]
	stx DMALEN2L.w		; DMA 2 Transfer Size Low Byte ; Store X register to DMALEN2L.w [Reads: X Index]
	ldy $0AE2.w		; Load $0AE2.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC3L.w		; DMA 3 Source Adress Low Byte ; Store Y register to DMASRC3L.w [Reads: Y Index]
	ldy #$20.b		; Load #$20.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $43.b,X		; 35 43 ; Logical AND $43.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $0ADA.w		; Load $0ADA.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC4L.w		; DMA 4 Source Adress Low Byte ; Store Y register to DMASRC4L.w [Reads: Y Index]
	stx DMALEN4L.w		; DMA 4 Transfer Size Low Byte ; Store X register to DMALEN4L.w [Reads: X Index]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	ldy #$00.b		; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $42, $8C		; 42 8C ; Reserved instruction
	asl $21.b,X		; 16 21 ; Arithmetic shift left $21.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldy $0AEC.w		; Load $0AEC.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store Y register to DMASRC0L.w [Reads: Y Index]
	stx DMALEN0L.w		; DMA 0 Transfer Size Low Byte ; Store X register to DMALEN0L.w [Reads: X Index]
	ldy $0AF0.w		; Load $0AF0.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC1L.w		; DMA 1 Source Adress Low Byte ; Store Y register to DMASRC1L.w [Reads: Y Index]
	stx DMALEN1L.w		; DMA 1 Transfer Size Low Byte ; Store X register to DMALEN1L.w [Reads: X Index]
	ldy #$40.b		; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $228C.w,X		; BD 8C 22 ; Load $228C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $8E.b,S		; 43 8E ; Exclusive OR accumulator with stack relative $8E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $43.b		; 25 43 ; Logical AND $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$07.b		; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	ldy #$00.b		; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	eor $8C.b,S		; 43 8C ; Exclusive OR accumulator with stack relative $8C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $21.b,X		; 16 21 ; Arithmetic shift left $21.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldy $0AEE.w		; Load $0AEE.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store Y register to DMASRC0L.w [Reads: Y Index]
	stx DMALEN0L.w		; DMA 0 Transfer Size Low Byte ; Store X register to DMALEN0L.w [Reads: X Index]
	ldy $0AF2.w		; Load $0AF2.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC1L.w		; DMA 1 Source Adress Low Byte ; Store Y register to DMASRC1L.w [Reads: Y Index]
	stx DMALEN1L.w		; DMA 1 Transfer Size Low Byte ; Store X register to DMALEN1L.w [Reads: X Index]
	ldy #$80.b		; Load #$80.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $228C.w,X		; BD 8C 22 ; Load $228C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $8E.b,S		; 43 8E ; Exclusive OR accumulator with stack relative $8E.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $43.b		; 25 43 ; Logical AND $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	lda $0AF4.w		; Load $0AF4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	beq L000B50.b		; Branch if equal to L000B50.b [Flow: branch]
	ldy #$E0.b		; Load #$E0.b into Y register [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sty VMADDL.w		; VRAM Address Low Byte ; Store Y register to VMADDL.w [Reads: Y Index]
	ldy $0AF6.w		; Load $0AF6.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store Y register to DMASRC0L.w [Reads: Y Index]
	stx DMALEN0L.w		; DMA 0 Transfer Size Low Byte ; Store X register to DMALEN0L.w [Reads: X Index]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	ldy #$E0.b		; Load #$E0.b into Y register [Writes: Y Index] [Flags: NZ]
	eor ($8C.b,X)		; 41 8C ; Exclusive OR accumulator with memory ($8C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $21.b,X		; 16 21 ; Arithmetic shift left $21.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldy $0AF8.w		; Load $0AF8.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store Y register to DMASRC0L.w [Reads: Y Index]
	stx DMALEN0L.w		; DMA 0 Transfer Size Low Byte ; Store X register to DMALEN0L.w [Reads: X Index]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
L000B50:
	ldx $0ADC.w		; Load $0ADC.w into X register [Writes: X Index] [Flags: NZ]
	stx DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store X register to DMASRC0L.w [Reads: X Index]
	ldx $0134.w		; Load $0134.w into X register [Writes: X Index] [Flags: NZ]
	stx VMADDL.w		; VRAM Address Low Byte ; Store X register to VMADDL.w [Reads: X Index]
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	tsb $8E.b		; 04 8E ; Test and set bits $8E.b [Reads: Accumulator] [Flags: Z]
	ora $43.b		; 05 43 ; Logical OR $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
L000B67:
	lda $16.b		; Load $16.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	beq L000B87.b		; Branch if equal to L000B87.b [Flow: branch]
	ldx $0219.w		; Load $0219.w into X register [Writes: X Index] [Flags: NZ]
	stx VMADDL.w		; VRAM Address Low Byte ; Store X register to VMADDL.w [Reads: X Index]
	ldx #$00.b		; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	cmp [$8E.b]		; C7 8E ; Compare accumulator (long) [$8E.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cop $43.b		; 02 43 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$7E.b		; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0B.w		; DMA 0 Source Address Bank ; Store accumulator to DMASRC0B.w [Reads: Accumulator]
	ldx #$4A.b		; Load #$4A.b into X register [Writes: X Index] [Flags: NZ]
	ora ($8E.b,X)		; 01 8E ; Logical OR ($8E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $43.b		; 05 43 ; Logical OR $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
L000B87:
	lda $15.b		; Load $15.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	beq L000BAA.b		; Branch if equal to L000BAA.b [Flow: branch]
	stz CGADD.w		; CGRAM Address ; Store zero to CGADD.w
	ldy #$00.b		; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $43108C.l		; 22 8C 10 43 ; Jump to subroutine long $43108C.l [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp $8C.b		; C5 8C ; Compare $8C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($43.b)		; 12 43 ; OR accumulator with memory (indirect) ($43.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$7E.b		; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC1B.w		; DMA 1 Source Address Bank ; Store accumulator to DMASRC1B.w [Reads: Accumulator]
	ldy #$00.b		; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	cop $8C.b		; 02 8C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $43.b,X		; [PATTERN: Memory clearing operation] 15 43 ; OR accumulator with memory $43.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
L000BAA:
.ACCU 16
	rep #$20
.INDEX 8
	sep #$10
	stz $15.b		; Store zero to $15.b
	stz OAMADDL.w		; OAM Address Low Byte ; Store zero to OAMADDL.w
	lda #$0400.w		; Load #$0400.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; DMA 0 Control ; Store accumulator to DMAP0.w [Reads: Accumulator]
	lda #$0800.w		; Load #$0800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	stz DMASRC0B.w		; DMA 0 Source Address Bank ; Store zero to DMASRC0B.w
	lda #$0220.w		; Load #$0220.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN0L.w		; DMA 0 Transfer Size Low Byte ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty MDMAEN.w		; DMA Channel Enable ; Store Y register to MDMAEN.w [Reads: Y Index]
.ACCU 8
.INDEX 8
	sep #$30
	ldy $14.b		; Load $14.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	beq L000BF3.b		; Branch if equal to L000BF3.b [Flow: branch]
	lda $937A.w,Y		; Load $937A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
	lda $9383.w,Y		; Load $9383.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; Store accumulator to $01.b [Reads: Accumulator]
	lda $938C.w,Y		; Load $938C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; Store accumulator to $02.b [Reads: Accumulator]
	jsr L0012A1.w		; Jump to subroutine at L0012A1.w [Writes: Stack Pointer] [Flow: call]
	lda $14.b		; [PATTERN: Memory clearing operation] Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	bne L000BF1.b		; Branch if not equal to L000BF1.b [Flow: branch]
	stz $1000.w		; Store zero to $1000.w
	stz $1001.w		; Store zero to $1001.w
L000BF1:
	stz $14.b		; Store zero to $14.b
L000BF3:
	lda $19.b		; Load $19.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	beq L000C22.b		; Branch if equal to L000C22.b [Flow: branch]
	sta VMADDH.w		; VRAM Address High Byte ; Store accumulator to VMADDH.w [Reads: Accumulator]
.INDEX 16
	rep #$10
	ldx #$0080.w		; Load #$0080.w into X register [Writes: X Index] [Flags: NZ]
	stx VMAIN.w		; Video Port Control ; Store X register to VMAIN.w [Reads: X Index]
	ldx #$1801.w		; Load #$1801.w into X register [Writes: X Index] [Flags: NZ]
	stx DMAP0.w		; DMA 0 Control ; Store X register to DMAP0.w [Reads: X Index]
	ldx $0118.w		; Load $0118.w into X register [Writes: X Index] [Flags: NZ]
	stx DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store X register to DMASRC0L.w [Reads: X Index]
L000C0E:
	lda #$7F.b		; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0B.w		; DMA 0 Source Address Bank ; Store accumulator to DMASRC0B.w [Reads: Accumulator]
	ldx #$0200.w		; Load #$0200.w into X register [Writes: X Index] [Flags: NZ]
	stx DMALEN0L.w		; DMA 0 Transfer Size Low Byte ; Store X register to DMALEN0L.w [Reads: X Index]
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; [PATTERN: Memory clearing operation] DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	stz $19.b		; Store zero to $19.b
.INDEX 8
	sep #$10
L000C22:
	ldx $18.b		; Load $18.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	beq L000C75.b		; Branch if equal to L000C75.b [Flow: branch]
	stz DMASRC1B.w		; DMA 1 Source Address Bank ; Store zero to DMASRC1B.w
.ACCU 16
	rep #$20
	lda #$1801.w		; Load #$1801.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP1.w		; DMA 1 Control ; Store accumulator to DMAP1.w [Reads: Accumulator]
.INDEX 16
	rep #$10
	ldx #$0000.w		; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $1100.w,X		; Load $1100.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
L000C39:
	sta VMADDL.w		; VRAM Address Low Byte ; Store accumulator to VMADDL.w [Reads: Accumulator]
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$1104.w		; Add #$1104.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta DMASRC1L.w		; DMA 1 Source Adress Low Byte ; Store accumulator to DMASRC1L.w [Reads: Accumulator]
	lda $1103.w,X		; Load $1103.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN1L.w		; DMA 1 Transfer Size Low Byte ; Store accumulator to DMALEN1L.w [Reads: Accumulator]
	clc		; Clear carry ; Clear carry flag [Flags: C]
	adc #$0004.w		; Add #$0004.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20
	lda $1102.w,X		; Load $1102.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; Video Port Control ; Store accumulator to VMAIN.w [Reads: Accumulator]
	lda #$02.b		; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
.ACCU 16
	rep #$21
	txa		; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $00.b		; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
L000C66:
	lda $1100.w,X		; [PATTERN: Memory clearing operation] Load $1100.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	bne L000C39.b		; Branch if not equal to L000C39.b [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30
	stz $18.b		; Store zero to $18.b
	stz $0710.w		; Store zero to $0710.w
L000C75:
	lda $17.b		; Load $17.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $17.b		; Store zero to $17.b
	jmp ($8C7E.w,X)		; Jump indirect indexed to ($8C7E.w,X) [Reads: X Index] [Flow: jump]
	sbc $8C.b,S		; Subtract stack-relative $8C.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	bcs L000C0E.b		; Branch if carry set to L000C0E.b [Flow: branch]
	cpx $8C.b		; Compare $8C.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($8D.b,S),Y		; OR accumulator (stack relative indirect indexed) ($8D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $62, $8D, $09		; Invalid branch target (per L001616) ; Push effective relative address $62, $8D, $09 [Writes: Stack Pointer]
	stx $8E4B.w		; Store X register to $8E4B.w [Reads: X Index]
	mvn $A9,$8E		; Move block negative $A9,$8E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	stx $8EE7.w		; Store X register to $8EE7.w [Reads: X Index]
	asl $8F.b,X		; Arithmetic shift left $8F.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $8F.b		; Exclusive OR $8F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $8D.b,Y		; Store X register $8D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	jmp ($728D.w,X)		; Jump indirect indexed to ($728D.w,X) [Reads: X Index] [Flow: jump]
	sta $808F79.l		; Store accumulator (long) $808F79.l [Reads: Accumulator]
	sta $8E8F87.l		; Store accumulator (long) $8E8F87.l [Reads: Accumulator]
	sta $C48FBD.l		; Store accumulator (long) $C48FBD.l [Reads: Accumulator]
	sta $388FF3.l		; Store accumulator (long) $388FF3.l [Reads: Accumulator]
	.db $90, $8B		; Invalid branch target (bcc L000C38) ; Branch if carry clear to $90, $8B [Flow: branch]
	bcc L000C66.b		; Branch if carry clear to L000C66.b [Flow: branch]
	.db $90, $AE		; Invalid branch target (bcc L000C5F) ; Branch if carry clear to $90, $AE [Flow: branch]
	asl $01.b,X		; Arithmetic shift left $01.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $9888.w,X		; Load $9888.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta VMADDH.w		; VRAM Address High Byte ; Store accumulator to VMADDH.w [Reads: Accumulator]
	stz DMASRC0B.w		; DMA 0 Source Address Bank ; Store zero to DMASRC0B.w
.ACCU 16
	rep #$20
	lda #$0080.w		; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; Video Port Control ; Store accumulator to VMAIN.w [Reads: Accumulator]
	lda #$1801.w		; Load #$1801.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; DMA 0 Control ; Store accumulator to DMAP0.w [Reads: Accumulator]
	lda #$1000.w		; Load #$1000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	lda #$0800.w		; Load #$0800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN0L.w		; [PATTERN: Memory clearing operation] DMA 0 Transfer Size Low Byte ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
	ldy #$01.b		; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty MDMAEN.w		; DMA Channel Enable ; Store Y register to MDMAEN.w [Reads: Y Index]
	stz $1000.w		; Store zero to $1000.w
.ACCU 8
	sep #$20
	stz $0710.w		; Store zero to $0710.w
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
	ldx #$1801.w		; A2 01 18 ; Load #$1801.w into X register [Writes: X Index] [Flags: NZ]
	stx DMAP0.w		; 8E 00 43 ; Store X register to DMAP0.w [Reads: X Index]
	ldy #$7C00.w		; A0 00 7C ; Load #$7C00.w into Y register [Writes: Y Index] [Flags: NZ]
	sty VMADDL.w		; 8C 16 21 ; Store Y register to VMADDL.w [Reads: Y Index]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0L.w		; 8C 02 43 ; Store Y register to DMASRC0L.w [Reads: Y Index]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0B.w		; 8D 04 43 ; Store accumulator to DMASRC0B.w [Reads: Accumulator]
	ldx #$07E0.w		; A2 E0 07 ; Load #$07E0.w into X register [Writes: X Index] [Flags: NZ]
	stx DMALEN0L.w		; 8E 05 43 ; Store X register to DMALEN0L.w [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	stz $0710.w		; [PATTERN: Memory clearing operation] 9C 10 07 ; Store zero to $0710.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldx #$1801.w		; A2 01 18 ; Load #$1801.w into X register [Writes: X Index] [Flags: NZ]
	stx DMAP0.w		; 8E 00 43 ; Store X register to DMAP0.w [Reads: X Index]
	stz DMASRC0B.w		; 9C 04 43 ; Store zero to DMASRC0B.w
	lda $1101.w		; AD 01 11 ; Load $1101.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $1100.w		; AD 00 11 ; Load $1100.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$21		; C2 21
	lda $1102.w,Y		; B9 02 11 ; Load $1102.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc #$1104.w		; 69 04 11 ; Add #$1104.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	stx DMALEN0L.w		; 8E 05 43 ; Store X register to DMALEN0L.w [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	lda $1103.w,Y		; B9 03 11 ; Load $1103.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $DE		; 10 DE ; Branch if plus to $10, $DE [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $0710.w		; 9C 10 07 ; Store zero to $0710.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0B.w		; 8D 04 43 ; Store accumulator to DMASRC0B.w [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	lda #$2000.w		; A9 00 20 ; Load #$2000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda #$0080.w		; A9 80 00 ; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $32		; 80 32 ; Branch always to $80, $32 [Flow: branch]
	lda #$8D7F.w		; A9 7F 8D ; Load #$8D7F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $43.b		; 04 43 ; Test and set bits $43.b [Reads: Accumulator] [Flags: Z]
	lda #$8D80.w		; A9 80 8D ; Load #$8D80.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $21.b,X		; 15 21 ; OR accumulator with memory $21.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	lda #$2000.w		; A9 00 20 ; Load #$2000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda #$0040.w		; A9 40 00 ; Load #$0040.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	lda #$8D7F.w		; A9 7F 8D ; Load #$8D7F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $43.b		; 04 43 ; Test and set bits $43.b [Reads: Accumulator] [Flags: Z]
	lda #$8D80.w		; A9 80 8D ; Load #$8D80.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $21.b,X		; 15 21 ; OR accumulator with memory $21.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	lda #$3000.w		; A9 00 30 ; Load #$3000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	lda #$0080.w		; A9 80 00 ; Load #$0080.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$1801.w		; A9 01 18 ; Load #$1801.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; 8D 00 43 ; Store accumulator to DMAP0.w [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$0080.w		; A0 80 00 ; Load #$0080.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7F4000.l,X		; BF 00 40 7F ; Load long $7F4000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	sty DMALEN0L.w		; 8C 05 43 ; Store Y register to DMALEN0L.w [Reads: Y Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	lda $7F4002.l,X		; BF 02 40 7F ; Load long $7F4002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	sty DMALEN0L.w		; 8C 05 43 ; Store Y register to DMALEN0L.w [Reads: Y Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	lda $7F4004.l,X		; BF 04 40 7F ; Load long $7F4004.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	sty DMALEN0L.w		; 8C 05 43 ; Store Y register to DMALEN0L.w [Reads: Y Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	lda $7F4006.l,X		; BF 06 40 7F ; Load long $7F4006.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	sty DMALEN0L.w		; 8C 05 43 ; Store Y register to DMALEN0L.w [Reads: Y Index]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cmp $02.b		; C5 02 ; Compare $02.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $BB		; D0 BB ; Branch if not equal to $D0, $BB [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $0710.w		; 9C 10 07 ; Store zero to $0710.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$1801.w		; A9 01 18 ; Load #$1801.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; 8D 00 43 ; Store accumulator to DMAP0.w [Reads: Accumulator]
	lda $0116.w		; AD 16 01 ; Load $0116.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	ldx #$81.b		; A2 81 ; Load #$81.b into X register [Writes: X Index] [Flags: NZ]
	stx VMAIN.w		; 8E 15 21 ; Store X register to VMAIN.w [Reads: X Index]
	ldx #$7E.b		; A2 7E ; Load #$7E.b into X register [Writes: X Index] [Flags: NZ]
	stx DMASRC0B.w		; 8E 04 43 ; Store X register to DMASRC0B.w [Reads: X Index]
	lda #$C880.w		; A9 80 C8 ; Load #$C880.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	lda #$0040.w		; A9 40 00 ; Load #$0040.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN0L.w		; 8D 05 43 ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
	sta DMALEN0L.w		; 8D 05 43 ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
	lda $0116.w		; AD 16 01 ; Load $0116.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0800.w		; 69 00 08 ; Add #$0800.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	lda #$C8C0.w		; A9 C0 C8 ; Load #$C8C0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $0000.w		; 20 00 00 ; Jump to subroutine at $0000.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	.db $10, $9C		; 10 9C ; Branch if plus to $10, $9C [Flow: branch]
	ora $21.b,X		; 15 21 ; OR accumulator with memory $21.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0B.w		; [PATTERN: Memory clearing operation] 8D 04 43 ; Store accumulator to DMASRC0B.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$1800.w		; A9 00 18 ; Load #$1800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; 8D 00 43 ; Store accumulator to DMAP0.w [Reads: Accumulator]
	stz $04.b		; 64 04 ; Store zero to $04.b
	stz $02.b		; 64 02 ; Store zero to $02.b
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda #$0020.w		; A9 20 00 ; Load #$0020.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $8E4C.w,X		; BD 4C 8E ; Load $8E4C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$C727.w		; 69 27 C7 ; Add #$C727.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	lda #$0020.w		; A9 20 00 ; Load #$0020.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN0L.w		; 8D 05 43 ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $DA		; D0 DA ; Branch if not equal to $D0, $DA [Flow: branch]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	ldx $04.b		; A6 04 ; Load $04.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$08.b		; E0 08 ; Compare #$08.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $C6		; D0 C6 ; Branch if not equal to $D0, $C6 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	sty VMADDL.w		; 8C 16 21 ; Store Y register to VMADDL.w [Reads: Y Index]
	ldy #$1801.w		; A0 01 18 ; Load #$1801.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMAP1.w		; 8C 10 43 ; Store Y register to DMAP1.w [Reads: Y Index]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC1L.w		; 8C 12 43 ; Store Y register to DMASRC1L.w [Reads: Y Index]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC1B.w		; 8D 14 43 ; Store accumulator to DMASRC1B.w [Reads: Accumulator]
	ldy #$0800.w		; A0 00 08 ; Load #$0800.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMALEN1L.w		; 8C 15 43 ; Store Y register to DMALEN1L.w [Reads: Y Index]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	sty DMALEN1L.w		; 8C 15 43 ; Store Y register to DMALEN1L.w [Reads: Y Index]
	ldy #$0800.w		; A0 00 08 ; Load #$0800.w into Y register [Writes: Y Index] [Flags: NZ]
	sty VMADDL.w		; 8C 16 21 ; Store Y register to VMADDL.w [Reads: Y Index]
	ldy #$0800.w		; A0 00 08 ; Load #$0800.w into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC1L.w		; 8C 12 43 ; Store Y register to DMASRC1L.w [Reads: Y Index]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$2C00.w		; A9 00 2C ; Load #$2C00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	ldy #$80.b		; A0 80 ; Load #$80.b into Y register [Writes: Y Index] [Flags: NZ]
	sty VMAIN.w		; 8C 15 21 ; Store Y register to VMAIN.w [Reads: Y Index]
	lda #$1801.w		; A9 01 18 ; Load #$1801.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; 8D 00 43 ; Store accumulator to DMAP0.w [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	ldy #$7F.b		; A0 7F ; Load #$7F.b into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0B.w		; 8C 04 43 ; Store Y register to DMASRC0B.w [Reads: Y Index]
	lda #$1000.w		; A9 00 10 ; Load #$1000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN0L.w		; 8D 05 43 ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	stz $0710.w		; 9C 10 07 ; Store zero to $0710.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$3400.w		; A9 00 34 ; Load #$3400.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	ldy #$80.b		; A0 80 ; Load #$80.b into Y register [Writes: Y Index] [Flags: NZ]
	sty VMAIN.w		; 8C 15 21 ; Store Y register to VMAIN.w [Reads: Y Index]
	lda #$1801.w		; A9 01 18 ; Load #$1801.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; 8D 00 43 ; Store accumulator to DMAP0.w [Reads: Accumulator]
	lda #$1000.w		; A9 00 10 ; Load #$1000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	ldy #$7F.b		; A0 7F ; Load #$7F.b into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0B.w		; 8C 04 43 ; Store Y register to DMASRC0B.w [Reads: Y Index]
	lda #$1000.w		; A9 00 10 ; Load #$1000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN0L.w		; 8D 05 43 ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	stz $0710.w		; 9C 10 07 ; Store zero to $0710.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0116.w		; AD 16 01 ; Load $0116.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDH.w		; 8D 17 21 ; Store accumulator to VMADDH.w [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldx #$0080.w		; A2 80 00 ; Load #$0080.w into X register [Writes: X Index] [Flags: NZ]
	stx VMAIN.w		; 8E 15 21 ; Store X register to VMAIN.w [Reads: X Index]
	ldx #$1801.w		; A2 01 18 ; Load #$1801.w into X register [Writes: X Index] [Flags: NZ]
	stx DMAP0.w		; 8E 00 43 ; Store X register to DMAP0.w [Reads: X Index]
	ldx #$1000.w		; A2 00 10 ; Load #$1000.w into X register [Writes: X Index] [Flags: NZ]
	stx DMASRC0L.w		; 8E 02 43 ; Store X register to DMASRC0L.w [Reads: X Index]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0B.w		; 8D 04 43 ; Store accumulator to DMASRC0B.w [Reads: Accumulator]
	ldx #$0400.w		; A2 00 04 ; Load #$0400.w into X register [Writes: X Index] [Flags: NZ]
	stx DMALEN0L.w		; 8E 05 43 ; Store X register to DMALEN0L.w [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$2000.w		; A9 00 20 ; Load #$2000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $50		; 80 50 ; Branch always to $80, $50 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$2800.w		; A9 00 28 ; Load #$2800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $49		; 80 49 ; Branch always to $80, $49 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$3000.w		; A9 00 30 ; Load #$3000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $42		; 80 42 ; Branch always to $80, $42 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$3800.w		; A9 00 38 ; Load #$3800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $3B		; 80 3B ; Branch always to $80, $3B [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$4400.w		; A9 00 44 ; Load #$4400.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	ldy #$80.b		; A0 80 ; Load #$80.b into Y register [Writes: Y Index] [Flags: NZ]
	sty VMAIN.w		; 8C 15 21 ; Store Y register to VMAIN.w [Reads: Y Index]
	lda #$1801.w		; A9 01 18 ; Load #$1801.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; 8D 00 43 ; Store accumulator to DMAP0.w [Reads: Accumulator]
	ldy #$7F.b		; A0 7F ; Load #$7F.b into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0B.w		; 8C 04 43 ; Store Y register to DMASRC0B.w [Reads: Y Index]
	lda #$0800.w		; A9 00 08 ; Load #$0800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN0L.w		; 8D 05 43 ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	stz $0710.w		; 9C 10 07 ; Store zero to $0710.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$5000.w		; A9 00 50 ; Load #$5000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$5800.w		; A9 00 58 ; Load #$5800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	ldy #$80.b		; A0 80 ; Load #$80.b into Y register [Writes: Y Index] [Flags: NZ]
	sty VMAIN.w		; 8C 15 21 ; Store Y register to VMAIN.w [Reads: Y Index]
	lda #$1801.w		; A9 01 18 ; Load #$1801.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; 8D 00 43 ; Store accumulator to DMAP0.w [Reads: Accumulator]
	ldy #$7F.b		; A0 7F ; Load #$7F.b into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0B.w		; 8C 04 43 ; Store Y register to DMASRC0B.w [Reads: Y Index]
	lda #$1000.w		; A9 00 10 ; Load #$1000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN0L.w		; 8D 05 43 ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
	ldy #$01.b		; [PATTERN: Memory clearing operation] A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	stz $0710.w		; 9C 10 07 ; Store zero to $0710.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz VMAIN.w		; 9C 15 21 ; Store zero to VMAIN.w
	stz DMASRC0B.w		; [PATTERN: Memory clearing operation] 9C 04 43 ; Store zero to DMASRC0B.w
.ACCU 16
	rep #$20		; C2 20
	lda #$1800.w		; A9 00 18 ; Load #$1800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; 8D 00 43 ; Store accumulator to DMAP0.w [Reads: Accumulator]
	stz $02.b		; 64 02 ; Store zero to $02.b
	lda #$0020.w		; A9 20 00 ; Load #$0020.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda #$0810.w		; A9 10 08 ; Load #$0810.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0080.w		; 69 80 00 ; Add #$0080.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$1000.w		; 69 00 10 ; Add #$1000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	lda #$0020.w		; A9 20 00 ; Load #$0020.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN0L.w		; 8D 05 43 ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $DA		; D0 DA ; Branch if not equal to $D0, $DA [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$7800.w		; A9 00 78 ; Load #$7800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	lda #$2000.w		; A9 00 20 ; Load #$2000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	ldy #$80.b		; A0 80 ; Load #$80.b into Y register [Writes: Y Index] [Flags: NZ]
	sty VMAIN.w		; 8C 15 21 ; Store Y register to VMAIN.w [Reads: Y Index]
	lda #$1801.w		; A9 01 18 ; Load #$1801.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; 8D 00 43 ; Store accumulator to DMAP0.w [Reads: Accumulator]
	ldy #$7E.b		; A0 7E ; Load #$7E.b into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0B.w		; 8C 04 43 ; Store Y register to DMASRC0B.w [Reads: Y Index]
	lda #$0800.w		; A9 00 08 ; Load #$0800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN0L.w		; 8D 05 43 ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
	lda #$7D00.w		; A9 00 7D ; Load #$7D00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	lda #$3400.w		; A9 00 34 ; Load #$3400.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; 8D 02 43 ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	ldy #$80.b		; A0 80 ; Load #$80.b into Y register [Writes: Y Index] [Flags: NZ]
	sty VMAIN.w		; 8C 15 21 ; Store Y register to VMAIN.w [Reads: Y Index]
	lda #$1801.w		; A9 01 18 ; Load #$1801.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; 8D 00 43 ; Store accumulator to DMAP0.w [Reads: Accumulator]
	ldy #$7E.b		; A0 7E ; Load #$7E.b into Y register [Writes: Y Index] [Flags: NZ]
	sty DMASRC0B.w		; 8C 04 43 ; Store Y register to DMASRC0B.w [Reads: Y Index]
	lda #$0600.w		; A9 00 06 ; Load #$0600.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN0L.w		; 8D 05 43 ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	sty MDMAEN.w		; 8C 0B 42 ; Store Y register to MDMAEN.w [Reads: Y Index]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldx #$3D00.w		; A2 00 3D ; Load #$3D00.w into X register [Writes: X Index] [Flags: NZ]
	stx VMADDL.w		; 8E 16 21 ; Store X register to VMADDL.w [Reads: X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
	ldx #$1801.w		; A2 01 18 ; Load #$1801.w into X register [Writes: X Index] [Flags: NZ]
	stx DMAP0.w		; 8E 00 43 ; Store X register to DMAP0.w [Reads: X Index]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	stx DMASRC0L.w		; 8E 02 43 ; Store X register to DMASRC0L.w [Reads: X Index]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0B.w		; 8D 04 43 ; Store accumulator to DMASRC0B.w [Reads: Accumulator]
	ldx #$0100.w		; A2 00 01 ; Load #$0100.w into X register [Writes: X Index] [Flags: NZ]
	stx DMALEN0L.w		; 8E 05 43 ; Store X register to DMALEN0L.w [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.INDEX 16
	rep #$10		; C2 10
	ldx #$3ED0.w		; A2 D0 3E ; Load #$3ED0.w into X register [Writes: X Index] [Flags: NZ]
	stx VMADDL.w		; 8E 16 21 ; Store X register to VMADDL.w [Reads: X Index]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
	ldx #$1801.w		; A2 01 18 ; Load #$1801.w into X register [Writes: X Index] [Flags: NZ]
	stx DMAP0.w		; 8E 00 43 ; Store X register to DMAP0.w [Reads: X Index]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	stx DMASRC0L.w		; 8E 02 43 ; Store X register to DMASRC0L.w [Reads: X Index]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0B.w		; 8D 04 43 ; Store accumulator to DMASRC0B.w [Reads: Accumulator]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	stx DMALEN0L.w		; 8E 05 43 ; Store X register to DMALEN0L.w [Reads: X Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8CB0.w		; 20 B0 8C ; Jump to subroutine at $8CB0.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8D13.w		; 20 13 8D ; Jump to subroutine at $8D13.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $937A.w,Y		; B9 7A 93 ; Load $937A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $9383.w,Y		; B9 83 93 ; Load $9383.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $938C.w,Y		; B9 8C 93 ; Load $938C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	jsr L0012A1.w		; 20 A1 92 ; Jump to subroutine at L0012A1.w [Writes: Stack Pointer] [Flow: call]
	lda $14.b		; [PATTERN: Memory clearing operation] A5 14 ; Load $14.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	stz $1000.w		; 9C 00 10 ; Store zero to $1000.w
	stz $1001.w		; 9C 01 10 ; Store zero to $1001.w
	stz $14.b		; 64 14 ; Store zero to $14.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	ora $09.b		; 05 09 ; Logical OR $09.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0602.w		; 0D 02 06 ; Logical OR $0602.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $0703.w		; 0E 03 07 ; Arithmetic shift left $0703.w [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $0C0804.l		; 0F 04 08 0C ; OR accumulator with memory (long) $0C0804.l [Writes: Accumulator] [Flags: NZ]
	.db $10, $C2		; 10 C2 ; Branch if plus to $10, $C2 [Flow: branch]
	and ($AD.b),Y		; 31 AD ; AND accumulator with memory ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tsb $29.b		; 04 29 ; Test and set bits $29.b [Reads: Accumulator] [Flags: Z]
	ora $5C6D00.l		; 0F 00 6D 5C ; OR accumulator with memory (long) $5C6D00.l [Writes: Accumulator] [Flags: NZ]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $910F.w,Y		; BE 0F 91 ; Load X register $910F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0099.w,X		; 7E 99 00 ; Rotate right $0099.w,X [Reads: X Index] [Flags: NCZ]
	.db $10, $BF		; 10 BF ; Branch if plus to $10, $BF [Flow: branch]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0299.w,X		; 7E 99 02 ; Rotate right $0299.w,X [Reads: X Index] [Flags: NCZ]
	.db $10, $BF		; 10 BF ; Branch if plus to $10, $BF [Flow: branch]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	ror $4099.w,X		; 7E 99 40 ; Rotate right $4099.w,X [Reads: X Index] [Flags: NCZ]
	.db $10, $BF		; 10 BF ; Branch if plus to $10, $BF [Flow: branch]
	.db $82, $20, $7E		; 82 20 7E ; Branch always long to $82, $20, $7E [Flow: branch]
	sta $1042.w,Y		; 99 42 10 ; Store accumulator to $1042.w,Y [Reads: Y Index, Accumulator]
	lda $7E2100.l,X		; BF 00 21 7E ; Load long $7E2100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1080.w,Y		; 99 80 10 ; Store accumulator to $1080.w,Y [Reads: Y Index, Accumulator]
	lda $7E2102.l,X		; BF 02 21 7E ; Load long $7E2102.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1082.w,Y		; 99 82 10 ; Store accumulator to $1082.w,Y [Reads: Y Index, Accumulator]
	lda $7E2180.l,X		; BF 80 21 7E ; Load long $7E2180.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $10C0.w,Y		; 99 C0 10 ; Store accumulator to $10C0.w,Y [Reads: Y Index, Accumulator]
	lda $7E2182.l,X		; BF 82 21 7E ; Load long $7E2182.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $10C2.w,Y		; 99 C2 10 ; Store accumulator to $10C2.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$C0.b		; 69 C0 ; Add #$C0.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$C0.b		; 69 C0 ; Add #$C0.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora ($AA.b,X)		; 01 AA ; Logical OR ($AA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $D0, $A9		; D0 A9 ; Branch if not equal to $D0, $A9 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $045C.w		; AD 5C 04 ; Load $045C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $045C.w		; 8D 5C 04 ; Store accumulator to $045C.w [Reads: Accumulator]
	lda $912F.w,X		; BD 2F 91 ; Load $912F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $AE.b		; A5 AE ; Load $AE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$19.b		; C9 19 ; Compare #$19.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $0405.w		; AD 05 04 ; Load $0405.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $0098C1.l		; 2F C1 98 00 ; AND accumulator with memory (long) $0098C1.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $7F		; F0 7F ; Branch if equal to $F0, $7F [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	lda $0418.w		; AD 18 04 ; Load $0418.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $045C.w		; 6D 5C 04 ; Add $045C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $910F.w,Y		; BE 0F 91 ; Load X register $910F.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7E4000.l,X		; BF 00 40 7E ; Load long $7E4000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1000.w,Y		; 99 00 10 ; Store accumulator to $1000.w,Y [Reads: Y Index, Accumulator]
	lda $7E4002.l,X		; BF 02 40 7E ; Load long $7E4002.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Y Index, Accumulator]
	lda $7E4080.l,X		; BF 80 40 7E ; Load long $7E4080.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1040.w,Y		; 99 40 10 ; Store accumulator to $1040.w,Y [Reads: Y Index, Accumulator]
	lda $7E4082.l,X		; BF 82 40 7E ; Load long $7E4082.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1042.w,Y		; 99 42 10 ; Store accumulator to $1042.w,Y [Reads: Y Index, Accumulator]
	lda $7E4100.l,X		; BF 00 41 7E ; Load long $7E4100.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1080.w,Y		; 99 80 10 ; Store accumulator to $1080.w,Y [Reads: Y Index, Accumulator]
	lda $7E4102.l,X		; BF 02 41 7E ; Load long $7E4102.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1082.w,Y		; 99 82 10 ; Store accumulator to $1082.w,Y [Reads: Y Index, Accumulator]
	lda $7E4180.l,X		; BF 80 41 7E ; Load long $7E4180.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $10C0.w,Y		; 99 C0 10 ; Store accumulator to $10C0.w,Y [Reads: Y Index, Accumulator]
	lda $7E4182.l,X		; BF 82 41 7E ; Load long $7E4182.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $10C2.w,Y		; 99 C2 10 ; Store accumulator to $10C2.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $BA		; D0 BA ; Branch if not equal to $D0, $BA [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00C0.w		; 69 C0 00 ; Add #$00C0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01C0.w		; 69 C0 01 ; Add #$01C0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cpy #$0800.w		; C0 00 08 ; Compare #$0800.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $A9		; D0 A9 ; Branch if not equal to $D0, $A9 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $912F.w,X		; BD 2F 91 ; Load $912F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldx #$00F0.w		; A2 F0 00 ; Load #$00F0.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $9B52.w,X		; BD 52 9B ; Load $9B52.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1000.w,Y		; 99 00 10 ; Store accumulator to $1000.w,Y [Reads: Y Index, Accumulator]
	sta $1002.w,Y		; 99 02 10 ; Store accumulator to $1002.w,Y [Reads: Y Index, Accumulator]
	sta $1040.w,Y		; 99 40 10 ; Store accumulator to $1040.w,Y [Reads: Y Index, Accumulator]
	sta $1042.w,Y		; 99 42 10 ; Store accumulator to $1042.w,Y [Reads: Y Index, Accumulator]
	sta $1080.w,Y		; 99 80 10 ; Store accumulator to $1080.w,Y [Reads: Y Index, Accumulator]
	sta $1082.w,Y		; 99 82 10 ; Store accumulator to $1082.w,Y [Reads: Y Index, Accumulator]
	sta $10C0.w,Y		; 99 C0 10 ; Store accumulator to $10C0.w,Y [Reads: Y Index, Accumulator]
	sta $10C2.w,Y		; 99 C2 10 ; Store accumulator to $10C2.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $DB		; D0 DB ; Branch if not equal to $D0, $DB [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00C0.w		; 69 C0 00 ; Add #$00C0.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cpy #$0800.w		; C0 00 08 ; Compare #$0800.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $D0		; D0 D0 ; Branch if not equal to $D0, $D0 [Flow: branch]
	lda $0418.w		; AD 18 04 ; Load $0418.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $045C.w		; 6D 5C 04 ; Add $045C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $912F.w,X		; BD 2F 91 ; Load $912F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0116.w		; 8D 16 01 ; Store accumulator to $0116.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L0012A1:
.INDEX 16
	rep #$10
	sta DMASRC1B.w		; DMA 1 Source Address Bank ; Store accumulator to DMASRC1B.w [Reads: Accumulator]
	stz $06.b		; Store zero to $06.b
	ldy #$0000.w		; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; Invalid branch target (bpl L0012B2) ; Branch if plus to $10, $03 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$01.b		; 09 01 ; Logical OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP1.w		; 8D 10 43 ; Store accumulator to DMAP1.w [Reads: Accumulator]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMADEST1.w		; 8D 11 43 ; Store accumulator to DMADEST1.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$3FFF.w		; 29 FF 3F ; Logical AND #$3FFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx DMALEN1L.w		; 8E 15 43 ; Store X register to DMALEN1L.w [Reads: X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta DMASRC1L.w		; 8D 12 43 ; Store accumulator to DMASRC1L.w [Reads: Accumulator]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $34		; F0 34 ; Branch if equal to $F0, $34 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx DMALEN1L.w		; 8E 15 43 ; Store X register to DMALEN1L.w [Reads: X Index]
.ACCU 8
	sep #$20		; E2 20
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta DMAP1.w		; 8D 10 43 ; Store accumulator to DMAP1.w [Reads: Accumulator]
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMADEST1.w		; 8D 11 43 ; Store accumulator to DMADEST1.w [Reads: Accumulator]
.ACCU 16
	rep #$21		; C2 21
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta DMASRC1L.w		; 8D 12 43 ; Store accumulator to DMASRC1L.w [Reads: Accumulator]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	stx DMALEN1L.w		; 8E 15 43 ; Store X register to DMALEN1L.w [Reads: X Index]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	brk $86.b		; 00 86 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $98.b,S		; 03 98 ; OR accumulator with stack relative $98.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $03.b		; 65 03 ; Add $03.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $07.b		; A5 07 ; Load $07.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; 8D 0B 42 ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	jmp $92B2.w		; 4C B2 92 ; Jump to $92B2.w [Flow: jump]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

L001347:
	lda $1F0C.w		; Load $1F0C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	beq L00137A.b		; Branch if equal to L00137A.b [Flow: branch]
	lda #$80.b		; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; Video Port Control ; Store accumulator to VMAIN.w [Reads: Accumulator]
.ACCU 16
	rep #$20
	lda #$5800.w		; Load #$5800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; VRAM Address Low Byte ; Store accumulator to VMADDL.w [Reads: Accumulator]
L001359:
	lda #$1801.w		; Load #$1801.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP0.w		; DMA 0 Control ; Store accumulator to DMAP0.w [Reads: Accumulator]
L00135F:
	lda #$E800.w		; Load #$E800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMASRC0L.w		; DMA 0 Source Adress Low Byte ; Store accumulator to DMASRC0L.w [Reads: Accumulator]
	ldx #$7E.b		; Load #$7E.b into X register [Writes: X Index] [Flags: NZ]
	stx DMASRC0B.w		; DMA 0 Source Address Bank ; Store X register to DMASRC0B.w [Reads: X Index]
	lda #$0800.w		; Load #$0800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMALEN0L.w		; DMA 0 Transfer Size Low Byte ; Store accumulator to DMALEN0L.w [Reads: Accumulator]
.ACCU 8
	sep #$20
	lda #$01.b		; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta MDMAEN.w		; DMA Channel Enable ; Store accumulator to MDMAEN.w [Reads: Accumulator]
	stz $1F0C.w		; Store zero to $1F0C.w
L00137A:
	rts		; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $BF1B.w		; 6D 1B BF ; Add $BF1B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	bit $9C56.w,X		; 3C 56 9C ; Test bits $9C56.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	cmp $E702.w,X		; DD 02 E7 ; Compare accumulator $E702.w,X [Reads: X Index] [Flags: NCZ]
.ACCU 8
	sep #$E6		; E2 E6
	cpx $DA.b		; E4 DA ; Compare $DA.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0C00.w		; 0C 00 0C ; Test and set bits $0C00.w [Reads: Accumulator] [Flags: Z]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	asl $8080.w		; 0E 80 80 ; Arithmetic shift left $8080.w [Flags: NCZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	sty $80.b,X		; 94 80 ; Store Y register $80.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	sty $40.b,X		; 94 40 ; Store Y register $40.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	bra L001359.b		; 80 80 ; Branch always to L001359.b [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	bra L00135F.b		; 80 80 ; Branch always to L00135F.b [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$A8.b		; C0 A8 ; Compare #$A8.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bra L00137A.b		; 80 80 ; Branch always to L00137A.b [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	cpy #$90.b		; C0 90 ; Compare #$90.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sta ($80.b),Y		; 91 80 ; Store accumulator ($80.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($00.b),Y		; 91 00 ; Store accumulator ($00.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	sty $C0.b,X		; 94 C0 ; Store Y register $C0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $C0.b,X		; 94 C0 ; Store Y register $C0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $E0.b,X		; 94 E0 ; Store Y register $E0.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	ldy #$9A.b		; A0 9A ; Load #$9A.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$9A.b		; A0 9A ; Load #$9A.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$85.b		; C0 85 ; Compare #$85.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$85.b		; C0 85 ; Compare #$85.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$AD.b		; C0 AD ; Compare #$AD.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$AD.b		; C0 AD ; Compare #$AD.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$AD.b		; C0 AD ; Compare #$AD.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$AD.b		; C0 AD ; Compare #$AD.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$AD.b		; C0 AD ; Compare #$AD.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda $AD40.w		; AD 40 AD ; Load $AD40.w into accumulator [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda $AD40.w		; AD 40 AD ; Load $AD40.w into accumulator [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda $AD80.w		; AD 80 AD ; Load $AD80.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $AD		; 80 AD ; Branch always to $80, $AD [Flow: branch]
	.db $80, $AD		; 80 AD ; Branch always to $80, $AD [Flow: branch]
	.db $80, $AD		; 80 AD ; Branch always to $80, $AD [Flow: branch]
	.db $80, $AD		; 80 AD ; Branch always to $80, $AD [Flow: branch]
	.db $80, $AD		; 80 AD ; Branch always to $80, $AD [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	sty $40.b,X		; 94 40 ; Store Y register $40.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	sty $00.b,X		; 94 00 ; Store Y register $00.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	cpy $40.b		; C4 40 ; Compare $40.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	sta ($40.b,X)		; 81 40 ; Store accumulator ($40.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($40.b,X)		; 81 40 ; Store accumulator ($40.b,X) [Reads: Direct Page, Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta ($C0.b,X)		; 81 C0 ; Store accumulator ($C0.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	sta ($80.b),Y		; 91 80 ; Store accumulator ($80.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	sta ($C0.b),Y		; 91 C0 ; Store accumulator ($C0.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($C0.b,X)		; A1 C0 ; Load accumulator ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $40.b		; A4 40 ; Load $40.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $C0.b		; A4 C0 ; Load $C0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda ($00.b,X)		; A1 00 ; Load accumulator ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $40.b		; A4 40 ; Load $40.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $80.b		; A4 80 ; Load $80.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	cpy $80.b		; C4 80 ; Compare $80.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $80, $CA		; 80 CA ; Branch always to $80, $CA [Flow: branch]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$81.b		; C0 81 ; Compare #$81.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$A8.b		; C0 A8 ; Compare #$A8.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$A8.b		; C0 A8 ; Compare #$A8.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$A8.b		; C0 A8 ; Compare #$A8.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $D0, $80		; D0 80 ; Branch if not equal to $D0, $80 [Flow: branch]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	.db $D0, $80		; D0 80 ; Branch if not equal to $D0, $80 [Flow: branch]
	.db $90, $40		; 90 40 ; Branch if carry clear to $90, $40 [Flow: branch]
	.db $D0, $80		; D0 80 ; Branch if not equal to $D0, $80 [Flow: branch]
	.db $90, $40		; 90 40 ; Branch if carry clear to $90, $40 [Flow: branch]
	.db $D0, $80		; D0 80 ; Branch if not equal to $D0, $80 [Flow: branch]
	.db $D0, $80		; D0 80 ; Branch if not equal to $D0, $80 [Flow: branch]
	.db $D0, $80		; D0 80 ; Branch if not equal to $D0, $80 [Flow: branch]
	.db $D0, $80		; D0 80 ; Branch if not equal to $D0, $80 [Flow: branch]
	.db $D0, $80		; D0 80 ; Branch if not equal to $D0, $80 [Flow: branch]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $D0, $C0		; D0 C0 ; Branch if not equal to $D0, $C0 [Flow: branch]
	sta $C0.b		; 85 C0 ; Store accumulator to $C0.b [Reads: Accumulator]
	sta $C0.b		; 85 C0 ; Store accumulator to $C0.b [Reads: Accumulator]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	jmp.w [$DC40]		; DC 40 DC ; Jump long indirect [$DC40] [Flow: jump]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jmp.w [$85C0]		; DC C0 85 ; Jump long indirect [$85C0] [Flow: jump]
	cpy #$85.b		; C0 85 ; Compare #$85.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$85.b		; C0 85 ; Compare #$85.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jmp.w [$DC40]		; DC 40 DC ; Jump long indirect [$DC40] [Flow: jump]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jmp.w [$E1C0]		; DC C0 E1 ; Jump long indirect [$E1C0] [Flow: jump]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpx $C0.b		; E4 C0 ; Compare $C0.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $90, $C0		; 90 C0 ; Branch if carry clear to $90, $C0 [Flow: branch]
	.db $90, $00		; 90 00 ; Branch if carry clear to $90, $00 [Flow: branch]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $00.b		; E4 00 ; Compare $00.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx $80.b		; E4 80 ; Compare $80.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $90, $C0		; 90 C0 ; Branch if carry clear to $90, $C0 [Flow: branch]
	lda $40.b		; A5 40 ; Load $40.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $E480.w		; AC 80 E4 ; Load $E480.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $81		; 80 81 ; Branch always to $80, $81 [Flow: branch]
	cpy #$90.b		; C0 90 ; Compare #$90.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$80.b		; C0 80 ; Compare #$80.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $E1		; 80 E1 ; Branch always to $80, $E1 [Flow: branch]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$E4.b		; C0 E4 ; Compare #$E4.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$E4.b		; C0 E4 ; Compare #$E4.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc $40.b		; E5 40 ; Subtract $40.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $40.b		; E5 40 ; Subtract $40.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$80.b		; E9 80 ; Subtract #$80.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	sta ($C0.b,X)		; 81 C0 ; Store accumulator ($C0.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($40.b),Y		; 91 40 ; Store accumulator ($40.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $85		; 80 85 ; Branch always to $80, $85 [Flow: branch]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $85		; 80 85 ; Branch always to $80, $85 [Flow: branch]
	cpy #$84.b		; C0 84 ; Compare #$84.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sty $40.b		; 84 40 ; Store Y register to $40.b [Reads: Y Index]
	sty $80.b		; 84 80 ; Store Y register to $80.b [Reads: Y Index]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	sty $40.b		; 84 40 ; Store Y register to $40.b [Reads: Y Index]
	sty $80.b		; 84 80 ; Store Y register to $80.b [Reads: Y Index]
	sty $40.b		; 84 40 ; Store Y register to $40.b [Reads: Y Index]
	stx $40.b,Y		; 96 40 ; Store X register $40.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sty $8C80.w		; 8C 80 8C ; Store Y register to $8C80.w [Reads: Y Index]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $89		; 80 89 ; Branch always to $80, $89 [Flow: branch]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$AC.b		; C0 AC ; Compare #$AC.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $88		; 80 88 ; Branch always to $80, $88 [Flow: branch]
	cpy #$88.b		; C0 88 ; Compare #$88.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	bit #$80.b		; 89 80 ; Test bits #$80.b with accumulator [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$88.b		; C0 88 ; Compare #$88.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	bit #$C0.b		; 89 C0 ; Test bits #$C0.b with accumulator [Reads: Accumulator] [Flags: Z]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	lda ($40.b),Y		; B1 40 ; Load accumulator ($40.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($40.b),Y		; B1 40 ; Load accumulator ($40.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $40		; B0 40 ; Branch if carry set to $B0, $40 [Flow: branch]
	.db $B0, $80		; B0 80 ; Branch if carry set to $B0, $80 [Flow: branch]
	.db $B0, $80		; B0 80 ; Branch if carry set to $B0, $80 [Flow: branch]
	cpx $ECC0.w		; EC C0 EC ; Compare $ECC0.w with X register [Reads: X Index] [Flags: NCZ]
	.db $80, $B1		; 80 B1 ; Branch always to $80, $B1 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	pei ($C0.b)		; D4 C0 ; Push effective indirect address ($C0.b) [Reads: Direct Page] [Writes: Stack Pointer]
	lda ($80.b),Y		; B1 80 ; Load accumulator ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($40.b),Y		; B1 40 ; Load accumulator ($40.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pei ($C0.b)		; D4 C0 ; Push effective indirect address ($C0.b) [Reads: Direct Page] [Writes: Stack Pointer]
	lda ($80.b),Y		; B1 80 ; Load accumulator ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sty $AD00.w		; 8C 00 AD ; Store Y register to $AD00.w [Reads: Y Index]
	cpy #$95.b		; C0 95 ; Compare #$95.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$99.b		; C0 99 ; Compare #$99.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy $80.b,X		; B4 80 ; Load Y register $80.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ldy $C0.b,X		; B4 C0 ; Load Y register $C0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $80.b,X		; B4 80 ; Load Y register $80.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ldy $C0.b,X		; B4 C0 ; Load Y register $C0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	ldy $20.b,X		; B4 20 ; Load Y register $20.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	stz $8000.w		; 9C 00 80 ; Store zero to $8000.w
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $97.b		; 00 97 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $96		; 80 96 ; Branch always to $80, $96 [Flow: branch]
	cpy #$96.b		; C0 96 ; Compare #$96.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$96.b		; C0 96 ; Compare #$96.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpx #$9C.b		; E0 9C ; Compare #$9C.b with X register [Reads: X Index] [Flags: NCZ]
	.db $80, $8C		; 80 8C ; Branch always to $80, $8C [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda $60.b,X		; B5 60 ; Load $60.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	stz $B580.w		; 9C 80 B5 ; Store zero to $B580.w
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$9C.b		; A0 9C ; Load #$9C.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B5.b		; 00 B5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy #$9C.b		; A0 9C ; Load #$9C.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B5.b		; 00 B5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sty $EC40.w		; 8C 40 EC ; Store Y register to $EC40.w [Reads: Y Index]
	brk $8C.b		; 00 8C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EC.b		; 00 EC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$8D.b		; C0 8D ; Compare #$8D.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sta $C0.b,X		; 95 C0 ; Store accumulator to $C0.b,X [Reads: Accumulator, X Index]
	bit #$C0.b		; 89 C0 ; Test bits #$C0.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta $9540.w		; 8D 40 95 ; Store accumulator to $9540.w [Reads: Accumulator]
	cpy #$89.b		; C0 89 ; Compare #$89.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda $B980.w,Y		; B9 80 B9 ; Load $B980.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$B9.b		; C0 B9 ; Compare #$B9.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $B9		; 80 B9 ; Branch always to $80, $B9 [Flow: branch]
	cpy #$B9.b		; C0 B9 ; Compare #$B9.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$B5.b		; C0 B5 ; Compare #$B5.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clv		; B8 ; Clear overflow flag [Flags: V]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	clv		; B8 ; Clear overflow flag [Flags: V]
	.db $80, $B8		; 80 B8 ; Branch always to $80, $B8 [Flow: branch]
	cpy #$B8.b		; C0 B8 ; Compare #$B8.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $B8		; 80 B8 ; Branch always to $80, $B8 [Flow: branch]
	cpy #$B8.b		; C0 B8 ; Compare #$B8.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $89		; 80 89 ; Branch always to $80, $89 [Flow: branch]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$BC.b		; C0 BC ; Compare #$BC.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $BC		; 80 BC ; Branch always to $80, $BC [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sty $9640.w		; 8C 40 96 ; Store Y register to $9640.w [Reads: Y Index]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ldy #$80.b		; A0 80 ; Load #$80.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy $BD40.w,X		; BC 40 BD ; Load Y register $BD40.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $BD		; 80 BD ; Branch always to $80, $BD [Flow: branch]
	.db $80, $BD		; 80 BD ; Branch always to $80, $BD [Flow: branch]
	cpy #$88.b		; C0 88 ; Compare #$88.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$E9.b		; C0 E9 ; Compare #$E9.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	dec $40.b		; C6 40 ; Decrement $40.b [Reads: Direct Page] [Flags: NZ]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy $8940.w		; CC 40 89 ; Compare $8940.w with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$88.b		; C0 88 ; Compare #$88.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$E9.b		; C0 E9 ; Compare #$E9.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $89.b		; 00 89 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	bit #$40.b		; 89 40 ; Test bits #$40.b with accumulator [Reads: Accumulator] [Flags: Z]
	sta $8D80.w		; 8D 80 8D ; Store accumulator to $8D80.w [Reads: Accumulator]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sta $8D80.w		; 8D 80 8D ; Store accumulator to $8D80.w [Reads: Accumulator]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $A4		; 80 A4 ; Branch always to $80, $A4 [Flow: branch]
	.db $80, $A4		; 80 A4 ; Branch always to $80, $A4 [Flow: branch]
	.db $80, $A4		; 80 A4 ; Branch always to $80, $A4 [Flow: branch]
	.db $80, $A4		; 80 A4 ; Branch always to $80, $A4 [Flow: branch]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda ($80.b,X)		; A1 80 ; Load accumulator ($80.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($80.b,X)		; A1 80 ; Load accumulator ($80.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($C0.b,X)		; A1 C0 ; Load accumulator ($C0.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $C0.b		; A4 C0 ; Load $C0.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldy $00.b		; A4 00 ; Load $00.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $40.b		; A5 40 ; Load $40.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $9D80.w,X		; 9D 80 9D ; Store accumulator to $9D80.w,X [Reads: Accumulator, X Index]
	cpy #$9D.b		; C0 9D ; Compare #$9D.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sta $9D80.w,X		; 9D 80 9D ; Store accumulator to $9D80.w,X [Reads: Accumulator, X Index]
	cpy #$9D.b		; C0 9D ; Compare #$9D.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $C6		; 80 C6 ; Branch always to $80, $C6 [Flow: branch]
	.db $80, $C1		; 80 C1 ; Branch always to $80, $C1 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cmp ($00.b,X)		; C1 00 ; Compare accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	sty $CC80.w		; 8C 80 CC ; Store Y register to $CC80.w [Reads: Y Index]
	.db $80, $CC		; 80 CC ; Branch always to $80, $CC [Flow: branch]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CC.b		; 00 CC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $85		; 80 85 ; Branch always to $80, $85 [Flow: branch]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$C9.b		; C0 C9 ; Compare #$C9.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$CC.b		; C0 CC ; Compare #$CC.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$CD.b		; C0 CD ; Compare #$CD.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $CD.b		; 00 CD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cmp $CD80.w		; CD 80 CD ; Compare $CD80.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	sty $80.b		; 84 80 ; Store Y register to $80.b [Reads: Y Index]
	sty $C0.b		; 84 C0 ; Store Y register to $C0.b [Reads: Y Index]
	cmp ($00.b,X)		; C1 00 ; Compare accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $C0.b		; C5 C0 ; Compare $C0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $C0.b		; C5 C0 ; Compare $C0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sty $80.b		; 84 80 ; Store Y register to $80.b [Reads: Y Index]
	sty $C0.b		; 84 C0 ; Store Y register to $C0.b [Reads: Y Index]
	cmp ($00.b,X)		; C1 00 ; Compare accumulator ($00.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp $C0.b		; C5 C0 ; Compare $C0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $C0.b		; C5 C0 ; Compare $C0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$AC.b		; C0 AC ; Compare #$AC.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: NCZ]
	cmp $80.b,X		; D5 80 ; Compare accumulator $80.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $C0.b,X		; D5 C0 ; Compare accumulator $C0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	pei ($00.b)		; D4 00 ; Push effective indirect address ($00.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $C0.b,X		; D5 C0 ; Compare accumulator $C0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	pei ($00.b)		; D4 00 ; Push effective indirect address ($00.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp $40.b,X		; D5 40 ; Compare accumulator $40.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	pei ($80.b)		; D4 80 ; Push effective indirect address ($80.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($40.b)		; D4 40 ; Push effective indirect address ($40.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($80.b)		; D4 80 ; Push effective indirect address ($80.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($C0.b)		; D4 C0 ; Push effective indirect address ($C0.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($00.b),Y		; D1 00 ; Compare accumulator ($00.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	pei ($00.b)		; D4 00 ; Push effective indirect address ($00.b) [Reads: Direct Page] [Writes: Stack Pointer]
	cmp ($00.b),Y		; D1 00 ; Compare accumulator ($00.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($40.b),Y		; D1 40 ; Compare accumulator ($40.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($80.b),Y		; D1 80 ; Compare accumulator ($80.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($40.b),Y		; D1 40 ; Compare accumulator ($40.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($80.b),Y		; D1 80 ; Compare accumulator ($80.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($C0.b),Y		; D1 C0 ; Compare accumulator ($C0.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	.db $B0, $00		; B0 00 ; Branch if carry set to $B0, $00 [Flow: branch]
	lda ($40.b),Y		; B1 40 ; Load accumulator ($40.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($00.b),Y		; B1 00 ; Load accumulator ($00.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($40.b),Y		; B1 40 ; Load accumulator ($40.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($40.b),Y		; B1 40 ; Load accumulator ($40.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $DD80.w,X		; DD 80 DD ; Compare accumulator $DD80.w,X [Reads: X Index] [Flags: NCZ]
	cpy #$DD.b		; C0 DD ; Compare #$DD.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $DD		; 80 DD ; Branch always to $80, $DD [Flow: branch]
	cpy #$DD.b		; C0 DD ; Compare #$DD.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $DC		; 80 DC ; Branch always to $80, $DC [Flow: branch]
	cpy #$DC.b		; C0 DC ; Compare #$DC.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $DC		; 80 DC ; Branch always to $80, $DC [Flow: branch]
	cpy #$DC.b		; C0 DC ; Compare #$DC.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D1.b		; 00 D1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D1.b		; 00 D1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$C0.b		; E0 C0 ; Compare #$C0.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($40.b,X)		; E1 40 ; Subtract with carry ($40.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$40.b		; E0 40 ; Compare #$40.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$80.b		; E0 80 ; Compare #$80.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$C0.b		; E0 C0 ; Compare #$C0.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($40.b,X)		; E1 40 ; Subtract with carry ($40.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($00.b,X)		; E1 00 ; Subtract with carry ($00.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $C0		; 80 C0 ; Branch always to $80, $C0 [Flow: branch]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	lda $B980.w,Y		; B9 80 B9 ; Load $B980.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda $DD40.w,Y		; B9 40 DD ; Load $DD40.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $DD		; 80 DD ; Branch always to $80, $DD [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	cmp $DC80.w,X		; DD 80 DC ; Compare accumulator $DC80.w,X [Reads: X Index] [Flags: NCZ]
	cpy #$DC.b		; C0 DC ; Compare #$DC.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $DC		; 80 DC ; Branch always to $80, $DC [Flow: branch]
	cpy #$DC.b		; C0 DC ; Compare #$DC.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$C0.b		; C0 C0 ; Compare #$C0.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$B9.b		; C0 B9 ; Compare #$B9.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $80, $B9		; 80 B9 ; Branch always to $80, $B9 [Flow: branch]
	cpy #$B9.b		; C0 B9 ; Compare #$B9.b with Y register [Reads: Y Index] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $80.b		; A5 80 ; Load $80.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $ED00.w		; AC 00 ED ; Load $ED00.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$8C.b		; C0 8C ; Compare #$8C.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $E3		; 80 E3 ; Branch always to $80, $E3 [Flow: branch]
	cpy #$BD.b		; C0 BD ; Compare #$BD.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E5.b		; 00 E5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $E8		; 80 E8 ; Branch always to $80, $E8 [Flow: branch]
	cpy #$E8.b		; C0 E8 ; Compare #$E8.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$E8.b		; C0 E8 ; Compare #$E8.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $E8.b		; 00 E8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$E5.b		; C0 E5 ; Compare #$E5.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$E5.b		; C0 E5 ; Compare #$E5.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sbc #$80.b		; E9 80 ; Subtract #$80.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$40.b		; E9 40 ; Subtract #$40.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$80.b		; E9 80 ; Subtract #$80.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$40.b		; E9 40 ; Subtract #$40.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda $8C80.w,X		; BD 80 8C ; Load $8C80.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $A0		; 80 A0 ; Branch always to $80, $A0 [Flow: branch]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $A9		; 80 A9 ; Branch always to $80, $A9 [Flow: branch]
	brk $BD.b		; 00 BD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$BD.b		; C0 BD ; Compare #$BD.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $A8		; 80 A8 ; Branch always to $80, $A8 [Flow: branch]
	cpy #$ED.b		; C0 ED ; Compare #$ED.b with Y register [Reads: Y Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	brk $9E.b		; 00 9E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $209D.w		; 20 9D 20 ; Jump to subroutine at $209D.w [Writes: Stack Pointer] [Flow: call]
	sta $209B20.l,X		; 9F 20 9B 20 ; Store accumulator (long,X) $209B20.l,X [Reads: Accumulator, X Index]
	ldy $BC20.w,X		; BC 20 BC ; Load Y register $BC20.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	jsr $20BE.w		; 20 BE 20 ; Jump to subroutine at $20BE.w [Writes: Stack Pointer] [Flow: call]
	ldx $BE00.w,Y		; BE 00 BE ; Load X register $BE00.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda $40.b		; A5 40 ; Load $40.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $40.b		; A5 40 ; Load $40.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $40.b		; A5 40 ; Load $40.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $BC00.w,X		; BC 00 BC ; Load Y register $BC00.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda [$40.b]		; A7 40 ; Load accumulator (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$40.b]		; A7 40 ; Load accumulator (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$40.b]		; A7 40 ; Load accumulator (long) [$40.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$80.b]		; A7 80 ; Load accumulator (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc [$80.b]		; E7 80 ; Subtract with carry (long) [$80.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$00.b]		; E7 00 ; Subtract with carry (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0C08.w		; 0C 08 0C ; Test and set bits $0C08.w [Reads: Accumulator] [Flags: Z]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1C18.w		; 1C 18 1C ; Test and reset bits $1C18.w [Reads: Accumulator] [Flags: Z]
	.db $10, $14		; 10 14 ; Branch if plus to $10, $14 [Flow: branch]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	trb $1C.b		; 14 1C ; Test and reset bits $1C.b [Reads: Accumulator] [Flags: Z]
	trb $1C.b		; 14 1C ; Test and reset bits $1C.b [Reads: Accumulator] [Flags: Z]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $008000.l,X		; FF 00 80 00 ; Subtract with carry (long,X) $008000.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc $FFBFFF.l,X		; 7F FF BF FF ; Add long $FFBFFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FFEFFF.l,X		; DF FF EF FF ; Compare accumulator (long,X) $FFEFFF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $FEFFFD.l,X		; FF FD FF FE ; Subtract with carry (long,X) $FEFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $FFBFFF.l,X		; 7F FF BF FF ; Add long $FFBFFF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $FFEFFF.l,X		; DF FF EF FF ; Compare accumulator (long,X) $FFEFFF.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc [$FF.b],Y		; F7 FF ; Subtract with carry (long indexed) [$FF.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sbc $FEFFFD.l,X		; FF FD FF FE ; Subtract with carry (long,X) $FEFFFD.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $000100.l,X		; FF 00 01 00 ; Subtract with carry (long,X) $000100.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($00.b)		; 72 00 ; Add with carry (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $82, $00, $40		; 82 00 40 ; Branch always long to $82, $00, $40 [Flow: branch]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($56.b,X)		; 01 56 ; Logical OR ($56.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $57.b		; 00 57 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $67.b		; 00 67 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $68.b		; 00 68 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $98.b		; 00 98 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D1.b		; 00 D1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A3.b		; 00 A3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $92.b		; 00 92 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4E.b		; 00 4E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7F.b		; 00 7F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F1.b		; 00 F1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E6.b		; 00 E6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E7.b		; 00 E7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D6.b		; 00 D6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B5.b		; 00 B5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $24.b		; 00 24 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $D5.b		; 00 D5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C9.b		; 00 C9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1A.b		; 00 1A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4B.b		; 00 4B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BC.b		; 00 BC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FB.b		; 00 FB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7B.b		; 00 7B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7C.b		; 00 7C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9B.b		; 00 9B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9C.b		; 00 9C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $9D.b		; 00 9D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $95.b		; 00 95 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5C.b		; 00 5C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7D.b		; 00 7D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $4C.b		; 00 4C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $96.b		; 00 96 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($3C.b,X)		; 01 3C ; Logical OR ($3C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1C.b,X)		; 01 1C ; Logical OR ($1C.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $3C.b		; 02 3C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $5C.b		; 02 5C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $9C.b		; 02 9C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $BC.b,S		; 03 BC ; OR accumulator with stack relative $BC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $DC.b,S		; 03 DC ; OR accumulator with stack relative $DC.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1C.b,S		; 03 1C ; OR accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($3C.b)		; 12 3C ; OR accumulator with memory (indirect) ($3C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($5C.b)		; 12 5C ; OR accumulator with memory (indirect) ($5C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($9C.b)		; 12 9C ; OR accumulator with memory (indirect) ($9C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($BC.b,S),Y		; 13 BC ; OR accumulator (stack relative indirect indexed) ($BC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($DC.b,S),Y		; 13 DC ; OR accumulator (stack relative indirect indexed) ($DC.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($1C.b,S),Y		; 13 1C ; OR accumulator (stack relative indirect indexed) ($1C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0D3C.w		; 0D 3C 0D ; Logical OR $0D3C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $0B9C0D.l		; 5C 0D 9C 0B ; Jump long to $0B9C0D.l [Flow: jump]
	ldy $DC0B.w,X		; BC 0B DC ; Load Y register $DC0B.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	trb $3C1D.w		; 1C 1D 3C ; Test and reset bits $3C1D.w [Reads: Accumulator] [Flags: Z]
	ora $1D5C.w,X		; 1D 5C 1D ; OR accumulator with memory $1D5C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $BC1B.w		; 9C 1B BC ; Store zero to $BC1B.w
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jmp.w [$841B]		; DC 1B 84 ; Jump long indirect [$841B] [Flow: jump]
	ora [$84.b]		; 07 84 ; OR accumulator with memory (long) [$84.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $8A1784.l		; 0F 84 17 8A ; OR accumulator with memory (long) $8A1784.l [Writes: Accumulator] [Flags: NZ]
	ora [$8A.b]		; 07 8A ; OR accumulator with memory (long) [$8A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $C4178A.l		; 0F 8A 17 C4 ; OR accumulator with memory (long) $C4178A.l [Writes: Accumulator] [Flags: NZ]
	ora [$C4.b]		; 07 C4 ; OR accumulator with memory (long) [$C4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $CA17C4.l		; 0F C4 17 CA ; OR accumulator with memory (long) $CA17C4.l [Writes: Accumulator] [Flags: NZ]
	ora [$CA.b]		; 07 CA ; OR accumulator with memory (long) [$CA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $B417CA.l		; 0F CA 17 B4 ; OR accumulator with memory (long) $B417CA.l [Writes: Accumulator] [Flags: NZ]
	ora [$B4.b]		; 07 B4 ; OR accumulator with memory (long) [$B4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $AE17B4.l		; 0F B4 17 AE ; OR accumulator with memory (long) $AE17B4.l [Writes: Accumulator] [Flags: NZ]
	ora [$AE.b]		; 07 AE ; OR accumulator with memory (long) [$AE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $F417AE.l		; 0F AE 17 F4 ; OR accumulator with memory (long) $F417AE.l [Writes: Accumulator] [Flags: NZ]
	ora [$F4.b]		; 07 F4 ; OR accumulator with memory (long) [$F4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $EE17F4.l		; 0F F4 17 EE ; OR accumulator with memory (long) $EE17F4.l [Writes: Accumulator] [Flags: NZ]
	ora [$EE.b]		; 07 EE ; OR accumulator with memory (long) [$EE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $8A17EE.l		; 0F EE 17 8A ; OR accumulator with memory (long) $8A17EE.l [Writes: Accumulator] [Flags: NZ]
	ora $0DAA.w		; 0D AA 0D ; Logical OR $0DAA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $02B6.w		; 0D B6 02 ; Logical OR $02B6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $0A.b,Y		; B6 0A ; Load X register $0A.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ldx $12.b,Y		; B6 12 ; Load X register $12.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $020011.l,X		; FF 11 00 02 ; Subtract with carry (long,X) $020011.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $60.b		; 00 60 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $62.b		; 00 62 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $66.b		; 00 66 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $54.b		; 00 54 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $58.b		; 00 58 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $84		; 80 84 ; Branch always to $80, $84 [Flow: branch]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($84.b,X)		; 01 84 ; Logical OR ($84.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sty $8E.b		; 84 8E ; Store Y register to $8E.b [Reads: Y Index]
	stx $0000.w		; 8E 00 00 ; Store X register to $0000.w [Reads: X Index]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	stx $808E.w		; 8E 8E 80 ; Store X register to $808E.w [Reads: X Index]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $82		; 80 82 ; Branch always to $80, $82 [Flow: branch]
	.db $82, $80, $80		; 82 80 80 ; Branch always long to $82, $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $82, $82, $8E		; 82 82 8E ; Branch always long to $82, $82, $8E [Flow: branch]
	stx $8080.w		; 8E 80 80 ; Store X register to $8080.w [Reads: X Index]
	.db $82, $82, $80		; 82 82 80 ; Branch always long to $82, $82, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $82		; 80 82 ; Branch always to $80, $82 [Flow: branch]
	.db $82, $82, $82		; 82 82 82 ; Branch always long to $82, $82, $82 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	sty $84.b		; 84 84 ; Store Y register to $84.b [Reads: Y Index]
	sty $84.b		; 84 84 ; Store Y register to $84.b [Reads: Y Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	stx $86.b		; 86 86 ; Store X register to $86.b [Reads: X Index]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	.db $80, $80		; 80 80 ; Branch always to $80, $80 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	jsr $3000.w		; 20 00 30 ; Jump to subroutine at $3000.w [Writes: Stack Pointer] [Flow: call]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A1.b		; 00 A1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B1.b		; 00 B1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $93.b		; 00 93 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A3.b		; 00 A3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B3.b		; 00 B3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $61.b		; 00 61 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $71.b		; 00 71 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $81.b		; 00 81 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $91.b		; 00 91 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A1.b		; 00 A1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B1.b		; 00 B1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $63.b		; 00 63 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $73.b		; 00 73 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $83.b		; 00 83 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $93.b		; 00 93 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A3.b		; 00 A3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B3.b		; 00 B3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $32.b		; 00 32 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0B.b		; 00 0B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C1.b		; 00 C1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $41FF81.l,X		; FF 81 FF 41 ; Subtract with carry (long,X) $41FF81.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $B9FF01.l,X		; FF 01 FF B9 ; Subtract with carry (long,X) $B9FF01.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $39FF79.l,X		; FF 79 FF 39 ; Subtract with carry (long,X) $39FF79.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $42FEF9.l,X		; FF F9 FE 42 ; Subtract with carry (long,X) $42FEF9.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $82.b		; 00 82 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($4A.b,X)		; 01 4A ; Logical OR ($4A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $8A.b		; 00 8A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $30.b		; 00 30 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $EE.b		; 00 EE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $EF.b		; 14 EF ; Test and reset bits $EF.b [Reads: Accumulator] [Flags: Z]
	trb $EE.b		; 14 EE ; Test and reset bits $EE.b [Reads: Accumulator] [Flags: Z]
	trb $EF.b		; 14 EF ; Test and reset bits $EF.b [Reads: Accumulator] [Flags: Z]
	trb $FE.b		; 14 FE ; Test and reset bits $FE.b [Reads: Accumulator] [Flags: Z]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	trb $FE.b		; 14 FE ; Test and reset bits $FE.b [Reads: Accumulator] [Flags: Z]
	trb $FF.b		; 14 FF ; Test and reset bits $FF.b [Reads: Accumulator] [Flags: Z]
	trb $EE.b		; 14 EE ; Test and reset bits $EE.b [Reads: Accumulator] [Flags: Z]
	tsb $0CEF.w		; 0C EF 0C ; Test and set bits $0CEF.w [Reads: Accumulator] [Flags: Z]
	inc $EF0C.w		; EE 0C EF ; Increment $EF0C.w [Flags: NZ]
	tsb $0CFE.w		; 0C FE 0C ; Test and set bits $0CFE.w [Reads: Accumulator] [Flags: Z]
	sbc $0CFE0C.l,X		; FF 0C FE 0C ; Subtract with carry (long,X) $0CFE0C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0CEC0C.l,X		; FF 0C EC 0C ; Subtract with carry (long,X) $0CEC0C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EC0C.w		; ED 0C EC ; Subtract $EC0C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $0CED.w		; 0C ED 0C ; Test and set bits $0CED.w [Reads: Accumulator] [Flags: Z]
	jsr ($FD0C.w,X)		; FC 0C FD ; Jump to subroutine indirect indexed ($FD0C.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	tsb $0CFC.w		; 0C FC 0C ; Test and set bits $0CFC.w [Reads: Accumulator] [Flags: Z]
	sbc $EC0C.w,X		; FD 0C EC ; Subtract with carry $EC0C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $ED.b		; 14 ED ; Test and reset bits $ED.b [Reads: Accumulator] [Flags: Z]
	trb $EC.b		; 14 EC ; Test and reset bits $EC.b [Reads: Accumulator] [Flags: Z]
	trb $ED.b		; 14 ED ; Test and reset bits $ED.b [Reads: Accumulator] [Flags: Z]
	trb $FC.b		; 14 FC ; Test and reset bits $FC.b [Reads: Accumulator] [Flags: Z]
	trb $FD.b		; 14 FD ; Test and reset bits $FD.b [Reads: Accumulator] [Flags: Z]
	trb $FC.b		; 14 FC ; Test and reset bits $FC.b [Reads: Accumulator] [Flags: Z]
	trb $FD.b		; 14 FD ; Test and reset bits $FD.b [Reads: Accumulator] [Flags: Z]
	trb $EE.b		; 14 EE ; Test and reset bits $EE.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $18EE18.l		; EF 18 EE 18 ; Subtract with carry (long) $18EE18.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $18FE18.l		; EF 18 FE 18 ; Subtract with carry (long) $18FE18.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $18FE18.l,X		; FF 18 FE 18 ; Subtract with carry (long,X) $18FE18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $10EE18.l,X		; FF 18 EE 10 ; Subtract with carry (long,X) $10EE18.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $10EE10.l		; EF 10 EE 10 ; Subtract with carry (long) $10EE10.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $10FE10.l		; EF 10 FE 10 ; Subtract with carry (long) $10FE10.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $10FE10.l,X		; FF 10 FE 10 ; Subtract with carry (long,X) $10FE10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $10EC10.l,X		; FF 10 EC 10 ; Subtract with carry (long,X) $10EC10.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EC10.w		; ED 10 EC ; Subtract $EC10.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	.db $10, $FC		; 10 FC ; Branch if plus to $10, $FC [Flow: branch]
	.db $10, $FD		; 10 FD ; Branch if plus to $10, $FD [Flow: branch]
	.db $10, $FC		; 10 FC ; Branch if plus to $10, $FC [Flow: branch]
	.db $10, $FD		; 10 FD ; Branch if plus to $10, $FD [Flow: branch]
	.db $10, $EC		; 10 EC ; Branch if plus to $10, $EC [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $EC18.w		; ED 18 EC ; Subtract $EC18.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FC18.w		; ED 18 FC ; Subtract $FC18.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $FC18.w,X		; FD 18 FC ; Subtract with carry $FC18.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	sbc $C118.w,X		; FD 18 C1 ; Subtract with carry $C118.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $C1		; 10 C1 ; Branch if plus to $10, $C1 [Flow: branch]
	.db $10, $C1		; 10 C1 ; Branch if plus to $10, $C1 [Flow: branch]
	.db $10, $C1		; 10 C1 ; Branch if plus to $10, $C1 [Flow: branch]
	.db $10, $C1		; 10 C1 ; Branch if plus to $10, $C1 [Flow: branch]
	.db $10, $C1		; 10 C1 ; Branch if plus to $10, $C1 [Flow: branch]
	.db $10, $C1		; 10 C1 ; Branch if plus to $10, $C1 [Flow: branch]
	.db $10, $C1		; 10 C1 ; Branch if plus to $10, $C1 [Flow: branch]
	.db $10, $CA		; 10 CA ; Branch if plus to $10, $CA [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldx $1D.b,Y		; B6 1D ; Load X register $1D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda [$1D.b],Y		; B7 1D ; Load accumulator (long indexed) [$1D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $1D.b,Y		; B6 1D ; Load X register $1D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda [$1D.b],Y		; B7 1D ; Load accumulator (long indexed) [$1D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $1DB9.w,X		; 1D B9 1D ; OR accumulator with memory $1DB9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $1DB9.w,X		; 1D B9 1D ; OR accumulator with memory $1DB9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $AF1D.w		; AE 1D AF ; Load $AF1D.w into X register [Writes: X Index] [Flags: NZ]
	ora $1DAE.w,X		; 1D AE 1D ; OR accumulator with memory $1DAE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1DBE1D.l		; AF 1D BE 1D ; Load long $1DBE1D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $1DBE1D.l,X		; BF 1D BE 1D ; Load long $1DBE1D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $090C1D.l,X		; BF 1D 0C 09 ; Load long $090C1D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $0C49.w		; 0C 49 0C ; Test and set bits $0C49.w [Reads: Accumulator] [Flags: Z]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$0C.b		; 49 0C ; Exclusive OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$0C.b		; 89 0C ; Test bits #$0C.b with accumulator [Reads: Accumulator] [Flags: Z]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit #$0C.b		; 89 0C ; Test bits #$0C.b with accumulator [Reads: Accumulator] [Flags: Z]
	cmp #$EC.b		; C9 EC ; Compare #$EC.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EB.b,X)		; 01 EB ; Logical OR ($EB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EB.b,X)		; 01 EB ; Logical OR ($EB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EB.b,X)		; 01 EB ; Logical OR ($EB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EB.b,X)		; 01 EB ; Logical OR ($EB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EB.b,X)		; 01 EB ; Logical OR ($EB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EB.b,X)		; 01 EB ; Logical OR ($EB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EB.b,X)		; 01 EB ; Logical OR ($EB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EB.b,X)		; 01 EB ; Logical OR ($EB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($BA.b,X)		; 01 BA ; Logical OR ($BA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $1DBB.w,X		; 1D BB 1D ; OR accumulator with memory $1DBB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	ora $1DBB.w,X		; 1D BB 1D ; OR accumulator with memory $1DBB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $BD1D.w,X		; BC 1D BD ; Load Y register $BD1D.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora $1DBC.w,X		; 1D BC 1D ; OR accumulator with memory $1DBC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B61D.w,X		; BD 1D B6 ; Load $B61D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1DB7.w,X		; 1D B7 1D ; OR accumulator with memory $1DB7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $1D.b,Y		; B6 1D ; Load X register $1D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda [$1D.b],Y		; B7 1D ; Load accumulator (long indexed) [$1D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $1DB9.w,X		; 1D B9 1D ; OR accumulator with memory $1DB9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ora $1DB9.w,X		; 1D B9 1D ; OR accumulator with memory $1DB9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $1D		; B0 1D ; Branch if carry set to $B0, $1D [Flow: branch]
	lda ($1D.b),Y		; B1 1D ; Load accumulator ($1D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $1D		; B0 1D ; Branch if carry set to $B0, $1D [Flow: branch]
	lda ($1D.b),Y		; B1 1D ; Load accumulator ($1D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $9D		; B0 9D ; Branch if carry set to $B0, $9D [Flow: branch]
	lda ($9D.b),Y		; B1 9D ; Load accumulator ($9D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $9D		; B0 9D ; Branch if carry set to $B0, $9D [Flow: branch]
	lda ($9D.b),Y		; B1 9D ; Load accumulator ($9D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	ora $1DBB.w,X		; 1D BB 1D ; OR accumulator with memory $1DBB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	ora $1DBB.w,X		; 1D BB 1D ; OR accumulator with memory $1DBB.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $BD1D.w,X		; BC 1D BD ; Load Y register $BD1D.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ora $1DBC.w,X		; 1D BC 1D ; OR accumulator with memory $1DBC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $B51D.w,X		; BD 1D B5 ; Load $B51D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1DB5.w,X		; 1D B5 1D ; OR accumulator with memory $1DB5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $1D.b		; A6 1D ; Load $1D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $5D.b		; A6 5D ; Load $5D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $1D.b		; A6 1D ; Load $1D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $5D.b		; A6 5D ; Load $5D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $9D.b		; A6 9D ; Load $9D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $DD.b		; A6 DD ; Load $DD.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $9D.b		; A6 9D ; Load $9D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $DD.b		; A6 DD ; Load $DD.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $62, $0C, $63		; 62 0C 63 ; Push effective relative address $62, $0C, $63 [Writes: Stack Pointer]
	tsb $0C62.w		; 0C 62 0C ; Test and set bits $0C62.w [Reads: Accumulator] [Flags: Z]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	.db $62, $0C, $63		; 62 0C 63 ; Push effective relative address $62, $0C, $63 [Writes: Stack Pointer]
	tsb $0C62.w		; 0C 62 0C ; Test and set bits $0C62.w [Reads: Accumulator] [Flags: Z]
	adc $0C.b,S		; 63 0C ; Add with carry (stack relative) $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cpy $CC0D.w		; CC 0D CC ; Compare $CC0D.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $0DCC.w		; 0D CC 0D ; Logical OR $0DCC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $CC0D.w		; CC 0D CC ; Compare $CC0D.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $0DCC.w		; 0D CC 0D ; Logical OR $0DCC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $CC0D.w		; CC 0D CC ; Compare $CC0D.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $090D.w		; 0D 0D 09 ; Logical OR $090D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0D09.w,X		; 1D 09 0D ; OR accumulator with memory $0D09.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$1D.b		; 49 1D ; Exclusive OR #$1D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$EC.b		; 49 EC ; Exclusive OR #$EC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	.db $10, $EC		; 10 EC ; Branch if plus to $10, $EC [Flow: branch]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	.db $10, $FC		; 10 FC ; Branch if plus to $10, $FC [Flow: branch]
	.db $10, $FD		; 10 FD ; Branch if plus to $10, $FD [Flow: branch]
	.db $10, $FC		; 10 FC ; Branch if plus to $10, $FC [Flow: branch]
	.db $10, $FD		; 10 FD ; Branch if plus to $10, $FD [Flow: branch]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$0C.b		; 49 0C ; Exclusive OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$0C.b		; 49 0C ; Exclusive OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$0C.b		; 89 0C ; Test bits #$0C.b with accumulator [Reads: Accumulator] [Flags: Z]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	bit #$0C.b		; 89 0C ; Test bits #$0C.b with accumulator [Reads: Accumulator] [Flags: Z]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora $190F.w,Y		; 19 0F 19 ; OR accumulator with memory $190F.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $190F19.l		; 0F 19 0F 19 ; OR accumulator with memory (long) $190F19.l [Writes: Accumulator] [Flags: NZ]
	ora $190F19.l		; 0F 19 0F 19 ; OR accumulator with memory (long) $190F19.l [Writes: Accumulator] [Flags: NZ]
	ora $190F19.l		; 0F 19 0F 19 ; OR accumulator with memory (long) $190F19.l [Writes: Accumulator] [Flags: NZ]
	ldx $BE09.w,Y		; BE 09 BE ; Load X register $BE09.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	eor #$BE.b		; 49 BE ; Exclusive OR #$BE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$BE.b		; 09 BE ; Logical OR #$BE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$BE.b		; 49 BE ; Exclusive OR #$BE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$BE.b		; 09 BE ; Logical OR #$BE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$BE.b		; 49 BE ; Exclusive OR #$BE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$BE.b		; 09 BE ; Logical OR #$BE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$BF.b		; 49 BF ; Exclusive OR #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$BF.b		; 09 BF ; Logical OR #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$BF.b		; 49 BF ; Exclusive OR #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$BF.b		; 09 BF ; Logical OR #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$BF.b		; 49 BF ; Exclusive OR #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$BF.b		; 09 BF ; Logical OR #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$BF.b		; 49 BF ; Exclusive OR #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$BF.b		; 09 BF ; Logical OR #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$B1.b		; 49 B1 ; Exclusive OR #$B1.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$B1.b		; 09 B1 ; Logical OR #$B1.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$B1.b		; 09 B1 ; Logical OR #$B1.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$B1.b		; 09 B1 ; Logical OR #$B1.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$B1.b		; 09 B1 ; Logical OR #$B1.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$B1.b		; 89 B1 ; Test bits #$B1.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$B1.b		; 89 B1 ; Test bits #$B1.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$B1.b		; 89 B1 ; Test bits #$B1.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$B0.b		; 89 B0 ; Test bits #$B0.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$B0.b		; 09 B0 ; Logical OR #$B0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$B0.b		; 09 B0 ; Logical OR #$B0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$B0.b		; 09 B0 ; Logical OR #$B0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$B0.b		; 09 B0 ; Logical OR #$B0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$B0.b		; 89 B0 ; Test bits #$B0.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$B0.b		; 89 B0 ; Test bits #$B0.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$B0.b		; 89 B0 ; Test bits #$B0.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$82.b		; 89 82 ; Test bits #$82.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$92.b		; 09 92 ; Logical OR #$92.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$83.b		; 09 83 ; Logical OR #$83.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$93.b		; 09 93 ; Logical OR #$93.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$83.b		; 09 83 ; Logical OR #$83.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$93.b		; 49 93 ; Exclusive OR #$93.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$82.b		; 49 82 ; Exclusive OR #$82.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$92.b		; 49 92 ; Exclusive OR #$92.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$CC.b		; 49 CC ; Exclusive OR #$CC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $0CCD.w		; 0C CD 0C ; Test and set bits $0CCD.w [Reads: Accumulator] [Flags: Z]
	jmp.w [$CE0C]		; DC 0C CE ; Jump long indirect [$CE0C] [Flow: jump]
	tsb $0CCC.w		; 0C CC 0C ; Test and set bits $0CCC.w [Reads: Accumulator] [Flags: Z]
	cmp $0CDC0C.l		; CF 0C DC 0C ; Compare accumulator (long) $0CDC0C.l [Reads: Accumulator] [Flags: NCZ]
	cmp $CC0C.w,X		; DD 0C CC ; Compare accumulator $CC0C.w,X [Reads: X Index] [Flags: NCZ]
	tsb $0CCD.w		; 0C CD 0C ; Test and set bits $0CCD.w [Reads: Accumulator] [Flags: Z]
	dec $DD0C.w,X		; DE 0C DD ; Decrement memory $DD0C.w,X [Reads: X Index] [Flags: NZ]
	tsb $0CDF.w		; 0C DF 0C ; Test and set bits $0CDF.w [Reads: Accumulator] [Flags: Z]
	cmp $DC0C.w		; CD 0C DC ; Compare $DC0C.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $0CDD.w		; 0C DD 0C ; Test and set bits $0CDD.w [Reads: Accumulator] [Flags: Z]
	cpy $DC0C.w		; CC 0C DC ; Compare $DC0C.w with Y register [Reads: Y Index] [Flags: NCZ]
	tsb $0CCD.w		; 0C CD 0C ; Test and set bits $0CCD.w [Reads: Accumulator] [Flags: Z]
	dec $CC0C.w		; CE 0C CC ; Decrement $CC0C.w [Flags: NZ]
	tsb $0CDC.w		; 0C DC 0C ; Test and set bits $0CDC.w [Reads: Accumulator] [Flags: Z]
	cmp $0CDD0C.l		; CF 0C DD 0C ; Compare accumulator (long) $0CDD0C.l [Reads: Accumulator] [Flags: NCZ]
	cpy $DE0C.w		; CC 0C DE ; Compare $DE0C.w with Y register [Reads: Y Index] [Flags: NCZ]
	tsb $0CCD.w		; 0C CD 0C ; Test and set bits $0CCD.w [Reads: Accumulator] [Flags: Z]
	cmp $DF0C.w,X		; DD 0C DF ; Compare accumulator $DF0C.w,X [Reads: X Index] [Flags: NCZ]
	tsb $0CDC.w		; 0C DC 0C ; Test and set bits $0CDC.w [Reads: Accumulator] [Flags: Z]
	cmp $DD0C.w		; CD 0C DD ; Compare $DD0C.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $0CCC.w		; 0C CC 0C ; Test and set bits $0CCC.w [Reads: Accumulator] [Flags: Z]
	cmp $CC0C.w		; CD 0C CC ; Compare $CC0C.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tsb $0CCD.w		; 0C CD 0C ; Test and set bits $0CCD.w [Reads: Accumulator] [Flags: Z]
	jmp.w [$DD0C]		; DC 0C DD ; Jump long indirect [$DD0C] [Flow: jump]
	tsb $0CDC.w		; 0C DC 0C ; Test and set bits $0CDC.w [Reads: Accumulator] [Flags: Z]
	cmp $CC0C.w,X		; DD 0C CC ; Compare accumulator $CC0C.w,X [Reads: X Index] [Flags: NCZ]
	tsb $0CCD.w		; 0C CD 0C ; Test and set bits $0CCD.w [Reads: Accumulator] [Flags: Z]
	cpy $CD0C.w		; CC 0C CD ; Compare $CD0C.w with Y register [Reads: Y Index] [Flags: NCZ]
	tsb $0CDC.w		; 0C DC 0C ; Test and set bits $0CDC.w [Reads: Accumulator] [Flags: Z]
	cmp $DC0C.w,X		; DD 0C DC ; Compare accumulator $DC0C.w,X [Reads: X Index] [Flags: NCZ]
	tsb $0CDD.w		; 0C DD 0C ; Test and set bits $0CDD.w [Reads: Accumulator] [Flags: Z]
	cpy $DC0C.w		; CC 0C DC ; Compare $DC0C.w with Y register [Reads: Y Index] [Flags: NCZ]
	tsb $0CCD.w		; 0C CD 0C ; Test and set bits $0CCD.w [Reads: Accumulator] [Flags: Z]
	cmp $130C.w,X		; DD 0C 13 ; Compare accumulator $130C.w,X [Reads: X Index] [Flags: NCZ]
	trb $1C41.w		; 1C 41 1C ; Test and reset bits $1C41.w [Reads: Accumulator] [Flags: Z]
	ora ($1C.b,S),Y		; 13 1C ; OR accumulator (stack relative indirect indexed) ($1C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($1C.b,X)		; 41 1C ; Exclusive OR accumulator with memory ($1C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	trb $1C42.w		; 1C 42 1C ; Test and reset bits $1C42.w [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	trb $1C42.w		; 1C 42 1C ; Test and reset bits $1C42.w [Reads: Accumulator] [Flags: Z]
	ora ($1C.b,S),Y		; 13 1C ; OR accumulator (stack relative indirect indexed) ($1C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($1C.b,X)		; 41 1C ; Exclusive OR accumulator with memory ($1C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($1C.b,S),Y		; 13 1C ; OR accumulator (stack relative indirect indexed) ($1C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($1C.b,X)		; 41 1C ; Exclusive OR accumulator with memory ($1C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	trb $1C42.w		; 1C 42 1C ; Test and reset bits $1C42.w [Reads: Accumulator] [Flags: Z]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	trb $1C42.w		; 1C 42 1C ; Test and reset bits $1C42.w [Reads: Accumulator] [Flags: Z]
	ror $15.b,X		; 76 15 ; Rotate right $15.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc [$15.b],Y		; 77 15 ; Add with carry (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $15.b,X		; 76 15 ; Rotate right $15.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc [$15.b],Y		; 77 15 ; Add with carry (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $79.b,X		; 15 79 ; OR accumulator with memory $79.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $78.b,X		; 15 78 ; OR accumulator with memory $78.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $79.b,X		; 15 79 ; OR accumulator with memory $79.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $76.b,X		; 15 76 ; OR accumulator with memory $76.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $77.b,X		; 15 77 ; OR accumulator with memory $77.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $76.b,X		; 15 76 ; OR accumulator with memory $76.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $77.b,X		; 15 77 ; OR accumulator with memory $77.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $78.b,X		; 15 78 ; OR accumulator with memory $78.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $79.b,X		; 15 79 ; OR accumulator with memory $79.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $78.b,X		; 15 78 ; OR accumulator with memory $78.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $79.b,X		; 15 79 ; OR accumulator with memory $79.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $92.b,X		; 15 92 ; OR accumulator with memory $92.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $930C.w		; AD 0C 93 ; Load $930C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $A508.w,Y		; 99 08 A5 ; Store accumulator to $A508.w,Y [Reads: Y Index, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $AD8C.w		; AD 8C AD ; Load $AD8C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $48A4.w		; 4C A4 48 ; Jump to $48A4.w [Flow: jump]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($48.b)		; 92 48 ; Store accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator]
	lda $A5CC.w		; AD CC A5 ; Load $A5CC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $9348.w,Y		; 99 48 93 ; Store accumulator to $9348.w,Y [Reads: Y Index, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	stx $08.b,Y		; 96 08 ; Store X register $08.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	ldy $910C.w		; AC 0C 91 ; Load $910C.w into Y register [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta [$08.b],Y		; 97 08 ; Store accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $AC4C.w		; AC 4C AC ; Load $AC4C.w into Y register [Writes: Y Index] [Flags: NZ]
	sty $88A2.w		; 8C A2 88 ; Store Y register to $88A2.w [Reads: Y Index]
	stx $88.b,Y		; 96 88 ; Store X register $88.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $90, $88		; 90 88 ; Branch if carry clear to $90, $88 [Flow: branch]
	ldy $A3CC.w		; AC CC A3 ; Load $A3CC.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$88.b],Y		; 97 88 ; Store accumulator (long indexed) [$88.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($88.b),Y		; 91 88 ; Store accumulator ($88.b),Y [Reads: Direct Page, Y Index, Accumulator]
	eor $08.b,S		; 43 08 ; Exclusive OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	mvp $71,$08		; 44 08 71 ; Move block positive $71,$08 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $5390.w		; AD 90 53 ; Load $5390.w into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	mvn $71,$08		; 54 08 71 ; Move block negative $71,$08 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $AD10.w		; AD 10 AD ; Load $AD10.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $71		; D0 71 ; Branch if not equal to $D0, $71 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	mvp $43,$48		; 44 48 43 ; Move block positive $43,$48 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7150.w		; AD 50 71 ; Load $7150.w into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	mvn $53,$48		; 54 48 53 ; Move block negative $53,$48 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $50, $08		; 50 08 ; Branch if overflow clear to $50, $08 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	ldy $5150.w		; AC 50 51 ; Load $5150.w into Y register [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc ($08.b,X)		; 61 08 ; Add with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	ldy $AC10.w		; AC 10 AC ; Load $AC10.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $70		; D0 70 ; Branch if not equal to $D0, $70 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $50, $88		; 50 88 ; Branch if overflow clear to $50, $88 [Flow: branch]
	ldy $7090.w		; AC 90 70 ; Load $7090.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($88.b,X)		; 61 88 ; Add with carry ($88.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($88.b),Y		; 51 88 ; Exclusive OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $1C6B.w		; 1C 6B 1C ; Test and reset bits $1C6B.w [Reads: Accumulator] [Flags: Z]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $1C6B.w		; 1C 6B 1C ; Test and reset bits $1C6B.w [Reads: Accumulator] [Flags: Z]
	jmp ($8D1C.w)		; 6C 1C 8D ; Jump indirect to ($8D1C.w) [Flow: jump]
	trb $5C8D.w		; 1C 8D 5C ; Test and reset bits $5C8D.w [Reads: Accumulator] [Flags: Z]
	jmp ($6B5C.w)		; 6C 5C 6B ; Jump indirect to ($6B5C.w) [Flow: jump]
	jmp $6B5C6B.l		; 5C 6B 5C 6B ; Jump long to $6B5C6B.l [Flow: jump]
	jmp $6A5C6B.l		; 5C 6B 5C 6A ; Jump long to $6A5C6B.l [Flow: jump]
	trb $1C6A.w		; 1C 6A 1C ; Test and reset bits $1C6A.w [Reads: Accumulator] [Flags: Z]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	trb $1C6A.w		; 1C 6A 1C ; Test and reset bits $1C6A.w [Reads: Accumulator] [Flags: Z]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	trb $1C8E.w		; [PATTERN: Memory clearing operation] 1C 8E 1C ; Test and reset bits $1C8E.w [Reads: Accumulator] [Flags: Z]
	stx $7A9C.w		; 8E 9C 7A ; Store X register to $7A9C.w [Reads: X Index]
	stz $9C6A.w		; 9C 6A 9C ; Store zero to $9C6A.w
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stz $9C6A.w		; 9C 6A 9C ; Store zero to $9C6A.w
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stz $1C6B.w		; 9C 6B 1C ; Store zero to $1C6B.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $1C6C.w		; 1C 6C 1C ; Test and reset bits $1C6C.w [Reads: Accumulator] [Flags: Z]
	jmp ($6C1C.w)		; 6C 1C 6C ; Jump indirect to ($6C1C.w) [Flow: jump]
	jmp $6B5C6C.l		; 5C 6C 5C 6B ; Jump long to $6B5C6C.l [Flow: jump]
	jmp $6A5C6B.l		; 5C 6B 5C 6A ; Jump long to $6A5C6B.l [Flow: jump]
	trb $1C7A.w		; 1C 7A 1C ; Test and reset bits $1C7A.w [Reads: Accumulator] [Flags: Z]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	trb $1C7A.w		; [PATTERN: Memory clearing operation] 1C 7A 1C ; Test and reset bits $1C7A.w [Reads: Accumulator] [Flags: Z]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	stz $9C6A.w		; 9C 6A 9C ; Store zero to $9C6A.w
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	stz $9C6A.w		; 9C 6A 9C ; Store zero to $9C6A.w
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $1C6B.w		; 1C 6B 1C ; Test and reset bits $1C6B.w [Reads: Accumulator] [Flags: Z]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	trb $1C45.w		; 1C 45 1C ; Test and reset bits $1C45.w [Reads: Accumulator] [Flags: Z]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $9C7B.w		; 1C 7B 9C ; Test and reset bits $9C7B.w [Reads: Accumulator] [Flags: Z]
	eor $9C.b		; 45 9C ; Exclusive OR $9C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	stz $1C6A.w		; 9C 6A 1C ; Store zero to $1C6A.w
	eor $5C.b		; 45 5C ; Exclusive OR $5C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp $455C6B.l		; 5C 6B 5C 45 ; Jump long to $455C6B.l [Flow: jump]
	jmp.w [$9C6A]		; DC 6A 9C ; Jump long indirect [$9C6A] [Flow: jump]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp $7CDC7B.l		; 5C 7B DC 7C ; Jump long to $7CDC7B.l [Flow: jump]
	trb $1C7A.w		; 1C 7A 1C ; Test and reset bits $1C7A.w [Reads: Accumulator] [Flags: Z]
	jmp ($551C.w)		; 6C 1C 55 ; Jump indirect to ($551C.w) [Flow: jump]
	trb $9C7A.w		; 1C 7A 9C ; Test and reset bits $9C7A.w [Reads: Accumulator] [Flags: Z]
	jmp ($559C.w,X)		; 7C 9C 55 ; Jump indirect indexed to ($559C.w,X) [Reads: X Index] [Flow: jump]
	stz $1C6C.w		; 9C 6C 1C ; Store zero to $1C6C.w
	jmp ($555C.w)		; 6C 5C 55 ; Jump indirect to ($555C.w) [Flow: jump]
	jmp $7A5C7C.l		; 5C 7C 5C 7A ; Jump long to $7A5C7C.l [Flow: jump]
	trb $DC55.w		; 1C 55 DC ; Test and reset bits $DC55.w [Reads: Accumulator] [Flags: Z]
	jmp ($7A5C.w)		; 6C 5C 7A ; Jump indirect to ($7A5C.w) [Flow: jump]
	stz $DC7C.w		; 9C 7C DC ; Store zero to $DC7C.w
	ora $3C.b,X		; 15 3C ; OR accumulator with memory $3C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $3C.b,X		; 15 3C ; OR accumulator with memory $3C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $3C.b,X		; 15 3C ; OR accumulator with memory $3C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $3C.b,X		; 15 3C ; OR accumulator with memory $3C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($09.b),Y		; 51 09 ; Exclusive OR accumulator with memory ($09.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($09.b,X)		; 61 09 ; Add with carry ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($09.b,X)		; 41 09 ; Exclusive OR accumulator with memory ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($09.b),Y		; 71 09 ; Add with carry ($09.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($89.b),Y		; 51 89 ; Exclusive OR accumulator with memory ($89.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($89.b,X)		; 61 89 ; Add with carry ($89.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($89.b,X)		; 41 89 ; Exclusive OR accumulator with memory ($89.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($89.b),Y		; 71 89 ; Add with carry ($89.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($49.b),Y		; 71 49 ; Add with carry ($49.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($49.b,X)		; 61 49 ; Add with carry ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($49.b),Y		; 51 49 ; Exclusive OR accumulator with memory ($49.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($C9.b),Y		; 71 C9 ; Add with carry ($C9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C9.b,X)		; 41 C9 ; Exclusive OR accumulator with memory ($C9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($C9.b,X)		; 61 C9 ; Add with carry ($C9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($C9.b),Y		; 51 C9 ; Exclusive OR accumulator with memory ($C9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $09		; 50 09 ; Branch if overflow clear to $50, $09 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$40.b		; 09 40 ; Logical OR #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$70.b		; 09 70 ; Logical OR #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$50.b		; 09 50 ; Logical OR #$50.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$60.b		; 49 60 ; Exclusive OR #$60.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$40.b		; 49 40 ; Exclusive OR #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$70.b		; 49 70 ; Exclusive OR #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$70.b		; 49 70 ; Exclusive OR #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$40.b		; 89 40 ; Test bits #$40.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$60.b		; 89 60 ; Test bits #$60.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$50.b		; 89 50 ; Test bits #$50.b with accumulator [Reads: Accumulator] [Flags: Z]
	bit #$70.b		; 89 70 ; Test bits #$70.b with accumulator [Reads: Accumulator] [Flags: Z]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$60.b		; C9 60 ; Compare #$60.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$50.b		; C9 50 ; Compare #$50.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($08.b,X)		; 81 08 ; Store accumulator ($08.b,X) [Reads: Direct Page, Accumulator, X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	trb $AB.b		; 14 AB ; Test and reset bits $AB.b [Reads: Accumulator] [Flags: Z]
	sty $9B.b,X		; 94 9B ; Store Y register $9B.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($88.b,X)		; 81 88 ; Store accumulator ($88.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $80, $88		; 80 88 ; Branch always to $80, $88 [Flow: branch]
	.db $80, $48		; 80 48 ; Branch always to $80, $48 [Flow: branch]
	sta ($48.b,X)		; 81 48 ; Store accumulator ($48.b,X) [Reads: Direct Page, Accumulator, X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	mvn $D4,$AB		; 54 AB D4 ; Move block negative $D4,$AB [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($C8.b,X)		; 81 C8 ; Store accumulator ($C8.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $80, $C8		; 80 C8 ; Branch always to $80, $C8 [Flow: branch]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	sta ($08.b,X)		; 81 08 ; Store accumulator ($08.b,X) [Reads: Direct Page, Accumulator, X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tsb $8CAB.w		; 0C AB 8C ; Test and set bits $8CAB.w [Reads: Accumulator] [Flags: Z]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($88.b,X)		; 81 88 ; Store accumulator ($88.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $80, $88		; 80 88 ; Branch always to $80, $88 [Flow: branch]
	.db $80, $48		; 80 48 ; Branch always to $80, $48 [Flow: branch]
	sta ($48.b,X)		; 81 48 ; Store accumulator ($48.b,X) [Reads: Direct Page, Accumulator, X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jmp $CCAB.w		; 4C AB CC ; Jump to $CCAB.w [Flow: jump]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($C8.b,X)		; 81 C8 ; Store accumulator ($C8.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $80, $C8		; 80 C8 ; Branch always to $80, $C8 [Flow: branch]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	sta ($08.b,X)		; 81 08 ; Store accumulator ($08.b,X) [Reads: Direct Page, Accumulator, X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $10, $AB		; 10 AB ; Branch if plus to $10, $AB [Flow: branch]
	.db $90, $9B		; 90 9B ; Branch if carry clear to $90, $9B [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($88.b,X)		; 81 88 ; Store accumulator ($88.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $80, $88		; 80 88 ; Branch always to $80, $88 [Flow: branch]
	.db $80, $48		; 80 48 ; Branch always to $80, $48 [Flow: branch]
	sta ($48.b,X)		; 81 48 ; Store accumulator ($48.b,X) [Reads: Direct Page, Accumulator, X Index]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $50, $AB		; 50 AB ; Branch if overflow clear to $50, $AB [Flow: branch]
	.db $D0, $9B		; D0 9B ; Branch if not equal to $D0, $9B [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($C8.b,X)		; 81 C8 ; Store accumulator ($C8.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $80, $C8		; 80 C8 ; Branch always to $80, $C8 [Flow: branch]
	eor #$08.b		; 49 08 ; Exclusive OR #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $AB08.w		; [PATTERN: Memory clearing operation] 9C 08 AB ; Store zero to $AB08.w
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stz $4B88.w		; 9C 88 4B ; Store zero to $4B88.w
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor #$88.b		; 49 88 ; Exclusive OR #$88.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$48.b		; 49 48 ; Exclusive OR #$48.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $AB48.w		; [PATTERN: Memory clearing operation] 9C 48 AB ; Store zero to $AB48.w
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	stz $4BC8.w		; 9C C8 4B ; Store zero to $4BC8.w
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor #$C8.b		; 49 C8 ; Exclusive OR #$C8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$08.b		; 49 08 ; Exclusive OR #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $AB08.w		; 9C 08 AB ; Store zero to $AB08.w
	.db $10, $AB		; 10 AB ; Branch if plus to $10, $AB [Flow: branch]
	.db $90, $9C		; 90 9C ; Branch if carry clear to $90, $9C [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor #$88.b		; 49 88 ; Exclusive OR #$88.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$48.b		; 49 48 ; Exclusive OR #$48.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $AB48.w		; 9C 48 AB ; Store zero to $AB48.w
	.db $50, $AB		; 50 AB ; Branch if overflow clear to $50, $AB [Flow: branch]
	.db $D0, $9C		; D0 9C ; Branch if not equal to $D0, $9C [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor #$C8.b		; 49 C8 ; Exclusive OR #$C8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$08.b		; 49 08 ; Exclusive OR #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $AB08.w		; 9C 08 AB ; Store zero to $AB08.w
	.db $10, $AB		; 10 AB ; Branch if plus to $10, $AB [Flow: branch]
	.db $90, $9C		; 90 9C ; Branch if carry clear to $90, $9C [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor #$88.b		; 49 88 ; Exclusive OR #$88.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$48.b		; 49 48 ; Exclusive OR #$48.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $AB48.w		; 9C 48 AB ; Store zero to $AB48.w
	.db $50, $AB		; 50 AB ; Branch if overflow clear to $50, $AB [Flow: branch]
	.db $D0, $9C		; D0 9C ; Branch if not equal to $D0, $9C [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor #$C8.b		; 49 C8 ; Exclusive OR #$C8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ora $1DAC.w,X		; 1D AC 1D ; OR accumulator with memory $1DAC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $8B1D.w		; AC 1D 8B ; Load $8B1D.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $1DAD.w,X		; 1D AD 1D ; OR accumulator with memory $1DAD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $8B1D.w		; 8C 1D 8B ; Store Y register to $8B1D.w [Reads: Y Index]
	ora $1DAF.w,X		; 1D AF 1D ; OR accumulator with memory $1DAF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b		; A5 1D ; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora $1DAF.w,X		; 1D AF 1D ; OR accumulator with memory $1DAF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $1D.b		; A6 1D ; Load $1D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora $1DAF.w,X		; 1D AF 1D ; OR accumulator with memory $1DAF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $1D.b		; A6 1D ; Load $1D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora $1DAF.w,X		; 1D AF 1D ; OR accumulator with memory $1DAF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora $5DAD.w,X		; 1D AD 5D ; OR accumulator with memory $5DAD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $AA5D.w		; 8C 5D AA ; Store Y register to $AA5D.w [Reads: Y Index]
	eor $5DAC.w,X		; 5D AC 5D ; Exclusive OR accumulator with memory $5DAC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $AC5D.w		; AC 5D AC ; Load $AC5D.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $1D8C.w,X		; 1D 8C 1D ; OR accumulator with memory $1D8C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda [$1D.b]		; A7 1D ; Load accumulator (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $8C1D.w		; AC 1D 8C ; Load $8C1D.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $1DA7.w,X		; 1D A7 1D ; OR accumulator with memory $1DA7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$5D.b]		; A7 5D ; Load accumulator (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sty $AC5D.w		; 8C 5D AC ; Store Y register to $AC5D.w [Reads: Y Index]
	eor $5DA7.w,X		; 5D A7 5D ; Exclusive OR accumulator with memory $5DA7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $AC5D.w		; 8C 5D AC ; Store Y register to $AC5D.w [Reads: Y Index]
	eor $1DAC.w,X		; 5D AC 1D ; Exclusive OR accumulator with memory $1DAC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $AB1D.w		; AC 1D AB ; Load $AB1D.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $1D8C.w,X		; 1D 8C 1D ; OR accumulator with memory $1D8C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $9B1D.w		; 9C 1D 9B ; Store zero to $9B1D.w
	ora $9DA5.w,X		; 1D A5 9D ; OR accumulator with memory $9DA5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $9B1D.w		; AE 1D 9B ; Load $9B1D.w into X register [Writes: X Index] [Flags: NZ]
	ora $9DA6.w,X		; 1D A6 9D ; OR accumulator with memory $9DA6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $9B1D.w		; AE 1D 9B ; Load $9B1D.w into X register [Writes: X Index] [Flags: NZ]
	ora $9DA6.w,X		; 1D A6 9D ; OR accumulator with memory $9DA6.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $9B1D.w		; AE 1D 9B ; Load $9B1D.w into X register [Writes: X Index] [Flags: NZ]
	ora $DDA5.w,X		; 1D A5 DD ; OR accumulator with memory $DDA5.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $9B1D.w		; AE 1D 9B ; Load $9B1D.w into X register [Writes: X Index] [Flags: NZ]
	ora $5D8C.w,X		; 1D 8C 5D ; OR accumulator with memory $5D8C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $9B5D.w		; 9C 5D 9B ; Store zero to $9B5D.w
	ora $5DAC.w,X		; 1D AC 5D ; OR accumulator with memory $5DAC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $AB5D.w		; AC 5D AB ; Load $AB5D.w into Y register [Writes: Y Index] [Flags: NZ]
	eor $1DA8.w,X		; 5D A8 1D ; Exclusive OR accumulator with memory $1DA8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sta $5DA8.w,X		; 9D A8 5D ; Store accumulator to $5DA8.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp $1D9D.w,X		; DD 9D 1D ; Compare accumulator $1D9D.w,X [Reads: X Index] [Flags: NCZ]
	sta $8D1D.w		; 8D 1D 8D ; Store accumulator to $8D1D.w [Reads: Accumulator]
	ora $1D72.w,X		; 1D 72 1D ; OR accumulator with memory $1D72.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($1D.b)		; 72 1D ; Add with carry (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($1D.b)		; 72 1D ; Add with carry (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $8D5D.w,X		; 9D 5D 8D ; Store accumulator to $8D5D.w,X [Reads: Accumulator, X Index]
	eor $5D8D.w,X		; 5D 8D 5D ; Exclusive OR accumulator with memory $5D8D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc #$01.b		; E9 01 ; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$01.b		; E9 01 ; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$01.b		; E9 01 ; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sbc #$01.b		; E9 01 ; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora #$DE.b		; 09 DE ; Logical OR #$DE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DB.b		; 09 DB ; Logical OR #$DB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$E9.b		; 09 E9 ; Logical OR #$E9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($DB.b,X)		; 01 DB ; Logical OR ($DB.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$E9.b		; 09 E9 ; Logical OR #$E9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($DA.b,X)		; 01 DA ; Logical OR ($DA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor #$DE.b		; 49 DE ; Exclusive OR #$DE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$DE.b		; 49 DE ; Exclusive OR #$DE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DC.b		; 09 DC ; Logical OR #$DC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$E9.b		; 09 E9 ; Logical OR #$E9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($DD.b,X)		; 01 DD ; Logical OR ($DD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$E9.b		; 09 E9 ; Logical OR #$E9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($DD.b,X)		; 01 DD ; Logical OR ($DD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$DE.b		; 09 DE ; Logical OR #$DE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$DC.b		; 49 DC ; Exclusive OR #$DC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$DB.b		; 49 DB ; Exclusive OR #$DB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$E9.b		; 09 E9 ; Logical OR #$E9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($E9.b,X)		; 01 E9 ; Logical OR ($E9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($DD.b,X)		; 01 DD ; Logical OR ($DD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$DB.b		; 09 DB ; Logical OR #$DB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$E9.b		; 09 E9 ; Logical OR #$E9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($E9.b,X)		; 01 E9 ; Logical OR ($E9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($DD.b,X)		; 01 DD ; Logical OR ($DD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$DB.b		; 09 DB ; Logical OR #$DB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$E9.b		; 09 E9 ; Logical OR #$E9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($E9.b,X)		; 01 E9 ; Logical OR ($E9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($DD.b,X)		; 01 DD ; Logical OR ($DD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$DB.b		; 09 DB ; Logical OR #$DB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$E9.b		; 09 E9 ; Logical OR #$E9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($E9.b,X)		; 01 E9 ; Logical OR ($E9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($DD.b,X)		; 01 DD ; Logical OR ($DD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$E1.b		; 09 E1 ; Logical OR #$E1.b with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $08.b,S		; E3 08 ; Subtract stack-relative $08.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc ($08.b,X)		; E1 08 ; Subtract with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($08.b,X)		; E1 08 ; Subtract with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sep #$08		; E2 08 ; Set processor status bits #$08 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	sbc ($08.b,X)		; E1 08 ; Subtract with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$08.b		; E0 08 ; Compare #$08.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cpx #$48.b		; E0 48 ; Compare #$48.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $48		; F0 48 ; Branch if equal to $F0, $48 [Flow: branch]
	sbc ($08.b,S),Y		; F3 08 ; Subtract with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($48.b,S),Y		; F3 48 ; Subtract with carry (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$08.b		; E0 08 ; Compare #$08.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($08.b),Y		; F1 08 ; Subtract with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $08.b		; E4 08 ; Compare $08.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx #$48.b		; E0 48 ; Compare #$48.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($48.b),Y		; F1 48 ; Subtract with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $48.b		; E4 48 ; Compare $48.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx #$08.b		; E0 08 ; Compare #$08.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($08.b),Y		; F1 08 ; Subtract with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $08.b		; E4 08 ; Compare $08.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx #$48.b		; E0 48 ; Compare #$48.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($48.b),Y		; F1 48 ; Subtract with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $48.b		; E4 48 ; Compare $48.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	pea $F208.w		; F4 08 F2 ; Push absolute address $F208.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $08.b		; E5 08 ; Subtract $08.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cpx #$08.b		; E0 08 ; Compare #$08.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($08.b),Y		; F1 08 ; Subtract with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $08.b		; E4 08 ; Compare $08.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	cpx #$48.b		; E0 48 ; Compare #$48.b with X register [Reads: X Index] [Flags: NCZ]
	sbc ($48.b),Y		; F1 48 ; Subtract with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cpx $48.b		; E4 48 ; Compare $48.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ora #$DB.b		; 09 DB ; Logical OR #$DB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DA.b		; 09 DA ; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$DC.b		; 49 DC ; Exclusive OR #$DC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DD.b		; 09 DD ; Logical OR #$DD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DC.b		; 09 DC ; Logical OR #$DC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$DE.b		; 49 DE ; Exclusive OR #$DE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DE.b		; 09 DE ; Logical OR #$DE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$DF.b		; 49 DF ; Exclusive OR #$DF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DD.b		; 09 DD ; Logical OR #$DD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DF.b		; 09 DF ; Logical OR #$DF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$DF.b		; 49 DF ; Exclusive OR #$DF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$DB.b		; 89 DB ; Test bits #$DB.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$DF.b		; 09 DF ; Logical OR #$DF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$DF.b		; C9 DF ; Compare #$DF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora #$DD.b		; 09 DD ; Logical OR #$DD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DC.b		; 09 DC ; Logical OR #$DC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$DC.b		; 49 DC ; Exclusive OR #$DC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DD.b		; 09 DD ; Logical OR #$DD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DF.b		; 09 DF ; Logical OR #$DF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$DF.b		; 49 DF ; Exclusive OR #$DF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$DB.b		; 89 DB ; Test bits #$DB.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$DA.b		; 09 DA ; Logical OR #$DA.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$DA.b		; 49 DA ; Exclusive OR #$DA.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DB.b		; 09 DB ; Logical OR #$DB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$DF.b		; 09 DF ; Logical OR #$DF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$E3.b		; C9 E3 ; Compare #$E3.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: NCZ]
	eor $48.b,S		; 43 48 ; Exclusive OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc #$48.b		; 69 48 ; Add #$48.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor ($48.b,S),Y		; 53 48 ; XOR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $C8.b		; 46 C8 ; Logical shift right $C8.b [Reads: Direct Page] [Flags: NCZ]
	sbc $08.b,S		; E3 08 ; Subtract stack-relative $08.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	lsr $08.b		; 46 08 ; Logical shift right $08.b [Reads: Direct Page] [Flags: NCZ]
	eor $08.b,S		; 43 08 ; Exclusive OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor ($08.b,S),Y		; 53 08 ; XOR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $88.b		; 46 88 ; Logical shift right $88.b [Reads: Direct Page] [Flags: NCZ]
	sep #$08		; E2 08 ; Set processor status bits #$08 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	lsr $88.b		; 46 88 ; Logical shift right $88.b [Reads: Direct Page] [Flags: NCZ]
	.db $50, $88		; 50 88 ; Branch if overflow clear to $50, $88 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor ($88.b),Y		; 51 88 ; Exclusive OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $C8.b		; 46 C8 ; Logical shift right $C8.b [Reads: Direct Page] [Flags: NCZ]
	sep #$08		; E2 08 ; Set processor status bits #$08 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	lsr $08.b		; 46 08 ; Logical shift right $08.b [Reads: Direct Page] [Flags: NCZ]
	.db $50, $08		; 50 08 ; Branch if overflow clear to $50, $08 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($08.b),Y		; 51 08 ; Exclusive OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: NCZ]
	eor ($08.b)		; 52 08 ; Exclusive OR accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($48.b)		; 52 48 ; Exclusive OR accumulator with memory (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jmp $885C08.l		; 5C 08 5C 88 ; Jump long to $885C08.l [Flow: jump]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	adc ($09.b,S),Y		; 73 09 ; Add with carry (stack relative indirect indexed) ($09.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$28.b		; A0 28 ; Load #$28.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($28.b,X)		; A1 28 ; Load accumulator ($28.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A8.b,X)		; A1 A8 ; Load accumulator ($A8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$A8.b		; A0 A8 ; Load #$A8.b into Y register [Writes: Y Index] [Flags: NZ]
	adc [$08.b]		; 67 08 ; Add with carry (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09EF09.l		; EF 09 EF 09 ; Subtract with carry (long) $09EF09.l [Writes: Accumulator] [Flags: NCVZ]
	adc [$88.b]		; 67 88 ; Add with carry (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc $88.b		; 65 88 ; Add $88.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $48.b		; 65 48 ; Add $48.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc $C8.b		; 65 C8 ; Add $C8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc [$48.b]		; 67 48 ; Add with carry (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09EF09.l		; EF 09 EF 09 ; Subtract with carry (long) $09EF09.l [Writes: Accumulator] [Flags: NCVZ]
	adc [$C8.b]		; 67 C8 ; Add with carry (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$68.b		; A0 68 ; Load #$68.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($68.b,X)		; A1 68 ; Load accumulator ($68.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($E8.b,X)		; A1 E8 ; Load accumulator ($E8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$E8.b		; A0 E8 ; Load #$E8.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$28.b		; A0 28 ; Load #$28.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($28.b,X)		; A1 28 ; Load accumulator ($28.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($A8.b,X)		; A1 A8 ; Load accumulator ($A8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$A8.b		; A0 A8 ; Load #$A8.b into Y register [Writes: Y Index] [Flags: NZ]
	adc [$08.b]		; 67 08 ; Add with carry (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09EF09.l		; EF 09 EF 09 ; Subtract with carry (long) $09EF09.l [Writes: Accumulator] [Flags: NCVZ]
	adc [$88.b]		; 67 88 ; Add with carry (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc $88.b		; 65 88 ; Add $88.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $48.b		; 65 48 ; Add $48.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc $C8.b		; 65 C8 ; Add $C8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc [$48.b]		; 67 48 ; Add with carry (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09EF09.l		; EF 09 EF 09 ; Subtract with carry (long) $09EF09.l [Writes: Accumulator] [Flags: NCVZ]
	adc [$C8.b]		; 67 C8 ; Add with carry (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$68.b		; A0 68 ; Load #$68.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($68.b,X)		; A1 68 ; Load accumulator ($68.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($E8.b,X)		; A1 E8 ; Load accumulator ($E8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$E8.b		; A0 E8 ; Load #$E8.b into Y register [Writes: Y Index] [Flags: NZ]
	lsr $9329.w		; 4E 29 93 ; Logical shift right $9329.w [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	cpx $5E01.w		; EC 01 5E ; Compare $5E01.w with X register [Reads: X Index] [Flags: NCZ]
	and #$98.b		; 29 98 ; Logical AND #$98.b with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpx $EC01.w		; EC 01 EC ; Compare $EC01.w with X register [Reads: X Index] [Flags: NCZ]
	ora ($6E.b,X)		; 01 6E ; Logical OR ($6E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$93.b		; 09 93 ; Logical OR #$93.b with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $A508.w,Y		; 99 08 A5 ; Store accumulator to $A508.w,Y [Reads: Y Index, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($A8.b,S),Y		; 93 A8 ; Store accumulator (stack relative indirect indexed) ($A8.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lsr $99A9.w		; 4E A9 99 ; Logical shift right $99A9.w [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $ECA9.w,X		; 5E A9 EC ; Logical shift right $ECA9.w,X [Reads: X Index] [Flags: NCZ]
	ora ($6E.b,X)		; 01 6E ; Logical OR ($6E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit #$EC.b		; 89 EC ; Test bits #$EC.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($6E.b,X)		; 01 6E ; Logical OR ($6E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor #$EC.b		; 49 EC ; Exclusive OR #$EC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($5E.b,X)		; 01 5E ; Logical OR ($5E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc #$98.b		; 69 98 ; Add #$98.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $9369.w		; 4E 69 93 ; Logical shift right $9369.w [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta ($48.b)		; 92 48 ; Store accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $9348.w,Y		; 99 48 93 ; Store accumulator to $9348.w,Y [Reads: Y Index, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($48.b)		; 92 48 ; Store accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator]
	ror $ECC9.w		; 6E C9 EC ; Rotate right $ECC9.w [Flags: NCZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($99.b,X)		; 01 99 ; Logical OR ($99.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $ECE9.w,X		; 5E E9 EC ; Logical shift right $ECE9.w,X [Reads: X Index] [Flags: NCZ]
	ora ($93.b,X)		; 01 93 ; Logical OR ($93.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($E8.b,S),Y		; 93 E8 ; Store accumulator (stack relative indirect indexed) ($E8.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lsr $6EE9.w		; 4E E9 6E ; Logical shift right $6EE9.w [Flags: NCZ]
	ora #$48.b		; 09 48 ; Logical OR #$48.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($68.b),Y		; 11 68 ; OR accumulator with memory ($68.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($59.b),Y		; 11 59 ; OR accumulator with memory ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($6E.b),Y		; 11 6E ; OR accumulator with memory ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($69.b),Y		; 11 69 ; OR accumulator with memory ($69.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($59.b),Y		; 11 59 ; OR accumulator with memory ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($6E.b),Y		; 51 6E ; Exclusive OR accumulator with memory ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$49.b		; 09 49 ; Logical OR #$49.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($69.b),Y		; 51 69 ; Exclusive OR accumulator with memory ($69.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($59.b),Y		; 51 59 ; Exclusive OR accumulator with memory ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($6E.b),Y		; 11 6E ; OR accumulator with memory ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$48.b		; 49 48 ; Exclusive OR #$48.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($68.b),Y		; 51 68 ; Exclusive OR accumulator with memory ($68.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($59.b),Y		; 51 59 ; Exclusive OR accumulator with memory ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($7E.b),Y		; 51 7E ; Exclusive OR accumulator with memory ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$7E.b		; 09 7E ; Logical OR #$7E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$7E.b		; 89 7E ; Test bits #$7E.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$7E.b		; 09 7E ; Logical OR #$7E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$AE.b		; 89 AE ; Test bits #$AE.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora ($46.b),Y		; 11 46 ; OR accumulator with memory ($46.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($46.b),Y		; 11 46 ; OR accumulator with memory ($46.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($AE.b),Y		; 91 AE ; Store accumulator ($AE.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($AF.b),Y		; 91 AF ; Store accumulator ($AF.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($66.b),Y		; 11 66 ; OR accumulator with memory ($66.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($66.b),Y		; 11 66 ; OR accumulator with memory ($66.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($AF.b),Y		; 91 AF ; Store accumulator ($AF.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($56.b),Y		; 91 56 ; Store accumulator ($56.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($56.b),Y		; 11 56 ; OR accumulator with memory ($56.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($56.b),Y		; 91 56 ; Store accumulator ($56.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($56.b),Y		; 11 56 ; OR accumulator with memory ($56.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($56.b),Y		; 91 56 ; Store accumulator ($56.b),Y [Reads: Direct Page, Y Index, Accumulator]
	eor ($56.b),Y		; 51 56 ; Exclusive OR accumulator with memory ($56.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($56.b),Y		; D1 56 ; Compare accumulator ($56.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor ($56.b),Y		; 51 56 ; Exclusive OR accumulator with memory ($56.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($AF.b),Y		; D1 AF ; Compare accumulator ($AF.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor ($67.b),Y		; 51 67 ; Exclusive OR accumulator with memory ($67.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($67.b),Y		; 11 67 ; OR accumulator with memory ($67.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($AF.b),Y		; 91 AF ; Store accumulator ($AF.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cmp ($AE.b),Y		; D1 AE ; Compare accumulator ($AE.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor ($47.b),Y		; 51 47 ; Exclusive OR accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($47.b),Y		; 11 47 ; OR accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($AE.b),Y		; 91 AE ; Store accumulator ($AE.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cmp ($7E.b),Y		; D1 7E ; Compare accumulator ($7E.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor #$7E.b		; 49 7E ; Exclusive OR #$7E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$7E.b		; C9 7E ; Compare #$7E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor #$7E.b		; 49 7E ; Exclusive OR #$7E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$6E.b		; C9 6E ; Compare #$6E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora #$5E.b		; 09 5E ; Logical OR #$5E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($78.b),Y		; 11 78 ; OR accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($58.b),Y		; 11 58 ; OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($6E.b),Y		; 11 6E ; OR accumulator with memory ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$4E.b		; 49 4E ; Exclusive OR #$4E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($77.b),Y		; 11 77 ; OR accumulator with memory ($77.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($74.b),Y		; 11 74 ; OR accumulator with memory ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($6E.b),Y		; 11 6E ; OR accumulator with memory ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$4E.b		; 09 4E ; Logical OR #$4E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($77.b),Y		; 11 77 ; OR accumulator with memory ($77.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($74.b),Y		; 51 74 ; Exclusive OR accumulator with memory ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($6E.b),Y		; 51 6E ; Exclusive OR accumulator with memory ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$5E.b		; 49 5E ; Exclusive OR #$5E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($78.b),Y		; 51 78 ; Exclusive OR accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($58.b),Y		; 51 58 ; Exclusive OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($7E.b),Y		; 51 7E ; Exclusive OR accumulator with memory ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$7E.b		; 09 7E ; Logical OR #$7E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$7E.b		; 89 7E ; Test bits #$7E.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$7E.b		; 09 7E ; Logical OR #$7E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$AC.b		; 89 AC ; Test bits #$AC.b with accumulator [Reads: Accumulator] [Flags: Z]
	ora ($AD.b),Y		; 11 AD ; OR accumulator with memory ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($AD.b),Y		; 11 AD ; OR accumulator with memory ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($AC.b),Y		; 11 AC ; OR accumulator with memory ($AC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($79.b),Y		; 91 79 ; Store accumulator ($79.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($76.b),Y		; 11 76 ; OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($76.b),Y		; 11 76 ; OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($79.b),Y		; 91 79 ; Store accumulator ($79.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($57.b),Y		; 91 57 ; Store accumulator ($57.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($75.b),Y		; 11 75 ; OR accumulator with memory ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($75.b),Y		; 11 75 ; OR accumulator with memory ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($57.b),Y		; 91 57 ; Store accumulator ($57.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($57.b),Y		; 91 57 ; Store accumulator ($57.b),Y [Reads: Direct Page, Y Index, Accumulator]
	eor ($75.b),Y		; 51 75 ; Exclusive OR accumulator with memory ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($75.b),Y		; 51 75 ; Exclusive OR accumulator with memory ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($57.b),Y		; D1 57 ; Compare accumulator ($57.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($79.b),Y		; D1 79 ; Compare accumulator ($79.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor ($76.b),Y		; 51 76 ; Exclusive OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($76.b),Y		; 51 76 ; Exclusive OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($79.b),Y		; D1 79 ; Compare accumulator ($79.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($AC.b),Y		; D1 AC ; Compare accumulator ($AC.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor ($AD.b),Y		; 51 AD ; Exclusive OR accumulator with memory ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($AD.b),Y		; 51 AD ; Exclusive OR accumulator with memory ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($AC.b),Y		; 51 AC ; Exclusive OR accumulator with memory ($AC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($7E.b),Y		; D1 7E ; Compare accumulator ($7E.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor #$7E.b		; 49 7E ; Exclusive OR #$7E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$7E.b		; C9 7E ; Compare #$7E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor #$7E.b		; 49 7E ; Exclusive OR #$7E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$E7.b		; C9 E7 ; Compare #$E7.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc [$28.b],Y		; F7 28 ; Subtract with carry (long indexed) [$28.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $28.b		; E6 28 ; Increment $28.b [Reads: Direct Page] [Flags: NZ]
	inc $08.b,X		; F6 08 ; Increment memory $08.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc [$68.b]		; E7 68 ; Subtract with carry (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$68.b],Y		; F7 68 ; Subtract with carry (long indexed) [$68.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $68.b		; E6 68 ; Increment $68.b [Reads: Direct Page] [Flags: NZ]
	inc $48.b,X		; F6 48 ; Increment memory $48.b,X [Reads: Direct Page, X Index] [Flags: NZ]
.ACCU 16
	rep #$2D		; C2 2D
	cmp $2D.b,S		; C3 2D ; Compare accumulator (stack relative) $2D.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	bit $3C2D.w		; 2C 2D 3C ; Test bits $3C2D.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora $6DC2.w		; 0D C2 6D ; Logical OR $6DC2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $6D.b,S		; C3 6D ; Compare accumulator (stack relative) $6D.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	bit $3C6D.w		; 2C 6D 3C ; Test bits $3C6D.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor $0942.w		; 4D 42 09 ; Exclusive OR $0942.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $62, $11, $52		; 62 11 52 ; Push effective relative address $62, $11, $52 [Writes: Stack Pointer]
	ora ($43.b),Y		; 11 43 ; OR accumulator with memory ($43.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$1163.w		; 09 63 11 ; Logical OR #$1163.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($11.b,S),Y		; 53 11 ; XOR accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $49.b,S		; 43 49 ; Exclusive OR accumulator with stack relative $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $51.b,S		; 63 51 ; Add with carry (stack relative) $51.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor ($51.b,S),Y		; 53 51 ; XOR accumulator (stack relative indirect indexed) ($51.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $42, $49		; 42 49 ; Reserved instruction
	.db $62, $51, $52		; 62 51 52 ; Push effective relative address $62, $51, $52 [Writes: Stack Pointer]
	eor ($52.b),Y		; 51 52 ; Exclusive OR accumulator with memory ($52.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($62.b),Y		; 91 62 ; Store accumulator ($62.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($42.b),Y		; 91 42 ; Store accumulator ($42.b),Y [Reads: Direct Page, Y Index, Accumulator]
	bit #$9153.w		; 89 53 91 ; Test bits #$9153.w with accumulator [Reads: Accumulator] [Flags: Z]
	adc $91.b,S		; 63 91 ; Add with carry (stack relative) $91.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $89.b,S		; 43 89 ; Exclusive OR accumulator with stack relative $89.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($D1.b,S),Y		; 53 D1 ; XOR accumulator (stack relative indirect indexed) ($D1.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc $D1.b,S		; 63 D1 ; Add with carry (stack relative) $D1.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $C9.b,S		; 43 C9 ; Exclusive OR accumulator with stack relative $C9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($D1.b)		; 52 D1 ; Exclusive OR accumulator with memory (indirect) ($D1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $62, $D1, $42		; 62 D1 42 ; Push effective relative address $62, $D1, $42 [Writes: Stack Pointer]
	cmp #$0944.w		; C9 44 09 ; Compare #$0944.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	mvn $54,$09		; 54 09 54 ; Move block negative $54,$09 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	bit #$8944.w		; [PATTERN: Memory clearing operation] 89 44 89 ; Test bits #$8944.w with accumulator [Reads: Accumulator] [Flags: Z]
	stz $11.b		; 64 11 ; Store zero to $11.b
	adc $11.b		; 65 11 ; Add $11.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $91.b		; 65 91 ; Add $91.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $91.b		; 64 91 ; Store zero to $91.b
	eor $11.b		; 45 11 ; Exclusive OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $11.b,X		; 55 11 ; Exclusive OR accumulator with memory $11.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $91.b,X		; 55 91 ; Exclusive OR accumulator with memory $91.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $91.b		; 45 91 ; Exclusive OR $91.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $51.b		; 45 51 ; Exclusive OR $51.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $51.b,X		; 55 51 ; Exclusive OR accumulator with memory $51.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $D1.b,X		; 55 D1 ; Exclusive OR accumulator with memory $D1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $D1.b		; [PATTERN: Memory clearing operation] 45 D1 ; Exclusive OR $D1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $51.b		; 64 51 ; Store zero to $51.b
	adc $51.b		; 65 51 ; Add $51.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $D1.b		; 65 D1 ; Add $D1.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $D1.b		; 64 D1 ; Store zero to $D1.b
	mvp $54,$49		; 44 49 54 ; Move block positive $54,$49 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor #$C954.w		; 49 54 C9 ; Exclusive OR #$C954.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvp $48,$C9		; 44 C9 48 ; Move block positive $48,$C9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $49.b,X		; 15 49 ; OR accumulator with memory $49.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $48.b,X		; 15 48 ; OR accumulator with memory $48.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $49.b,X		; 55 49 ; Exclusive OR accumulator with memory $49.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $48.b,X		; 55 48 ; Exclusive OR accumulator with memory $48.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $49.b,X		; 15 49 ; OR accumulator with memory $49.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $48.b,X		; 15 48 ; OR accumulator with memory $48.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $49.b,X		; 55 49 ; Exclusive OR accumulator with memory $49.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $87.b,X		; 55 87 ; Exclusive OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $88.b,X		; 15 88 ; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $88.b,X		; 15 88 ; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $87.b,X		; 55 87 ; Exclusive OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $97.b,X		; 55 97 ; Exclusive OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $98.b,X		; 15 98 ; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $98.b,X		; 15 98 ; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $97.b,X		; 55 97 ; Exclusive OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $89.b,X		; 55 89 ; Exclusive OR accumulator with memory $89.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8A.b,X		; 15 8A ; OR accumulator with memory $8A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8A.b,X		; 15 8A ; OR accumulator with memory $8A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $89.b,X		; 55 89 ; Exclusive OR accumulator with memory $89.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $99.b,X		; 55 99 ; Exclusive OR accumulator with memory $99.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9A.b,X		; 15 9A ; OR accumulator with memory $9A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9A.b,X		; 15 9A ; OR accumulator with memory $9A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $99.b,X		; 55 99 ; Exclusive OR accumulator with memory $99.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$0990.w		; 09 90 09 ; Logical OR #$0990.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $49		; 80 49 ; Branch always to $80, $49 [Flow: branch]
	.db $90, $49		; 90 49 ; Branch if carry clear to $90, $49 [Flow: branch]
	.db $90, $89		; 90 89 ; Branch if carry clear to $90, $89 [Flow: branch]
	.db $80, $89		; 80 89 ; Branch always to $80, $89 [Flow: branch]
	.db $90, $C9		; 90 C9 ; Branch if carry clear to $90, $C9 [Flow: branch]
	.db $80, $C9		; 80 C9 ; Branch always to $80, $C9 [Flow: branch]
	sta ($09.b,X)		; 81 09 ; Store accumulator ($09.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($89.b,X)		; 81 89 ; Store accumulator ($89.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($09.b),Y		; 91 09 ; Store accumulator ($09.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($89.b),Y		; 91 89 ; Store accumulator ($89.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($49.b),Y		; 91 49 ; Store accumulator ($49.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($C9.b),Y		; 91 C9 ; Store accumulator ($C9.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($49.b,X)		; 81 49 ; Store accumulator ($49.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($C9.b,X)		; 81 C9 ; Store accumulator ($C9.b,X) [Reads: Direct Page, Accumulator, X Index]
	inc $FC1D.w,X		; FE 1D FC ; Increment memory $FC1D.w,X [Reads: X Index] [Flags: NZ]
	ora $5DFE.w,X		; 1D FE 5D ; OR accumulator with memory $5DFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inc $FC9D.w,X		; FE 9D FC ; Increment memory $FC9D.w,X [Reads: X Index] [Flags: NZ]
	sta $DDFE.w,X		; 9D FE DD ; Store accumulator to $DDFE.w,X [Reads: Accumulator, X Index]
	sbc $FD1D.w,X		; FD 1D FD ; Subtract with carry $FD1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $DDFF.w,X		; 5D FF DD ; Exclusive OR accumulator with memory $DDFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($FF9D.w,X)		; FC 9D FF ; Jump to subroutine indirect indexed ($FF9D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $5DFF.w,X		; 9D FF 5D ; Store accumulator to $5DFF.w,X [Reads: Accumulator, X Index]
	jsr ($FF1D.w,X)		; FC 1D FF ; Jump to subroutine indirect indexed ($FF1D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $DDFF.w,X		; 1D FF DD ; OR accumulator with memory $DDFF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($FE9D.w,X)		; FC 9D FE ; Jump to subroutine indirect indexed ($FE9D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	cmp $9DFE.w,X		; DD FE 9D ; Compare accumulator $9DFE.w,X [Reads: X Index] [Flags: NCZ]
	jsr ($FF9D.w,X)		; FC 9D FF ; Jump to subroutine indirect indexed ($FF9D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sta $5DFF.w,X		; 9D FF 5D ; Store accumulator to $5DFF.w,X [Reads: Accumulator, X Index]
	jsr ($FE1D.w,X)		; FC 1D FE ; Jump to subroutine indirect indexed ($FE1D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	eor $1DFE.w,X		; 5D FE 1D ; Exclusive OR accumulator with memory $1DFE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr ($FF1D.w,X)		; FC 1D FF ; Jump to subroutine indirect indexed ($FF1D.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora $1DF7.w,X		; 1D F7 1D ; OR accumulator with memory $1DF7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	trb $1C41.w		; 1C 41 1C ; Test and reset bits $1C41.w [Reads: Accumulator] [Flags: Z]
	.db $42, $1C		; 42 1C ; Reserved instruction
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b)		; B2 1D ; Load accumulator (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $1D.b,X		; B4 1D ; Load Y register $1D.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$5D.b],Y		; F7 5D ; Subtract with carry (long indexed) [$5D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jmp $425C41.l		; 5C 41 5C 42 ; Jump long to $425C41.l [Flow: jump]
	jmp $F75DB5.l		; 5C B5 5D F7 ; Jump long to $F75DB5.l [Flow: jump]
	ora $1C40.w,X		; 1D 40 1C ; OR accumulator with memory $1C40.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b)		; B2 1D ; Load accumulator (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sbc [$5D.b],Y		; F7 5D ; Subtract with carry (long indexed) [$5D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jmp $145DB5.l		; 5C B5 5D 14 ; Jump long to $145DB5.l [Flow: jump]
	tsb $0C14.w		; 0C 14 0C ; Test and set bits $0C14.w [Reads: Accumulator] [Flags: Z]
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	trb $0C.b		; 14 0C ; Test and reset bits $0C.b [Reads: Accumulator] [Flags: Z]
	trb $8C.b		; 14 8C ; Test and reset bits $8C.b [Reads: Accumulator] [Flags: Z]
	trb $8C.b		; 14 8C ; Test and reset bits $8C.b [Reads: Accumulator] [Flags: Z]
	trb $8C.b		; [PATTERN: Memory clearing operation] 14 8C ; Test and reset bits $8C.b [Reads: Accumulator] [Flags: Z]
	trb $8C.b		; 14 8C ; Test and reset bits $8C.b [Reads: Accumulator] [Flags: Z]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	ror $0C.b		; 66 0C ; Rotate right $0C.b [Reads: Direct Page] [Flags: NCZ]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	ror $0C.b		; [PATTERN: Memory clearing operation] 66 0C ; Rotate right $0C.b [Reads: Direct Page] [Flags: NCZ]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	ror $0C.b		; 66 0C ; Rotate right $0C.b [Reads: Direct Page] [Flags: NCZ]
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	ror $0C.b		; 66 0C ; Rotate right $0C.b [Reads: Direct Page] [Flags: NCZ]
	lsr $0D.b		; 46 0D ; Logical shift right $0D.b [Reads: Direct Page] [Flags: NCZ]
	lsr $0D.b,X		; 56 0D ; Logical shift right $0D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $4715.w,X		; 7E 15 47 ; Rotate right $4715.w,X [Reads: X Index] [Flags: NCZ]
	ora $0D57.w		; 0D 57 0D ; Logical OR $0D57.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $4D4615.l,X		; 7F 15 46 4D ; Add long $4D4615.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $4D.b,X		; 56 4D ; Logical shift right $4D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $4655.w,X		; 7E 55 46 ; Rotate right $4655.w,X [Reads: X Index] [Flags: NCZ]
	ora $4D46.w		; 0D 46 4D ; Logical OR $4D46.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	sta $4DAB.w		; 8D AB 4D ; Store accumulator to $4DAB.w [Reads: Accumulator]
	lsr $0D.b		; 46 0D ; Logical shift right $0D.b [Reads: Direct Page] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ora $0D47.w		; 0D 47 0D ; Logical OR $0D47.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AB4D.w		; AD 4D AB ; Load $AB4D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0D56.w		; 0D 56 0D ; Logical OR $0D56.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $574D.w		; AC 4D 57 ; Load $574D.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $0D47.w		; 0D 47 0D ; Logical OR $0D47.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $460D.w		; AD 0D 46 ; Load $460D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $4DAB.w		; 4D AB 4D ; Exclusive OR $4DAB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $570D.w		; AC 0D 57 ; Load $570D.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $4DAB.w		; 0D AB 4D ; Logical OR $4DAB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $4D.b,X		; 56 4D ; Logical shift right $4D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora #$0960.w		; 09 60 09 ; Logical OR #$0960.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $50, $09		; 50 09 ; Branch if overflow clear to $50, $09 [Flow: branch]
	.db $70, $09		; 70 09 ; Branch if overflow set to $70, $09 [Flow: branch]
	eor ($09.b,X)		; 41 09 ; Exclusive OR accumulator with memory ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($09.b,X)		; 61 09 ; Add with carry ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($09.b),Y		; 51 09 ; Exclusive OR accumulator with memory ($09.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($09.b),Y		; 71 09 ; Add with carry ($09.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($49.b,X)		; 41 49 ; Exclusive OR accumulator with memory ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($49.b,X)		; 61 49 ; Add with carry ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($49.b),Y		; 51 49 ; Exclusive OR accumulator with memory ($49.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($49.b),Y		; 71 49 ; Add with carry ($49.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor #$4960.w		; 49 60 49 ; Exclusive OR #$4960.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $50, $49		; 50 49 ; Branch if overflow clear to $50, $49 [Flow: branch]
	.db $70, $49		; 70 49 ; Branch if overflow set to $70, $49 [Flow: branch]
	.db $42, $0D		; 42 0D ; Reserved instruction
	eor ($0D.b)		; 52 0D ; Exclusive OR accumulator with memory (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora $0D50.w		; 0D 50 0D ; Logical OR $0D50.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($0D.b,X)		; 41 0D ; Exclusive OR accumulator with memory ($0D.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($0D.b),Y		; 51 0D ; Exclusive OR accumulator with memory ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	stx $8F0D.w		; 8E 0D 8F ; Store X register to $8F0D.w [Reads: X Index]
	ora $0D9E.w		; 0D 9E 0D ; Logical OR $0D9E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D430D.l,X		; 9F 0D 43 0D ; Store accumulator (long,X) $0D430D.l,X [Reads: Accumulator, X Index]
	eor ($0D.b,S),Y		; 53 0D ; XOR accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$A80D.w		; A9 0D A8 ; Load #$A80D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $09C8.w		; 0D C8 09 ; Logical OR $09C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec $0D.b		; C6 0D ; Decrement $0D.b [Reads: Direct Page] [Flags: NZ]
	dec $4D.b		; C6 4D ; Decrement $4D.b [Reads: Direct Page] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor #$09CA.w		; 49 CA 09 ; Exclusive OR #$09CA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $0D.b		; 02 0D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $4D.b		; 02 4D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor #$89CA.w		; 49 CA 89 ; Exclusive OR #$89CA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $8D.b		; 02 8D ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $CD.b		; 02 CD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp #$89C8.w		; C9 C8 89 ; Compare #$89C8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	dec $8D.b		; C6 8D ; Decrement $8D.b [Reads: Direct Page] [Flags: NZ]
	dec $CD.b		; C6 CD ; Decrement $CD.b [Reads: Direct Page] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cmp #$09C9.w		; C9 C9 09 ; Compare #$09C9.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp [$0D.b]		; C7 0D ; Compare accumulator (long) [$0D.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$8D.b]		; C7 8D ; Compare accumulator (long) [$8D.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp #$CB89.w		; C9 89 CB ; Compare #$CB89.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora #$0D03.w		; 09 03 0D ; Logical OR #$0D03.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $8D.b,S		; 03 8D ; OR accumulator with stack relative $8D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	bit #$49CB.w		; 89 CB 49 ; Test bits #$49CB.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora $4D.b,S		; 03 4D ; OR accumulator with stack relative $4D.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $CD.b,S		; 03 CD ; OR accumulator with stack relative $CD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	cmp #$49C9.w		; C9 C9 49 ; Compare #$49C9.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	cmp [$4D.b]		; C7 4D ; Compare accumulator (long) [$4D.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$CD.b]		; C7 CD ; Compare accumulator (long) [$CD.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp #$44C9.w		; C9 C9 44 ; Compare #$44C9.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora #$0954.w		; 09 54 09 ; Logical OR #$0954.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvn $44,$89		; 54 89 44 ; Move block negative $44,$89 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	bit #$1164.w		; 89 64 11 ; Test bits #$1164.w with accumulator [Reads: Accumulator] [Flags: Z]
	adc $11.b		; 65 11 ; Add $11.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $91.b		; 65 91 ; Add $91.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $91.b		; 64 91 ; Store zero to $91.b
	eor $11.b		; 45 11 ; Exclusive OR $11.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $11.b,X		; 55 11 ; Exclusive OR accumulator with memory $11.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $91.b,X		; 55 91 ; Exclusive OR accumulator with memory $91.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $91.b		; 45 91 ; Exclusive OR $91.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $51.b		; 45 51 ; Exclusive OR $51.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $51.b,X		; 55 51 ; Exclusive OR accumulator with memory $51.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $D1.b,X		; 55 D1 ; Exclusive OR accumulator with memory $D1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $D1.b		; [PATTERN: Memory clearing operation] 45 D1 ; Exclusive OR $D1.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $51.b		; 64 51 ; Store zero to $51.b
	adc $51.b		; 65 51 ; Add $51.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $D1.b		; 65 D1 ; Add $D1.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $D1.b		; 64 D1 ; Store zero to $D1.b
	mvp $54,$49		; 44 49 54 ; Move block positive $54,$49 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor #$C954.w		; 49 54 C9 ; Exclusive OR #$C954.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvp $46,$C9		; 44 C9 46 ; Move block positive $46,$C9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora ($47.b),Y		; 11 47 ; OR accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($47.b),Y		; 11 47 ; OR accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($46.b),Y		; 91 46 ; Store accumulator ($46.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($66.b),Y		; 91 66 ; Store accumulator ($66.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($67.b),Y		; 11 67 ; OR accumulator with memory ($67.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($67.b),Y		; 11 67 ; OR accumulator with memory ($67.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($66.b),Y		; 91 66 ; Store accumulator ($66.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($56.b),Y		; 91 56 ; Store accumulator ($56.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($57.b),Y		; 11 57 ; OR accumulator with memory ($57.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($57.b),Y		; 11 57 ; OR accumulator with memory ($57.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($56.b),Y		; 91 56 ; Store accumulator ($56.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($56.b),Y		; 91 56 ; Store accumulator ($56.b),Y [Reads: Direct Page, Y Index, Accumulator]
	eor ($57.b),Y		; 51 57 ; Exclusive OR accumulator with memory ($57.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($57.b),Y		; 51 57 ; Exclusive OR accumulator with memory ($57.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($56.b),Y		; D1 56 ; Compare accumulator ($56.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($66.b),Y		; D1 66 ; Compare accumulator ($66.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor ($67.b),Y		; 51 67 ; Exclusive OR accumulator with memory ($67.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($67.b),Y		; 51 67 ; Exclusive OR accumulator with memory ($67.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($66.b),Y		; D1 66 ; Compare accumulator ($66.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($46.b),Y		; D1 46 ; Compare accumulator ($46.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor ($47.b),Y		; 51 47 ; Exclusive OR accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($47.b),Y		; 51 47 ; Exclusive OR accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($46.b),Y		; D1 46 ; Compare accumulator ($46.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($8E.b),Y		; D1 8E ; Compare accumulator ($8E.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ora #$098E.w		; 09 8E 09 ; Logical OR #$098E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stz $C609.w,X		; 9E 09 C6 ; Store zero to $C609.w,X [Reads: X Index]
	trb $1CC6.w		; 1C C6 1C ; Test and reset bits $1CC6.w [Reads: Accumulator] [Flags: Z]
	sta $1CC609.l,X		; 9F 09 C6 1C ; Store accumulator (long,X) $1CC609.l,X [Reads: Accumulator, X Index]
	sta $499E49.l		; 8F 49 9E 49 ; Store accumulator (long) $499E49.l [Reads: Accumulator]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	adc ($09.b)		; 72 09 ; Add with carry (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($09.b)		; 72 09 ; Add with carry (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	sta $099E09.l		; 8F 09 9E 09 ; Store accumulator (long) $099E09.l [Reads: Accumulator]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	dec $1C.b		; C6 1C ; Decrement $1C.b [Reads: Direct Page] [Flags: NZ]
	sta $498E09.l,X		; 9F 09 8E 49 ; Store accumulator (long,X) $498E09.l,X [Reads: Accumulator, X Index]
	stx $9E49.w		; 8E 49 9E ; Store X register to $9E49.w [Reads: X Index]
	eor #$0DE6.w		; 49 E6 0D ; Exclusive OR #$0DE6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc $0D.b,X		; F6 0D ; Increment memory $0D.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $4D.b		; E6 4D ; Increment $4D.b [Reads: Direct Page] [Flags: NZ]
	inc $4D.b,X		; F6 4D ; Increment memory $4D.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	lda #$A91D.w		; A9 1D A9 ; Load #$A91D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1DA9.w,X		; 1D A9 1D ; OR accumulator with memory $1DA9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$A91D.w		; A9 1D A9 ; Load #$A91D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1DA9.w,X		; 1D A9 1D ; OR accumulator with memory $1DA9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$A91D.w		; A9 1D A9 ; Load #$A91D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1DA9.w,X		; 1D A9 1D ; OR accumulator with memory $1DA9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$A91D.w		; A9 1D A9 ; Load #$A91D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1DA9.w,X		; 1D A9 1D ; OR accumulator with memory $1DA9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$A91D.w		; A9 1D A9 ; Load #$A91D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1DA9.w,X		; 1D A9 1D ; OR accumulator with memory $1DA9.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda #$A81D.w		; A9 1D A8 ; Load #$A81D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9DA6.w,X		; 9D A6 9D ; Store accumulator to $9DA6.w,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	cmp $1DA8.w,X		; DD A8 1D ; Compare accumulator $1DA8.w,X [Reads: X Index] [Flags: NCZ]
	ldx $1D.b		; A6 1D ; Load $1D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor $1DA7.w,X		; 5D A7 1D ; Exclusive OR accumulator with memory $1DA7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda [$5D.b]		; A7 5D ; Load accumulator (long) [$5D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $4D.b		; [PATTERN: Memory clearing operation] 66 4D ; Rotate right $4D.b [Reads: Direct Page] [Flags: NCZ]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	mvp $54,$1D		; 44 1D 54 ; Move block positive $54,$1D [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $0D66.w,X		; 1D 66 0D ; OR accumulator with memory $0D66.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $5D.b		; 64 5D ; Store zero to $5D.b
	mvp $54,$5D		; 44 5D 54 ; Move block positive $54,$5D [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $0946.w,X		; 5D 46 09 ; Exclusive OR accumulator with memory $0946.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $09.b		; 66 09 ; Rotate right $09.b [Reads: Direct Page] [Flags: NCZ]
	lsr $09.b,X		; 56 09 ; Logical shift right $09.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldy $470C.w		; AC 0C 47 ; Load $470C.w into Y register [Writes: Y Index] [Flags: NZ]
	ora #$0967.w		; 09 67 09 ; Logical OR #$0967.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor [$09.b],Y		; 57 09 ; Exclusive OR accumulator with memory (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $AC4C.w		; AC 4C AC ; Load $AC4C.w into Y register [Writes: Y Index] [Flags: NZ]
	sty $8956.w		; 8C 56 89 ; Store Y register to $8956.w [Reads: Y Index]
	ror $89.b		; 66 89 ; Rotate right $89.b [Reads: Direct Page] [Flags: NCZ]
	lsr $89.b		; 46 89 ; Logical shift right $89.b [Reads: Direct Page] [Flags: NCZ]
	ldy $57CC.w		; AC CC 57 ; Load $57CC.w into Y register [Writes: Y Index] [Flags: NZ]
	bit #$8967.w		; 89 67 89 ; Test bits #$8967.w with accumulator [Reads: Accumulator] [Flags: Z]
	eor [$89.b]		; 47 89 ; Exclusive OR accumulator with memory (long) [$89.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$0968.w		; 09 68 09 ; Logical OR #$0968.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	ora #$0CAD.w		; 09 AD 0C ; Logical OR #$0CAD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$6909.w		; 49 09 69 ; Exclusive OR #$6909.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0959.w		; 09 59 09 ; Logical OR #$0959.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AD8C.w		; AD 8C AD ; Load $AD8C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $4958.w		; 4C 58 49 ; Jump to $4958.w [Flow: jump]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	eor #$4948.w		; 49 48 49 ; Exclusive OR #$4948.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $59CC.w		; AD CC 59 ; Load $59CC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$4969.w		; 49 69 49 ; Exclusive OR #$4969.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$9449.w		; 49 49 94 ; Exclusive OR #$9449.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	stz $9808.w,X		; 9E 08 98 ; Store zero to $9808.w,X [Reads: X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $9008.w,Y		; 99 08 90 ; Store accumulator to $9008.w,Y [Reads: Y Index, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stx $08.b,Y		; 96 08 ; Store X register $08.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx $08.b		; A6 08 ; Load $08.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$08.b],Y		; 97 08 ; Store accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $920C.w		; AE 0C 92 ; Load $920C.w into X register [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	sty $88.b,X		; 94 88 ; Store Y register $88.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $9E08.w,Y		; 99 08 9E ; Store accumulator to $9E08.w,Y [Reads: Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($88.b),Y		; 91 88 ; Store accumulator ($88.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx $88.b		; A6 88 ; Load $88.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	stx $88.b,Y		; 96 88 ; Store X register $88.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $90, $88		; 90 88 ; Branch if carry clear to $90, $88 [Flow: branch]
	ldx $A38C.w		; AE 8C A3 ; Load $A38C.w into X register [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$88.b],Y		; 97 88 ; Store accumulator (long indexed) [$88.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($88.b),Y		; 91 88 ; Store accumulator ($88.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	stx $08.b,Y		; 96 08 ; Store X register $08.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	ldx $914C.w		; AE 4C 91 ; Load $914C.w into X register [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta [$08.b],Y		; 97 08 ; Store accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index, Accumulator]
	ldx $48.b		; A6 48 ; Load $48.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	stz $9848.w,X		; 9E 48 98 ; Store zero to $9848.w,X [Reads: X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $9448.w,Y		; 99 48 94 ; Store accumulator to $9448.w,Y [Reads: Y Index, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($48.b,S),Y		; 93 48 ; Store accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($48.b)		; 92 48 ; Store accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator]
	sta ($48.b,S),Y		; 93 48 ; Store accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	ldx $A2CC.w		; AE CC A2 ; Load $A2CC.w into X register [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	stx $88.b,Y		; 96 88 ; Store X register $88.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $90, $88		; 90 88 ; Branch if carry clear to $90, $88 [Flow: branch]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx $C8.b		; A6 C8 ; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sta [$88.b],Y		; 97 88 ; Store accumulator (long indexed) [$88.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($88.b),Y		; 91 88 ; Store accumulator ($88.b),Y [Reads: Direct Page, Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $9E48.w,Y		; 99 48 9E ; Store accumulator to $9E48.w,Y [Reads: Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $90, $88		; 90 88 ; Branch if carry clear to $90, $88 [Flow: branch]
	sta ($48.b)		; 92 48 ; Store accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator]
	sta ($48.b,S),Y		; 93 48 ; Store accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($48.b)		; 92 48 ; Store accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator]
	sty $C8.b,X		; 94 C8 ; Store Y register $C8.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	lsr $08.b		; 46 08 ; Logical shift right $08.b [Reads: Direct Page] [Flags: NCZ]
	eor $08.b,S		; 43 08 ; Exclusive OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($08.b,S),Y		; 53 08 ; XOR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $08.b,S		; 43 08 ; Exclusive OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $50, $08		; 50 08 ; Branch if overflow clear to $50, $08 [Flow: branch]
	eor [$08.b]		; 47 08 ; Exclusive OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	mvn $44,$08		; 54 08 44 ; Move block negative $44,$08 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor ($08.b),Y		; 51 08 ; Exclusive OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($08.b,X)		; 61 08 ; Add with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $50, $08		; 50 08 ; Branch if overflow clear to $50, $08 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	ldx $5310.w		; AE 10 53 ; Load $5310.w into X register [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor $08.b,S		; 43 08 ; Exclusive OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($08.b,S),Y		; 53 08 ; XOR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $88.b		; 46 88 ; Logical shift right $88.b [Reads: Direct Page] [Flags: NCZ]
	mvn $44,$08		; 54 08 44 ; Move block negative $44,$08 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor [$88.b]		; 47 88 ; Exclusive OR accumulator with memory (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $50, $88		; 50 88 ; Branch if overflow clear to $50, $88 [Flow: branch]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($88.b,X)		; 61 88 ; Add with carry ($88.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($88.b),Y		; 51 88 ; Exclusive OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $7090.w		; AE 90 70 ; Load $7090.w into X register [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $50, $88		; 50 88 ; Branch if overflow clear to $50, $88 [Flow: branch]
	eor ($08.b),Y		; 51 08 ; Exclusive OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($08.b,X)		; 61 08 ; Add with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	ldx $5050.w		; AE 50 50 ; Load $5050.w into X register [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($08.b),Y		; 51 08 ; Exclusive OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	mvn $44,$48		; 54 48 44 ; Move block negative $44,$48 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $48.b		; 46 48 ; Logical shift right $48.b [Reads: Direct Page] [Flags: NCZ]
	eor $48.b,S		; 43 48 ; Exclusive OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($48.b,S),Y		; 53 48 ; XOR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $48.b,S		; 43 48 ; Exclusive OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $70D0.w		; AE D0 70 ; Load $70D0.w into X register [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($88.b,X)		; 61 88 ; Add with carry ($88.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($88.b),Y		; 51 88 ; Exclusive OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $50, $88		; 50 88 ; Branch if overflow clear to $50, $88 [Flow: branch]
	mvn $44,$48		; 54 48 44 ; Move block negative $44,$48 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$C8.b]		; 47 C8 ; Exclusive OR accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($88.b),Y		; 51 88 ; Exclusive OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($48.b,S),Y		; 53 48 ; XOR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $48.b,S		; 43 48 ; Exclusive OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($48.b,S),Y		; 53 48 ; XOR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr $C8.b		; 46 C8 ; Logical shift right $C8.b [Reads: Direct Page] [Flags: NCZ]
	sta $08.b,X		; 95 08 ; Store accumulator to $08.b,X [Reads: Accumulator, X Index]
	stx $08.b,Y		; 96 08 ; Store X register $08.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	ldy $980C.w		; AC 0C 98 ; Load $980C.w into Y register [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $08A308.l,X		; 9F 08 A3 08 ; Store accumulator (long,X) $08A308.l,X [Reads: Accumulator, X Index]
	ldy $A44C.w		; AC 4C A4 ; Load $A44C.w into Y register [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$08.b]		; A7 08 ; Load accumulator (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $AD0C.w		; AC 0C AD ; Load $AD0C.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $8CAD.w		; 0C AD 8C ; Test and set bits $8CAD.w [Reads: Accumulator] [Flags: Z]
	lda $AF0C.w		; AD 0C AF ; Load $AF0C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $8CAC.w		; 0C AC 8C ; Test and set bits $8CAC.w [Reads: Accumulator] [Flags: Z]
	ldx #$88.b		; A2 88 ; Load #$88.b into X register [Writes: X Index] [Flags: NZ]
	stx $88.b,Y		; 96 88 ; Store X register $88.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $88.b,X		; 95 88 ; Store accumulator to $88.b,X [Reads: Accumulator, X Index]
	ldy $A3CC.w		; AC CC A3 ; Load $A3CC.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $089988.l,X		; 9F 88 99 08 ; Store accumulator (long,X) $089988.l,X [Reads: Accumulator, X Index]
	ldy $A78C.w		; AC 8C A7 ; Load $A78C.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $8CAD8C.l		; AF 8C AD 8C ; Load long $8CAD8C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AD0C.w		; AD 0C AD ; Load $AD0C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $4CAD.w		; 0C AD 4C ; Test and set bits $4CAD.w [Reads: Accumulator] [Flags: Z]
	lda $ADCC.w		; AD CC AD ; Load $ADCC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $4CAF.w		; 4C AF 4C ; Jump to $4CAF.w [Flow: jump]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$48.b]		; A7 48 ; Load accumulator (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $984C.w		; AC 4C 98 ; Load $984C.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $08A248.l,X		; 9F 48 A2 08 ; Store accumulator (long,X) $08A248.l,X [Reads: Accumulator, X Index]
	ldy $950C.w		; AC 0C 95 ; Load $950C.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta [$08.b],Y		; 97 08 ; Store accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $AF4C.w		; AC 4C AF ; Load $AF4C.w into Y register [Writes: Y Index] [Flags: NZ]
	cpy $CCAD.w		; CC AD CC ; Compare $CCAD.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda $AD4C.w		; AD 4C AD ; Load $AD4C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $CCAC.w		; CC AC CC ; Compare $CCAC.w with Y register [Reads: Y Index] [Flags: NCZ]
	lda [$C8.b]		; A7 C8 ; Load accumulator (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $A28C.w		; AC 8C A2 ; Load $A28C.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $4899C8.l,X		; 9F C8 99 48 ; Store accumulator (long,X) $4899C8.l,X [Reads: Accumulator, X Index]
	ldy $A3CC.w		; AC CC A3 ; Load $A3CC.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta [$88.b],Y		; 97 88 ; Store accumulator (long indexed) [$88.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta $C8.b,X		; 95 C8 ; Store accumulator to $C8.b,X [Reads: Accumulator, X Index]
	lsr $08.b,X		; 56 08 ; Logical shift right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc ($08.b,X)		; 61 08 ; Add with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	ldy $5410.w		; AC 10 54 ; Load $5410.w into Y register [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor [$08.b],Y		; 57 08 ; Exclusive OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	ldy $7150.w		; AC 50 71 ; Load $7150.w into Y register [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $AD10.w		; AC 10 AD ; Load $AD10.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $10, $AD		; 10 AD ; Branch if plus to $10, $AD [Flow: branch]
	.db $90, $AD		; 90 AD ; Branch if carry clear to $90, $AD [Flow: branch]
	.db $10, $AF		; 10 AF ; Branch if plus to $10, $AF [Flow: branch]
	.db $10, $AC		; 10 AC ; Branch if plus to $10, $AC [Flow: branch]
	.db $90, $70		; 90 70 ; Branch if carry clear to $90, $70 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($88.b,X)		; 61 88 ; Add with carry ($88.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $88.b,X		; 56 88 ; Logical shift right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ldy $70D0.w		; AC D0 70 ; Load $70D0.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor [$88.b],Y		; 57 88 ; Exclusive OR accumulator with memory (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	mvp $AC,$08		; 44 08 AC ; Move block positive $AC,$08 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $90, $58		; 90 58 ; Branch if carry clear to $90, $58 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $90AD90.l		; AF 90 AD 90 ; Load long $90AD90.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AD10.w		; AD 10 AD ; Load $AD10.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $90, $AD		; 90 AD ; Branch if carry clear to $90, $AD [Flow: branch]
	.db $50, $AD		; 50 AD ; Branch if overflow clear to $50, $AD [Flow: branch]
	.db $D0, $AD		; D0 AD ; Branch if not equal to $D0, $AD [Flow: branch]
	.db $50, $AF		; 50 AF ; Branch if overflow clear to $50, $AF [Flow: branch]
	.db $50, $71		; 50 71 ; Branch if overflow clear to $50, $71 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $5450.w		; AC 50 54 ; Load $5450.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$48.b],Y		; 57 48 ; Exclusive OR accumulator with memory (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	ldy $5610.w		; AC 10 56 ; Load $5610.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	ldy $AF50.w		; AC 50 AF ; Load $AF50.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $AD		; D0 AD ; Branch if not equal to $D0, $AD [Flow: branch]
	.db $D0, $AD		; D0 AD ; Branch if not equal to $D0, $AD [Flow: branch]
	.db $50, $AD		; 50 AD ; Branch if overflow clear to $50, $AD [Flow: branch]
	.db $D0, $AC		; D0 AC ; Branch if not equal to $D0, $AC [Flow: branch]
	.db $D0, $58		; D0 58 ; Branch if not equal to $D0, $58 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $7090.w		; AC 90 70 ; Load $7090.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor [$C8.b],Y		; 57 C8 ; Exclusive OR accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	mvp $AC,$48		; 44 48 AC ; Move block positive $AC,$48 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	.db $D0, $70		; D0 70 ; Branch if not equal to $D0, $70 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lsr $C8.b,X		; 56 C8 ; Logical shift right $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc ($08.b,X)		; 61 08 ; Add with carry ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	ldx $AF50.w		; AE 50 AF ; Load $AF50.w into X register [Writes: X Index] [Flags: NZ]
	.db $50, $60		; 50 60 ; Branch if overflow clear to $50, $60 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $4710.w		; AC 10 47 ; Load $4710.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$48.b],Y		; 57 48 ; Exclusive OR accumulator with memory (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	ldy $AF50.w		; AC 50 AF ; Load $AF50.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $D0, $AE		; D0 AE ; Branch if not equal to $D0, $AE [Flow: branch]
	.db $D0, $70		; D0 70 ; Branch if not equal to $D0, $70 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($88.b,X)		; 61 88 ; Add with carry ($88.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy $5890.w		; AC 90 58 ; Load $5890.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $70D0.w		; AC D0 70 ; Load $70D0.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor [$C8.b],Y		; 57 C8 ; Exclusive OR accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor [$C8.b]		; 47 C8 ; Exclusive OR accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$08.b]		; 47 08 ; Exclusive OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor [$08.b],Y		; 57 08 ; Exclusive OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	ldy $6150.w		; AC 50 61 ; Load $6150.w into Y register [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $6010.w		; AC 10 60 ; Load $6010.w into Y register [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	ldx $AF10.w		; AE 10 AF ; Load $AF10.w into X register [Writes: X Index] [Flags: NZ]
	.db $10, $AC		; 10 AC ; Branch if plus to $10, $AC [Flow: branch]
	.db $D0, $70		; D0 70 ; Branch if not equal to $D0, $70 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor [$88.b],Y		; 57 88 ; Exclusive OR accumulator with memory (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor [$88.b]		; 47 88 ; Exclusive OR accumulator with memory (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $5890.w		; AC 90 58 ; Load $5890.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($88.b,X)		; 61 88 ; Add with carry ($88.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $90AE90.l		; AF 90 AE 90 ; Load long $90AE90.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $70, $88		; 70 88 ; Branch if overflow set to $70, $88 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	mvn $44,$08		; 54 08 44 ; Move block negative $44,$08 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor [$88.b]		; 47 88 ; Exclusive OR accumulator with memory (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor [$88.b],Y		; 57 88 ; Exclusive OR accumulator with memory (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $5890.w		; AE 90 58 ; Load $5890.w into X register [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $90AD90.l		; AF 90 AD 90 ; Load long $90AD90.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $4710.w		; AD 10 47 ; Load $4710.w into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	mvn $44,$08		; 54 08 44 ; Move block negative $44,$08 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	eor [$08.b],Y		; 57 08 ; Exclusive OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $AD10.w		; AE 10 AD ; Load $AD10.w into X register [Writes: X Index] [Flags: NZ]
	.db $90, $AD		; 90 AD ; Branch if carry clear to $90, $AD [Flow: branch]
	.db $10, $AF		; 10 AF ; Branch if plus to $10, $AF [Flow: branch]
	.db $10, $AF		; 10 AF ; Branch if plus to $10, $AF [Flow: branch]
	.db $D0, $AD		; D0 AD ; Branch if not equal to $D0, $AD [Flow: branch]
	.db $D0, $AD		; D0 AD ; Branch if not equal to $D0, $AD [Flow: branch]
	.db $50, $AE		; 50 AE ; Branch if overflow clear to $50, $AE [Flow: branch]
	.db $D0, $58		; D0 58 ; Branch if not equal to $D0, $58 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor [$C8.b],Y		; 57 C8 ; Exclusive OR accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	mvn $44,$48		; 54 48 44 ; Move block negative $44,$48 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor [$C8.b]		; 47 C8 ; Exclusive OR accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $ADD0.w		; AD D0 AD ; Load $ADD0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $50, $AF		; 50 AF ; Branch if overflow clear to $50, $AF [Flow: branch]
	.db $50, $71		; 50 71 ; Branch if overflow clear to $50, $71 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $5750.w		; AE 50 57 ; Load $5750.w into X register [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	mvn $44,$48		; 54 48 44 ; Move block negative $44,$48 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	ora ($0D.b)		; 12 0D ; OR accumulator with memory (indirect) ($0D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $4D.b		; 00 4D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0D.b),Y		; 11 0D ; OR accumulator with memory ($0D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($0D.b,S),Y		; 13 0D ; OR accumulator (stack relative indirect indexed) ($0D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $0D.b		; 04 0D ; Test and set bits $0D.b [Reads: Accumulator] [Flags: Z]
	trb $0D.b		; 14 0D ; Test and reset bits $0D.b [Reads: Accumulator] [Flags: Z]
	bit $0D.b		; 24 0D ; Test bits $0D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $0D.b,X		; 34 0D ; Test bits $0D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora $0D.b		; 05 0D ; Logical OR $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0D.b,X		; 15 0D ; OR accumulator with memory $0D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $0D.b		; 25 0D ; Logical AND $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $0D.b,X		; 35 0D ; Logical AND $0D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $4D.b		; 05 4D ; Logical OR $4D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $4D.b,X		; 15 4D ; OR accumulator with memory $4D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $4D.b		; 25 4D ; Logical AND $4D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $4D.b,X		; 35 4D ; Logical AND $4D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $4D.b		; 04 4D ; Test and set bits $4D.b [Reads: Accumulator] [Flags: Z]
	trb $4D.b		; 14 4D ; Test and reset bits $4D.b [Reads: Accumulator] [Flags: Z]
	bit $4D.b		; 24 4D ; Test bits $4D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $4D.b,X		; 34 4D ; Test bits $4D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	jsl $093209.l		; 22 09 32 09 ; Jump to subroutine long $093209.l [Writes: Stack Pointer] [Flow: call]
	and $09.b,S		; 23 09 ; AND accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($09.b,S),Y		; 33 09 ; AND accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc $0D.b		; E5 0D ; Subtract $0D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0D.b,X		; F5 0D ; Subtract $0D.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4D.b		; E5 4D ; Subtract $4D.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $4D.b,X		; F5 4D ; Subtract $4D.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $0D.b,S		; E3 0D ; Subtract stack-relative $0D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc ($0D.b,S),Y		; F3 0D ; Subtract with carry (stack relative indirect indexed) ($0D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	cpx $0D.b		; E4 0D ; Compare $0D.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	pea $E40D.w		; F4 0D E4 ; Push absolute address $E40D.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	eor $4DF4.w		; 4D F4 4D ; Exclusive OR $4DF4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $4D.b,S		; E3 4D ; Subtract stack-relative $4D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc ($4D.b,S),Y		; F3 4D ; Subtract with carry (stack relative indirect indexed) ($4D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($8D.b,S),Y		; F3 8D ; Subtract with carry (stack relative indirect indexed) ($8D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8D.b,S		; E3 8D ; Subtract stack-relative $8D.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	pea $E48D.w		; F4 8D E4 ; Push absolute address $E48D.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sta $CDF4.w		; 8D F4 CD ; Store accumulator to $CDF4.w [Reads: Accumulator]
	cpx $CD.b		; E4 CD ; Compare $CD.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc ($CD.b,S),Y		; F3 CD ; Subtract with carry (stack relative indirect indexed) ($CD.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sbc $CD.b,S		; E3 CD ; Subtract stack-relative $CD.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora $0D38.w		; 0D 38 0D ; Logical OR $0D38.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	eor $4D38.w		; 4D 38 4D ; Exclusive OR $4D38.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0D3A.w		; 0D 3A 0D ; Logical OR $0D3A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora $0D3B.w		; 0D 3B 0D ; Logical OR $0D3B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	trb $010D.w		; 1C 0D 01 ; Test and reset bits $010D.w [Reads: Accumulator] [Flags: Z]
	eor $4D1C.w		; 4D 1C 4D ; Exclusive OR $4D1C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc $EE0D.w		; EE 0D EE ; Increment $EE0D.w [Flags: NZ]
	sta $4DEE.w		; 8D EE 4D ; Store accumulator to $4DEE.w [Reads: Accumulator]
	inc $EDCD.w		; EE CD ED ; Increment $EDCD.w [Flags: NZ]
	ora $8DED.w		; 0D ED 8D ; Logical OR $8DED.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $ED4D.w		; ED 4D ED ; Subtract $ED4D.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp $0CD2.w		; CD D2 0C ; Compare $0CD2.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsb $0CD3.w		; 0C D3 0C ; Test and set bits $0CD3.w [Reads: Accumulator] [Flags: Z]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	tsb $0CEE.w		; 0C EE 0C ; Test and set bits $0CEE.w [Reads: Accumulator] [Flags: Z]
	inc $EF0C.w,X		; FE 0C EF ; Increment memory $EF0C.w,X [Reads: X Index] [Flags: NZ]
	tsb $0CFF.w		; 0C FF 0C ; Test and set bits $0CFF.w [Reads: Accumulator] [Flags: Z]
	pei ($0C.b)		; D4 0C ; Push effective indirect address ($0C.b) [Reads: Direct Page] [Writes: Stack Pointer]
	dec $0C.b,X		; D6 0C ; Decrement memory $0C.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cmp $0C.b,X		; D5 0C ; Compare accumulator $0C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp [$0C.b],Y		; D7 0C ; Compare accumulator (long indexed) [$0C.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cpx #$0D.b		; E0 0D ; Compare #$0D.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cpx #$4D.b		; E0 4D ; Compare #$4D.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $4D		; F0 4D ; Branch if equal to $F0, $4D [Flow: branch]
	cpy #$0D.b		; C0 0D ; Compare #$0D.b with Y register [Reads: Y Index] [Flags: NCZ]
	cmp ($0D.b,X)		; C1 0D ; Compare accumulator ($0D.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	cpy #$4D.b		; C0 4D ; Compare #$4D.b with Y register [Reads: Y Index] [Flags: NCZ]
	cmp ($4D.b,X)		; C1 4D ; Compare accumulator ($4D.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	eor $5D09.w		; 4D 09 5D ; Exclusive OR $5D09.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$096D.w		; 09 6D 09 ; Logical OR #$096D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $5D49.w		; 4D 49 5D ; Exclusive OR $5D49.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$496D.w		; 49 6D 49 ; Exclusive OR #$496D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta [$15.b]		; 87 15 ; Store accumulator (long) [$15.b] [Reads: Direct Page, Accumulator]
	bit #$9915.w		; 89 15 99 ; Test bits #$9915.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora $88.b,X		; 15 88 ; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8A.b,X		; 15 8A ; OR accumulator with memory $8A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9A.b,X		; 15 9A ; OR accumulator with memory $9A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $88.b,X		; 15 88 ; OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $8A.b,X		; 55 8A ; Exclusive OR accumulator with memory $8A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9A.b,X		; 55 9A ; Exclusive OR accumulator with memory $9A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $87.b,X		; 55 87 ; Exclusive OR accumulator with memory $87.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $89.b,X		; 55 89 ; Exclusive OR accumulator with memory $89.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $99.b,X		; 55 99 ; Exclusive OR accumulator with memory $99.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $8C.b,X		; 55 8C ; Exclusive OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8D.b,X		; 15 8D ; OR accumulator with memory $8D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8D.b,X		; 15 8D ; OR accumulator with memory $8D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $8C.b,X		; 55 8C ; Exclusive OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9C.b,X		; 55 9C ; Exclusive OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9D.b,X		; 15 9D ; OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9D.b,X		; 15 9D ; OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9C.b,X		; 55 9C ; Exclusive OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9C.b,X		; 55 9C ; Exclusive OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9D.b,X		; 15 9D ; OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9D.b,X		; 15 9D ; OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9C.b,X		; 55 9C ; Exclusive OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9C.b,X		; 55 9C ; Exclusive OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9D.b,X		; 15 9D ; OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9D.b,X		; 15 9D ; OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9C.b,X		; 55 9C ; Exclusive OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $8B.b,X		; 55 8B ; Exclusive OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9B.b,X		; 15 9B ; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9B.b,X		; 15 9B ; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $8B.b,X		; 55 8B ; Exclusive OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $4A.b,X		; 55 4A ; Exclusive OR accumulator with memory $4A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $5A.b,X		; 15 5A ; OR accumulator with memory $5A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $6A.b,X		; 15 6A ; OR accumulator with memory $6A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $7A.b,X		; 15 7A ; OR accumulator with memory $7A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $4B.b,X		; 15 4B ; OR accumulator with memory $4B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $5B.b,X		; 15 5B ; OR accumulator with memory $5B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $6B.b,X		; 15 6B ; OR accumulator with memory $6B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $7B.b,X		; 15 7B ; OR accumulator with memory $7B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $4B.b,X		; 15 4B ; OR accumulator with memory $4B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $5B.b,X		; 55 5B ; Exclusive OR accumulator with memory $5B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $6B.b,X		; 55 6B ; Exclusive OR accumulator with memory $6B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $7B.b,X		; 55 7B ; Exclusive OR accumulator with memory $7B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $4A.b,X		; 55 4A ; Exclusive OR accumulator with memory $4A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $5A.b,X		; 55 5A ; Exclusive OR accumulator with memory $5A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $6A.b,X		; 55 6A ; Exclusive OR accumulator with memory $6A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $7A.b,X		; 55 7A ; Exclusive OR accumulator with memory $7A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $25.b,X		; 55 25 ; Exclusive OR accumulator with memory $25.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $63.b,X		; 15 63 ; OR accumulator with memory $63.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $53.b,X		; 15 53 ; OR accumulator with memory $53.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $55.b,X		; 15 55 ; OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $26.b,X		; 15 26 ; OR accumulator with memory $26.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $64.b,X		; 15 64 ; OR accumulator with memory $64.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $54.b,X		; 15 54 ; OR accumulator with memory $54.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $56.b,X		; 15 56 ; OR accumulator with memory $56.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $26.b,X		; 15 26 ; OR accumulator with memory $26.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $64.b,X		; 55 64 ; Exclusive OR accumulator with memory $64.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $54.b,X		; 55 54 ; Exclusive OR accumulator with memory $54.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $56.b,X		; 55 56 ; Exclusive OR accumulator with memory $56.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $25.b,X		; 55 25 ; Exclusive OR accumulator with memory $25.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $63.b,X		; 55 63 ; Exclusive OR accumulator with memory $63.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $53.b,X		; 55 53 ; Exclusive OR accumulator with memory $53.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $1D.b,X		; 55 1D ; Exclusive OR accumulator with memory $1D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1E.b,X		; 15 1E ; OR accumulator with memory $1E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1F.b,X		; 15 1F ; OR accumulator with memory $1F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D.b,X		; 15 1D ; OR accumulator with memory $1D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $1E.b,X		; 55 1E ; Exclusive OR accumulator with memory $1E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $1F.b,X		; 55 1F ; Exclusive OR accumulator with memory $1F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $48.b,X		; 55 48 ; Exclusive OR accumulator with memory $48.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $49.b,X		; 15 49 ; OR accumulator with memory $49.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $48.b,X		; 15 48 ; OR accumulator with memory $48.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $49.b,X		; 55 49 ; Exclusive OR accumulator with memory $49.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $4A.b,X		; 55 4A ; Exclusive OR accumulator with memory $4A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$095A.w		; 09 5A 09 ; Logical OR #$095A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$097A.w		; 09 7A 09 ; Logical OR #$097A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora #$095B.w		; 09 5B 09 ; Logical OR #$095B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$097B.w		; 09 7B 09 ; Logical OR #$097B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor #$495B.w		; 49 5B 49 ; Exclusive OR #$495B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor #$497B.w		; 49 7B 49 ; Exclusive OR #$497B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor #$495A.w		; 49 5A 49 ; Exclusive OR #$495A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor #$497A.w		; 49 7A 49 ; Exclusive OR #$497A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora #$0969.w		; 09 69 09 ; Logical OR #$0969.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$6849.w		; 69 49 68 ; Add #$6849.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor #$0958.w		; 49 58 09 ; Exclusive OR #$0958.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $5909.w,Y		; 59 09 59 ; Exclusive OR accumulator with memory $5909.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$4958.w		; 49 58 49 ; Exclusive OR #$4958.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $6C.b,X		; 15 6C ; OR accumulator with memory $6C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $6C.b,X		; 15 6C ; OR accumulator with memory $6C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $88.b,X		; 55 88 ; Exclusive OR accumulator with memory $88.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $7D.b,X		; 55 7D ; Exclusive OR accumulator with memory $7D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $7C.b,X		; 15 7C ; OR accumulator with memory $7C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $7C.b,X		; 15 7C ; OR accumulator with memory $7C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $7D.b,X		; 55 7D ; Exclusive OR accumulator with memory $7D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A0.b,X		; 55 A0 ; Exclusive OR accumulator with memory $A0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A1.b),Y		; 11 A1 ; OR accumulator with memory ($A1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A0.b),Y		; 11 A0 ; OR accumulator with memory ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($A2.b),Y		; 51 A2 ; Exclusive OR accumulator with memory ($A2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A3.b),Y		; 11 A3 ; OR accumulator with memory ($A3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A2.b),Y		; 11 A2 ; OR accumulator with memory ($A2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($94.b),Y		; 51 94 ; Exclusive OR accumulator with memory ($94.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($95.b),Y		; 11 95 ; OR accumulator with memory ($95.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($94.b),Y		; 11 94 ; OR accumulator with memory ($94.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($4E.b),Y		; 51 4E ; Exclusive OR accumulator with memory ($4E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$095E.w		; 09 5E 09 ; Logical OR #$095E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $AE09.w		; 6E 09 AE ; Rotate right $AE09.w [Flags: NCZ]
	ora #$094F.w		; 09 4F 09 ; Logical OR #$094F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $096F09.l,X		; 5F 09 6F 09 ; Exclusive OR accumulator with memory (long,X) $096F09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $094F09.l		; AF 09 4F 09 ; Load long $094F09.l into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $096F09.l,X		; 5F 09 6F 09 ; Exclusive OR accumulator with memory (long,X) $096F09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $094F09.l		; AF 09 4F 09 ; Load long $094F09.l into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $496F09.l,X		; 5F 09 6F 49 ; Exclusive OR accumulator with memory (long,X) $496F09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $094F09.l		; AF 09 4F 09 ; Load long $094F09.l into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $096F09.l,X		; 5F 09 6F 09 ; Exclusive OR accumulator with memory (long,X) $096F09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $494E09.l		; AF 09 4E 49 ; Load long $494E09.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $6E49.w,X		; 5E 49 6E ; Logical shift right $6E49.w,X [Reads: X Index] [Flags: NCZ]
	eor #$49AE.w		; 49 AE 49 ; Exclusive OR #$49AE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $8D.b		; 84 8D ; Store Y register to $8D.b [Reads: Y Index]
	sty $0D.b		; 84 0D ; Store Y register to $0D.b [Reads: Y Index]
	ror $09.b,X		; 76 09 ; Rotate right $09.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sta $8D.b		; 85 8D ; Store accumulator to $8D.b [Reads: Accumulator]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	adc [$09.b],Y		; 77 09 ; Add with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $0D.b		; 86 0D ; Store X register to $0D.b [Reads: X Index]
	stx $0D.b,Y		; 96 0D ; Store X register $0D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	adc [$09.b],Y		; 77 09 ; Add with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $4D.b		; 86 4D ; Store X register to $4D.b [Reads: X Index]
	stx $4D.b,Y		; 96 4D ; Store X register $4D.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	adc [$49.b],Y		; 77 49 ; Add with carry (long indexed) [$49.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $CD.b		; 85 CD ; Store accumulator to $CD.b [Reads: Accumulator]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	adc [$49.b],Y		; 77 49 ; Add with carry (long indexed) [$49.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sty $CD.b		; 84 CD ; Store Y register to $CD.b [Reads: Y Index]
	sty $4D.b		; 84 4D ; Store Y register to $4D.b [Reads: Y Index]
	ror $49.b,X		; 76 49 ; Rotate right $49.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora #$0979.w		; 09 79 09 ; Logical OR #$0979.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	eor #$4979.w		; 49 79 49 ; Exclusive OR #$4979.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($0D.b)		; 92 0D ; Store accumulator (indirect) ($0D.b) [Reads: Direct Page, Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ora $0D92.w		; 0D 92 0D ; Logical OR $0D92.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ora $0942.w		; 0D 42 09 ; Logical OR $0942.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $82, $09, $92		; 82 09 92 ; Branch always long to $82, $09, $92 [Flow: branch]
	ora #$0943.w		; 09 43 09 ; Logical OR #$0943.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $09.b,S		; 83 09 ; Store accumulator (stack relative) $09.b,S [Reads: Stack Pointer, Accumulator]
	sta ($09.b,S),Y		; 93 09 ; Store accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	eor $49.b,S		; 43 49 ; Exclusive OR accumulator with stack relative $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $49.b,S		; 83 49 ; Store accumulator (stack relative) $49.b,S [Reads: Stack Pointer, Accumulator]
	sta ($49.b,S),Y		; 93 49 ; Store accumulator (stack relative indirect indexed) ($49.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	.db $42, $49		; 42 49 ; Reserved instruction
	.db $82, $49, $92		; 82 49 92 ; Branch always long to $82, $49, $92 [Flow: branch]
	eor #$0CEE.w		; 49 EE 0C ; Exclusive OR #$0CEE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	clc		; 18 ; Clear carry flag [Flags: C]
	inc $FE0C.w		; EE 0C FE ; Increment $FE0C.w [Flags: NZ]
	tsb $18C8.w		; 0C C8 18 ; Test and set bits $18C8.w [Reads: Accumulator] [Flags: Z]
	cmp $D918.w,Y		; D9 18 D9 ; Compare accumulator $D918.w,Y [Reads: Y Index] [Flags: NCZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $18C90C.l,X		; FF 0C C9 18 ; Subtract with carry (long,X) $18C90C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $EE0C.w,X		; FE 0C EE ; Increment memory $EE0C.w,X [Reads: X Index] [Flags: NZ]
	tsb $18D9.w		; 0C D9 18 ; Test and set bits $18D9.w [Reads: Accumulator] [Flags: Z]
	sbc $58D90C.l		; EF 0C D9 58 ; Subtract with carry (long) $58D90C.l [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sbc $11970C.l,X		; FF 0C 97 11 ; Subtract with carry (long,X) $11970C.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($97.b),Y		; 11 97 ; OR accumulator with memory ($97.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($98.b),Y		; 11 98 ; OR accumulator with memory ($98.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($87.b),Y		; 11 87 ; OR accumulator with memory ($87.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($88.b),Y		; 11 88 ; OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($87.b),Y		; 11 87 ; OR accumulator with memory ($87.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($88.b),Y		; 11 88 ; OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($76.b),Y		; 11 76 ; OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D77.w,X		; 1D 77 1D ; OR accumulator with memory $1D77.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ror $5D.b,X		; 76 5D ; Rotate right $5D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc [$5D.b],Y		; 77 5D ; Add with carry (long indexed) [$5D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$9D.b],Y		; 77 9D ; Add with carry (long indexed) [$9D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $9D.b,X		; 76 9D ; Rotate right $9D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc [$DD.b],Y		; 77 DD ; Add with carry (long indexed) [$DD.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $DD.b,X		; 76 DD ; Rotate right $DD.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc $795D.w,Y		; 79 5D 79 ; Add $795D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $5D78.w,X		; DD 78 5D ; Compare accumulator $5D78.w,X [Reads: X Index] [Flags: NCZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	cmp $084C.w,X		; DD 4C 08 ; Compare accumulator $084C.w,X [Reads: X Index] [Flags: NCZ]
	eor $6D08.w,X		; 5D 08 6D ; Exclusive OR accumulator with memory $6D08.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $4F08.w,X		; 7D 08 4F ; Add $4F08.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $6E08.w,X		; 5E 08 6E ; Logical shift right $6E08.w,X [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $4F08.w,X		; 7E 08 4F ; Rotate right $4F08.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $6E48.w,X		; 5E 48 6E ; Logical shift right $6E48.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ror $4C48.w,X		; 7E 48 4C ; Rotate right $4C48.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $6D48.w,X		; 5D 48 6D ; Exclusive OR accumulator with memory $6D48.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $6448.w,X		; 7D 48 64 ; Add $6448.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $08.b		; 66 08 ; Rotate right $08.b [Reads: Direct Page] [Flags: NCZ]
	ror $08.b		; 66 08 ; Rotate right $08.b [Reads: Direct Page] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	ora #$085F.w		; 09 5F 08 ; Logical OR #$085F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $087F08.l		; 6F 08 7F 08 ; Add with carry (long) $087F08.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $5F09.w,Y		; F9 09 5F ; Subtract with carry $5F09.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $487F48.l		; 6F 48 7F 48 ; Add with carry (long) $487F48.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $6449.w,Y		; F9 49 64 ; Subtract with carry $6449.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ror $48.b		; 66 48 ; Rotate right $48.b [Reads: Direct Page] [Flags: NCZ]
	ror $48.b		; 66 48 ; Rotate right $48.b [Reads: Direct Page] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	eor #$084D.w		; 49 4D 08 ; Exclusive OR #$084D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $6D08.w,X		; 5D 08 6D ; Exclusive OR accumulator with memory $6D08.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $4E08.w,X		; 7D 08 4E ; Add $4E08.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lsr $6E08.w,X		; 5E 08 6E ; Logical shift right $6E08.w,X [Reads: X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $4E08.w,X		; 7E 08 4E ; Rotate right $4E08.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lsr $6E48.w,X		; 5E 48 6E ; Logical shift right $6E48.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ror $4D48.w,X		; 7E 48 4D ; Rotate right $4D48.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $6D48.w,X		; 5D 48 6D ; Exclusive OR accumulator with memory $6D48.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $7D48.w,X		; 7D 48 7D ; Add $7D48.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc $5D88.w		; 6D 88 5D ; Add $5D88.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor $7E88.w		; 4D 88 7E ; Exclusive OR $7E88.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ror $5E88.w		; 6E 88 5E ; Rotate right $5E88.w [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lsr $7E88.w		; 4E 88 7E ; Logical shift right $7E88.w [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ror $5EC8.w		; 6E C8 5E ; Rotate right $5EC8.w [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lsr $7DC8.w		; 4E C8 7D ; Logical shift right $7DC8.w [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc $5DC8.w		; 6D C8 5D ; Add $5DC8.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	eor $82C8.w		; 4D C8 82 ; Exclusive OR $82C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0983.w		; 09 83 09 ; Logical OR #$0983.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $49.b,S		; 83 49 ; Store accumulator (stack relative) $49.b,S [Reads: Stack Pointer, Accumulator]
	.db $82, $49, $92		; 82 49 92 ; Branch always long to $82, $49, $92 [Flow: branch]
	ora #$0993.w		; 09 93 09 ; Logical OR #$0993.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($49.b,S),Y		; 93 49 ; Store accumulator (stack relative indirect indexed) ($49.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($49.b)		; 92 49 ; Store accumulator (indirect) ($49.b) [Reads: Direct Page, Accumulator]
	cmp #$F408.w		; C9 08 F4 ; Compare #$F408.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pea $C948.w		; F4 48 C9 ; Push absolute address $C948.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $08.b,X		; F5 08 ; Subtract $08.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $48.b,X		; F5 48 ; Subtract $48.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor ($08.b,X)		; 41 08 ; Exclusive OR accumulator with memory ($08.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $08.b		; 45 08 ; Exclusive OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $88.b		; 45 88 ; Exclusive OR $88.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($88.b,X)		; 41 88 ; Exclusive OR accumulator with memory ($88.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $08		; 42 08 ; Reserved instruction
	eor $08.b,X		; 55 08 ; Exclusive OR accumulator with memory $08.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $88.b		; 45 88 ; Exclusive OR $88.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $42, $88		; 42 88 ; Reserved instruction
	.db $42, $48		; 42 48 ; Reserved instruction
	eor $48.b,X		; 55 48 ; Exclusive OR accumulator with memory $48.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $C8.b,X		; 55 C8 ; Exclusive OR accumulator with memory $C8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $C8		; 42 C8 ; Reserved instruction
	eor ($48.b,X)		; 41 48 ; Exclusive OR accumulator with memory ($48.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $48.b		; 45 48 ; Exclusive OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $C8.b		; 45 C8 ; Exclusive OR $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($C8.b,X)		; 41 C8 ; Exclusive OR accumulator with memory ($C8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $2E28.w,X		; 9D 28 2E ; Store accumulator to $2E28.w,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $9D08.w,X		; 3E 08 9D ; Rotate left $9D08.w,X [Reads: X Index] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and $083F08.l		; 2F 08 3F 08 ; AND accumulator with memory (long) $083F08.l [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clv		; B8 ; Clear overflow flag [Flags: V]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $EF28.w,Y		; B9 28 EF ; Load $EF28.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$0819.w		; 09 19 08 ; Logical OR #$0819.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $EF68.w,Y		; B9 68 EF ; Load $EF68.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$081A.w		; 09 1A 08 ; Logical OR #$081A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $28.b,X		; B5 28 ; Load $28.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora $B708.w		; 0D 08 B7 ; Logical OR $B708.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $3E08.w		; 2E 08 3E ; Rotate left $3E08.w [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$68.b],Y		; B7 68 ; Load accumulator (long indexed) [$68.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $083F08.l		; 2F 08 3F 08 ; AND accumulator with memory (long) $083F08.l [Writes: Accumulator] [Flags: NZ]
	lda $68.b,X		; B5 68 ; Load $68.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora $B548.w		; 0D 48 B5 ; Logical OR $B548.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora $B608.w		; 0D 08 B6 ; Logical OR $B608.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $081909.l		; EF 09 19 08 ; Subtract with carry (long) $081909.l [Writes: Accumulator] [Flags: NCVZ]
	ldx $68.b,Y		; B6 68 ; Load X register $68.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sbc $081A09.l		; EF 09 1A 08 ; Subtract with carry (long) $081A09.l [Writes: Accumulator] [Flags: NCVZ]
	lda $68.b,X		; B5 68 ; Load $68.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora $B848.w		; 0D 48 B8 ; Logical OR $B848.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $9D4C.w		; AC 4C 9D ; Load $9D4C.w into Y register [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$08.b],Y		; 17 08 ; OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $9D0C.w		; AC 0C 9D ; Load $9D0C.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora [$48.b]		; 07 48 ; OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$48.b],Y		; 17 48 ; OR accumulator with memory (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B84C.w		; AC 4C B8 ; Load $B84C.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $B80C.w		; AC 0C B8 ; Load $B80C.w into Y register [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $B94C.w		; AC 4C B9 ; Load $B94C.w into Y register [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $081609.l		; EF 09 16 08 ; Subtract with carry (long) $081609.l [Writes: Accumulator] [Flags: NCVZ]
	ldy $B90C.w		; AC 0C B9 ; Load $B90C.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc $481609.l		; EF 09 16 48 ; Subtract with carry (long) $481609.l [Writes: Accumulator] [Flags: NCVZ]
	ldy $B84C.w		; AC 4C B8 ; Load $B84C.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $AC0C.w		; AC 0C AC ; Load $AC0C.w into Y register [Writes: Y Index] [Flags: NZ]
	sty $8818.w		; 8C 18 88 ; Store Y register to $8818.w [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldy $17CC.w		; AC CC 17 ; Load $17CC.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora [$88.b]		; 07 88 ; OR accumulator with memory (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $ACA8.w,X		; 9D A8 AC ; Store accumulator to $ACA8.w,X [Reads: Accumulator, X Index]
	sty $C817.w		; 8C 17 C8 ; Store Y register to $C817.w [Reads: Y Index]
	ora [$C8.b]		; 07 C8 ; OR accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $ACE8.w,X		; 9D E8 AC ; Store accumulator to $ACE8.w,X [Reads: Accumulator, X Index]
	cpy $C818.w		; CC 18 C8 ; Compare $C818.w with Y register [Reads: Y Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ldy $0D8C.w		; AC 8C 0D ; Load $0D8C.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldy $16CC.w		; AC CC 16 ; Load $16CC.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A8B989.l		; EF 89 B9 A8 ; Subtract with carry (long) $A8B989.l [Writes: Accumulator] [Flags: NCVZ]
	ldy $168C.w		; AC 8C 16 ; Load $168C.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E8B9C9.l		; EF C9 B9 E8 ; Subtract with carry (long) $E8B9C9.l [Writes: Accumulator] [Flags: NCVZ]
	ldy $0DCC.w		; AC CC 0D ; Load $0DCC.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $28.b,X		; B5 28 ; Load $28.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $AC08.w		; 0D 08 AC ; Logical OR $AC08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $50, $B7		; 50 B7 ; Branch if overflow clear to $50, $B7 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$08.b],Y		; 17 08 ; OR accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B710.w		; AC 10 B7 ; Load $B710.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora [$48.b]		; 07 48 ; OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$48.b],Y		; 17 48 ; OR accumulator with memory (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B550.w		; AC 50 B5 ; Load $B550.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $AC48.w		; 0D 48 AC ; Logical OR $AC48.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $B5		; 10 B5 ; Branch if plus to $10, $B5 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $AC08.w		; 0D 08 AC ; Logical OR $AC08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $50, $B6		; 50 B6 ; Branch if overflow clear to $50, $B6 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $081609.l		; EF 09 16 08 ; Subtract with carry (long) $081609.l [Writes: Accumulator] [Flags: NCVZ]
	ldy $B610.w		; AC 10 B6 ; Load $B610.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sbc $481609.l		; EF 09 16 48 ; Subtract with carry (long) $481609.l [Writes: Accumulator] [Flags: NCVZ]
	ldy $B750.w		; AC 50 B7 ; Load $B750.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	.db $10, $48		; 10 48 ; Branch if plus to $10, $48 [Flow: branch]
	ora $AC48.w		; 0D 48 AC ; Logical OR $AC48.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $AC		; 10 AC ; Branch if plus to $10, $AC [Flow: branch]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $A8.b,X		; B5 A8 ; Load $A8.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $17D0.w		; AC D0 17 ; Load $17D0.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora [$88.b]		; 07 88 ; OR accumulator with memory (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$A8.b],Y		; B7 A8 ; Load accumulator (long indexed) [$A8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $1790.w		; AC 90 17 ; Load $1790.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora [$C8.b]		; 07 C8 ; OR accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$E8.b],Y		; B7 E8 ; Load accumulator (long indexed) [$E8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $0DD0.w		; AC D0 0D ; Load $0DD0.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $E8.b,X		; B5 E8 ; Load $E8.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $0D90.w		; AC 90 0D ; Load $0D90.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $A8.b,X		; B5 A8 ; Load $A8.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $16D0.w		; AC D0 16 ; Load $16D0.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A8B689.l		; EF 89 B6 A8 ; Subtract with carry (long) $A8B689.l [Writes: Accumulator] [Flags: NCVZ]
	ldy $1690.w		; AC 90 16 ; Load $1690.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E8B6C9.l		; EF C9 B6 E8 ; Subtract with carry (long) $E8B6C9.l [Writes: Accumulator] [Flags: NCVZ]
	ldy $0DD0.w		; AC D0 0D ; Load $0DD0.w into Y register [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $E8.b,X		; B5 E8 ; Load $E8.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sty $09.b		; 84 09 ; Store Y register to $09.b [Reads: Y Index]
	lda [$09.b]		; A7 09 ; Load accumulator (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $08.b,S		; 43 08 ; Exclusive OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($08.b,S),Y		; 53 08 ; XOR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $09.b		; 84 09 ; Store Y register to $09.b [Reads: Y Index]
	ldy $09.b		; A4 09 ; Load $09.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora #$0854.w		; 09 54 08 ; Logical OR #$0854.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $09.b		; 84 09 ; Store Y register to $09.b [Reads: Y Index]
	sty $09.b,X		; 94 09 ; Store Y register $09.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ldy $09.b		; A4 09 ; Load $09.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora #$0985.w		; 09 85 09 ; Logical OR #$0985.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $09.b,X		; 95 09 ; Store accumulator to $09.b,X [Reads: Accumulator, X Index]
	lda $09.b		; A5 09 ; Load $09.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$8609.w		; A9 09 86 ; Load #$8609.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0996.w		; 09 96 09 ; Logical OR #$0996.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $09.b		; [PATTERN: Memory clearing operation] A6 09 ; Load $09.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	stz $8609.w		; 9C 09 86 ; Store zero to $8609.w
	eor #$4996.w		; 49 96 49 ; Exclusive OR #$4996.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $49.b		; A6 49 ; Load $49.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	stz $8549.w		; 9C 49 85 ; Store zero to $8549.w
	eor #$4995.w		; 49 95 49 ; Exclusive OR #$4995.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $49.b		; A5 49 ; Load $49.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda #$8449.w		; A9 49 84 ; Load #$8449.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$4994.w		; 49 94 49 ; Exclusive OR #$4994.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $49.b		; A4 49 ; Load $49.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor #$4984.w		; 49 84 49 ; Exclusive OR #$4984.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $49.b		; A4 49 ; Load $49.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor #$4854.w		; 49 54 48 ; Exclusive OR #$4854.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $49.b		; 84 49 ; Store Y register to $49.b [Reads: Y Index]
	lda [$49.b]		; A7 49 ; Load accumulator (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $48.b,S		; 43 48 ; Exclusive OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($48.b,S),Y		; 53 48 ; XOR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $09.b		; 84 09 ; Store Y register to $09.b [Reads: Y Index]
	lda [$09.b]		; A7 09 ; Load accumulator (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $08.b,S		; 43 08 ; Exclusive OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($08.b,S),Y		; 53 08 ; XOR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $09.b		; 84 09 ; Store Y register to $09.b [Reads: Y Index]
	sty $09.b,X		; 94 09 ; Store Y register $09.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora #$0854.w		; 09 54 08 ; Logical OR #$0854.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	sta $09.b,X		; 95 09 ; Store accumulator to $09.b,X [Reads: Accumulator, X Index]
	lda $09.b		; A5 09 ; Load $09.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora #$0986.w		; 09 86 09 ; Logical OR #$0986.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $09.b,Y		; 96 09 ; Store X register $09.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx $09.b		; A6 09 ; Load $09.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	stz $CB09.w		; 9C 09 CB ; Store zero to $CB09.w
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	stx $49.b		; 86 49 ; Store X register to $49.b [Reads: X Index]
	stx $49.b,Y		; 96 49 ; Store X register $49.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx $49.b		; A6 49 ; Load $49.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	stz $8549.w		; 9C 49 85 ; Store zero to $8549.w
	eor #$4995.w		; 49 95 49 ; Exclusive OR #$4995.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $49.b		; A5 49 ; Load $49.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor #$4984.w		; 49 84 49 ; Exclusive OR #$4984.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $49.b,X		; 94 49 ; Store Y register $49.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor #$4854.w		; 49 54 48 ; Exclusive OR #$4854.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $49.b		; 84 49 ; Store Y register to $49.b [Reads: Y Index]
	lda [$49.b]		; A7 49 ; Load accumulator (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $48.b,S		; 43 48 ; Exclusive OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($48.b,S),Y		; 53 48 ; XOR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $09.b		; 84 09 ; Store Y register to $09.b [Reads: Y Index]
	lda [$09.b]		; A7 09 ; Load accumulator (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $08.b,S		; 43 08 ; Exclusive OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($08.b,S),Y		; 53 08 ; XOR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	sta $09.b,X		; 95 09 ; Store accumulator to $09.b,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora #$0854.w		; 09 54 08 ; Logical OR #$0854.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $09.b		; 86 09 ; Store X register to $09.b [Reads: X Index]
	stx $09.b,Y		; 96 09 ; Store X register $09.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx $09.b		; A6 09 ; Load $09.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora #$18CA.w		; 09 CA 18 ; Logical OR #$18CA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	stx $49.b		; 86 49 ; Store X register to $49.b [Reads: X Index]
	stx $49.b,Y		; 96 49 ; Store X register $49.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx $49.b		; A6 49 ; Load $49.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor #$4985.w		; 49 85 49 ; Exclusive OR #$4985.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $49.b,X		; 95 49 ; Store accumulator to $49.b,X [Reads: Accumulator, X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor #$4854.w		; 49 54 48 ; Exclusive OR #$4854.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $49.b		; 84 49 ; Store Y register to $49.b [Reads: Y Index]
	lda [$49.b]		; A7 49 ; Load accumulator (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $48.b,S		; 43 48 ; Exclusive OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($48.b,S),Y		; 53 48 ; XOR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda [$09.b]		; A7 09 ; Load accumulator (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $08.b,S		; 43 08 ; Exclusive OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($08.b,S),Y		; 53 08 ; XOR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stx $09.b		; 86 09 ; Store X register to $09.b [Reads: X Index]
	stx $09.b,Y		; 96 09 ; Store X register $09.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora #$0854.w		; 09 54 08 ; Logical OR #$0854.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora #$099B.w		; 09 9B 09 ; Logical OR #$099B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor #$499B.w		; 49 9B 49 ; Exclusive OR #$499B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $49.b		; 86 49 ; Store X register to $49.b [Reads: X Index]
	stx $49.b,Y		; 96 49 ; Store X register $49.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	eor #$4854.w		; 49 54 48 ; Exclusive OR #$4854.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $49.b		; 85 49 ; Store accumulator to $49.b [Reads: Accumulator]
	lda [$49.b]		; A7 49 ; Load accumulator (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $48.b,S		; 43 48 ; Exclusive OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($48.b,S),Y		; 53 48 ; XOR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stx $09.b		; 86 09 ; Store X register to $09.b [Reads: X Index]
	lda [$09.b]		; A7 09 ; Load accumulator (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $08.b,S		; 43 08 ; Exclusive OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($08.b,S),Y		; 53 08 ; XOR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora #$099B.w		; 09 9B 09 ; Logical OR #$099B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvn $71,$08		; 54 08 71 ; Move block negative $71,$08 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc ($08.b),Y		; 71 08 ; Add with carry ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora #$099B.w		; 09 9B 09 ; Logical OR #$099B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor #$499B.w		; 49 9B 49 ; Exclusive OR #$499B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($48.b),Y		; 71 48 ; Add with carry ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor #$499B.w		; 49 9B 49 ; Exclusive OR #$499B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	mvn $86,$48		; 54 48 86 ; Move block negative $86,$48 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor #$49A7.w		; 49 A7 49 ; Exclusive OR #$49A7.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $48.b,S		; 43 48 ; Exclusive OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($48.b,S),Y		; 53 48 ; XOR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; [PATTERN: Memory clearing operation] 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $09.b,X		; 74 09 ; Store zero to $09.b,X [Reads: X Index]
	stz $49.b,X		; 74 49 ; Store zero to $49.b,X [Reads: X Index]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; [PATTERN: Memory clearing operation] 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	stz $89.b,X		; 74 89 ; Store zero to $89.b,X [Reads: X Index]
	stz $C9.b,X		; 74 C9 ; Store zero to $C9.b,X [Reads: X Index]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1D58.w,X		; 1D 58 1D ; OR accumulator with memory $1D58.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora $42.b,X		; 15 42 ; OR accumulator with memory $42.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $62.b,X		; 15 62 ; OR accumulator with memory $62.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $52.b,X		; 15 52 ; OR accumulator with memory $52.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $49.b,X		; 15 49 ; OR accumulator with memory $49.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D59.w,X		; 1D 59 1D ; OR accumulator with memory $1D59.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$431D.w		; 69 1D 43 ; Add #$431D.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora $1D63.w,X		; 1D 63 1D ; OR accumulator with memory $1D63.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($1D.b,S),Y		; 53 1D ; XOR accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $1D70.w,X		; 1D 70 1D ; OR accumulator with memory $1D70.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora $1D61.w,X		; 1D 61 1D ; OR accumulator with memory $1D61.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($1D.b),Y		; 71 1D ; Add with carry ($1D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $611D.w,Y		; 79 1D 61 ; Add $611D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $5D71.w,X		; 5D 71 5D ; Exclusive OR accumulator with memory $5D71.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $605D.w,Y		; 79 5D 60 ; Add $605D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $5D70.w,X		; 5D 70 5D ; Exclusive OR accumulator with memory $5D70.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	eor $298D.w,X		; 5D 8D 29 ; Exclusive OR accumulator with memory $298D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stx $9E29.w		; 8E 29 9E ; Store X register to $9E29.w [Reads: X Index]
	and #$298F.w		; 29 8F 29 ; Logical AND #$298F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $299D29.l,X		; 9F 29 9D 29 ; Store accumulator (long,X) $299D29.l,X [Reads: Accumulator, X Index]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	lda $09.b,S		; A3 09 ; Load accumulator (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx #$49.b		; A2 49 ; Load #$49.b into X register [Writes: X Index] [Flags: NZ]
	lda $49.b,S		; A3 49 ; Load accumulator (stack relative) $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sbc ($19.b,X)		; E1 19 ; Subtract with carry ($19.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($19.b),Y		; F1 19 ; Subtract with carry ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($59.b,X)		; E1 59 ; Subtract with carry ($59.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($59.b),Y		; F1 59 ; Subtract with carry ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
.INDEX 8
	sep #$19		; E2 19
	sbc ($19.b)		; F2 19 ; Subtract with carry (indirect) ($19.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
.INDEX 8
	sep #$59		; E2 59
	sbc ($59.b)		; F2 59 ; Subtract with carry (indirect) ($59.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	jsr $3019.w		; 20 19 30 ; Jump to subroutine at $3019.w [Writes: Stack Pointer] [Flow: call]
	ora $1926.w,Y		; 19 26 19 ; OR accumulator with memory $1926.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($19.b,X)		; 21 19 ; Logical AND ($19.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($19.b),Y		; 31 19 ; AND accumulator with memory ($19.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$19.b]		; 27 19 ; AND accumulator with memory (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($59.b,X)		; 21 59 ; Logical AND ($59.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($59.b),Y		; 31 59 ; AND accumulator with memory ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$59.b]		; 27 59 ; AND accumulator with memory (long) [$59.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $3059.w		; 20 59 30 ; Jump to subroutine at $3059.w [Writes: Stack Pointer] [Flow: call]
	eor $5926.w,Y		; 59 26 59 ; Exclusive OR accumulator with memory $5926.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $19.b		; 06 19 ; Arithmetic shift left $19.b [Reads: Direct Page] [Flags: NCZ]
	asl $19.b,X		; 16 19 ; Arithmetic shift left $19.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $19.b		; 26 19 ; Rotate left $19.b [Reads: Direct Page] [Flags: NCZ]
	ora [$19.b]		; 07 19 ; OR accumulator with memory (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$19.b],Y		; 17 19 ; OR accumulator with memory (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$19.b]		; 27 19 ; AND accumulator with memory (long) [$19.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$59.b]		; 07 59 ; OR accumulator with memory (long) [$59.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$59.b],Y		; 17 59 ; OR accumulator with memory (long indexed) [$59.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$59.b]		; 27 59 ; AND accumulator with memory (long) [$59.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $59.b		; 06 59 ; Arithmetic shift left $59.b [Reads: Direct Page] [Flags: NCZ]
	asl $59.b,X		; 16 59 ; Arithmetic shift left $59.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $59.b		; 26 59 ; Rotate left $59.b [Reads: Direct Page] [Flags: NCZ]
	.db $80, $29		; 80 29 ; Branch always to $80, $29 [Flow: branch]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	ldy #$09.b		; A0 09 ; Load #$09.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($29.b,X)		; 81 29 ; Store accumulator ($29.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($09.b),Y		; 91 09 ; Store accumulator ($09.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda ($09.b,X)		; A1 09 ; Load accumulator ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($29.b,X)		; 81 29 ; Store accumulator ($29.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($09.b),Y		; 91 09 ; Store accumulator ($09.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda ($09.b,X)		; A1 09 ; Load accumulator ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($69.b,X)		; 81 69 ; Store accumulator ($69.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($49.b),Y		; 91 49 ; Store accumulator ($49.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda ($49.b,X)		; A1 49 ; Load accumulator ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($69.b,X)		; 81 69 ; Store accumulator ($69.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($49.b),Y		; 91 49 ; Store accumulator ($49.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda ($49.b,X)		; A1 49 ; Load accumulator ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $69		; 80 69 ; Branch always to $80, $69 [Flow: branch]
	.db $90, $49		; 90 49 ; Branch if carry clear to $90, $49 [Flow: branch]
	lda ($49.b,X)		; A1 49 ; Load accumulator ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$89.b		; A0 89 ; Load #$89.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $90, $89		; 90 89 ; Branch if carry clear to $90, $89 [Flow: branch]
	.db $80, $A9		; 80 A9 ; Branch always to $80, $A9 [Flow: branch]
	lda ($89.b,X)		; A1 89 ; Load accumulator ($89.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($89.b),Y		; 91 89 ; Store accumulator ($89.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($A9.b,X)		; 81 A9 ; Store accumulator ($A9.b,X) [Reads: Direct Page, Accumulator, X Index]
	lda ($89.b,X)		; A1 89 ; Load accumulator ($89.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($89.b),Y		; 91 89 ; Store accumulator ($89.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($A9.b,X)		; 81 A9 ; Store accumulator ($A9.b,X) [Reads: Direct Page, Accumulator, X Index]
	lda ($C9.b,X)		; A1 C9 ; Load accumulator ($C9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($C9.b),Y		; 91 C9 ; Store accumulator ($C9.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($E9.b,X)		; 81 E9 ; Store accumulator ($E9.b,X) [Reads: Direct Page, Accumulator, X Index]
	lda ($C9.b,X)		; A1 C9 ; Load accumulator ($C9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($C9.b),Y		; 91 C9 ; Store accumulator ($C9.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($E9.b,X)		; 81 E9 ; Store accumulator ($E9.b,X) [Reads: Direct Page, Accumulator, X Index]
	ldy #$C9.b		; A0 C9 ; Load #$C9.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $90, $C9		; 90 C9 ; Branch if carry clear to $90, $C9 [Flow: branch]
	.db $80, $E9		; 80 E9 ; Branch always to $80, $E9 [Flow: branch]
	.db $82, $29, $83		; 82 29 83 ; Branch always long to $82, $29, $83 [Flow: branch]
	ora #$09A2.w		; 09 A2 09 ; Logical OR #$09A2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($29.b)		; 92 29 ; Store accumulator (indirect) ($29.b) [Reads: Direct Page, Accumulator]
	sta ($09.b,S),Y		; 93 09 ; Store accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda $09.b,S		; A3 09 ; Load accumulator (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($29.b)		; 92 29 ; Store accumulator (indirect) ($29.b) [Reads: Direct Page, Accumulator]
	sta ($09.b,S),Y		; 93 09 ; Store accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda $09.b,S		; A3 09 ; Load accumulator (stack relative) $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($A9.b)		; 92 A9 ; Store accumulator (indirect) ($A9.b) [Reads: Direct Page, Accumulator]
	sta ($89.b,S),Y		; 93 89 ; Store accumulator (stack relative indirect indexed) ($89.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda $89.b,S		; A3 89 ; Load accumulator (stack relative) $89.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($A9.b)		; 92 A9 ; Store accumulator (indirect) ($A9.b) [Reads: Direct Page, Accumulator]
	sta ($89.b,S),Y		; 93 89 ; Store accumulator (stack relative indirect indexed) ($89.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda $89.b,S		; A3 89 ; Load accumulator (stack relative) $89.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $82, $A9, $83		; 82 A9 83 ; Branch always long to $82, $A9, $83 [Flow: branch]
	bit #$89A2.w		; 89 A2 89 ; Test bits #$89A2.w with accumulator [Reads: Accumulator] [Flags: Z]
	ldx #$49.b		; A2 49 ; Load #$49.b into X register [Writes: X Index] [Flags: NZ]
	sta $49.b,S		; 83 49 ; Store accumulator (stack relative) $49.b,S [Reads: Stack Pointer, Accumulator]
	.db $82, $69, $A3		; 82 69 A3 ; Branch always long to $82, $69, $A3 [Flow: branch]
	eor #$4993.w		; 49 93 49 ; Exclusive OR #$4993.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($69.b)		; 92 69 ; Store accumulator (indirect) ($69.b) [Reads: Direct Page, Accumulator]
	lda $49.b,S		; A3 49 ; Load accumulator (stack relative) $49.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($49.b,S),Y		; 93 49 ; Store accumulator (stack relative indirect indexed) ($49.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($69.b)		; 92 69 ; Store accumulator (indirect) ($69.b) [Reads: Direct Page, Accumulator]
	lda $C9.b,S		; A3 C9 ; Load accumulator (stack relative) $C9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($C9.b,S),Y		; 93 C9 ; Store accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($E9.b)		; 92 E9 ; Store accumulator (indirect) ($E9.b) [Reads: Direct Page, Accumulator]
	lda $C9.b,S		; A3 C9 ; Load accumulator (stack relative) $C9.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta ($C9.b,S),Y		; 93 C9 ; Store accumulator (stack relative indirect indexed) ($C9.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($E9.b)		; 92 E9 ; Store accumulator (indirect) ($E9.b) [Reads: Direct Page, Accumulator]
	ldx #$C9.b		; A2 C9 ; Load #$C9.b into X register [Writes: X Index] [Flags: NZ]
	sta $C9.b,S		; 83 C9 ; Store accumulator (stack relative) $C9.b,S [Reads: Stack Pointer, Accumulator]
	.db $82, $E9, $84		; 82 E9 84 ; Branch always long to $82, $E9, $84 [Flow: branch]
	and #$0990.w		; 29 90 09 ; Logical AND #$0990.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$09.b		; A0 09 ; Load #$09.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $29.b,X		; 94 29 ; Store Y register $29.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta ($09.b),Y		; 91 09 ; Store accumulator ($09.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda ($09.b,X)		; A1 09 ; Load accumulator ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sty $29.b,X		; 94 29 ; Store Y register $29.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta ($09.b),Y		; 91 09 ; Store accumulator ($09.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda ($09.b,X)		; A1 09 ; Load accumulator ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sty $69.b,X		; 94 69 ; Store Y register $69.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta ($49.b),Y		; 91 49 ; Store accumulator ($49.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda ($49.b,X)		; A1 49 ; Load accumulator ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sty $69.b,X		; 94 69 ; Store Y register $69.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sta ($49.b),Y		; 91 49 ; Store accumulator ($49.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda ($49.b,X)		; A1 49 ; Load accumulator ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sty $69.b		; 84 69 ; Store Y register to $69.b [Reads: Y Index]
	.db $90, $49		; 90 49 ; Branch if carry clear to $90, $49 [Flow: branch]
	ldy #$49.b		; A0 49 ; Load #$49.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$89.b		; A0 89 ; Load #$89.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $90, $89		; 90 89 ; Branch if carry clear to $90, $89 [Flow: branch]
	sty $A9.b		; 84 A9 ; Store Y register to $A9.b [Reads: Y Index]
	lda ($89.b,X)		; A1 89 ; Load accumulator ($89.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($89.b),Y		; 91 89 ; Store accumulator ($89.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sty $A9.b,X		; 94 A9 ; Store Y register $A9.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	lda ($89.b,X)		; A1 89 ; Load accumulator ($89.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($89.b),Y		; 91 89 ; Store accumulator ($89.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sty $A9.b,X		; 94 A9 ; Store Y register $A9.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	lda ($C9.b,X)		; A1 C9 ; Load accumulator ($C9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($C9.b),Y		; 91 C9 ; Store accumulator ($C9.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sty $E9.b,X		; 94 E9 ; Store Y register $E9.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	lda ($C9.b,X)		; A1 C9 ; Load accumulator ($C9.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($C9.b),Y		; 91 C9 ; Store accumulator ($C9.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sty $E9.b,X		; 94 E9 ; Store Y register $E9.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ldy #$C9.b		; A0 C9 ; Load #$C9.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $90, $C9		; 90 C9 ; Branch if carry clear to $90, $C9 [Flow: branch]
	sty $E9.b		; 84 E9 ; Store Y register to $E9.b [Reads: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora #$EF08.w		; 09 08 EF ; Logical OR #$EF08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7908.w,Y		; 79 08 79 ; Add $7908.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sbc $89EF09.l		; EF 09 EF 89 ; Subtract with carry (long) $89EF09.l [Writes: Accumulator] [Flags: NCVZ]
	ora #$7988.w		; 09 88 79 ; Logical OR #$7988.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $0A88.w,Y		; 79 88 0A ; Add $0A88.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $7948.w,Y		; 79 48 79 ; Add $7948.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$EF48.w		; 09 48 EF ; Logical OR #$EF48.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$49EF.w		; 49 EF 49 ; Exclusive OR #$49EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	adc $7948.w,Y		; 79 48 79 ; Add $7948.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $C9EF49.l		; EF 49 EF C9 ; Subtract with carry (long) $C9EF49.l [Writes: Accumulator] [Flags: NCVZ]
	ora #$8BC8.w		; 09 C8 8B ; Logical OR #$8BC8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $0888.w		; 0D 88 08 ; Logical OR $0888.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $78A8.w		; 2C A8 78 ; Test bits $78A8.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A82D09.l		; EF 09 2D A8 ; Subtract with carry (long) $A82D09.l [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E82D09.l		; EF 09 2D E8 ; Subtract with carry (long) $E82D09.l [Writes: Accumulator] [Flags: NCVZ]
	ora $08C8.w		; 0D C8 08 ; Logical OR $08C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $80E8.w		; 2C E8 80 ; Test bits $80E8.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora #$0981.w		; 09 81 09 ; Logical OR #$0981.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($49.b,X)		; 81 49 ; Store accumulator ($49.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $80, $49		; 80 49 ; Branch always to $80, $49 [Flow: branch]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	sta ($09.b),Y		; 91 09 ; Store accumulator ($09.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($49.b),Y		; 91 49 ; Store accumulator ($49.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $49		; 90 49 ; Branch if carry clear to $90, $49 [Flow: branch]
	ldy #$09.b		; A0 09 ; Load #$09.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($09.b,X)		; A1 09 ; Load accumulator ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($49.b,X)		; A1 49 ; Load accumulator ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$49.b		; A0 49 ; Load #$49.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	sta ($09.b,X)		; 81 09 ; Store accumulator ($09.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($49.b,X)		; 81 49 ; Store accumulator ($49.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $80, $49		; 80 49 ; Branch always to $80, $49 [Flow: branch]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	sta ($09.b),Y		; 91 09 ; Store accumulator ($09.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($49.b),Y		; 91 49 ; Store accumulator ($49.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $49		; 90 49 ; Branch if carry clear to $90, $49 [Flow: branch]
	ldy #$09.b		; A0 09 ; Load #$09.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($1D.b)		; B2 1D ; Load accumulator (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b)		; B2 1D ; Load accumulator (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$49.b		; A0 49 ; Load #$49.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $29		; 80 29 ; Branch always to $80, $29 [Flow: branch]
	sta ($29.b,X)		; 81 29 ; Store accumulator ($29.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($69.b,X)		; 81 69 ; Store accumulator ($69.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $80, $69		; 80 69 ; Branch always to $80, $69 [Flow: branch]
	.db $90, $29		; 90 29 ; Branch if carry clear to $90, $29 [Flow: branch]
	sta ($29.b),Y		; 91 29 ; Store accumulator ($29.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($69.b),Y		; 91 69 ; Store accumulator ($69.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $69		; 90 69 ; Branch if carry clear to $90, $69 [Flow: branch]
	ldy #$29.b		; A0 29 ; Load #$29.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($3D.b)		; B2 3D ; Load accumulator (indirect) ($3D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($3D.b)		; B2 3D ; Load accumulator (indirect) ($3D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$69.b		; A0 69 ; Load #$69.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($3D.b,S),Y		; B3 3D ; Load accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($3D.b,S),Y		; B3 3D ; Load accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($3D.b,S),Y		; B3 3D ; Load accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($3D.b,S),Y		; B3 3D ; Load accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($3D.b,S),Y		; B3 3D ; Load accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($3D.b,S),Y		; B3 3D ; Load accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($3D.b,S),Y		; B3 3D ; Load accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($3D.b,S),Y		; B3 3D ; Load accumulator (stack relative indirect indexed) ($3D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$09.b		; A0 09 ; Load #$09.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($1D.b)		; B2 1D ; Load accumulator (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($5D.b)		; B2 5D ; Load accumulator (indirect) ($5D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$49.b		; A0 49 ; Load #$49.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	ldy #$09.b		; A0 09 ; Load #$09.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($1D.b)		; B2 1D ; Load accumulator (indirect) ($1D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($5D.b)		; B2 5D ; Load accumulator (indirect) ($5D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$49.b		; A0 49 ; Load #$49.b into Y register [Writes: Y Index] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($1D.b,S),Y		; B3 1D ; Load accumulator (stack relative indirect indexed) ($1D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $1D.b,X		; B5 1D ; Load $1D.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	.db $70, $08		; 70 08 ; Branch if overflow set to $70, $08 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	wai		; CB ; Wait for interrupt
	clc		; 18 ; Clear carry flag [Flags: C]
	cpx $3E01.w		; EC 01 3E ; Compare $3E01.w with X register [Reads: X Index] [Flags: NCZ]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3F.b		; C5 3F ; Compare $3F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3E.b		; C5 3E ; Compare $3E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2A.b		; C5 2A ; Compare $2A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $E8.b		; 45 E8 ; Exclusive OR $E8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $2E.b		; 85 2E ; Store accumulator to $2E.b [Reads: Accumulator]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $2F.b		; C5 2F ; Compare $2F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2E.b		; C5 2E ; Compare $2E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $E8.b		; C5 E8 ; Compare $E8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $E7.b		; 45 E7 ; Exclusive OR $E7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2B.b		; 85 2B ; Store accumulator to $2B.b [Reads: Accumulator]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2B.b		; C5 2B ; Compare $2B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $E7.b		; C5 E7 ; Compare $E7.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $E7.b		; 45 E7 ; Exclusive OR $E7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3B.b		; 85 3B ; Store accumulator to $3B.b [Reads: Accumulator]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3B.b		; C5 3B ; Compare $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $E7.b		; C5 E7 ; Compare $E7.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $E8.b		; 45 E8 ; Exclusive OR $E8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3B.b		; 85 3B ; Store accumulator to $3B.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3B.b		; C5 3B ; Compare $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $E8.b		; C5 E8 ; Compare $E8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2A.b		; C5 2A ; Compare $2A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $2B.b		; 85 2B ; Store accumulator to $2B.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2B.b		; C5 2B ; Compare $2B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2A.b		; C5 2A ; Compare $2A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($3A.b,X)		; 01 3A ; Logical OR ($3A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3B.b		; 85 3B ; Store accumulator to $3B.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3B.b		; C5 3B ; Compare $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3A.b		; C5 3A ; Compare $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $2B.b		; 85 2B ; Store accumulator to $2B.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2B.b		; C5 2B ; Compare $2B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2A.b		; C5 2A ; Compare $2A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3A.b,X)		; 01 3A ; Logical OR ($3A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $2E.b		; 85 2E ; Store accumulator to $2E.b [Reads: Accumulator]
	ora $2F.b		; 05 2F ; Logical OR $2F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2F.b		; 05 2F ; Logical OR $2F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2E.b		; 45 2E ; Exclusive OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3A.b		; C5 3A ; Compare $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2A.b		; C5 2A ; Compare $2A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cmp $3F.b		; C5 3F ; Compare $3F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $3E.b		; 45 3E ; Exclusive OR $3E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b		; 45 EC ; Exclusive OR $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3F.b		; 45 3F ; Exclusive OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3E.b		; C5 3E ; Compare $3E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2A.b		; 45 2A ; Exclusive OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b		; 45 EC ; Exclusive OR $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3A.b,X)		; 01 3A ; Logical OR ($3A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2E.b		; 05 2E ; Logical OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	cmp $2E.b		; C5 2E ; Compare $2E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $3A.b		; 45 3A ; Exclusive OR $3A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b		; 45 EC ; Exclusive OR $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2B.b		; 05 2B ; Logical OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2B.b		; 45 2B ; Exclusive OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2A.b		; 45 2A ; Exclusive OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b		; 45 EC ; Exclusive OR $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3A.b,X)		; 01 3A ; Logical OR ($3A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3B.b		; 05 3B ; Logical OR $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3B.b		; 45 3B ; Exclusive OR $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3A.b		; 45 3A ; Exclusive OR $3A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b		; 45 EC ; Exclusive OR $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2B.b		; 05 2B ; Logical OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2B.b		; 45 2B ; Exclusive OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2A.b		; 45 2A ; Exclusive OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $E8.b		; 45 E8 ; Exclusive OR $E8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3B.b		; 05 3B ; Logical OR $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3B.b		; 45 3B ; Exclusive OR $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $E8.b		; 45 E8 ; Exclusive OR $E8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $E7.b		; 45 E7 ; Exclusive OR $E7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3B.b		; 05 3B ; Logical OR $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3B.b		; 45 3B ; Exclusive OR $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $E7.b		; 45 E7 ; Exclusive OR $E7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $E7.b		; 45 E7 ; Exclusive OR $E7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2B.b		; 05 2B ; Logical OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2B.b		; 45 2B ; Exclusive OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $E7.b		; 45 E7 ; Exclusive OR $E7.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $E8.b		; 45 E8 ; Exclusive OR $E8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2E.b		; 05 2E ; Logical OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2F.b		; 05 2F ; Logical OR $2F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2F.b		; 45 2F ; Exclusive OR $2F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2E.b		; 45 2E ; Exclusive OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $E8.b		; 45 E8 ; Exclusive OR $E8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $2A.b		; C5 2A ; Compare $2A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2A.b		; 45 2A ; Exclusive OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3F.b		; 45 3F ; Exclusive OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3E.b		; 45 3E ; Exclusive OR $3E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b		; 45 EC ; Exclusive OR $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3E.b		; C5 3E ; Compare $3E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3E.b		; C5 3E ; Compare $3E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3A.b,X)		; 01 3A ; Logical OR ($3A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2E.b		; 05 2E ; Logical OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	cmp $2E.b		; C5 2E ; Compare $2E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3E.b		; C5 3E ; Compare $3E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($3D.b,X)		; 01 3D ; Logical OR ($3D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2B.b		; 05 2B ; Logical OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	cmp $2E.b		; C5 2E ; Compare $2E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2A.b		; 05 2A ; Logical OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3B.b		; 05 3B ; Logical OR $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2B.b		; 05 2B ; Logical OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3A.b		; 05 3A ; Logical OR $3A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3B.b		; 05 3B ; Logical OR $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $3B.b		; 85 3B ; Store accumulator to $3B.b [Reads: Accumulator]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3B.b		; 85 3B ; Store accumulator to $3B.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2B.b		; 85 2B ; Store accumulator to $2B.b [Reads: Accumulator]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $2B.b		; 85 2B ; Store accumulator to $2B.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	eor $2E.b		; 45 2E ; Exclusive OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $2A.b		; 85 2A ; Store accumulator to $2A.b [Reads: Accumulator]
	cmp $3A.b		; C5 3A ; Compare $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $2E.b		; 85 2E ; Store accumulator to $2E.b [Reads: Accumulator]
	ora $2F.b		; 05 2F ; Logical OR $2F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2F.b		; 05 2F ; Logical OR $2F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2E.b		; 45 2E ; Exclusive OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	eor $3E.b		; 45 3E ; Exclusive OR $3E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b		; 45 EC ; Exclusive OR $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($2A.b,X)		; 01 2A ; Logical OR ($2A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	eor $3E.b		; 45 3E ; Exclusive OR $3E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b		; 45 EC ; Exclusive OR $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	eor $3E.b		; 45 3E ; Exclusive OR $3E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b		; 45 EC ; Exclusive OR $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3F.b		; 45 3F ; Exclusive OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3E.b		; C5 3E ; Compare $3E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2A.b		; 45 2A ; Exclusive OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b		; 45 EC ; Exclusive OR $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2E.b		; 45 2E ; Exclusive OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	cmp $2E.b		; C5 2E ; Compare $2E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3A.b		; 45 3A ; Exclusive OR $3A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2A.b		; 45 2A ; Exclusive OR $2A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2E.b		; 45 2E ; Exclusive OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2B.b		; 45 2B ; Exclusive OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3A.b		; 45 3A ; Exclusive OR $3A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2B.b		; 45 2B ; Exclusive OR $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3B.b		; 45 3B ; Exclusive OR $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3B.b		; 45 3B ; Exclusive OR $3B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2D.b		; 45 2D ; Exclusive OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3B.b		; C5 3B ; Compare $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3A.b		; C5 3A ; Compare $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cmp $2B.b		; C5 2B ; Compare $2B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3B.b		; C5 3B ; Compare $3B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2A.b		; C5 2A ; Compare $2A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2E.b		; C5 2E ; Compare $2E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $2F.b		; 05 2F ; Logical OR $2F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2D.b		; 05 2D ; Logical OR $2D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2D.b		; C5 2D ; Compare $2D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2B.b		; C5 2B ; Compare $2B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2E.b		; C5 2E ; Compare $2E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora $2F.b		; 05 2F ; Logical OR $2F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $2F.b		; 05 2F ; Logical OR $2F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $2E.b		; 45 2E ; Exclusive OR $2E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b		; 45 3D ; Exclusive OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3A.b		; C5 3A ; Compare $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $2A.b		; C5 2A ; Compare $2A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $EC.b		; C5 EC ; Compare $EC.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($3E.b,X)		; 01 3E ; Logical OR ($3E.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $3F.b		; 05 3F ; Logical OR $3F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $3D.b		; 05 3D ; Logical OR $3D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $3D.b		; C5 3D ; Compare $3D.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $3F.b		; C5 3F ; Compare $3F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	eor $3E.b		; 45 3E ; Exclusive OR $3E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b		; 45 EC ; Exclusive OR $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($9D.b,X)		; 01 9D ; Logical OR ($9D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$098E.w		; 09 8E 09 ; Logical OR #$098E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $8E09.w		; 8E 09 8E ; Store X register to $8E09.w [Reads: X Index]
	ora #$098E.w		; 09 8E 09 ; Logical OR #$098E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $8E09.w		; 8E 09 8E ; Store X register to $8E09.w [Reads: X Index]
	ora #$098E.w		; 09 8E 09 ; Logical OR #$098E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $8E09.w		; 8E 09 8E ; Store X register to $8E09.w [Reads: X Index]
	ora #$098E.w		; 09 8E 09 ; Logical OR #$098E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $8E09.w		; 8E 09 8E ; Store X register to $8E09.w [Reads: X Index]
	ora #$099E.w		; 09 9E 09 ; Logical OR #$099E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $18C609.l,X		; 9F 09 C6 18 ; Store accumulator (long,X) $18C609.l,X [Reads: Accumulator, X Index]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	sta $099F09.l,X		; 9F 09 9F 09 ; Store accumulator (long,X) $099F09.l,X [Reads: Accumulator, X Index]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($9A.b),Y		; 11 9A ; OR accumulator with memory ($9A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($8B.b),Y		; 11 8B ; OR accumulator with memory ($8B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($9B.b),Y		; 11 9B ; OR accumulator with memory ($9B.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A0.b),Y		; 11 A0 ; OR accumulator with memory ($A0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($C6.b),Y		; 11 C6 ; OR accumulator with memory ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	sta $099F09.l,X		; 9F 09 9F 09 ; Store accumulator (long,X) $099F09.l,X [Reads: Accumulator, X Index]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	sta $11.b,S		; 83 11 ; Store accumulator (stack relative) $11.b,S [Reads: Stack Pointer, Accumulator]
	sta ($11.b,S),Y		; 93 11 ; Store accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	.db $82, $11, $92		; 82 11 92 ; Branch always long to $82, $11, $92 [Flow: branch]
	ora ($A1.b),Y		; 11 A1 ; OR accumulator with memory ($A1.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($C6.b),Y		; 11 C6 ; OR accumulator with memory ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	sta $499E49.l		; 8F 49 9E 49 ; Store accumulator (long) $499E49.l [Reads: Accumulator]
	sta $18C609.l,X		; 9F 09 C6 18 ; Store accumulator (long,X) $18C609.l,X [Reads: Accumulator, X Index]
	pei ($18.b)		; D4 18 ; Push effective indirect address ($18.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($98.b)		; D4 98 ; Push effective indirect address ($98.b) [Reads: Direct Page] [Writes: Stack Pointer]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	bit #$8711.w		; 89 11 87 ; Test bits #$8711.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora ($97.b),Y		; 11 97 ; OR accumulator with memory ($97.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($8C.b),Y		; 11 8C ; OR accumulator with memory ($8C.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A2.b),Y		; 11 A2 ; OR accumulator with memory ($A2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($C6.b),Y		; 11 C6 ; OR accumulator with memory ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	adc ($09.b)		; 72 09 ; Add with carry (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($09.b)		; 72 09 ; Add with carry (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $18D609.l,X		; 9F 09 D6 18 ; Store accumulator (long,X) $18D609.l,X [Reads: Accumulator, X Index]
	cmp $18.b,X		; D5 18 ; Compare accumulator $18.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $98.b,X		; D5 98 ; Compare accumulator $98.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	dec $98.b,X		; D6 98 ; Decrement memory $98.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	stz $8811.w		; 9C 11 88 ; Store zero to $8811.w
	ora ($98.b),Y		; 11 98 ; OR accumulator with memory ($98.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($8D.b),Y		; 11 8D ; OR accumulator with memory ($8D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A3.b),Y		; 11 A3 ; OR accumulator with memory ($A3.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($C6.b),Y		; 11 C6 ; OR accumulator with memory ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	dec $18.b		; C6 18 ; Decrement $18.b [Reads: Direct Page] [Flags: NZ]
	adc ($09.b)		; 72 09 ; Add with carry (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($09.b)		; 72 09 ; Add with carry (indirect) ($09.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $09.b,X		; 95 09 ; Store accumulator to $09.b,X [Reads: Accumulator, X Index]
	sta $941D.w,Y		; 99 1D 94 ; Store accumulator to $941D.w,Y [Reads: Y Index, Accumulator]
	ora #$0CAC.w		; 09 AC 0C ; Logical OR #$0CAC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $09.b,X		; 95 09 ; Store accumulator to $09.b,X [Reads: Accumulator, X Index]
	sta $941D.w,Y		; 99 1D 94 ; Store accumulator to $941D.w,Y [Reads: Y Index, Accumulator]
	ora #$0CAC.w		; 09 AC 0C ; Logical OR #$0CAC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	stx $09.b		; 86 09 ; Store X register to $09.b [Reads: X Index]
	ldx $09.b		; A6 09 ; Load $09.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $80, $49		; 80 49 ; Branch always to $80, $49 [Flow: branch]
	.db $90, $49		; 90 49 ; Branch if carry clear to $90, $49 [Flow: branch]
	stx $49.b		; 86 49 ; Store X register to $49.b [Reads: X Index]
	ldx $49.b		; A6 49 ; Load $49.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sta $09.b,X		; 95 09 ; Store accumulator to $09.b,X [Reads: Accumulator, X Index]
	sta $941D.w,Y		; 99 1D 94 ; Store accumulator to $941D.w,Y [Reads: Y Index, Accumulator]
	ora #$0CAC.w		; 09 AC 0C ; Logical OR #$0CAC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $09.b,X		; 95 09 ; Store accumulator to $09.b,X [Reads: Accumulator, X Index]
	sta $941D.w,Y		; 99 1D 94 ; Store accumulator to $941D.w,Y [Reads: Y Index, Accumulator]
	ora #$0CAC.w		; 09 AC 0C ; Logical OR #$0CAC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$1D.b]		; A7 1D ; Load accumulator (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora $1DA4.w,X		; 1D A4 1D ; OR accumulator with memory $1DA4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $08.b,X		; F5 08 ; Subtract $08.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tsb $0981.w		; 0C 81 09 ; Test and set bits $0981.w [Reads: Accumulator] [Flags: Z]
	sta ($09.b),Y		; 91 09 ; Store accumulator ($09.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $09.b		; A5 09 ; Load $09.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($89.b,X)		; 81 89 ; Store accumulator ($89.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($89.b),Y		; 91 89 ; Store accumulator ($89.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $89.b		; 85 89 ; Store accumulator to $89.b [Reads: Accumulator]
	lda $89.b		; A5 89 ; Load $89.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stx $09.b,Y		; 96 09 ; Store X register $09.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $841D.w,Y		; 99 1D 84 ; Store accumulator to $841D.w,Y [Reads: Y Index, Accumulator]
	ora #$0CAD.w		; 09 AD 0C ; Logical OR #$0CAD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $09.b,Y		; 96 09 ; Store X register $09.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $841D.w,Y		; 99 1D 84 ; Store accumulator to $841D.w,Y [Reads: Y Index, Accumulator]
	ora #$0CAD.w		; 09 AD 0C ; Logical OR #$0CAD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $09.b,Y		; 96 09 ; Store X register $09.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $841D.w,Y		; 99 1D 84 ; Store accumulator to $841D.w,Y [Reads: Y Index, Accumulator]
	ora #$0CAD.w		; 09 AD 0C ; Logical OR #$0CAD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $09.b,Y		; 96 09 ; Store X register $09.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta $841D.w,Y		; 99 1D 84 ; Store accumulator to $841D.w,Y [Reads: Y Index, Accumulator]
	ora #$0CAD.w		; 09 AD 0C ; Logical OR #$0CAD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $C798.w,Y		; D9 98 C7 ; Compare accumulator $C798.w,Y [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp [$98.b]		; C7 98 ; Compare accumulator (long) [$98.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$D8.b]		; C7 D8 ; Compare accumulator (long) [$D8.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	trb $CA.b		; 14 CA ; Test and reset bits $CA.b [Reads: Accumulator] [Flags: Z]
	trb $C8.b		; 14 C8 ; Test and reset bits $C8.b [Reads: Accumulator] [Flags: Z]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp [$18.b]		; C7 18 ; Compare accumulator (long) [$18.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$58.b]		; C7 58 ; Compare accumulator (long) [$58.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$18.b]		; C7 18 ; Compare accumulator (long) [$18.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $D958.w,Y		; D9 58 D9 ; Compare accumulator $D958.w,Y [Reads: Y Index] [Flags: NCZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	trb $C7.b		; 14 C7 ; Test and reset bits $C7.b [Reads: Accumulator] [Flags: Z]
	cld		; D8 ; Clear decimal flag [Flags: D]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp [$58.b]		; C7 58 ; Compare accumulator (long) [$58.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$18.b]		; C7 18 ; Compare accumulator (long) [$18.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$D8.b]		; C7 D8 ; Compare accumulator (long) [$D8.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$98.b]		; C7 98 ; Compare accumulator (long) [$98.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp [$18.b]		; C7 18 ; Compare accumulator (long) [$18.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	trb $D9.b		; 14 D9 ; Test and reset bits $D9.b [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	tsb $14CB.w		; 0C CB 14 ; Test and set bits $14CB.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	trb $DA.b		; 14 DA ; Test and reset bits $DA.b [Reads: Accumulator] [Flags: Z]
	trb $D9.b		; 14 D9 ; Test and reset bits $D9.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	cmp [$98.b]		; C7 98 ; Compare accumulator (long) [$98.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$18.b]		; C7 18 ; Compare accumulator (long) [$18.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $C898.w,Y		; D9 98 C8 ; Compare accumulator $C898.w,Y [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp [$58.b]		; C7 58 ; Compare accumulator (long) [$58.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$D8.b]		; C7 D8 ; Compare accumulator (long) [$D8.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$58.b]		; C7 58 ; Compare accumulator (long) [$58.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $C8D8.w,Y		; D9 D8 C8 ; Compare accumulator $C8D8.w,Y [Reads: Y Index] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp [$18.b]		; C7 18 ; Compare accumulator (long) [$18.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp [$98.b]		; C7 98 ; Compare accumulator (long) [$98.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	trb $DB.b		; 14 DB ; Test and reset bits $DB.b [Reads: Accumulator] [Flags: Z]
	trb $D9.b		; 14 D9 ; Test and reset bits $D9.b [Reads: Accumulator] [Flags: Z]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp $CBD8.w,Y		; D9 D8 CB ; Compare accumulator $CBD8.w,Y [Reads: Y Index] [Flags: NCZ]
	trb $DB.b		; 14 DB ; Test and reset bits $DB.b [Reads: Accumulator] [Flags: Z]
	trb $A6.b		; 14 A6 ; Test and reset bits $A6.b [Reads: Accumulator] [Flags: Z]
	sta $8D.b,X		; 95 8D ; Store accumulator to $8D.b,X [Reads: Accumulator, X Index]
	sta $97.b,X		; 95 97 ; Store accumulator to $97.b,X [Reads: Accumulator, X Index]
	lda $A7.b,X		; B5 A7 ; Load $A7.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $9C.b,X		; 95 9C ; Store accumulator to $9C.b,X [Reads: Accumulator, X Index]
	sta $98.b,X		; 95 98 ; Store accumulator to $98.b,X [Reads: Accumulator, X Index]
	lda $A7.b,X		; B5 A7 ; Load $A7.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $9C.b,X		; D5 9C ; Compare accumulator $9C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $98.b,X		; D5 98 ; Compare accumulator $98.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $A6.b,X		; F5 A6 ; Subtract $A6.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $8D.b,X		; D5 8D ; Compare accumulator $8D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $97.b,X		; D5 97 ; Compare accumulator $97.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $87.b,X		; F5 87 ; Subtract $87.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $95.b,X		; B5 95 ; Load $95.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $A0.b,X		; B5 A0 ; Load $A0.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $88.b,X		; 95 88 ; Store accumulator to $88.b,X [Reads: Accumulator, X Index]
	lda $96.b,X		; B5 96 ; Load $96.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $86.b,X		; B5 86 ; Load $86.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $88.b,X		; 95 88 ; Store accumulator to $88.b,X [Reads: Accumulator, X Index]
	sbc $96.b,X		; F5 96 ; Subtract $96.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $86.b,X		; F5 86 ; Subtract $86.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $87.b,X		; D5 87 ; Compare accumulator $87.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sbc $95.b,X		; F5 95 ; Subtract $95.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A0.b,X		; F5 A0 ; Subtract $A0.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $A0.b,X		; D5 A0 ; Compare accumulator $A0.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $95.b,X		; 15 95 ; OR accumulator with memory $95.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $87.b,X		; 35 87 ; Logical AND $87.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $86.b,X		; 35 86 ; Logical AND $86.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $96.b,X		; 35 96 ; Logical AND $96.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $88.b,X		; 35 88 ; Logical AND $88.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $86.b,X		; 35 86 ; Logical AND $86.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $96.b,X		; 75 96 ; Add $96.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $A0.b,X		; 75 A0 ; Add $A0.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $95.b,X		; 55 95 ; Exclusive OR accumulator with memory $95.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $87.b,X		; 75 87 ; Add $87.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $97.b,X		; 75 97 ; Add $97.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and $8D.b,X		; 35 8D ; Logical AND $8D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A6.b,X		; 15 A6 ; OR accumulator with memory $A6.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $98.b,X		; 15 98 ; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $9C.b,X		; 35 9C ; Logical AND $9C.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A7.b,X		; 15 A7 ; OR accumulator with memory $A7.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $98.b,X		; 15 98 ; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $9C.b,X		; 75 9C ; Add $9C.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $A7.b,X		; 55 A7 ; Exclusive OR accumulator with memory $A7.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $97.b,X		; 55 97 ; Exclusive OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $8D.b,X		; 75 8D ; Add $8D.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $A6.b,X		; 55 A6 ; Exclusive OR accumulator with memory $A6.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A4.b,X		; 55 A4 ; Exclusive OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A5.b,X		; 55 A5 ; Exclusive OR accumulator with memory $A5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A5.b,X		; 55 A5 ; Exclusive OR accumulator with memory $A5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $A4.b,X		; D5 A4 ; Compare accumulator $A4.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $8C.b,X		; D5 8C ; Compare accumulator $8C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $9C.b,X		; 55 9C ; Exclusive OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9C.b,X		; 55 9C ; Exclusive OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $8C.b,X		; D5 8C ; Compare accumulator $8C.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $8B.b,X		; D5 8B ; Compare accumulator $8B.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc $9B.b,X		; 75 9B ; Add $9B.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $9B.b,X		; 75 9B ; Add $9B.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8B.b,X		; F5 8B ; Subtract $8B.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8A.b,X		; F5 8A ; Subtract $8A.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $9A.b,X		; 75 9A ; Add $9A.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $9A.b,X		; 75 9A ; Add $9A.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $8A.b,X		; F5 8A ; Subtract $8A.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $89.b,X		; F5 89 ; Subtract $89.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $99.b,X		; 75 99 ; Add $99.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $99.b,X		; 75 99 ; Add $99.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $89.b,X		; F5 89 ; Subtract $89.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A1.b,X		; F5 A1 ; Subtract $A1.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $85.b,X		; 55 85 ; Exclusive OR accumulator with memory $85.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $85.b,X		; 75 85 ; Add $85.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A1.b,X		; F5 A1 ; Subtract $A1.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $A1.b,X		; D5 A1 ; Compare accumulator $A1.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $85.b,X		; 15 85 ; OR accumulator with memory $85.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $85.b,X		; 35 85 ; Logical AND $85.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $A1.b,X		; B5 A1 ; Load $A1.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $89.b,X		; 95 89 ; Store accumulator to $89.b,X [Reads: Accumulator, X Index]
	and $99.b,X		; 35 99 ; Logical AND $99.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $99.b,X		; 35 99 ; Logical AND $99.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $89.b,X		; B5 89 ; Load $89.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $8A.b,X		; B5 8A ; Load $8A.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $9A.b,X		; 35 9A ; Logical AND $9A.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $9A.b,X		; 35 9A ; Logical AND $9A.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $8A.b,X		; B5 8A ; Load $8A.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $8B.b,X		; B5 8B ; Load $8B.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $9B.b,X		; 35 9B ; Logical AND $9B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $9B.b,X		; 35 9B ; Logical AND $9B.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $8B.b,X		; B5 8B ; Load $8B.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $8C.b,X		; B5 8C ; Load $8C.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9C.b,X		; 15 9C ; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9C.b,X		; 15 9C ; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $8C.b,X		; 95 8C ; Store accumulator to $8C.b,X [Reads: Accumulator, X Index]
	sta $A4.b,X		; 95 A4 ; Store accumulator to $A4.b,X [Reads: Accumulator, X Index]
	ora $A5.b,X		; 15 A5 ; OR accumulator with memory $A5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A5.b,X		; 15 A5 ; OR accumulator with memory $A5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A4.b,X		; 95 A4 ; Store accumulator to $A4.b,X [Reads: Accumulator, X Index]
	sta $90.b,X		; 95 90 ; Store accumulator to $90.b,X [Reads: Accumulator, X Index]
	ora $90.b,X		; 15 90 ; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $90.b,X		; 15 90 ; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $90.b,X		; 55 90 ; Exclusive OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $81.b,X		; 95 81 ; Store accumulator to $81.b,X [Reads: Accumulator, X Index]
	ora $90.b,X		; 15 90 ; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $91.b,X		; 15 91 ; OR accumulator with memory $91.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $90.b,X		; 15 90 ; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $92.b,X		; 15 92 ; OR accumulator with memory $92.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $82.b,X		; 15 82 ; OR accumulator with memory $82.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $93.b,X		; 15 93 ; OR accumulator with memory $93.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $83.b,X		; 15 83 ; OR accumulator with memory $83.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $90.b,X		; 15 90 ; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $84.b,X		; 55 84 ; Exclusive OR accumulator with memory $84.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $90.b,X		; 95 90 ; Store accumulator to $90.b,X [Reads: Accumulator, X Index]
	eor $94.b,X		; 55 94 ; Exclusive OR accumulator with memory $94.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A3.b,X		; 15 A3 ; OR accumulator with memory $A3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $90.b,X		; 15 90 ; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A3.b,X		; 15 A3 ; OR accumulator with memory $A3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $90.b,X		; 55 90 ; Exclusive OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $90.b,X		; 55 90 ; Exclusive OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A3.b,X		; 15 A3 ; OR accumulator with memory $A3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $90.b,X		; 95 90 ; Store accumulator to $90.b,X [Reads: Accumulator, X Index]
	eor $A3.b,X		; 55 A3 ; Exclusive OR accumulator with memory $A3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $A2.b,X		; D5 A2 ; Compare accumulator $A2.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	sta $A2.b,X		; 95 A2 ; Store accumulator to $A2.b,X [Reads: Accumulator, X Index]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A2.b,X		; 95 A2 ; Store accumulator to $A2.b,X [Reads: Accumulator, X Index]
	cmp $A2.b,X		; D5 A2 ; Compare accumulator $A2.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor $9D.b,X		; 55 9D ; Exclusive OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9D.b,X		; 15 9D ; OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $9D.b,X		; 95 9D ; Store accumulator to $9D.b,X [Reads: Accumulator, X Index]
	eor $9D.b,X		; 55 9D ; Exclusive OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $C4.b,X		; D5 C4 ; Compare accumulator $C4.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $19C5.w,Y		; 19 C5 19 ; OR accumulator with memory $19C5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	sta ($09.b,X)		; 81 09 ; Store accumulator ($09.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($09.b),Y		; 91 09 ; Store accumulator ($09.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $90, $89		; 90 89 ; Branch if carry clear to $90, $89 [Flow: branch]
	.db $80, $89		; 80 89 ; Branch always to $80, $89 [Flow: branch]
	sta ($89.b),Y		; 91 89 ; Store accumulator ($89.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($89.b,X)		; 81 89 ; Store accumulator ($89.b,X) [Reads: Direct Page, Accumulator, X Index]
	and #$390D.w		; 29 0D 39 ; Logical AND #$390D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $4D29.w		; 0D 29 4D ; Logical OR $4D29.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $CD4D.w,Y		; 39 4D CD ; AND accumulator with memory $CD4D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $19CE.w,Y		; 19 CE 19 ; OR accumulator with memory $19CE.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $CE59.w		; CD 59 CE ; Compare $CE59.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	eor $01EC.w,Y		; 59 EC 01 ; Exclusive OR accumulator with memory $01EC.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $15.b		; 85 15 ; Store accumulator to $15.b [Reads: Accumulator]
	stx $15.b		; 86 15 ; Store X register to $15.b [Reads: X Index]
	sta [$15.b]		; 87 15 ; Store accumulator (long) [$15.b] [Reads: Direct Page, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $89.b,X		; 15 89 ; OR accumulator with memory $89.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $78.b,X		; 15 78 ; OR accumulator with memory $78.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $86.b,X		; 15 86 ; OR accumulator with memory $86.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $85.b,X		; 55 85 ; Exclusive OR accumulator with memory $85.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b,X		; 55 EC ; Exclusive OR accumulator with memory $EC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($94.b,X)		; 01 94 ; Logical OR ($94.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $95.b,X		; 15 95 ; OR accumulator with memory $95.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $96.b,X		; 15 96 ; OR accumulator with memory $96.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $97.b,X		; 15 97 ; OR accumulator with memory $97.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $98.b,X		; 15 98 ; OR accumulator with memory $98.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $99.b,X		; 15 99 ; OR accumulator with memory $99.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $79.b,X		; 15 79 ; OR accumulator with memory $79.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $96.b,X		; 15 96 ; OR accumulator with memory $96.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $95.b,X		; 55 95 ; Exclusive OR accumulator with memory $95.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $94.b,X		; 55 94 ; Exclusive OR accumulator with memory $94.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $8A.b,X		; 55 8A ; Exclusive OR accumulator with memory $8A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8B.b,X		; 15 8B ; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8C.b,X		; 15 8C ; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8D.b,X		; 15 8D ; OR accumulator with memory $8D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8E.b,X		; 15 8E ; OR accumulator with memory $8E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8F.b,X		; 15 8F ; OR accumulator with memory $8F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $72.b,X		; 15 72 ; OR accumulator with memory $72.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8C.b,X		; 15 8C ; OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $8B.b,X		; 55 8B ; Exclusive OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $8A.b,X		; 55 8A ; Exclusive OR accumulator with memory $8A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9A.b,X		; 55 9A ; Exclusive OR accumulator with memory $9A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9B.b,X		; 15 9B ; OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9C.b,X		; 15 9C ; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9D.b,X		; 15 9D ; OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9E.b,X		; 15 9E ; OR accumulator with memory $9E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9F.b,X		; 15 9F ; OR accumulator with memory $9F.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9D.b,X		; 15 9D ; OR accumulator with memory $9D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9C.b,X		; 55 9C ; Exclusive OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9B.b,X		; 55 9B ; Exclusive OR accumulator with memory $9B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9A.b,X		; 55 9A ; Exclusive OR accumulator with memory $9A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $AA.b,X		; 55 AA ; Exclusive OR accumulator with memory $AA.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $AB.b,X		; 15 AB ; OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $AC.b,X		; 15 AC ; OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $AD.b,X		; 15 AD ; OR accumulator with memory $AD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $AE.b,X		; 15 AE ; OR accumulator with memory $AE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $AF.b,X		; 15 AF ; OR accumulator with memory $AF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $AD.b,X		; 15 AD ; OR accumulator with memory $AD.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $AC.b,X		; 55 AC ; Exclusive OR accumulator with memory $AC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $AB.b,X		; 55 AB ; Exclusive OR accumulator with memory $AB.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $AA.b,X		; 55 AA ; Exclusive OR accumulator with memory $AA.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A0.b,X		; 55 A0 ; Exclusive OR accumulator with memory $A0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A1.b,X		; 15 A1 ; OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A2.b,X		; 15 A2 ; OR accumulator with memory $A2.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A3.b,X		; 15 A3 ; OR accumulator with memory $A3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A5.b,X		; 15 A5 ; OR accumulator with memory $A5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A3.b,X		; 15 A3 ; OR accumulator with memory $A3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A2.b,X		; 55 A2 ; Exclusive OR accumulator with memory $A2.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A1.b,X		; 55 A1 ; Exclusive OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A0.b,X		; 55 A0 ; Exclusive OR accumulator with memory $A0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A7.b,X		; 55 A7 ; Exclusive OR accumulator with memory $A7.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A8.b,X		; 15 A8 ; OR accumulator with memory $A8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $4E.b,X		; 15 4E ; OR accumulator with memory $4E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $6E.b,X		; 15 6E ; OR accumulator with memory $6E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $76.b,X		; 15 76 ; OR accumulator with memory $76.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $77.b,X		; 15 77 ; OR accumulator with memory $77.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $6E.b,X		; 15 6E ; OR accumulator with memory $6E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $4E.b,X		; 55 4E ; Exclusive OR accumulator with memory $4E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A8.b,X		; 55 A8 ; Exclusive OR accumulator with memory $A8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A7.b,X		; 55 A7 ; Exclusive OR accumulator with memory $A7.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b,X		; 55 EC ; Exclusive OR accumulator with memory $EC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A9.b,X)		; 01 A9 ; Logical OR ($A9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $5E.b,X		; 15 5E ; OR accumulator with memory $5E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $7E.b,X		; 15 7E ; OR accumulator with memory $7E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $74.b,X		; 15 74 ; OR accumulator with memory $74.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $75.b,X		; 15 75 ; OR accumulator with memory $75.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $7E.b,X		; 15 7E ; OR accumulator with memory $7E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $5E.b,X		; 55 5E ; Exclusive OR accumulator with memory $5E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A9.b,X		; 55 A9 ; Exclusive OR accumulator with memory $A9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $EC.b,X		; 55 EC ; Exclusive OR accumulator with memory $EC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($AA.b,X)		; 01 AA ; Logical OR ($AA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($61.b),Y		; 31 61 ; AND accumulator with memory ($61.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($62.b),Y		; 31 62 ; AND accumulator with memory ($62.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($63.b),Y		; 31 63 ; AND accumulator with memory ($63.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($63.b),Y		; 31 63 ; AND accumulator with memory ($63.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($62.b),Y		; 71 62 ; Add with carry ($62.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($61.b),Y		; 71 61 ; Add with carry ($61.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($AA.b),Y		; 71 AA ; Add with carry ($AA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($EC.b),Y		; 71 EC ; Add with carry ($EC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($EC.b,X)		; 01 EC ; Logical OR ($EC.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($70.b,X)		; 01 70 ; Logical OR ($70.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($71.b),Y		; 31 71 ; AND accumulator with memory ($71.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($72.b),Y		; 31 72 ; AND accumulator with memory ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($7E.b),Y		; 31 7E ; AND accumulator with memory ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($7E.b),Y		; 31 7E ; AND accumulator with memory ($7E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($72.b),Y		; 71 72 ; Add with carry ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($71.b),Y		; 71 71 ; Add with carry ($71.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($70.b),Y		; 71 70 ; Add with carry ($70.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($EC.b),Y		; 71 EC ; Add with carry ($EC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($44.b,X)		; 01 44 ; Logical OR ($44.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($45.b),Y		; 31 45 ; AND accumulator with memory ($45.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($46.b),Y		; 31 46 ; AND accumulator with memory ($46.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($47.b),Y		; 31 47 ; AND accumulator with memory ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($48.b),Y		; 31 48 ; AND accumulator with memory ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($48.b),Y		; 31 48 ; AND accumulator with memory ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($47.b),Y		; 71 47 ; Add with carry ($47.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($46.b),Y		; 71 46 ; Add with carry ($46.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($45.b),Y		; 71 45 ; Add with carry ($45.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($44.b),Y		; 71 44 ; Add with carry ($44.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($54.b),Y		; 71 54 ; Add with carry ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($55.b),Y		; 31 55 ; AND accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($56.b),Y		; 31 56 ; AND accumulator with memory ($56.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($57.b),Y		; 31 57 ; AND accumulator with memory ($57.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($58.b),Y		; 31 58 ; AND accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($58.b),Y		; 31 58 ; AND accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($57.b),Y		; 71 57 ; Add with carry ($57.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($56.b),Y		; 71 56 ; Add with carry ($56.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($55.b),Y		; 71 55 ; Add with carry ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($54.b),Y		; 71 54 ; Add with carry ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($64.b),Y		; 71 64 ; Add with carry ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($65.b),Y		; 31 65 ; AND accumulator with memory ($65.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($66.b),Y		; 31 66 ; AND accumulator with memory ($66.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($67.b),Y		; 31 67 ; AND accumulator with memory ($67.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($68.b),Y		; 31 68 ; AND accumulator with memory ($68.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($68.b),Y		; 31 68 ; AND accumulator with memory ($68.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($67.b),Y		; 71 67 ; Add with carry ($67.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($66.b),Y		; 71 66 ; Add with carry ($66.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($65.b),Y		; 71 65 ; Add with carry ($65.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($64.b),Y		; 71 64 ; Add with carry ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($74.b),Y		; 71 74 ; Add with carry ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($75.b),Y		; 31 75 ; AND accumulator with memory ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($76.b),Y		; 31 76 ; AND accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($77.b),Y		; 31 77 ; AND accumulator with memory ($77.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($78.b),Y		; 31 78 ; AND accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($78.b),Y		; 31 78 ; AND accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($77.b),Y		; 71 77 ; Add with carry ($77.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($76.b),Y		; 71 76 ; Add with carry ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($75.b),Y		; 71 75 ; Add with carry ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($74.b),Y		; 71 74 ; Add with carry ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($49.b),Y		; 71 49 ; Add with carry ($49.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($59.b),Y		; 31 59 ; AND accumulator with memory ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($69.b),Y		; 31 69 ; AND accumulator with memory ($69.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($79.b),Y		; 31 79 ; AND accumulator with memory ($79.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($AF.b),Y		; 31 AF ; AND accumulator with memory ($AF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($AF.b),Y		; 31 AF ; AND accumulator with memory ($AF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($79.b),Y		; 71 79 ; Add with carry ($79.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($69.b),Y		; 71 69 ; Add with carry ($69.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($59.b),Y		; 71 59 ; Add with carry ($59.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($49.b),Y		; 71 49 ; Add with carry ($49.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($AA.b),Y		; 71 AA ; Add with carry ($AA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($AB.b),Y		; 31 AB ; AND accumulator with memory ($AB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($AC.b),Y		; 31 AC ; AND accumulator with memory ($AC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($AD.b),Y		; 31 AD ; AND accumulator with memory ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($AE.b),Y		; 31 AE ; AND accumulator with memory ($AE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($AE.b),Y		; 31 AE ; AND accumulator with memory ($AE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($AD.b),Y		; 71 AD ; Add with carry ($AD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($AC.b),Y		; 71 AC ; Add with carry ($AC.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($AB.b),Y		; 71 AB ; Add with carry ($AB.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($AA.b),Y		; 71 AA ; Add with carry ($AA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($CF.b),Y		; 71 CF ; Add with carry ($CF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $8DCF.w		; 0D CF 8D ; Logical OR $8DCF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $CDCF4D.l		; CF 4D CF CD ; Compare accumulator (long) $CDCF4D.l [Reads: Accumulator] [Flags: NCZ]
	ora $8D1F0D.l,X		; 1F 0D 1F 8D ; Logical OR long $8D1F0D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $CD1F4D.l,X		; 1F 4D 1F CD ; Logical OR long $CD1F4D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($8D.b,X)		; 01 8D ; Logical OR ($8D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($4D.b,X)		; 01 4D ; Logical OR ($4D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($CD.b,X)		; 01 CD ; Logical OR ($CD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	cmp ($19.b)		; D2 19 ; Compare accumulator (indirect) ($19.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($19.b),Y		; D1 19 ; Compare accumulator ($19.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($19.b,S),Y		; D3 19 ; Compare accumulator (stack relative indirect indexed) ($19.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	pei ($0D.b)		; D4 0D ; Push effective indirect address ($0D.b) [Reads: Direct Page] [Writes: Stack Pointer]
	dec $0D.b,X		; D6 0D ; Decrement memory $0D.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	cmp $0D.b,X		; D5 0D ; Compare accumulator $0D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp [$0D.b],Y		; D7 0D ; Compare accumulator (long indexed) [$0D.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sta ($09.b,S),Y		; 93 09 ; Store accumulator (stack relative indirect indexed) ($09.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	.db $82, $0D, $84		; 82 0D 84 ; Branch always long to $82, $0D, $84 [Flow: branch]
	ora $0890.w		; 0D 90 08 ; Logical OR $0890.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D.b,S		; 83 0D ; Store accumulator (stack relative) $0D.b,S [Reads: Stack Pointer, Accumulator]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	sta ($0D.b)		; 92 0D ; Store accumulator (indirect) ($0D.b) [Reads: Direct Page, Accumulator]
	stx $0D.b		; 86 0D ; Store X register to $0D.b [Reads: X Index]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	sta ($4D.b)		; 92 4D ; Store accumulator (indirect) ($4D.b) [Reads: Direct Page, Accumulator]
	stx $4D.b		; 86 4D ; Store X register to $4D.b [Reads: X Index]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	sta ($0D.b)		; 92 0D ; Store accumulator (indirect) ($0D.b) [Reads: Direct Page, Accumulator]
	stx $0D.b		; 86 0D ; Store X register to $0D.b [Reads: X Index]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	sta ($4D.b)		; 92 4D ; Store accumulator (indirect) ($4D.b) [Reads: Direct Page, Accumulator]
	stx $4D.b		; 86 4D ; Store X register to $4D.b [Reads: X Index]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	sta $4D.b,S		; 83 4D ; Store accumulator (stack relative) $4D.b,S [Reads: Stack Pointer, Accumulator]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	sta ($49.b,S),Y		; 93 49 ; Store accumulator (stack relative indirect indexed) ($49.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	.db $82, $4D, $84		; 82 4D 84 ; Branch always long to $82, $4D, $84 [Flow: branch]
	eor $094A.w		; 4D 4A 09 ; Exclusive OR $094A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora #$094B.w		; 09 4B 09 ; Logical OR #$094B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor #$494B.w		; 49 4B 49 ; Exclusive OR #$494B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor #$094E.w		; 49 4E 09 ; Exclusive OR #$094E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	ora #$0979.w		; 09 79 09 ; Logical OR #$0979.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $7849.w,Y		; 79 49 78 ; Add $7849.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor #$494E.w		; 49 4E 49 ; Exclusive OR #$494E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $4F09.w		; 4E 09 4F ; Logical shift right $4F09.w [Flags: NCZ]
	ora #$1DB3.w		; 09 B3 1D ; Logical OR #$1DB3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($5D.b,S),Y		; B3 5D ; Load accumulator (stack relative indirect indexed) ($5D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $494E49.l		; 4F 49 4E 49 ; Exclusive OR accumulator with memory (long) $494E49.l [Writes: Accumulator] [Flags: NZ]
	lsr $4F09.w		; 4E 09 4F ; Logical shift right $4F09.w [Flags: NCZ]
	ora #$1DB4.w		; 09 B4 1D ; Logical OR #$1DB4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $5D.b,X		; B4 5D ; Load Y register $5D.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	eor $494E49.l		; 4F 49 4E 49 ; Exclusive OR accumulator with memory (long) $494E49.l [Writes: Accumulator] [Flags: NZ]
	lsr $4F09.w		; 4E 09 4F ; Logical shift right $4F09.w [Flags: NCZ]
	ora #$1DB4.w		; 09 B4 1D ; Logical OR #$1DB4.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $5D.b,X		; B4 5D ; Load Y register $5D.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	eor $494E49.l		; 4F 49 4E 49 ; Exclusive OR accumulator with memory (long) $494E49.l [Writes: Accumulator] [Flags: NZ]
	lsr $4F09.w		; 4E 09 4F ; Logical shift right $4F09.w [Flags: NCZ]
	ora #$9DB3.w		; 09 B3 9D ; Logical OR #$9DB3.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda ($DD.b,S),Y		; B3 DD ; Load accumulator (stack relative indirect indexed) ($DD.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $494E49.l		; 4F 49 4E 49 ; Exclusive OR accumulator with memory (long) $494E49.l [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$095E.w		; 09 5E 09 ; Logical OR #$095E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $495F09.l,X		; 5F 09 5F 49 ; Exclusive OR accumulator with memory (long,X) $495F09.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $6A49.w,X		; 5E 49 6A ; Logical shift right $6A49.w,X [Reads: X Index] [Flags: NCZ]
	eor #$097A.w		; 49 7A 09 ; Exclusive OR #$097A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $6F09.w		; 6E 09 6F ; Rotate right $6F09.w [Flags: NCZ]
	ora #$496F.w		; 09 6F 49 ; Logical OR #$496F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $7A49.w		; 6E 49 7A ; Rotate right $7A49.w [Flags: NCZ]
	eor #$11A0.w		; 49 A0 11 ; Exclusive OR #$11A0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$11.b		; A2 11 ; Load #$11.b into X register [Writes: X Index] [Flags: NZ]
	sty $11.b,X		; 94 11 ; Store Y register $11.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	lda ($11.b,X)		; A1 11 ; Load accumulator ($11.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $11.b,S		; A3 11 ; Load accumulator (stack relative) $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $11.b,X		; 95 11 ; Store accumulator to $11.b,X [Reads: Accumulator, X Index]
	lda ($51.b,X)		; A1 51 ; Load accumulator ($51.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $51.b,S		; A3 51 ; Load accumulator (stack relative) $51.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $51.b,X		; 95 51 ; Store accumulator to $51.b,X [Reads: Accumulator, X Index]
	lda ($11.b,X)		; A1 11 ; Load accumulator ($11.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $11.b,S		; A3 11 ; Load accumulator (stack relative) $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $11.b,X		; 95 11 ; Store accumulator to $11.b,X [Reads: Accumulator, X Index]
	lda ($51.b,X)		; A1 51 ; Load accumulator ($51.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $51.b,S		; A3 51 ; Load accumulator (stack relative) $51.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $51.b,X		; 95 51 ; Store accumulator to $51.b,X [Reads: Accumulator, X Index]
	ldy #$51.b		; A0 51 ; Load #$51.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$51.b		; A2 51 ; Load #$51.b into X register [Writes: X Index] [Flags: NZ]
	sty $51.b,X		; 94 51 ; Store Y register $51.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ora $0DAC.w		; 0D AC 0D ; Logical OR $0DAC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $AB0D.w		; AE 0D AB ; Load $AB0D.w into X register [Writes: X Index] [Flags: NZ]
	ora $0DAD.w		; 0D AD 0D ; Logical OR $0DAD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $4DAB0D.l		; AF 0D AB 4D ; Load long $4DAB0D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $AF4D.w		; AD 4D AF ; Load $AF4D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $4DAA.w		; 4D AA 4D ; Exclusive OR $4DAA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $AE4D.w		; AC 4D AE ; Load $AE4D.w into Y register [Writes: Y Index] [Flags: NZ]
	eor $0D51.w		; 4D 51 0D ; Exclusive OR $0D51.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $0D.b		; 66 0D ; Rotate right $0D.b [Reads: Direct Page] [Flags: NCZ]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	mvp $54,$1D		; 44 1D 54 ; Move block positive $54,$1D [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora $1D64.w,X		; 1D 64 1D ; OR accumulator with memory $1D64.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	mvn $EF,$1D		; 54 1D EF ; Move block negative $EF,$1D [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora #$0D55.w		; 09 55 0D ; Logical OR #$0D55.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $0D.b		; 65 0D ; Add $0D.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $7B.b,X		; 15 7B ; OR accumulator with memory $7B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $8B.b,X		; 15 8B ; OR accumulator with memory $8B.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $40.b,X		; 15 40 ; OR accumulator with memory $40.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $19B2.w,X		; 1D B2 19 ; OR accumulator with memory $19B2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($8C15.w,X)		; 7C 15 8C ; Jump indirect indexed to ($8C15.w,X) [Reads: X Index] [Flow: jump]
	ora $41.b,X		; 15 41 ; OR accumulator with memory $41.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $156C.w,X		; 1D 6C 15 ; OR accumulator with memory $156C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $8C15.w,X		; 7D 15 8C ; Add $8C15.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $41.b,X		; 15 41 ; OR accumulator with memory $41.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $14E4.w,X		; 5D E4 14 ; Exclusive OR accumulator with memory $14E4.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $14.b		; E5 14 ; Subtract $14.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $4115.w		; 8D 15 41 ; Store accumulator to $4115.w [Reads: Accumulator]
	ora $1540.w,X		; 1D 40 15 ; OR accumulator with memory $1540.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $15		; 50 15 ; Branch if overflow clear to $50, $15 [Flow: branch]
	ror $15.b,X		; 76 15 ; Rotate right $15.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor ($15.b,X)		; 41 15 ; Exclusive OR accumulator with memory ($15.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($15.b),Y		; 51 15 ; Exclusive OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$15.b],Y		; 77 15 ; Add with carry (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($55.b,X)		; 41 55 ; Exclusive OR accumulator with memory ($55.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($55.b),Y		; 51 55 ; Exclusive OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$55.b],Y		; 77 55 ; Add with carry (long indexed) [$55.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($15.b,X)		; 41 15 ; Exclusive OR accumulator with memory ($15.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($15.b),Y		; 51 15 ; Exclusive OR accumulator with memory ($15.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$15.b],Y		; 77 15 ; Add with carry (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($55.b,X)		; 41 55 ; Exclusive OR accumulator with memory ($55.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($55.b),Y		; 51 55 ; Exclusive OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc [$55.b],Y		; 77 55 ; Add with carry (long indexed) [$55.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor $50.b,X		; 55 50 ; Exclusive OR accumulator with memory $50.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $76.b,X		; 55 76 ; Exclusive OR accumulator with memory $76.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($90.b),Y		; 11 90 ; OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($90.b),Y		; 11 90 ; OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($90.b),Y		; 11 90 ; OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($91.b),Y		; 11 91 ; OR accumulator with memory ($91.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($86.b),Y		; 11 86 ; OR accumulator with memory ($86.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($96.b),Y		; 11 96 ; OR accumulator with memory ($96.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($81.b),Y		; 11 81 ; OR accumulator with memory ($81.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($90.b),Y		; 11 90 ; OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($90.b),Y		; 51 90 ; Exclusive OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($90.b),Y		; 51 90 ; Exclusive OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($91.b),Y		; 51 91 ; Exclusive OR accumulator with memory ($91.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($86.b),Y		; 51 86 ; Exclusive OR accumulator with memory ($86.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($96.b),Y		; 51 96 ; Exclusive OR accumulator with memory ($96.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($82.b),Y		; 51 82 ; Exclusive OR accumulator with memory ($82.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($92.b),Y		; 11 92 ; OR accumulator with memory ($92.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($84.b),Y		; 11 84 ; OR accumulator with memory ($84.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($94.b),Y		; 11 94 ; OR accumulator with memory ($94.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A4.b),Y		; 11 A4 ; OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A4.b),Y		; 11 A4 ; OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A4.b),Y		; 11 A4 ; OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($83.b),Y		; 11 83 ; OR accumulator with memory ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($93.b),Y		; 11 93 ; OR accumulator with memory ($93.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($85.b),Y		; 11 85 ; OR accumulator with memory ($85.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($95.b),Y		; 11 95 ; OR accumulator with memory ($95.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A4.b),Y		; 11 A4 ; OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A4.b),Y		; 11 A4 ; OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($A4.b),Y		; 11 A4 ; OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($83.b),Y		; 11 83 ; OR accumulator with memory ($83.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($93.b),Y		; 51 93 ; Exclusive OR accumulator with memory ($93.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($85.b),Y		; 51 85 ; Exclusive OR accumulator with memory ($85.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($95.b),Y		; 51 95 ; Exclusive OR accumulator with memory ($95.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($A4.b),Y		; 51 A4 ; Exclusive OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($A4.b),Y		; 51 A4 ; Exclusive OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($A4.b),Y		; 51 A4 ; Exclusive OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($82.b),Y		; 51 82 ; Exclusive OR accumulator with memory ($82.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($92.b),Y		; 51 92 ; Exclusive OR accumulator with memory ($92.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($84.b),Y		; 51 84 ; Exclusive OR accumulator with memory ($84.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($94.b),Y		; 51 94 ; Exclusive OR accumulator with memory ($94.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($A4.b),Y		; 51 A4 ; Exclusive OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($A4.b),Y		; 51 A4 ; Exclusive OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($A4.b),Y		; 51 A4 ; Exclusive OR accumulator with memory ($A4.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($81.b),Y		; 51 81 ; Exclusive OR accumulator with memory ($81.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($90.b),Y		; 51 90 ; Exclusive OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($90.b),Y		; 11 90 ; OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($90.b),Y		; 11 90 ; OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($91.b),Y		; 11 91 ; OR accumulator with memory ($91.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($86.b),Y		; 11 86 ; OR accumulator with memory ($86.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($96.b),Y		; 11 96 ; OR accumulator with memory ($96.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($80.b),Y		; 11 80 ; OR accumulator with memory ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($90.b),Y		; 51 90 ; Exclusive OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($90.b),Y		; 51 90 ; Exclusive OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($90.b),Y		; 51 90 ; Exclusive OR accumulator with memory ($90.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($91.b),Y		; 51 91 ; Exclusive OR accumulator with memory ($91.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($86.b),Y		; 51 86 ; Exclusive OR accumulator with memory ($86.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($96.b),Y		; 51 96 ; Exclusive OR accumulator with memory ($96.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($93.b),Y		; 51 93 ; Exclusive OR accumulator with memory ($93.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A1.b,X		; 15 A1 ; OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $82.b,X		; 15 82 ; OR accumulator with memory $82.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A3.b,X		; 15 A3 ; OR accumulator with memory $A3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $83.b,X		; 15 83 ; OR accumulator with memory $83.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $93.b,X		; 55 93 ; Exclusive OR accumulator with memory $93.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $82.b,X		; 15 82 ; OR accumulator with memory $82.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $92.b,X		; 15 92 ; OR accumulator with memory $92.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $83.b,X		; 15 83 ; OR accumulator with memory $83.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $96.b,X		; 15 96 ; OR accumulator with memory $96.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A1.b,X		; 15 A1 ; OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A1.b,X		; 55 A1 ; Exclusive OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $80.b,X		; D5 80 ; Compare accumulator $80.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $83.b,X		; 15 83 ; OR accumulator with memory $83.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $93.b,X		; 15 93 ; OR accumulator with memory $93.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A1.b,X		; 15 A1 ; OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $82.b,X		; 15 82 ; OR accumulator with memory $82.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $92.b,X		; 55 92 ; Exclusive OR accumulator with memory $92.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A0.b,X		; 15 A0 ; OR accumulator with memory $A0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B4.b,X		; 15 B4 ; OR accumulator with memory $B4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B3.b,X		; 15 B3 ; OR accumulator with memory $B3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B3.b,X		; 15 B3 ; OR accumulator with memory $B3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $B4.b,X		; 95 B4 ; Store accumulator to $B4.b,X [Reads: Accumulator, X Index]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $91.b,X		; 15 91 ; OR accumulator with memory $91.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B6.b,X		; 15 B6 ; OR accumulator with memory $B6.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B5.b,X		; 15 B5 ; OR accumulator with memory $B5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $81.b,X		; 15 81 ; OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $81.b,X		; 15 81 ; OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B5.b,X		; 15 B5 ; OR accumulator with memory $B5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $B6.b,X		; 95 B6 ; Store accumulator to $B6.b,X [Reads: Accumulator, X Index]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $90.b,X		; 15 90 ; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A0.b,X		; 55 A0 ; Exclusive OR accumulator with memory $A0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $B7.b,X		; 95 B7 ; Store accumulator to $B7.b,X [Reads: Accumulator, X Index]
	ora $B5.b,X		; 15 B5 ; OR accumulator with memory $B5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $81.b,X		; 15 81 ; OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $81.b,X		; 15 81 ; OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $81.b,X		; 15 81 ; OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $81.b,X		; 15 81 ; OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B5.b,X		; 15 B5 ; OR accumulator with memory $B5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $B7.b,X		; 95 B7 ; Store accumulator to $B7.b,X [Reads: Accumulator, X Index]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $A1.b,X		; 15 A1 ; OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A1.b,X		; 55 A1 ; Exclusive OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $B8.b,X		; 95 B8 ; Store accumulator to $B8.b,X [Reads: Accumulator, X Index]
	ora $81.b,X		; 15 81 ; OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $95.b,X		; 15 95 ; OR accumulator with memory $95.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A5.b,X		; 15 A5 ; OR accumulator with memory $A5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A5.b,X		; 15 A5 ; OR accumulator with memory $A5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $95.b,X		; 95 95 ; Store accumulator to $95.b,X [Reads: Accumulator, X Index]
	sta $81.b,X		; 95 81 ; Store accumulator to $81.b,X [Reads: Accumulator, X Index]
	sta $B8.b,X		; 95 B8 ; Store accumulator to $B8.b,X [Reads: Accumulator, X Index]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $A0.b,X		; 15 A0 ; OR accumulator with memory $A0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A1.b,X		; 55 A1 ; Exclusive OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $B9.b,X		; D5 B9 ; Compare accumulator $B9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $85.b,X		; 15 85 ; OR accumulator with memory $85.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $85.b,X		; 15 85 ; OR accumulator with memory $85.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $B9.b,X		; 95 B9 ; Store accumulator to $B9.b,X [Reads: Accumulator, X Index]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $91.b,X		; 15 91 ; OR accumulator with memory $91.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A0.b,X		; 55 A0 ; Exclusive OR accumulator with memory $A0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $B2.b,X		; D5 B2 ; Compare accumulator $B2.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $86.b,X		; 15 86 ; OR accumulator with memory $86.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $86.b,X		; 15 86 ; OR accumulator with memory $86.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $B2.b,X		; 95 B2 ; Store accumulator to $B2.b,X [Reads: Accumulator, X Index]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $90.b,X		; 15 90 ; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B2.b,X		; 15 B2 ; OR accumulator with memory $B2.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $86.b,X		; 55 86 ; Exclusive OR accumulator with memory $86.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A4.b,X		; 55 A4 ; Exclusive OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $86.b,X		; 15 86 ; OR accumulator with memory $86.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $B2.b,X		; D5 B2 ; Compare accumulator $B2.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $80.b,X		; D5 80 ; Compare accumulator $80.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $90.b,X		; 15 90 ; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B9.b,X		; 15 B9 ; OR accumulator with memory $B9.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $85.b,X		; 55 85 ; Exclusive OR accumulator with memory $85.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A4.b,X		; 55 A4 ; Exclusive OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A4.b,X		; 15 A4 ; OR accumulator with memory $A4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $85.b,X		; 15 85 ; OR accumulator with memory $85.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $B9.b,X		; D5 B9 ; Compare accumulator $B9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $80.b,X		; D5 80 ; Compare accumulator $80.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $91.b,X		; 15 91 ; OR accumulator with memory $91.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B8.b,X		; 15 B8 ; OR accumulator with memory $B8.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $81.b,X		; 55 81 ; Exclusive OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $95.b,X		; 55 95 ; Exclusive OR accumulator with memory $95.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A5.b,X		; 55 A5 ; Exclusive OR accumulator with memory $A5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A5.b,X		; 55 A5 ; Exclusive OR accumulator with memory $A5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $95.b,X		; D5 95 ; Compare accumulator $95.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $81.b,X		; D5 81 ; Compare accumulator $81.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $B8.b,X		; D5 B8 ; Compare accumulator $B8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $80.b,X		; D5 80 ; Compare accumulator $80.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $A0.b,X		; 15 A0 ; OR accumulator with memory $A0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B7.b,X		; 15 B7 ; OR accumulator with memory $B7.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $B5.b,X		; 55 B5 ; Exclusive OR accumulator with memory $B5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $81.b,X		; 55 81 ; Exclusive OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $81.b,X		; 55 81 ; Exclusive OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $81.b,X		; 55 81 ; Exclusive OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $81.b,X		; 55 81 ; Exclusive OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $B5.b,X		; 55 B5 ; Exclusive OR accumulator with memory $B5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $B7.b,X		; D5 B7 ; Compare accumulator $B7.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $82.b,X		; D5 82 ; Compare accumulator $82.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $96.b,X		; 15 96 ; OR accumulator with memory $96.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B6.b,X		; 15 B6 ; OR accumulator with memory $B6.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $B5.b,X		; 55 B5 ; Exclusive OR accumulator with memory $B5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $81.b,X		; 55 81 ; Exclusive OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $81.b,X		; 55 81 ; Exclusive OR accumulator with memory $81.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $B5.b,X		; 55 B5 ; Exclusive OR accumulator with memory $B5.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $B6.b,X		; D5 B6 ; Compare accumulator $B6.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $80.b,X		; D5 80 ; Compare accumulator $80.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $83.b,X		; 15 83 ; OR accumulator with memory $83.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $96.b,X		; 15 96 ; OR accumulator with memory $96.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A0.b,X		; 15 A0 ; OR accumulator with memory $A0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $B4.b,X		; 15 B4 ; OR accumulator with memory $B4.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $B3.b,X		; 55 B3 ; Exclusive OR accumulator with memory $B3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $B3.b,X		; 55 B3 ; Exclusive OR accumulator with memory $B3.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $B4.b,X		; D5 B4 ; Compare accumulator $B4.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp $80.b,X		; D5 80 ; Compare accumulator $80.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $90.b,X		; 15 90 ; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A1.b,X		; 15 A1 ; OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $91.b,X		; 15 91 ; OR accumulator with memory $91.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $90.b,X		; 15 90 ; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $83.b,X		; 15 83 ; OR accumulator with memory $83.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $93.b,X		; 55 93 ; Exclusive OR accumulator with memory $93.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $82.b,X		; 15 82 ; OR accumulator with memory $82.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $92.b,X		; 15 92 ; OR accumulator with memory $92.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A0.b,X		; 15 A0 ; OR accumulator with memory $A0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $91.b,X		; 15 91 ; OR accumulator with memory $91.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $A1.b,X		; 15 A1 ; OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $A1.b,X		; 55 A1 ; Exclusive OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $80.b,X		; D5 80 ; Compare accumulator $80.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $83.b,X		; 15 83 ; OR accumulator with memory $83.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $93.b,X		; 15 93 ; OR accumulator with memory $93.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A1.b,X		; 15 A1 ; OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A0.b,X		; 15 A0 ; OR accumulator with memory $A0.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $82.b,X		; 15 82 ; OR accumulator with memory $82.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $92.b,X		; 55 92 ; Exclusive OR accumulator with memory $92.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $80.b,X		; 55 80 ; Exclusive OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $90.b,X		; 15 90 ; OR accumulator with memory $90.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $A1.b,X		; 15 A1 ; OR accumulator with memory $A1.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $80.b,X		; 95 80 ; Store accumulator to $80.b,X [Reads: Accumulator, X Index]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $80.b,X		; 15 80 ; OR accumulator with memory $80.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $91.b,X		; 15 91 ; OR accumulator with memory $91.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $EE.b,X		; 15 EE ; OR accumulator with memory $EE.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $D594.w		; 0C 94 D5 ; Test and set bits $D594.w [Reads: Accumulator] [Flags: Z]
	sty $15.b		; 84 15 ; Store Y register to $15.b [Reads: Y Index]
	lda $15.b,S		; A3 15 ; Load accumulator (stack relative) $15.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $55.b,X		; 94 55 ; Store Y register $55.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $15.b,X		; 94 15 ; Store Y register $15.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	ora #$190D.w		; 09 0D 19 ; Logical OR #$190D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $4D09.w		; 0D 09 4D ; Logical OR $4D09.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0A4D.w,Y		; 19 4D 0A ; OR accumulator with memory $0A4D.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $0D1A.w		; 0D 1A 0D ; Logical OR $0D1A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $4D1A.w		; 4D 1A 4D ; Exclusive OR $4D1A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0D5A.w		; 0D 5A 0D ; Logical OR $0D5A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0D7A.w		; 0D 7A 0D ; Logical OR $0D7A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	ora $0D5B.w		; 0D 5B 0D ; Logical OR $0D5B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $0D7B.w		; 0D 7B 0D ; Logical OR $0D7B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor $4D5B.w		; 4D 5B 4D ; Exclusive OR $4D5B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	eor $4D7B.w		; 4D 7B 4D ; Exclusive OR $4D7B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $4D5A.w		; 4D 5A 4D ; Exclusive OR $4D5A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $4D7A.w		; 4D 7A 4D ; Exclusive OR $4D7A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $09.b		; 66 09 ; Rotate right $09.b [Reads: Direct Page] [Flags: NCZ]
	lsr $09.b,X		; 56 09 ; Logical shift right $09.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $0967.w,X		; 1D 67 09 ; OR accumulator with memory $0967.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor [$09.b],Y		; 57 09 ; Exclusive OR accumulator with memory (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldx $671D.w,Y		; BE 1D 67 ; Load X register $671D.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	eor #$4957.w		; 49 57 49 ; Exclusive OR #$4957.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $665D.w,Y		; BE 5D 66 ; Load X register $665D.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	eor #$4956.w		; 49 56 49 ; Exclusive OR #$4956.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor $9D48.w,X		; 5D 48 9D ; Exclusive OR accumulator with memory $9D48.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $89.b,X		; 56 89 ; Logical shift right $89.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $89.b		; 66 89 ; Rotate right $89.b [Reads: Direct Page] [Flags: NCZ]
	ldx $579D.w,Y		; BE 9D 57 ; Load X register $579D.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	bit #$8967.w		; 89 67 89 ; Test bits #$8967.w with accumulator [Reads: Accumulator] [Flags: Z]
	ldx $57DD.w,Y		; BE DD 57 ; Load X register $57DD.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cmp #$C967.w		; C9 67 C9 ; Compare #$C967.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $C956.w,X		; DD 56 C9 ; Compare accumulator $C956.w,X [Reads: X Index] [Flags: NCZ]
	ror $C9.b		; 66 C9 ; Rotate right $C9.b [Reads: Direct Page] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora #$0969.w		; 09 69 09 ; Logical OR #$0969.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc #$6889.w		; 69 89 68 ; Add #$6889.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	bit #$0958.w		; 89 58 09 ; Test bits #$0958.w with accumulator [Reads: Accumulator] [Flags: Z]
	eor $5909.w,Y		; 59 09 59 ; Exclusive OR accumulator with memory $5909.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	bit #$8958.w		; 89 58 89 ; Test bits #$8958.w with accumulator [Reads: Accumulator] [Flags: Z]
	eor #$BF1D.w		; 49 1D BF ; Exclusive OR #$BF1D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $9DBF.w,X		; 1D BF 9D ; OR accumulator with memory $9DBF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$499D.w		; 49 9D 49 ; Exclusive OR #$499D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $5DBF.w,X		; 5D BF 5D ; Exclusive OR accumulator with memory $5DBF.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $DD49DD.l,X		; BF DD 49 DD ; Load long $DD49DD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	eor #$4959.w		; 49 59 49 ; Exclusive OR #$4959.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $58C9.w,Y		; 59 C9 58 ; Exclusive OR accumulator with memory $58C9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$4968.w		; C9 68 49 ; Compare #$4968.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	adc #$6949.w		; 69 49 69 ; Add #$6949.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$C968.w		; C9 68 C9 ; Compare #$C968.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	and $3D11.w,X		; 3D 11 3D ; AND accumulator with memory $3D11.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($3D.b),Y		; 11 3D ; OR accumulator with memory ($3D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($64.b),Y		; 11 64 ; OR accumulator with memory ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($64.b),Y		; 11 64 ; OR accumulator with memory ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($64.b),Y		; 11 64 ; OR accumulator with memory ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($74.b),Y		; 11 74 ; OR accumulator with memory ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($65.b),Y		; 11 65 ; OR accumulator with memory ($65.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($65.b),Y		; 11 65 ; OR accumulator with memory ($65.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($65.b),Y		; 11 65 ; OR accumulator with memory ($65.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($75.b),Y		; 11 75 ; OR accumulator with memory ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($65.b),Y		; 11 65 ; OR accumulator with memory ($65.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($65.b),Y		; 51 65 ; Exclusive OR accumulator with memory ($65.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($65.b),Y		; 51 65 ; Exclusive OR accumulator with memory ($65.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($75.b),Y		; 51 75 ; Exclusive OR accumulator with memory ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($64.b),Y		; 51 64 ; Exclusive OR accumulator with memory ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($64.b),Y		; 51 64 ; Exclusive OR accumulator with memory ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($64.b),Y		; 51 64 ; Exclusive OR accumulator with memory ($64.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($74.b),Y		; 51 74 ; Exclusive OR accumulator with memory ($74.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($44.b),Y		; 51 44 ; Exclusive OR accumulator with memory ($44.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($54.b),Y		; 11 54 ; OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($54.b),Y		; 11 54 ; OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($54.b),Y		; 11 54 ; OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($76.b),Y		; 11 76 ; OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($45.b),Y		; 11 45 ; OR accumulator with memory ($45.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($55.b),Y		; 11 55 ; OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($55.b),Y		; 11 55 ; OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($55.b),Y		; 11 55 ; OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($76.b),Y		; 11 76 ; OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($76.b),Y		; 11 76 ; OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($45.b),Y		; 51 45 ; Exclusive OR accumulator with memory ($45.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($55.b),Y		; 51 55 ; Exclusive OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($55.b),Y		; 51 55 ; Exclusive OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($55.b),Y		; 51 55 ; Exclusive OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($76.b),Y		; 51 76 ; Exclusive OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($44.b),Y		; 51 44 ; Exclusive OR accumulator with memory ($44.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($54.b),Y		; 51 54 ; Exclusive OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($54.b),Y		; 51 54 ; Exclusive OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($54.b),Y		; 51 54 ; Exclusive OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($54.b),Y		; 51 54 ; Exclusive OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($54.b),Y		; 11 54 ; OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($54.b),Y		; 11 54 ; OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($44.b),Y		; 11 44 ; OR accumulator with memory ($44.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($2D.b),Y		; 91 2D ; Store accumulator ($2D.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($76.b),Y		; 11 76 ; OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($55.b),Y		; 91 55 ; Store accumulator ($55.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($55.b),Y		; 11 55 ; OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($55.b),Y		; 11 55 ; OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($45.b),Y		; 11 45 ; OR accumulator with memory ($45.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($2D.b),Y		; 91 2D ; Store accumulator ($2D.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b),Y		; 11 2D ; OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($76.b),Y		; 11 76 ; OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($2D.b),Y		; 91 2D ; Store accumulator ($2D.b),Y [Reads: Direct Page, Y Index, Accumulator]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($76.b),Y		; 51 76 ; Exclusive OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($55.b),Y		; D1 55 ; Compare accumulator ($55.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor ($55.b),Y		; 51 55 ; Exclusive OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($55.b),Y		; 51 55 ; Exclusive OR accumulator with memory ($55.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($45.b),Y		; 51 45 ; Exclusive OR accumulator with memory ($45.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($2D.b),Y		; D1 2D ; Compare accumulator ($2D.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($2D.b),Y		; 51 2D ; Exclusive OR accumulator with memory ($2D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($76.b),Y		; 51 76 ; Exclusive OR accumulator with memory ($76.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($54.b),Y		; D1 54 ; Compare accumulator ($54.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor ($54.b),Y		; 51 54 ; Exclusive OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($54.b),Y		; 51 54 ; Exclusive OR accumulator with memory ($54.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($44.b),Y		; 51 44 ; Exclusive OR accumulator with memory ($44.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($E5.b),Y		; D1 E5 ; Compare accumulator ($E5.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ora #$09F5.w		; 09 F5 09 ; Logical OR #$09F5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rol $09.b,X		; 36 09 ; Rotate left $09.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ora #$49E5.w		; 09 E5 49 ; Logical OR #$49E5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc [$09.b],Y		; F7 09 ; Subtract with carry (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$09.b],Y		; 37 09 ; AND accumulator with memory (long indexed) [$09.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	ora #$0000.w		; 09 00 00 ; Logical OR #$0000.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $000C.w		; AC 0C 00 ; Load $000C.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0000.w		; 4C 00 00 ; Jump to $0000.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldy $000C.w		; AC 0C 00 ; Load $000C.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $09E5.w		; 4C E5 09 ; Jump to $09E5.w [Flow: jump]
	sbc [$49.b],Y		; F7 49 ; Subtract with carry (long indexed) [$49.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and [$49.b],Y		; 37 49 ; AND accumulator with memory (long indexed) [$49.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	eor #$49E5.w		; 49 E5 49 ; Exclusive OR #$49E5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $49.b,X		; F5 49 ; Subtract $49.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rol $49.b,X		; 36 49 ; Rotate left $49.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	eor #$1414.w		; 49 14 14 ; Exclusive OR #$1414.w with accumulator [Writes: Accumulator] [Flags: NZ]
	trb $94.b		; 14 94 ; Test and reset bits $94.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $94.b		; 14 94 ; Test and reset bits $94.b [Reads: Accumulator] [Flags: Z]
	trb $54.b		; 14 54 ; Test and reset bits $54.b [Reads: Accumulator] [Flags: Z]
	trb $D4.b		; 14 D4 ; Test and reset bits $D4.b [Reads: Accumulator] [Flags: Z]
	trb $54.b		; 14 54 ; Test and reset bits $54.b [Reads: Accumulator] [Flags: Z]
	trb $D4.b		; 14 D4 ; Test and reset bits $D4.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	sbc #$F914.w		; E9 14 F9 ; Subtract #$F914.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	sty $14.b,X		; 94 14 ; Store Y register $14.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	mvn $14,$EA		; 54 EA 14 ; Move block negative $14,$EA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	pei ($14.b)		; D4 14 ; Push effective indirect address ($14.b) [Reads: Direct Page] [Writes: Stack Pointer]
	trb $EA.b		; 14 EA ; Test and reset bits $EA.b [Reads: Accumulator] [Flags: Z]
	mvn $54,$FA		; 54 FA 54 ; Move block negative $54,$FA [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	trb $94.b		; 14 94 ; Test and reset bits $94.b [Reads: Accumulator] [Flags: Z]
	trb $54.b		; 14 54 ; Test and reset bits $54.b [Reads: Accumulator] [Flags: Z]
	sbc #$F954.w		; E9 54 F9 ; Subtract #$F954.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	mvn $D4,$14		; 54 14 D4 ; Move block negative $D4,$14 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $94.b		; 14 94 ; Test and reset bits $94.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $94.b		; 14 94 ; Test and reset bits $94.b [Reads: Accumulator] [Flags: Z]
	trb $54.b		; 14 54 ; Test and reset bits $54.b [Reads: Accumulator] [Flags: Z]
	trb $D4.b		; 14 D4 ; Test and reset bits $D4.b [Reads: Accumulator] [Flags: Z]
	trb $54.b		; 14 54 ; Test and reset bits $54.b [Reads: Accumulator] [Flags: Z]
	trb $D4.b		; 14 D4 ; Test and reset bits $D4.b [Reads: Accumulator] [Flags: Z]
	sty $29.b		; 84 29 ; Store Y register to $29.b [Reads: Y Index]
	ldy $9409.w		; AC 09 94 ; Load $9409.w into Y register [Writes: Y Index] [Flags: NZ]
	ora #$2985.w		; 09 85 29 ; Logical OR #$2985.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $9515.w		; AD 15 95 ; Load $9515.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $86.b,X		; 15 86 ; OR accumulator with memory $86.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and #$15AE.w		; 29 AE 15 ; Logical AND #$15AE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stx $15.b,Y		; 96 15 ; Store X register $15.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	sta [$29.b]		; 87 29 ; Store accumulator (long) [$29.b] [Reads: Direct Page, Accumulator]
	lda $099709.l		; AF 09 97 09 ; Load long $099709.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta [$69.b]		; 87 69 ; Store accumulator (long) [$69.b] [Reads: Direct Page, Accumulator]
	lda $499749.l		; AF 49 97 49 ; Load long $499749.l into accumulator [Writes: Accumulator] [Flags: NZ]
	stx $69.b		; 86 69 ; Store X register to $69.b [Reads: X Index]
	ldx $9655.w		; AE 55 96 ; Load $9655.w into X register [Writes: X Index] [Flags: NZ]
	eor $85.b,X		; 55 85 ; Exclusive OR accumulator with memory $85.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$55AD.w		; 69 AD 55 ; Add #$55AD.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $55.b,X		; 95 55 ; Store accumulator to $55.b,X [Reads: Accumulator, X Index]
	sty $69.b		; 84 69 ; Store Y register to $69.b [Reads: Y Index]
	ldy $9449.w		; AC 49 94 ; Load $9449.w into Y register [Writes: Y Index] [Flags: NZ]
	eor #$0980.w		; 49 80 09 ; Exclusive OR #$0980.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	ldy #$09.b		; A0 09 ; Load #$09.b into Y register [Writes: Y Index] [Flags: NZ]
	sta ($09.b,X)		; 81 09 ; Store accumulator ($09.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($09.b),Y		; 91 09 ; Store accumulator ($09.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda ($09.b,X)		; A1 09 ; Load accumulator ($09.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $82, $09, $92		; 82 09 92 ; Branch always long to $82, $09, $92 [Flow: branch]
	ora #$11A2.w		; 09 A2 11 ; Logical OR #$11A2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b,S		; 83 11 ; Store accumulator (stack relative) $11.b,S [Reads: Stack Pointer, Accumulator]
	sta ($11.b,S),Y		; 93 11 ; Store accumulator (stack relative indirect indexed) ($11.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda $11.b,S		; A3 11 ; Load accumulator (stack relative) $11.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta $51.b,S		; 83 51 ; Store accumulator (stack relative) $51.b,S [Reads: Stack Pointer, Accumulator]
	sta ($51.b,S),Y		; 93 51 ; Store accumulator (stack relative indirect indexed) ($51.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda $51.b,S		; A3 51 ; Load accumulator (stack relative) $51.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $82, $49, $92		; 82 49 92 ; Branch always long to $82, $49, $92 [Flow: branch]
	eor #$51A2.w		; 49 A2 51 ; Exclusive OR #$51A2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($49.b,X)		; 81 49 ; Store accumulator ($49.b,X) [Reads: Direct Page, Accumulator, X Index]
	sta ($49.b),Y		; 91 49 ; Store accumulator ($49.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda ($49.b,X)		; A1 49 ; Load accumulator ($49.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $49		; 80 49 ; Branch always to $80, $49 [Flow: branch]
	.db $90, $49		; 90 49 ; Branch if carry clear to $90, $49 [Flow: branch]
	ldy #$49.b		; A0 49 ; Load #$49.b into Y register [Writes: Y Index] [Flags: NZ]
	tsb $0C49.w		; 0C 49 0C ; Test and set bits $0C49.w [Reads: Accumulator] [Flags: Z]
	cmp #$099A.w		; C9 9A 09 ; Compare #$099A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ora #$090C.w		; 09 0C 09 ; Logical OR #$090C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora #$099B.w		; 09 9B 09 ; Logical OR #$099B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ora #$490C.w		; 09 0C 49 ; Logical OR #$490C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	eor #$499B.w		; 49 9B 49 ; Exclusive OR #$499B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	eor #$090C.w		; 49 0C 09 ; Exclusive OR #$090C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $9A89.w		; 0C 89 9A ; Test and set bits $9A89.w [Reads: Accumulator] [Flags: Z]
	eor #$49AA.w		; 49 AA 49 ; Exclusive OR #$49AA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $A849.w		; 0C 49 A8 ; Test and set bits $A849.w [Reads: Accumulator] [Flags: Z]
	ora #$09A6.w		; 09 A6 09 ; Logical OR #$09A6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $8AC9.w		; 0C C9 8A ; Test and set bits $8AC9.w [Reads: Accumulator] [Flags: Z]
	ora #$09A9.w		; 09 A9 09 ; Logical OR #$09A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$09.b]		; A7 09 ; Load accumulator (long) [$09.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $8A89.w		; 0C 89 8A ; Test and set bits $8A89.w [Reads: Accumulator] [Flags: Z]
	eor #$49A9.w		; 49 A9 49 ; Exclusive OR #$49A9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$49.b]		; A7 49 ; Load accumulator (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0CC9.w		; 0C C9 0C ; Test and set bits $0CC9.w [Reads: Accumulator] [Flags: Z]
	ora #$49A8.w		; 09 A8 49 ; Logical OR #$49A8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx $49.b		; A6 49 ; Load $49.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	tsb $AC89.w		; 0C 89 AC ; Test and set bits $AC89.w [Reads: Accumulator] [Flags: Z]
	ora #$0994.w		; 09 94 09 ; Logical OR #$0994.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $EC1D.w		; 8C 1D EC ; Store Y register to $EC1D.w [Reads: Y Index]
	ora ($AD.b,X)		; 01 AD ; Logical OR ($AD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $95.b,X		; 15 95 ; OR accumulator with memory $95.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $9C.b,X		; 15 9C ; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $01EC.w,X		; 1D EC 01 ; OR accumulator with memory $01EC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldx $9615.w		; AE 15 96 ; Load $9615.w into X register [Writes: X Index] [Flags: NZ]
	ora $9C.b,X		; 15 9C ; OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $01EC.w,X		; 1D EC 01 ; OR accumulator with memory $01EC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $099709.l		; [PATTERN: Memory clearing operation] AF 09 97 09 ; Load long $099709.l into accumulator [Writes: Accumulator] [Flags: NZ]
	stz $EC1D.w		; 9C 1D EC ; Store zero to $EC1D.w
	ora ($AF.b,X)		; 01 AF ; Logical OR ($AF.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor #$4997.w		; 49 97 49 ; Exclusive OR #$4997.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stz $EC1D.w		; 9C 1D EC ; Store zero to $EC1D.w
	ora ($AE.b,X)		; 01 AE ; Logical OR ($AE.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $96.b,X		; 55 96 ; Exclusive OR accumulator with memory $96.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $9C.b,X		; 55 9C ; Exclusive OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $01EC.w,X		; 1D EC 01 ; OR accumulator with memory $01EC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $9555.w		; AD 55 95 ; Load $9555.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor $9C.b,X		; 55 9C ; Exclusive OR accumulator with memory $9C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $01EC.w,X		; 1D EC 01 ; OR accumulator with memory $01EC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $9449.w		; AC 49 94 ; Load $9449.w into Y register [Writes: Y Index] [Flags: NZ]
	eor #$5D8C.w		; 49 8C 5D ; Exclusive OR #$5D8C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpx $AC01.w		; EC 01 AC ; Compare $AC01.w with X register [Reads: X Index] [Flags: NCZ]
	ora #$0994.w		; 09 94 09 ; Logical OR #$0994.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $8C1D.w		; 8C 1D 8C ; Store Y register to $8C1D.w [Reads: Y Index]
	ora $15AD.w,X		; 1D AD 15 ; OR accumulator with memory $15AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $15.b,X		; [PATTERN: Memory clearing operation] 95 15 ; Store accumulator to $15.b,X [Reads: Accumulator, X Index]
	stz $9C1D.w		; 9C 1D 9C ; Store zero to $9C1D.w
	ora $15AE.w,X		; 1D AE 15 ; OR accumulator with memory $15AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stx $15.b,Y		; 96 15 ; Store X register $15.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stz $9C1D.w		; 9C 1D 9C ; Store zero to $9C1D.w
	ora $1D88.w,X		; 1D 88 1D ; OR accumulator with memory $1D88.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; [PATTERN: Memory clearing operation] 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D9C.w,X		; 1D 9C 1D ; OR accumulator with memory $1D9C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $881D.w		; 9C 1D 88 ; Store zero to $881D.w
	ora $1D98.w,X		; 1D 98 1D ; OR accumulator with memory $1D98.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $9C1D.w		; 9C 1D 9C ; Store zero to $9C1D.w
	ora $55AE.w,X		; 1D AE 55 ; OR accumulator with memory $55AE.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stx $55.b,Y		; [PATTERN: Memory clearing operation] 96 55 ; Store X register $55.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	stz $9C1D.w		; 9C 1D 9C ; Store zero to $9C1D.w
	ora $55AD.w,X		; 1D AD 55 ; OR accumulator with memory $55AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $55.b,X		; 95 55 ; Store accumulator to $55.b,X [Reads: Accumulator, X Index]
	stz $9C1D.w		; 9C 1D 9C ; Store zero to $9C1D.w
	ora $49AC.w,X		; 1D AC 49 ; OR accumulator with memory $49AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $49.b,X		; 94 49 ; Store Y register $49.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $8C5D.w		; 8C 5D 8C ; Store Y register to $8C5D.w [Reads: Y Index]
	eor $09AC.w,X		; 5D AC 09 ; Exclusive OR accumulator with memory $09AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $09.b,X		; 94 09 ; Store Y register $09.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $8C1D.w		; 8C 1D 8C ; Store Y register to $8C1D.w [Reads: Y Index]
	ora $15AD.w,X		; 1D AD 15 ; OR accumulator with memory $15AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $15.b,X		; 95 15 ; Store accumulator to $15.b,X [Reads: Accumulator, X Index]
	stz $9C1D.w		; [PATTERN: Memory clearing operation] 9C 1D 9C ; Store zero to $9C1D.w
	ora $1D88.w,X		; 1D 88 1D ; OR accumulator with memory $1D88.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D9C.w,X		; 1D 9C 1D ; OR accumulator with memory $1D9C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $881D.w		; 9C 1D 88 ; Store zero to $881D.w
	ora $1D98.w,X		; 1D 98 1D ; OR accumulator with memory $1D98.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit #$991D.w		; 89 1D 99 ; Test bits #$991D.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora $1D88.w,X		; 1D 88 1D ; OR accumulator with memory $1D88.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D89.w,X		; 1D 89 1D ; OR accumulator with memory $1D89.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $881D.w,Y		; 99 1D 88 ; Store accumulator to $881D.w,Y [Reads: Y Index, Accumulator]
	ora $1D98.w,X		; [PATTERN: Memory clearing operation] 1D 98 1D ; OR accumulator with memory $1D98.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	stz $9C1D.w		; 9C 1D 9C ; Store zero to $9C1D.w
	ora $55AD.w,X		; 1D AD 55 ; OR accumulator with memory $55AD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $55.b,X		; 95 55 ; Store accumulator to $55.b,X [Reads: Accumulator, X Index]
	stz $9C1D.w		; 9C 1D 9C ; Store zero to $9C1D.w
	ora $49AC.w,X		; 1D AC 49 ; OR accumulator with memory $49AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $49.b,X		; 94 49 ; Store Y register $49.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $8C5D.w		; 8C 5D 8C ; Store Y register to $8C5D.w [Reads: Y Index]
	eor $09AC.w,X		; 5D AC 09 ; Exclusive OR accumulator with memory $09AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $09.b,X		; 94 09 ; Store Y register $09.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $8C1D.w		; 8C 1D 8C ; Store Y register to $8C1D.w [Reads: Y Index]
	ora $1D8D.w,X		; 1D 8D 1D ; OR accumulator with memory $1D8D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D89.w,X		; 1D 89 1D ; OR accumulator with memory $1D89.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $881D.w,Y		; 99 1D 88 ; Store accumulator to $881D.w,Y [Reads: Y Index, Accumulator]
	ora $1D98.w,X		; 1D 98 1D ; OR accumulator with memory $1D98.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit #$991D.w		; 89 1D 99 ; Test bits #$991D.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora $1D88.w,X		; 1D 88 1D ; OR accumulator with memory $1D88.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D89.w,X		; 1D 89 1D ; OR accumulator with memory $1D89.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $881D.w,Y		; 99 1D 88 ; Store accumulator to $881D.w,Y [Reads: Y Index, Accumulator]
	ora $1D98.w,X		; 1D 98 1D ; OR accumulator with memory $1D98.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit #$991D.w		; 89 1D 99 ; Test bits #$991D.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora $1D88.w,X		; 1D 88 1D ; OR accumulator with memory $1D88.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D89.w,X		; 1D 89 1D ; OR accumulator with memory $1D89.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $8D1D.w,Y		; 99 1D 8D ; Store accumulator to $8D1D.w,Y [Reads: Y Index, Accumulator]
	eor $1D98.w,X		; 5D 98 1D ; Exclusive OR accumulator with memory $1D98.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	bit #$991D.w		; 89 1D 99 ; Test bits #$991D.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora $49AC.w,X		; 1D AC 49 ; OR accumulator with memory $49AC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sty $49.b,X		; 94 49 ; Store Y register $49.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	sty $8C5D.w		; 8C 5D 8C ; Store Y register to $8C5D.w [Reads: Y Index]
	eor $08D0.w,X		; 5D D0 08 ; Exclusive OR accumulator with memory $08D0.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $D0, $48		; D0 48 ; Branch if not equal to $D0, $48 [Flow: branch]
	.db $D0, $48		; D0 48 ; Branch if not equal to $D0, $48 [Flow: branch]
	.db $D0, $48		; D0 48 ; Branch if not equal to $D0, $48 [Flow: branch]
	.db $D0, $48		; D0 48 ; Branch if not equal to $D0, $48 [Flow: branch]
	.db $D0, $48		; D0 48 ; Branch if not equal to $D0, $48 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	cpy #$14.b		; C0 14 ; Compare #$14.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$14.b		; C0 14 ; Compare #$14.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$14.b		; C0 14 ; Compare #$14.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$14.b		; C0 14 ; Compare #$14.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$54.b		; C0 54 ; Compare #$54.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$54.b		; C0 54 ; Compare #$54.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$54.b		; C0 54 ; Compare #$54.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$54.b		; C0 54 ; Compare #$54.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $48		; D0 48 ; Branch if not equal to $D0, $48 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	cpy #$14.b		; C0 14 ; Compare #$14.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$14.b		; C0 14 ; Compare #$14.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$14.b		; C0 14 ; Compare #$14.b with Y register [Reads: Y Index] [Flags: NCZ]
	cmp ($14.b),Y		; D1 14 ; Compare accumulator ($14.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($54.b),Y		; D1 54 ; Compare accumulator ($54.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cpy #$54.b		; C0 54 ; Compare #$54.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$54.b		; C0 54 ; Compare #$54.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$54.b		; C0 54 ; Compare #$54.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $48		; D0 48 ; Branch if not equal to $D0, $48 [Flow: branch]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	cpy #$14.b		; C0 14 ; Compare #$14.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpy #$14.b		; C0 14 ; Compare #$14.b with Y register [Reads: Y Index] [Flags: NCZ]
.INDEX 16
	rep #$14		; C2 14
	cmp $14.b,S		; C3 14 ; Compare accumulator (stack relative) $14.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
	cmp $54.b,S		; C3 54 ; Compare accumulator (stack relative) $54.b,S [Reads: Stack Pointer, Accumulator] [Flags: NCZ]
.INDEX 16
	rep #$54		; C2 54
	cpy #$C054.w		; C0 54 C0 ; Compare #$C054.w with Y register [Reads: Y Index] [Flags: NCZ]
	mvn $48,$D0		; 54 D0 48 ; Move block negative $48,$D0 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp ($7D09.w,X)		; 7C 09 7D ; Jump indirect indexed to ($7D09.w,X) [Reads: X Index] [Flow: jump]
	ora #$097F.w		; 09 7F 09 ; Logical OR #$097F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpy $14.b		; C4 14 ; Compare $14.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	cmp $14.b		; C5 14 ; Compare $14.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $54.b		; C5 54 ; Compare $54.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpy $54.b		; C4 54 ; Compare $54.b with Y register [Reads: Direct Page, Y Index] [Flags: NCZ]
	adc $497D49.l,X		; 7F 49 7D 49 ; Add long $497D49.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp ($6C49.w,X)		; 7C 49 6C ; Jump indirect indexed to ($6C49.w,X) [Reads: X Index] [Flow: jump]
	ora #$096D.w		; 09 6D 09 ; Logical OR #$096D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $090809.l		; 6F 09 08 09 ; Add with carry (long) $090809.l [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	trb $E8.b		; 14 E8 ; Test and reset bits $E8.b [Reads: Accumulator] [Flags: Z]
	mvn $49,$08		; 54 08 49 ; Move block negative $49,$08 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	adc $496D49.l		; 6F 49 6D 49 ; Add with carry (long) $496D49.l [Writes: Accumulator] [Flags: NCVZ]
	jmp ($5C49.w)		; 6C 49 5C ; Jump indirect to ($5C49.w) [Flow: jump]
	ora #$095D.w		; 09 5D 09 ; Logical OR #$095D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $091809.l,X		; 5F 09 18 09 ; Exclusive OR accumulator with memory (long,X) $091809.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	trb $F8.b		; 14 F8 ; Test and reset bits $F8.b [Reads: Accumulator] [Flags: Z]
	mvn $49,$18		; 54 18 49 ; Move block negative $49,$18 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $495D49.l,X		; 5F 49 5D 49 ; Exclusive OR accumulator with memory (long,X) $495D49.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp $094C49.l		; 5C 49 4C 09 ; Jump long to $094C49.l [Flow: jump]
	eor $4F09.w		; 4D 09 4F ; Exclusive OR $4F09.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$A888.w		; 09 88 A8 ; Logical OR #$A888.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$89A8.w		; 89 A8 89 ; Test bits #$89A8.w with accumulator [Reads: Accumulator] [Flags: Z]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	eor $494D49.l		; 4F 49 4D 49 ; Exclusive OR accumulator with memory (long) $494D49.l [Writes: Accumulator] [Flags: NZ]
	jmp $C849.w		; 4C 49 C8 ; Jump to $C849.w [Flow: jump]
	trb $7E.b		; 14 7E ; Test and reset bits $7E.b [Reads: Accumulator] [Flags: Z]
	ora #$096E.w		; 09 6E 09 ; Logical OR #$096E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $D829.w,X		; 5E 29 D8 ; Logical shift right $D829.w,X [Reads: X Index] [Flags: NCZ]
	trb $C9.b		; 14 C9 ; Test and reset bits $C9.b [Reads: Accumulator] [Flags: Z]
	trb $D9.b		; 14 D9 ; Test and reset bits $D9.b [Reads: Accumulator] [Flags: Z]
	trb $4E.b		; 14 4E ; Test and reset bits $4E.b [Reads: Accumulator] [Flags: Z]
	and #$54D8.w		; 29 D8 54 ; Logical AND #$54D8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$D954.w		; C9 54 D9 ; Compare #$D954.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	mvn $69,$4E		; 54 4E 69 ; Move block negative $69,$4E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	mvn $49,$7E		; 54 7E 49 ; Move block negative $49,$7E [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ror $5E49.w		; 6E 49 5E ; Rotate right $5E49.w [Flags: NCZ]
	adc #$2888.w		; 69 88 28 ; Add #$2888.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit #$EF28.w		; 89 28 EF ; Test bits #$EF28.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$0878.w		; 09 78 08 ; Logical OR #$0878.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$EF68.w		; 89 68 EF ; Test bits #$EF68.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$4878.w		; 09 78 48 ; Logical OR #$4878.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	bit $0828.w		; 2C 28 08 ; Test bits $0828.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $2D08.w		; 0D 08 2D ; Logical OR $2D08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $087809.l		; EF 09 78 08 ; Subtract with carry (long) $087809.l [Writes: Accumulator] [Flags: NCVZ]
	and $EF68.w		; 2D 68 EF ; Logical AND $EF68.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$4878.w		; 09 78 48 ; Logical OR #$4878.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $0868.w		; 2C 68 08 ; Test bits $0868.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $8848.w		; 0D 48 88 ; Logical OR $8848.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit #$EF28.w		; 89 28 EF ; Test bits #$EF28.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$0878.w		; 09 78 08 ; Logical OR #$0878.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$EF68.w		; 89 68 EF ; Test bits #$EF68.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$4878.w		; 09 78 48 ; Logical OR #$4878.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $82, $08, $24		; 82 08 24 ; Branch always long to $82, $08, $24 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $08.b,X		; 34 08 ; Test bits $08.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sta $08.b,S		; 83 08 ; Store accumulator (stack relative) $08.b,S [Reads: Stack Pointer, Accumulator]
	and $08.b		; 25 08 ; Logical AND $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $08.b,X		; 35 08 ; Logical AND $08.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $48.b,S		; 83 48 ; Store accumulator (stack relative) $48.b,S [Reads: Stack Pointer, Accumulator]
	and $48.b		; 25 48 ; Logical AND $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $48.b,X		; 35 48 ; Logical AND $48.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $82, $48, $24		; 82 48 24 ; Branch always long to $82, $48, $24 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	bit $48.b,X		; 34 48 ; Test bits $48.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	stx $08.b,Y		; 96 08 ; Store X register $08.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx #$9108.w		; A2 08 91 ; Load #$9108.w into X register [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta [$08.b],Y		; 97 08 ; Store accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	stx $08.b,Y		; 96 08 ; Store X register $08.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx #$9108.w		; A2 08 91 ; Load #$9108.w into X register [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta [$08.b],Y		; 97 08 ; Store accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $82, $08, $00		; 82 08 00 ; Branch always long to $82, $08, $00 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	sta $08.b,S		; 83 08 ; Store accumulator (stack relative) $08.b,S [Reads: Stack Pointer, Accumulator]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($08.b)		; 12 08 ; OR accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $48.b,S		; 83 48 ; Store accumulator (stack relative) $48.b,S [Reads: Stack Pointer, Accumulator]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($48.b)		; 12 48 ; OR accumulator with memory (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $82, $48, $00		; 82 48 00 ; Branch always long to $82, $48, $00 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $48		; 10 48 ; Branch if plus to $10, $48 [Flow: branch]
	.db $82, $08, $00		; 82 08 00 ; Branch always long to $82, $08, $00 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	sta $08.b,S		; 83 08 ; Store accumulator (stack relative) $08.b,S [Reads: Stack Pointer, Accumulator]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($08.b),Y		; 11 08 ; OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $48.b,S		; 83 48 ; Store accumulator (stack relative) $48.b,S [Reads: Stack Pointer, Accumulator]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($48.b),Y		; 11 48 ; OR accumulator with memory ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $82, $48, $00		; 82 48 00 ; Branch always long to $82, $48, $00 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $48		; 10 48 ; Branch if plus to $10, $48 [Flow: branch]
	.db $82, $08, $00		; 82 08 00 ; Branch always long to $82, $08, $00 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	sta $08.b,S		; 83 08 ; Store accumulator (stack relative) $08.b,S [Reads: Stack Pointer, Accumulator]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($08.b)		; 12 08 ; OR accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $48.b,S		; 83 48 ; Store accumulator (stack relative) $48.b,S [Reads: Stack Pointer, Accumulator]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($48.b)		; 12 48 ; OR accumulator with memory (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $82, $48, $00		; 82 48 00 ; Branch always long to $82, $48, $00 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $48		; 10 48 ; Branch if plus to $10, $48 [Flow: branch]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($08.b),Y		; B1 08 ; Load accumulator ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($08.b)		; 12 08 ; OR accumulator with memory (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($48.b),Y		; B1 48 ; Load accumulator ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cop $48.b		; 02 48 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($48.b)		; 12 48 ; OR accumulator with memory (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $48		; B0 48 ; Branch if carry set to $B0, $48 [Flow: branch]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda #$B408.w		; A9 08 B4 ; Load #$B408.w into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sty $8E08.w		; 8C 08 8E ; Store Y register to $8E08.w [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $48.b,X		; B4 48 ; Load Y register $48.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sta $8F08.w		; 8D 08 8F ; Store accumulator to $8F08.w [Reads: Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$8248.w		; A9 48 82 ; Load #$8248.w into accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	sta $08.b,S		; 83 08 ; Store accumulator (stack relative) $08.b,S [Reads: Stack Pointer, Accumulator]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($08.b),Y		; 11 08 ; OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $48.b,S		; 83 48 ; Store accumulator (stack relative) $48.b,S [Reads: Stack Pointer, Accumulator]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($48.b),Y		; 11 48 ; OR accumulator with memory ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $82, $48, $00		; 82 48 00 ; Branch always long to $82, $48, $00 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $48		; 10 48 ; Branch if plus to $10, $48 [Flow: branch]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	stx $08.b,Y		; 96 08 ; Store X register $08.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ldx #$9108.w		; A2 08 91 ; Load #$9108.w into X register [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sty $8E08.w		; 8C 08 8E ; Store Y register to $8E08.w [Reads: Y Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	sta $8F08.w		; 8D 08 8F ; Store accumulator to $8F08.w [Reads: Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta ($08.b),Y		; 91 08 ; Store accumulator ($08.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta [$08.b],Y		; 97 08 ; Store accumulator (long indexed) [$08.b],Y [Reads: Direct Page, Y Index, Accumulator]
	lda $08.b,S		; A3 08 ; Load accumulator (stack relative) $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $82, $08, $24		; 82 08 24 ; Branch always long to $82, $08, $24 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $08.b,X		; 34 08 ; Test bits $08.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	sta $08.b,S		; 83 08 ; Store accumulator (stack relative) $08.b,S [Reads: Stack Pointer, Accumulator]
	and $08.b		; 25 08 ; Logical AND $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $08.b,X		; 35 08 ; Logical AND $08.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $48.b,S		; 83 48 ; Store accumulator (stack relative) $48.b,S [Reads: Stack Pointer, Accumulator]
	and $48.b		; 25 48 ; Logical AND $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $48.b,X		; 35 48 ; Logical AND $48.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $82, $48, $24		; 82 48 24 ; Branch always long to $82, $48, $24 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	bit $48.b,X		; 34 48 ; Test bits $48.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit #$EF28.w		; 89 28 EF ; Test bits #$EF28.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$0878.w		; 09 78 08 ; Logical OR #$0878.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit #$EF68.w		; 89 68 EF ; Test bits #$EF68.w with accumulator [Reads: Accumulator] [Flags: Z]
	ora #$4878.w		; 09 78 48 ; Logical OR #$4878.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	bit $0828.w		; 2C 28 08 ; Test bits $0828.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $2D08.w		; 0D 08 2D ; Logical OR $2D08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $087809.l		; EF 09 78 08 ; Subtract with carry (long) $087809.l [Writes: Accumulator] [Flags: NCVZ]
	and $EF68.w		; 2D 68 EF ; Logical AND $EF68.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$4878.w		; 09 78 48 ; Logical OR #$4878.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $0868.w		; 2C 68 08 ; Test bits $0868.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $B048.w		; 0D 48 B0 ; Logical OR $B048.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($08.b),Y		; B1 08 ; Load accumulator ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($08.b,X)		; 01 08 ; Logical OR ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($08.b),Y		; 11 08 ; OR accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($48.b),Y		; B1 48 ; Load accumulator ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($48.b,X)		; 01 48 ; Logical OR ($48.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($48.b),Y		; 11 48 ; OR accumulator with memory ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $48		; B0 48 ; Branch if carry set to $B0, $48 [Flow: branch]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	bit $08.b		; 24 08 ; Test bits $08.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $B108.w		; 0C 08 B1 ; Test and set bits $B108.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $08.b		; 25 08 ; Logical AND $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $08.b,X		; 35 08 ; Logical AND $08.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($48.b),Y		; B1 48 ; Load accumulator ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $48.b		; 25 48 ; Logical AND $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $48.b,X		; 35 48 ; Logical AND $48.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $48		; B0 48 ; Branch if carry set to $B0, $48 [Flow: branch]
	bit $48.b		; 24 48 ; Test bits $48.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $2C48.w		; 0C 48 2C ; Test and set bits $2C48.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $2D08.w		; 0D 08 2D ; Logical OR $2D08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $087809.l		; EF 09 78 08 ; Subtract with carry (long) $087809.l [Writes: Accumulator] [Flags: NCVZ]
	and $EF68.w		; 2D 68 EF ; Logical AND $EF68.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$4878.w		; 09 78 48 ; Logical OR #$4878.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $0868.w		; 2C 68 08 ; Test bits $0868.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $B048.w		; 0D 48 B0 ; Logical OR $B048.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $08.b		; 24 08 ; Test bits $08.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $B108.w		; 0C 08 B1 ; Test and set bits $B108.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $08.b		; 25 08 ; Logical AND $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $08.b,X		; 35 08 ; Logical AND $08.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($48.b),Y		; B1 48 ; Load accumulator ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $48.b		; 25 48 ; Logical AND $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $48.b,X		; 35 48 ; Logical AND $48.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $48		; B0 48 ; Branch if carry set to $B0, $48 [Flow: branch]
	bit $48.b		; 24 48 ; Test bits $48.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	tsb $2C48.w		; 0C 48 2C ; Test and set bits $2C48.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $2D08.w		; 0D 08 2D ; Logical OR $2D08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $087809.l		; EF 09 78 08 ; Subtract with carry (long) $087809.l [Writes: Accumulator] [Flags: NCVZ]
	and $EF68.w		; 2D 68 EF ; Logical AND $EF68.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$4878.w		; 09 78 48 ; Logical OR #$4878.w with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $0868.w		; 2C 68 08 ; Test bits $0868.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $8248.w		; 0D 48 82 ; Logical OR $8248.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $28.b,S		; 83 28 ; Store accumulator (stack relative) $28.b,S [Reads: Stack Pointer, Accumulator]
	sbc $087809.l		; EF 09 78 08 ; Subtract with carry (long) $087809.l [Writes: Accumulator] [Flags: NCVZ]
	sta $68.b,S		; 83 68 ; Store accumulator (stack relative) $68.b,S [Reads: Stack Pointer, Accumulator]
	sbc $487809.l		; EF 09 78 48 ; Subtract with carry (long) $487809.l [Writes: Accumulator] [Flags: NCVZ]
	.db $82, $68, $08		; 82 68 08 ; Branch always long to $82, $68, $08 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stx $28.b		; 86 28 ; Store X register to $28.b [Reads: X Index]
	adc [$08.b],Y		; 77 08 ; Add with carry (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $08.b,X		; 75 08 ; Add $08.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta [$28.b]		; 87 28 ; Store accumulator (long) [$28.b] [Reads: Direct Page, Accumulator]
	sbc $085909.l		; EF 09 59 08 ; Subtract with carry (long) $085909.l [Writes: Accumulator] [Flags: NCVZ]
	sta [$68.b]		; 87 68 ; Store accumulator (long) [$68.b] [Reads: Direct Page, Accumulator]
	sbc $485909.l		; EF 09 59 48 ; Subtract with carry (long) $485909.l [Writes: Accumulator] [Flags: NCVZ]
	stx $68.b		; 86 68 ; Store X register to $68.b [Reads: X Index]
	adc [$48.b],Y		; 77 48 ; Add with carry (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $48.b,X		; 75 48 ; Add $48.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($08.b)		; 72 08 ; Add with carry (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($08.b)		; 72 08 ; Add with carry (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($08.b)		; 72 08 ; Add with carry (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	stz $08.b,X		; 74 08 ; Store zero to $08.b,X [Reads: X Index]
	adc $08.b,X		; 75 08 ; Add $08.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc ($48.b)		; 72 48 ; Add with carry (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($48.b)		; 72 48 ; Add with carry (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($48.b)		; 72 48 ; Add with carry (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($48.b,S),Y		; 73 48 ; Add with carry (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	stz $48.b,X		; 74 48 ; Store zero to $48.b,X [Reads: X Index]
	adc $48.b,X		; 75 48 ; Add $48.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $5E29.w		; 6E 29 5E ; Rotate right $5E29.w [Flags: NCZ]
	ora ($78.b),Y		; 11 78 ; OR accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($58.b),Y		; 11 58 ; OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($6E.b),Y		; 11 6E ; OR accumulator with memory ($6E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc #$09EF.w		; 69 EF 09 ; Add #$09EF.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	php		; [PATTERN: Memory clearing operation] 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	stz $11.b,X		; 74 11 ; Store zero to $11.b,X [Reads: X Index]
	ror $EF29.w		; 6E 29 EF ; Rotate right $EF29.w [Flags: NCZ]
	eor #$4878.w		; 49 78 48 ; Exclusive OR #$4878.w with accumulator [Writes: Accumulator] [Flags: NZ]
	stz $51.b,X		; 74 51 ; Store zero to $51.b,X [Reads: X Index]
	ror $5E69.w		; 6E 69 5E ; Rotate right $5E69.w [Flags: NCZ]
	eor ($78.b),Y		; 51 78 ; Exclusive OR accumulator with memory ($78.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($58.b),Y		; 51 58 ; Exclusive OR accumulator with memory ($58.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($B0.b),Y		; 51 B0 ; Exclusive OR accumulator with memory ($B0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $B108.w		; 0D 08 B1 ; Logical OR $B108.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $087809.l		; EF 09 78 08 ; Subtract with carry (long) $087809.l [Writes: Accumulator] [Flags: NCVZ]
	lda ($68.b),Y		; B1 68 ; Load accumulator ($68.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $487809.l		; EF 09 78 48 ; Subtract with carry (long) $487809.l [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $68		; B0 68 ; Branch if carry set to $B0, $68 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $B848.w		; 0D 48 B8 ; Logical OR $B848.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $2E28.w,X		; 9D 28 2E ; Store accumulator to $2E28.w,X [Reads: Accumulator, X Index]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol $9D08.w,X		; 3E 08 9D ; Rotate left $9D08.w,X [Reads: X Index] [Flags: NCZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and $083F08.l		; 2F 08 3F 08 ; AND accumulator with memory (long) $083F08.l [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	clv		; B8 ; Clear overflow flag [Flags: V]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $EF28.w,Y		; B9 28 EF ; Load $EF28.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$0819.w		; 09 19 08 ; Logical OR #$0819.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $EF68.w,Y		; B9 68 EF ; Load $EF68.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$081A.w		; 09 1A 08 ; Logical OR #$081A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $28.b,X		; B5 28 ; Load $28.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora $B708.w		; 0D 08 B7 ; Logical OR $B708.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $3E08.w		; 2E 08 3E ; Rotate left $3E08.w [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda [$68.b],Y		; B7 68 ; Load accumulator (long indexed) [$68.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $083F08.l		; 2F 08 3F 08 ; AND accumulator with memory (long) $083F08.l [Writes: Accumulator] [Flags: NZ]
	lda $68.b,X		; B5 68 ; Load $68.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora $B548.w		; 0D 48 B5 ; Logical OR $B548.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ora $B608.w		; 0D 08 B6 ; Logical OR $B608.w with accumulator [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sbc $081909.l		; EF 09 19 08 ; Subtract with carry (long) $081909.l [Writes: Accumulator] [Flags: NCVZ]
	ldx $68.b,Y		; B6 68 ; Load X register $68.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	sbc $081A09.l		; EF 09 1A 08 ; Subtract with carry (long) $081A09.l [Writes: Accumulator] [Flags: NCVZ]
	lda $68.b,X		; B5 68 ; Load $68.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	ora $1848.w		; 0D 48 18 ; Logical OR $1848.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A88909.l		; EF 09 89 A8 ; Subtract with carry (long) $A88909.l [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E88909.l		; EF 09 89 E8 ; Subtract with carry (long) $E88909.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $0888.w		; 0D 88 08 ; Logical OR $0888.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $78A8.w		; 2C A8 78 ; Test bits $78A8.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A82D09.l		; EF 09 2D A8 ; Subtract with carry (long) $A82D09.l [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E82D09.l		; EF 09 2D E8 ; Subtract with carry (long) $E82D09.l [Writes: Accumulator] [Flags: NCVZ]
	ora $08C8.w		; 0D C8 08 ; Logical OR $08C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $18E8.w		; 2C E8 18 ; Test bits $18E8.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A88909.l		; EF 09 89 A8 ; Subtract with carry (long) $A88909.l [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E88909.l		; EF 09 89 E8 ; Subtract with carry (long) $E88909.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bit $88.b,X		; 34 88 ; Test bits $88.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $88.b		; 24 88 ; Test bits $88.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $82, $88, $35		; 82 88 35 ; Branch always long to $82, $88, $35 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and $88.b		; 25 88 ; Logical AND $88.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $88.b,S		; 83 88 ; Store accumulator (stack relative) $88.b,S [Reads: Stack Pointer, Accumulator]
	and $C8.b,X		; 35 C8 ; Logical AND $C8.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $C8.b		; 25 C8 ; Logical AND $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $C8.b,S		; 83 C8 ; Store accumulator (stack relative) $C8.b,S [Reads: Stack Pointer, Accumulator]
	bit $C8.b,X		; 34 C8 ; Test bits $C8.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $C8.b		; 24 C8 ; Test bits $C8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $82, $C8, $A2		; 82 C8 A2 ; Branch always long to $82, $C8, $A2 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	stx $88.b,Y		; 96 88 ; Store X register $88.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $90, $88		; 90 88 ; Branch if carry clear to $90, $88 [Flow: branch]
	lda $88.b,S		; A3 88 ; Load accumulator (stack relative) $88.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta [$88.b],Y		; 97 88 ; Store accumulator (long indexed) [$88.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($88.b),Y		; 91 88 ; Store accumulator ($88.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldx #$9688.w		; A2 88 96 ; Load #$9688.w into X register [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $90, $88		; 90 88 ; Branch if carry clear to $90, $88 [Flow: branch]
	lda $88.b,S		; A3 88 ; Load accumulator (stack relative) $88.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta [$88.b],Y		; 97 88 ; Store accumulator (long indexed) [$88.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($88.b),Y		; 91 88 ; Store accumulator ($88.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $10, $88		; 10 88 ; Branch if plus to $10, $88 [Flow: branch]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $88, $12		; 82 88 12 ; Branch always long to $82, $88, $12 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cop $88.b		; 02 88 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $88.b,S		; 83 88 ; Store accumulator (stack relative) $88.b,S [Reads: Stack Pointer, Accumulator]
	ora ($C8.b)		; 12 C8 ; OR accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $C8.b		; 02 C8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $C8.b,S		; 83 C8 ; Store accumulator (stack relative) $C8.b,S [Reads: Stack Pointer, Accumulator]
	.db $10, $C8		; 10 C8 ; Branch if plus to $10, $C8 [Flow: branch]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $C8, $18		; 82 C8 18 ; Branch always long to $82, $C8, $18 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A88909.l		; EF 09 89 A8 ; Subtract with carry (long) $A88909.l [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E88909.l		; EF 09 89 E8 ; Subtract with carry (long) $E88909.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda #$BA88.w		; A9 88 BA ; Load #$BA88.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $90, $88		; 90 88 ; Branch if carry clear to $90, $88 [Flow: branch]
	stx $8C88.w		; 8E 88 8C ; Store X register to $8C88.w [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy $88.b,X		; B4 88 ; Load Y register $88.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	sta $888D88.l		; 8F 88 8D 88 ; Store accumulator (long) $888D88.l [Reads: Accumulator]
	ldy $C8.b,X		; B4 C8 ; Load Y register $C8.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda #$BAC8.w		; A9 C8 BA ; Load #$BAC8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($88.b),Y		; 91 88 ; Store accumulator ($88.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ldx #$9688.w		; A2 88 96 ; Load #$9688.w into X register [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $90, $88		; 90 88 ; Branch if carry clear to $90, $88 [Flow: branch]
	stx $8C88.w		; 8E 88 8C ; Store X register to $8C88.w [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($88.b),Y		; 91 88 ; Store accumulator ($88.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $888D88.l		; 8F 88 8D 88 ; Store accumulator (long) $888D88.l [Reads: Accumulator]
	.db $90, $88		; 90 88 ; Branch if carry clear to $90, $88 [Flow: branch]
	lda $88.b,S		; A3 88 ; Load accumulator (stack relative) $88.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta [$88.b],Y		; 97 88 ; Store accumulator (long indexed) [$88.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($88.b),Y		; 91 88 ; Store accumulator ($88.b),Y [Reads: Direct Page, Y Index, Accumulator]
	.db $10, $88		; 10 88 ; Branch if plus to $10, $88 [Flow: branch]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $88, $11		; 82 88 11 ; Branch always long to $82, $88, $11 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $88.b,S		; 83 88 ; Store accumulator (stack relative) $88.b,S [Reads: Stack Pointer, Accumulator]
	ora ($C8.b),Y		; 11 C8 ; OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $C8.b,S		; 83 C8 ; Store accumulator (stack relative) $C8.b,S [Reads: Stack Pointer, Accumulator]
	.db $10, $C8		; 10 C8 ; Branch if plus to $10, $C8 [Flow: branch]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $C8, $A2		; 82 C8 A2 ; Branch always long to $82, $C8, $A2 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	stx $88.b,Y		; 96 88 ; Store X register $88.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	.db $90, $88		; 90 88 ; Branch if carry clear to $90, $88 [Flow: branch]
	stx $8C88.w		; 8E 88 8C ; Store X register to $8C88.w [Reads: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($88.b),Y		; 91 88 ; Store accumulator ($88.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta $888D88.l		; 8F 88 8D 88 ; Store accumulator (long) $888D88.l [Reads: Accumulator]
	.db $90, $88		; 90 88 ; Branch if carry clear to $90, $88 [Flow: branch]
	lda $88.b,S		; A3 88 ; Load accumulator (stack relative) $88.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta [$88.b],Y		; 97 88 ; Store accumulator (long indexed) [$88.b],Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($88.b),Y		; 91 88 ; Store accumulator ($88.b),Y [Reads: Direct Page, Y Index, Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A88909.l		; EF 09 89 A8 ; Subtract with carry (long) $A88909.l [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E88909.l		; EF 09 89 E8 ; Subtract with carry (long) $E88909.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bit $88.b,X		; 34 88 ; Test bits $88.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $88.b		; 24 88 ; Test bits $88.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $82, $88, $35		; 82 88 35 ; Branch always long to $82, $88, $35 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and $88.b		; 25 88 ; Logical AND $88.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $88.b,S		; 83 88 ; Store accumulator (stack relative) $88.b,S [Reads: Stack Pointer, Accumulator]
	and $C8.b,X		; 35 C8 ; Logical AND $C8.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $C8.b		; 25 C8 ; Logical AND $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $C8.b,S		; 83 C8 ; Store accumulator (stack relative) $C8.b,S [Reads: Stack Pointer, Accumulator]
	bit $C8.b,X		; 34 C8 ; Test bits $C8.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $C8.b		; 24 C8 ; Test bits $C8.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $82, $C8, $0D		; 82 C8 0D ; Branch always long to $82, $C8, $0D [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $78A8.w		; 2C A8 78 ; Test bits $78A8.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A82D09.l		; EF 09 2D A8 ; Subtract with carry (long) $A82D09.l [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E82D09.l		; EF 09 2D E8 ; Subtract with carry (long) $E82D09.l [Writes: Accumulator] [Flags: NCVZ]
	ora $08C8.w		; 0D C8 08 ; Logical OR $08C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $0BE8.w		; 2C E8 0B ; Test bits $0BE8.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $88.b		; 00 88 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $88		; B0 88 ; Branch if carry set to $B0, $88 [Flow: branch]
	ora ($88.b),Y		; 11 88 ; OR accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($88.b),Y		; B1 88 ; Load accumulator ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($C8.b),Y		; 11 C8 ; OR accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($C8.b,X)		; 01 C8 ; Logical OR ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($C8.b),Y		; B1 C8 ; Load accumulator ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	brk $C8.b		; 00 C8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $B0, $C8		; B0 C8 ; Branch if carry set to $B0, $C8 [Flow: branch]
	tsb $2488.w		; 0C 88 24 ; Test and set bits $2488.w [Reads: Accumulator] [Flags: Z]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $B0, $88		; B0 88 ; Branch if carry set to $B0, $88 [Flow: branch]
	and $88.b,X		; 35 88 ; Logical AND $88.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $88.b		; 25 88 ; Logical AND $88.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($88.b),Y		; B1 88 ; Load accumulator ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $C8.b,X		; 35 C8 ; Logical AND $C8.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $C8.b		; 25 C8 ; Logical AND $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($C8.b),Y		; B1 C8 ; Load accumulator ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $24C8.w		; 0C C8 24 ; Test and set bits $24C8.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $B0, $C8		; B0 C8 ; Branch if carry set to $B0, $C8 [Flow: branch]
	ora $0888.w		; 0D 88 08 ; Logical OR $0888.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $78A8.w		; 2C A8 78 ; Test bits $78A8.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A82D09.l		; EF 09 2D A8 ; Subtract with carry (long) $A82D09.l [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E82D09.l		; EF 09 2D E8 ; Subtract with carry (long) $E82D09.l [Writes: Accumulator] [Flags: NCVZ]
	ora $08C8.w		; 0D C8 08 ; Logical OR $08C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $0DE8.w		; 2C E8 0D ; Test bits $0DE8.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $78A8.w		; 2C A8 78 ; Test bits $78A8.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A82D09.l		; EF 09 2D A8 ; Subtract with carry (long) $A82D09.l [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E82D09.l		; EF 09 2D E8 ; Subtract with carry (long) $E82D09.l [Writes: Accumulator] [Flags: NCVZ]
	ora $08C8.w		; 0D C8 08 ; Logical OR $08C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $0CE8.w		; 2C E8 0C ; Test bits $0CE8.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $88.b		; 24 88 ; Test bits $88.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $B0, $88		; B0 88 ; Branch if carry set to $B0, $88 [Flow: branch]
	and $88.b,X		; 35 88 ; Logical AND $88.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $88.b		; 25 88 ; Logical AND $88.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($88.b),Y		; B1 88 ; Load accumulator ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $C8.b,X		; 35 C8 ; Logical AND $C8.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $C8.b		; 25 C8 ; Logical AND $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($C8.b),Y		; B1 C8 ; Load accumulator ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $24C8.w		; 0C C8 24 ; Test and set bits $24C8.w [Reads: Accumulator] [Flags: Z]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $B0, $C8		; B0 C8 ; Branch if carry set to $B0, $C8 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $82, $A8, $78		; 82 A8 78 ; Branch always long to $82, $A8, $78 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A88309.l		; EF 09 83 A8 ; Subtract with carry (long) $A88309.l [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E88309.l		; EF 09 83 E8 ; Subtract with carry (long) $E88309.l [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $82, $E8, $75		; 82 E8 75 ; Branch always long to $82, $E8, $75 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc [$88.b],Y		; 77 88 ; Add with carry (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $A8.b		; 86 A8 ; Store X register to $A8.b [Reads: X Index]
	eor $EF88.w,Y		; 59 88 EF ; Exclusive OR accumulator with memory $EF88.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$A887.w		; 09 87 A8 ; Logical OR #$A887.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $EFC8.w,Y		; 59 C8 EF ; Exclusive OR accumulator with memory $EFC8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$E887.w		; 09 87 E8 ; Logical OR #$E887.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $C8.b,X		; 75 C8 ; Add $C8.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$C8.b],Y		; 77 C8 ; Add with carry (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	stx $E8.b		; 86 E8 ; Store X register to $E8.b [Reads: X Index]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $88.b,X		; 74 88 ; Store zero to $88.b,X [Reads: X Index]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($88.b)		; 72 88 ; Add with carry (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($88.b)		; 72 88 ; Add with carry (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($88.b)		; 72 88 ; Add with carry (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $C8.b,X		; 76 C8 ; Rotate right $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $C8.b,X		; 76 C8 ; Rotate right $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $C8.b,X		; 76 C8 ; Rotate right $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $C8.b,X		; 76 C8 ; Rotate right $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $C8.b,X		; 76 C8 ; Rotate right $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $C8.b,X		; 76 C8 ; Rotate right $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc $C8.b,X		; 75 C8 ; Add $C8.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $C8.b,X		; 74 C8 ; Store zero to $C8.b,X [Reads: X Index]
	adc ($C8.b,S),Y		; 73 C8 ; Add with carry (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($C8.b)		; 72 C8 ; Add with carry (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($C8.b)		; 72 C8 ; Add with carry (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($C8.b)		; 72 C8 ; Add with carry (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	sta ($78.b),Y		; 91 78 ; Store accumulator ($78.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($5E.b),Y		; 91 5E ; Store accumulator ($5E.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($6E.b),Y		; 91 6E ; Store accumulator ($6E.b),Y [Reads: Direct Page, Y Index, Accumulator]
	lda #$9174.w		; A9 74 91 ; Load #$9174.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E96E89.l		; EF 89 6E E9 ; Subtract with carry (long) $E96E89.l [Writes: Accumulator] [Flags: NCVZ]
	stz $D1.b,X		; 74 D1 ; Store zero to $D1.b,X [Reads: X Index]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A96EC9.l		; EF C9 6E A9 ; Subtract with carry (long) $A96EC9.l [Writes: Accumulator] [Flags: NCVZ]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	cmp ($78.b),Y		; D1 78 ; Compare accumulator ($78.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($5E.b),Y		; D1 5E ; Compare accumulator ($5E.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($6E.b),Y		; D1 6E ; Compare accumulator ($6E.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	sbc #$880D.w		; E9 0D 88 ; Subtract #$880D.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $B0, $A8		; B0 A8 ; Branch if carry set to $B0, $A8 [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $A8B109.l		; EF 09 B1 A8 ; Subtract with carry (long) $A8B109.l [Writes: Accumulator] [Flags: NCVZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sbc $E8B109.l		; EF 09 B1 E8 ; Subtract with carry (long) $E8B109.l [Writes: Accumulator] [Flags: NCVZ]
	ora $08C8.w		; 0D C8 08 ; Logical OR $08C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $B0, $E8		; B0 E8 ; Branch if carry set to $B0, $E8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$296E.w		; 09 6E 29 ; Logical OR #$296E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr $C929.w,X		; 5E 29 C9 ; Logical shift right $C929.w,X [Reads: X Index] [Flags: NCZ]
	trb $D9.b		; 14 D9 ; Test and reset bits $D9.b [Reads: Accumulator] [Flags: Z]
	trb $4E.b		; 14 4E ; Test and reset bits $4E.b [Reads: Accumulator] [Flags: Z]
	and #$54C9.w		; 29 C9 54 ; Logical AND #$54C9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $4E54.w,Y		; D9 54 4E ; Compare accumulator $4E54.w,Y [Reads: Y Index] [Flags: NCZ]
	adc #$4960.w		; 69 60 49 ; Add #$4960.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ror $5E69.w		; 6E 69 5E ; Rotate right $5E69.w [Flags: NCZ]
	adc #$288A.w		; 69 8A 28 ; Add #$288A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora #$EF08.w		; 09 08 EF ; Logical OR #$EF08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0A88.w		; 09 88 0A ; Logical OR #$0A88.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7908.w,Y		; 79 08 79 ; Add $7908.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $3D28.w,X		; 3C 28 3D ; Test bits $3D28.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $3CA8.w,X		; 3D A8 3C ; AND accumulator with memory $3CA8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora #$EF08.w		; 09 08 EF ; Logical OR #$EF08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$1D88.w		; 09 88 1D ; Logical OR #$1D88.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7908.w,Y		; 79 08 79 ; Add $7908.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $8A88.w,X		; 1D 88 8A ; OR accumulator with memory $8A88.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora #$EF08.w		; 09 08 EF ; Logical OR #$EF08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0A88.w		; 09 88 0A ; Logical OR #$0A88.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7908.w,Y		; 79 08 79 ; Add $7908.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	sty $88.b		; 84 88 ; Store Y register to $88.b [Reads: Y Index]
	rol $08.b		; 26 08 ; Rotate left $08.b [Reads: Direct Page] [Flags: NCZ]
	rol $08.b,X		; 36 08 ; Rotate left $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $88.b,X		; 36 88 ; Rotate left $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $88.b		; 26 88 ; Rotate left $88.b [Reads: Direct Page] [Flags: NCZ]
	and [$08.b]		; 27 08 ; AND accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$08.b],Y		; 37 08 ; AND accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$88.b],Y		; 37 88 ; AND accumulator with memory (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$88.b]		; 27 88 ; AND accumulator with memory (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $9808.w,Y		; 99 08 98 ; Store accumulator to $9808.w,Y [Reads: Y Index, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $2D08.w,Y		; 99 08 2D ; Store accumulator to $2D08.w,Y [Reads: Y Index, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $2D08.w,X		; 3D 08 2D ; AND accumulator with memory $2D08.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and $8408.w,X		; 3D 08 84 ; AND accumulator with memory $8408.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	sty $88.b		; 84 88 ; Store Y register to $88.b [Reads: Y Index]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $88.b		; 05 88 ; Logical OR $88.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $88.b,S		; 03 88 ; OR accumulator with stack relative $88.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	asl $88.b		; 06 88 ; Arithmetic shift left $88.b [Reads: Direct Page] [Flags: NCZ]
	tsb $88.b		; 04 88 ; Test and set bits $88.b [Reads: Accumulator] [Flags: Z]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $BD08.w,X		; BC 08 BD ; Load Y register $BD08.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $BF08.w,Y		; BE 08 BF ; Load X register $BF08.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	sty $88.b		; 84 88 ; Store Y register to $88.b [Reads: Y Index]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($08.b,S),Y		; 13 08 ; OR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($88.b,S),Y		; 13 88 ; OR accumulator (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $88.b,S		; 03 88 ; OR accumulator with stack relative $88.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $88.b		; 14 88 ; Test and reset bits $88.b [Reads: Accumulator] [Flags: Z]
	tsb $88.b		; 04 88 ; Test and set bits $88.b [Reads: Accumulator] [Flags: Z]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($08.b)		; 92 08 ; Store accumulator (indirect) ($08.b) [Reads: Direct Page, Accumulator]
	sta ($08.b,S),Y		; 93 08 ; Store accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldy $BD08.w,X		; BC 08 BD ; Load Y register $BD08.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $A408.w,Y		; 99 08 A4 ; Store accumulator to $A408.w,Y [Reads: Y Index, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx $BF08.w,Y		; BE 08 BF ; Load X register $BF08.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sty $08.b		; 84 08 ; Store Y register to $08.b [Reads: Y Index]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	sta $88.b		; 85 88 ; Store accumulator to $88.b [Reads: Accumulator]
	sty $88.b		; 84 88 ; Store Y register to $88.b [Reads: Y Index]
	rol $08.b		; 26 08 ; Rotate left $08.b [Reads: Direct Page] [Flags: NCZ]
	rol $08.b,X		; 36 08 ; Rotate left $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $88.b,X		; 36 88 ; Rotate left $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $88.b		; 26 88 ; Rotate left $88.b [Reads: Direct Page] [Flags: NCZ]
	and [$08.b]		; 27 08 ; AND accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$08.b],Y		; 37 08 ; AND accumulator with memory (long indexed) [$08.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$88.b],Y		; 37 88 ; AND accumulator with memory (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$88.b]		; 27 88 ; AND accumulator with memory (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora #$EF08.w		; 09 08 EF ; Logical OR #$EF08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0A88.w		; 09 88 0A ; Logical OR #$0A88.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7908.w,Y		; 79 08 79 ; Add $7908.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	bit $3D28.w,X		; 3C 28 3D ; Test bits $3D28.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $3CA8.w,X		; 3D A8 3C ; AND accumulator with memory $3CA8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ora #$EF08.w		; 09 08 EF ; Logical OR #$EF08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$1D88.w		; 09 88 1D ; Logical OR #$1D88.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7908.w,Y		; 79 08 79 ; Add $7908.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $B288.w,X		; 1D 88 B2 ; OR accumulator with memory $B288.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($08.b,S),Y		; B3 08 ; Load accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($88.b,S),Y		; B3 88 ; Load accumulator (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($88.b)		; B2 88 ; Load accumulator (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $08.b,S		; 03 08 ; OR accumulator with stack relative $08.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($08.b,S),Y		; 13 08 ; OR accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($88.b,S),Y		; 13 88 ; OR accumulator (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $88.b,S		; 03 88 ; OR accumulator with stack relative $88.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $08.b		; 14 08 ; Test and reset bits $08.b [Reads: Accumulator] [Flags: Z]
	trb $88.b		; 14 88 ; Test and reset bits $88.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($08.b)		; B2 08 ; Load accumulator (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($08.b,S),Y		; B3 08 ; Load accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($88.b,S),Y		; B3 88 ; Load accumulator (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($88.b)		; B2 88 ; Load accumulator (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $08.b		; 26 08 ; Rotate left $08.b [Reads: Direct Page] [Flags: NCZ]
	rol $08.b,X		; 36 08 ; Rotate left $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $88.b,X		; 36 88 ; Rotate left $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $88.b		; 26 88 ; Rotate left $88.b [Reads: Direct Page] [Flags: NCZ]
	trb $3708.w		; 1C 08 37 ; Test and reset bits $3708.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and [$88.b],Y		; 37 88 ; AND accumulator with memory (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $3C88.w		; 1C 88 3C ; Test and reset bits $3C88.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $3D28.w,X		; 3D 28 3D ; AND accumulator with memory $3D28.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	bit $09A8.w,X		; 3C A8 09 ; Test bits $09A8.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $09EF09.l		; EF 09 EF 09 ; Subtract with carry (long) $09EF09.l [Writes: Accumulator] [Flags: NCVZ]
	ora #$1D88.w		; 09 88 1D ; Logical OR #$1D88.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7908.w,Y		; 79 08 79 ; Add $7908.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $B288.w,X		; 1D 88 B2 ; OR accumulator with memory $B288.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($08.b,S),Y		; B3 08 ; Load accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($88.b,S),Y		; B3 88 ; Load accumulator (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($88.b)		; B2 88 ; Load accumulator (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $08.b		; 26 08 ; Rotate left $08.b [Reads: Direct Page] [Flags: NCZ]
	rol $08.b,X		; 36 08 ; Rotate left $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $88.b,X		; 36 88 ; Rotate left $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $88.b		; 26 88 ; Rotate left $88.b [Reads: Direct Page] [Flags: NCZ]
	trb $3708.w		; 1C 08 37 ; Test and reset bits $3708.w [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	and [$88.b],Y		; 37 88 ; AND accumulator with memory (long indexed) [$88.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $3C88.w		; 1C 88 3C ; Test and reset bits $3C88.w [Reads: Accumulator] [Flags: Z]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	and $3D28.w,X		; 3D 28 3D ; AND accumulator with memory $3D28.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	bit $09A8.w,X		; 3C A8 09 ; Test bits $09A8.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $09EF09.l		; EF 09 EF 09 ; Subtract with carry (long) $09EF09.l [Writes: Accumulator] [Flags: NCVZ]
	ora #$1D88.w		; 09 88 1D ; Logical OR #$1D88.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7908.w,Y		; 79 08 79 ; Add $7908.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $8488.w,X		; 1D 88 84 ; OR accumulator with memory $8488.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	sta $A8.b		; 85 A8 ; Store accumulator to $A8.b [Reads: Accumulator]
	sty $A8.b		; 84 A8 ; Store Y register to $A8.b [Reads: Y Index]
	ora #$EF08.w		; 09 08 EF ; Logical OR #$EF08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0A88.w		; 09 88 0A ; Logical OR #$0A88.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7908.w,Y		; 79 08 79 ; Add $7908.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldy #$A128.w		; A0 28 A1 ; Load #$A128.w into Y register [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda ($A8.b,X)		; A1 A8 ; Load accumulator ($A8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$67A8.w		; A0 A8 67 ; Load #$67A8.w into Y register [Writes: Y Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sbc $09EF09.l		; EF 09 EF 09 ; Subtract with carry (long) $09EF09.l [Writes: Accumulator] [Flags: NCVZ]
	adc [$88.b]		; 67 88 ; Add with carry (long) [$88.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc $88.b		; 65 88 ; Add $88.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ror $7E29.w,X		; 7E 29 7E ; Rotate right $7E29.w,X [Reads: X Index] [Flags: NCZ]
	lda #$297E.w		; A9 7E 29 ; Load #$297E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ror $ACA9.w,X		; 7E A9 AC ; Rotate right $ACA9.w,X [Reads: X Index] [Flags: NCZ]
	ora ($EF.b),Y		; 11 EF ; OR accumulator with memory ($EF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora #$89EF.w		; 09 EF 89 ; Logical OR #$89EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $7991.w		; AC 91 79 ; Load $7991.w into Y register [Writes: Y Index] [Flags: NZ]
	ora ($79.b),Y		; 11 79 ; OR accumulator with memory ($79.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7988.w,Y		; 79 88 79 ; Add $7988.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($57.b),Y		; 91 57 ; Store accumulator ($57.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ora ($75.b),Y		; 11 75 ; OR accumulator with memory ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($75.b),Y		; 11 75 ; OR accumulator with memory ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta ($57.b),Y		; 91 57 ; Store accumulator ($57.b),Y [Reads: Direct Page, Y Index, Accumulator]
	sta ($B2.b),Y		; 91 B2 ; Store accumulator ($B2.b),Y [Reads: Direct Page, Y Index, Accumulator]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda ($28.b,S),Y		; B3 28 ; Load accumulator (stack relative indirect indexed) ($28.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($A8.b,S),Y		; B3 A8 ; Load accumulator (stack relative indirect indexed) ($A8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($A8.b)		; B2 A8 ; Load accumulator (indirect) ($A8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$EF08.w		; 09 08 EF ; Logical OR #$EF08.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$1D88.w		; 09 88 1D ; Logical OR #$1D88.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	adc $7908.w,Y		; 79 08 79 ; Add $7908.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $0A88.w,X		; 1D 88 0A ; OR accumulator with memory $0A88.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $7948.w,Y		; 79 48 79 ; Add $7948.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora #$EF48.w		; 09 48 EF ; Logical OR #$EF48.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$8AC8.w		; 09 C8 8A ; Logical OR #$8AC8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora $7948.w,X		; 1D 48 79 ; OR accumulator with memory $7948.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $1DC8.w,Y		; 79 C8 1D ; Add $1DC8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora #$EF48.w		; 09 48 EF ; Logical OR #$EF48.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$3CC8.w		; 09 C8 3C ; Logical OR #$3CC8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and $3D68.w,X		; 3D 68 3D ; AND accumulator with memory $3D68.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bit $0AE8.w,X		; 3C E8 0A ; Test bits $0AE8.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $7948.w,Y		; 79 48 79 ; Add $7948.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora #$EF48.w		; 09 48 EF ; Logical OR #$EF48.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$8AC8.w		; 09 C8 8A ; Logical OR #$8AC8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	and [$48.b]		; 27 48 ; AND accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$48.b],Y		; 37 48 ; AND accumulator with memory (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$C8.b],Y		; 37 C8 ; AND accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$C8.b]		; 27 C8 ; AND accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $48.b		; 26 48 ; Rotate left $48.b [Reads: Direct Page] [Flags: NCZ]
	rol $48.b,X		; 36 48 ; Rotate left $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $C8.b,X		; 36 C8 ; Rotate left $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $C8.b		; 26 C8 ; Rotate left $C8.b [Reads: Direct Page] [Flags: NCZ]
	sty $48.b		; 84 48 ; Store Y register to $48.b [Reads: Y Index]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	sty $C8.b		; 84 C8 ; Store Y register to $C8.b [Reads: Y Index]
	and $3D48.w		; 2D 48 3D ; Logical AND $3D48.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and $3D48.w		; 2D 48 3D ; Logical AND $3D48.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $9848.w,Y		; 99 48 98 ; Store accumulator to $9848.w,Y [Reads: Y Index, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $9248.w,Y		; 99 48 92 ; Store accumulator to $9248.w,Y [Reads: Y Index, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($48.b,S),Y		; 93 48 ; Store accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($48.b)		; 92 48 ; Store accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator]
	sta ($48.b,S),Y		; 93 48 ; Store accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	asl $48.b		; 06 48 ; Arithmetic shift left $48.b [Reads: Direct Page] [Flags: NCZ]
	asl $C8.b		; 06 C8 ; Arithmetic shift left $C8.b [Reads: Direct Page] [Flags: NCZ]
	tsb $C8.b		; 04 C8 ; Test and set bits $C8.b [Reads: Accumulator] [Flags: Z]
	ora $48.b,S		; 03 48 ; OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $48.b		; 05 48 ; Logical OR $48.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $C8.b		; 05 C8 ; Logical OR $C8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $C8.b,S		; 03 C8 ; OR accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $48.b		; 84 48 ; Store Y register to $48.b [Reads: Y Index]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	sty $C8.b		; 84 C8 ; Store Y register to $C8.b [Reads: Y Index]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $BF48.w,Y		; BE 48 BF ; Load X register $BF48.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $BD48.w,X		; BC 48 BD ; Load Y register $BD48.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($48.b)		; 92 48 ; Store accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta ($48.b,S),Y		; 93 48 ; Store accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	trb $48.b		; 14 48 ; Test and reset bits $48.b [Reads: Accumulator] [Flags: Z]
	trb $C8.b		; 14 C8 ; Test and reset bits $C8.b [Reads: Accumulator] [Flags: Z]
	tsb $C8.b		; 04 C8 ; Test and set bits $C8.b [Reads: Accumulator] [Flags: Z]
	ora $48.b,S		; 03 48 ; OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($48.b,S),Y		; 13 48 ; OR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($C8.b,S),Y		; 13 C8 ; OR accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $C8.b,S		; 03 C8 ; OR accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $48.b		; 84 48 ; Store Y register to $48.b [Reads: Y Index]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	sty $C8.b		; 84 C8 ; Store Y register to $C8.b [Reads: Y Index]
	ldy $48.b		; A4 48 ; Load $48.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx $BF48.w,Y		; BE 48 BF ; Load X register $BF48.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy $BD48.w,X		; BC 48 BD ; Load Y register $BD48.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta $9248.w,Y		; 99 48 92 ; Store accumulator to $9248.w,Y [Reads: Y Index, Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sta ($48.b,S),Y		; 93 48 ; Store accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	sta ($48.b)		; 92 48 ; Store accumulator (indirect) ($48.b) [Reads: Direct Page, Accumulator]
	sta ($48.b,S),Y		; 93 48 ; Store accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $7948.w,Y		; 79 48 79 ; Add $7948.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora #$EF48.w		; 09 48 EF ; Logical OR #$EF48.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$8AC8.w		; 09 C8 8A ; Logical OR #$8AC8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	and [$48.b]		; 27 48 ; AND accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$48.b],Y		; 37 48 ; AND accumulator with memory (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$C8.b],Y		; 37 C8 ; AND accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$C8.b]		; 27 C8 ; AND accumulator with memory (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $48.b		; 26 48 ; Rotate left $48.b [Reads: Direct Page] [Flags: NCZ]
	rol $48.b,X		; 36 48 ; Rotate left $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $C8.b,X		; 36 C8 ; Rotate left $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $C8.b		; 26 C8 ; Rotate left $C8.b [Reads: Direct Page] [Flags: NCZ]
	sty $48.b		; 84 48 ; Store Y register to $48.b [Reads: Y Index]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	sty $C8.b		; 84 C8 ; Store Y register to $C8.b [Reads: Y Index]
	ora $7948.w,X		; 1D 48 79 ; OR accumulator with memory $7948.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $1DC8.w,Y		; 79 C8 1D ; Add $1DC8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora #$EF48.w		; 09 48 EF ; Logical OR #$EF48.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$3CC8.w		; 09 C8 3C ; Logical OR #$3CC8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and $3D68.w,X		; 3D 68 3D ; AND accumulator with memory $3D68.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bit $1BE8.w,X		; 3C E8 1B ; Test bits $1BE8.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	trb $48.b		; 14 48 ; Test and reset bits $48.b [Reads: Accumulator] [Flags: Z]
	trb $C8.b		; 14 C8 ; Test and reset bits $C8.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $48.b,S		; 03 48 ; OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($48.b,S),Y		; 13 48 ; OR accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($C8.b,S),Y		; 13 C8 ; OR accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $C8.b,S		; 03 C8 ; OR accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($48.b)		; B2 48 ; Load accumulator (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($48.b,S),Y		; B3 48 ; Load accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($C8.b,S),Y		; B3 C8 ; Load accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($C8.b)		; B2 C8 ; Load accumulator (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $3748.w		; 1C 48 37 ; Test and reset bits $3748.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and [$C8.b],Y		; 37 C8 ; AND accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $26C8.w		; 1C C8 26 ; Test and reset bits $26C8.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	rol $48.b,X		; 36 48 ; Rotate left $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $C8.b,X		; 36 C8 ; Rotate left $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $C8.b		; 26 C8 ; Rotate left $C8.b [Reads: Direct Page] [Flags: NCZ]
	lda ($48.b)		; B2 48 ; Load accumulator (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($48.b,S),Y		; B3 48 ; Load accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($C8.b,S),Y		; B3 C8 ; Load accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($C8.b)		; B2 C8 ; Load accumulator (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $7948.w,X		; 1D 48 79 ; OR accumulator with memory $7948.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $1DC8.w,Y		; 79 C8 1D ; Add $1DC8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora #$EF48.w		; 09 48 EF ; Logical OR #$EF48.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$3CC8.w		; 09 C8 3C ; Logical OR #$3CC8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and $3D68.w,X		; 3D 68 3D ; AND accumulator with memory $3D68.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bit $1DE8.w,X		; 3C E8 1D ; Test bits $1DE8.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $7948.w,Y		; 79 48 79 ; Add $7948.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $09C8.w,X		; 1D C8 09 ; OR accumulator with memory $09C8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $09EF09.l		; EF 09 EF 09 ; Subtract with carry (long) $09EF09.l [Writes: Accumulator] [Flags: NCVZ]
	ora #$3CC8.w		; 09 C8 3C ; Logical OR #$3CC8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and $3D68.w,X		; 3D 68 3D ; AND accumulator with memory $3D68.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bit $1CE8.w,X		; 3C E8 1C ; Test bits $1CE8.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and [$48.b],Y		; 37 48 ; AND accumulator with memory (long indexed) [$48.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and [$C8.b],Y		; 37 C8 ; AND accumulator with memory (long indexed) [$C8.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $26C8.w		; 1C C8 26 ; Test and reset bits $26C8.w [Reads: Accumulator] [Flags: Z]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	rol $48.b,X		; 36 48 ; Rotate left $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $C8.b,X		; 36 C8 ; Rotate left $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $C8.b		; 26 C8 ; Rotate left $C8.b [Reads: Direct Page] [Flags: NCZ]
	lda ($48.b)		; B2 48 ; Load accumulator (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($48.b,S),Y		; B3 48 ; Load accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($C8.b,S),Y		; B3 C8 ; Load accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($C8.b)		; B2 C8 ; Load accumulator (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $7948.w,Y		; 79 48 79 ; Add $7948.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora #$EF48.w		; 09 48 EF ; Logical OR #$EF48.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09EF.w		; 09 EF 09 ; Logical OR #$09EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$84C8.w		; 09 C8 84 ; Logical OR #$84C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $68.b		; 85 68 ; Store accumulator to $68.b [Reads: Accumulator]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sty $E8.b		; 84 E8 ; Store Y register to $E8.b [Reads: Y Index]
	adc $48.b		; 65 48 ; Add $48.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	adc $C8.b		; 65 C8 ; Add $C8.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc [$48.b]		; 67 48 ; Add with carry (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $09EF09.l		; EF 09 EF 09 ; Subtract with carry (long) $09EF09.l [Writes: Accumulator] [Flags: NCVZ]
	adc [$C8.b]		; 67 C8 ; Add with carry (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$A168.w		; A0 68 A1 ; Load #$A168.w into Y register [Writes: Y Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lda ($E8.b,X)		; A1 E8 ; Load accumulator ($E8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$57E8.w		; A0 E8 57 ; Load #$57E8.w into Y register [Writes: Y Index] [Flags: NZ]
	eor ($75.b),Y		; 51 75 ; Exclusive OR accumulator with memory ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($75.b),Y		; 51 75 ; Exclusive OR accumulator with memory ($75.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp ($57.b),Y		; D1 57 ; Compare accumulator ($57.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp ($79.b),Y		; D1 79 ; Compare accumulator ($79.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor ($79.b),Y		; 51 79 ; Exclusive OR accumulator with memory ($79.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	adc $79C8.w,Y		; 79 C8 79 ; Add $79C8.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp ($AC.b),Y		; D1 AC ; Compare accumulator ($AC.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor ($EF.b),Y		; 51 EF ; Exclusive OR accumulator with memory ($EF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$C9EF.w		; 49 EF C9 ; Exclusive OR #$C9EF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $7ED1.w		; AC D1 7E ; Load $7ED1.w into Y register [Writes: Y Index] [Flags: NZ]
	adc #$E97E.w		; 69 7E E9 ; Add #$E97E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ror $7E69.w,X		; 7E 69 7E ; Rotate right $7E69.w,X [Reads: X Index] [Flags: NCZ]
	sbc #$481D.w		; E9 1D 48 ; Subtract #$481D.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	adc $7948.w,Y		; 79 48 79 ; Add $7948.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $09C8.w,X		; 1D C8 09 ; OR accumulator with memory $09C8.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sbc $09EF09.l		; EF 09 EF 09 ; Subtract with carry (long) $09EF09.l [Writes: Accumulator] [Flags: NCVZ]
	ora #$B2C8.w		; 09 C8 B2 ; Logical OR #$B2C8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lda ($68.b,S),Y		; B3 68 ; Load accumulator (stack relative indirect indexed) ($68.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($E8.b,S),Y		; B3 E8 ; Load accumulator (stack relative indirect indexed) ($E8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($E8.b)		; B2 E8 ; Load accumulator (indirect) ($E8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $82, $28, $20		; 82 28 20 ; Branch always long to $82, $28, $20 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $30, $08		; 30 08 ; Branch if minus to $30, $08 [Flow: branch]
	sta $28.b,S		; 83 28 ; Store accumulator (stack relative) $28.b,S [Reads: Stack Pointer, Accumulator]
	and ($08.b,X)		; 21 08 ; Logical AND ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($08.b),Y		; 31 08 ; AND accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $68.b,S		; 83 68 ; Store accumulator (stack relative) $68.b,S [Reads: Stack Pointer, Accumulator]
	and ($48.b,X)		; 21 48 ; Logical AND ($48.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($48.b),Y		; 31 48 ; AND accumulator with memory ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $82, $68, $20		; 82 68 20 ; Branch always long to $82, $68, $20 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $30, $48		; 30 48 ; Branch if minus to $30, $48 [Flow: branch]
	.db $82, $28, $28		; 82 28 28 ; Branch always long to $82, $28, $28 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $28.b,S		; 83 28 ; Store accumulator (stack relative) $28.b,S [Reads: Stack Pointer, Accumulator]
	and #$3908.w		; 29 08 39 ; Logical AND #$3908.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	sta $68.b,S		; 83 68 ; Store accumulator (stack relative) $68.b,S [Reads: Stack Pointer, Accumulator]
	and #$3948.w		; 29 48 39 ; Logical AND #$3948.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $82, $68, $28		; 82 68 28 ; Branch always long to $82, $68, $28 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $B0, $28		; B0 28 ; Branch if carry set to $B0, $28 [Flow: branch]
	jsr $0E08.w		; 20 08 0E ; Jump to subroutine at $0E08.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($28.b),Y		; B1 28 ; Load accumulator ($28.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($08.b,X)		; 21 08 ; Logical AND ($08.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($08.b),Y		; 31 08 ; AND accumulator with memory ($08.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($68.b),Y		; B1 68 ; Load accumulator ($68.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($48.b,X)		; 21 48 ; Logical AND ($48.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($48.b),Y		; 31 48 ; AND accumulator with memory ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $B0, $68		; B0 68 ; Branch if carry set to $B0, $68 [Flow: branch]
	jsr $0E48.w		; 20 48 0E ; Jump to subroutine at $0E48.w [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $B0, $28		; B0 28 ; Branch if carry set to $B0, $28 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $28B108.l		; 0F 08 B1 28 ; OR accumulator with memory (long) $28B108.l [Writes: Accumulator] [Flags: NZ]
	and #$3908.w		; 29 08 39 ; Logical AND #$3908.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda ($68.b),Y		; B1 68 ; Load accumulator ($68.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$3948.w		; 29 48 39 ; Logical AND #$3948.w with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $B0, $68		; B0 68 ; Branch if carry set to $B0, $68 [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ora $883048.l		; 0F 48 30 88 ; OR accumulator with memory (long) $883048.l [Writes: Accumulator] [Flags: NZ]
	jsr L000288.w		; 20 88 82 ; Jump to subroutine at L000288.w [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and ($88.b),Y		; 31 88 ; AND accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($88.b,X)		; 21 88 ; Logical AND ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $A8.b,S		; 83 A8 ; Store accumulator (stack relative) $A8.b,S [Reads: Stack Pointer, Accumulator]
	and ($C8.b),Y		; 31 C8 ; AND accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($C8.b,X)		; 21 C8 ; Logical AND ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $E8.b,S		; 83 E8 ; Store accumulator (stack relative) $E8.b,S [Reads: Stack Pointer, Accumulator]
	.db $30, $C8		; 30 C8 ; Branch if minus to $30, $C8 [Flow: branch]
	jsr $82C8.w		; 20 C8 82 ; Jump to subroutine at $82C8.w [Writes: Stack Pointer] [Flow: call]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $82, $A8, $39		; 82 A8 39 ; Branch always long to $82, $A8, $39 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and #$8388.w		; 29 88 83 ; Logical AND #$8388.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and $29C8.w,Y		; 39 C8 29 ; AND accumulator with memory $29C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sta $E8.b,S		; 83 E8 ; Store accumulator (stack relative) $E8.b,S [Reads: Stack Pointer, Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $82, $E8, $0E		; 82 E8 0E ; Branch always long to $82, $E8, $0E [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsr $B088.w		; 20 88 B0 ; Jump to subroutine at $B088.w [Writes: Stack Pointer] [Flow: call]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and ($88.b),Y		; 31 88 ; AND accumulator with memory ($88.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($88.b,X)		; 21 88 ; Logical AND ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($A8.b),Y		; B1 A8 ; Load accumulator ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($C8.b),Y		; 31 C8 ; AND accumulator with memory ($C8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($C8.b,X)		; 21 C8 ; Logical AND ($C8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda ($E8.b),Y		; B1 E8 ; Load accumulator ($E8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $20C8.w		; 0E C8 20 ; Arithmetic shift left $20C8.w [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $B0, $E8		; B0 E8 ; Branch if carry set to $B0, $E8 [Flow: branch]
	ora $882888.l		; 0F 88 28 88 ; OR accumulator with memory (long) $882888.l [Writes: Accumulator] [Flags: NZ]
	.db $B0, $A8		; B0 A8 ; Branch if carry set to $B0, $A8 [Flow: branch]
	and $2988.w,Y		; 39 88 29 ; AND accumulator with memory $2988.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($A8.b),Y		; B1 A8 ; Load accumulator ($A8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $29C8.w,Y		; 39 C8 29 ; AND accumulator with memory $29C8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($E8.b),Y		; B1 E8 ; Load accumulator ($E8.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $C828C8.l		; 0F C8 28 C8 ; OR accumulator with memory (long) $C828C8.l [Writes: Accumulator] [Flags: NZ]
	.db $B0, $E8		; B0 E8 ; Branch if carry set to $B0, $E8 [Flow: branch]
	sty $28.b		; 84 28 ; Store Y register to $28.b [Reads: Y Index]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	sta $A8.b		; 85 A8 ; Store accumulator to $A8.b [Reads: Accumulator]
	sty $A8.b		; 84 A8 ; Store Y register to $A8.b [Reads: Y Index]
	jsl $083208.l		; 22 08 32 08 ; Jump to subroutine long $083208.l [Writes: Stack Pointer] [Flow: call]
	and ($88.b)		; 32 88 ; AND accumulator with memory (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $082388.l		; 22 88 23 08 ; Jump to subroutine long $082388.l [Writes: Stack Pointer] [Flow: call]
	and ($08.b,S),Y		; 33 08 ; AND accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($88.b,S),Y		; 33 88 ; AND accumulator (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $88.b,S		; 23 88 ; AND accumulator with stack relative $88.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sty $28.b		; 84 28 ; Store Y register to $28.b [Reads: Y Index]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	sta $A8.b		; 85 A8 ; Store accumulator to $A8.b [Reads: Accumulator]
	sty $A8.b		; 84 A8 ; Store Y register to $A8.b [Reads: Y Index]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($28.b)		; B2 28 ; Load accumulator (indirect) ($28.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($28.b,S),Y		; B3 28 ; Load accumulator (stack relative indirect indexed) ($28.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($A8.b,S),Y		; B3 A8 ; Load accumulator (stack relative indirect indexed) ($A8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($A8.b)		; B2 A8 ; Load accumulator (indirect) ($A8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $083208.l		; 22 08 32 08 ; Jump to subroutine long $083208.l [Writes: Stack Pointer] [Flow: call]
	and ($88.b)		; 32 88 ; AND accumulator with memory (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $081E88.l		; 22 88 1E 08 ; Jump to subroutine long $081E88.l [Writes: Stack Pointer] [Flow: call]
	and ($08.b,S),Y		; 33 08 ; AND accumulator (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($88.b,S),Y		; 33 88 ; AND accumulator (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $B288.w,X		; 1E 88 B2 ; Arithmetic shift left $B288.w,X [Reads: X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda ($28.b,S),Y		; B3 28 ; Load accumulator (stack relative indirect indexed) ($28.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($A8.b,S),Y		; B3 A8 ; Load accumulator (stack relative indirect indexed) ($A8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($A8.b)		; B2 A8 ; Load accumulator (indirect) ($A8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $083B08.l,X		; 1F 08 3B 08 ; Logical OR long $083B08.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $482388.l,X		; 1F 88 23 48 ; Logical OR long $482388.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and ($48.b,S),Y		; 33 48 ; AND accumulator (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($C8.b,S),Y		; 33 C8 ; AND accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and $C8.b,S		; 23 C8 ; AND accumulator with stack relative $C8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsl $483248.l		; 22 48 32 48 ; Jump to subroutine long $483248.l [Writes: Stack Pointer] [Flow: call]
	and ($C8.b)		; 32 C8 ; AND accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $6884C8.l		; 22 C8 84 68 ; Jump to subroutine long $6884C8.l [Writes: Stack Pointer] [Flow: call]
	sta $68.b		; 85 68 ; Store accumulator to $68.b [Reads: Accumulator]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sty $E8.b		; 84 E8 ; Store Y register to $E8.b [Reads: Y Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $68.b		; 84 68 ; Store Y register to $68.b [Reads: Y Index]
	sta $68.b		; 85 68 ; Store accumulator to $68.b [Reads: Accumulator]
	sta $E8.b		; 85 E8 ; Store accumulator to $E8.b [Reads: Accumulator]
	sty $E8.b		; 84 E8 ; Store Y register to $E8.b [Reads: Y Index]
	asl $3348.w,X		; 1E 48 33 ; Arithmetic shift left $3348.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and ($C8.b,S),Y		; 33 C8 ; AND accumulator (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $22C8.w,X		; 1E C8 22 ; Arithmetic shift left $22C8.w,X [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and ($48.b)		; 32 48 ; AND accumulator with memory (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($C8.b)		; 32 C8 ; AND accumulator with memory (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $68B2C8.l		; 22 C8 B2 68 ; Jump to subroutine long $68B2C8.l [Writes: Stack Pointer] [Flow: call]
	lda ($68.b,S),Y		; B3 68 ; Load accumulator (stack relative indirect indexed) ($68.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($E8.b,S),Y		; B3 E8 ; Load accumulator (stack relative indirect indexed) ($E8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($E8.b)		; B2 E8 ; Load accumulator (indirect) ($E8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $483B48.l,X		; 1F 48 3B 48 ; Logical OR long $483B48.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ora $482AC8.l,X		; 1F C8 2A 48 ; Logical OR long $482AC8.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda ($68.b)		; B2 68 ; Load accumulator (indirect) ($68.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($68.b,S),Y		; B3 68 ; Load accumulator (stack relative indirect indexed) ($68.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($E8.b,S),Y		; B3 E8 ; Load accumulator (stack relative indirect indexed) ($E8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($E8.b)		; B2 E8 ; Load accumulator (indirect) ($E8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $88.b,X		; 75 88 ; Add $88.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $88.b,X		; 74 88 ; Store zero to $88.b,X [Reads: X Index]
	adc ($88.b,S),Y		; 73 88 ; Add with carry (stack relative indirect indexed) ($88.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($88.b)		; 72 88 ; Add with carry (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($88.b)		; 72 88 ; Add with carry (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($88.b)		; 72 88 ; Add with carry (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($08.b)		; 72 08 ; Add with carry (indirect) ($08.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($88.b)		; 72 88 ; Add with carry (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($88.b)		; 72 88 ; Add with carry (indirect) ($88.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($08.b,S),Y		; 73 08 ; Add with carry (stack relative indirect indexed) ($08.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	stz $08.b,X		; 74 08 ; Store zero to $08.b,X [Reads: X Index]
	adc $08.b,X		; 75 08 ; Add $08.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $88.b,X		; 76 88 ; Rotate right $88.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $08.b,X		; 76 08 ; Rotate right $08.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ror $C8.b,X		; 76 C8 ; Rotate right $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $C8.b,X		; 76 C8 ; Rotate right $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $C8.b,X		; 76 C8 ; Rotate right $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $C8.b,X		; 76 C8 ; Rotate right $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $C8.b,X		; 76 C8 ; Rotate right $C8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ror $48.b,X		; 76 48 ; Rotate right $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	adc $C8.b,X		; 75 C8 ; Add $C8.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	stz $C8.b,X		; 74 C8 ; Store zero to $C8.b,X [Reads: X Index]
	adc ($C8.b,S),Y		; 73 C8 ; Add with carry (stack relative indirect indexed) ($C8.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($C8.b)		; 72 C8 ; Add with carry (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($C8.b)		; 72 C8 ; Add with carry (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($C8.b)		; 72 C8 ; Add with carry (indirect) ($C8.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($48.b)		; 72 48 ; Add with carry (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($48.b)		; 72 48 ; Add with carry (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($48.b)		; 72 48 ; Add with carry (indirect) ($48.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($48.b,S),Y		; 73 48 ; Add with carry (stack relative indirect indexed) ($48.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	stz $48.b,X		; 74 48 ; Store zero to $48.b,X [Reads: X Index]
	adc $48.b,X		; 75 48 ; Add $48.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl $27.b,X		; 16 27 ; Arithmetic shift left $27.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $2E27.w		; 2E 27 2E ; Rotate left $2E27.w [Flags: NCZ]
	and [$46.b]		; 27 46 ; AND accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$46.b]		; 27 46 ; AND accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$46.b]		; 27 46 ; AND accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$46.b]		; 27 46 ; AND accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$46.b]		; 27 46 ; AND accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$46.b]		; 27 46 ; AND accumulator with memory (long) [$46.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$5E.b]		; 27 5E ; AND accumulator with memory (long) [$5E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$5E.b]		; 27 5E ; AND accumulator with memory (long) [$5E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$5E.b]		; 27 5E ; AND accumulator with memory (long) [$5E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$5E.b]		; 27 5E ; AND accumulator with memory (long) [$5E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$76.b]		; 27 76 ; AND accumulator with memory (long) [$76.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$8E.b]		; 27 8E ; AND accumulator with memory (long) [$8E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$A6.b]		; 27 A6 ; AND accumulator with memory (long) [$A6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$BE.b]		; 27 BE ; AND accumulator with memory (long) [$BE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$BE.b]		; 27 BE ; AND accumulator with memory (long) [$BE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$D6.b]		; 27 D6 ; AND accumulator with memory (long) [$D6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$D6.b]		; 27 D6 ; AND accumulator with memory (long) [$D6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$EE.b]		; 27 EE ; AND accumulator with memory (long) [$EE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$06.b]		; 27 06 ; AND accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	asl $28.b		; 06 28 ; Arithmetic shift left $28.b [Reads: Direct Page] [Flags: NCZ]
	asl $3628.w,X		; 1E 28 36 ; Arithmetic shift left $3628.w,X [Reads: X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	rol $28.b,X		; 36 28 ; Rotate left $28.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $28.b,X		; 36 28 ; Rotate left $28.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	rol $28.b,X		; 36 28 ; Rotate left $28.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	lsr $6628.w		; 4E 28 66 ; Logical shift right $6628.w [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ror $28.b		; 66 28 ; Rotate right $28.b [Reads: Direct Page] [Flags: NCZ]
	ror $28.b		; 66 28 ; Rotate right $28.b [Reads: Direct Page] [Flags: NCZ]
	ror $28.b		; 66 28 ; Rotate right $28.b [Reads: Direct Page] [Flags: NCZ]
	ror $9628.w,X		; 7E 28 96 ; Rotate right $9628.w,X [Reads: X Index] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	ldx $C628.w		; AE 28 C6 ; Load $C628.w into X register [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	dec $F628.w,X		; DE 28 F6 ; Decrement memory $F628.w,X [Reads: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	inc $28.b,X		; F6 28 ; Increment memory $28.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	inc $28.b,X		; F6 28 ; Increment memory $28.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	asl $2629.w		; 0E 29 26 ; Arithmetic shift left $2629.w [Flags: NCZ]
	and #$2958.w		; 29 58 29 ; Logical AND #$2958.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	and #$2990.w		; 29 90 29 ; Logical AND #$2990.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $90, $29		; 90 29 ; Branch if carry clear to $90, $29 [Flow: branch]
	.db $90, $29		; 90 29 ; Branch if carry clear to $90, $29 [Flow: branch]
	.db $90, $29		; 90 29 ; Branch if carry clear to $90, $29 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$29C0.w		; 29 C0 29 ; Logical AND #$29C0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	and #$29F0.w		; 29 F0 29 ; Logical AND #$29F0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $202A.w		; 20 2A 20 ; Jump to subroutine at $202A.w [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $202A.w		; 20 2A 20 ; Jump to subroutine at $202A.w [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $202A.w		; 20 2A 20 ; Jump to subroutine at $202A.w [Writes: Stack Pointer] [Flow: call]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $50, $2A		; 50 2A ; Branch if overflow clear to $50, $2A [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $2A		; B0 2A ; Branch if carry set to $B0, $2A [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cpx #$F82A.w		; E0 2A F8 ; Compare #$F82A.w with X register [Reads: X Index] [Flags: NCZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $2B		; 10 2B ; Branch if plus to $10, $2B [Flow: branch]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	.db $70, $2B		; 70 2B ; Branch if overflow set to $70, $2B [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ldy #$B82B.w		; A0 2B B8 ; Load #$B82B.w into Y register [Writes: Y Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	clv		; B8 ; Clear overflow flag [Flags: V]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	.db $D0, $2B		; D0 2B ; Branch if not equal to $D0, $2B [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	bit $2C3A.w		; 2C 3A 2C ; Test bits $2C3A.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	eor ($2C.b)		; 52 2C ; Exclusive OR accumulator with memory (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $2C6A.w		; 2C 6A 2C ; Test bits $2C6A.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $2C82.w		; 2C 82 2C ; Test bits $2C82.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $82, $2C, $9A		; 82 2C 9A ; Branch always long to $82, $2C, $9A [Flow: branch]
	bit $2C9A.w		; 2C 9A 2C ; Test bits $2C9A.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	bit $2C9A.w		; 2C 9A 2C ; Test bits $2C9A.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	bit $2C9A.w		; 2C 9A 2C ; Test bits $2C9A.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	lda ($2C.b)		; B2 2C ; Load accumulator (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($2C.b)		; B2 2C ; Load accumulator (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($2C.b)		; B2 2C ; Load accumulator (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($2C.b)		; B2 2C ; Load accumulator (indirect) ($2C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	bit $2CE2.w		; 2C E2 2C ; Test bits $2CE2.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	bit $2CFA.w		; 2C FA 2C ; Test bits $2CFA.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	bit $2CFA.w		; 2C FA 2C ; Test bits $2CFA.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	bit $2CFA.w		; 2C FA 2C ; Test bits $2CFA.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	ora ($2D.b)		; 12 2D ; OR accumulator with memory (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($2D.b)		; 12 2D ; OR accumulator with memory (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and $2D42.w		; 2D 42 2D ; Logical AND $2D42.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $42, $2D		; 42 2D ; Reserved instruction
	.db $42, $2D		; 42 2D ; Reserved instruction
	.db $42, $2D		; 42 2D ; Reserved instruction
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	and $2D72.w		; 2D 72 2D ; Logical AND $2D72.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc ($2D.b)		; 72 2D ; Add with carry (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($2D.b)		; 72 2D ; Add with carry (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc ($2D.b)		; 72 2D ; Add with carry (indirect) ($2D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $2DA2.w		; 2D A2 2D ; Logical AND $2DA2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsx		; BA ; Transfer stack pointer to X [Reads: Stack Pointer] [Writes: X Index] [Flags: NZ]
	and $2DD2.w		; 2D D2 2D ; Logical AND $2DD2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	nop		; EA ; No operation
	and $2E02.w		; 2D 02 2E ; Logical AND $2E02.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $2E.b		; 02 2E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $2E.b		; 02 2E ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	rol $2E32.w		; 2E 32 2E ; Rotate left $2E32.w [Flags: NCZ]
	and ($2E.b)		; 32 2E ; AND accumulator with memory (indirect) ($2E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($2E.b)		; 52 2E ; Exclusive OR accumulator with memory (indirect) ($2E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol $2E6A.w		; 2E 6A 2E ; Rotate left $2E6A.w [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	rol $2E6A.w		; 2E 6A 2E ; Rotate left $2E6A.w [Flags: NCZ]
	.db $82, $2E, $82		; 82 2E 82 ; Branch always long to $82, $2E, $82 [Flow: branch]
	rol $2E9A.w		; 2E 9A 2E ; Rotate left $2E9A.w [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	rol $2E9A.w		; 2E 9A 2E ; Rotate left $2E9A.w [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	rol $2E9A.w		; 2E 9A 2E ; Rotate left $2E9A.w [Flags: NCZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	rol $2EB2.w		; 2E B2 2E ; Rotate left $2EB2.w [Flags: NCZ]
	lda ($2E.b)		; B2 2E ; Load accumulator (indirect) ($2E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($2E.b)		; B2 2E ; Load accumulator (indirect) ($2E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($2E.b)		; B2 2E ; Load accumulator (indirect) ($2E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	rol $2EE2.w		; 2E E2 2E ; Rotate left $2EE2.w [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rol $2EFA.w		; 2E FA 2E ; Rotate left $2EFA.w [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rol $2EFA.w		; 2E FA 2E ; Rotate left $2EFA.w [Flags: NCZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rol $2EFA.w		; 2E FA 2E ; Rotate left $2EFA.w [Flags: NCZ]
	ora ($2F.b)		; 12 2F ; OR accumulator with memory (indirect) ($2F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($2F.b)		; 12 2F ; OR accumulator with memory (indirect) ($2F.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and $422F42.l		; 2F 42 2F 42 ; AND accumulator with memory (long) $422F42.l [Writes: Accumulator] [Flags: NZ]
	and $422F42.l		; 2F 42 2F 42 ; AND accumulator with memory (long) $422F42.l [Writes: Accumulator] [Flags: NZ]
	and $722F5A.l		; 2F 5A 2F 72 ; AND accumulator with memory (long) $722F5A.l [Writes: Accumulator] [Flags: NZ]
	and $722F72.l		; 2F 72 2F 72 ; AND accumulator with memory (long) $722F72.l [Writes: Accumulator] [Flags: NZ]
	and $8A2F72.l		; 2F 72 2F 8A ; AND accumulator with memory (long) $8A2F72.l [Writes: Accumulator] [Flags: NZ]
	and $BA2FA2.l		; 2F A2 2F BA ; AND accumulator with memory (long) $BA2FA2.l [Writes: Accumulator] [Flags: NZ]
	and $EA2FD2.l		; 2F D2 2F EA ; AND accumulator with memory (long) $EA2FD2.l [Writes: Accumulator] [Flags: NZ]
	and $023002.l		; 2F 02 30 02 ; AND accumulator with memory (long) $023002.l [Writes: Accumulator] [Flags: NZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	.db $30, $1A		; 30 1A ; Branch if minus to $30, $1A [Flow: branch]
	.db $30, $32		; 30 32 ; Branch if minus to $30, $32 [Flow: branch]
	.db $30, $32		; 30 32 ; Branch if minus to $30, $32 [Flow: branch]
	.db $30, $52		; 30 52 ; Branch if minus to $30, $52 [Flow: branch]
	.db $30, $6A		; 30 6A ; Branch if minus to $30, $6A [Flow: branch]
	.db $30, $6A		; 30 6A ; Branch if minus to $30, $6A [Flow: branch]
	.db $30, $6A		; 30 6A ; Branch if minus to $30, $6A [Flow: branch]
	.db $30, $6A		; 30 6A ; Branch if minus to $30, $6A [Flow: branch]
	.db $30, $82		; 30 82 ; Branch if minus to $30, $82 [Flow: branch]
	.db $30, $9A		; 30 9A ; Branch if minus to $30, $9A [Flow: branch]
	.db $30, $B2		; 30 B2 ; Branch if minus to $30, $B2 [Flow: branch]
	.db $30, $CA		; 30 CA ; Branch if minus to $30, $CA [Flow: branch]
	.db $30, $E2		; 30 E2 ; Branch if minus to $30, $E2 [Flow: branch]
	.db $30, $FA		; 30 FA ; Branch if minus to $30, $FA [Flow: branch]
	.db $30, $12		; 30 12 ; Branch if minus to $30, $12 [Flow: branch]
	and ($2A.b),Y		; 31 2A ; AND accumulator with memory ($2A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($42.b),Y		; 31 42 ; AND accumulator with memory ($42.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($5A.b),Y		; 31 5A ; AND accumulator with memory ($5A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($72.b),Y		; 31 72 ; AND accumulator with memory ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($8A.b),Y		; 31 8A ; AND accumulator with memory ($8A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($A2.b),Y		; 31 A2 ; AND accumulator with memory ($A2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($BA.b),Y		; 31 BA ; AND accumulator with memory ($BA.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($D2.b),Y		; 31 D2 ; AND accumulator with memory ($D2.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and ($FF.b),Y		; 31 FF ; AND accumulator with memory ($FF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $111111.l,X		; FF 11 11 11 ; Subtract with carry (long,X) $111111.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	trb $15.b		; 14 15 ; Test and reset bits $15.b [Reads: Accumulator] [Flags: Z]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $16.b,X		; 15 16 ; OR accumulator with memory $16.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $17.b,X		; 16 17 ; Arithmetic shift left $17.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$18.b],Y		; 17 18 ; OR accumulator with memory (long indexed) [$18.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clv		; B8 ; Clear overflow flag [Flags: V]
	ldy $C6C1.w,X		; BC C1 C6 ; Load Y register $C6C1.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	cmp $D9D7D2.l		; CF D2 D7 D9 ; Compare accumulator (long) $D9D7D2.l [Reads: Accumulator] [Flags: NCZ]
	dec $E8E3.w,X		; DE E3 E8 ; Decrement memory $E8E3.w,X [Reads: X Index] [Flags: NZ]
	sbc $F7F2.w		; ED F2 F7 ; Subtract $F7F2.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	jsr ($84FF.w,X)		; FC FF 84 ; Jump to subroutine indirect indexed ($84FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $9D9893.l		; 8F 93 98 9D ; Store accumulator (long) $9D9893.l [Reads: Accumulator]
	ldx #$AAA6.w		; A2 A6 AA ; Load #$AAA6.w into X register [Writes: X Index] [Flags: NZ]
	lda $B5B1.w		; AD B1 B5 ; Load $B5B1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clv		; B8 ; Clear overflow flag [Flags: V]
	lda $C7C1.w,X		; BD C1 C7 ; Load $C7C1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy $D6D1.w		; CC D1 D6 ; Compare $D6D1.w with Y register [Reads: Y Index] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cpx #$EBE6.w		; E0 E6 EB ; Compare #$EBE6.w with X register [Reads: X Index] [Flags: NCZ]
	sbc ($F6.b),Y		; F1 F6 ; Subtract with carry ($F6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($8681.w,X)		; FC 81 86 ; Jump to subroutine indirect indexed ($8681.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta ($96.b),Y		; 91 96 ; Store accumulator ($96.b),Y [Reads: Direct Page, Y Index, Accumulator]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	ldy #$ABA6.w		; A0 A6 AB ; Load #$ABA6.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $B0, $B4		; B0 B4 ; Branch if carry set to $B0, $B4 [Flow: branch]
	lda $C3BE.w,Y		; B9 BE C3 ; Load $C3BE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	cmp $DDD8D4.l		; CF D4 D8 DD ; Compare accumulator (long) $DDD8D4.l [Reads: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$E7		; E2 E7
	cpx $F6F2.w		; EC F2 F6 ; Compare $F6F2.w with X register [Reads: X Index] [Flags: NCZ]
	jsr ($8680.w,X)		; FC 80 86 ; Jump to subroutine indirect indexed ($8680.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $9C9793.l		; 8F 93 97 9C ; Store accumulator (long) $9C9793.l [Reads: Accumulator]
	lda ($A6.b,X)		; A1 A6 ; Load accumulator ($A6.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	.db $B0, $B4		; B0 B4 ; Branch if carry set to $B0, $B4 [Flow: branch]
	lda $C2BE.w,Y		; B9 BE C2 ; Load $C2BE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp [$CC.b]		; C7 CC ; Compare accumulator (long) [$CC.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($D6.b),Y		; D1 D6 ; Compare accumulator ($D6.b),Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	dec $E7E2.w,X		; DE E2 E7 ; Decrement memory $E7E2.w,X [Reads: X Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc $FAF6F3.l		; EF F3 F6 FA ; Subtract with carry (long) $FAF6F3.l [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $B9.b,X		; B5 B9 ; Load $B9.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F6		; F0 F6 ; Branch if equal to $F0, $F6 [Flow: branch]
	jsr ($8882.w,X)		; FC 82 88 ; Jump to subroutine indirect indexed ($8882.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	stx $9A94.w		; 8E 94 9A ; Store X register to $9A94.w [Reads: X Index]
	ldy #$ACA6.w		; A0 A6 AC ; Load #$ACA6.w into Y register [Writes: Y Index] [Flags: NZ]
	lda ($FF.b)		; B2 FF ; Load accumulator (indirect) ($FF.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $8A.b		; 85 8A ; Store accumulator to $8A.b [Reads: Accumulator]
	sta $9F9993.l		; 8F 93 99 9F ; Store accumulator (long) $9F9993.l [Reads: Accumulator]
	lda $A8.b,S		; A3 A8 ; Load accumulator (stack relative) $A8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldx $B9B4.w		; AE B4 B9 ; Load $B9B4.w into X register [Writes: X Index] [Flags: NZ]
	ldx $C9C4.w,Y		; BE C4 C9 ; Load X register $C9C4.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	dec $D8D3.w		; CE D3 D8 ; Decrement $D8D3.w [Flags: NZ]
	cmp $E8E3.w,X		; DD E3 E8 ; Compare accumulator $E8E3.w,X [Reads: X Index] [Flags: NCZ]
	inc $F9F3.w		; EE F3 F9 ; Increment $F9F3.w [Flags: NZ]
	inc $8882.w,X		; FE 82 88 ; Increment memory $8882.w,X [Reads: X Index] [Flags: NZ]
	stx $9892.w		; 8E 92 98 ; Store X register to $9892.w [Reads: X Index]
	stz $A2A2.w		; 9C A2 A2 ; Store zero to $A2A2.w
	lda [$AA.b]		; A7 AA ; Load accumulator (long) [$AA.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $B8B3.w		; AE B3 B8 ; Load $B8B3.w into X register [Writes: X Index] [Flags: NZ]
	ldx $C6C1.w,Y		; BE C1 C6 ; Load X register $C6C1.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	.db $D0, $D6		; D0 D6 ; Branch if not equal to $D0, $D6 [Flow: branch]
	cmp $E2DD.w,Y		; D9 DD E2 ; Compare accumulator $E2DD.w,Y [Reads: Y Index] [Flags: NCZ]
	sbc [$ED.b]		; E7 ED ; Subtract with carry (long) [$ED.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F6.b)		; F2 F6 ; Subtract with carry (indirect) ($F6.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $8681.w,X		; FD 81 86 ; Subtract with carry $8681.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	sta $9E9995.l		; 8F 95 99 9E ; Store accumulator (long) $9E9995.l [Reads: Accumulator]
	lda $A8.b,S		; A3 A8 ; Load accumulator (stack relative) $A8.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $B7B2.w		; AC B2 B7 ; Load $B7B2.w into Y register [Writes: Y Index] [Flags: NZ]
	ldy $C7C2.w,X		; BC C2 C7 ; Load Y register $C7C2.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cmp $D8D2.w		; CD D2 D8 ; Compare $D8D2.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	jmp.w [$E3E1]		; DC E1 E3 ; Jump long indirect [$E3E1] [Flow: jump]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sbc $F4F0.w		; ED F0 F4 ; Subtract $F4F0.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $8D8984.l,X		; FF 84 89 8D ; Subtract with carry (long,X) $8D8984.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta ($96.b),Y		; 91 96 ; Store accumulator ($96.b),Y [Reads: Direct Page, Y Index, Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sta $A4A0.w,X		; 9D A0 A4 ; Store accumulator to $A4A0.w,X [Reads: Accumulator, X Index]
	lda [$AE.b]		; A7 AE ; Load accumulator (long) [$AE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $00B9B5.l		; AF B5 B9 00 ; Load long $00B9B5.l into accumulator [Writes: Accumulator] [Flags: NZ]
.INDEX 8
	sep #$5F		; E2 5F
	adc $84.b,X		; 75 84 ; Add $84.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp $26CE.w		; 4C CE 26 ; Jump to $26CE.w [Flow: jump]
	cmp $9393C4.l		; CF C4 93 93 ; Compare accumulator (long) $9393C4.l [Reads: Accumulator] [Flags: NCZ]
	adc $4683.w,X		; 7D 83 46 ; Add $4683.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($F2.b,X)		; 21 F2 ; Logical AND ($F2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $2630.w		; 0E 30 26 ; Arithmetic shift left $2630.w [Flags: NCZ]
	tsb $5B.b		; 04 5B ; Test and set bits $5B.b [Reads: Accumulator] [Flags: Z]
	adc ($FE.b)		; 72 FE ; Add with carry (indirect) ($FE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc [$83.b],Y		; 77 83 ; Add with carry (long indexed) [$83.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc [$1D.b]		; 67 1D ; Add with carry (long) [$1D.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	mvn $3D,$C9		; 54 C9 3D ; Move block negative $3D,$C9 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	stx $98.b		; 86 98 ; Store X register to $98.b [Reads: X Index]
	lda ($6A.b),Y		; B1 6A ; Load accumulator ($6A.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	nop		; EA ; No operation
	lda $3551.w,X		; BD 51 35 ; Load $3551.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $71.b		; C5 71 ; Compare $71.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	and #$93.b		; 29 93 ; Logical AND #$93.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $0917.w		; AD 17 09 ; Load $0917.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and ($74.b,X)		; 21 74 ; Logical AND ($74.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $0C2B.w,Y		; 19 2B 0C ; OR accumulator with memory $0C2B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sbc $EB.b,X		; F5 EB ; Subtract $EB.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $6817CE.l,X		; BF CE 17 68 ; Load long $6817CE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $60.b,X		; B5 60 ; Load $60.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$7A		; C2 7A
	ror $AF.b		; 66 AF ; Rotate right $AF.b [Reads: Direct Page] [Flags: NCZ]
	sbc $45.b		; E5 45 ; Subtract $45.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	sbc #$7C3B.w		; E9 3B 7C ; Subtract #$7C3B.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr $ED.b		; 46 ED ; Logical shift right $ED.b [Reads: Direct Page] [Flags: NCZ]
.ACCU 16
.INDEX 16
	rep #$73		; C2 73
	ora $835D.w,X		; 1D 5D 83 ; OR accumulator with memory $835D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda $0E4E.w,X		; BD 4E 0E ; Load $0E4E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($BA.b),Y		; 91 BA ; Store accumulator ($BA.b),Y [Reads: Direct Page, Y Index, Accumulator]
	cpx $DB.b		; E4 DB ; Compare $DB.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	lda $D177.w,X		; BD 77 D1 ; Load $D177.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $AE54.w		; AC 54 AE ; Load $AE54.w into Y register [Writes: Y Index] [Flags: NZ]
	lsr $F409.w		; 4E 09 F4 ; Logical shift right $F409.w [Flags: NCZ]
	eor $8C.b,X		; 55 8C ; Exclusive OR accumulator with memory $8C.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($9A.b,S),Y		; 93 9A ; Store accumulator (stack relative indirect indexed) ($9A.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator]
	lda ($A8.b,X)		; A1 A8 ; Load accumulator ($A8.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $C4BDB6.l		; AF B6 BD C4 ; Load long $C4BDB6.l into accumulator [Writes: Accumulator] [Flags: NZ]
	wai		; CB ; Wait for interrupt
	cmp ($D9.b)		; D2 D9 ; Compare accumulator (indirect) ($D9.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cpx #$EEE7.w		; E0 E7 EE ; Compare #$EEE7.w with X register [Reads: X Index] [Flags: NCZ]
	sbc $20.b,X		; F5 20 ; Subtract $20.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($00.b,S),Y		; 53 00 ; XOR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pei ($B6.b)		; D4 B6 ; Push effective indirect address ($B6.b) [Reads: Direct Page] [Writes: Stack Pointer]
	ldx $A6F8.w,Y		; BE F8 A6 ; Load X register $A6F8.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	and ($D7.b)		; 32 D7 ; AND accumulator with memory (indirect) ($D7.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($C6.b),Y		; F1 C6 ; Subtract with carry ($C6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	eor [$D0.b]		; 47 D0 ; Exclusive OR accumulator with memory (long) [$D0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$7C75.w		; 49 75 7C ; Exclusive OR #$7C75.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sty $AC.b,X		; 94 AC ; Store Y register $AC.b,X [Reads: Direct Page, X Index] [Writes: Y Index]
	cpy #$E84C.w		; C0 4C E8 ; Compare #$E84C.w with Y register [Reads: Y Index] [Flags: NCZ]
	and ($A6.b),Y		; 31 A6 ; AND accumulator with memory ($A6.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $FFBA.w		; 2D BA FF ; Logical AND $FFBA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$DF41.w		; E0 41 DF ; Compare #$DF41.w with X register [Reads: X Index] [Flags: NCZ]
	sta $D0.b,S		; 83 D0 ; Store accumulator (stack relative) $D0.b,S [Reads: Stack Pointer, Accumulator]
	ror $8775.w		; 6E 75 87 ; Rotate right $8775.w [Flags: NCZ]
	asl $9D.b		; 06 9D ; Arithmetic shift left $9D.b [Reads: Direct Page] [Flags: NCZ]
	sbc $3D6B7E.l,X		; FF 7E 6B 3D ; Subtract with carry (long,X) $3D6B7E.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $F1BB.w,Y		; 19 BB F1 ; OR accumulator with memory $F1BB.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($5A.b,X)		; 41 5A ; Exclusive OR accumulator with memory ($5A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $6078.w,Y		; 99 78 60 ; Store accumulator to $6078.w,Y [Reads: Y Index, Accumulator]
	and $0F.b		; 25 0F ; Logical AND $0F.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$5F.b],Y		; B7 5F ; Load accumulator (long indexed) [$5F.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$8DCD.w		; 29 CD 8D ; Logical AND #$8DCD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $62, $D5, $27		; 62 D5 27 ; Push effective relative address $62, $D5, $27 [Writes: Stack Pointer]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	lda [$0E.b]		; A7 0E ; Load accumulator (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $F8.b		; 05 F8 ; Logical OR $F8.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx #$93F9.w		; A2 F9 93 ; Load #$93F9.w into X register [Writes: X Index] [Flags: NZ]
	and [$8E.b],Y		; 37 8E ; AND accumulator with memory (long indexed) [$8E.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $BC.b,X		; 55 BC ; Exclusive OR accumulator with memory $BC.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and $6BCCEC.l		; 2F EC CC 6B ; AND accumulator with memory (long) $6BCCEC.l [Writes: Accumulator] [Flags: NZ]
	.db $42, $38		; 42 38 ; Reserved instruction
	cli		; 58 ; Clear interrupt disable flag [Flags: I]
	jmp ($39FD.w)		; 6C FD 39 ; Jump indirect to ($39FD.w) [Flow: jump]
	stx $5C.b		; 86 5C ; Store X register to $5C.b [Reads: X Index]
	lda ($64.b,X)		; A1 64 ; Load accumulator ($64.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $5710.w,X		; 9D 10 57 ; Store accumulator to $5710.w,X [Reads: Accumulator, X Index]
	bit $D2.b		; 24 D2 ; Test bits $D2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and $DFBAED.l,X		; 3F ED BA DF ; AND accumulator with memory (long,X) $DFBAED.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $5320.w		; 0D 20 53 ; Logical OR $5320.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($C0.b,X)		; 01 C0 ; Logical OR ($C0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $38.b,S		; 03 38 ; OR accumulator with stack relative $38.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $30.b		; 04 30 ; Test and set bits $30.b [Reads: Accumulator] [Flags: Z]
	ora $48.b,S		; 03 48 ; OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $50.b,S		; 03 50 ; OR accumulator with stack relative $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $8B.b		; [PATTERN: Memory clearing operation] 04 8B ; Test and set bits $8B.b [Reads: Accumulator] [Flags: Z]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	stz $0A.b		; 64 0A ; Store zero to $0A.b
	stz $0C.b		; 64 0C ; Store zero to $0C.b
	lda #$0480.w		; A9 80 04 ; Load #$0480.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $D537.w		; 20 37 D5 ; Jump to subroutine at $D537.w [Writes: Stack Pointer] [Flow: call]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $D537.w		; 20 37 D5 ; Jump to subroutine at $D537.w [Writes: Stack Pointer] [Flow: call]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $D537.w		; 20 37 D5 ; Jump to subroutine at $D537.w [Writes: Stack Pointer] [Flow: call]
	ldy #$A95F.w		; A0 5F A9 ; Load #$A95F.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	lsr $A9D5.w		; 4E D5 A9 ; Logical shift right $A9D5.w [Flags: NCZ]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor ($D5.b,S),Y		; 53 D5 ; XOR accumulator (stack relative indirect indexed) ($D5.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $D553.w		; 20 53 D5 ; Jump to subroutine at $D553.w [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $D537.w		; 20 37 D5 ; Jump to subroutine at $D537.w [Writes: Stack Pointer] [Flow: call]
	ldy #$A960.w		; A0 60 A9 ; Load #$A960.w into Y register [Writes: Y Index] [Flags: NZ]
	asl $4E20.w		; 0E 20 4E ; Arithmetic shift left $4E20.w [Flags: NCZ]
	cmp $A9.b,X		; D5 A9 ; Compare accumulator $A9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora [$20.b]		; 07 20 ; OR accumulator with memory (long) [$20.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor ($D5.b,S),Y		; 53 D5 ; XOR accumulator (stack relative indirect indexed) ($D5.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy #$A95F.w		; A0 5F A9 ; Load #$A95F.w into Y register [Writes: Y Index] [Flags: NZ]
	cop $20.b		; 02 20 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $A0D5.w		; 4E D5 A0 ; Logical shift right $A0D5.w [Flags: NCZ]
	mvn $66,$20		; 54 20 66 ; Move block negative $66,$20 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc [$C2.b]		; E7 C2 ; Subtract with carry (long) [$C2.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$0008.w		; A0 08 00 ; Load #$0008.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D61C.w		; 20 1C D6 ; Jump to subroutine at $D61C.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $E2D6.w		; 1C D6 E2 ; Test and reset bits $E2D6.w [Reads: Accumulator] [Flags: Z]
	.db $30, $A0		; 30 A0 ; Branch if minus to $30, $A0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E766.w		; 20 66 E7 ; Jump to subroutine at $E766.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx #$2280.w		; A2 80 22 ; Load #$2280.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0003.w		; A0 03 00 ; Load #$0003.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $D61C.w		; 20 1C D6 ; Jump to subroutine at $D61C.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0180.w		; 69 80 01 ; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy #$0003.w		; A0 03 00 ; Load #$0003.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D61C.w		; 20 1C D6 ; Jump to subroutine at $D61C.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $D3C6.w		; 20 C6 D3 ; Jump to subroutine at $D3C6.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $2001.w		; 20 01 20 ; Jump to subroutine at $2001.w [Writes: Stack Pointer] [Flow: call]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($8B.b,X)		; 01 8B ; Logical OR ($8B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy #$5F.b		; A0 5F ; Load #$5F.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E75C.w		; 20 5C E7 ; Jump to subroutine at $E75C.w [Writes: Stack Pointer] [Flow: call]
	ldy #$5E.b		; A0 5E ; Load #$5E.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E766.w		; 20 66 E7 ; Jump to subroutine at $E766.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$21		; C2 21
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $D2BE.w,Y		; 79 BE D2 ; Add $D2BE.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
.INDEX 16
	rep #$10		; C2 10
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$000C.w		; A0 0C 00 ; Load #$000C.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $D61C.w		; 20 1C D6 ; Jump to subroutine at $D61C.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0180.w		; 69 80 01 ; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy #$000C.w		; A0 0C 00 ; Load #$000C.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D61C.w		; 20 1C D6 ; Jump to subroutine at $D61C.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $60.b		; 06 60 ; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: NCZ]
	asl $F0.b		; 06 F0 ; Arithmetic shift left $F0.b [Reads: Direct Page] [Flags: NCZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora #$8B.b		; 09 8B ; Logical OR #$8B.b with accumulator [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy #$5F.b		; A0 5F ; Load #$5F.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E75C.w		; 20 5C E7 ; Jump to subroutine at $E75C.w [Writes: Stack Pointer] [Flow: call]
	ldy #$5E.b		; A0 5E ; Load #$5E.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E766.w		; 20 66 E7 ; Jump to subroutine at $E766.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$21		; C2 21
	lda $7EF35A.l		; AF 5A F3 7E ; Load long $7EF35A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $D300.w,Y		; 79 00 D3 ; Add $D300.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
.INDEX 16
	rep #$10		; C2 10
	ldx #$0300.w		; A2 00 03 ; Load #$0300.w into X register [Writes: X Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $D619.w		; 20 19 D6 ; Jump to subroutine at $D619.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0180.w		; 69 80 01 ; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	jsr $D619.w		; 20 19 D6 ; Jump to subroutine at $D619.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $E783.w		; 20 83 E7 ; Jump to subroutine at $E783.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$0030.w		; A0 30 00 ; Load #$0030.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$1680.w		; A2 80 16 ; Load #$1680.w into X register [Writes: X Index] [Flags: NZ]
	jsr $D5CE.w		; 20 CE D5 ; Jump to subroutine at $D5CE.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldy #$5C.b		; A0 5C ; Load #$5C.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E783.w		; 20 83 E7 ; Jump to subroutine at $E783.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$0030.w		; A0 30 00 ; Load #$0030.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$1C80.w		; A2 80 1C ; Load #$1C80.w into X register [Writes: X Index] [Flags: NZ]
	jsr $D5CE.w		; 20 CE D5 ; Jump to subroutine at $D5CE.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EA880.l,X		; BF 80 A8 7E ; Load long $7EA880.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7EAC80.l,X		; BF 80 AC 7E ; Load long $7EAC80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EA880.l,X		; 9F 80 A8 7E ; Store accumulator (long,X) $7EA880.l,X [Reads: Accumulator, X Index]
	lda $7EAE80.l,X		; BF 80 AE 7E ; Load long $7EAE80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EAC80.l,X		; 9F 80 AC 7E ; Store accumulator (long,X) $7EAC80.l,X [Reads: Accumulator, X Index]
	lda $7EAA80.l,X		; BF 80 AA 7E ; Load long $7EAA80.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EAE80.l,X		; 9F 80 AE 7E ; Store accumulator (long,X) $7EAE80.l,X [Reads: Accumulator, X Index]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $7EAA80.l,X		; 9F 80 AA 7E ; Store accumulator (long,X) $7EAA80.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0200.w		; E0 00 02 ; Compare #$0200.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $D7		; D0 D7 ; Branch if not equal to $D0, $D7 [Flow: branch]
	lda #$3B00.w		; A9 00 3B ; Load #$3B00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0134.w		; 8D 34 01 ; Store accumulator to $0134.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $E783.w		; 20 83 E7 ; Jump to subroutine at $E783.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$1680.w		; A2 80 16 ; Load #$1680.w into X register [Writes: X Index] [Flags: NZ]
	jsr $D5CE.w		; 20 CE D5 ; Jump to subroutine at $D5CE.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jsr $E783.w		; 20 83 E7 ; Jump to subroutine at $E783.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$0020.w		; A0 20 00 ; Load #$0020.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$1E80.w		; A2 80 1E ; Load #$1E80.w into X register [Writes: X Index] [Flags: NZ]
	jsr $D5CE.w		; 20 CE D5 ; Jump to subroutine at $D5CE.w [Writes: Stack Pointer] [Flow: call]
	lda #$3C00.w		; A9 00 3C ; Load #$3C00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0134.w		; 8D 34 01 ; Store accumulator to $0134.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E783.w		; 20 83 E7 ; Jump to subroutine at $E783.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$0010.w		; A0 10 00 ; Load #$0010.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$2340.w		; A2 40 23 ; Load #$2340.w into X register [Writes: X Index] [Flags: NZ]
	jsr $D5CE.w		; 20 CE D5 ; Jump to subroutine at $D5CE.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldy #$58.b		; A0 58 ; Load #$58.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E766.w		; 20 66 E7 ; Jump to subroutine at $E766.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy #$0020.w		; A0 20 00 ; Load #$0020.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$2540.w		; A2 40 25 ; Load #$2540.w into X register [Writes: X Index] [Flags: NZ]
	jsr $D5CE.w		; 20 CE D5 ; Jump to subroutine at $D5CE.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E783.w		; 20 83 E7 ; Jump to subroutine at $E783.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0480.w		; 69 80 04 ; Add #$0480.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$2DC0.w		; A2 C0 2D ; Load #$2DC0.w into X register [Writes: X Index] [Flags: NZ]
	jsr $D5CE.w		; 20 CE D5 ; Jump to subroutine at $D5CE.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy #$64.b		; A0 64 ; Load #$64.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	ldy #$66.b		; A0 66 ; Load #$66.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	ldy #$59.b		; A0 59 ; Load #$59.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldy #$58.b		; A0 58 ; Load #$58.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E75C.w		; 20 5C E7 ; Jump to subroutine at $E75C.w [Writes: Stack Pointer] [Flow: call]
	ldy #$65.b		; A0 65 ; Load #$65.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E766.w		; 20 66 E7 ; Jump to subroutine at $E766.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00D407.l,X		; 7F 07 D4 00 ; Add long $00D407.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ldy #$0020.w		; A0 20 00 ; Load #$0020.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$2940.w		; A2 40 29 ; Load #$2940.w into X register [Writes: X Index] [Flags: NZ]
	jsr $D5CE.w		; 20 CE D5 ; Jump to subroutine at $D5CE.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpy #$09.b		; C0 09 ; Compare #$09.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $18.b,S		; 03 18 ; OR accumulator with stack relative $18.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $30.b,S		; 03 30 ; OR accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $48.b,S		; 03 48 ; OR accumulator with stack relative $48.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $60.b,S		; 03 60 ; OR accumulator with stack relative $60.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $78.b,S		; 03 78 ; OR accumulator with stack relative $78.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $90.b,S		; 03 90 ; OR accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $30.b,S		; 03 30 ; OR accumulator with stack relative $30.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	tsb $68.b		; 04 68 ; Test and set bits $68.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	asl $30.b		; 06 30 ; Arithmetic shift left $30.b [Reads: Direct Page] [Flags: NCZ]
	asl $60.b		; 06 60 ; Arithmetic shift left $60.b [Reads: Direct Page] [Flags: NCZ]
	asl $90.b		; 06 90 ; Arithmetic shift left $90.b [Reads: Direct Page] [Flags: NCZ]
	asl $C0.b		; 06 C0 ; Arithmetic shift left $C0.b [Reads: Direct Page] [Flags: NCZ]
	asl $F0.b		; 06 F0 ; Arithmetic shift left $F0.b [Reads: Direct Page] [Flags: NCZ]
	asl $20.b		; 06 20 ; Arithmetic shift left $20.b [Reads: Direct Page] [Flags: NCZ]
	ora [$50.b]		; 07 50 ; OR accumulator with memory (long) [$50.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$68.b]		; 07 68 ; OR accumulator with memory (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$30.b		; 09 30 ; Logical OR #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$60.b		; 09 60 ; Logical OR #$60.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$90.b		; 09 90 ; Logical OR #$90.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $50, $0A		; 50 0A ; Branch if overflow clear to $50, $0A [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	asl $18.b		; 06 18 ; Arithmetic shift left $18.b [Reads: Direct Page] [Flags: NCZ]
	asl $30.b		; 06 30 ; Arithmetic shift left $30.b [Reads: Direct Page] [Flags: NCZ]
	asl $48.b		; 06 48 ; Arithmetic shift left $48.b [Reads: Direct Page] [Flags: NCZ]
	asl $78.b		; 06 78 ; Arithmetic shift left $78.b [Reads: Direct Page] [Flags: NCZ]
	asl $D8.b		; 06 D8 ; Arithmetic shift left $D8.b [Reads: Direct Page] [Flags: NCZ]
	asl $A8.b		; 06 A8 ; Arithmetic shift left $A8.b [Reads: Direct Page] [Flags: NCZ]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	ora [$38.b]		; 07 38 ; OR accumulator with memory (long) [$38.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$68.b]		; 07 68 ; OR accumulator with memory (long) [$68.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$60.b]		; 07 60 ; OR accumulator with memory (long) [$60.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$C0.b		; 09 C0 ; Logical OR #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $90.b,S		; 03 90 ; OR accumulator with stack relative $90.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$A8.b		; 09 A8 ; Logical OR #$A8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$C0.b		; 09 C0 ; Logical OR #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$D8.b		; 09 D8 ; Logical OR #$D8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sec		; 38 ; Set carry flag [Flags: C]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $06		; 30 06 ; Branch if minus to $30, $06 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	.db $80, $22		; 80 22 ; Branch always to $80, $22 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$5D.b		; A0 5D ; Load #$5D.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$23.b		; C9 23 ; Compare #$23.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$37.b		; C9 37 ; Compare #$37.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0C		; B0 0C ; Branch if carry set to $B0, $0C [Flow: branch]
	ldy #$5C.b		; A0 5C ; Load #$5C.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $02		; B0 02 ; Branch if carry set to $B0, $02 [Flow: branch]
	ldy #$5B.b		; A0 5B ; Load #$5B.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E75C.w		; 20 5C E7 ; Jump to subroutine at $E75C.w [Writes: Stack Pointer] [Flow: call]
	ldy #$5A.b		; A0 5A ; Load #$5A.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E766.w		; 20 66 E7 ; Jump to subroutine at $E766.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
.ACCU 16
	rep #$21		; C2 21
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $D469.w,X		; 7D 69 D4 ; Add $D469.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.INDEX 16
	rep #$10		; C2 10
	ldx #$2D40.w		; A2 40 2D ; Load #$2D40.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $D61C.w		; 20 1C D6 ; Jump to subroutine at $D61C.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0180.w		; 69 80 01 ; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D61C.w		; 20 1C D6 ; Jump to subroutine at $D61C.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $CFF3.w,Y		; B9 F3 CF ; Load $CFF3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $D0D2.w,Y		; B9 D2 D0 ; Load $D0D2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $D1B1.w,Y		; B9 B1 D1 ; Load $D1B1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $E766.w		; 20 66 E7 ; Jump to subroutine at $E766.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $D21D.w,Y		; 79 1D D2 ; Add $D21D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ldx $06.b		; A6 06 ; Load $06.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy $0A.b		; A4 0A ; Load $0A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $D61C.w		; 20 1C D6 ; Jump to subroutine at $D61C.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0180.w		; 69 80 01 ; Add #$0180.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldy $0A.b		; A4 0A ; Load $0A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $D61C.w		; 20 1C D6 ; Jump to subroutine at $D61C.w [Writes: Stack Pointer] [Flow: call]
	inc $0C.b		; E6 0C ; Increment $0C.b [Reads: Direct Page] [Flags: NZ]
	inc $0C.b		; E6 0C ; Increment $0C.b [Reads: Direct Page] [Flags: NZ]
	stx $06.b		; 86 06 ; Store X register to $06.b [Reads: X Index]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0085.w		; 0E 85 00 ; Arithmetic shift left $0085.w [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A0.b,S		; 03 A0 ; OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7E9000.l,X		; 9F 00 90 7E ; Store accumulator (long,X) $7E9000.l,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$03.b]		; A7 03 ; Load accumulator (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $90		; 10 90 ; Branch if plus to $10, $90 [Flow: branch]
	ror $03E6.w,X		; 7E E6 03 ; Rotate right $03E6.w,X [Reads: X Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $E6		; 10 E6 ; Branch if plus to $10, $E6 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$78.b		; 29 78 ; Logical AND #$78.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $C6.b,S		; 03 C6 ; OR accumulator with stack relative $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $C0D0.w		; 0E D0 C0 ; Arithmetic shift left $C0D0.w [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0085.w		; 0E 85 00 ; Arithmetic shift left $0085.w [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A0.b,S		; 03 A0 ; OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7E9000.l,X		; 9F 00 90 7E ; Store accumulator (long,X) $7E9000.l,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$03.b]		; A7 03 ; Load accumulator (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $90		; 10 90 ; Branch if plus to $10, $90 [Flow: branch]
	ror $03E6.w,X		; 7E E6 03 ; Rotate right $03E6.w,X [Reads: X Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7E9000.l,X		; 9F 00 90 7E ; Store accumulator (long,X) $7E9000.l,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$03.b]		; A7 03 ; Load accumulator (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $90		; 10 90 ; Branch if plus to $10, $90 [Flow: branch]
	ror $03E6.w,X		; 7E E6 03 ; Rotate right $03E6.w,X [Reads: X Index] [Flags: NCZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $CF		; 10 CF ; Branch if plus to $10, $CF [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $0E.b		; C6 0E ; Decrement $0E.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $B8		; D0 B8 ; Branch if not equal to $D0, $B8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	brk $84.b		; 00 84 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0085.w		; 0E 85 00 ; Arithmetic shift left $0085.w [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A0.b,S		; 03 A0 ; OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7E9000.l,X		; 9F 00 90 7E ; Store accumulator (long,X) $7E9000.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$03.b]		; A7 03 ; Load accumulator (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0805.w,X		; BD 05 08 ; Load $0805.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $BD.b		; 05 BD ; Logical OR $BD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7E9010.l,X		; 9F 10 90 7E ; Store accumulator (long,X) $7E9010.l,X [Reads: Accumulator, X Index]
	inc $03.b		; E6 03 ; Increment $03.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $D7		; 10 D7 ; Branch if plus to $10, $D7 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$78.b		; 29 78 ; Logical AND #$78.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$80.b		; 69 80 ; Add #$80.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $C6.b,S		; 03 C6 ; OR accumulator with stack relative $C6.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $B1D0.w		; 0E D0 B1 ; Arithmetic shift left $B1D0.w [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0AA2.w		; AD A2 0A ; Load $0AA2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $DD97.w,X		; BD 97 DD ; Load $DD97.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	sta $7EC2F8.l		; 8F F8 C2 7E ; Store accumulator (long) $7EC2F8.l [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
.INDEX 8
	sep #$10		; E2 10
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $DD98.w,X		; BD 98 DD ; Load $DD98.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	sta $7EC2F9.l		; 8F F9 C2 7E ; Store accumulator (long) $7EC2F9.l [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
.INDEX 8
	sep #$10		; E2 10
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $DD99.w,X		; BD 99 DD ; Load $DD99.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	sta $7EC2FA.l		; 8F FA C2 7E ; Store accumulator (long) $7EC2FA.l [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
.INDEX 8
	sep #$10		; E2 10
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $DD9A.w,X		; BD 9A DD ; Load $DD9A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	sta $7EC2FB.l		; 8F FB C2 7E ; Store accumulator (long) $7EC2FB.l [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
.INDEX 8
	sep #$10		; E2 10
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda #$78.b		; A9 78 ; Load #$78.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0AA3.w		; AD A3 0A ; Load $0AA3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $DB57.w,X		; BD 57 DB ; Load $DB57.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7EC2FC.l		; 8F FC C2 7E ; Store accumulator (long) $7EC2FC.l [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	lda $7EC2FC.l		; AF FC C2 7E ; Load long $7EC2FC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $DB58.w,X		; BD 58 DB ; Load $DB58.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7EC2FD.l		; 8F FD C2 7E ; Store accumulator (long) $7EC2FD.l [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	lda $7EC2FD.l		; AF FD C2 7E ; Load long $7EC2FD.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $DB59.w,X		; BD 59 DB ; Load $DB59.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7EC2FE.l		; 8F FE C2 7E ; Store accumulator (long) $7EC2FE.l [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	lda $7EC2FE.l		; AF FE C2 7E ; Load long $7EC2FE.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $DB5A.w,X		; BD 5A DB ; Load $DB5A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7EC2FF.l		; 8F FF C2 7E ; Store accumulator (long) $7EC2FF.l [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	lda $7EC2FF.l		; AF FF C2 7E ; Load long $7EC2FF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	stz $0412.w		; 9C 12 04 ; Store zero to $0412.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7EC2F8.l		; AF F8 C2 7E ; Load long $7EC2F8.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7EC2F9.l		; AF F9 C2 7E ; Load long $7EC2F9.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7EC2FA.l		; AF FA C2 7E ; Load long $7EC2FA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7EC2FB.l		; AF FB C2 7E ; Load long $7EC2FB.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda #$78.b		; A9 78 ; Load #$78.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7EC2FC.l		; AF FC C2 7E ; Load long $7EC2FC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7EC2FD.l		; AF FD C2 7E ; Load long $7EC2FD.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7EC2FE.l		; AF FE C2 7E ; Load long $7EC2FE.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7EC2FF.l		; AF FF C2 7E ; Load long $7EC2FF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	stz $0412.w		; 9C 12 04 ; Store zero to $0412.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda #$67.b		; A9 67 ; Load #$67.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	ldy $0E.b		; A4 0E ; Load $0E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	inc $0E.b		; E6 0E ; Increment $0E.b [Reads: Direct Page] [Flags: NZ]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$69.b		; C9 69 ; Compare #$69.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $EC		; D0 EC ; Branch if not equal to $D0, $EC [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta ($FE.b)		; 92 FE ; Store accumulator (indirect) ($FE.b) [Reads: Direct Page, Accumulator]
	lda $2CF8.w,Y		; B9 F8 2C ; Load $2CF8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $C7.b		; A5 C7 ; Load $C7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($BB.b,S),Y		; B3 BB ; Load accumulator (stack relative indirect indexed) ($BB.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp [$D5.b]		; C7 D5 ; Compare accumulator (long) [$D5.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	adc $BB.b,S		; 63 BB ; Add with carry (stack relative) $BB.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $D9D8D8.l		; CF D8 D8 D9 ; Compare accumulator (long) $D9D8D8.l [Reads: Accumulator] [Flags: NCZ]
	cmp $D8DA.w,Y		; D9 DA D8 ; Compare accumulator $D8DA.w,Y [Reads: Y Index] [Flags: NCZ]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cld		; D8 ; Clear decimal flag [Flags: D]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	cld		; D8 ; Clear decimal flag [Flags: D]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $001110.l		; 0F 10 11 00 ; OR accumulator with memory (long) $001110.l [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($14.b,S),Y		; 13 14 ; OR accumulator (stack relative indirect indexed) ($14.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	ldx $0200.w		; AE 00 02 ; Load $0200.w into X register [Writes: X Index] [Flags: NZ]
	lda $00D855.l,X		; BF 55 D8 00 ; Load long $00D855.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	lda $00D837.l,X		; BF 37 D8 00 ; Load long $00D837.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $00D846.l,X		; BF 46 D8 00 ; Load long $00D846.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	inc $0200.w		; EE 00 02 ; Increment $0200.w [Flags: NZ]
	jmp ($000E.w)		; 6C 0E 00 ; Jump indirect to ($000E.w) [Flow: jump]
	inc $06BA.w		; EE BA 06 ; Increment $06BA.w [Flags: NZ]
	lda $06BA.w		; AD BA 06 ; Load $06BA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $029E5F.l		; 22 5F 9E 02 ; Jump to subroutine long $029E5F.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $02B2D4.l		; 22 D4 B2 02 ; Jump to subroutine long $02B2D4.l [Writes: Stack Pointer] [Flow: call]
	dec $11.b		; C6 11 ; Decrement $11.b [Reads: Direct Page] [Flags: NZ]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $02B2E6.l		; 22 E6 B2 02 ; Jump to subroutine long $02B2E6.l [Writes: Stack Pointer] [Flow: call]
	inc $0710.w		; EE 10 07 ; Increment $0710.w [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $02B334.l		; 22 34 B3 02 ; Jump to subroutine long $02B334.l [Writes: Stack Pointer] [Flow: call]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	sta $0710.w		; 8D 10 07 ; Store accumulator to $0710.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0200.w		; 8D 00 02 ; Store accumulator to $0200.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$58.b		; A0 58 ; Load #$58.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$5A.b		; A0 5A ; Load #$5A.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $00D394.l		; 22 94 D3 00 ; Jump to subroutine long $00D394.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $3E3D.w,X		; 3C 3D 3E ; Test bits $3E3D.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ora ($5A.b,X)		; 01 5A ; Logical OR ($5A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $42, $43		; 42 43 ; Reserved instruction
	mvp $3F,$45		; 44 45 3F ; Move block positive $3F,$45 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor $5A0B.w,Y		; 59 0B 5A ; Exclusive OR accumulator with memory $5A0B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0AA1.w		; AD A1 0A ; Load $0AA1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0AA2.w		; AD A2 0A ; Load $0AA2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $DD97.w,Y		; B9 97 DD ; Load $DD97.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda $E076.w,X		; BD 76 E0 ; Load $E076.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC2F8.l		; 8F F8 C2 7E ; Store accumulator (long) $7EC2F8.l [Reads: Accumulator]
	lda $DD98.w,Y		; B9 98 DD ; Load $DD98.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda $E077.w,X		; BD 77 E0 ; Load $E077.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC2F9.l		; 8F F9 C2 7E ; Store accumulator (long) $7EC2F9.l [Reads: Accumulator]
	lda $DD99.w,Y		; B9 99 DD ; Load $DD99.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda $E078.w,X		; BD 78 E0 ; Load $E078.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC2FA.l		; 8F FA C2 7E ; Store accumulator (long) $7EC2FA.l [Reads: Accumulator]
	lda $DD9A.w,Y		; B9 9A DD ; Load $DD9A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda $E079.w,X		; BD 79 E0 ; Load $E079.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC2FB.l		; 8F FB C2 7E ; Store accumulator (long) $7EC2FB.l [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $0AA3.w		; AD A3 0A ; Load $0AA3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $DB57.w,Y		; B9 57 DB ; Load $DB57.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7EC2FC.l		; 8F FC C2 7E ; Store accumulator (long) $7EC2FC.l [Reads: Accumulator]
	lda $DB58.w,Y		; B9 58 DB ; Load $DB58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7EC2FD.l		; 8F FD C2 7E ; Store accumulator (long) $7EC2FD.l [Reads: Accumulator]
	lda $DB59.w,Y		; B9 59 DB ; Load $DB59.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7EC2FE.l		; 8F FE C2 7E ; Store accumulator (long) $7EC2FE.l [Reads: Accumulator]
	lda $DB5A.w,Y		; B9 5A DB ; Load $DB5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7EC2FF.l		; 8F FF C2 7E ; Store accumulator (long) $7EC2FF.l [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $00D8EF.l,X		; BF EF D8 00 ; Load long $00D8EF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $00D8EE.l,X		; BF EE D8 00 ; Load long $00D8EE.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E78B.w		; 20 8B E7 ; Jump to subroutine at $E78B.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $DF4F.w		; 20 4F DF ; Jump to subroutine at $DF4F.w [Writes: Stack Pointer] [Flow: call]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $DFB8.w		; 20 B8 DF ; Jump to subroutine at $DFB8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $00D8F1.l,X		; BF F1 D8 00 ; Load long $00D8F1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $00D8F0.l,X		; BF F0 D8 00 ; Load long $00D8F0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E78B.w		; 20 8B E7 ; Jump to subroutine at $E78B.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $DFB8.w		; 20 B8 DF ; Jump to subroutine at $DFB8.w [Writes: Stack Pointer] [Flow: call]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $DF4F.w		; 20 4F DF ; Jump to subroutine at $DF4F.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC2F9.l		; AF F9 C2 7E ; Load long $7EC2F9.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E78B.w		; 20 8B E7 ; Jump to subroutine at $E78B.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7EC2FA.l		; AF FA C2 7E ; Load long $7EC2FA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0080.w		; A0 80 00 ; Load #$0080.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $DF4F.w		; 20 4F DF ; Jump to subroutine at $DF4F.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $00D8F3.l,X		; BF F3 D8 00 ; Load long $00D8F3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $00D8F2.l,X		; BF F2 D8 00 ; Load long $00D8F2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E78B.w		; 20 8B E7 ; Jump to subroutine at $E78B.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0080.w		; A0 80 00 ; Load #$0080.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $DFB8.w		; 20 B8 DF ; Jump to subroutine at $DFB8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $1D.b		; 64 1D ; Store zero to $1D.b
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	cmp #$70.b		; C9 70 ; Compare #$70.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	cmp #$5B.b		; C9 5B ; Compare #$5B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$43.b		; C9 43 ; Compare #$43.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$45.b		; C9 45 ; Compare #$45.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$47.b		; C9 47 ; Compare #$47.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $00D8F4.l,X		; BF F4 D8 00 ; Load long $00D8F4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $D1B1.w,Y		; B9 B1 D1 ; Load $D1B1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $D0D2.w,Y		; B9 D2 D0 ; Load $D0D2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $CFF3.w,Y		; B9 F3 CF ; Load $CFF3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $DF4F.w		; 20 4F DF ; Jump to subroutine at $DF4F.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC2FC.l		; AF FC C2 7E ; Load long $7EC2FC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7EC2FD.l		; AF FD C2 7E ; Load long $7EC2FD.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EC2FC.l		; AF FC C2 7E ; Load long $7EC2FC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0052.w		; C9 52 00 ; Compare #$0052.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$0053.w		; C9 53 00 ; Compare #$0053.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$005A.w		; C9 5A 00 ; Compare #$005A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$005B.w		; C9 5B 00 ; Compare #$005B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $DF4F.w		; 20 4F DF ; Jump to subroutine at $DF4F.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $DFB8.w		; 20 B8 DF ; Jump to subroutine at $DFB8.w [Writes: Stack Pointer] [Flow: call]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $DFB8.w		; 20 B8 DF ; Jump to subroutine at $DFB8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC2FE.l		; AF FE C2 7E ; Load long $7EC2FE.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$06.b		; 69 06 ; Add #$06.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $7EC2FF.l		; AF FF C2 7E ; Load long $7EC2FF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0080.w		; A0 80 00 ; Load #$0080.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $DFB8.w		; 20 B8 DF ; Jump to subroutine at $DFB8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $07AAA2.l		; 22 A2 AA 07 ; Jump to subroutine long $07AAA2.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $49.b		; 46 49 ; Logical shift right $49.b [Reads: Direct Page] [Flags: NCZ]
	tsb $481D.w		; 0C 1D 48 ; Test and set bits $481D.w [Reads: Accumulator] [Flags: Z]
	eor #$13.b		; 49 13 ; Exclusive OR #$13.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $4946.w,X		; 1D 46 49 ; OR accumulator with memory $4946.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($0E.b,S),Y		; 13 0E ; OR accumulator (stack relative indirect indexed) ($0E.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor #$0C.b		; 49 0C ; Exclusive OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($48.b),Y		; 11 48 ; OR accumulator with memory ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$0C.b		; 49 0C ; Exclusive OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $4F		; 10 4F ; Branch if plus to $10, $4F [Flow: branch]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $50, $0E		; 50 0E ; Branch if overflow clear to $50, $0E [Flow: branch]
	eor #$4A.b		; 49 4A ; Exclusive OR #$4A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($46.b),Y		; 11 46 ; OR accumulator with memory ($46.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$12.b		; 49 12 ; Exclusive OR #$12.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor #$00.b		; 49 00 ; Exclusive OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $50, $00		; 50 00 ; Branch if overflow clear to $50, $00 [Flow: branch]
	eor #$00.b		; 49 00 ; Exclusive OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($48.b),Y		; 11 48 ; OR accumulator with memory ($48.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$0C.b		; 49 0C ; Exclusive OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rol $48.b,X		; 36 48 ; Rotate left $48.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	eor #$4C.b		; 49 4C ; Exclusive OR #$4C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($5D.b),Y		; 11 5D ; OR accumulator with memory ($5D.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $440C.w		; 2C 0C 44 ; Test bits $440C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $0F00.w		; 4E 00 0F ; Logical shift right $0F00.w [Flags: NCZ]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0D00.w		; 4C 00 0D ; Jump to $0D00.w [Flow: jump]
	ora [$00.b],Y		; 17 00 ; OR accumulator with memory (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $0D.b,X		; 16 0D ; Arithmetic shift left $0D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora [$1B.b],Y		; 17 1B ; OR accumulator with memory (long indexed) [$1B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $0D.b,X		; 16 0D ; Arithmetic shift left $0D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora [$14.b],Y		; 17 14 ; OR accumulator with memory (long indexed) [$14.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $0D.b,X		; 15 0D ; OR accumulator with memory $0D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora [$15.b],Y		; 17 15 ; OR accumulator with memory (long indexed) [$15.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $0D.b,X		; 16 0D ; Arithmetic shift left $0D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $0D16.w,Y		; 19 16 0D ; OR accumulator with memory $0D16.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$19.b],Y		; 17 19 ; OR accumulator with memory (long indexed) [$19.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $0D.b,X		; 16 0D ; Arithmetic shift left $0D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0D.b,X		; 16 0D ; Arithmetic shift left $0D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $114A49.l		; 0F 49 4A 11 ; OR accumulator with memory (long) $114A49.l [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jmp $491615.l		; 5C 15 16 49 ; Jump long to $491615.l [Flow: jump]
	ora [$1D.b],Y		; 17 1D ; OR accumulator with memory (long indexed) [$1D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $15.b		; 00 15 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0D.b,X		; 16 0D ; Arithmetic shift left $0D.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora [$10.b],Y		; 17 10 ; OR accumulator with memory (long indexed) [$10.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $49.b,X		; 16 49 ; Arithmetic shift left $49.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($00.b)		; 12 00 ; OR accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $49.b,X		; 16 49 ; Arithmetic shift left $49.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $0011.w		; 0C 11 00 ; Test and set bits $0011.w [Reads: Accumulator] [Flags: Z]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	ora $1100.w		; 0D 00 11 ; Logical OR $1100.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $49.b,X		; 16 49 ; Arithmetic shift left $49.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	tsb $1600.w		; 0C 00 16 ; Test and set bits $1600.w [Reads: Accumulator] [Flags: Z]
	ora $114C.w		; 0D 4C 11 ; Logical OR $114C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $4A0D.w		; 0E 0D 4A ; Arithmetic shift left $4A0D.w [Flags: NCZ]
	ora ($16.b),Y		; 11 16 ; OR accumulator with memory ($16.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora [$1B.b],Y		; 17 1B ; OR accumulator with memory (long indexed) [$1B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $504A34.l		; 4F 34 4A 50 ; Exclusive OR accumulator with memory (long) $504A34.l [Writes: Accumulator] [Flags: NZ]
	and $4D.b,X		; 35 4D ; Logical AND $4D.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc $36.b		; 65 36 ; Add $36.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	bit $4E.b,X		; 34 4E ; Test bits $4E.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $4A.b,X		; 34 4A ; Test bits $4A.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	ora ($51.b),Y		; 11 51 ; OR accumulator with memory ($51.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	bit $5D.b,X		; 34 5D ; Test bits $5D.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	eor $494B.w,Y		; 59 4B 49 ; Exclusive OR accumulator with memory $494B.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp $2D11.w		; 4C 11 2D ; Jump to $2D11.w [Flow: jump]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5D.b		; 00 5D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0000.w,Y		; 59 00 00 ; Exclusive OR accumulator with memory $0000.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$49.b]		; 47 49 ; Exclusive OR accumulator with memory (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $4946.w		; 2D 46 49 ; Logical AND $4946.w with accumulator [Writes: Accumulator] [Flags: NZ]
	trb $0052.w		; 1C 52 00 ; Test and reset bits $0052.w [Reads: Accumulator] [Flags: Z]
	eor #$1C.b		; 49 1C ; Exclusive OR #$1C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($5D.b)		; 52 5D ; Exclusive OR accumulator with memory (indirect) ($5D.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$00.b		; 49 00 ; Exclusive OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($46.b)		; 52 46 ; Exclusive OR accumulator with memory (indirect) ($46.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$13.b		; 49 13 ; Exclusive OR #$13.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($4B.b)		; 52 4B ; Exclusive OR accumulator with memory (indirect) ($4B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor $5A4A.w		; 4D 4A 5A ; Exclusive OR $5A4A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor [$49.b]		; 47 49 ; Exclusive OR accumulator with memory (long) [$49.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $4B52.w		; 1C 52 4B ; Test and reset bits $4B52.w [Reads: Accumulator] [Flags: Z]
	eor $3639.w		; 4D 39 36 ; Exclusive OR $3639.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $522E2C.l,X		; 1F 2C 2E 52 ; Logical OR long $522E2C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $1D2E2C.l,X		; 1F 2C 2E 1D ; Logical OR long $1D2E2C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $522E2C.l		; 2F 2C 2E 52 ; AND accumulator with memory (long) $522E2C.l [Writes: Accumulator] [Flags: NZ]
	and $312E2C.l		; 2F 2C 2E 31 ; AND accumulator with memory (long) $312E2C.l [Writes: Accumulator] [Flags: NZ]
	ora $52301E.l,X		; 1F 1E 30 52 ; Logical OR long $52301E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($49.b),Y		; 51 49 ; Exclusive OR accumulator with memory ($49.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,S),Y		; 13 00 ; OR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $501349.l		; 4F 49 13 50 ; Exclusive OR accumulator with memory (long) $501349.l [Writes: Accumulator] [Flags: NZ]
	eor $504A4D.l		; 4F 4D 4A 50 ; Exclusive OR accumulator with memory (long) $504A4D.l [Writes: Accumulator] [Flags: NZ]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	eor #$4C.b		; 49 4C ; Exclusive OR #$4C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	ora $532220.l,X		; 1F 20 22 53 ; Logical OR long $532220.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor $3D.b,X		; 55 3D ; Exclusive OR accumulator with memory $3D.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $43		; 42 43 ; Reserved instruction
	ora $52231E.l,X		; 1F 1E 23 52 ; Logical OR long $52231E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $3A391E.l,X		; 1F 1E 39 3A ; Logical OR long $3A391E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $3E3A1E.l,X		; 1F 1E 3A 3E ; Logical OR long $3E3A1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $3D3C1E.l,X		; 1F 1E 3C 3D ; Logical OR long $3D3C1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	asl $3F27.w,X		; 1E 27 3F ; Arithmetic shift left $3F27.w,X [Reads: X Index] [Flags: NCZ]
	eor $1A.b,X		; 55 1A ; Exclusive OR accumulator with memory $1A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $42, $43		; 42 43 ; Reserved instruction
	ora $522A1E.l,X		; 1F 1E 2A 52 ; Logical OR long $522A1E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $52381E.l,X		; 1F 1E 38 52 ; Logical OR long $52381E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $522820.l,X		; 1F 20 28 52 ; Logical OR long $522820.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $522620.l,X		; 1F 20 26 52 ; Logical OR long $522620.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $52252C.l,X		; 1F 2C 25 52 ; Logical OR long $52252C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $522720.l,X		; 1F 20 27 52 ; Logical OR long $522720.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $52291E.l,X		; 1F 1E 29 52 ; Logical OR long $52291E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $523B2C.l,X		; 1F 2C 3B 52 ; Logical OR long $523B2C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr $49.b		; 46 49 ; Logical shift right $49.b [Reads: Direct Page] [Flags: NCZ]
	bit $52.b		; 24 52 ; Test bits $52.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	and ($41.b,X)		; 21 41 ; Logical AND ($41.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor $33.b		; 45 33 ; Exclusive OR $33.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $31282C.l,X		; 1F 2C 28 31 ; Logical OR long $31282C.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $52290D.l,X		; 1F 0D 29 52 ; Logical OR long $52290D.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $52271E.l,X		; 1F 1E 27 52 ; Logical OR long $52271E.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $532720.l,X		; 1F 20 27 53 ; Logical OR long $532720.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	eor #$13.b		; 49 13 ; Exclusive OR #$13.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($0E.b)		; 52 0E ; Exclusive OR accumulator with memory (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $504A.w,X		; 1E 4A 50 ; Arithmetic shift left $504A.w,X [Reads: X Index] [Flags: NCZ]
	ora $532620.l,X		; 1F 20 26 53 ; Logical OR long $532620.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,X		; 15 00 ; OR accumulator with memory $00.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $522A00.l,X		; 1F 00 2A 52 ; Logical OR long $522A00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($00.b)		; 32 00 ; AND accumulator with memory (indirect) ($00.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0049.w,X		; 5D 49 00 ; Exclusive OR accumulator with memory $0049.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($55.b)		; 52 55 ; Exclusive OR accumulator with memory (indirect) ($55.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$42.b		; 49 42 ; Exclusive OR #$42.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor $61.b,S		; 43 61 ; Exclusive OR accumulator with stack relative $61.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $62, $63, $50		; 62 63 50 ; Push effective relative address $62, $63, $50 [Writes: Stack Pointer]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $50.b,S		; 63 50 ; Add with carry (stack relative) $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $50.b,S		; 63 50 ; Add with carry (stack relative) $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $50.b,S		; 63 50 ; Add with carry (stack relative) $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $50.b,S		; 63 50 ; Add with carry (stack relative) $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $50.b,S		; 63 50 ; Add with carry (stack relative) $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($56.b,X)		; 61 56 ; Add with carry ($56.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$50.b],Y		; 57 50 ; Exclusive OR accumulator with memory (long indexed) [$50.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $50.b,S		; 63 50 ; Add with carry (stack relative) $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $50.b,S		; 63 50 ; Add with carry (stack relative) $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($56.b,X)		; 61 56 ; Add with carry ($56.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$50.b],Y		; 57 50 ; Exclusive OR accumulator with memory (long indexed) [$50.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($56.b,X)		; 61 56 ; Add with carry ($56.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $50.b,S		; 63 50 ; Add with carry (stack relative) $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($56.b,X)		; 61 56 ; Add with carry ($56.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$50.b],Y		; 57 50 ; Exclusive OR accumulator with memory (long indexed) [$50.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($56.b,X)		; 61 56 ; Add with carry ($56.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($50.b,S),Y		; 33 50 ; AND accumulator (stack relative indirect indexed) ($50.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc ($56.b,X)		; 61 56 ; Add with carry ($56.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$50.b],Y		; 57 50 ; Exclusive OR accumulator with memory (long indexed) [$50.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $50.b,S		; 63 50 ; Add with carry (stack relative) $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	adc ($62.b,X)		; 61 62 ; Add with carry ($62.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $50.b,S		; 63 50 ; Add with carry (stack relative) $50.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora $000818.l,X		; 1F 18 08 00 ; Logical OR long $000818.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $00061B.l		; 22 1B 06 00 ; Jump to subroutine long $00061B.l [Writes: Stack Pointer] [Flow: call]
	ora $000718.l,X		; 1F 18 07 00 ; Logical OR long $000718.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $1C.b,S		; 23 1C ; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($18.b,X)		; 21 18 ; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $0B19.w		; 20 19 0B ; Jump to subroutine at $0B19.w [Writes: Stack Pointer] [Flow: call]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsb $2400.w		; 0C 00 24 ; Test and set bits $2400.w [Reads: Accumulator] [Flags: Z]
	ora $0008.w,Y		; 19 08 00 ; OR accumulator with memory $0008.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsl $000C1B.l		; 22 1B 0C 00 ; Jump to subroutine long $000C1B.l [Writes: Stack Pointer] [Flow: call]
	and $1B.b		; 25 1B ; Logical AND $1B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $2600.w		; 0C 00 26 ; Test and set bits $2600.w [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $000A.w,X		; 1D 0A 00 ; OR accumulator with memory $000A.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	asl $000B.w,X		; 1E 0B 00 ; Arithmetic shift left $000B.w,X [Reads: X Index] [Flags: NCZ]
	and #$16.b		; 29 16 ; Logical AND #$16.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $2A00.w		; 0D 00 2A ; Logical OR $2A00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $1C.b,S		; 23 1C ; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $091B.w		; 20 1B 09 ; Jump to subroutine at $091B.w [Writes: Stack Pointer] [Flow: call]
	brk $2A.b		; 00 2A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$0B.b],Y		; 17 0B ; OR accumulator with memory (long indexed) [$0B.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $0009.w		; 1C 09 00 ; Test and reset bits $0009.w [Reads: Accumulator] [Flags: Z]
	jsr $0B19.w		; 20 19 0B ; Jump to subroutine at $0B19.w [Writes: Stack Pointer] [Flow: call]
	brk $21.b		; 00 21 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	bit $1B.b		; 24 1B ; Test bits $1B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and $1B.b		; 25 1B ; Logical AND $1B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rol $1B.b		; 26 1B ; Rotate left $1B.b [Reads: Direct Page] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $27.b		; 00 27 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0009.w,X		; 1D 09 00 ; OR accumulator with memory $0009.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	asl $000C.w,X		; 1E 0C 00 ; Arithmetic shift left $000C.w,X [Reads: X Index] [Flags: NCZ]
	and #$16.b		; 29 16 ; Logical AND #$16.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $2A00.w		; 0D 00 2A ; Logical OR $2A00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora [$72.b],Y		; 17 72 ; OR accumulator with memory (long indexed) [$72.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $0000.w,X		; 5D 00 00 ; Exclusive OR accumulator with memory $0000.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $57.b		; 00 57 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jmp $0000.w		; 4C 00 00 ; Jump to $0000.w [Flow: jump]
	lsr $4F.b,X		; 56 4F ; Logical shift right $4F.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($4D.b,S),Y		; 53 4D ; XOR accumulator (stack relative indirect indexed) ($4D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($49.b)		; 52 49 ; Exclusive OR accumulator with memory (indirect) ($49.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $4A.b,X		; 55 4A ; Exclusive OR accumulator with memory $4A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($4E.b),Y		; 51 4E ; Exclusive OR accumulator with memory ($4E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $4B		; 50 4B ; Branch if overflow clear to $50, $4B [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($4D.b,S),Y		; 53 4D ; XOR accumulator (stack relative indirect indexed) ($4D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $54.b,X		; 55 54 ; Exclusive OR accumulator with memory $54.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$48.b]		; 47 48 ; Exclusive OR accumulator with memory (long) [$48.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor [$4C.b],Y		; 57 4C ; Exclusive OR accumulator with memory (long indexed) [$4C.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $4F.b,X		; 56 4F ; Logical shift right $4F.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($4D.b,S),Y		; 53 4D ; XOR accumulator (stack relative indirect indexed) ($4D.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($49.b)		; 52 49 ; Exclusive OR accumulator with memory (indirect) ($49.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $4A.b,X		; 55 4A ; Exclusive OR accumulator with memory $4A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($54.b,S),Y		; 53 54 ; XOR accumulator (stack relative indirect indexed) ($54.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($4E.b),Y		; 51 4E ; Exclusive OR accumulator with memory ($4E.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $50, $4B		; 50 4B ; Branch if overflow clear to $50, $4B [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($00.b,S),Y		; 53 00 ; XOR accumulator (stack relative indirect indexed) ($00.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $36.b,X		; 35 36 ; Logical AND $36.b,X with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	brk $2B.b		; 00 2B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $0000.w		; 2C 00 00 ; Test bits $0000.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	and $002E.w		; 2D 2E 00 ; Logical AND $002E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $2F.b		; 00 2F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $00		; 30 00 ; Branch if minus to $30, $00 [Flow: branch]
	brk $37.b		; 00 37 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sec		; 38 ; Set carry flag [Flags: C]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($34.b,S),Y		; 33 34 ; AND accumulator (stack relative indirect indexed) ($34.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and ($32.b),Y		; 31 32 ; AND accumulator with memory ($32.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc ($72.b),Y		; 71 72 ; Add with carry ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($17.b),Y		; 71 17 ; Add with carry ($17.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	eor ($39.b,X)		; 41 39 ; Exclusive OR accumulator with memory ($39.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $50, $51		; 50 51 ; Branch if overflow clear to $50, $51 [Flow: branch]
	eor ($53.b)		; 52 53 ; Exclusive OR accumulator with memory (indirect) ($53.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	mvn $56,$55		; 54 55 56 ; Move block negative $56,$55 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	eor [$58.b],Y		; 57 58 ; Exclusive OR accumulator with memory (long indexed) [$58.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor $5B5A.w,Y		; 59 5A 5B ; Exclusive OR accumulator with memory $5B5A.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp $5F5E5D.l		; 5C 5D 5E 5F ; Jump long to $5F5E5D.l [Flow: jump]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $100E.w		; 0C 0E 10 ; Test and set bits $100E.w [Reads: Accumulator] [Flags: Z]
	ora ($14.b)		; 12 14 ; OR accumulator with memory (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $18.b,X		; 16 18 ; Arithmetic shift left $18.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $AE1E.w		; 1C 1E AE ; Test and reset bits $AE1E.w [Reads: Accumulator] [Flags: Z]
	ora ($04.b)		; 12 04 ; OR accumulator with memory (indirect) ($04.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$10.b		; E0 10 ; Compare #$10.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	lda $00DEDF.l,X		; BF DF DE 00 ; Load long $00DEDF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $19.b		; 85 19 ; Store accumulator to $19.b [Reads: Accumulator]
	stz $0118.w		; 9C 18 01 ; Store zero to $0118.w
	lda $00DEEF.l,X		; BF EF DE 00 ; Load long $00DEEF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0119.w		; 8D 19 01 ; Store accumulator to $0119.w [Reads: Accumulator]
	inc $0412.w		; EE 12 04 ; Increment $0412.w [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$6000.w		; A9 00 60 ; Load #$6000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $DF4F.w		; 20 4F DF ; Jump to subroutine at $DF4F.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00C0.w		; A0 C0 00 ; Load #$00C0.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $0AA2.w		; AD A2 0A ; Load $0AA2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0020.w		; C9 20 00 ; Compare #$0020.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	ldy #$0080.w		; A0 80 00 ; Load #$0080.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $DF4F.w		; 20 4F DF ; Jump to subroutine at $DF4F.w [Writes: Stack Pointer] [Flow: call]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $DFB8.w		; 20 B8 DF ; Jump to subroutine at $DFB8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A0.b,S		; 03 A0 ; OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$03.b]		; A7 03 ; Load accumulator (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F0010.l,X		; 9F 10 00 7F ; Store accumulator (long,X) $7F0010.l,X [Reads: Accumulator, X Index]
	inc $03.b		; E6 03 ; Increment $03.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$03.b]		; A7 03 ; Load accumulator (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F0010.l,X		; 9F 10 00 7F ; Store accumulator (long,X) $7F0010.l,X [Reads: Accumulator, X Index]
	inc $03.b		; E6 03 ; Increment $03.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $B1		; 10 B1 ; Branch if plus to $10, $B1 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $9A		; D0 9A ; Branch if not equal to $D0, $9A [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $A0.b,S		; 03 A0 ; OR accumulator with stack relative $A0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$03.b]		; A7 03 ; Load accumulator (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	adc $E803E6.l,X		; 7F E6 03 E8 ; Add long $E803E6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$03.b]		; A7 03 ; Load accumulator (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	adc $E803E6.l,X		; 7F E6 03 E8 ; Add long $E803E6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$03.b]		; A7 03 ; Load accumulator (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	adc $E803E6.l,X		; 7F E6 03 E8 ; Add long $E803E6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F0000.l,X		; 9F 00 00 7F ; Store accumulator (long,X) $7F0000.l,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$03.b]		; A7 03 ; Load accumulator (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $9F.b		; 00 9F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	adc $E803E6.l,X		; 7F E6 03 E8 ; Add long $E803E6.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $A1		; 10 A1 ; Branch if plus to $10, $A1 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $8A		; D0 8A ; Branch if not equal to $D0, $8A [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda #$7800.w		; A9 00 78 ; Load #$7800.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00C0.w		; A0 C0 00 ; Load #$00C0.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $DFB8.w		; 20 B8 DF ; Jump to subroutine at $DFB8.w [Writes: Stack Pointer] [Flow: call]
	ldy #$0040.w		; A0 40 00 ; Load #$0040.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EC2FF.l		; AF FF C2 7E ; Load long $7EC2FF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0052.w		; C9 52 00 ; Compare #$0052.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cmp #$0053.w		; C9 53 00 ; Compare #$0053.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cmp #$005A.w		; C9 5A 00 ; Compare #$005A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$005B.w		; C9 5B 00 ; Compare #$005B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $DF4F.w		; 20 4F DF ; Jump to subroutine at $DF4F.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $DFB8.w		; 20 B8 DF ; Jump to subroutine at $DFB8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	asl $181F.w		; 0E 1F 18 ; Arithmetic shift left $181F.w [Flags: NCZ]
	ora $100100.l		; 0F 00 01 10 ; OR accumulator with memory (long) $100100.l [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $1B22.w		; 0E 22 1B ; Arithmetic shift left $1B22.w [Flags: NCZ]
	ora $100100.l		; 0F 00 01 10 ; OR accumulator with memory (long) $100100.l [Writes: Accumulator] [Flags: NZ]
	asl $0E.b		; 06 0E ; Arithmetic shift left $0E.b [Reads: Direct Page] [Flags: NCZ]
	ora $000F18.l,X		; 1F 18 0F 00 ; Logical OR long $000F18.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,X)		; 01 13 ; Logical OR ($13.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$0E.b]		; 07 0E ; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $1C.b,S		; 23 1C ; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $100100.l		; 0F 00 01 10 ; OR accumulator with memory (long) $100100.l [Writes: Accumulator] [Flags: NZ]
	ora [$0E.b]		; 07 0E ; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and ($18.b,X)		; 21 18 ; Logical AND ($18.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $100100.l		; 0F 00 01 10 ; OR accumulator with memory (long) $100100.l [Writes: Accumulator] [Flags: NZ]
	ora #$0E.b		; 09 0E ; Logical OR #$0E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $0F19.w		; 20 19 0F ; Jump to subroutine at $0F19.w [Writes: Stack Pointer] [Flow: call]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($0B.b)		; 12 0B ; OR accumulator with memory (indirect) ($0B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $1A21.w		; 0E 21 1A ; Arithmetic shift left $1A21.w [Flags: NCZ]
	ora $110100.l		; 0F 00 01 11 ; OR accumulator with memory (long) $110100.l [Writes: Accumulator] [Flags: NZ]
	tsb $240E.w		; 0C 0E 24 ; Test and set bits $240E.w [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $110100.l		; 0F 00 01 11 ; OR accumulator with memory (long) $110100.l [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl $1B22.w		; 0E 22 1B ; Arithmetic shift left $1B22.w [Flags: NCZ]
	ora $110100.l		; 0F 00 01 11 ; OR accumulator with memory (long) $110100.l [Writes: Accumulator] [Flags: NZ]
	tsb $250E.w		; 0C 0E 25 ; Test and set bits $250E.w [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $110100.l		; 0F 00 01 11 ; OR accumulator with memory (long) $110100.l [Writes: Accumulator] [Flags: NZ]
	tsb $260E.w		; 0C 0E 26 ; Test and set bits $260E.w [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $140100.l		; 0F 00 01 14 ; OR accumulator with memory (long) $140100.l [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $1D27.w		; 0E 27 1D ; Arithmetic shift left $1D27.w [Flags: NCZ]
	ora $110100.l		; 0F 00 01 11 ; OR accumulator with memory (long) $110100.l [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $1E28.w		; 0E 28 1E ; Arithmetic shift left $1E28.w [Flags: NCZ]
	ora $120302.l		; 0F 02 03 12 ; OR accumulator with memory (long) $120302.l [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $1629.w		; 0E 29 16 ; Arithmetic shift left $1629.w [Flags: NCZ]
	ora $150100.l		; 0F 00 01 15 ; OR accumulator with memory (long) $150100.l [Writes: Accumulator] [Flags: NZ]
	ora $2A0E.w		; 0D 0E 2A ; Logical OR $2A0E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora $100100.l		; 0F 00 01 10 ; OR accumulator with memory (long) $100100.l [Writes: Accumulator] [Flags: NZ]
	ora [$0E.b]		; 07 0E ; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $1C.b,S		; 23 1C ; AND accumulator with stack relative $1C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $130100.l		; 0F 00 01 13 ; OR accumulator with memory (long) $130100.l [Writes: Accumulator] [Flags: NZ]
	ora [$0E.b]		; 07 0E ; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $130100.l		; 0F 00 01 13 ; OR accumulator with memory (long) $130100.l [Writes: Accumulator] [Flags: NZ]
	ora [$0E.b]		; 07 0E ; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $100100.l		; 0F 00 01 10 ; OR accumulator with memory (long) $100100.l [Writes: Accumulator] [Flags: NZ]
	ora #$0E.b		; 09 0E ; Logical OR #$0E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $0F1B.w		; 20 1B 0F ; Jump to subroutine at $0F1B.w [Writes: Stack Pointer] [Flow: call]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	asl $172A.w		; 0E 2A 17 ; Arithmetic shift left $172A.w [Flags: NCZ]
	ora $120302.l		; 0F 02 03 12 ; OR accumulator with memory (long) $120302.l [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $1C21.w		; 0E 21 1C ; Arithmetic shift left $1C21.w [Flags: NCZ]
	ora $110800.l		; 0F 00 08 11 ; OR accumulator with memory (long) $110800.l [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $5B5D2E.l		; 22 2E 5D 5B ; Jump to subroutine long $5B5D2E.l [Writes: Stack Pointer] [Flow: call]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $5D2B.w		; 20 2B 5D ; Jump to subroutine at $5D2B.w [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $5D2B.w		; 20 2B 5D ; Jump to subroutine at $5D2B.w [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $533D.w,X		; 3C 3D 53 ; Test bits $533D.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $5B3E.w		; 4D 3E 5B ; Exclusive OR $5B3E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $42, $43		; 42 43 ; Reserved instruction
	mvp $20,$45		; 44 45 20 ; Move block positive $20,$45 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $08005D.l,X		; 3F 5D 00 08 ; AND accumulator with memory (long,X) $08005D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $5D2B.w		; 20 2B 5D ; Jump to subroutine at $5D2B.w [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $5D2B.w		; 20 2B 5D ; Jump to subroutine at $5D2B.w [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $5D2B.w		; 20 2B 5D ; Jump to subroutine at $5D2B.w [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $5D2B.w		; 20 2B 5D ; Jump to subroutine at $5D2B.w [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $18		; 10 18 ; Branch if plus to $10, $18 [Flow: branch]
	jsr $5D2B.w		; 20 2B 5D ; Jump to subroutine at $5D2B.w [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	adc ($72.b),Y		; 71 72 ; Add with carry ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($72.b),Y		; 71 72 ; Add with carry ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $5D2B.w		; 20 2B 5D ; Jump to subroutine at $5D2B.w [Writes: Stack Pointer] [Flow: call]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $533D.w,X		; 3C 3D 53 ; Test bits $533D.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	eor $5B3E.w		; 4D 3E 5B ; Exclusive OR $5B3E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $42, $43		; 42 43 ; Reserved instruction
	mvp $20,$45		; 44 45 20 ; Move block positive $20,$45 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	and $720059.l,X		; 3F 59 00 72 ; AND accumulator with memory (long,X) $720059.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($72.b),Y		; 71 72 ; Add with carry ($72.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $5D2B.w		; 20 2B 5D ; Jump to subroutine at $5D2B.w [Writes: Stack Pointer] [Flow: call]
	ora $1D3916.l		; 0F 16 39 1D ; OR accumulator with memory (long) $1D3916.l [Writes: Accumulator] [Flags: NZ]
	ora [$40.b],Y		; 17 40 ; OR accumulator with memory (long indexed) [$40.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($39.b,X)		; 41 39 ; Exclusive OR accumulator with memory ($39.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl $4600.w,X		; 1E 00 46 ; Arithmetic shift left $4600.w,X [Reads: X Index] [Flags: NCZ]
	and $4072.w,Y		; 39 72 40 ; AND accumulator with memory $4072.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor ($39.b,X)		; 41 39 ; Exclusive OR accumulator with memory ($39.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $AB4B8B.l		; 0F 8B 4B AB ; OR accumulator with memory (long) $AB4B8B.l [Writes: Accumulator] [Flags: NZ]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
	stz VMADDL.w		; 9C 16 21 ; Store zero to VMADDL.w
	lda #$44.b		; A9 44 ; Load #$44.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDH.w		; 8D 17 21 ; Store accumulator to VMADDH.w [Reads: Accumulator]
	jsr $E6B7.w		; 20 B7 E6 ; Jump to subroutine at $E6B7.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0AA3.w		; AD A3 0A ; Load $0AA3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $DB57.w,Y		; B9 57 DB ; Load $DB57.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7EC2FC.l		; 8F FC C2 7E ; Store accumulator (long) $7EC2FC.l [Reads: Accumulator]
	lda $7EC2FC.l		; AF FC C2 7E ; Load long $7EC2FC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $DB58.w,Y		; B9 58 DB ; Load $DB58.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7EC2FD.l		; 8F FD C2 7E ; Store accumulator (long) $7EC2FD.l [Reads: Accumulator]
	lda $7EC2FD.l		; AF FD C2 7E ; Load long $7EC2FD.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $DB59.w,Y		; B9 59 DB ; Load $DB59.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7EC2FE.l		; 8F FE C2 7E ; Store accumulator (long) $7EC2FE.l [Reads: Accumulator]
	lda $7EC2FE.l		; AF FE C2 7E ; Load long $7EC2FE.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $DB5A.w,Y		; B9 5A DB ; Load $DB5A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sta $7EC2FF.l		; 8F FF C2 7E ; Store accumulator (long) $7EC2FF.l [Reads: Accumulator]
	lda $7EC2FF.l		; AF FF C2 7E ; Load long $7EC2FF.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	ldy $09.b		; A4 09 ; Load $09.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldx #$78.b		; A2 78 ; Load #$78.b into X register [Writes: X Index] [Flags: NZ]
	jsr $E583.w		; 20 83 E5 ; Jump to subroutine at $E583.w [Writes: Stack Pointer] [Flow: call]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx #$7E.b		; A2 7E ; Load #$7E.b into X register [Writes: X Index] [Flags: NZ]
	jsr $E583.w		; 20 83 E5 ; Jump to subroutine at $E583.w [Writes: Stack Pointer] [Flow: call]
	ldy $07.b		; A4 07 ; Load $07.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx #$84.b		; A2 84 ; Load #$84.b into X register [Writes: X Index] [Flags: NZ]
	jsr $E583.w		; 20 83 E5 ; Jump to subroutine at $E583.w [Writes: Stack Pointer] [Flow: call]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx #$8A.b		; A2 8A ; Load #$8A.b into X register [Writes: X Index] [Flags: NZ]
	jsr $E583.w		; 20 83 E5 ; Jump to subroutine at $E583.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$2000.w		; A9 00 20 ; Load #$2000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	lda $0AA1.w		; AD A1 0A ; Load $0AA1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0AA2.w		; AD A2 0A ; Load $0AA2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $E073.w,Y		; B9 73 E0 ; Load $E073.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $E074.w,Y		; B9 74 E0 ; Load $E074.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $E075.w,Y		; B9 75 E0 ; Load $E075.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda $DD97.w,X		; BD 97 DD ; Load $DD97.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda $E076.w,Y		; B9 76 E0 ; Load $E076.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC2F8.l		; 8F F8 C2 7E ; Store accumulator (long) $7EC2F8.l [Reads: Accumulator]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $DD98.w,X		; BD 98 DD ; Load $DD98.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda $E077.w,Y		; B9 77 E0 ; Load $E077.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC2F9.l		; 8F F9 C2 7E ; Store accumulator (long) $7EC2F9.l [Reads: Accumulator]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $DD99.w,X		; BD 99 DD ; Load $DD99.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda $E078.w,Y		; B9 78 E0 ; Load $E078.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC2FA.l		; 8F FA C2 7E ; Store accumulator (long) $7EC2FA.l [Reads: Accumulator]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $DD9A.w,X		; BD 9A DD ; Load $DD9A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda $E079.w,Y		; B9 79 E0 ; Load $E079.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC2FB.l		; 8F FB C2 7E ; Store accumulator (long) $7EC2FB.l [Reads: Accumulator]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	lda $E07A.w,Y		; B9 7A E0 ; Load $E07A.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	ldy $0D.b		; A4 0D ; Load $0D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $E609.w		; 20 09 E6 ; Jump to subroutine at $E609.w [Writes: Stack Pointer] [Flow: call]
	dec $0F.b		; C6 0F ; Decrement $0F.b [Reads: Direct Page] [Flags: NZ]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $E609.w		; 20 09 E6 ; Jump to subroutine at $E609.w [Writes: Stack Pointer] [Flow: call]
	dec $0F.b		; C6 0F ; Decrement $0F.b [Reads: Direct Page] [Flags: NZ]
	ldy $0B.b		; A4 0B ; Load $0B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $E609.w		; 20 09 E6 ; Jump to subroutine at $E609.w [Writes: Stack Pointer] [Flow: call]
	dec $0F.b		; C6 0F ; Decrement $0F.b [Reads: Direct Page] [Flags: NZ]
	ldy $0A.b		; A4 0A ; Load $0A.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$60.b		; A2 60 ; Load #$60.b into X register [Writes: X Index] [Flags: NZ]
	jsr $E60D.w		; 20 0D E6 ; Jump to subroutine at $E60D.w [Writes: Stack Pointer] [Flow: call]
	dec $0F.b		; C6 0F ; Decrement $0F.b [Reads: Direct Page] [Flags: NZ]
	ldy $09.b		; A4 09 ; Load $09.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$66.b		; A2 66 ; Load #$66.b into X register [Writes: X Index] [Flags: NZ]
	jsr $E60D.w		; 20 0D E6 ; Jump to subroutine at $E60D.w [Writes: Stack Pointer] [Flow: call]
	dec $0F.b		; C6 0F ; Decrement $0F.b [Reads: Direct Page] [Flags: NZ]
	ldy $08.b		; A4 08 ; Load $08.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$6C.b		; A2 6C ; Load #$6C.b into X register [Writes: X Index] [Flags: NZ]
	jsr $E60D.w		; 20 0D E6 ; Jump to subroutine at $E60D.w [Writes: Stack Pointer] [Flow: call]
	dec $0F.b		; C6 0F ; Decrement $0F.b [Reads: Direct Page] [Flags: NZ]
	ldy $07.b		; A4 07 ; Load $07.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$72.b		; A2 72 ; Load #$72.b into X register [Writes: X Index] [Flags: NZ]
	jsr $E60D.w		; 20 0D E6 ; Jump to subroutine at $E60D.w [Writes: Stack Pointer] [Flow: call]
	dec $0F.b		; C6 0F ; Decrement $0F.b [Reads: Direct Page] [Flags: NZ]
	ldy $06.b		; A4 06 ; Load $06.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsr $E609.w		; 20 09 E6 ; Jump to subroutine at $E609.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
	lda $CFF3.w		; AD F3 CF ; Load $CFF3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $D0D2.w		; AD D2 D0 ; Load $D0D2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $D1B1.w		; AD B1 D1 ; Load $D1B1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$4000.w		; A9 00 40 ; Load #$4000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $BF.b,X		; 95 BF ; Store accumulator to $BF.b,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $EB		; 10 EB ; Branch if plus to $10, $EB [Flow: branch]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $BD.b		; 85 BD ; Store accumulator to $BD.b [Reads: Accumulator]
	ora $BF.b,X		; 15 BF ; OR accumulator with memory $BF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $BD.b		; 05 BD ; Logical OR $BD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $EB		; 10 EB ; Branch if plus to $10, $EB [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $CF		; D0 CF ; Branch if not equal to $D0, $CF [Flow: branch]
	lda #$7000.w		; A9 00 70 ; Load #$7000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldy #$6A.b		; A0 6A ; Load #$6A.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E33B.w		; 20 3B E3 ; Jump to subroutine at $E33B.w [Writes: Stack Pointer] [Flow: call]
	ldy #$6B.b		; A0 6B ; Load #$6B.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E33B.w		; 20 3B E3 ; Jump to subroutine at $E33B.w [Writes: Stack Pointer] [Flow: call]
	ldy #$69.b		; A0 69 ; Load #$69.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E33B.w		; 20 3B E3 ; Jump to subroutine at $E33B.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $E766.w		; 20 66 E7 ; Jump to subroutine at $E766.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$00FF.w		; A2 FF 00 ; Load #$00FF.w into X register [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $D9		; 10 D9 ; Branch if plus to $10, $D9 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
	stz VMADDL.w		; 9C 16 21 ; Store zero to VMADDL.w
	lda #$78.b		; A9 78 ; Load #$78.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDH.w		; 8D 17 21 ; Store accumulator to VMADDH.w [Reads: Accumulator]
	ldy #$67.b		; A0 67 ; Load #$67.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E33B.w		; 20 3B E3 ; Jump to subroutine at $E33B.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
	stz VMADDL.w		; 9C 16 21 ; Store zero to VMADDL.w
	lda #$44.b		; A9 44 ; Load #$44.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDH.w		; 8D 17 21 ; Store accumulator to VMADDH.w [Reads: Accumulator]
	jsr $E6B7.w		; 20 B7 E6 ; Jump to subroutine at $E6B7.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; [PATTERN: Memory clearing operation] 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
	stz VMADDL.w		; 9C 16 21 ; Store zero to VMADDL.w
	stz VMADDH.w		; 9C 17 21 ; Store zero to VMADDH.w
.INDEX 16
	rep #$10		; C2 10
	ldy #$C000.w		; A0 00 C0 ; Load #$C000.w into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAH.w		; 8D 19 21 ; Store accumulator to VMDATAH.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAH.w		; 8D 19 21 ; Store accumulator to VMDATAH.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAH.w		; 8D 19 21 ; Store accumulator to VMDATAH.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAH.w		; 8D 19 21 ; Store accumulator to VMDATAH.w [Reads: Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$4000.w		; C0 00 40 ; Compare #$4000.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $E3		; D0 E3 ; Branch if not equal to $D0, $E3 [Flow: branch]
.INDEX 8
	sep #$10		; E2 10
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sbc $00FF03.l,X		; FF 03 FF 00 ; Subtract with carry (long,X) $00FF03.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $01FFFF.l,X		; FF FF FF 01 ; Subtract with carry (long,X) $01FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $00FF02.l,X		; FF 02 FF 00 ; Subtract with carry (long,X) $00FF02.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $AEFFFF.l,X		; FF FF FF AE ; Subtract with carry (long,X) $AEFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $F0, $D2		; F0 D2 ; Branch if equal to $F0, $D2 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $E3E5.w,X		; BD E5 E3 ; Load $E3E5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $24		; 30 24 ; Branch if minus to $30, $24 [Flow: branch]
	sta $0AB1.w		; 8D B1 0A ; Store accumulator to $0AB1.w [Reads: Accumulator]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AB1.w		; 8D B1 0A ; Store accumulator to $0AB1.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA9.w		; 8D A9 0A ; Store accumulator to $0AA9.w [Reads: Accumulator]
	jsl $1BED6E.l		; 22 6E ED 1B ; Jump to subroutine long $1BED6E.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0AA9.w		; 8D A9 0A ; Store accumulator to $0AA9.w [Reads: Accumulator]
	jsl $1BED72.l		; 22 72 ED 1B ; Jump to subroutine long $1BED72.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; [PATTERN: Memory clearing operation] E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	ldx $0AAA.w		; AE AA 0A ; Load $0AAA.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$44.b		; A0 44 ; Load #$44.b into Y register [Writes: Y Index] [Flags: NZ]
	stz $08.b		; 64 08 ; Store zero to $08.b
	stz $09.b		; 64 09 ; Store zero to $09.b
	inc $0AAA.w		; EE AA 0A ; Increment $0AAA.w [Flags: NZ]
	lda $0AAA.w		; AD AA 0A ; Load $0AAA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	stz $0AAA.w		; 9C AA 0A ; Store zero to $0AAA.w
	cpx #$12.b		; E0 12 ; Compare #$12.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	ldy #$46.b		; A0 46 ; Load #$46.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0112.w		; 9C 12 01 ; Store zero to $0112.w
	sty $0116.w		; 8C 16 01 ; Store Y register to $0116.w [Reads: Y Index]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	ldy $E3D1.w,X		; BC D1 E3 ; Load Y register $E3D1.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	ldy $0AA4.w		; AC A4 0A ; Load $0AA4.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $CFF3.w,Y		; B9 F3 CF ; Load $CFF3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $D0D2.w,Y		; B9 D2 D0 ; Load $D0D2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $D1B1.w,Y		; B9 B1 D1 ; Load $D1B1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$31		; C2 31
	ldy #$0020.w		; A0 20 00 ; Load #$0020.w into Y register [Writes: Y Index] [Flags: NZ]
	sty $0C.b		; 84 0C ; Store Y register to $0C.b [Reads: Y Index]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$8000.w		; A9 00 80 ; Load #$8000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc $05.b		; E6 05 ; Increment $05.b [Reads: Direct Page] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	ldy #$0007.w		; A0 07 00 ; Load #$0007.w into Y register [Writes: Y Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F1000.l,X		; 9F 00 10 7F ; Store accumulator (long,X) $7F1000.l,X [Reads: Accumulator, X Index]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: NZ]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda [$03.b]		; A7 03 ; Load accumulator (long) [$03.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F1010.l,X		; 9F 10 10 7F ; Store accumulator (long,X) $7F1010.l,X [Reads: Accumulator, X Index]
	inc $03.b		; E6 03 ; Increment $03.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$8000.w		; A9 00 80 ; Load #$8000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$8010.w		; A9 10 80 ; Load #$8010.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	inc $02.b		; E6 02 ; Increment $02.b [Reads: Direct Page] [Flags: NZ]
	inc $05.b		; E6 05 ; Increment $05.b [Reads: Direct Page] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $BA		; 10 BA ; Branch if plus to $10, $BA [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $0C.b		; C6 0C ; Decrement $0C.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $9C		; D0 9C ; Branch if not equal to $D0, $9C [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta OBJSEL.w		; 8D 01 21 ; Store accumulator to OBJSEL.w [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
	stz VMADDL.w		; 9C 16 21 ; Store zero to VMADDL.w
	lda #$50.b		; A9 50 ; Load #$50.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDH.w		; 8D 17 21 ; Store accumulator to VMADDH.w [Reads: Accumulator]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy #$5E.b		; A0 5E ; Load #$5E.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E766.w		; 20 66 E7 ; Jump to subroutine at $E766.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	ldy #$3F.b		; A0 3F ; Load #$3F.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E5AF.w		; 20 AF E5 ; Jump to subroutine at $E5AF.w [Writes: Stack Pointer] [Flow: call]
	ldy #$5F.b		; A0 5F ; Load #$5F.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E766.w		; 20 66 E7 ; Jump to subroutine at $E766.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	ldy #$3F.b		; A0 3F ; Load #$3F.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E5AF.w		; 20 AF E5 ; Jump to subroutine at $E5AF.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$850E.w		; A9 0E 85 ; Load #$850E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cop $C2.b		; 02 C2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $A9		; 30 A9 ; Branch if minus to $30, $A9 [Flow: branch]
	brk $70.b		; 00 70 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	lda #$8000.w		; A9 00 80 ; Load #$8000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$FF.b		; A2 FF ; Load #$FF.b into X register [Writes: X Index] [Flags: NZ]
	ora [$A7.b]		; 07 A7 ; OR accumulator with memory (long) [$A7.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $8D.b		; 00 8D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	and ($E6.b,X)		; 21 E6 ; Logical AND ($E6.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $E6.b		; 00 E6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $CA.b		; 00 CA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy #$6B.b		; A0 6B ; Load #$6B.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E766.w		; 20 66 E7 ; Jump to subroutine at $E766.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$02FF.w		; A2 FF 02 ; Load #$02FF.w into X register [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta OBJSEL.w		; 8D 01 21 ; Store accumulator to OBJSEL.w [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMAIN.w		; 8D 15 21 ; Store accumulator to VMAIN.w [Reads: Accumulator]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$7000.w		; A9 00 70 ; Load #$7000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMADDL.w		; 8D 16 21 ; Store accumulator to VMADDL.w [Reads: Accumulator]
	lda #$8000.w		; A9 00 80 ; Load #$8000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$07FF.w		; A2 FF 07 ; Load #$07FF.w into X register [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $00.b		; 64 00 ; Store zero to $00.b
	stx $01.b		; 86 01 ; Store X register to $01.b [Reads: X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	jsr $E772.w		; 20 72 E7 ; Jump to subroutine at $E772.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	ldy #$3F.b		; A0 3F ; Load #$3F.b into Y register [Writes: Y Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cpx #$52.b		; E0 52 ; Compare #$52.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	cpx #$53.b		; E0 53 ; Compare #$53.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	cpx #$5A.b		; E0 5A ; Compare #$5A.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	cpx #$5B.b		; E0 5B ; Compare #$5B.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	cpx #$5C.b		; E0 5C ; Compare #$5C.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	cpx #$5E.b		; E0 5E ; Compare #$5E.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	cpx #$5F.b		; E0 5F ; Compare #$5F.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jmp $E63C.w		; 4C 3C E6 ; Jump to $E63C.w [Flow: jump]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $BF.b,X		; 95 BF ; Store accumulator to $BF.b,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $BF.b,X		; 95 BF ; Store accumulator to $BF.b,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $D8		; 10 D8 ; Branch if plus to $10, $D8 [Flow: branch]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $BD.b		; 85 BD ; Store accumulator to $BD.b [Reads: Accumulator]
	ora $BF.b,X		; 15 BF ; OR accumulator with memory $BF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $BD.b		; 05 BD ; Logical OR $BD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $BD.b		; 85 BD ; Store accumulator to $BD.b [Reads: Accumulator]
	ora $BF.b,X		; 15 BF ; OR accumulator with memory $BF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $BD.b		; 05 BD ; Logical OR $BD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $D8		; 10 D8 ; Branch if plus to $10, $D8 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $A9		; 10 A9 ; Branch if plus to $10, $A9 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$40.b		; A2 40 ; Load #$40.b into X register [Writes: X Index] [Flags: NZ]
	stz $00.b		; 64 00 ; Store zero to $00.b
	stx $01.b		; 86 01 ; Store X register to $01.b [Reads: X Index]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	jsr $E78F.w		; 20 8F E7 ; Jump to subroutine at $E78F.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	ldy #$3F.b		; A0 3F ; Load #$3F.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx $0AA1.w		; AE A1 0A ; Load $0AA1.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $15		; 90 15 ; Branch if carry clear to $90, $15 [Flow: branch]
	ldx $0F.b		; A6 0F ; Load $0F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $88		; F0 88 ; Branch if equal to $F0, $88 [Flow: branch]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $84		; F0 84 ; Branch if equal to $F0, $84 [Flow: branch]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $80		; F0 80 ; Branch if equal to $F0, $80 [Flow: branch]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	jmp $E5AF.w		; 4C AF E5 ; Jump to $E5AF.w [Flow: jump]
	ldx $0F.b		; A6 0F ; Load $0F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $F7		; B0 F7 ; Branch if carry set to $B0, $F7 [Flow: branch]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $D5		; 10 D5 ; Branch if plus to $10, $D5 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $88		; 10 88 ; Branch if plus to $10, $88 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $0AA4.w		; AC A4 0A ; Load $0AA4.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $CFF3.w,Y		; B9 F3 CF ; Load $CFF3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $D0D2.w,Y		; B9 D2 D0 ; Load $D0D2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $D1B1.w,Y		; B9 B1 D1 ; Load $D1B1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldy #$40.b		; A0 40 ; Load #$40.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $BF.b,X		; 95 BF ; Store accumulator to $BF.b,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $BF.b,X		; 95 BF ; Store accumulator to $BF.b,X [Reads: Accumulator, X Index]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $D8		; 10 D8 ; Branch if plus to $10, $D8 [Flow: branch]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $BD.b		; 85 BD ; Store accumulator to $BD.b [Reads: Accumulator]
	ora $BF.b,X		; 15 BF ; OR accumulator with memory $BF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $BD.b		; 05 BD ; Logical OR $BD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $BD.b		; 85 BD ; Store accumulator to $BD.b [Reads: Accumulator]
	ora $BF.b,X		; 15 BF ; OR accumulator with memory $BF.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $BD.b		; 05 BD ; Logical OR $BD.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta VMDATAL.w		; 8D 18 21 ; Store accumulator to VMDATAL.w [Reads: Accumulator]
	inc $00.b		; E6 00 ; Increment $00.b [Reads: Direct Page] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $D8		; 10 D8 ; Branch if plus to $10, $D8 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $D0, $A9		; D0 A9 ; Branch if not equal to $D0, $A9 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $CFF3.w,Y		; B9 F3 CF ; Load $CFF3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $D0D2.w,Y		; B9 D2 D0 ; Load $D0D2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $D1B1.w,Y		; B9 B1 D1 ; Load $D1B1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldy #$7F.b		; A0 7F ; Load #$7F.b into Y register [Writes: Y Index] [Flags: NZ]
	jmp $E63C.w		; 4C 3C E6 ; Jump to $E63C.w [Flow: jump]
	stz $0F.b		; 64 0F ; Store zero to $0F.b
	ldy #$5E.b		; A0 5E ; Load #$5E.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $06.b		; 84 06 ; Store Y register to $06.b [Reads: Y Index]
	lda #$857F.w		; A9 7F 85 ; Load #$857F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cop $A2.b		; 02 A2 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	jsr $E583.w		; 20 83 E5 ; Jump to subroutine at $E583.w [Writes: Stack Pointer] [Flow: call]
	ldy #$5F.b		; A0 5F ; Load #$5F.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $06.b		; 84 06 ; Store Y register to $06.b [Reads: Y Index]
	ldx #$40.b		; A2 40 ; Load #$40.b into X register [Writes: X Index] [Flags: NZ]
	jmp $E583.w		; 4C 83 E5 ; Jump to $E583.w [Flow: jump]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda #$8546.w		; A9 46 85 ; Load #$8546.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($A9.b,X)		; 01 A9 ; Logical OR ($A9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $640880.l,X		; 7F 80 08 64 ; Add long $640880.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$857F.w		; A9 7F 85 ; Load #$857F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cop $85.b		; 02 85 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $B9.b		; 05 B9 ; Logical OR $B9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc ($CF.b,S),Y		; F3 CF ; Subtract with carry (stack relative indirect indexed) ($CF.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	sta $CA.b		; 85 CA ; Store accumulator to $CA.b [Reads: Accumulator]
	lda $D0D2.w,Y		; B9 D2 D0 ; Load $D0D2.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $C9.b		; 85 C9 ; Store accumulator to $C9.b [Reads: Accumulator]
	lda $D1B1.w,Y		; B9 B1 D1 ; Load $D1B1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
	.db $80, $1B		; 80 1B ; Branch always to $80, $1B [Flow: branch]
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda #$8540.w		; A9 40 85 ; Load #$8540.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($A9.b,X)		; 01 A9 ; Logical OR ($A9.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc $850285.l,X		; 7F 85 02 85 ; Add long $850285.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $B9.b		; 05 B9 ; Logical OR $B9.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $CF		; 80 CF ; Branch always to $80, $CF [Flow: branch]
	sta $CA.b		; 85 CA ; Store accumulator to $CA.b [Reads: Accumulator]
	lda $D05F.w,Y		; B9 5F D0 ; Load $D05F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $C9.b		; 85 C9 ; Store accumulator to $C9.b [Reads: Accumulator]
	lda $D13E.w,Y		; B9 3E D1 ; Load $D13E.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $C8.b		; 85 C8 ; Store accumulator to $C8.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	jsr $E843.w		; 20 43 E8 ; Jump to subroutine at $E843.w [Writes: Stack Pointer] [Flow: call]
	cmp #$D0FF.w		; C9 FF D0 ; Compare #$D0FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora $E2.b,S		; 03 E2 ; OR accumulator with stack relative $E2.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $60		; 10 60 ; Branch if plus to $10, $60 [Flow: branch]
	sta $CD.b		; 85 CD ; Store accumulator to $CD.b [Reads: Accumulator]
	and #$C9E0.w		; 29 E0 C9 ; Logical AND #$C9E0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cpx #$0AF0.w		; E0 F0 0A ; Compare #$0AF0.w with X register [Reads: X Index] [Flags: NCZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $CD.b		; A5 CD ; Load $CD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	lda $CD.b		; A5 CD ; Load $CD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$48E0.w		; 29 E0 48 ; Logical AND #$48E0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $CD.b		; A5 CD ; Load $CD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$EB03.w		; 29 03 EB ; Logical AND #$EB03.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $E843.w		; 20 43 E8 ; Jump to subroutine at $E843.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $CB.b		; 85 CB ; Store accumulator to $CB.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	.db $30, $4A		; 30 4A ; Branch if minus to $30, $4A [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $20		; 10 20 ; Branch if plus to $10, $20 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $2A		; 10 2A ; Branch if plus to $10, $2A [Flow: branch]
	jsr $E843.w		; 20 43 E8 ; Jump to subroutine at $E843.w [Writes: Stack Pointer] [Flow: call]
	ldx $CB.b		; A6 CB ; Load $CB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	.db $80, $B4		; 80 B4 ; Branch always to $80, $B4 [Flow: branch]
	jsr $E843.w		; 20 43 E8 ; Jump to subroutine at $E843.w [Writes: Stack Pointer] [Flow: call]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	ldx $CB.b		; A6 CB ; Load $CB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $CB.b		; 86 CB ; Store X register to $CB.b [Reads: X Index]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	.db $80, $A5		; 80 A5 ; Branch always to $80, $A5 [Flow: branch]
	jsr $E843.w		; 20 43 E8 ; Jump to subroutine at $E843.w [Writes: Stack Pointer] [Flow: call]
	ldx $CB.b		; A6 CB ; Load $CB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $D0, $FA		; D0 FA ; Branch if not equal to $D0, $FA [Flow: branch]
	.db $80, $98		; 80 98 ; Branch always to $80, $98 [Flow: branch]
	jsr $E843.w		; 20 43 E8 ; Jump to subroutine at $E843.w [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsr $E843.w		; 20 43 E8 ; Jump to subroutine at $E843.w [Writes: Stack Pointer] [Flow: call]
	ldx $CB.b		; A6 CB ; Load $CB.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	jmp $E7A3.w		; 4C A3 E7 ; Jump to $E7A3.w [Flow: jump]
	jsr $E843.w		; 20 43 E8 ; Jump to subroutine at $E843.w [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	jsr $E843.w		; 20 43 E8 ; Jump to subroutine at $E843.w [Writes: Stack Pointer] [Flow: call]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda [$00.b],Y		; B7 00 ; Load accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	sta [$00.b],Y		; 97 00 ; Store accumulator (long indexed) [$00.b],Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	dec $CB.b		; C6 CB ; Decrement $CB.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	.db $D0, $EE		; D0 EE ; Branch if not equal to $D0, $EE [Flow: branch]
	jmp $E7A3.w		; 4C A3 E7 ; Jump to $E7A3.w [Flow: jump]
	lda [$C8.b]		; A7 C8 ; Load accumulator (long) [$C8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $C8.b		; A6 C8 ; Load $C8.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldx #$8000.w		; A2 00 80 ; Load #$8000.w into X register [Writes: X Index] [Flags: NZ]
	inc $CA.b		; E6 CA ; Increment $CA.b [Reads: Direct Page] [Flags: NZ]
	stx $C8.b		; 86 C8 ; Store X register to $C8.b [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cpx #$20FF.w		; E0 FF 20 ; Compare #$20FF.w with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr ($0400.w,X)		; FC 00 04 ; Jump to subroutine indirect indexed ($0400.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FFFF.w,X		; FE FF FF ; Increment memory $FFFF.w,X [Reads: X Index] [Flags: NZ]
	sbc $FF7FFF.l,X		; FF FF 7F FF ; Subtract with carry (long,X) $FF7FFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc $FF7FDF.l,X		; 7F DF 7F FF ; Add long $FF7FDF.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	adc $7F7F7F.l,X		; 7F 7F 7F 7F ; Add long $7F7F7F.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$7D.b],Y		; F7 7D ; Subtract with carry (long indexed) [$7D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $7BDFEF.l,X		; BF EF DF 7B ; Load long $7BDFEF.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $77BB7B.l,X		; DF 7B BB 77 ; Compare accumulator (long,X) $77BB7B.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	sbc $7777DD.l		; EF DD 77 77 ; Subtract with carry (long) $7777DD.l [Writes: Accumulator] [Flags: NCVZ]
	adc [$77.b],Y		; 77 77 ; Add with carry (long indexed) [$77.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp $776E.w,X		; DD 6E 77 ; Compare accumulator $776E.w,X [Reads: X Index] [Flags: NCZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda [$6D.b],Y		; B7 6D ; Load accumulator (long indexed) [$6D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$6D.b],Y		; B7 6D ; Load accumulator (long indexed) [$6D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $DB5B.w		; 6D 5B DB ; Add $DB5B.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	ldx $5B.b,Y		; B6 5B ; Load X register $5B.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	ldx $56.b,Y		; B6 56 ; Load X register $56.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $5555.w		; AD 55 55 ; Load $5555.w into accumulator [Writes: Accumulator] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $5555.w		; AD 55 55 ; Load $5555.w into accumulator [Writes: Accumulator] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $2A.b,X		; 55 2A ; Exclusive OR accumulator with memory $2A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $55.b,X		; 55 55 ; Exclusive OR accumulator with memory $55.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $2A.b,X		; 55 2A ; Exclusive OR accumulator with memory $2A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor $2A.b,X		; 55 2A ; Exclusive OR accumulator with memory $2A.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$95.b		; 29 95 ; Logical AND #$95.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($25.b)		; 52 25 ; Exclusive OR accumulator with memory (indirect) ($25.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $25.b		; 25 25 ; Logical AND $25.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $92.b		; 25 92 ; Logical AND $92.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit $25.b		; 24 25 ; Test bits $25.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	eor #$49.b		; 49 49 ; Exclusive OR #$49.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($49.b)		; 12 49 ; OR accumulator with memory (indirect) ($49.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($22.b)		; 12 22 ; OR accumulator with memory (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($89.b),Y		; 11 89 ; OR accumulator with memory ($89.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	mvp $11,$11		; 44 11 11 ; Move block positive $11,$11 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	ora ($11.b),Y		; 11 11 ; OR accumulator with memory ($11.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	mvp $11,$08		; 44 08 11 ; Move block positive $11,$08 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jsl $210421.l		; 22 21 04 21 ; Jump to subroutine long $210421.l [Writes: Stack Pointer] [Flow: call]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	cop $41.b		; 02 41 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $10, $01		; 10 01 ; Branch if plus to $10, $01 [Flow: branch]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $1AA5.w		; 20 A5 1A ; Jump to subroutine at $1AA5.w [Writes: Stack Pointer] [Flow: call]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$E88C.w		; A2 8C E8 ; Load #$E88C.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $B7.b		; 86 B7 ; Store X register to $B7.b [Reads: X Index]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $98C0.w,X		; BD C0 98 ; Load $98C0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $E880.w,X		; BD 80 E8 ; Load $E880.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $E884.w,X		; BD 84 E8 ; Load $E884.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $E888.w,X		; BD 88 E8 ; Load $E888.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	jsr $E9E4.w		; 20 E4 E9 ; Jump to subroutine at $E9E4.w [Writes: Stack Pointer] [Flow: call]
	lda $7EC500.l		; AF 00 C5 7E ; Load long $7EC500.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7EC300.l		; AF 00 C3 7E ; Load long $7EC300.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($B7.b),Y		; B1 B7 ; Load accumulator ($B7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7EC300.l		; AF 00 C3 7E ; Load long $7EC300.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03E0.w		; 29 E0 03 ; Logical AND #$03E0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($B7.b),Y		; B1 B7 ; Load accumulator ($B7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7EC301.l		; AF 01 C3 7E ; Load long $7EC301.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$007C.w		; 29 7C 00 ; Logical AND #$007C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($B7.b),Y		; B1 B7 ; Load accumulator ($B7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	cmp $7EC00B.l		; CF 0B C0 7E ; Compare accumulator (long) $7EC00B.l [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$0002.w		; 49 02 00 ; Exclusive OR #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7EC00B.l		; CF 0B C0 7E ; Compare accumulator (long) $7EC00B.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $DB		; F0 DB ; Branch if equal to $F0, $DB [Flow: branch]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC500.l,X		; BF 00 C5 7E ; Load long $7EC500.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $44		; F0 44 ; Branch if equal to $F0, $44 [Flow: branch]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($B7.b),Y		; B1 B7 ; Load accumulator ($B7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $4A.b,S		; 03 4A ; OR accumulator with stack relative $4A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($B7.b),Y		; B1 B7 ; Load accumulator ($B7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7EC301.l,X		; BF 01 C3 7E ; Load long $7EC301.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$7C.b		; 29 7C ; Logical AND #$7C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($B7.b),Y		; B1 B7 ; Load accumulator ($B7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$B0.b		; E0 B0 ; Compare #$B0.b with X register [Reads: X Index] [Flags: NCZ]
	ora ($90.b,X)		; 01 90 ; Logical OR ($90.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda #$D0.b		; A9 D0 ; Load #$D0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	asl $8A.b		; 06 8A ; Arithmetic shift left $8A.b [Reads: Direct Page] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: NCZ]
	ora ($D0.b,X)		; 01 D0 ; Logical OR ($D0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	stz $C260.w		; 9C 60 C2 ; Store zero to $C260.w
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	sty $AFE8.w		; 8C E8 AF ; Store Y register to $AFE8.w [Reads: Y Index]
	ora [$C0.b]		; 07 C0 ; OR accumulator with memory (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $10C9.w,X		; 7E C9 10 ; Rotate right $10C9.w,X [Reads: X Index] [Flags: NCZ]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $E8.b		; 02 E8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $B7.b		; 86 B7 ; Store X register to $B7.b [Reads: X Index]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $98C0.w,X		; BD C0 98 ; Load $98C0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $E880.w,X		; BD 80 E8 ; Load $E880.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $E884.w,X		; BD 84 E8 ; Load $E884.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $E888.w,X		; BD 88 E8 ; Load $E888.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldx #$40.b		; A2 40 ; Load #$40.b into X register [Writes: X Index] [Flags: NZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $EACE.w		; 20 CE EA ; Jump to subroutine at $EACE.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	cmp $7EC00B.l		; CF 0B C0 7E ; Compare accumulator (long) $7EC00B.l [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$C0.b		; 09 C0 ; Logical OR #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $00A9.w,X		; 7E A9 00 ; Rotate right $00A9.w,X [Reads: X Index] [Flags: NCZ]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$C0.b]		; 07 C0 ; OR accumulator with memory (long) [$C0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ror $20E2.w,X		; 7E E2 20 ; Rotate right $20E2.w,X [Reads: X Index] [Flags: NCZ]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7EC00B.l		; CF 0B C0 7E ; Compare accumulator (long) $7EC00B.l [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $DB		; F0 DB ; Branch if equal to $F0, $DB [Flow: branch]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $7EC500.l,X		; BF 00 C5 7E ; Load long $7EC500.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($B7.b),Y		; B1 B7 ; Load accumulator ($B7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $4A.b,S		; 03 4A ; OR accumulator with stack relative $4A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda ($B7.b),Y		; B1 B7 ; Load accumulator ($B7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $7EC301.l,X		; BF 01 C3 7E ; Load long $7EC301.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$7C.b		; 29 7C ; Logical AND #$7C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda ($B7.b),Y		; B1 B7 ; Load accumulator ($B7.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx $0E.b		; E4 0E ; Compare $0E.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $D0, $A8		; D0 A8 ; Branch if not equal to $D0, $A8 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC520.l		; 8F 20 C5 7E ; Store accumulator (long) $7EC520.l [Reads: Accumulator]
	sta $7EC522.l		; 8F 22 C5 7E ; Store accumulator (long) $7EC522.l [Reads: Accumulator]
	sta $7EC524.l		; 8F 24 C5 7E ; Store accumulator (long) $7EC524.l [Reads: Accumulator]
	sta $7EC526.l		; 8F 26 C5 7E ; Store accumulator (long) $7EC526.l [Reads: Accumulator]
	sta $7EC528.l		; 8F 28 C5 7E ; Store accumulator (long) $7EC528.l [Reads: Accumulator]
	sta $7EC52A.l		; 8F 2A C5 7E ; Store accumulator (long) $7EC52A.l [Reads: Accumulator]
	sta $7EC52C.l		; 8F 2C C5 7E ; Store accumulator (long) $7EC52C.l [Reads: Accumulator]
	sta $7EC52E.l		; 8F 2E C5 7E ; Store accumulator (long) $7EC52E.l [Reads: Accumulator]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$E88C.w		; A2 8C E8 ; Load #$E88C.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $B7.b		; 86 B7 ; Store X register to $B7.b [Reads: X Index]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0098C0.l,X		; BF C0 98 00 ; Load long $0098C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $E880.w,X		; BD 80 E8 ; Load $E880.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $E884.w,X		; BD 84 E8 ; Load $E884.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $E888.w,X		; BD 88 E8 ; Load $E888.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldx #$0020.w		; A2 20 00 ; Load #$0020.w into X register [Writes: X Index] [Flags: NZ]
	lda #$0030.w		; A9 30 00 ; Load #$0030.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $EACE.w		; 20 CE EA ; Jump to subroutine at $EACE.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	cmp #$001F.w		; C9 1F 00 ; Compare #$001F.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$0002.w		; 49 02 00 ; Exclusive OR #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	inc $27.b		; E6 27 ; Increment $27.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1D.b		; 85 1D ; Store accumulator to $1D.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC6A0.l,X		; 9F A0 C6 7E ; Store accumulator (long,X) $7EC6A0.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EC4A0.l,X		; BF A0 C4 7E ; Load long $7EC4A0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC6A0.l,X		; 9F A0 C6 7E ; Store accumulator (long,X) $7EC6A0.l,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	stz $1D.b		; 64 1D ; Store zero to $1D.b
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00EC17.l		; 22 17 EC 00 ; Jump to subroutine long $00EC17.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F5		; F0 F5 ; Branch if equal to $F0, $F5 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$E88C.w		; A2 8C E8 ; Load #$E88C.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $B7.b		; 86 B7 ; Store X register to $B7.b [Reads: X Index]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0098C0.l,X		; BF C0 98 00 ; Load long $0098C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $E880.w,X		; BD 80 E8 ; Load $E880.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $E884.w,X		; BD 84 E8 ; Load $E884.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $E888.w,X		; BD 88 E8 ; Load $E888.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldx #$01A0.w		; A2 A0 01 ; Load #$01A0.w into X register [Writes: X Index] [Flags: NZ]
	lda #$01B0.w		; A9 B0 01 ; Load #$01B0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $EB98.w		; 4C 98 EB ; Jump to $EB98.w [Flow: jump]
.ACCU 16
	rep #$20		; C2 20
	ldx #$BF0E.w		; A2 0E BF ; Load #$BF0E.w into X register [Writes: X Index] [Flags: NZ]
	.db $80, $C3		; 80 C3 ; Branch always to $80, $C3 [Flow: branch]
	ror $809F.w,X		; 7E 9F 80 ; Rotate right $809F.w,X [Reads: X Index] [Flags: NCZ]
	cmp $7E.b		; C5 7E ; Compare $7E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F4		; 10 F4 ; Branch if plus to $10, $F4 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $1D.b		; 64 1D ; Store zero to $1D.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $D7		; F0 D7 ; Branch if equal to $F0, $D7 [Flow: branch]
	jsl $00EC87.l		; 22 87 EC 00 ; Jump to subroutine long $00EC87.l [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $EF		; F0 EF ; Branch if equal to $F0, $EF [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$E88C.w		; A2 8C E8 ; Load #$E88C.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0010.w		; C9 10 00 ; Compare #$0010.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $B7.b		; 86 B7 ; Store X register to $B7.b [Reads: X Index]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0098C0.l,X		; BF C0 98 00 ; Load long $0098C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $E880.w,X		; BD 80 E8 ; Load $E880.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $E884.w,X		; BD 84 E8 ; Load $E884.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $E888.w,X		; BD 88 E8 ; Load $E888.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldx #$0080.w		; A2 80 00 ; Load #$0080.w into X register [Writes: X Index] [Flags: NZ]
	lda #$0090.w		; A9 90 00 ; Load #$0090.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jmp $EB98.w		; 4C 98 EB ; Jump to $EB98.w [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($DA.b,X)		; 01 DA ; Logical OR ($DA.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $7EC019.l,X		; BF 19 C0 7E ; Load long $7EC019.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda $7EC01F.l,X		; BF 1F C0 7E ; Load long $7EC01F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	lda $00ECC4.l,X		; BF C4 EC 00 ; Load long $00ECC4.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	jsr $ED19.w		; 20 19 ED ; Jump to subroutine at $ED19.w [Writes: Stack Pointer] [Flow: call]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $ED19.w		; 20 19 ED ; Jump to subroutine at $ED19.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC019.l,X		; 9F 19 C0 7E ; Store accumulator (long,X) $7EC019.l,X [Reads: Accumulator, X Index]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC01F.l,X		; 9F 1F C0 7E ; Store accumulator (long,X) $7EC01F.l,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$8C.b		; A0 8C ; Load #$8C.b into Y register [Writes: Y Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $90.b		; 00 90 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $C8.b		; 02 C8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $B7.b		; 84 B7 ; Store Y register to $B7.b [Reads: Y Index]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0098C0.l,X		; BF C0 98 00 ; Load long $0098C0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $E880.w,X		; BD 80 E8 ; Load $E880.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $E884.w,X		; BD 84 E8 ; Load $E884.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $E888.w,X		; BD 88 E8 ; Load $E888.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $EACE.w		; 20 CE EA ; Jump to subroutine at $EACE.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	cmp #$1F.b		; C9 1F ; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($A9.b)		; 12 A9 ; OR accumulator with memory (indirect) ($A9.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$C0.b		; 09 C0 ; Logical OR #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $C260.w,X		; 7E 60 C2 ; Rotate right $C260.w,X [Reads: X Index] [Flags: NCZ]
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $C0A2.w		; ED A2 C0 ; Subtract $C0A2.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	lda #$00C0.w		; A9 C0 00 ; Load #$00C0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $EDCA.w		; 20 CA ED ; Jump to subroutine at $EDCA.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	lda #$00C0.w		; A9 C0 00 ; Load #$00C0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $EDCA.w		; 20 CA ED ; Jump to subroutine at $EDCA.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$00B0.w		; A2 B0 00 ; Load #$00B0.w into X register [Writes: X Index] [Flags: NZ]
	lda #$00C0.w		; A9 C0 00 ; Load #$00C0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $EDCA.w		; 20 CA ED ; Jump to subroutine at $EDCA.w [Writes: Stack Pointer] [Flow: call]
	ldx #$00D0.w		; A2 D0 00 ; Load #$00D0.w into X register [Writes: X Index] [Flags: NZ]
	lda #$00E0.w		; A9 E0 00 ; Load #$00E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $EE21.w		; 20 21 EE ; Jump to subroutine at $EE21.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $7EC500.l,X		; BF 00 C5 7E ; Load long $7EC500.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $85.b,S		; 03 85 ; OR accumulator with stack relative $85.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp ($0C85.w,X)		; 7C 85 0C ; Jump indirect indexed to ($0C85.w,X) [Reads: X Index] [Flow: jump]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$20.b		; 69 20 ; Add #$20.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp ($0CC5.w,X)		; 7C C5 0C ; Jump indirect indexed to ($0CC5.w,X) [Reads: X Index] [Flow: jump]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$00.b		; 69 00 ; Add #$00.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tsb $A8.b		; 04 A8 ; Test and set bits $A8.b [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx $0E.b		; E4 0E ; Compare $0E.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $D0, $AC		; D0 AC ; Branch if not equal to $D0, $AC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $7EC500.l,X		; BF 00 C5 7E ; Load long $7EC500.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $85.b,S		; 03 85 ; OR accumulator with stack relative $85.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp ($0C85.w,X)		; 7C 85 0C ; Jump indirect indexed to ($0C85.w,X) [Reads: X Index] [Flow: jump]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$01.b		; E9 01 ; Subtract #$01.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $C5.b,S		; 03 C5 ; OR accumulator with stack relative $C5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$20.b		; E9 20 ; Subtract #$20.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp ($0CC5.w,X)		; 7C C5 0C ; Jump indirect indexed to ($0CC5.w,X) [Reads: X Index] [Flow: jump]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tsb $A8.b		; 04 A8 ; Test and set bits $A8.b [Reads: Accumulator] [Flags: Z]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx $0E.b		; E4 0E ; Compare $0E.b with X register [Reads: Direct Page, X Index] [Flags: NCZ]
	.db $D0, $AC		; D0 AC ; Branch if not equal to $D0, $AC [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda #$7FFF.w		; A9 FF 7F ; Load #$7FFF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC300.l,X		; 9F 00 C3 7E ; Store accumulator (long,X) $7EC300.l,X [Reads: Accumulator, X Index]
	sta $7EC340.l,X		; 9F 40 C3 7E ; Store accumulator (long,X) $7EC340.l,X [Reads: Accumulator, X Index]
	sta $7EC380.l,X		; 9F 80 C3 7E ; Store accumulator (long,X) $7EC380.l,X [Reads: Accumulator, X Index]
	sta $7EC3C0.l,X		; 9F C0 C3 7E ; Store accumulator (long,X) $7EC3C0.l,X [Reads: Accumulator, X Index]
	sta $7EC400.l,X		; 9F 00 C4 7E ; Store accumulator (long,X) $7EC400.l,X [Reads: Accumulator, X Index]
	sta $7EC440.l,X		; 9F 40 C4 7E ; Store accumulator (long,X) $7EC440.l,X [Reads: Accumulator, X Index]
	sta $7EC480.l,X		; 9F 80 C4 7E ; Store accumulator (long,X) $7EC480.l,X [Reads: Accumulator, X Index]
	sta $7EC4C0.l,X		; 9F C0 C4 7E ; Store accumulator (long,X) $7EC4C0.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$40.b		; E0 40 ; Compare #$40.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $DA		; D0 DA ; Branch if not equal to $D0, $DA [Flow: branch]
	lda $7EC500.l		; AF 00 C5 7E ; Load long $7EC500.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC540.l		; 8F 40 C5 7E ; Store accumulator (long) $7EC540.l [Reads: Accumulator]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$001B.w		; C9 1B 00 ; Compare #$001B.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC300.l		; 8F 00 C3 7E ; Store accumulator (long) $7EC300.l [Reads: Accumulator]
	sta $7EC340.l		; 8F 40 C3 7E ; Store accumulator (long) $7EC340.l [Reads: Accumulator]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	sta $7EC540.l		; 8F 40 C5 7E ; Store accumulator (long) $7EC540.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06BB.w		; 8D BB 06 ; Store accumulator to $06BB.w [Reads: Accumulator]
	stz $06BA.w		; 9C BA 06 ; Store zero to $06BA.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00D864.l		; 22 64 D8 00 ; Jump to subroutine long $00D864.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $06BB.w		; CE BB 06 ; Decrement $06BB.w [Flags: NZ]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06BB.w		; 8D BB 06 ; Store accumulator to $06BB.w [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $E8		; F0 E8 ; Branch if equal to $F0, $E8 [Flow: branch]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	lda #$01B0.w		; A9 B0 01 ; Load #$01B0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $EDCA.w		; 20 CA ED ; Jump to subroutine at $EDCA.w [Writes: Stack Pointer] [Flow: call]
	ldx #$01C0.w		; A2 C0 01 ; Load #$01C0.w into X register [Writes: X Index] [Flags: NZ]
	lda #$01E0.w		; A9 E0 01 ; Load #$01E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $EDCA.w		; 20 CA ED ; Jump to subroutine at $EDCA.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	lda #$01B0.w		; A9 B0 01 ; Load #$01B0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $EE21.w		; 20 21 EE ; Jump to subroutine at $EE21.w [Writes: Stack Pointer] [Flow: call]
	ldx #$01C0.w		; A2 C0 01 ; Load #$01C0.w into X register [Writes: X Index] [Flags: NZ]
	lda #$01E0.w		; A9 E0 01 ; Load #$01E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $EE21.w		; 20 21 EE ; Jump to subroutine at $EE21.w [Writes: Stack Pointer] [Flow: call]
	lda $7EC540.l		; AF 40 C5 7E ; Load long $7EC540.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $21		; D0 21 ; Branch if not equal to $D0, $21 [Flow: branch]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	cmp #$0042.w		; C9 42 00 ; Compare #$0042.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06BB.w		; 8D BB 06 ; Store accumulator to $06BB.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	cmp #$1F.b		; C9 1F ; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $09AF.w		; ED AF 09 ; Subtract $09AF.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cpy #$7E.b		; C0 7E ; Compare #$7E.b with Y register [Reads: Y Index] [Flags: NCZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $8F.b		; 00 8F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$C0.b		; 09 C0 ; Logical OR #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ror $30E2.w,X		; 7E E2 30 ; Rotate right $30E2.w,X [Reads: X Index] [Flags: NCZ]
	lda $10.b		; [PATTERN: Memory clearing operation] A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$15.b		; C9 15 ; Compare #$15.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	stz HDMAEN.w		; 9C 0C 42 ; Store zero to HDMAEN.w
	stz $9B.b		; 64 9B ; Store zero to $9B.b
.ACCU 16
	rep #$20		; C2 20
	ldx #$3E.b		; A2 3E ; Load #$3E.b into X register [Writes: X Index] [Flags: NZ]
	lda #$0778.w		; A9 78 07 ; Load #$0778.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $00FE3E.l		; 22 3E FE 00 ; Jump to subroutine long $00FE3E.l [Writes: Stack Pointer] [Flow: call]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	lda #$0200.w		; A9 00 02 ; Load #$0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $EDCA.w		; 20 CA ED ; Jump to subroutine at $EDCA.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $90		; 80 90 ; Branch always to $80, $90 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $5F		; 90 5F ; Branch if carry clear to $90, $5F [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EC500.l,X		; BF 00 C5 7E ; Load long $7EC500.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$7C00.w		; 29 00 7C ; Logical AND #$7C00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$7C00.w		; C9 00 7C ; Compare #$7C00.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0400.w		; 69 00 04 ; Add #$0400.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0200.w		; E0 00 02 ; Compare #$0200.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $E1		; D0 E1 ; Branch if not equal to $D0, $E1 [Flow: branch]
	lda $7EC540.l		; AF 40 C5 7E ; Load long $7EC540.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	cmp #$1F.b		; C9 1F ; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	lda #$F0.b		; A9 F0 ; Load #$F0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $94.b		; 85 94 ; Store accumulator to $94.b [Reads: Accumulator]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $95.b		; 85 95 ; Store accumulator to $95.b [Reads: Accumulator]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EC500.l,X		; BF 00 C5 7E ; Load long $7EC500.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$03E0.w		; 29 E0 03 ; Logical AND #$03E0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0020.w		; E9 20 00 ; Subtract #$0020.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0001.w		; E9 01 00 ; Subtract #$0001.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0200.w		; E0 00 02 ; Compare #$0200.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $D8		; D0 D8 ; Branch if not equal to $D0, $D8 [Flow: branch]
	lda $7EC540.l		; AF 40 C5 7E ; Load long $7EC540.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	jmp $EFE0.w		; 4C E0 EF ; Jump to $EFE0.w [Flow: jump]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $67		; 90 67 ; Branch if carry clear to $90, $67 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$7C00.w		; 29 00 7C ; Logical AND #$7C00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EC500.l,X		; BF 00 C5 7E ; Load long $7EC500.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$7C00.w		; 29 00 7C ; Logical AND #$7C00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0400.w		; E9 00 04 ; Subtract #$0400.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0200.w		; E0 00 02 ; Compare #$0200.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $D9		; D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	lda $7EC540.l		; AF 40 C5 7E ; Load long $7EC540.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$10.b		; E9 10 ; Subtract #$10.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	cmp #$1F.b		; C9 1F ; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	sta $7EC011.l		; 8F 11 C0 7E ; Store accumulator (long) $7EC011.l [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $94.b		; 85 94 ; Store accumulator to $94.b [Reads: Accumulator]
	lda $7EC011.l		; AF 11 C0 7E ; Load long $7EC011.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $95.b		; 85 95 ; Store accumulator to $95.b [Reads: Accumulator]
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$03E0.w		; 29 E0 03 ; Logical AND #$03E0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EC300.l,X		; BF 00 C3 7E ; Load long $7EC300.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $7EC500.l,X		; BF 00 C5 7E ; Load long $7EC500.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$03E0.w		; 29 E0 03 ; Logical AND #$03E0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0020.w		; 69 20 00 ; Add #$0020.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $02.b		; C5 02 ; Compare $02.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0001.w		; 69 01 00 ; Add #$0001.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l,X		; 9F 00 C5 7E ; Store accumulator (long,X) $7EC500.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0200.w		; E0 00 02 ; Compare #$0200.w with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $C2		; D0 C2 ; Branch if not equal to $D0, $C2 [Flow: branch]
	lda $7EC540.l		; AF 40 C5 7E ; Load long $7EC540.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC500.l		; 8F 00 C5 7E ; Store accumulator (long) $7EC500.l [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	cmp #$1F.b		; C9 1F ; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $7EC009.l		; AF 09 C0 7E ; Load long $7EC009.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $F2		; F0 F2 ; Branch if equal to $F0, $F2 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	lda #$0100.w		; A9 00 01 ; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $EE21.w		; 20 21 EE ; Jump to subroutine at $EE21.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	cmp #$0020.w		; C9 20 00 ; Compare #$0020.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	stz $1D.b		; 64 1D ; Store zero to $1D.b
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx #$0040.w		; A2 40 00 ; Load #$0040.w into X register [Writes: X Index] [Flags: NZ]
	lda #$0100.w		; A9 00 01 ; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $EDCA.w		; 20 CA ED ; Jump to subroutine at $EDCA.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	.db $80, $E1		; 80 E1 ; Branch always to $80, $E1 [Flow: branch]
	lda $04BE.w		; AD BE 04 ; Load $04BE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	ldx #$BF00.w		; A2 00 BF ; Load #$BF00.w into X register [Writes: X Index] [Flags: NZ]
	.db $82, $C5, $7E		; 82 C5 7E ; Branch always long to $82, $C5, $7E [Flow: branch]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$001F.w		; C9 1F 00 ; Compare #$001F.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0001.w		; 69 01 00 ; Add #$0001.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EC582.l,X		; BF 82 C5 7E ; Load long $7EC582.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FFE0.w		; 29 E0 FF ; Logical AND #$FFE0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC582.l,X		; 9F 82 C5 7E ; Store accumulator (long,X) $7EC582.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$D00E.w		; E0 0E D0 ; Compare #$D00E.w with X register [Reads: X Index] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
.ACCU 8
	sep #$20		; E2 20
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	inc $04C0.w		; EE C0 04 ; Increment $04C0.w [Flags: NZ]
	lda $04C0.w		; AD C0 04 ; Load $04C0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04BE.w		; [PATTERN: Memory clearing operation] 8D BE 04 ; Store accumulator to $04BE.w [Reads: Accumulator]
	dec $04BE.w		; CE BE 04 ; Decrement $04BE.w [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $04BE.w		; 9C BE 04 ; Store zero to $04BE.w
	stz $04C0.w		; 9C C0 04 ; Store zero to $04C0.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $04BE.w		; AD BE 04 ; Load $04BE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	ldx #$BF00.w		; A2 00 BF ; Load #$BF00.w into X register [Writes: X Index] [Flags: NZ]
	.db $82, $C3, $7E		; 82 C3 7E ; Branch always long to $82, $C3, $7E [Flow: branch]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $7EC582.l,X		; BF 82 C5 7E ; Load long $7EC582.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$001F.w		; 29 1F 00 ; Logical AND #$001F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0C.b		; C5 0C ; Compare $0C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0001.w		; E9 01 00 ; Subtract #$0001.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EC582.l,X		; BF 82 C5 7E ; Load long $7EC582.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FFE0.w		; 29 E0 FF ; Logical AND #$FFE0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC582.l,X		; 9F 82 C5 7E ; Store accumulator (long,X) $7EC582.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$D00E.w		; E0 0E D0 ; Compare #$D00E.w with X register [Reads: X Index] [Flags: NCZ]
	cmp ($80.b,S),Y		; D3 80 ; Compare accumulator (stack relative indirect indexed) ($80.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $04BF.w		; AD BF 04 ; Load $04BF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	ldx #$BF00.w		; A2 00 BF ; Load #$BF00.w into X register [Writes: X Index] [Flags: NZ]
	.db $82, $C5, $7E		; 82 C5 7E ; Branch always long to $82, $C5, $7E [Flow: branch]
	and #$7C00.w		; 29 00 7C ; Logical AND #$7C00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$7C00.w		; C9 00 7C ; Compare #$7C00.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0400.w		; 69 00 04 ; Add #$0400.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EC582.l,X		; BF 82 C5 7E ; Load long $7EC582.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$83FF.w		; 29 FF 83 ; Logical AND #$83FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC582.l,X		; 9F 82 C5 7E ; Store accumulator (long,X) $7EC582.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$D00E.w		; E0 0E D0 ; Compare #$D00E.w with X register [Reads: X Index] [Flags: NCZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
.ACCU 8
	sep #$20		; E2 20
	inc $15.b		; E6 15 ; Increment $15.b [Reads: Direct Page] [Flags: NZ]
	inc $04C1.w		; EE C1 04 ; Increment $04C1.w [Flags: NZ]
	lda $04C1.w		; AD C1 04 ; Load $04C1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04BF.w		; [PATTERN: Memory clearing operation] 8D BF 04 ; Store accumulator to $04BF.w [Reads: Accumulator]
	dec $04BF.w		; CE BF 04 ; Decrement $04BF.w [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $04BF.w		; 9C BF 04 ; Store zero to $04BF.w
	stz $04C1.w		; 9C C1 04 ; Store zero to $04C1.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $04BF.w		; AD BF 04 ; Load $04BF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	ldx #$BF00.w		; A2 00 BF ; Load #$BF00.w into X register [Writes: X Index] [Flags: NZ]
	.db $82, $C3, $7E		; 82 C3 7E ; Branch always long to $82, $C3, $7E [Flow: branch]
	and #$7C00.w		; 29 00 7C ; Logical AND #$7C00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $7EC582.l,X		; BF 82 C5 7E ; Load long $7EC582.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$7C00.w		; 29 00 7C ; Logical AND #$7C00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $0C.b		; C5 0C ; Compare $0C.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0400.w		; E9 00 04 ; Subtract #$0400.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EC582.l,X		; BF 82 C5 7E ; Load long $7EC582.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$83FF.w		; 29 FF 83 ; Logical AND #$83FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC582.l,X		; 9F 82 C5 7E ; Store accumulator (long,X) $7EC582.l,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$D00E.w		; E0 0E D0 ; Compare #$D00E.w with X register [Reads: X Index] [Flags: NCZ]
	cmp ($80.b,S),Y		; D3 80 ; Compare accumulator (stack relative indirect indexed) ($80.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.INDEX 16
	rep #$10		; C2 10
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$007E.w		; A2 7E 00 ; Load #$007E.w into X register [Writes: X Index] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
.INDEX 16
	rep #$10		; C2 10
	ldy #$0002.w		; A0 02 00 ; Load #$0002.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	sty $067E.w		; 8C 7E 06 ; Store Y register to $067E.w [Reads: Y Index]
	stx $067C.w		; 8E 7C 06 ; Store X register to $067C.w [Reads: X Index]
	stz HDMAEN.w		; 9C 0C 42 ; Store zero to HDMAEN.w
	ldx #$2641.w		; A2 41 26 ; Load #$2641.w into X register [Writes: X Index] [Flags: NZ]
	stx DMAP6.w		; 8E 60 43 ; Store X register to DMAP6.w [Reads: X Index]
	stx DMAP7.w		; 8E 70 43 ; Store X register to DMAP7.w [Reads: X Index]
	ldx #$F2FB.w		; A2 FB F2 ; Load #$F2FB.w into X register [Writes: X Index] [Flags: NZ]
	stx DMASRC6L.w		; 8E 62 43 ; Store X register to DMASRC6L.w [Reads: X Index]
	stx DMASRC7L.w		; 8E 72 43 ; Store X register to DMASRC7L.w [Reads: X Index]
	lda #$8D00.w		; A9 00 8D ; Load #$8D00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	stz $43.b		; 64 43 ; Store zero to $43.b
	sta DMASRC7B.w		; 8D 74 43 ; Store accumulator to DMASRC7B.w [Reads: Accumulator]
	lda #$8D00.w		; A9 00 8D ; Load #$8D00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	adc [$43.b]		; 67 43 ; Add with carry (long) [$43.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta DMALEN7B.w		; 8D 77 43 ; Store accumulator to DMALEN7B.w [Reads: Accumulator]
	lda #$8533.w		; A9 33 85 ; Load #$8533.w into accumulator [Writes: Accumulator] [Flags: NZ]
	stx $A9.b,Y		; 96 A9 ; Store X register $A9.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	ora $85.b,S		; 03 85 ; OR accumulator with stack relative $85.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sta [$A9.b],Y		; 97 A9 ; Store accumulator (long indexed) [$A9.b],Y [Reads: Direct Page, Y Index, Accumulator]
	and ($85.b,S),Y		; 33 85 ; AND accumulator (stack relative indirect indexed) ($85.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1E.b		; 85 1E ; Store accumulator to $1E.b [Reads: Accumulator]
	lda $1D.b		; A5 1D ; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1F.b		; 85 1F ; Store accumulator to $1F.b [Reads: Accumulator]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda #$8520.w		; [PATTERN: Memory clearing operation] A9 20 85 ; Load #$8520.w into accumulator [Writes: Accumulator] [Flags: NZ]
	stz $40A9.w		; 9C A9 40 ; Store zero to $40A9.w
	sta $9D.b		; 85 9D ; Store accumulator to $9D.b [Reads: Accumulator]
	lda #$8580.w		; A9 80 85 ; Load #$8580.w into accumulator [Writes: Accumulator] [Flags: NZ]
	stz $10E2.w,X		; 9E E2 10 ; Store zero to $10E2.w,X [Reads: X Index]
	jsl $00F312.l		; 22 12 F3 00 ; Jump to subroutine long $00F312.l [Writes: Stack Pointer] [Flow: call]
	lda #$8580.w		; A9 80 85 ; Load #$8580.w into accumulator [Writes: Accumulator] [Flags: NZ]
	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda #$850F.w		; A9 0F 85 ; Load #$850F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($6B.b,S),Y		; 13 6B ; OR accumulator (stack relative indirect indexed) ($6B.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $1B.b		; 00 1B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	brk $F9.b		; 00 F9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $070007.l,X		; FF 07 00 07 ; Subtract with carry (long,X) $070007.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $23.b		; 00 23 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $7E.b		; 00 7E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $067C.w		; ED 7C 06 ; Subtract $067C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0674.w		; 8D 74 06 ; Store accumulator to $0674.w [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $067C.w		; 6D 7C 06 ; Add $067C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0676.w		; 8D 76 06 ; Store accumulator to $0676.w [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0670.w		; 8D 70 06 ; Store accumulator to $0670.w [Reads: Accumulator]
	lda $067C.w		; AD 7C 06 ; Load $067C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $067A.w		; 8D 7A 06 ; Store accumulator to $067A.w [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	cmp #$00E0.w		; C9 E0 00 ; Compare #$00E0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$00E0.w		; A9 E0 00 ; Load #$00E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0E.b		; E5 0E ; Subtract $0E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0A.b		; E5 0A ; Subtract $0A.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0676.w		; CD 76 06 ; Compare $0676.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	lda $067A.w		; AD 7A 06 ; Load $067A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $067A.w		; CE 7A 06 ; Decrement $067A.w [Flags: NZ]
	jsr $F4CC.w		; 20 CC F4 ; Jump to subroutine at $F4CC.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$01C0.w		; C9 C0 01 ; Compare #$01C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $07		; B0 07 ; Branch if carry set to $B0, $07 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F7000.l,X		; 9F 00 70 7F ; Store accumulator (long,X) $7F7000.l,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$01C0.w		; C9 C0 01 ; Compare #$01C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $07		; B0 07 ; Branch if carry set to $B0, $07 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7F7000.l,X		; 9F 00 70 7F ; Store accumulator (long,X) $7F7000.l,X [Reads: Accumulator, X Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $04.b		; C5 04 ; Compare $04.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: NZ]
	jmp $F361.w		; 4C 61 F3 ; Jump to $F361.w [Flow: jump]
	lda SLHV.w		; AD 37 21 ; Load SLHV.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda STAT78.w		; AD 3F 21 ; Load STAT78.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lda OPVCT.w		; AD 3D 21 ; Load OPVCT.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00C0.w		; C9 C0 00 ; Compare #$00C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $EF		; 90 EF ; Branch if carry clear to $90, $EF [Flow: branch]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	lda $7F7000.l,X		; BF 00 70 7F ; Load long $7F7000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,X		; 9D 00 1B ; Store accumulator to $1B00.w,X [Reads: Accumulator, X Index]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$01C0.w		; E0 C0 01 ; Compare #$01C0.w with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $F2		; 90 F2 ; Branch if carry clear to $90, $F2 [Flow: branch]
	ldx $067E.w		; AE 7E 06 ; Load $067E.w into X register [Writes: X Index] [Flags: NZ]
	lda $067C.w		; AD 7C 06 ; Load $067C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $F302.w,X		; 7D 02 F3 ; Add $F302.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $067C.w		; 8D 7C 06 ; Store accumulator to $067C.w [Reads: Accumulator]
	cmp $F30A.w,X		; DD 0A F3 ; Compare accumulator $F30A.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $4C		; D0 4C ; Branch if not equal to $D0, $4C [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $067E.w		; AD 7E 06 ; Load $067E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $13.b		; 85 13 ; Store accumulator to $13.b [Reads: Accumulator]
	sta INIDSP.w		; [PATTERN: Memory clearing operation] 8D 00 21 ; Store accumulator to INIDSP.w [Reads: Accumulator]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $00F427.l		; 22 27 F4 00 ; Jump to subroutine long $00F427.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $11.b		; 64 11 ; Store zero to $11.b
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	ldx $8A.b		; A6 8A ; Load $8A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7F5B00.l,X		; BF 00 5B 7F ; Load long $7F5B00.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda $0132.w		; AD 32 01 ; Load $0132.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $09C44E.l		; 22 4E C4 09 ; Jump to subroutine long $09C44E.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$003E.w		; A2 3E 00 ; Load #$003E.w into X register [Writes: X Index] [Flags: NZ]
	lda #$FF00.w		; A9 00 FF ; Load #$FF00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,X		; 9D 00 1B ; Store accumulator to $1B00.w,X [Reads: Accumulator, X Index]
	sta $1B40.w,X		; 9D 40 1B ; Store accumulator to $1B40.w,X [Reads: Accumulator, X Index]
	sta $1B80.w,X		; 9D 80 1B ; Store accumulator to $1B80.w,X [Reads: Accumulator, X Index]
	sta $1BC0.w,X		; 9D C0 1B ; Store accumulator to $1BC0.w,X [Reads: Accumulator, X Index]
	sta $1C00.w,X		; 9D 00 1C ; Store accumulator to $1C00.w,X [Reads: Accumulator, X Index]
	sta $1C40.w,X		; 9D 40 1C ; Store accumulator to $1C40.w,X [Reads: Accumulator, X Index]
	sta $1C80.w,X		; 9D 80 1C ; Store accumulator to $1C80.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $E7		; 10 E7 ; Branch if plus to $10, $E7 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FEFE.w,X		; FE FE FE ; Increment memory $FEFE.w,X [Reads: X Index] [Flags: NZ]
	inc $FDFD.w,X		; FE FD FD ; Increment memory $FDFD.w,X [Reads: X Index] [Flags: NZ]
	sbc $FCFD.w,X		; FD FD FC ; Subtract with carry $FCFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($FBFC.w,X)		; FC FC FB ; Jump to subroutine indirect indexed ($FBFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $F8F9.w,Y		; F9 F9 F8 ; Subtract with carry $F8F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $F5.b,X		; F5 F5 ; Subtract $F5.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	pea $F3F3.w		; F4 F3 F3 ; Push absolute address $F3F3.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc ($F1.b)		; F2 F1 ; Subtract with carry (indirect) ($F1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F0.b),Y		; F1 F0 ; Subtract with carry ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EDEEEE.l		; EF EE EE ED ; Subtract with carry (long) $EDEEEE.l [Writes: Accumulator] [Flags: NCVZ]
	cpx $EAEB.w		; EC EB EA ; Compare $EAEB.w with X register [Reads: X Index] [Flags: NCZ]
	sbc #$E9.b		; E9 E9 ; Subtract #$E9.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc [$E6.b]		; E7 E6 ; Subtract with carry (long) [$E6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E4.b		; E5 E4 ; Subtract $E4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E2.b,S		; E3 E2 ; Subtract stack-relative $E2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc ($DF.b,X)		; E1 DF ; Subtract with carry ($DF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $DCDD.w,X		; DE DD DC ; Decrement memory $DCDD.w,X [Reads: X Index] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp [$D6.b],Y		; D7 D6 ; Compare accumulator (long indexed) [$D6.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp $D3.b,X		; D5 D3 ; Compare accumulator $D3.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp ($D0.b)		; D2 D0 ; Compare accumulator (indirect) ($D0.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $CACCCD.l		; CF CD CC CA ; Compare accumulator (long) $CACCCD.l [Reads: Accumulator] [Flags: NCZ]
	cmp #$C7.b		; C9 C7 ; Compare #$C7.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	dec $C4.b		; C6 C4 ; Decrement $C4.b [Reads: Direct Page] [Flags: NZ]
	rep #$C1		; C2 C1 ; Reset processor status bits #$C1 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	lda $B9BBBD.l,X		; BF BD BB B9 ; Load long $B9BBBD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B6.b],Y		; B7 B6 ; Load accumulator (long indexed) [$B6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B1.b,X		; B4 B1 ; Load Y register $B1.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $A9ABAD.l		; AF AD AB A9 ; Load long $A9ABAD.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$A4.b]		; A7 A4 ; Load accumulator (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx #$9F.b		; A2 9F ; Load #$9F.b into X register [Writes: X Index] [Flags: NZ]
	sta $979A.w,X		; 9D 9A 97 ; Store accumulator to $979A.w,X [Reads: Accumulator, X Index]
	sta $92.b,X		; 95 92 ; Store accumulator to $92.b,X [Reads: Accumulator, X Index]
	sta $86898C.l		; 8F 8C 89 86 ; Store accumulator (long) $86898C.l [Reads: Accumulator]
	.db $82, $7F, $7B		; 82 7F 7B ; Branch always long to $82, $7F, $7B [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	stz $70.b,X		; 74 70 ; Store zero to $70.b,X [Reads: X Index]
	jmp ($6367.w)		; 6C 67 63 ; Jump indirect to ($6367.w) [Flow: jump]
	lsr $5359.w,X		; 5E 59 53 ; Logical shift right $5359.w,X [Reads: X Index] [Flags: NCZ]
	eor $3F46.w		; 4D 46 3F ; Exclusive OR $3F46.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and [$2D.b],Y		; 37 2D ; AND accumulator with memory (long indexed) [$2D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $30E200.l,X		; 1F 00 E2 30 ; Logical OR long $30E200.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta WRDIVH.w		; 8D 05 42 ; Store accumulator to WRDIVH.w [Reads: Accumulator]
	stz WRDIVL.w		; 9C 04 42 ; Store zero to WRDIVL.w
	lda $067C.w		; AD 7C 06 ; Load $067C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta WRDIVB.w		; 8D 06 42 ; Store accumulator to WRDIVB.w [Reads: Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
.ACCU 16
	rep #$20		; C2 20
	lda RDDIVL.w		; AD 14 42 ; Load RDDIVL.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $F44B.w,X		; BC 4B F4 ; Load Y register $F44B.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sty $0A.b		; 84 0A ; Store Y register to $0A.b [Reads: Y Index]
	sty WRMPYA.w		; 8C 02 42 ; Store Y register to WRMPYA.w [Reads: Y Index]
	lda $067C.w		; AD 7C 06 ; Load $067C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta WRMPYB.w		; [PATTERN: Memory clearing operation] 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	stz $01.b		; 64 01 ; Store zero to $01.b
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0670.w		; 6D 70 06 ; Add $0670.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0670.w		; AD 70 06 ; Load $0670.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	stz $00.b		; 64 00 ; Store zero to $00.b
	.db $30, $0A		; 30 0A ; Branch if minus to $30, $0A [Flow: branch]
	bit #$FF00.w		; 89 00 FF ; Test bits #$FF00.w with accumulator [Reads: Accumulator] [Flags: Z]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	bit #$FF00.w		; 89 00 FF ; Test bits #$FF00.w with accumulator [Reads: Accumulator] [Flags: Z]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $00.b,X		; 34 00 ; Test bits $00.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	inc $38FF.w,X		; FE FF 38 ; Increment memory $38FF.w,X [Reads: X Index] [Flags: NZ]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $52.b		; 00 52 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $800080.l,X		; FF 80 00 80 ; Subtract with carry (long,X) $800080.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($A0.b,X)		; 01 A0 ; Logical OR ($A0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $A0.b		; 00 A0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $6B.b		; 00 6B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0458.w		; AD 58 04 ; Load $0458.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $FA		; F0 FA ; Branch if equal to $F0, $FA [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$F014.w		; C9 14 F0 ; Compare #$F014.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	pea $30C2.w		; F4 C2 30 ; Push absolute address $30C2.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	and #$00FE.w		; 29 FE 00 ; Logical AND #$00FE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0004.w		; C9 04 00 ; Compare #$0004.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $F6		; 90 F6 ; Branch if carry clear to $90, $F6 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$0004.w		; E0 04 00 ; Compare #$0004.w with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $49		; B0 49 ; Branch if carry set to $B0, $49 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0077.w		; E9 77 00 ; Subtract #$0077.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00F53E.l,X		; 7F 3E F5 00 ; Add long $00F53E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0058.w		; E9 58 00 ; Subtract #$0058.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00F546.l,X		; 7F 46 F5 00 ; Add long $00F546.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00F54E.l,X		; 7F 4E F5 00 ; Add long $00F54E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00F556.l,X		; 7F 56 F5 00 ; Add long $00F556.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $00F55E.l,X		; DF 5E F5 00 ; Compare accumulator (long,X) $00F55E.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda $00F55E.l,X		; BF 5E F5 00 ; Load long $00F55E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00F556.l,X		; FF 56 F5 00 ; Subtract with carry (long,X) $00F556.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$72.b		; E9 72 ; Subtract #$72.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00F546.l,X		; 7F 46 F5 00 ; Add long $00F546.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$58.b		; E9 58 ; Subtract #$58.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
.ACCU 8
.INDEX 8
	sep #$38		; E2 38
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00F53E.l,X		; 7F 3E F5 00 ; Add long $00F53E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00F54E.l,X		; 7F 4E F5 00 ; Add long $00F54E.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00F556.l,X		; 7F 56 F5 00 ; Add long $00F556.l,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $DF.b		; 00 DF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lsr $00F5.w,X		; 5E F5 00 ; Logical shift right $00F5.w,X [Reads: X Index] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda $00F55E.l,X		; BF 5E F5 00 ; Load long $00F55E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00F556.l,X		; FF 56 F5 00 ; Subtract with carry (long,X) $00F556.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $0682.w		; AD 82 06 ; Load $0682.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0684.w		; ED 84 06 ; Subtract $0684.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0674.w		; 8D 74 06 ; Store accumulator to $0674.w [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0684.w		; 6D 84 06 ; Add $0684.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0676.w		; 8D 76 06 ; Store accumulator to $0676.w [Reads: Accumulator]
	lda $0680.w		; AD 80 06 ; Load $0680.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0670.w		; 8D 70 06 ; Store accumulator to $0670.w [Reads: Accumulator]
	lda $0686.w		; AD 86 06 ; Load $0686.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0670.w		; 6D 70 06 ; Add $0670.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0670.w		; AD 70 06 ; Load $0670.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0C.b		; E5 0C ; Subtract $0C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $30, $09		; 30 09 ; Branch if minus to $30, $09 [Flow: branch]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldy #$00FF.w		; A0 FF 00 ; Load #$00FF.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldy #$00FF.w		; A0 FF 00 ; Load #$00FF.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	cmp #$00E0.w		; C9 E0 00 ; Compare #$00E0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$00E0.w		; A9 E0 00 ; Load #$00E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0A.b		; E5 0A ; Subtract $0A.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $08.b		; E5 08 ; Subtract $08.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	dec $06.b		; C6 06 ; Decrement $06.b [Reads: Direct Page] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $29		; 30 29 ; Branch if minus to $30, $29 [Flow: branch]
	lda $0674.w		; AD 74 06 ; Load $0674.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $0E		; 30 0E ; Branch if minus to $30, $0E [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0674.w		; CD 74 06 ; Compare $0674.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $07		; B0 07 ; Branch if carry set to $B0, $07 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$01C0.w		; E0 C0 01 ; Compare #$01C0.w with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,X		; 9D 00 1B ; Store accumulator to $1B00.w,X [Reads: Accumulator, X Index]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0676.w		; CD 76 06 ; Compare $0676.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	cmp #$00E1.w		; C9 E1 00 ; Compare #$00E1.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	lda $0678.w		; AD 78 06 ; Load $0678.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	dec $0678.w		; CE 78 06 ; Decrement $0678.w [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpx #$01C0.w		; E0 C0 01 ; Compare #$01C0.w with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,X		; 9D 00 1B ; Store accumulator to $1B00.w,X [Reads: Accumulator, X Index]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $04.b		; C5 04 ; Compare $04.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $98		; D0 98 ; Branch if not equal to $D0, $98 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $04.b		; 64 04 ; Store zero to $04.b
	lda $0682.w		; AD 82 06 ; Load $0682.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0674.w		; 8D 74 06 ; Store accumulator to $0674.w [Reads: Accumulator]
	lda $0680.w		; AD 80 06 ; Load $0680.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0670.w		; 8D 70 06 ; Store accumulator to $0670.w [Reads: Accumulator]
	lda $0686.w		; AD 86 06 ; Load $0686.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$0001.w		; 49 01 00 ; Exclusive OR #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0670.w		; 6D 70 06 ; Add $0670.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0670.w		; AD 70 06 ; Load $0670.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0E.b		; E5 0E ; Subtract $0E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$FF00.w		; A9 00 FF ; Load #$FF00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,X		; 9D 00 1B ; Store accumulator to $1B00.w,X [Reads: Accumulator, X Index]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0676.w		; CD 76 06 ; Compare $0676.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $ED		; D0 ED ; Branch if not equal to $D0, $ED [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0007.w		; E9 07 00 ; Subtract #$0007.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0670.w		; 6D 70 06 ; Add $0670.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0670.w		; AD 70 06 ; Load $0670.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0C.b		; E5 0C ; Subtract $0C.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $0676.w		; AD 76 06 ; Load $0676.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0684.w		; 6D 84 06 ; Add $0684.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	eor #$0001.w		; 49 01 00 ; Exclusive OR #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0A.b		; C5 0A ; Compare $0A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $07		; 90 07 ; Branch if carry clear to $90, $07 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cpx #$01C0.w		; E0 C0 01 ; Compare #$01C0.w with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $F9		; B0 F9 ; Branch if carry set to $B0, $F9 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,X		; 9D 00 1B ; Store accumulator to $1B00.w,X [Reads: Accumulator, X Index]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$00E1.w		; C9 E1 00 ; Compare #$00E1.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $D6		; 90 D6 ; Branch if carry clear to $90, $D6 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $17		; F0 17 ; Branch if equal to $F0, $17 [Flow: branch]
	.db $80, $33		; 80 33 ; Branch always to $80, $33 [Flow: branch]
	jsl $01D81B.l		; 22 1B D8 01 ; Jump to subroutine long $01D81B.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda $0200.w		; AD 00 02 ; Load $0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	jsl $068328.l		; 22 28 83 06 ; Jump to subroutine long $068328.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DA18E.l		; 22 8E A1 0D ; Jump to subroutine long $0DA18E.l [Writes: Stack Pointer] [Flow: call]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $02A4CD.l		; 22 CD A4 02 ; Jump to subroutine long $02A4CD.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DDB75.l		; 22 75 DB 0D ; Jump to subroutine long $0DDB75.l [Writes: Stack Pointer] [Flow: call]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $00F567.l		; 22 67 F5 00 ; Jump to subroutine long $00F567.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $00F89A.l		; 22 9A F8 00 ; Jump to subroutine long $00F89A.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$21		; C2 21
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc $011A.w		; 6D 1A 01 ; Add $011A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011C.w		; 6D 1C 01 ; Add $011C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0122.w		; 8D 22 01 ; Store accumulator to $0122.w [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011A.w		; 6D 1A 01 ; Add $011A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $011C.w		; 6D 1C 01 ; Add $011C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0124.w		; 8D 24 01 ; Store accumulator to $0124.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $2A.b,X		; 75 2A ; Add $2A.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $B0, $FB		; B0 FB ; Branch if carry set to $B0, $FB [Flow: branch]
	lda ($E9.b),Y		; B1 E9 ; Load accumulator ($E9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	ora ($18.b),Y		; 11 18 ; OR accumulator with memory ($18.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $FA		; 30 FA ; Branch if minus to $30, $FA [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	cmp $E0C4.w,X		; DD C4 E0 ; Compare accumulator $E0C4.w,X [Reads: X Index] [Flags: NCZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	sed		; F8 ; Set decimal flag [Flags: D]
	lda $F9F9.w,Y		; B9 F9 F9 ; Load $F9F9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda [$F9.b],Y		; B7 F9 ; Load accumulator (long indexed) [$F9.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $000A.w		; 0E 0A 00 ; Arithmetic shift left $000A.w [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $A6.b		; 00 A6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($BF.b),Y		; 11 BF ; OR accumulator with memory ($BF.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ror $F8.b,X		; 76 F8 ; Rotate right $F8.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $82, $F8, $00		; 82 F8 00 ; Branch always long to $82, $F8, $00 [Flow: branch]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $00F88E.l,X		; BF 8E F8 00 ; Load long $00F88E.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	jmp.w [$0000]		; DC 00 00 ; Jump long indirect [$0000] [Flow: jump]
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $00879C.l		; 22 9C 87 00 ; Jump to subroutine long $00879C.l [Writes: Stack Pointer] [Flow: call]
	lda $A2.b		; A5 A2 ; Load $A2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	dec $F8.b		; C6 F8 ; Decrement $F8.b [Reads: Direct Page] [Flags: NZ]
	brk $E0.b		; 00 E0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $E4.b		; 00 E4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $EA.b		; 06 EA ; Arithmetic shift left $EA.b [Reads: Direct Page] [Flags: NCZ]
	ora [$AF.b]		; 07 AF ; OR accumulator with memory (long) [$AF.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	cpy #$7E.b		; C0 7E ; Compare #$7E.b with Y register [Reads: Y Index] [Flags: NCZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EC007.l		; 8F 07 C0 7E ; Store accumulator (long) $7EC007.l [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC00B.l		; 8F 0B C0 7E ; Store accumulator (long) $7EC00B.l [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EC009.l		; 8F 09 C0 7E ; Store accumulator (long) $7EC009.l [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00E914.l		; 22 14 E9 00 ; Jump to subroutine long $00E914.l [Writes: Stack Pointer] [Flow: call]
	jsl $07EA27.l		; 22 27 EA 07 ; Jump to subroutine long $07EA27.l [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $00879C.l		; 22 9C 87 00 ; Jump to subroutine long $00879C.l [Writes: Stack Pointer] [Flow: call]
	lda $A2.b		; A5 A2 ; Load $A2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $14.b		; 02 14 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc #$00.b		; E9 00 ; Subtract #$00.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lda #$A2.b		; A9 A2 ; Load #$A2.b into accumulator [Writes: Accumulator] [Flags: NZ]
	cop $AD.b		; 02 AD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	jsl $0DF128.l		; 22 28 F1 0D ; Jump to subroutine long $0DF128.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	inc $16.b		; E6 16 ; Increment $16.b [Reads: Direct Page] [Flags: NZ]
	stz $11.b		; 64 11 ; Store zero to $11.b
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DF1B3.l		; 22 B3 F1 0D ; Jump to subroutine long $0DF1B3.l [Writes: Stack Pointer] [Flow: call]
	.db $B0, $EA		; B0 EA ; Branch if carry set to $B0, $EA [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $0DF128.l		; 22 28 F1 0D ; Jump to subroutine long $0DF128.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	jsl $0DF1B3.l		; 22 B3 F1 0D ; Jump to subroutine long $0DF1B3.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	and ($07.b,S),Y		; 33 07 ; AND accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $5A06.w		; 20 06 5A ; Jump to subroutine at $5A06.w [Writes: Stack Pointer] [Flow: call]
	and #$90.b		; 29 90 ; Logical AND #$90.b with accumulator [Writes: Accumulator] [Flags: NZ]
	dec $ACA4.w,X		; DE A4 AC ; Decrement memory $ACA4.w,X [Reads: X Index] [Flags: NZ]
	ora $63C9.w		; 0D C9 63 ; Logical OR $63C9.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc [$20.b],Y		; 77 20 ; Add with carry (long indexed) [$20.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	eor $0E98.w,Y		; 59 98 0E ; Exclusive OR accumulator with memory $0E98.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	dec $DB.b,X		; D6 DB ; Decrement memory $DB.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	ora $DD22.w		; 0D 22 DD ; Logical OR $DD22.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $2200.w,Y		; F9 00 22 ; Subtract with carry $2200.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	cmp [$A1.b]		; C7 A1 ; Compare accumulator (long) [$A1.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cop $AD.b		; 02 AD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0403.w		; 8D 03 04 ; Store accumulator to $0403.w [Reads: Accumulator]
	jsl $02B929.l		; 22 29 B9 02 ; Jump to subroutine long $02B929.l [Writes: Stack Pointer] [Flow: call]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $00F92D.l,X		; DF 2D F9 00 ; Compare accumulator (long,X) $00F92D.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $D0, $F9		; D0 F9 ; Branch if not equal to $D0, $F9 [Flow: branch]
	lda $00F939.l,X		; BF 39 F9 00 ; Load long $00F939.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $3F		; D0 3F ; Branch if not equal to $D0, $3F [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3C5.l		; 8F C5 F3 7E ; Store accumulator (long) $7EF3C5.l [Reads: Accumulator]
	lda $7EF282.l		; AF 82 F2 7E ; Load long $7EF282.l into accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF282.l		; 8F 82 F2 7E ; Store accumulator (long) $7EF282.l [Reads: Accumulator]
	lda $7EF3CA.l		; AF CA F3 7E ; Load long $7EF3CA.l into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$40.b		; 49 40 ; Exclusive OR #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CA.l		; [PATTERN: Memory clearing operation] 8F CA F3 7E ; Store accumulator (long) $7EF3CA.l [Reads: Accumulator]
	jsl $00FC62.l		; 22 62 FC 00 ; Jump to subroutine long $00FC62.l [Writes: Stack Pointer] [Flow: call]
	jsl $09AC6B.l		; 22 6B AC 09 ; Jump to subroutine long $09AC6B.l [Writes: Stack Pointer] [Flow: call]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $3A.b		; [PATTERN: Memory clearing operation] 64 3A ; Store zero to $3A.b
	stz $03EF.w		; 9C EF 03 ; Store zero to $03EF.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; [PATTERN: Memory clearing operation] 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; [PATTERN: Memory clearing operation] D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $0200.w		; 9C 00 02 ; Store zero to $0200.w
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9A.b		; 85 9A ; Store accumulator to $9A.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	lda #$F1.b		; A9 F1 ; Load #$F1.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	sta $0130.w		; 8D 30 01 ; Store accumulator to $0130.w [Reads: Accumulator]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; [PATTERN: Memory clearing operation] 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
	rep #$20		; C2 20
	ldx $040C.w		; AE 0C 04 ; Load $040C.w into X register [Writes: X Index] [Flags: NZ]
	lda $7EF403.l		; AF 03 F4 7E ; Load long $7EF403.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3E7.l,X		; 9F E7 F3 7E ; Store accumulator (long,X) $7EF3E7.l,X [Reads: Accumulator, X Index]
	cpx #$08.b		; E0 08 ; Compare #$08.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF403.l		; 8F 03 F4 7E ; Store accumulator (long) $7EF403.l [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; [PATTERN: Memory clearing operation] D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $0EF582.l		; 22 82 F5 0E ; Jump to subroutine long $0EF582.l [Writes: Stack Pointer] [Flow: call]
	jsl $0EC440.l		; 22 40 C4 0E ; Jump to subroutine long $0EC440.l [Writes: Stack Pointer] [Flow: call]
	stz $16.b		; 64 16 ; Store zero to $16.b
	stz $0710.w		; 9C 10 07 ; Store zero to $0710.w
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	.db $80, $02		; [PATTERN: Memory clearing operation] 80 02 ; Branch always to $80, $02 [Flow: branch]
	stz $14.b		; 64 14 ; Store zero to $14.b
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $14.b		; 85 14 ; Store accumulator to $14.b [Reads: Accumulator]
	lda $1CE8.w		; AD E8 1C ; Load $1CE8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; [PATTERN: Memory clearing operation] 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $05FC.w		; 9C FC 05 ; Store zero to $05FC.w
	stz $05FD.w		; 9C FD 05 ; Store zero to $05FD.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1CF4.w		; AD F4 1C ; Load $1CF4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CE8.w		; 8D E8 1C ; Store accumulator to $1CE8.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$10.b]		; 07 10 ; OR accumulator with memory (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$10.b]		; 07 10 ; OR accumulator with memory (long) [$10.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $00.b,S		; 03 00 ; OR accumulator with stack relative $00.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $060A.w		; 0D 0A 06 ; Logical OR $060A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl $01.b		; 06 01 ; Arithmetic shift left $01.b [Reads: Direct Page] [Flags: NCZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$0F.b		; 09 0F ; Logical OR #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $07.b		; 04 07 ; Test and set bits $07.b [Reads: Accumulator] [Flags: Z]
	ora [$1A.b]		; 07 1A ; OR accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	ora [$1A.b]		; 07 1A ; OR accumulator with memory (long) [$1A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	tsb $06.b		; 04 06 ; Test and set bits $06.b [Reads: Accumulator] [Flags: Z]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $0D.b		; 00 0D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	cop $05.b		; 02 05 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $06.b		; 06 06 ; Arithmetic shift left $06.b [Reads: Direct Page] [Flags: NCZ]
	trb $001C.w		; 1C 1C 00 ; Test and reset bits $001C.w [Reads: Accumulator] [Flags: Z]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	ora $230000.l		; 0F 00 00 23 ; OR accumulator with memory (long) $230000.l [Writes: Accumulator] [Flags: NZ]
	and $05.b,S		; 23 05 ; AND accumulator with stack relative $05.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $200A1F.l,X		; 1F 1F 0A 20 ; Logical OR long $200A1F.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $1F1F.w		; 20 1F 1F ; Jump to subroutine at $1F1F.w [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $1320.w		; 20 20 13 ; Jump to subroutine at $1320.w [Writes: Stack Pointer] [Flow: call]
	ora ($17.b,S),Y		; 13 17 ; OR accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $13.b		; 14 13 ; Test and reset bits $13.b [Reads: Accumulator] [Flags: Z]
	ora ($17.b,S),Y		; 13 17 ; OR accumulator (stack relative indirect indexed) ($17.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	asl $15.b,X		; 16 15 ; Arithmetic shift left $15.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $12.b,X		; 15 12 ; OR accumulator with memory $12.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($26.b,S),Y		; 13 26 ; OR accumulator (stack relative indirect indexed) ($26.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	rol $13.b		; 26 13 ; Rotate left $13.b [Reads: Direct Page] [Flags: NCZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $15.b,X		; 15 15 ; OR accumulator with memory $15.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ora $26.b,X		; 15 26 ; OR accumulator with memory $26.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rol $13.b		; 26 13 ; Rotate left $13.b [Reads: Direct Page] [Flags: NCZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	ora $1311.w,X		; 1D 11 13 ; OR accumulator with memory $1311.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora ($18.b,S),Y		; 13 18 ; OR accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora [$16.b],Y		; 17 16 ; OR accumulator with memory (long indexed) [$16.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $13.b,X		; 16 13 ; Arithmetic shift left $13.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($13.b,S),Y		; 13 13 ; OR accumulator (stack relative indirect indexed) ($13.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	ora ($18.b,S),Y		; 13 18 ; OR accumulator (stack relative indirect indexed) ($18.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $1919.w,Y		; 19 19 19 ; OR accumulator with memory $1919.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: NCZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: NCZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: NCZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: NCZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: NCZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $03.b		; 06 03 ; Arithmetic shift left $03.b [Reads: Direct Page] [Flags: NCZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $100E.w		; 0E 0E 10 ; Arithmetic shift left $100E.w [Flags: NCZ]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $0E0C.w		; 0C 0C 0E ; Test and set bits $0E0C.w [Reads: Accumulator] [Flags: Z]
	asl $0C10.w		; 0E 10 0C ; Arithmetic shift left $0C10.w [Flags: NCZ]
	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	brk $0E.b		; 00 0E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $0D00.w		; 0E 00 0D ; Arithmetic shift left $0D00.w [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	asl $0D0E.w		; 0E 0E 0D ; Arithmetic shift left $0D0E.w [Flags: NCZ]
	ora $1010.w		; 0D 10 10 ; Logical OR $1010.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $0E		; 10 0E ; Branch if plus to $10, $0E [Flow: branch]
	asl $0D0E.w		; 0E 0E 0D ; Arithmetic shift left $0D0E.w [Flags: NCZ]
	ora $0012.w		; 0D 12 00 ; Logical OR $0012.w with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $0E0E.w		; 0E 0E 0E ; Arithmetic shift left $0E0E.w [Flags: NCZ]
	asl $0F0D.w		; 0E 0D 0F ; Arithmetic shift left $0F0D.w [Flags: NCZ]
	ora $0E0E00.l		; 0F 00 0E 0E ; OR accumulator with memory (long) $0E0E00.l [Writes: Accumulator] [Flags: NZ]
	asl $0E0E.w		; 0E 0E 0E ; Arithmetic shift left $0E0E.w [Flags: NCZ]
	ora $0E000F.l		; 0F 0F 00 0E ; OR accumulator with memory (long) $0E000F.l [Writes: Accumulator] [Flags: NZ]
	asl $0E0E.w		; 0E 0E 0E ; Arithmetic shift left $0E0E.w [Flags: NCZ]
	asl $4B8B.w		; 0E 8B 4B ; Arithmetic shift left $4B8B.w [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy #$00FE.w		; A0 FE 00 ; Load #$00FE.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$003E.w		; A2 3E 00 ; Load #$003E.w into X register [Writes: X Index] [Flags: NZ]
	lda $FA41.w,Y		; B9 41 FA ; Load $FA41.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EFD00.l,X		; 9F 00 FD 7E ; Store accumulator (long,X) $7EFD00.l,X [Reads: Accumulator, X Index]
	lda $FB41.w,Y		; B9 41 FB ; Load $FB41.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EFD80.l,X		; 9F 80 FD 7E ; Store accumulator (long,X) $7EFD80.l,X [Reads: Accumulator, X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $EC		; 10 EC ; Branch if plus to $10, $EC [Flow: branch]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldy #$003E.w		; A0 3E 00 ; Load #$003E.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	ldy #$007E.w		; A0 7E 00 ; Load #$007E.w into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$0003.w		; C9 03 00 ; Compare #$0003.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	ldy #$00BE.w		; A0 BE 00 ; Load #$00BE.w into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$003E.w		; A2 3E 00 ; Load #$003E.w into X register [Writes: X Index] [Flags: NZ]
	lda $FA41.w,Y		; B9 41 FA ; Load $FA41.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EFCC0.l,X		; 9F C0 FC 7E ; Store accumulator (long,X) $7EFCC0.l,X [Reads: Accumulator, X Index]
	lda $FB41.w,Y		; B9 41 FB ; Load $FB41.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EFD40.l,X		; 9F 40 FD 7E ; Store accumulator (long,X) $7EFD40.l,X [Reads: Accumulator, X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $EC		; 10 EC ; Branch if plus to $10, $EC [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $222222.l		; 22 22 22 22 ; Jump to subroutine long $222222.l [Writes: Stack Pointer] [Flow: call]
	and ($21.b,X)		; 21 21 ; Logical AND ($21.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($22.b,X)		; 21 22 ; Logical AND ($22.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsl $272222.l		; 22 22 22 27 ; Jump to subroutine long $272222.l [Writes: Stack Pointer] [Flow: call]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $2929.w		; 20 29 29 ; Jump to subroutine at $2929.w [Writes: Stack Pointer] [Flow: call]
	jsr $2929.w		; 20 29 29 ; Jump to subroutine at $2929.w [Writes: Stack Pointer] [Flow: call]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $2424.w		; 20 24 24 ; Jump to subroutine at $2424.w [Writes: Stack Pointer] [Flow: call]
	and [$25.b]		; 27 25 ; AND accumulator with memory (long) [$25.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $23.b		; 25 23 ; Logical AND $23.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $23.b,S		; 23 23 ; AND accumulator with stack relative $23.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	jsr $2525.w		; 20 25 25 ; Jump to subroutine at $2525.w [Writes: Stack Pointer] [Flow: call]
	and $2A.b,S		; 23 2A ; AND accumulator with stack relative $2A.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($20.b,X)		; 21 20 ; Logical AND ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	jsr $2027.w		; 20 27 20 ; Jump to subroutine at $2027.w [Writes: Stack Pointer] [Flow: call]
	and $2B.b		; 25 2B ; Logical AND $2B.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	jsr $2727.w		; 20 27 27 ; Jump to subroutine at $2727.w [Writes: Stack Pointer] [Flow: call]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$2B.b]		; 27 2B ; AND accumulator with memory (long) [$2B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pld		; 2B ; Pull direct page register from stack [Reads: Stack Pointer] [Writes: Direct Page, Stack Pointer] [Flags: NZ] [SNES: Stack operation: pulls DP register]
	jsr $2727.w		; 20 27 27 ; Jump to subroutine at $2727.w [Writes: Stack Pointer] [Flow: call]
	and [$27.b]		; 27 27 ; AND accumulator with memory (long) [$27.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and [$3E.b]		; 27 3E ; AND accumulator with memory (long) [$3E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	rol $413E.w,X		; 3E 3E 41 ; Rotate left $413E.w,X [Reads: X Index] [Flags: NCZ]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($3C.b,X)		; 41 3C ; Exclusive OR accumulator with memory ($3C.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rol $3E3E.w,X		; 3E 3E 3E ; Rotate left $3E3E.w,X [Reads: X Index] [Flags: NCZ]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($41.b,X)		; 41 41 ; Exclusive OR accumulator with memory ($41.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $40303F.l,X		; 3F 3F 30 40 ; AND accumulator with memory (long,X) $40303F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $30, $40		; 30 40 ; Branch if minus to $30, $40 [Flow: branch]
	.db $30, $3F		; 30 3F ; Branch if minus to $30, $3F [Flow: branch]
	and $3B3B30.l,X		; 3F 30 3B 3B ; AND accumulator with memory (long,X) $3B3B30.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	and $3F3D.w,X		; 3D 3D 3F ; AND accumulator with memory $3F3D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $3B3B3F.l,X		; 3F 3F 3B 3B ; AND accumulator with memory (long,X) $3B3B3F.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $3D		; 30 3D ; Branch if minus to $30, $3D [Flow: branch]
	and $3F3F.w,X		; 3D 3F 3F ; AND accumulator with memory $3F3F.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $40		; 30 40 ; Branch if minus to $30, $40 [Flow: branch]
	.db $30, $3D		; 30 3D ; Branch if minus to $30, $3D [Flow: branch]
	.db $42, $42		; 42 42 ; Reserved instruction
	.db $30, $40		; 30 40 ; Branch if minus to $30, $40 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $42, $42		; 42 42 ; Reserved instruction
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $42, $42		; 42 42 ; Reserved instruction
	.db $30, $40		; 30 40 ; Branch if minus to $30, $40 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	.db $42, $42		; 42 42 ; Reserved instruction
	.db $30, $06		; 30 06 ; Branch if minus to $30, $06 [Flow: branch]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $04.b		; 02 04 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$08.b		; 09 08 ; Logical OR #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $1717.w,X		; 1E 17 17 ; Arithmetic shift left $1717.w,X [Reads: X Index] [Flags: NCZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	asl $1717.w,X		; 1E 17 17 ; Arithmetic shift left $1717.w,X [Reads: X Index] [Flags: NCZ]
	ora [$17.b],Y		; 17 17 ; OR accumulator with memory (long indexed) [$17.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $1E1E.w,X		; 1D 1E 1E ; OR accumulator with memory $1E1E.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $1E		; 10 1E ; Branch if plus to $10, $1E [Flow: branch]
	asl $1E10.w,X		; 1E 10 1E ; Arithmetic shift left $1E10.w,X [Reads: X Index] [Flags: NCZ]
	.db $10, $1E		; 10 1E ; Branch if plus to $10, $1E [Flow: branch]
	asl $1210.w,X		; 1E 10 12 ; Arithmetic shift left $1210.w,X [Reads: X Index] [Flags: NCZ]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $1E1E.w,X		; 1E 1E 1E ; Arithmetic shift left $1E1E.w,X [Reads: X Index] [Flags: NCZ]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $1A		; 10 1A ; Branch if plus to $10, $1A [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl $1210.w,X		; 1E 10 12 ; Arithmetic shift left $1210.w,X [Reads: X Index] [Flags: NCZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	ora $1A10.w,X		; 1D 10 1A ; OR accumulator with memory $1A10.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $101C.w		; 1C 1C 10 ; Test and reset bits $101C.w [Reads: Accumulator] [Flags: Z]
	ora $1C1D.w,X		; 1D 1D 1C ; OR accumulator with memory $1C1D.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	trb $1C1D.w		; 1C 1D 1C ; Test and reset bits $1C1D.w [Reads: Accumulator] [Flags: Z]
	trb $1D10.w		; 1C 10 1D ; Test and reset bits $1D10.w [Reads: Accumulator] [Flags: Z]
	ora $1C1C.w,X		; 1D 1C 1C ; OR accumulator with memory $1C1C.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $0A.b		; 02 0A ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $04BC.w		; 9C BC 04 ; Store zero to $04BC.w
.INDEX 16
	rep #$10		; C2 10
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$0020.w		; A0 20 00 ; Load #$0020.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $04BC.w		; AD BC 04 ; Load $04BC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	lda #$7F.b		; A9 7F ; Load #$7F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EBDC0.l,X		; BF C0 BD 7E ; Load long $7EBDC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0020.w		; C0 20 00 ; Compare #$0020.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7EBDC0.l,X		; BF C0 BD 7E ; Load long $7EBDC0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0000.w,Y		; 99 00 00 ; Store accumulator to $0000.w,Y [Reads: Y Index, Accumulator]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$0040.w		; C0 40 00 ; Compare #$0040.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $F0		; D0 F0 ; Branch if not equal to $D0, $F0 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$18.b		; [PATTERN: Memory clearing operation] A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $17.b		; 85 17 ; Store accumulator to $17.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $9B.b		; 64 9B ; Store zero to $9B.b
.ACCU 16
	rep #$20		; C2 20
	stz $06A0.w		; 9C A0 06 ; Store zero to $06A0.w
	stz $06AC.w		; [PATTERN: Memory clearing operation] 9C AC 06 ; Store zero to $06AC.w
	stz $06AA.w		; 9C AA 06 ; Store zero to $06AA.w
	stz $06AE.w		; 9C AE 06 ; Store zero to $06AE.w
	stz $06B0.w		; 9C B0 06 ; Store zero to $06B0.w
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06B4.w		; 8D B4 06 ; Store accumulator to $06B4.w [Reads: Accumulator]
	sta $06B6.w		; 8D B6 06 ; Store accumulator to $06B6.w [Reads: Accumulator]
	lda #$0015.w		; A9 15 00 ; Load #$0015.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06B2.w		; 8D B2 06 ; Store accumulator to $06B2.w [Reads: Accumulator]
	lda #$FFC0.w		; A9 C0 FF ; Load #$FFC0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06A6.w		; 8D A6 06 ; Store accumulator to $06A6.w [Reads: Accumulator]
	lda #$0040.w		; A9 40 00 ; Load #$0040.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06A8.w		; 8D A8 06 ; Store accumulator to $06A8.w [Reads: Accumulator]
	lda #$FE00.w		; A9 00 FE ; Load #$FE00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06A2.w		; [PATTERN: Memory clearing operation] 8D A2 06 ; Store accumulator to $06A2.w [Reads: Accumulator]
	lda #$0200.w		; A9 00 02 ; Load #$0200.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06A4.w		; 8D A4 06 ; Store accumulator to $06A4.w [Reads: Accumulator]
	stz $06AC.w		; 9C AC 06 ; Store zero to $06AC.w
	stz $06AE.w		; 9C AE 06 ; Store zero to $06AE.w
	lda #$0F42.w		; A9 42 0F ; Load #$0F42.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP7.w		; 8D 70 43 ; Store accumulator to DMAP7.w [Reads: Accumulator]
	lda #$0D42.w		; A9 42 0D ; Load #$0D42.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta DMAP6.w		; 8D 60 43 ; Store accumulator to DMAP6.w [Reads: Accumulator]
	ldx #$3E.b		; A2 3E ; Load #$3E.b into X register [Writes: X Index] [Flags: NZ]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,X		; 9D 00 1B ; Store accumulator to $1B00.w,X [Reads: Accumulator, X Index]
	sta $1B40.w,X		; 9D 40 1B ; Store accumulator to $1B40.w,X [Reads: Accumulator, X Index]
	sta $1B80.w,X		; 9D 80 1B ; Store accumulator to $1B80.w,X [Reads: Accumulator, X Index]
	sta $1BC0.w,X		; 9D C0 1B ; Store accumulator to $1BC0.w,X [Reads: Accumulator, X Index]
	sta $1C00.w,X		; 9D 00 1C ; Store accumulator to $1C00.w,X [Reads: Accumulator, X Index]
	sta $1C40.w,X		; 9D 40 1C ; Store accumulator to $1C40.w,X [Reads: Accumulator, X Index]
	sta $1C80.w,X		; 9D 80 1C ; Store accumulator to $1C80.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $E7		; 10 E7 ; Branch if plus to $10, $E7 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	lda #$C0.b		; A9 C0 ; Load #$C0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $9B.b		; 85 9B ; Store accumulator to $9B.b [Reads: Accumulator]
	jsl $00EEE7.l		; 22 E7 EE 00 ; Jump to subroutine long $00EEE7.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $F0		; B0 F0 ; Branch if carry set to $B0, $F0 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$01A0.w		; A2 A0 01 ; Load #$01A0.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$01B0.w		; A0 B0 01 ; Load #$01B0.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $1B00.w,X		; BD 00 1B ; Load $1B00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,Y		; 99 00 1B ; Store accumulator to $1B00.w,Y [Reads: Y Index, Accumulator]
	sta $1B04.w,Y		; 99 04 1B ; Store accumulator to $1B04.w,Y [Reads: Y Index, Accumulator]
	sta $1B08.w,Y		; 99 08 1B ; Store accumulator to $1B08.w,Y [Reads: Y Index, Accumulator]
	sta $1B0C.w,Y		; 99 0C 1B ; Store accumulator to $1B0C.w,Y [Reads: Y Index, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	cpy #$0000.w		; C0 00 00 ; Compare #$0000.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $CE		; D0 CE ; Branch if not equal to $D0, $CE [Flow: branch]
	ldx $06A0.w		; AE A0 06 ; Load $06A0.w into X register [Writes: X Index] [Flags: NZ]
	lda $06AC.w		; AD AC 06 ; Load $06AC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06A6.w,X		; 7D A6 06 ; Add $06A6.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $06A2.w,X		; [PATTERN: Memory clearing operation] FD A2 06 ; Subtract with carry $06A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $06A2.w,X		; 5D A2 06 ; Exclusive OR accumulator with memory $06A2.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $30, $14		; 30 14 ; Branch if minus to $30, $14 [Flow: branch]
	stz $06AA.w		; 9C AA 06 ; Store zero to $06AA.w
	stz $06AE.w		; 9C AE 06 ; Store zero to $06AE.w
	lda $06A0.w		; AD A0 06 ; Load $06A0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$0002.w		; 49 02 00 ; Exclusive OR #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06A0.w		; 8D A0 06 ; Store accumulator to $06A0.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lda $06A2.w,X		; BD A2 06 ; Load $06A2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $06AC.w		; 8D AC 06 ; Store accumulator to $06AC.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06AE.w		; 6D AE 06 ; Add $06AE.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06AE.w		; 8D AE 06 ; Store accumulator to $06AE.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	ora #$00FF.w		; 09 FF 00 ; Logical OR #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06AA.w		; 6D AA 06 ; Add $06AA.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $06AA.w		; 8D AA 06 ; Store accumulator to $06AA.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EC007.l		; AF 07 C0 7E ; Load long $7EC007.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0030.w		; C9 30 00 ; Compare #$0030.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $17		; 90 17 ; Branch if carry clear to $90, $17 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$FFF8.w		; 29 F8 FF ; Logical AND #$FFF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda #$FF00.w		; A9 00 FF ; Load #$FF00.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06A2.w		; 8D A2 06 ; Store accumulator to $06A2.w [Reads: Accumulator]
	lda #$0100.w		; A9 00 01 ; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06A4.w		; 8D A4 06 ; Store accumulator to $06A4.w [Reads: Accumulator]
	ldx #$0000.w		; A2 00 00 ; Load #$0000.w into X register [Writes: X Index] [Flags: NZ]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $E2.b		; 65 E2 ; Add $E2.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $1B00.w		; 8D 00 1B ; Store accumulator to $1B00.w [Reads: Accumulator]
	sta $1B04.w		; 8D 04 1B ; Store accumulator to $1B04.w [Reads: Accumulator]
	sta $1B08.w		; 8D 08 1B ; Store accumulator to $1B08.w [Reads: Accumulator]
	sta $1B0C.w		; 8D 0C 1B ; Store accumulator to $1B0C.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $00EEE7.l		; 22 E7 EE 00 ; Jump to subroutine long $00EEE7.l [Writes: Stack Pointer] [Flow: call]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $F6		; B0 F6 ; Branch if carry set to $B0, $F6 [Flow: branch]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	ldx #$01A0.w		; A2 A0 01 ; Load #$01A0.w into X register [Writes: X Index] [Flags: NZ]
	ldy #$01B0.w		; A0 B0 01 ; Load #$01B0.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $1B00.w,X		; BD 00 1B ; Load $1B00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,Y		; 99 00 1B ; Store accumulator to $1B00.w,Y [Reads: Y Index, Accumulator]
	sta $1B04.w,Y		; 99 04 1B ; Store accumulator to $1B04.w,Y [Reads: Y Index, Accumulator]
	sta $1B08.w,Y		; 99 08 1B ; Store accumulator to $1B08.w,Y [Reads: Y Index, Accumulator]
	sta $1B0C.w,Y		; 99 0C 1B ; Store accumulator to $1B0C.w,Y [Reads: Y Index, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dec $00.b		; C6 00 ; Decrement $00.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	dec $02.b		; C6 02 ; Decrement $02.b [Reads: Direct Page] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	cpy #$0000.w		; C0 00 00 ; Compare #$0000.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $CE		; D0 CE ; Branch if not equal to $D0, $CE [Flow: branch]
	lda $1C80.w		; AD 80 1C ; Load $1C80.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1C90.w		; 0D 90 1C ; Logical OR $1C90.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1CA0.w		; 0D A0 1C ; Logical OR $1CA0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $1CB0.w		; 0D B0 1C ; Logical OR $1CB0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $E2.b		; C5 E2 ; Compare $E2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $28		; D0 28 ; Branch if not equal to $D0, $28 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	stz $9B.b		; 64 9B ; Store zero to $9B.b
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	jsl $0BFE70.l		; 22 70 FE 0B ; Jump to subroutine long $0BFE70.l [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$1B.b		; C9 1B ; Compare #$1B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $E0.b		; 85 E0 ; Store accumulator to $E0.b [Reads: Accumulator]
	sta $0120.w		; 8D 20 01 ; Store accumulator to $0120.w [Reads: Accumulator]
	sta $011E.w		; 8D 1E 01 ; Store accumulator to $011E.w [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $E6.b		; 85 E6 ; Store accumulator to $E6.b [Reads: Accumulator]
	.db $8D, $22		; Opcode overrunning decoder ; Store accumulator to $8D, $22 [Reads: Accumulator]
Headers:
	; Auto-generated headers
.ENDS
