.BANK 7 SLOT 0
.ORG $0000

.SECTION "Bank7" FORCE

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FC2.w		; 8D C2 0F ; Store accumulator to $0FC2.w [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FC4.w		; 8D C4 0F ; Store accumulator to $0FC4.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	stz $0FC1.w		; 9C C1 0F ; Store zero to $0FC1.w
	lda $02E4.w		; AD E4 02 ; Load $02E4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $807F.w		; 20 7F 80 ; Jump to subroutine at $807F.w [Writes: Stack Pointer] [Flow: call]
	jsr $8689.w		; 20 89 86 ; Jump to subroutine at $8689.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8036.w		; 20 36 80 ; Jump to subroutine at $8036.w [Writes: Stack Pointer] [Flow: call]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8036.w		; 20 36 80 ; Jump to subroutine at $8036.w [Writes: Stack Pointer] [Flow: call]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $8036.w		; 20 36 80 ; Jump to subroutine at $8036.w [Writes: Stack Pointer] [Flow: call]
	sta $012F.w		; 8D 2F 01 ; Store accumulator to $012F.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sta $0CF8.w		; 8D F8 0C ; Store accumulator to $0CF8.w [Reads: Accumulator]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	ora $0CF8.w		; 0D F8 0C ; Logical OR $0CF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$81.b		; 09 81 ; Logical OR #$81.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp ($92.b,S),Y		; D3 92 ; Compare accumulator (stack relative indirect indexed) ($92.b,S),Y [Reads: Y Index, Stack Pointer, Accumulator] [Flags: NCZ]
	lda $86.b,X		; B5 86 ; Load $86.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $A8.b		; 04 A8 ; Test and set bits $A8.b [Reads: Accumulator] [Flags: Z]
	tsa		; 3B ; Transfer stack pointer to C  [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	stx $72.b,Y		; 96 72 ; Store X register $72.b,Y [Reads: Direct Page, Y Index] [Writes: X Index]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $86.b,X		; B5 86 ; Load $86.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	jmp ($0F99.w)		; 6C 99 0F ; Jump indirect to ($0F99.w) [Flow: jump]
	lda $F7.b		; A5 F7 ; Load $F7.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $D6.b		; A5 D6 ; Load $D6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx $4E.b		; A6 4E ; Load $4E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	bit #$74.b		; 89 74 ; Test bits #$74.b with accumulator [Reads: Accumulator] [Flags: Z]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	dec $8D.b		; C6 8D ; Decrement $8D.b [Reads: Direct Page] [Flags: NZ]
	ora $8E.b,X		; 15 8E ; OR accumulator with memory $8E.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc #$8C.b		; 69 8C ; Add #$8C.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	adc #$8C.b		; 69 8C ; Add #$8C.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	stx $8F.b		; 86 8F ; Store X register to $8F.b [Reads: X Index]
	lsr $7C91.w,X		; 5E 91 7C ; Logical shift right $7C91.w,X [Reads: X Index] [Flags: NCZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda ($A9.b),Y		; B1 A9 ; Load accumulator ($A9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $5A99.w		; AC 99 5A ; Load $5A99.w into Y register [Writes: Y Index] [Flags: NZ]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda ($83.b,X)		; A1 83 ; Load accumulator ($83.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta ($84.b,X)		; 81 84 ; Store accumulator ($84.b,X) [Reads: Direct Page, Accumulator, X Index]
	.db $70, $85		; 70 85 ; Branch if overflow set to $70, $85 [Flow: branch]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	sta $7B.b		; 85 7B ; Store accumulator to $7B.b [Reads: Accumulator]
	stx $65.b		; 86 65 ; Store X register to $65.b [Reads: X Index]
	sta $16.b,S		; 83 16 ; Store accumulator (stack relative) $16.b,S [Reads: Stack Pointer, Accumulator]
	ldy $04.b,X		; B4 04 ; Load Y register $04.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $0373.w		; AD 73 03 ; Load $0373.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $77		; [PATTERN: Memory clearing operation] F0 77 ; Branch if equal to $F0, $77 [Flow: branch]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	stz $0373.w		; 9C 73 03 ; Store zero to $0373.w
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $46.b		; 64 46 ; Store zero to $46.b
	.db $80, $6A		; 80 6A ; Branch always to $80, $6A [Flow: branch]
	lda $037B.w		; AD 7B 03 ; Load $037B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $65		; D0 65 ; Branch if not equal to $D0, $65 [Flow: branch]
	lda $0373.w		; AD 73 03 ; Load $0373.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $0373.w		; 9C 73 03 ; Store zero to $0373.w
	lda $0C4A.w		; AD 4A 0C ; Load $0C4A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; [PATTERN: Memory clearing operation] D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $3D.b		; A5 3D ; Load $3D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	stz $0C4A.w		; 9C 4A 0C ; Store zero to $0C4A.w
	stz $035F.w		; 9C 5F 03 ; Store zero to $035F.w
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$3A.b		; A9 3A ; Load #$3A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031F.w		; 8D 1F 03 ; Store accumulator to $031F.w [Reads: Accumulator]
	lda #$26.b		; A9 26 ; Load #$26.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	inc $0CFC.w		; EE FC 0C ; Increment $0CFC.w [Flags: NZ]
	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$A8.b		; C9 A8 ; Compare #$A8.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $22		; 90 22 ; Branch if carry clear to $90, $22 [Flow: branch]
	lda $1C.b		; A5 1C ; Load $1C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC211.l		; 8F 11 C2 7E ; Store accumulator (long) $7EC211.l [Reads: Accumulator]
	lda $1D.b		; A5 1D ; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $7EC212.l		; 8F 12 C2 7E ; Store accumulator (long) $7EC212.l [Reads: Accumulator]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031F.w		; 8D 1F 03 ; Store accumulator to $031F.w [Reads: Accumulator]
	sta $7EF372.l		; 8F 72 F3 7E ; Store accumulator (long) $7EF372.l [Reads: Accumulator]
	sta $7EF36D.l		; 8F 6D F3 7E ; Store accumulator (long) $7EF36D.l [Reads: Accumulator]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $AE8F.w		; 20 8F AE ; Jump to subroutine at $AE8F.w [Writes: Stack Pointer] [Flow: call]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($8041.w,X)		; 7C 41 80 ; Jump indirect indexed to ($8041.w,X) [Reads: X Index] [Flow: jump]
	jsr $F514.w		; 20 14 F5 ; Jump to subroutine at $F514.w [Writes: Stack Pointer] [Flow: call]
	lda $F5.b		; A5 F5 ; Load $F5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $037F.w		; AD 7F 03 ; Load $037F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037F.w		; 8D 7F 03 ; Store accumulator to $037F.w [Reads: Accumulator]
	jsr $82DA.w		; 20 DA 82 ; Jump to subroutine at $82DA.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$17.b		; C9 17 ; Compare #$17.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $79, $02		; 82 79 02 ; Branch always long to $82, $79, $02 [Flow: branch]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $02CA.w		; 9C CA 02 ; Store zero to $02CA.w
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $70		; F0 70 ; Branch if equal to $F0, $70 [Flow: branch]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	stz $037A.w		; [PATTERN: Memory clearing operation] 9C 7A 03 ; Store zero to $037A.w
	stz $020B.w		; 9C 0B 02 ; Store zero to $020B.w
	stz $0350.w		; 9C 50 03 ; Store zero to $0350.w
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $030E.w		; 9C 0E 03 ; Store zero to $030E.w
	stz $030A.w		; [PATTERN: Memory clearing operation] 9C 0A 03 ; Store zero to $030A.w
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	stz $0308.w		; [PATTERN: Memory clearing operation] 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	stz $48.b		; 64 48 ; Store zero to $48.b
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	stz $25.b		; 64 25 ; Store zero to $25.b
	lda $0360.w		; AD 60 03 ; Load $0360.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2A		; F0 2A ; Branch if equal to $F0, $2A [Flow: branch]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; [PATTERN: Memory clearing operation] 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $82, $D9, $17		; 82 D9 17 ; Branch always long to $82, $D9, $17 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $82, $15, $05		; 82 15 05 ; Branch always long to $82, $15, $05 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	sta $25.b		; 85 25 ; Store accumulator to $25.b [Reads: Accumulator]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	stz $02C6.w		; 9C C6 02 ; Store zero to $02C6.w
	jsr $B5D6.w		; 20 D6 B5 ; Jump to subroutine at $B5D6.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $2F		; B0 2F ; Branch if carry set to $B0, $2F [Flow: branch]
	jsr $9BAA.w		; 20 AA 9B ; Jump to subroutine at $9BAA.w [Writes: Stack Pointer] [Flow: call]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0376.w		; 0D 76 03 ; Logical OR $0376.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	lda $0377.w		; AD 77 03 ; Load $0377.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$11.b		; C9 11 ; Compare #$11.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	jsr $9B0E.w		; 20 0E 9B ; Jump to subroutine at $9B0E.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	jsr $9AC2.w		; 20 C2 9A ; Jump to subroutine at $9AC2.w [Writes: Stack Pointer] [Flow: call]
	lda $5D.b		; [PATTERN: Memory clearing operation] A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	stz $30.b		; 64 30 ; Store zero to $30.b
	stz $31.b		; 64 31 ; Store zero to $31.b
	.db $82, $F3, $00		; 82 F3 00 ; Branch always long to $82, $F3, $00 [Flow: branch]
	jsr $AE88.w		; 20 88 AE ; Jump to subroutine at $AE88.w [Writes: Stack Pointer] [Flow: call]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $29		; [PATTERN: Memory clearing operation] F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $030E.w		; [PATTERN: Memory clearing operation] 9C 0E 03 ; Store zero to $030E.w
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	.db $82, $02, $05		; 82 02 05 ; Branch always long to $82, $02, $05 [Flow: branch]
	lda $0377.w		; AD 77 03 ; Load $0377.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	stz $67.b		; 64 67 ; Store zero to $67.b
	.db $80, $3D		; 80 3D ; Branch always to $80, $3D [Flow: branch]
	lda $02E1.w		; AD E1 02 ; Load $02E1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $38		; D0 38 ; Branch if not equal to $D0, $38 [Flow: branch]
	lda $0376.w		; AD 76 03 ; Load $0376.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0309.w		; AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $80, $64		; 80 64 ; Branch always to $80, $64 [Flow: branch]
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0335.w		; 8D 35 03 ; Store accumulator to $0335.w [Reads: Accumulator]
	sta $0337.w		; 8D 37 03 ; Store accumulator to $0337.w [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0334.w		; 8D 34 03 ; Store accumulator to $0334.w [Reads: Accumulator]
	sta $0336.w		; 8D 36 03 ; Store accumulator to $0336.w [Reads: Accumulator]
	.db $82, $A6, $14		; 82 A6 14 ; Branch always long to $82, $A6, $14 [Flow: branch]
	jsr $9873.w		; 20 73 98 ; Jump to subroutine at $9873.w [Writes: Stack Pointer] [Flow: call]
	lda $49.b		; A5 49 ; Load $49.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	lda $0376.w		; AD 76 03 ; Load $0376.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	ldx #$20.b		; A2 20 ; Load #$20.b into X register [Writes: X Index] [Flags: NZ]
	stx $0371.w		; 8E 71 03 ; Store X register to $0371.w [Reads: X Index]
	ldx #$13.b		; A2 13 ; Load #$13.b into X register [Writes: X Index] [Flags: NZ]
	stx $0375.w		; 8E 75 03 ; Store X register to $0375.w [Reads: X Index]
	.db $80, $1A		; 80 1A ; Branch always to $80, $1A [Flow: branch]
	sta $67.b		; [PATTERN: Memory clearing operation] 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	cmp $26.b		; C5 26 ; Compare $26.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	stz $2A.b		; 64 2A ; Store zero to $2A.b
	stz $2B.b		; 64 2B ; Store zero to $2B.b
	stz $6B.b		; [PATTERN: Memory clearing operation] 64 6B ; Store zero to $6B.b
	stz $48.b		; 64 48 ; Store zero to $48.b
	ldx #$20.b		; A2 20 ; Load #$20.b into X register [Writes: X Index] [Flags: NZ]
	stx $0371.w		; 8E 71 03 ; Store X register to $0371.w [Reads: X Index]
	ldx #$13.b		; A2 13 ; Load #$13.b into X register [Writes: X Index] [Flags: NZ]
	stx $0375.w		; 8E 75 03 ; Store X register to $0375.w [Reads: X Index]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	jsr $B64F.w		; 20 4F B6 ; Jump to subroutine at $B64F.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
	jsr $B7C7.w		; 20 C7 B7 ; Jump to subroutine at $B7C7.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E6A6.l		; [PATTERN: Memory clearing operation] 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	lda $0377.w		; AD 77 03 ; Load $0377.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	stz $30.b		; 64 30 ; Store zero to $30.b
	stz $31.b		; 64 31 ; Store zero to $31.b
	stz $0302.w		; 9C 02 03 ; Store zero to $0302.w
	jsr $E8F0.w		; 20 F0 E8 ; Jump to subroutine at $E8F0.w [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $03F5.w		; AD F5 03 ; Load $03F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $03F6.w		; 0D F6 03 ; Logical OR $03F6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F6		; F0 F6 ; Branch if equal to $F0, $F6 [Flow: branch]
	lda $03F7.w		; AD F7 03 ; Load $03F7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $56		; D0 56 ; Branch if not equal to $D0, $56 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$17.b		; C9 17 ; Compare #$17.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $6E		; F0 6E ; Branch if equal to $F0, $6E [Flow: branch]
	cmp #$1C.b		; C9 1C ; Compare #$1C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $6A		; F0 6A ; Branch if equal to $F0, $6A [Flow: branch]
	lda $0309.w		; AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsl $07F1A3.l		; 22 A3 F1 07 ; Jump to subroutine long $07F1A3.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0308.w		; 8D 08 03 ; Store accumulator to $0308.w [Reads: Accumulator]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$31.b		; C9 31 ; Compare #$31.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $09912C.l		; 22 2C 91 09 ; Jump to subroutine long $09912C.l [Writes: Stack Pointer] [Flow: call]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E2.w		; 8D E2 02 ; Store accumulator to $02E2.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	sta $03F7.w		; 8D F7 03 ; Store accumulator to $03F7.w [Reads: Accumulator]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4B.b		; 85 4B ; Store accumulator to $4B.b [Reads: Accumulator]
	dec $02E2.w		; CE E2 02 ; Decrement $02E2.w [Flags: NZ]
	.db $10, $21		; 10 21 ; Branch if plus to $10, $21 [Flow: branch]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E0.w		; [PATTERN: Memory clearing operation] 8D E0 02 ; Store accumulator to $02E0.w [Reads: Accumulator]
	sta $56.b		; 85 56 ; Store accumulator to $56.b [Reads: Accumulator]
	jsl $0ED6DD.l		; 22 DD D6 0E ; Jump to subroutine long $0ED6DD.l [Writes: Stack Pointer] [Flow: call]
	stz $4B.b		; 64 4B ; Store zero to $4B.b
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $03F7.w		; [PATTERN: Memory clearing operation] 9C F7 03 ; Store zero to $03F7.w
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	stz $03F5.w		; 9C F5 03 ; Store zero to $03F5.w
	stz $03F6.w		; 9C F6 03 ; Store zero to $03F6.w
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $03F5.w		; AD F5 03 ; Load $03F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $03F6.w		; 0D F6 03 ; Logical OR $03F6.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2D		; D0 2D ; Branch if not equal to $D0, $2D [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $09912C.l		; 22 2C 91 09 ; Jump to subroutine long $09912C.l [Writes: Stack Pointer] [Flow: call]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E2.w		; 8D E2 02 ; Store accumulator to $02E2.w [Reads: Accumulator]
	lda #$00.b		; [PATTERN: Memory clearing operation] A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	jsl $07F1FA.l		; 22 FA F1 07 ; Jump to subroutine long $07F1FA.l [Writes: Stack Pointer] [Flow: call]
	stz $03F7.w		; 9C F7 03 ; Store zero to $03F7.w
	stz $56.b		; 64 56 ; Store zero to $56.b
	stz $02E0.w		; [PATTERN: Memory clearing operation] 9C E0 02 ; Store zero to $02E0.w
	jsl $0ED6C0.l		; 22 C0 D6 0E ; Jump to subroutine long $0ED6C0.l [Writes: Stack Pointer] [Flow: call]
	stz $03F7.w		; 9C F7 03 ; Store zero to $03F7.w
	.db $82, $70, $FD		; 82 70 FD ; Branch always long to $82, $70, $FD [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	dec $03F5.w		; CE F5 03 ; Decrement $03F5.w [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	jsr $F514.w		; 20 14 F5 ; Jump to subroutine at $F514.w [Writes: Stack Pointer] [Flow: call]
	lda $F5.b		; A5 F5 ; Load $F5.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $037F.w		; AD 7F 03 ; Load $037F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037F.w		; 8D 7F 03 ; Store accumulator to $037F.w [Reads: Accumulator]
	stz $02CA.w		; 9C CA 02 ; Store zero to $02CA.w
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3C		; [PATTERN: Memory clearing operation] F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stz $02E0.w		; 9C E0 02 ; Store zero to $02E0.w
	stz $03F7.w		; 9C F7 03 ; Store zero to $03F7.w
	stz $03F5.w		; [PATTERN: Memory clearing operation] 9C F5 03 ; Store zero to $03F5.w
	stz $03F6.w		; 9C F6 03 ; Store zero to $03F6.w
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	stz $56.b		; 64 56 ; Store zero to $56.b
	stz $4D.b		; [PATTERN: Memory clearing operation] 64 4D ; Store zero to $4D.b
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $02E1.w		; 9C E1 02 ; Store zero to $02E1.w
	stz $50.b		; 64 50 ; Store zero to $50.b
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	jsl $0ED6C0.l		; 22 C0 D6 0E ; Jump to subroutine long $0ED6C0.l [Writes: Stack Pointer] [Flow: call]
	.db $82, $86, $00		; 82 86 00 ; Branch always long to $82, $86, $00 [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $10, $03		; 82 10 03 ; Branch always long to $82, $10, $03 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	sta $25.b		; 85 25 ; Store accumulator to $25.b [Reads: Accumulator]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	stz $02C6.w		; 9C C6 02 ; Store zero to $02C6.w
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0335.w		; 8D 35 03 ; Store accumulator to $0335.w [Reads: Accumulator]
	sta $0337.w		; 8D 37 03 ; Store accumulator to $0337.w [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0334.w		; 8D 34 03 ; Store accumulator to $0334.w [Reads: Accumulator]
	sta $0336.w		; 8D 36 03 ; Store accumulator to $0336.w [Reads: Accumulator]
	.db $82, $F1, $12		; 82 F1 12 ; Branch always long to $82, $F1, $12 [Flow: branch]
	jsr $9873.w		; 20 73 98 ; Jump to subroutine at $9873.w [Writes: Stack Pointer] [Flow: call]
	jsr $9B0E.w		; 20 0E 9B ; Jump to subroutine at $9B0E.w [Writes: Stack Pointer] [Flow: call]
	lda $49.b		; A5 49 ; Load $49.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F6.b		; 29 F6 ; Logical AND #$F6.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	ldx #$20.b		; A2 20 ; Load #$20.b into X register [Writes: X Index] [Flags: NZ]
	stx $0371.w		; 8E 71 03 ; Store X register to $0371.w [Reads: X Index]
	ldx #$13.b		; A2 13 ; Load #$13.b into X register [Writes: X Index] [Flags: NZ]
	stx $0375.w		; 8E 75 03 ; Store X register to $0375.w [Reads: X Index]
	.db $80, $1A		; 80 1A ; Branch always to $80, $1A [Flow: branch]
	sta $67.b		; [PATTERN: Memory clearing operation] 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	cmp $26.b		; C5 26 ; Compare $26.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	stz $2A.b		; 64 2A ; Store zero to $2A.b
	stz $2B.b		; 64 2B ; Store zero to $2B.b
	stz $6B.b		; [PATTERN: Memory clearing operation] 64 6B ; Store zero to $6B.b
	stz $48.b		; 64 48 ; Store zero to $48.b
	ldx #$20.b		; A2 20 ; Load #$20.b into X register [Writes: X Index] [Flags: NZ]
	stx $0371.w		; 8E 71 03 ; Store X register to $0371.w [Reads: X Index]
	ldx #$13.b		; A2 13 ; Load #$13.b into X register [Writes: X Index] [Flags: NZ]
	stx $0375.w		; 8E 75 03 ; Store X register to $0375.w [Reads: X Index]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	jsr $B64F.w		; 20 4F B6 ; Jump to subroutine at $B64F.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
	jsr $B7C7.w		; 20 C7 B7 ; Jump to subroutine at $B7C7.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	stz $0302.w		; 9C 02 03 ; Store zero to $0302.w
	jsr $E8F0.w		; 20 F0 E8 ; Jump to subroutine at $E8F0.w [Writes: Stack Pointer] [Flow: call]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $59		; F0 59 ; Branch if equal to $F0, $59 [Flow: branch]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	stz $037A.w		; 9C 7A 03 ; Store zero to $037A.w
	stz $020B.w		; [PATTERN: Memory clearing operation] 9C 0B 02 ; Store zero to $020B.w
	stz $0350.w		; 9C 50 03 ; Store zero to $0350.w
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $030E.w		; 9C 0E 03 ; Store zero to $030E.w
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	stz $3B.b		; [PATTERN: Memory clearing operation] 64 3B ; Store zero to $3B.b
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	stz $48.b		; 64 48 ; Store zero to $48.b
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	stz $25.b		; 64 25 ; Store zero to $25.b
	lda $0360.w		; AD 60 03 ; Load $0360.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; [PATTERN: Memory clearing operation] 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $82, $95, $14		; 82 95 14 ; Branch always long to $82, $95, $14 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $82, $D7, $01		; 82 D7 01 ; Branch always long to $82, $D7, $01 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	sta $25.b		; 85 25 ; Store accumulator to $25.b [Reads: Accumulator]
	sta $29.b		; [PATTERN: Memory clearing operation] 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	stz $02C6.w		; 9C C6 02 ; Store zero to $02C6.w
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $030E.w		; [PATTERN: Memory clearing operation] 9C 0E 03 ; Store zero to $030E.w
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	.db $82, $01, $02		; 82 01 02 ; Branch always long to $82, $01, $02 [Flow: branch]
	jsr $9BAA.w		; 20 AA 9B ; Jump to subroutine at $9BAA.w [Writes: Stack Pointer] [Flow: call]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F6.b		; 29 F6 ; Logical AND #$F6.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	ldx #$20.b		; A2 20 ; Load #$20.b into X register [Writes: X Index] [Flags: NZ]
	stx $0371.w		; 8E 71 03 ; Store X register to $0371.w [Reads: X Index]
	ldx #$13.b		; A2 13 ; Load #$13.b into X register [Writes: X Index] [Flags: NZ]
	stx $0375.w		; 8E 75 03 ; Store X register to $0375.w [Reads: X Index]
	.db $80, $1A		; 80 1A ; Branch always to $80, $1A [Flow: branch]
	sta $67.b		; [PATTERN: Memory clearing operation] 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	cmp $26.b		; C5 26 ; Compare $26.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	stz $2A.b		; 64 2A ; Store zero to $2A.b
	stz $2B.b		; 64 2B ; Store zero to $2B.b
	stz $6B.b		; [PATTERN: Memory clearing operation] 64 6B ; Store zero to $6B.b
	stz $48.b		; 64 48 ; Store zero to $48.b
	ldx #$20.b		; A2 20 ; Load #$20.b into X register [Writes: X Index] [Flags: NZ]
	stx $0371.w		; 8E 71 03 ; Store X register to $0371.w [Reads: X Index]
	ldx #$13.b		; A2 13 ; Load #$13.b into X register [Writes: X Index] [Flags: NZ]
	stx $0375.w		; 8E 75 03 ; Store X register to $0375.w [Reads: X Index]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	stz $0302.w		; 9C 02 03 ; Store zero to $0302.w
	jsr $E8F0.w		; 20 F0 E8 ; Jump to subroutine at $E8F0.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$00C0.w		; A9 C0 00 ; Load #$00C0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3C.b		; 85 3C ; Store accumulator to $3C.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; [PATTERN: Memory clearing operation] 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	sta $0FFC.w		; 8D FC 0F ; Store accumulator to $0FFC.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $46.b		; 64 46 ; Store zero to $46.b
	stz $0373.w		; 9C 73 03 ; Store zero to $0373.w
.ACCU 16
	rep #$20		; C2 20
	dec $3C.b		; C6 3C ; Decrement $3C.b [Reads: Direct Page] [Flags: NZ]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $0F		; 30 0F ; Branch if minus to $30, $0F [Flow: branch]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	cmp #$00A0.w		; C9 A0 00 ; Compare #$00A0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	cmp #$00BF.w		; [PATTERN: Memory clearing operation] C9 BF 00 ; Compare #$00BF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03EF.w		; 8D EF 03 ; Store accumulator to $03EF.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$29.b		; A9 29 ; Load #$29.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098BC1.l		; 22 C1 8B 09 ; Jump to subroutine long $098BC1.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	stz $0FFC.w		; 9C FC 0F ; Store zero to $0FFC.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$37.b		; A9 37 ; Load #$37.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	lda #$B0.b		; A9 B0 ; Load #$B0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0991FC.l		; 22 FC 91 09 ; Jump to subroutine long $0991FC.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$00E0.w		; A9 E0 00 ; Load #$00E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3C.b		; 85 3C ; Store accumulator to $3C.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; [PATTERN: Memory clearing operation] 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	sta $0112.w		; 8D 12 01 ; Store accumulator to $0112.w [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $46.b		; 64 46 ; Store zero to $46.b
	stz $0373.w		; 9C 73 03 ; Store zero to $0373.w
.ACCU 16
	rep #$20		; C2 20
	dec $3C.b		; C6 3C ; Decrement $3C.b [Reads: Direct Page] [Flags: NZ]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $17		; 30 17 ; Branch if minus to $30, $17 [Flow: branch]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	cmp #$00A0.w		; C9 A0 00 ; Compare #$00A0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	cmp #$00DF.w		; C9 DF 00 ; Compare #$00DF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; [PATTERN: Memory clearing operation] A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03EF.w		; 8D EF 03 ; Store accumulator to $03EF.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: NZ]
	lda #$29.b		; A9 29 ; Load #$29.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098BC1.l		; 22 C1 8B 09 ; Jump to subroutine long $098BC1.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E4.w		; 8D E4 02 ; Store accumulator to $02E4.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
	sep #$20		; E2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$B0.b		; A9 B0 ; Load #$B0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	lda #$78.b		; A9 78 ; Load #$78.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $08AF66.l		; 22 66 AF 08 ; Jump to subroutine long $08AF66.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3C.b		; 85 3C ; Store accumulator to $3C.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $3C.b		; C6 3C ; Decrement $3C.b [Reads: Direct Page] [Flags: NZ]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	jsr $AA6C.w		; 20 6C AA ; Jump to subroutine at $AA6C.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $03E9.w		; AD E9 03 ; Load $03E9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $08ED89.l		; 22 89 ED 08 ; Jump to subroutine long $08ED89.l [Writes: Stack Pointer] [Flow: call]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F2		; 10 F2 ; Branch if plus to $10, $F2 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$2C.b		; C9 2C ; Compare #$2C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsl $08E7E6.l		; 22 E6 E7 08 ; Jump to subroutine long $08E7E6.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3E.b		; 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	lda $23.b		; [PATTERN: Memory clearing operation] A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $41.b		; 85 41 ; Store accumulator to $41.b [Reads: Accumulator]
	jsr $8926.w		; 20 26 89 ; Jump to subroutine at $8926.w [Writes: Stack Pointer] [Flow: call]
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $0351.w		; 9C 51 03 ; Store zero to $0351.w
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $40		; 10 40 ; Branch if plus to $10, $40 [Flow: branch]
	lda $29.b		; A5 29 ; Load $29.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $3C		; 10 3C ; Branch if plus to $10, $3C [Flow: branch]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	jsr $8C44.w		; 20 44 8C ; Jump to subroutine at $8C44.w [Writes: Stack Pointer] [Flow: call]
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0998FC.l		; 22 FC 98 09 ; Jump to subroutine long $0998FC.l [Writes: Stack Pointer] [Flow: call]
	.db $82, $E5, $00		; 82 E5 00 ; Branch always long to $82, $E5, $00 [Flow: branch]
	inc $02C6.w		; EE C6 02 ; Increment $02C6.w [Flags: NZ]
	lda $02C6.w		; AD C6 02 ; Load $02C6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $02C7.w		; AD C7 02 ; Load $02C7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $F0, $FC		; F0 FC ; Branch if equal to $F0, $FC [Flow: branch]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	.db $D0, $05		; [PATTERN: Memory clearing operation] D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02C6.w		; 8D C6 02 ; Store accumulator to $02C6.w [Reads: Accumulator]
	stz $68.b		; 64 68 ; Store zero to $68.b
	stz $69.b		; 64 69 ; Store zero to $69.b
	stz $6A.b		; 64 6A ; Store zero to $6A.b
	jsr $E1BE.w		; 20 BE E1 ; Jump to subroutine at $E1BE.w [Writes: Stack Pointer] [Flow: call]
	dec $46.b		; C6 46 ; Decrement $46.b [Reads: Direct Page] [Flags: NZ]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $EA, $00		; 82 EA 00 ; Branch always long to $82, $EA, $00 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $10, $F2		; 10 F2 ; Branch if plus to $10, $F2 [Flow: branch]
	lda $29.b		; A5 29 ; Load $29.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $EE		; 10 EE ; Branch if plus to $10, $EE [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $D0, $00		; 82 D0 00 ; Branch always long to $82, $D0, $00 [Flow: branch]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $5D.b		; [PATTERN: Memory clearing operation] A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	stz $3D.b		; [PATTERN: Memory clearing operation] 64 3D ; Store zero to $3D.b
	stz $79.b		; 64 79 ; Store zero to $79.b
	jsr $8F1D.w		; 20 1D 8F ; Jump to subroutine at $8F1D.w [Writes: Stack Pointer] [Flow: call]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $8E, $00		; 82 8E 00 ; Branch always long to $82, $8E, $00 [Flow: branch]
	lda $02F8.w		; AD F8 02 ; Load $02F8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	stz $02F8.w		; 9C F8 02 ; Store zero to $02F8.w
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	ldy $5D.b		; A4 5D ; Load $5D.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpy #$04.b		; C0 04 ; Compare #$04.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $7EF356.l		; AF 56 F3 7E ; Load long $7EF356.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0998FC.l		; 22 FC 98 09 ; Jump to subroutine long $0998FC.l [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	lda $0357.w		; AD 57 03 ; Load $0357.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda $0359.w		; AD 59 03 ; Load $0359.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $012E.w		; AD 2E 01 ; Load $012E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	jsr $8C44.w		; 20 44 8C ; Jump to subroutine at $8C44.w [Writes: Stack Pointer] [Flow: call]
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0998FC.l		; 22 FC 98 09 ; Jump to subroutine long $0998FC.l [Writes: Stack Pointer] [Flow: call]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $EE.b		; [PATTERN: Memory clearing operation] 64 EE ; Store zero to $EE.b
	lda $047A.w		; AD 7A 04 ; Load $047A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $01FF05.l		; 22 05 FF 01 ; Jump to subroutine long $01FF05.l [Writes: Stack Pointer] [Flow: call]
	stz $24.b		; 64 24 ; Store zero to $24.b
	stz $25.b		; [PATTERN: Memory clearing operation] 64 25 ; Store zero to $25.b
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	stz $037A.w		; [PATTERN: Memory clearing operation] 9C 7A 03 ; Store zero to $037A.w
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $0360.w		; 9C 60 03 ; Store zero to $0360.w
	stz $27.b		; 64 27 ; Store zero to $27.b
	stz $28.b		; [PATTERN: Memory clearing operation] 64 28 ; Store zero to $28.b
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $46.b		; 64 46 ; Store zero to $46.b
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$21.b		; C9 21 ; Compare #$21.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	dec $02C5.w		; CE C5 02 ; Decrement $02C5.w [Flags: NZ]
	.db $10, $27		; 10 27 ; Branch if plus to $10, $27 [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02C5.w		; 8D C5 02 ; Store accumulator to $02C5.w [Reads: Accumulator]
	jsr $92A0.w		; 20 A0 92 ; Jump to subroutine at $92A0.w [Writes: Stack Pointer] [Flow: call]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	jsr $B64F.w		; 20 4F B6 ; Jump to subroutine at $B64F.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $28.b		; [PATTERN: Memory clearing operation] 64 28 ; Store zero to $28.b
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $27.b		; 64 27 ; Store zero to $27.b
	jsl $07E370.l		; 22 70 E3 07 ; Jump to subroutine long $07E370.l [Writes: Stack Pointer] [Flow: call]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsr $B7C7.w		; 20 C7 B7 ; Jump to subroutine at $B7C7.w [Writes: Stack Pointer] [Flow: call]
	stz $0302.w		; 9C 02 03 ; Store zero to $0302.w
	jsr $E8F0.w		; 20 F0 E8 ; Jump to subroutine at $E8F0.w [Writes: Stack Pointer] [Flow: call]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$E0.b		; C9 E0 ; Compare #$E0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	jsr $CF12.w		; 20 12 CF ; Jump to subroutine at $CF12.w [Writes: Stack Pointer] [Flow: call]
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	stz $25.b		; 64 25 ; Store zero to $25.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $90, $00		; 82 90 00 ; Branch always long to $82, $90, $00 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	stz $EE.b		; 64 EE ; Store zero to $EE.b
	jsr $CF7E.w		; 20 7E CF ; Jump to subroutine at $CF7E.w [Writes: Stack Pointer] [Flow: call]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda $034C.w		; AD 4C 03 ; Load $034C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	stx $034E.w		; 8E 4E 03 ; Store X register to $034E.w [Reads: X Index]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0300.w		; 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	sta $67.b		; [PATTERN: Memory clearing operation] 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	cmp $26.b		; C5 26 ; Compare $26.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	stz $2A.b		; 64 2A ; Store zero to $2A.b
	stz $2B.b		; 64 2B ; Store zero to $2B.b
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: NZ]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx $27.b		; 86 27 ; Store X register to $27.b [Reads: X Index]
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx $28.b		; 86 28 ; Store X register to $28.b [Reads: X Index]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	.db $82, $AC, $FD		; 82 AC FD ; Branch always long to $82, $AC, $FD [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	lda $035B.w		; AD 5B 03 ; Load $035B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	stz $00EE.w		; 9C EE 00 ; Store zero to $00EE.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $034E.w		; 8D 4E 03 ; Store accumulator to $034E.w [Reads: Accumulator]
	.db $82, $72, $FF		; 82 72 FF ; Branch always long to $82, $72, $FF [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lda $29.b		; A5 29 ; Load $29.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	sta $25.b		; 85 25 ; Store accumulator to $25.b [Reads: Accumulator]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $29.b		; A5 29 ; Load $29.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $66.b		; 85 66 ; Store accumulator to $66.b [Reads: Accumulator]
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $27.b		; 64 27 ; Store zero to $27.b
	stz $28.b		; [PATTERN: Memory clearing operation] 64 28 ; Store zero to $28.b
	stz $0351.w		; 9C 51 03 ; Store zero to $0351.w
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $0362.w		; AD 62 03 ; Load $0362.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	jsr $8AD1.w		; 20 D1 8A ; Jump to subroutine at $8AD1.w [Writes: Stack Pointer] [Flow: call]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda $0362.w		; AD 62 03 ; Load $0362.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	lda $0363.w		; AD 63 03 ; Load $0363.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02C7.w		; 8D C7 02 ; Store accumulator to $02C7.w [Reads: Accumulator]
	lda $0364.w		; AD 64 03 ; Load $0364.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	lda $0365.w		; AD 65 03 ; Load $0365.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $25.b		; 85 25 ; Store accumulator to $25.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsr $8946.w		; 20 46 89 ; Jump to subroutine at $8946.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E370.l		; 22 70 E3 07 ; Jump to subroutine long $07E370.l [Writes: Stack Pointer] [Flow: call]
	lda $29.b		; A5 29 ; Load $29.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $4D		; 10 4D ; Branch if plus to $10, $4D [Flow: branch]
	cmp #$A0.b		; C9 A0 ; Compare #$A0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFF0.w		; C9 F0 FF ; Compare #$FFF0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $3C		; 90 3C ; Branch if carry clear to $90, $3C [Flow: branch]
	stz $24.b		; 64 24 ; Store zero to $24.b
.ACCU 8
	sep #$20		; E2 20
	jsr $8F1D.w		; 20 1D 8F ; Jump to subroutine at $8F1D.w [Writes: Stack Pointer] [Flow: call]
	lda $5B.b		; A5 5B ; Load $5B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; [PATTERN: Memory clearing operation] D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $78.b		; 64 78 ; Store zero to $78.b
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	sta $25.b		; [PATTERN: Memory clearing operation] 85 25 ; Store accumulator to $25.b [Reads: Accumulator]
	stz $46.b		; 64 46 ; Store zero to $46.b
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $EE.b		; 64 EE ; Store zero to $EE.b
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $0364.w		; AD 64 03 ; Load $0364.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $24.b		; E5 24 ; Subtract $24.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	lda $29.b		; A5 29 ; Load $29.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0362.w		; 8D 62 03 ; Store accumulator to $0362.w [Reads: Accumulator]
	lda $02C7.w		; AD C7 02 ; Load $02C7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0363.w		; 8D 63 03 ; Store accumulator to $0363.w [Reads: Accumulator]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0364.w		; 8D 64 03 ; Store accumulator to $0364.w [Reads: Accumulator]
	lda $25.b		; A5 25 ; Load $25.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0365.w		; 8D 65 03 ; Store accumulator to $0365.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0362.w		; AD 62 03 ; Load $0362.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	lda $0363.w		; AD 63 03 ; Load $0363.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02C7.w		; 8D C7 02 ; Store accumulator to $02C7.w [Reads: Accumulator]
	lda $0364.w		; AD 64 03 ; Load $0364.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsr $8946.w		; 20 46 89 ; Jump to subroutine at $8946.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E370.l		; 22 70 E3 07 ; Jump to subroutine long $07E370.l [Writes: Stack Pointer] [Flow: call]
	lda $29.b		; A5 29 ; Load $29.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $82, $89, $00		; 82 89 00 ; Branch always long to $82, $89, $00 [Flow: branch]
	cmp #$A0.b		; C9 A0 ; Compare #$A0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	lda #$A0.b		; A9 A0 ; Load #$A0.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	lda $24.b		; [PATTERN: Memory clearing operation] A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $7B		; 90 7B ; Branch if carry clear to $90, $7B [Flow: branch]
	stz $24.b		; 64 24 ; Store zero to $24.b
	stz $25.b		; 64 25 ; Store zero to $25.b
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $36		; D0 36 ; Branch if not equal to $D0, $36 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	jsr $8C44.w		; 20 44 8C ; Jump to subroutine at $8C44.w [Writes: Stack Pointer] [Flow: call]
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0998FC.l		; 22 FC 98 09 ; Jump to subroutine long $0998FC.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5C.b		; 85 5C ; Store accumulator to $5C.b [Reads: Accumulator]
	stz $5A.b		; 64 5A ; Store zero to $5A.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5B.b		; 85 5B ; Store accumulator to $5B.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	jsr $8F1D.w		; 20 1D 8F ; Jump to subroutine at $8F1D.w [Writes: Stack Pointer] [Flow: call]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; [PATTERN: Memory clearing operation] D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $78.b		; 64 78 ; Store zero to $78.b
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	sta $25.b		; [PATTERN: Memory clearing operation] 85 25 ; Store accumulator to $25.b [Reads: Accumulator]
	stz $46.b		; 64 46 ; Store zero to $46.b
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $EE.b		; 64 EE ; Store zero to $EE.b
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $0364.w		; AD 64 03 ; Load $0364.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $24.b		; E5 24 ; Subtract $24.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	lda $29.b		; A5 29 ; Load $29.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0362.w		; 8D 62 03 ; Store accumulator to $0362.w [Reads: Accumulator]
	lda $02C7.w		; AD C7 02 ; Load $02C7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0363.w		; 8D 63 03 ; Store accumulator to $0363.w [Reads: Accumulator]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0364.w		; 8D 64 03 ; Store accumulator to $0364.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $F00008.l,X		; FF 08 00 F0 ; Subtract with carry (long,X) $F00008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $A50010.l,X		; FF 10 00 A5 ; Subtract with carry (long,X) $A50010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	and ($85.b,X)		; 21 85 ; Logical AND ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($A5.b,S),Y		; 33 A5 ; AND accumulator (stack relative indirect indexed) ($A5.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $3285.w		; 20 85 32 ; Jump to subroutine at $3285.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $3E.b		; E5 3E ; Subtract $3E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $8AC9.w,Y		; B9 C9 8A ; Load $8AC9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $CDCB.w		; 20 CB CD ; Jump to subroutine at $CDCB.w [Writes: Stack Pointer] [Flow: call]
	lda $0343.w		; AD 43 03 ; Load $0343.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $59.b		; 05 59 ; Logical OR $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $035B.w		; 0D 5B 03 ; Logical OR $035B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0357.w		; 0D 57 03 ; Logical OR $0357.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0341.w		; 0D 41 03 ; Logical OR $0341.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $D9		; D0 D9 ; Branch if not equal to $D0, $D9 [Flow: branch]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda $0026.w		; [PATTERN: Memory clearing operation] AD 26 00 ; Load $0026.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5C.b		; 85 5C ; Store accumulator to $5C.b [Reads: Accumulator]
	stz $5A.b		; 64 5A ; Store zero to $5A.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5B.b		; 85 5B ; Store accumulator to $5B.b [Reads: Accumulator]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $8ACD.w,Y		; B9 CD 8A ; Load $8ACD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3E.b		; 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$F0.b		; C9 F0 ; Compare #$F0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $32.b		; E5 32 ; Subtract $32.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0364.w		; 8D 64 03 ; Store accumulator to $0364.w [Reads: Accumulator]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	txa		; [PATTERN: Memory clearing operation] 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $27.b		; 64 27 ; Store zero to $27.b
	stz $0351.w		; 9C 51 03 ; Store zero to $0351.w
	.db $82, $7A, $FE		; 82 7A FE ; Branch always long to $82, $7A, $FE [Flow: branch]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $30, $38		; 30 38 ; Branch if minus to $30, $38 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	.db $10, $1C		; 10 1C ; Branch if plus to $10, $1C [Flow: branch]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $33.b		; 85 33 ; Store accumulator to $33.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $32.b		; 85 32 ; Store accumulator to $32.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $3E.b		; E5 3E ; Subtract $3E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $8AC9.w,Y		; B9 C9 8A ; Load $8AC9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $CDCB.w		; 20 CB CD ; Jump to subroutine at $CDCB.w [Writes: Stack Pointer] [Flow: call]
	lda $0343.w		; AD 43 03 ; Load $0343.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $035B.w		; 0D 5B 03 ; Logical OR $035B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0357.w		; 0D 57 03 ; Logical OR $0357.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0341.w		; 0D 41 03 ; Logical OR $0341.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	lda $33.b		; A5 33 ; Load $33.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	lda $32.b		; A5 32 ; Load $32.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $8B8B.w,X		; BD 8B 8B ; Load $8B8B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0362.w		; 8D 62 03 ; Store accumulator to $0362.w [Reads: Accumulator]
	sta $0363.w		; 8D 63 03 ; Store accumulator to $0363.w [Reads: Accumulator]
	lda $8B93.w,X		; BD 93 8B ; Load $8B93.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$FF.b		; C0 FF ; Compare #$FF.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	.db $80, $39		; 80 39 ; Branch always to $80, $39 [Flow: branch]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $8ACD.w,Y		; B9 CD 8A ; Load $8ACD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3E.b		; 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $32.b		; E5 32 ; Subtract $32.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0364.w		; 8D 64 03 ; Store accumulator to $0364.w [Reads: Accumulator]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	lda $0026.w		; [PATTERN: Memory clearing operation] AD 26 00 ; Load $0026.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc $E80018.l,X		; FF 18 00 E8 ; Subtract with carry (long,X) $E80018.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $200018.l,X		; FF 18 00 20 ; Subtract with carry (long,X) $200018.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $A050.w		; 20 50 A0 ; Jump to subroutine at $A050.w [Writes: Stack Pointer] [Flow: call]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $10, $02		; [PATTERN: Memory clearing operation] 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $66.b		; 84 66 ; Store Y register to $66.b [Reads: Y Index]
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $27.b		; 64 27 ; Store zero to $27.b
	stz $0351.w		; 9C 51 03 ; Store zero to $0351.w
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $6E		; D0 6E ; Branch if not equal to $D0, $6E [Flow: branch]
	lda $0362.w		; AD 62 03 ; Load $0362.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $69		; D0 69 ; Branch if not equal to $D0, $69 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0F.b		; E9 0F ; Subtract #$0F.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8C59.w,X		; 7D 59 8C ; Add $8C59.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $8C65.w,X		; BD 65 8C ; Load $8C65.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $8C67.w,X		; 7D 67 8C ; Add $8C67.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0364.w		; 8D 64 03 ; Store accumulator to $0364.w [Reads: Accumulator]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $8C61.w,X		; BD 61 8C ; Load $8C61.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3E.b		; 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	.db $82, $16, $FD		; 82 16 FD ; Branch always long to $82, $16, $FD [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $E00008.l,X		; FF 08 00 E0 ; Subtract with carry (long,X) $E00008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F00020.l,X		; FF 20 00 F0 ; Subtract with carry (long,X) $F00020.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $140010.l,X		; FF 10 00 14 ; Subtract with carry (long,X) $140010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $241C.w		; 1C 1C 24 ; Test and reset bits $241C.w [Reads: Accumulator] [Flags: Z]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $26.b		; 24 26 ; Test bits $26.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: NCZ]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: NCZ]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $26.b		; 24 26 ; Test bits $26.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: NCZ]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: NCZ]
	rol $26.b		; 26 26 ; Rotate left $26.b [Reads: Direct Page] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $33.b		; 85 33 ; Store accumulator to $33.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $32.b		; 85 32 ; Store accumulator to $32.b [Reads: Accumulator]
	ldx #$07.b		; A2 07 ; Load #$07.b into X register [Writes: X Index] [Flags: NZ]
	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
.ACCU 16
	rep #$20		; C2 20
	lda $8CEF.w,Y		; B9 EF 8C ; Load $8CEF.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $CE2A.w		; 20 2A CE ; Jump to subroutine at $CE2A.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $0343.w		; AD 43 03 ; Load $0343.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $035B.w		; 0D 5B 03 ; Logical OR $035B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0357.w		; 0D 57 03 ; Logical OR $0357.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0341.w		; 0D 41 03 ; Logical OR $0341.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $59.b		; 05 59 ; Logical OR $59.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; [PATTERN: Memory clearing operation] 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda $0026.w		; AD 26 00 ; Load $0026.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	stz $02CB.w		; 9C CB 02 ; Store zero to $02CB.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	jsr $9873.w		; 20 73 98 ; Jump to subroutine at $9873.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $AE		; 10 AE ; Branch if plus to $10, $AE [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $8CF3.w,Y		; B9 F3 8C ; Load $8CF3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $32.b		; 65 32 ; Add $32.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
.ACCU 16
	rep #$20		; C2 20
	lda $8CF7.w,Y		; B9 F7 8C ; Load $8CF7.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $32.b		; A5 32 ; Load $32.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $22.b		; E5 22 ; Subtract $22.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $8CFB.w,X		; BD FB 8C ; Load $8CFB.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda $8D13.w,X		; BD 13 8D ; Load $8D13.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0362.w		; 8D 62 03 ; Store accumulator to $0362.w [Reads: Accumulator]
	sta $0363.w		; 8D 63 03 ; Store accumulator to $0363.w [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0351.w		; 9C 51 03 ; Store zero to $0351.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsr $8932.w		; 20 32 89 ; Jump to subroutine at $8932.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E370.l		; 22 70 E3 07 ; Jump to subroutine long $07E370.l [Writes: Stack Pointer] [Flow: call]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $24		; 10 24 ; Branch if plus to $10, $24 [Flow: branch]
	jsr $8F1D.w		; 20 1D 8F ; Jump to subroutine at $8F1D.w [Writes: Stack Pointer] [Flow: call]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; [PATTERN: Memory clearing operation] D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; [PATTERN: Memory clearing operation] 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	sta $25.b		; 85 25 ; Store accumulator to $25.b [Reads: Accumulator]
	stz $46.b		; 64 46 ; Store zero to $46.b
	stz $50.b		; 64 50 ; Store zero to $50.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $0A.b		; 04 0A ; Test and set bits $0A.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	ora ($12.b)		; 12 12 ; OR accumulator with memory (indirect) ($12.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($14.b)		; 12 14 ; OR accumulator with memory (indirect) ($14.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	asl $1A.b,X		; 16 1A ; Arithmetic shift left $1A.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	trb $03A0.w		; 1C A0 03 ; Test and reset bits $03A0.w [Reads: Accumulator] [Flags: Z]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; [PATTERN: Memory clearing operation] 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $66.b		; 84 66 ; Store Y register to $66.b [Reads: Y Index]
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $27.b		; 64 27 ; Store zero to $27.b
	stz $0351.w		; 9C 51 03 ; Store zero to $0351.w
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	lda $0362.w		; AD 62 03 ; Load $0362.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3B		; D0 3B ; Branch if not equal to $D0, $3B [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $66.b		; 85 66 ; Store accumulator to $66.b [Reads: Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	jsr $8E7B.w		; 20 7B 8E ; Jump to subroutine at $8E7B.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $32.b		; E5 32 ; Subtract $32.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $8DFD.w,Y		; B9 FD 8D ; Load $8DFD.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	.db $82, $98, $FB		; 82 98 FB ; Branch always long to $82, $98, $FB [Flow: branch]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc $F70008.l,X		; FF 08 00 F7 ; Subtract with carry (long,X) $F70008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E80009.l,X		; FF 09 00 E8 ; Subtract with carry (long,X) $E80009.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $060018.l,X		; FF 18 00 06 ; Subtract with carry (long,X) $060018.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	and ($85.b,X)		; 21 85 ; Logical AND ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and ($A5.b,S),Y		; 33 A5 ; AND accumulator (stack relative indirect indexed) ($A5.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	jsr $3285.w		; 20 85 32 ; Jump to subroutine at $3285.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $3E.b		; E5 3E ; Subtract $3E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
.ACCU 16
	rep #$20		; C2 20
	lda $8E6D.w,Y		; B9 6D 8E ; Load $8E6D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $8E71.w,Y		; B9 71 8E ; Load $8E71.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $CDCB.w		; 20 CB CD ; Jump to subroutine at $CDCB.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $8E79.w,Y		; B9 79 8E ; Load $8E79.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $0343.w		; AD 43 03 ; Load $0343.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $035B.w		; 0D 5B 03 ; Logical OR $035B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0357.w		; 0D 57 03 ; Logical OR $0357.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0341.w		; 0D 41 03 ; Logical OR $0341.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $72.b		; 25 72 ; Logical AND $72.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $72.b		; C5 72 ; Compare $72.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $BE		; D0 BE ; Branch if not equal to $D0, $BE [Flow: branch]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $72.b		; 25 72 ; Logical AND $72.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda $0026.w		; [PATTERN: Memory clearing operation] AD 26 00 ; Load $0026.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $8E75.w,Y		; B9 75 8E ; Load $8E75.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3E.b		; 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $32.b		; E5 32 ; Subtract $32.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0364.w		; 8D 64 03 ; Store accumulator to $0364.w [Reads: Accumulator]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; [PATTERN: Function entry: Index register preservation prologue] DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0998FC.l		; 22 FC 98 09 ; Jump to subroutine long $0998FC.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	.db $82, $91, $F4		; 82 91 F4 ; Branch always long to $82, $91, $F4 [Flow: branch]
	ldx #$17.b		; A2 17 ; Load #$17.b into X register [Writes: X Index] [Flags: NZ]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	ldx #$1C.b		; A2 1C ; Load #$1C.b into X register [Writes: X Index] [Flags: NZ]
	.db $80, $1A		; 80 1A ; Branch always to $80, $1A [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0998FC.l		; 22 FC 98 09 ; Jump to subroutine long $0998FC.l [Writes: Stack Pointer] [Flow: call]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	stx $5D.b		; 86 5D ; Store X register to $5D.b [Reads: X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($07.b,X)		; 01 07 ; Logical OR ($07.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $00FF0F.l		; 0F 0F FF 00 ; OR accumulator with memory (long) $00FF0F.l [Writes: Accumulator] [Flags: NZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $F514.w		; 20 14 F5 ; Jump to subroutine at $F514.w [Writes: Stack Pointer] [Flow: call]
	jsr $82DA.w		; 20 DA 82 ; Jump to subroutine at $82DA.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$17.b		; C9 17 ; Compare #$17.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $0A, $F4		; 82 0A F4 ; Branch always long to $82, $0A, $F4 [Flow: branch]
	rts		; [PATTERN: Memory clearing operation] 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $0374.w		; 9C 74 03 ; Store zero to $0374.w
	stz $5E.b		; [PATTERN: Memory clearing operation] 64 5E ; Store zero to $5E.b
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $50.b		; 64 50 ; Store zero to $50.b
	.db $82, $AF, $01		; 82 AF 01 ; Branch always long to $82, $AF, $01 [Flow: branch]
	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3C.b		; [PATTERN: Memory clearing operation] 85 3C ; Store accumulator to $3C.b [Reads: Accumulator]
	stz $02CA.w		; 9C CA 02 ; Store zero to $02CA.w
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $45		; F0 45 ; Branch if equal to $F0, $45 [Flow: branch]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $0374.w		; [PATTERN: Memory clearing operation] 9C 74 03 ; Store zero to $0374.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $0372.w		; 9C 72 03 ; Store zero to $0372.w
	stz $48.b		; 64 48 ; Store zero to $48.b
	lda $0360.w		; AD 60 03 ; Load $0360.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2A		; F0 2A ; Branch if equal to $F0, $2A [Flow: branch]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; [PATTERN: Memory clearing operation] 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $82, $6B, $09		; 82 6B 09 ; Branch always long to $82, $6B, $09 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $82, $AD, $F6		; 82 AD F6 ; Branch always long to $82, $AD, $F6 [Flow: branch]
	lda $0374.w		; AD 74 03 ; Load $0374.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0374.w		; AD 74 03 ; Load $0374.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda $4F.b		; A5 4F ; Load $4F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec $4F.b		; C6 4F ; Decrement $4F.b [Reads: Direct Page] [Flags: NZ]
	and $8F65.w,X		; 3D 65 8F ; AND accumulator with memory $8F65.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	dec $0374.w		; CE 74 03 ; Decrement $0374.w [Flags: NZ]
	.db $10, $17		; 10 17 ; Branch if plus to $10, $17 [Flow: branch]
	stz $0374.w		; 9C 74 03 ; Store zero to $0374.w
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cmp $8F68.w,X		; DD 68 8F ; Compare accumulator $8F68.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $8F77.w,X		; BD 77 8F ; Load $8F77.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	.db $82, $96, $00		; 82 96 00 ; Branch always long to $82, $96, $00 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4F.b		; [PATTERN: Memory clearing operation] 85 4F ; Store accumulator to $4F.b [Reads: Accumulator]
	bit $F2.b		; 24 F2 ; Test bits $F2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $30, $17		; 30 17 ; Branch if minus to $30, $17 [Flow: branch]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $0374.w		; 9C 74 03 ; Store zero to $0374.w
	stz $5E.b		; [PATTERN: Memory clearing operation] 64 5E ; Store zero to $5E.b
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $0372.w		; 9C 72 03 ; Store zero to $0372.w
	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	stz $50.b		; 64 50 ; Store zero to $50.b
	.db $82, $FF, $00		; 82 FF 00 ; Branch always long to $82, $FF, $00 [Flow: branch]
	ldy #$00.b		; [PATTERN: Memory clearing operation] A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098FC1.l		; 22 C1 8F 09 ; Jump to subroutine long $098FC1.l [Writes: Stack Pointer] [Flow: call]
	stz $30.b		; 64 30 ; Store zero to $30.b
	stz $31.b		; 64 31 ; Store zero to $31.b
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02F1.w		; 8D F1 02 ; Store accumulator to $02F1.w [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $8F61.w,X		; BD 61 8F ; Load $8F61.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $3E.b		; 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	sta $41.b		; 85 41 ; Store accumulator to $41.b [Reads: Accumulator]
	jsr $E595.w		; 20 95 E5 ; Jump to subroutine at $E595.w [Writes: Stack Pointer] [Flow: call]
	jsr $E5F0.w		; 20 F0 E5 ; Jump to subroutine at $E5F0.w [Writes: Stack Pointer] [Flow: call]
	lda $02F5.w		; AD F5 02 ; Load $02F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $07E3DD.l		; 22 DD E3 07 ; Jump to subroutine long $07E3DD.l [Writes: Stack Pointer] [Flow: call]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $3E.b		; E5 3E ; Subtract $3E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $3F.b		; E5 3F ; Subtract $3F.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
	jsr $B7C7.w		; 20 C7 B7 ; Jump to subroutine at $B7C7.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8F0.w		; 20 F0 E8 ; Jump to subroutine at $E8F0.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $88, $00		; 82 88 00 ; Branch always long to $82, $88, $00 [Flow: branch]
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	dec $02F1.w		; CE F1 02 ; Decrement $02F1.w [Flags: NZ]
	lda $02F1.w		; AD F1 02 ; Load $02F1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02F1.w		; 8D F1 02 ; Store accumulator to $02F1.w [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098FBA.l		; 22 BA 8F 09 ; Jump to subroutine long $098FBA.l [Writes: Stack Pointer] [Flow: call]
	stz $79.b		; 64 79 ; Store zero to $79.b
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $3A.b		; 04 3A ; Test and set bits $3A.b [Reads: Accumulator] [Flags: Z]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3C.b		; 85 3C ; Store accumulator to $3C.b [Reads: Accumulator]
	stz $46.b		; 64 46 ; Store zero to $46.b
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $8F61.w,X		; BD 61 8F ; Load $8F61.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda $3A.b		; [PATTERN: Memory clearing operation] A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$7F.b		; 29 7F ; Logical AND #$7F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	.db $82, $26, $00		; 82 26 00 ; Branch always long to $82, $26, $00 [Flow: branch]
	lda $49.b		; A5 49 ; Load $49.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $8F61.w,X		; BD 61 8F ; Load $8F61.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	jsr $B64F.w		; 20 4F B6 ; Jump to subroutine at $B64F.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
	jsr $B7C7.w		; 20 C7 B7 ; Jump to subroutine at $B7C7.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	stz $0302.w		; 9C 02 03 ; Store zero to $0302.w
	jsr $E8F0.w		; 20 F0 E8 ; Jump to subroutine at $E8F0.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F514.w		; 20 14 F5 ; Jump to subroutine at $F514.w [Writes: Stack Pointer] [Flow: call]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $0374.w		; [PATTERN: Memory clearing operation] AD 74 03 ; Load $0374.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $19		; 90 19 ; Branch if carry clear to $90, $19 [Flow: branch]
	stz $0374.w		; 9C 74 03 ; Store zero to $0374.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda #$00.b		; [PATTERN: Memory clearing operation] A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $0372.w		; 9C 72 03 ; Store zero to $0372.w
	stz $032B.w		; 9C 2B 03 ; Store zero to $032B.w
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0D		; B0 0D ; Branch if carry set to $B0, $0D [Flow: branch]
	stz $50.b		; 64 50 ; Store zero to $50.b
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $0374.w		; AD 74 03 ; Load $0374.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0374.w		; 8D 74 03 ; Store accumulator to $0374.w [Reads: Accumulator]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$1E.b		; C9 1E ; Compare #$1E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; [PATTERN: Memory clearing operation] 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	stz $0374.w		; 9C 74 03 ; Store zero to $0374.w
	stz $5E.b		; [PATTERN: Memory clearing operation] 64 5E ; Store zero to $5E.b
	stz $0372.w		; 9C 72 03 ; Store zero to $0372.w
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $032B.w		; 9C 2B 03 ; Store zero to $032B.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($AD.b,X)		; 01 AD ; Logical OR ($AD.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	adc ($03.b)		; 72 03 ; Add with carry (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $02F1.w		; AD F1 02 ; Load $02F1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $90, $00		; 82 90 00 ; Branch always long to $82, $90, $00 [Flow: branch]
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0993F3.l		; 22 F3 93 09 ; Jump to subroutine long $0993F3.l [Writes: Stack Pointer] [Flow: call]
	jsl $0680FA.l		; 22 FA 80 06 ; Jump to subroutine long $0680FA.l [Writes: Stack Pointer] [Flow: call]
	lda $012F.w		; AD 2F 01 ; Load $012F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$1B.b		; C9 1B ; Compare #$1B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	cmp #$32.b		; C9 32 ; Compare #$32.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	ldx $66.b		; A6 66 ; Load $66.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $91BD.w,X		; BD BD 91 ; Load $91BD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda $91C1.w,X		; BD C1 91 ; Load $91C1.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $02C7.w		; 8D C7 02 ; Store accumulator to $02C7.w [Reads: Accumulator]
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	lda $91ED.w,X		; BD ED 91 ; Load $91ED.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	lda $91C5.w,X		; BD C5 91 ; Load $91C5.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0338.w		; 8D 38 03 ; Store accumulator to $0338.w [Reads: Accumulator]
	lda $91C9.w,X		; BD C9 91 ; Load $91C9.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $033A.w		; 8D 3A 03 ; Store accumulator to $033A.w [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $91CD.w,X		; BD CD 91 ; Load $91CD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $033C.w		; 8D 3C 03 ; Store accumulator to $033C.w [Reads: Accumulator]
	lda $91DD.w,X		; BD DD 91 ; Load $91DD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $033E.w		; 8D 3E 03 ; Store accumulator to $033E.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda #$01.b		; [PATTERN: Memory clearing operation] A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	sta $02F8.w		; 8D F8 02 ; Store accumulator to $02F8.w [Reads: Accumulator]
	stz $74.b		; 64 74 ; Store zero to $74.b
	stz $0360.w		; 9C 60 03 ; Store zero to $0360.w
	stz $5E.b		; [PATTERN: Memory clearing operation] 64 5E ; Store zero to $5E.b
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; [PATTERN: Memory clearing operation] D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $31.b		; 64 31 ; Store zero to $31.b
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	stz $30.b		; 64 30 ; Store zero to $30.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $66.b		; 85 66 ; Store accumulator to $66.b [Reads: Accumulator]
	jsr $91F1.w		; 20 F1 91 ; Jump to subroutine at $91F1.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $67.b		; 64 67 ; Store zero to $67.b
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $27.b		; A5 27 ; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $92B9.w		; 20 B9 92 ; Jump to subroutine at $92B9.w [Writes: Stack Pointer] [Flow: call]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $91ED.w,Y		; B9 ED 91 ; Load $91ED.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $67.b		; 04 67 ; Test and set bits $67.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora #$06.b		; 09 06 ; Logical OR #$06.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $09.b		; 06 09 ; Arithmetic shift left $09.b [Reads: Direct Page] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $0A03.w		; 0C 03 0A ; Test and set bits $0A03.w [Reads: Accumulator] [Flags: Z]
	ora $64.b		; 05 64 ; Logical OR $64.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	adc [$AD.b]		; 67 AD ; Add with carry (long) [$AD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	inc $02CA.w		; EE CA 02 ; Increment $02CA.w [Flags: NZ]
	lda $02CA.w		; AD CA 02 ; Load $02CA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02CA.w		; 8D CA 02 ; Store accumulator to $02CA.w [Reads: Accumulator]
	.db $80, $26		; 80 26 ; Branch always to $80, $26 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	lda $0374.w		; AD 74 03 ; Load $0374.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $8E, $FC		; 82 8E FC ; Branch always long to $82, $8E, $FC [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	and $67.b		; 25 67 ; Logical AND $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3F		; D0 3F ; Branch if not equal to $D0, $3F [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $62, $FC		; 82 62 FC ; Branch always long to $82, $62, $FC [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	stz $5B.b		; 64 5B ; Store zero to $5B.b
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$1C.b		; A0 1C ; Load #$1C.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $5D.b		; 84 5D ; Store Y register to $5D.b [Reads: Y Index]
	cpy #$17.b		; C0 17 ; Compare #$17.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	cpy #$1C.b		; C0 1C ; Compare #$1C.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	.db $82, $B4, $ED		; 82 B4 ED ; Branch always long to $82, $B4, $ED [Flow: branch]
	.db $82, $49, $F0		; 82 49 F0 ; Branch always long to $82, $49, $F0 [Flow: branch]
	.db $82, $0A, $F0		; 82 0A F0 ; Branch always long to $82, $0A, $F0 [Flow: branch]
	jsr $CF12.w		; 20 12 CF ; Jump to subroutine at $CF12.w [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	lda $59.b		; [PATTERN: Memory clearing operation] A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	stz $5B.b		; 64 5B ; Store zero to $5B.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$1C.b		; A0 1C ; Load #$1C.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $5D.b		; 84 5D ; Store Y register to $5D.b [Reads: Y Index]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	.db $82, $95, $00		; 82 95 00 ; Branch always long to $82, $95, $00 [Flow: branch]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	lda $5B.b		; A5 5B ; Load $5B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $34		; [PATTERN: Memory clearing operation] F0 34 ; Branch if equal to $F0, $34 [Flow: branch]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	stz $03F7.w		; 9C F7 03 ; Store zero to $03F7.w
	stz $56.b		; 64 56 ; Store zero to $56.b
	stz $02E0.w		; [PATTERN: Memory clearing operation] 9C E0 02 ; Store zero to $02E0.w
	stz $03F5.w		; 9C F5 03 ; Store zero to $03F5.w
	stz $03F6.w		; 9C F6 03 ; Store zero to $03F6.w
	stz $67.b		; 64 67 ; Store zero to $67.b
	stz $00.b		; 64 00 ; Store zero to $00.b
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5B.b		; [PATTERN: Memory clearing operation] 85 5B ; Store accumulator to $5B.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $0301.w		; [PATTERN: Memory clearing operation] 9C 01 03 ; Store zero to $0301.w
	stz $037A.w		; 9C 7A 03 ; Store zero to $037A.w
	stz $46.b		; 64 46 ; Store zero to $46.b
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $56		; 80 56 ; Branch always to $80, $56 [Flow: branch]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $92CF.w,X		; DD CF 92 ; Compare accumulator $92CF.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $ED		; 10 ED ; Branch if plus to $10, $ED [Flow: branch]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	stx $02C9.w		; 8E C9 02 ; Store X register to $02C9.w [Reads: X Index]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $92C7.w,X		; 3D C7 92 ; AND accumulator with memory $92C7.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx $02C9.w		; AE C9 02 ; Load $02C9.w into X register [Writes: X Index] [Flags: NZ]
	lda $92BF.w,X		; BD BF 92 ; Load $92BF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tsb $67.b		; 04 67 ; Test and set bits $67.b [Reads: Accumulator] [Flags: Z]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	jsr $B64F.w		; 20 4F B6 ; Jump to subroutine at $B64F.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
	jsr $B7C7.w		; [PATTERN: Memory clearing operation] 20 C7 B7 ; Jump to subroutine at $B7C7.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E9D3.l		; 22 D3 E9 07 ; Jump to subroutine long $07E9D3.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $46.b		; 64 46 ; Store zero to $46.b
	stz $24.b		; [PATTERN: Memory clearing operation] 64 24 ; Store zero to $24.b
	stz $25.b		; 64 25 ; Store zero to $25.b
	stz $29.b		; 64 29 ; Store zero to $29.b
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $0373.w		; 9C 73 03 ; Store zero to $0373.w
	stz $02E1.w		; 9C E1 02 ; Store zero to $02E1.w
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	inc $037B.w		; EE 7B 03 ; Increment $037B.w [Flags: NZ]
	dec $5C.b		; C6 5C ; Decrement $5C.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $E3		; 10 E3 ; Branch if plus to $10, $E3 [Flow: branch]
	inc $5A.b		; E6 5A ; Increment $5A.b [Reads: Direct Page] [Flags: NZ]
	ldx $5A.b		; A6 5A ; Load $5A.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5C.b		; 85 5C ; Store accumulator to $5C.b [Reads: Accumulator]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stx $02F9.w		; 8E F9 02 ; Store X register to $02F9.w [Reads: X Index]
	cpx #$06.b		; E0 06 ; Compare #$06.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $C8		; D0 C8 ; Branch if not equal to $D0, $C8 [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $11.b		; 84 11 ; Store Y register to $11.b [Reads: Y Index]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5A.b		; 85 5A ; Store accumulator to $5A.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5B.b		; 85 5B ; Store accumulator to $5B.b [Reads: Accumulator]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4B.b		; 85 4B ; Store accumulator to $4B.b [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; [PATTERN: Memory clearing operation] 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; [PATTERN: Memory clearing operation] 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	stz $030B.w		; 9C 0B 03 ; Store zero to $030B.w
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	jsl $02B929.l		; 22 29 B9 02 ; Jump to subroutine long $02B929.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$0070.w		; A2 70 00 ; Load #$0070.w into X register [Writes: X Index] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $00990C.l,X		; DF 0C 99 00 ; Compare accumulator (long,X) $00990C.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	.db $F0, $52		; F0 52 ; Branch if equal to $F0, $52 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	lda $7EC000.l		; AF 00 C0 7E ; Load long $7EC000.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda #$0010.w		; A9 10 00 ; Load #$0010.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $51.b		; 85 51 ; Store accumulator to $51.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsl $01FFD9.l		; 22 D9 FF 01 ; Jump to subroutine long $01FFD9.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $1BB860.l		; [PATTERN: Memory clearing operation] 22 60 B8 1B ; Jump to subroutine long $1BB860.l [Writes: Stack Pointer] [Flow: call]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $063C.w		; AE 3C 06 ; Load $063C.w into X register [Writes: X Index] [Flags: NZ]
	lda $01C31F.l,X		; BF 1F C3 01 ; Load long $01C31F.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	lda $01C322.l,X		; BF 22 C3 01 ; Load long $01C322.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $7EF36D.l		; AF 6D F3 7E ; Load long $7EF36D.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF36D.l		; 8F 6D F3 7E ; Store accumulator (long) $7EF36D.l [Reads: Accumulator]
	cmp #$A8.b		; C9 A8 ; Compare #$A8.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF36D.l		; 8F 6D F3 7E ; Store accumulator (long) $7EF36D.l [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	and ($24.b,X)		; 21 24 ; Logical AND ($24.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsl $0DA18E.l		; 22 8E A1 0D ; Jump to subroutine long $0DA18E.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FC2.w		; 8D C2 0F ; Store accumulator to $0FC2.w [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FC4.w		; 8D C4 0F ; Store accumulator to $0FC4.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $4B.b		; 64 4B ; Store zero to $4B.b
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	inc $5A.b		; E6 5A ; Increment $5A.b [Reads: Direct Page] [Flags: NZ]
	lda $5A.b		; A5 5A ; Load $5A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5A.b		; 85 5A ; Store accumulator to $5A.b [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	lda $51.b		; A5 51 ; Load $51.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $0E		; 30 0E ; Branch if minus to $30, $0E [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $51.b		; 65 51 ; Add $51.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $30, $0C		; 30 0C ; Branch if minus to $30, $0C [Flow: branch]
	.db $82, $C2, $00		; 82 C2 00 ; Branch always long to $82, $C2, $00 [Flow: branch]
	lda $51.b		; A5 51 ; Load $51.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $20.b		; C5 20 ; Compare $20.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	.db $82, $B9, $00		; [PATTERN: Memory clearing operation] 82 B9 00 ; Branch always long to $82, $B9, $00 [Flow: branch]
	lda $51.b		; A5 51 ; Load $51.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $57.b		; 64 57 ; Store zero to $57.b
	stz $5A.b		; [PATTERN: Memory clearing operation] 64 5A ; Store zero to $5A.b
	stz $5B.b		; 64 5B ; Store zero to $5B.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $11.b		; 64 11 ; Store zero to $11.b
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	stz $02F9.w		; 9C F9 02 ; Store zero to $02F9.w
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	sta $04B4.w		; 8D B4 04 ; Store accumulator to $04B4.w [Reads: Accumulator]
	sta $04B5.w		; 8D B5 04 ; Store accumulator to $04B5.w [Reads: Accumulator]
	sta $7EF3D3.l		; 8F D3 F3 7E ; Store accumulator (long) $7EF3D3.l [Reads: Accumulator]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	lda $0359.w		; AD 59 03 ; Load $0359.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	jsr $CF12.w		; 20 12 CF ; Jump to subroutine at $CF12.w [Writes: Stack Pointer] [Flow: call]
	lda $012E.w		; AD 2E 01 ; Load $012E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$24.b		; C9 24 ; Compare #$24.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda $AD.b		; A5 AD ; Load $AD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $034C.w		; AD 4C 03 ; Load $034C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0322.w		; 8D 22 03 ; Store accumulator to $0322.w [Reads: Accumulator]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	lda $26.b		; A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0998FC.l		; 22 FC 98 09 ; Jump to subroutine long $0998FC.l [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; [PATTERN: Memory clearing operation] A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; [PATTERN: Memory clearing operation] 9C 76 03 ; Store zero to $0376.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda #$02.b		; [PATTERN: Memory clearing operation] A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $25.b		; 64 25 ; Store zero to $25.b
	jsr $9873.w		; 20 73 98 ; Jump to subroutine at $9873.w [Writes: Stack Pointer] [Flow: call]
	stz $032A.w		; 9C 2A 03 ; Store zero to $032A.w
	stz $034F.w		; 9C 4F 03 ; Store zero to $034F.w
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; [PATTERN: Memory clearing operation] 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	.db $82, $5E, $F0		; 82 5E F0 ; Branch always long to $82, $5E, $F0 [Flow: branch]
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $3D.b		; [PATTERN: Memory clearing operation] 64 3D ; Store zero to $3D.b
	stz $79.b		; 64 79 ; Store zero to $79.b
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	lda $7EF356.l		; AF 56 F3 7E ; Load long $7EF356.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $033C.w		; AD 3C 03 ; Load $033C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $033D.w		; 0D 3D 03 ; Logical OR $033D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $033E.w		; 0D 3E 03 ; Logical OR $033E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $033F.w		; 0D 3F 03 ; Logical OR $033F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	lda $032B.w		; AD 2B 03 ; Load $032B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $032D.w		; AD 2D 03 ; Load $032D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $9873.w		; 20 73 98 ; Jump to subroutine at $9873.w [Writes: Stack Pointer] [Flow: call]
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2E.b		; 85 2E ; Store accumulator to $2E.b [Reads: Accumulator]
	inc $2D.b		; E6 2D ; Increment $2D.b [Reads: Direct Page] [Flags: NZ]
	lda $2D.b		; [PATTERN: Memory clearing operation] A5 2D ; Load $2D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $27		; 90 27 ; Branch if carry clear to $90, $27 [Flow: branch]
	stz $2D.b		; 64 2D ; Store zero to $2D.b
	stz $02CC.w		; 9C CC 02 ; Store zero to $02CC.w
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2E.b		; 85 2E ; Store accumulator to $2E.b [Reads: Accumulator]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	inc $2D.b		; E6 2D ; Increment $2D.b [Reads: Direct Page] [Flags: NZ]
	lda $2D.b		; A5 2D ; Load $2D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $10		; 90 10 ; Branch if carry clear to $90, $10 [Flow: branch]
	stz $2D.b		; 64 2D ; Store zero to $2D.b
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2E.b		; 85 2E ; Store accumulator to $2E.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9635.w,X		; BD 35 96 ; Load $9635.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02CC.w		; 8D CC 02 ; Store accumulator to $02CC.w [Reads: Accumulator]
	lda $034F.w		; AD 4F 03 ; Load $034F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	lda $033C.w		; AD 3C 03 ; Load $033C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $033D.w		; 0D 3D 03 ; Logical OR $033D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $033E.w		; 0D 3E 03 ; Logical OR $033E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $033F.w		; 0D 3F 03 ; Logical OR $033F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $42		; F0 42 ; Branch if equal to $F0, $42 [Flow: branch]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $34		; F0 34 ; Branch if equal to $F0, $34 [Flow: branch]
	sta $034F.w		; 8D 4F 03 ; Store accumulator to $034F.w [Reads: Accumulator]
	lda #$25.b		; A9 25 ; Load #$25.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $032A.w		; 8D 2A 03 ; Store accumulator to $032A.w [Reads: Accumulator]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02CB.w		; 8D CB 02 ; Store accumulator to $02CB.w [Reads: Accumulator]
	jsr $98A8.w		; 20 A8 98 ; Jump to subroutine at $98A8.w [Writes: Stack Pointer] [Flow: call]
	dec $02CB.w		; CE CB 02 ; Decrement $02CB.w [Flags: NZ]
	.db $10, $1A		; 10 1A ; Branch if plus to $10, $1A [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02CB.w		; 8D CB 02 ; Store accumulator to $02CB.w [Reads: Accumulator]
	inc $032A.w		; EE 2A 03 ; Increment $032A.w [Flags: NZ]
	lda $032A.w		; AD 2A 03 ; Load $032A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	stz $032A.w		; 9C 2A 03 ; Store zero to $032A.w
	lda $034F.w		; AD 4F 03 ; Load $034F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$3F.b		; 29 3F ; Logical AND #$3F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $034F.w		; 8D 4F 03 ; Store accumulator to $034F.w [Reads: Accumulator]
	lda $49.b		; A5 49 ; Load $49.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	lda $F0.b		; [PATTERN: Memory clearing operation] A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $36		; D0 36 ; Branch if not equal to $D0, $36 [Flow: branch]
	stz $30.b		; 64 30 ; Store zero to $30.b
	stz $31.b		; 64 31 ; Store zero to $31.b
	jsr $9785.w		; 20 85 97 ; Jump to subroutine at $9785.w [Writes: Stack Pointer] [Flow: call]
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $20		; 80 20 ; Branch always to $80, $20 [Flow: branch]
	lda $033C.w		; AD 3C 03 ; Load $033C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $033D.w		; 0D 3D 03 ; Logical OR $033D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $033E.w		; 0D 3E 03 ; Logical OR $033E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $033F.w		; 0D 3F 03 ; Logical OR $033F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2B		; D0 2B ; Branch if not equal to $D0, $2B [Flow: branch]
	stz $48.b		; 64 48 ; Store zero to $48.b
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1D		; F0 1D ; Branch if equal to $F0, $1D [Flow: branch]
	stz $2E.b		; [PATTERN: Memory clearing operation] 64 2E ; Store zero to $2E.b
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	cmp $0340.w		; CD 40 03 ; Compare $0340.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	stz $2A.b		; 64 2A ; Store zero to $2A.b
	stz $2B.b		; [PATTERN: Memory clearing operation] 64 2B ; Store zero to $2B.b
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	stz $48.b		; 64 48 ; Store zero to $48.b
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	jsr $97A6.w		; 20 A6 97 ; Jump to subroutine at $97A6.w [Writes: Stack Pointer] [Flow: call]
	jsr $97C7.w		; 20 C7 97 ; Jump to subroutine at $97C7.w [Writes: Stack Pointer] [Flow: call]
	jsr $9903.w		; 20 03 99 ; Jump to subroutine at $9903.w [Writes: Stack Pointer] [Flow: call]
	jsr $B64F.w		; 20 4F B6 ; Jump to subroutine at $B64F.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
	jsr $B7C7.w		; 20 C7 B7 ; Jump to subroutine at $B7C7.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E6A6.l		; 22 A6 E6 07 ; Jump to subroutine long $07E6A6.l [Writes: Stack Pointer] [Flow: call]
	stz $0302.w		; 9C 02 03 ; Store zero to $0302.w
	jsr $E8F0.w		; 20 F0 E8 ; Jump to subroutine at $E8F0.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $033C.w,X		; BD 3C 03 ; Load $033C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	sta $0334.w,X		; 9D 34 03 ; Store accumulator to $0334.w,X [Reads: Accumulator, X Index]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $032B.w,X		; 9D 2B 03 ; Store accumulator to $032B.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $EE		; 10 EE ; Branch if plus to $10, $EE [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda #$0180.w		; A9 80 01 ; Load #$0180.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0334.w,X		; 9D 34 03 ; Store accumulator to $0334.w,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($20.b,X)		; 01 20 ; Logical OR ($20.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $F0A5.w		; 20 A5 F0 ; Jump to subroutine at $F0A5.w [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldx #$0002.w		; A2 02 00 ; Load #$0002.w into X register [Writes: X Index] [Flags: NZ]
	stx $04.b		; 86 04 ; Store X register to $04.b [Reads: X Index]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $02.b		; 25 02 ; Logical AND $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $45		; F0 45 ; Branch if equal to $F0, $45 [Flow: branch]
	and $04.b		; 25 04 ; Logical AND $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	ldy #$0001.w		; A0 01 00 ; Load #$0001.w into Y register [Writes: Y Index] [Flags: NZ]
	lda #$0020.w		; A9 20 00 ; Load #$0020.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0326.w,X		; 9D 26 03 ; Store accumulator to $0326.w,X [Reads: Accumulator, X Index]
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $97C3.w,Y		; B9 C3 97 ; Load $97C3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0326.w,X		; 9D 26 03 ; Store accumulator to $0326.w,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $67.b		; 05 67 ; Logical OR $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $02.b		; 25 02 ; Logical AND $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $02.b		; C5 02 ; Compare $02.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $032B.w,X		; 9D 2B 03 ; Store accumulator to $032B.w,X [Reads: Accumulator, X Index]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0338.w,X		; 9D 38 03 ; Store accumulator to $0338.w,X [Reads: Accumulator, X Index]
	stz $032B.w,X		; 9E 2B 03 ; Store zero to $032B.w,X [Reads: X Index]
	lda $0334.w,X		; BD 34 03 ; Load $0334.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $9639.w		; AD 39 96 ; Load $9639.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0334.w,X		; 9D 34 03 ; Store accumulator to $0334.w,X [Reads: Accumulator, X Index]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	asl $04.b		; 06 04 ; Arithmetic shift left $04.b [Reads: Direct Page] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $A6		; 10 A6 ; Branch if plus to $10, $A6 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	stz $02CB.w		; [PATTERN: Memory clearing operation] 9C CB 02 ; Store zero to $02CB.w
	stz $034F.w		; 9C 4F 03 ; Store zero to $034F.w
	stz $032A.w		; 9C 2A 03 ; Store zero to $032A.w
	jsr $9873.w		; 20 73 98 ; Jump to subroutine at $9873.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $56.b		; A5 56 ; Load $56.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $5D.b		; [PATTERN: Memory clearing operation] 84 5D ; Store Y register to $5D.b [Reads: Y Index]
	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	stz $0345.w		; 9C 45 03 ; Store zero to $0345.w
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $5A.b		; [PATTERN: Memory clearing operation] 64 5A ; Store zero to $5A.b
	stz $5B.b		; 64 5B ; Store zero to $5B.b
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	stz $032F.w		; 9C 2F 03 ; Store zero to $032F.w
	stz $0331.w		; [PATTERN: Memory clearing operation] 9C 31 03 ; Store zero to $0331.w
	stz $0326.w		; 9C 26 03 ; Store zero to $0326.w
	stz $0328.w		; 9C 28 03 ; Store zero to $0328.w
	stz $032B.w		; 9C 2B 03 ; Store zero to $032B.w
	stz $032D.w		; 9C 2D 03 ; Store zero to $032D.w
	stz $033C.w		; [PATTERN: Memory clearing operation] 9C 3C 03 ; Store zero to $033C.w
	stz $033E.w		; 9C 3E 03 ; Store zero to $033E.w
	stz $0334.w		; 9C 34 03 ; Store zero to $0334.w
	stz $0336.w		; 9C 36 03 ; Store zero to $0336.w
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	cpy #$00.b		; C0 00 ; Compare #$00.b with Y register [Reads: Y Index] [Flags: NCZ]
	cpx #$00.b		; E0 00 ; Compare #$00.b with X register [Reads: X Index] [Flags: NCZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $4001.w		; 20 01 40 ; Jump to subroutine at $4001.w [Writes: Stack Pointer] [Flow: call]
	ora ($60.b,X)		; 01 60 ; Logical OR ($60.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($C2.b,X)		; 01 C2 ; Logical OR ($C2.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $30, $A2		; 30 A2 ; Branch if minus to $30, $A2 [Flow: branch]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $A5.b		; 02 A5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	cop $F0.b		; 02 F0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	lda $033C.w,X		; BD 3C 03 ; Load $033C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	lda $0334.w,X		; BD 34 03 ; Load $0334.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora ($90.b,X)		; 01 90 ; Logical OR ($90.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	trb $A0.b		; 14 A0 ; Test and reset bits $A0.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $9896.w,Y		; B9 96 98 ; Load $9896.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp $033C.w,X		; DD 3C 03 ; Compare accumulator $033C.w,X [Reads: X Index] [Flags: NCZ]
	.db $B0, $25		; B0 25 ; Branch if carry set to $B0, $25 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	cpy #$12.b		; C0 12 ; Compare #$12.b with Y register [Reads: Y Index] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc ($80.b),Y		; F1 80 ; Subtract with carry ($80.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	trb $34BD.w		; 1C BD 34 ; Test and reset bits $34BD.w [Reads: Accumulator] [Flags: Z]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $6918.w		; 0E 18 69 ; Arithmetic shift left $6918.w [Flags: NCZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora ($90.b,X)		; 01 90 ; Logical OR ($90.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	asl $80A9.w		; 0E A9 80 ; Arithmetic shift left $80A9.w [Flags: NCZ]
	ora ($80.b,X)		; 01 80 ; Logical OR ($80.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$A9.b		; 09 A9 ; Logical OR #$A9.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	sta $033C.w,X		; 9D 3C 03 ; Store accumulator to $033C.w,X [Reads: Accumulator, X Index]
	lda $9639.w		; AD 39 96 ; Load $9639.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0334.w,X		; 9D 34 03 ; Store accumulator to $0334.w,X [Reads: Accumulator, X Index]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $B2		; 10 B2 ; Branch if plus to $10, $B2 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $5C		; D0 5C ; Branch if not equal to $D0, $5C [Flow: branch]
	lda $034F.w		; AD 4F 03 ; Load $034F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $54		; D0 54 ; Branch if not equal to $D0, $54 [Flow: branch]
	ldx #$0002.w		; A2 02 00 ; Load #$0002.w into X register [Writes: X Index] [Flags: NZ]
	lda #$0003.w		; A9 03 00 ; Load #$0003.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $02.b		; 25 02 ; Logical AND $02.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $35		; F0 35 ; Branch if equal to $F0, $35 [Flow: branch]
	lda $032B.w,X		; BD 2B 03 ; Load $032B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2D		; F0 2D ; Branch if equal to $F0, $2D [Flow: branch]
	lda $032F.w,X		; BD 2F 03 ; Load $032F.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	stz $032F.w,X		; 9E 2F 03 ; Store zero to $032F.w,X [Reads: X Index]
	lda $033C.w,X		; BD 3C 03 ; Load $033C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $9639.w		; CD 39 96 ; Compare $9639.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $26		; 90 26 ; Branch if carry clear to $90, $26 [Flow: branch]
	cmp $0334.w,X		; DD 34 03 ; Compare accumulator $0334.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $90, $1F		; 90 1F ; Branch if carry clear to $90, $1F [Flow: branch]
	stz $032B.w,X		; 9E 2B 03 ; Store zero to $032B.w,X [Reads: X Index]
	lda $033C.w,X		; BD 3C 03 ; Load $033C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp $9639.w		; CD 39 96 ; Compare $9639.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $032B.w,X		; 9D 2B 03 ; Store accumulator to $032B.w,X [Reads: Accumulator, X Index]
	sta $032F.w,X		; 9D 2F 03 ; Store accumulator to $032F.w,X [Reads: Accumulator, X Index]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $9639.w		; AD 39 96 ; Load $9639.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0334.w,X		; 9D 34 03 ; Store accumulator to $0334.w,X [Reads: Accumulator, X Index]
	stz $032F.w,X		; 9E 2F 03 ; Store zero to $032F.w,X [Reads: X Index]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	asl $02.b		; 06 02 ; Arithmetic shift left $02.b [Reads: Direct Page] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $B4		; 10 B4 ; Branch if plus to $10, $B4 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $F514.w		; 20 14 F5 ; Jump to subroutine at $F514.w [Writes: Stack Pointer] [Flow: call]
	jsl $01FED2.l		; 22 D2 FE 01 ; Jump to subroutine long $01FED2.l [Writes: Stack Pointer] [Flow: call]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $35		; 10 35 ; Branch if plus to $10, $35 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0300.w		; 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsl $0ED6D1.l		; 22 D1 D6 0E ; Jump to subroutine long $0ED6D1.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $0ED6C0.l		; 22 C0 D6 0E ; Jump to subroutine long $0ED6C0.l [Writes: Stack Pointer] [Flow: call]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $15		; [PATTERN: Memory clearing operation] D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $0360.w		; [PATTERN: Memory clearing operation] 9C 60 03 ; Store zero to $0360.w
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $01FEF0.l		; 22 F0 FE 01 ; Jump to subroutine long $01FEF0.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $4D.b		; [PATTERN: Memory clearing operation] A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $46.b		; 64 46 ; Store zero to $46.b
	stz $031F.w		; 9C 1F 03 ; Store zero to $031F.w
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	sty $02D8.w		; 8C D8 02 ; Store Y register to $02D8.w [Reads: Y Index]
	cpy #$3E.b		; C0 3E ; Compare #$3E.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$2E.b		; A9 2E ; Load #$2E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	lda #$60.b		; A9 60 ; Load #$60.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02D9.w		; 8D D9 02 ; Store accumulator to $02D9.w [Reads: Accumulator]
	lda $02E9.w		; AD E9 02 ; Load $02E9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; [PATTERN: Memory clearing operation] F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	stz $3B.b		; [PATTERN: Memory clearing operation] 64 3B ; Store zero to $3B.b
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	stz $037A.w		; [PATTERN: Memory clearing operation] 9C 7A 03 ; Store zero to $037A.w
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02DA.w		; 8D DA 02 ; Store accumulator to $02DA.w [Reads: Accumulator]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	cpy #$20.b		; C0 20 ; Compare #$20.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $02DA.w		; 8D DA 02 ; Store accumulator to $02DA.w [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0985E8.l		; 22 E8 85 09 ; Jump to subroutine long $0985E8.l [Writes: Stack Pointer] [Flow: call]
	lda $02D8.w		; AD D8 02 ; Load $02D8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$37.b		; C9 37 ; Compare #$37.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$38.b		; C9 38 ; Compare #$38.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$39.b		; C9 39 ; Compare #$39.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $0DDB7F.l		; 22 7F DB 0D ; Jump to subroutine long $0DDB7F.l [Writes: Stack Pointer] [Flow: call]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda #$215A.w		; A9 5A 21 ; Load #$215A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda #$0940.w		; A9 40 09 ; Load #$0940.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; [PATTERN: Memory clearing operation] 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $037C.w		; 9C 7C 03 ; Store zero to $037C.w
	stz $037D.w		; 9C 7D 03 ; Store zero to $037D.w
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0374.w		; 8D 74 03 ; Store accumulator to $0374.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098091.l		; 22 91 80 09 ; Jump to subroutine long $098091.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $62, $9A, $71		; 62 9A 71 ; Push effective relative address $62, $9A, $71 [Writes: Stack Pointer]
	txs		; 9A ; Transfer X to stack pointer [Reads: X Index] [Writes: Stack Pointer]
	lda ($9A.b,X)		; A1 9A ; Load accumulator ($9A.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $037C.w		; AD 7C 03 ; Load $037C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($9A54.w,X)		; 7C 54 9A ; Jump indirect indexed to ($9A54.w,X) [Reads: X Index] [Flow: jump]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$21.b		; A9 21 ; Load #$21.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0980C8.l		; 22 C8 80 09 ; Jump to subroutine long $0980C8.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2B		; D0 2B ; Branch if not equal to $D0, $2B [Flow: branch]
	dec $0374.w		; CE 74 03 ; Decrement $0374.w [Flags: NZ]
	.db $10, $26		; 10 26 ; Branch if plus to $10, $26 [Flow: branch]
	stz $0374.w		; 9C 74 03 ; Store zero to $0374.w
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$E0.b		; 29 E0 ; Logical AND #$E0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $F6.b		; 05 F6 ; Logical OR $F6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	inc $037D.w		; EE 7D 03 ; Increment $037D.w [Flags: NZ]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	inc $037C.w		; EE 7C 03 ; Increment $037C.w [Flags: NZ]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0374.w		; 8D 74 03 ; Store accumulator to $0374.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $0374.w		; CE 74 03 ; Decrement $0374.w [Flags: NZ]
	.db $10, $1B		; 10 1B ; Branch if plus to $10, $1B [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $02C7.w		; 8D C7 02 ; Store accumulator to $02C7.w [Reads: Accumulator]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $02E3.w		; CE E3 02 ; Decrement $02E3.w [Flags: NZ]
	.db $10, $1E		; 10 1E ; Branch if plus to $10, $1E [Flow: branch]
	stz $02E3.w		; 9C E3 02 ; Store zero to $02E3.w
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $037A.w		; 0D 7A 03 ; Logical OR $037A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0A		; B0 0A ; Branch if carry set to $B0, $0A [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	jsr $9CD9.w		; 20 D9 9C ; Jump to subroutine at $9CD9.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $9D72.w		; 20 72 9D ; Jump to subroutine at $9D72.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	lda ($BB.b,X)		; A1 BB ; Load accumulator ($BB.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	ldy #$7B.b		; A0 7B ; Load #$7B.b into Y register [Writes: Y Index] [Flags: NZ]
	sta $EF9EEF.l,X		; 9F EF 9E EF ; Store accumulator (long,X) $EF9EEF.l,X [Reads: Accumulator, X Index]
	stz $AFF8.w,X		; 9E F8 AF ; Store zero to $AFF8.w,X [Reads: X Index]
	ora ($A3.b,S),Y		; 13 A3 ; OR accumulator (stack relative indirect indexed) ($A3.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $93A2.w		; 4D A2 93 ; Exclusive OR $93A2.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$5B.b		; A2 5B ; Load #$5B.b into X register [Writes: X Index] [Flags: NZ]
	lda ($71.b,X)		; A1 71 ; Load accumulator ($71.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	ldy $3E.b		; A4 3E ; Load $3E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $69AB25.l		; AF 25 AB 69 ; Load long $69AB25.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda $94.b		; A5 94 ; Load $94.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $4B.b		; A4 4B ; Load $4B.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	ldx $C0.b		; A6 C0 ; Load $C0.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldx $ADC1.w		; AE C1 AD ; Load $ADC1.w into X register [Writes: X Index] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda #$A5.b		; A9 A5 ; Load #$A5.b into accumulator [Writes: Accumulator] [Flags: NZ]
	bit $04F0.w,X		; 3C F0 04 ; Test bits $04F0.w,X [Reads: X Index] [Flags: NVZ] [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $CF		; 90 CF ; Branch if carry clear to $90, $CF [Flow: branch]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $0303.w		; AD 03 03 ; Load $0303.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$14.b		; C9 14 ; Compare #$14.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy $03FC.w		; AC FC 03 ; Load $03FC.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $F4, $07		; 82 F4 07 ; Branch always long to $82, $F4, $07 [Flow: branch]
	.db $82, $CB, $04		; 82 CB 04 ; Branch always long to $82, $CB, $04 [Flow: branch]
	ldy $0304.w		; AC 04 03 ; Load $0304.w into Y register [Writes: Y Index] [Flags: NZ]
	cpy $0303.w		; CC 03 03 ; Compare $0303.w with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	lda $0304.w		; AD 04 03 ; Load $0304.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $7EF34C.l		; AF 4C F3 7E ; Load long $7EF34C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $0304.w		; AD 04 03 ; Load $0304.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $AE47.w		; 20 47 AE ; Jump to subroutine at $AE47.w [Writes: Stack Pointer] [Flow: call]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $037A.w		; 0D 7A 03 ; Logical OR $037A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	ldy $0303.w		; AC 03 03 ; Load $0303.w into Y register [Writes: Y Index] [Flags: NZ]
	sty $0304.w		; 8C 04 03 ; Store Y register to $0304.w [Reads: Y Index]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	cpy #$05.b		; C0 05 ; Compare #$05.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpy #$06.b		; C0 06 ; Compare #$06.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $0304.w		; AD 04 03 ; Load $0304.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$05.b		; E9 05 ; Subtract #$05.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0307.w		; 8D 07 03 ; Store accumulator to $0307.w [Reads: Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $30, $06		; 30 06 ; Branch if minus to $30, $06 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($9AE6.w,X)		; 7C E6 9A ; Jump indirect indexed to ($9AE6.w,X) [Reads: X Index] [Flow: jump]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda ($AA.b,X)		; A1 AA ; Load accumulator ($AA.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda ($ED.b),Y		; B1 ED ; Load accumulator ($ED.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($22.b)		; B2 22 ; Load accumulator (indirect) ($22.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($27.b,S),Y		; B3 27 ; Load accumulator (stack relative indirect indexed) ($27.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $BF.b,X		; B5 BF ; Load $BF.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda $89.b,X		; B5 89 ; Load $89.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($0C.b,S),Y		; B3 0C ; Load accumulator (stack relative indirect indexed) ($0C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ldy $E0.b,X		; B4 E0 ; Load Y register $E0.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	tsb $E0.b		; 04 E0 ; Test and set bits $E0.b [Reads: Accumulator] [Flags: Z]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$E0.b		; E0 E0 ; Compare #$E0.b with X register [Reads: X Index] [Flags: NCZ]
	stz $02F4.w		; 9C F4 02 ; Store zero to $02F4.w
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$1F.b		; 29 1F ; Logical AND #$1F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $0379.w		; AD 79 03 ; Load $0379.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $07		; B0 07 ; Branch if carry set to $B0, $07 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $036C.w		; AE 6C 03 ; Load $036C.w into X register [Writes: X Index] [Flags: NZ]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0376.w		; 0D 76 03 ; Logical OR $0376.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $6B		; D0 6B ; Branch if not equal to $D0, $6B [Flow: branch]
	jsr $B5C0.w		; 20 C0 B5 ; Jump to subroutine at $B5C0.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $71		; 90 71 ; Branch if carry clear to $90, $71 [Flow: branch]
	lda $03F8.w		; AD F8 03 ; Load $03F8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldx #$07.b		; A2 07 ; Load #$07.b into X register [Writes: X Index] [Flags: NZ]
	.db $82, $46, $00		; 82 46 00 ; Branch always long to $82, $46, $00 [Flow: branch]
	lda $02FA.w		; AD FA 02 ; Load $02FA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	.db $82, $3C, $00		; 82 3C 00 ; Branch always long to $82, $3C, $00 [Flow: branch]
	lda $02EC.w		; AD EC 02 ; Load $02EC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $0314.w		; AD 14 03 ; Load $0314.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	lda $0314.w		; AD 14 03 ; Load $0314.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02F4.w		; 8D F4 02 ; Store accumulator to $02F4.w [Reads: Accumulator]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	lda $0301.w		; [PATTERN: Memory clearing operation] AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $037A.w		; 0D 7A 03 ; Logical OR $037A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	stz $037A.w		; 9C 7A 03 ; Store zero to $037A.w
	jsr $A11F.w		; 20 1F A1 ; Jump to subroutine at $A11F.w [Writes: Stack Pointer] [Flow: call]
	stz $035F.w		; [PATTERN: Memory clearing operation] 9C 5F 03 ; Store zero to $035F.w
	lda $0C4A.w		; AD 4A 0C ; Load $0C4A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w		; 9C 4A 0C ; Store zero to $0C4A.w
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $D383.w		; 20 83 D3 ; Jump to subroutine at $D383.w [Writes: Stack Pointer] [Flow: call]
	lda $9BA2.w,X		; BD A2 9B ; Load $9BA2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $7EF379.l		; 2F 79 F3 7E ; AND accumulator with memory (long) $7EF379.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	stx $036C.w		; 8E 6C 03 ; Store X register to $036C.w [Reads: X Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr $9C5F.w		; 20 5F 9C ; Jump to subroutine at $9C5F.w [Writes: Stack Pointer] [Flow: call]
	lda $036C.w		; AD 6C 03 ; Load $036C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0306.w		; 8D 06 03 ; Store accumulator to $0306.w [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($9B92.w,X)		; 7C 92 9B ; Jump indirect indexed to ($9B92.w,X) [Reads: X Index] [Flow: jump]
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jmp ($1CAA.w)		; 6C AA 1C ; Jump indirect to ($1CAA.w) [Flow: jump]
	lda ($81.b),Y		; B1 81 ; Load accumulator ($81.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	lda ($EE.b)		; B2 EE ; Load accumulator (indirect) ($EE.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda ($F2.b)		; B2 F2 ; Load accumulator (indirect) ($F2.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $74.b,X		; B4 74 ; Load Y register $74.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $71.b,X		; B5 71 ; Load $71.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($E5.b,S),Y		; B3 E5 ; Load accumulator (stack relative indirect indexed) ($E5.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda ($7C.b,S),Y		; B3 7C ; Load accumulator (stack relative indirect indexed) ($7C.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	eor $00609C.l		; 4F 9C 60 00 ; Exclusive OR accumulator with memory (long) $00609C.l [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $67.b		; [PATTERN: Memory clearing operation] A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $79.b		; 64 79 ; Store zero to $79.b
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	cmp $7EF36D.l		; CF 6D F3 7E ; Compare accumulator (long) $7EF36D.l [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $23		; B0 23 ; Branch if carry set to $B0, $23 [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $12		; 90 12 ; Branch if carry clear to $90, $12 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$31.b		; C9 31 ; Compare #$31.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0FF67B.l		; 22 7B F6 0F ; Jump to subroutine long $0FF67B.l [Writes: Stack Pointer] [Flow: call]
	jsl $0DBB67.l		; 22 67 BB 0D ; Jump to subroutine long $0DBB67.l [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cpx #$FE.b		; E0 FE ; Compare #$FE.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	ora $9CD1.w,X		; 1D D1 9C ; OR accumulator with memory $9CD1.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $012E.w		; 8D 2E 01 ; Store accumulator to $012E.w [Reads: Accumulator]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	stx $3D.b		; 86 3D ; Store X register to $3D.b [Reads: X Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $03.b		; 00 03 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $09.b		; 00 09 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($1B.b)		; 12 1B ; OR accumulator with memory (indirect) ($1B.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda $3B.b		; A5 3B ; Load $3B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $DF		; D0 DF ; Branch if not equal to $D0, $DF [Flow: branch]
	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $30, $20		; 30 20 ; Branch if minus to $30, $20 [Flow: branch]
	bit $F4.b		; 24 F4 ; Test bits $F4.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $10, $D7		; 10 D7 ; Branch if plus to $10, $D7 [Flow: branch]
	ldx $6C.b		; A6 6C ; Load $6C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	jsr $D73E.w		; 20 3E D7 ; Jump to subroutine at $D73E.w [Writes: Stack Pointer] [Flow: call]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$30.b		; 49 30 ; Exclusive OR #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $C8		; F0 C8 ; Branch if equal to $F0, $C8 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $3A.b		; 04 3A ; Test and set bits $3A.b [Reads: Accumulator] [Flags: Z]
	jsr $9C66.w		; 20 66 9C ; Jump to subroutine at $9C66.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	bit $F0.b		; 24 F0 ; Test bits $F0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $3A.b		; 04 3A ; Test and set bits $3A.b [Reads: Accumulator] [Flags: Z]
	jsr $AE65.w		; 20 65 AE ; Jump to subroutine at $AE65.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $56		; 10 56 ; Branch if plus to $10, $56 [Flow: branch]
	inc $3C.b		; E6 3C ; Increment $3C.b [Reads: Direct Page] [Flags: NZ]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $52		; B0 52 ; Branch if carry set to $B0, $52 [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9CBF.w,X		; BD BF 9C ; Load $9CBF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cpx #$05.b		; E0 05 ; Compare #$05.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $2D		; D0 2D ; Branch if not equal to $D0, $2D [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$26.b		; A9 26 ; Load #$26.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0993C2.l		; 22 C2 93 09 ; Jump to subroutine long $0993C2.l [Writes: Stack Pointer] [Flow: call]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $17		; 80 17 ; Branch always to $80, $17 [Flow: branch]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	bit $F0.b		; 24 F0 ; Test bits $F0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	.db $82, $F8, $FE		; 82 F8 FE ; Branch always long to $82, $F8, $FE [Flow: branch]
	jsr $9E63.w		; 20 63 9E ; Jump to subroutine at $9E63.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $F0.b		; 24 F0 ; Test bits $F0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $30, $29		; 30 29 ; Branch if minus to $30, $29 [Flow: branch]
	lda $79.b		; A5 79 ; Load $79.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $08		; [PATTERN: Memory clearing operation] 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	stz $79.b		; 64 79 ; Store zero to $79.b
	.db $82, $F6, $09		; 82 F6 09 ; Branch always long to $82, $F6, $09 [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda $48.b		; [PATTERN: Memory clearing operation] A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F6.b		; 29 F6 ; Logical AND #$F6.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$7E.b		; 29 7E ; Logical AND #$7E.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	.db $82, $C3, $00		; 82 C3 00 ; Branch always long to $82, $C3, $00 [Flow: branch]
	bit $48.b		; 24 48 ; Test bits $48.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $30, $06		; 30 06 ; Branch if minus to $30, $06 [Flow: branch]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$09.b		; 29 09 ; Logical AND #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $47.b		; A5 47 ; Load $47.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $58		; F0 58 ; Branch if equal to $F0, $58 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $D3		; F0 D3 ; Branch if equal to $F0, $D3 [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	ldx #$0A.b		; A2 0A ; Load #$0A.b into X register [Writes: X Index] [Flags: NZ]
	stx $3C.b		; 86 3C ; Store X register to $3C.b [Reads: X Index]
	lda $9CBF.w,X		; BD BF 9C ; Load $9CBF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $3F		; 10 3F ; Branch if plus to $10, $3F [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$09.b		; 29 09 ; Logical AND #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $099395.l		; 22 95 93 09 ; Jump to subroutine long $099395.l [Writes: Stack Pointer] [Flow: call]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3C.b		; 85 3C ; Store accumulator to $3C.b [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9CBF.w,X		; BD BF 9C ; Load $9CBF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	.db $80, $5A		; 80 5A ; Branch always to $80, $5A [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3C.b		; 85 3C ; Store accumulator to $3C.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $4A		; F0 4A ; Branch if equal to $F0, $4A [Flow: branch]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	cmp #$31.b		; C9 31 ; Compare #$31.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2F		; F0 2F ; Branch if equal to $F0, $2F [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F2		; 10 F2 ; Branch if plus to $10, $F2 [Flow: branch]
	lda $79.b		; A5 79 ; Load $79.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $0FF979.l		; 22 79 F9 0F ; Jump to subroutine long $0FF979.l [Writes: Stack Pointer] [Flow: call]
	lda $79.b		; A5 79 ; Load $79.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	inc $79.b		; E6 79 ; Increment $79.b [Reads: Direct Page] [Flags: NZ]
	lda $79.b		; A5 79 ; Load $79.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda #$37.b		; A9 37 ; Load #$37.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	jsl $098CB1.l		; 22 B1 8C 09 ; Jump to subroutine long $098CB1.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $9E63.w		; 20 63 9E ; Jump to subroutine at $9E63.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F9		; F0 F9 ; Branch if equal to $F0, $F9 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $F5		; F0 F5 ; Branch if equal to $F0, $F5 [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $47		; B0 47 ; Branch if carry set to $B0, $47 [Flow: branch]
	ldy #$27.b		; A0 27 ; Load #$27.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	stz $03.b		; 64 03 ; Store zero to $03.b
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $E5		; F0 E5 ; Branch if equal to $F0, $E5 [Flow: branch]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0A.b		; E9 0A ; Subtract #$0A.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0DA030.l,X		; BF 30 A0 0D ; Load long $0DA030.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0D9EF0.l,X		; BF F0 9E 0D ; Load long $0D9EF0.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	lda $0D98F3.l,X		; BF F3 98 0D ; Load long $0D98F3.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $44.b		; 85 44 ; Store accumulator to $44.b [Reads: Accumulator]
	lda $0D9AF2.l,X		; BF F2 9A 0D ; Load long $0D9AF2.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $45.b		; 85 45 ; Store accumulator to $45.b [Reads: Accumulator]
.INDEX 8
	sep #$10		; E2 10
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $B3		; B0 B3 ; Branch if carry set to $B0, $B3 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0DAC45.l,X		; BF 45 AC 0D ; Load long $0DAC45.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0DAC8D.l,X		; BF 8D AC 0D ; Load long $0DAC8D.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $44.b		; 85 44 ; Store accumulator to $44.b [Reads: Accumulator]
	lda $0DACB1.l,X		; BF B1 AC 0D ; Load long $0DACB1.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $45.b		; 85 45 ; Store accumulator to $45.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $82, $85, $FF		; 82 85 FF ; Branch always long to $82, $85, $FF [Flow: branch]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $24.b		; 05 24 ; Logical OR $24.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $70, $2F		; 70 2F ; Branch if overflow set to $70, $2F [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F1		; D0 F1 ; Branch if not equal to $D0, $F1 [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $EC		; 90 EC ; Branch if carry clear to $90, $EC [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B0AB.w		; 20 AB B0 ; Jump to subroutine at $B0AB.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $4F		; 90 4F ; Branch if carry clear to $90, $4F [Flow: branch]
	lda $020B.w		; AD 0B 02 ; Load $020B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4A		; D0 4A ; Branch if not equal to $D0, $4A [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0350.w		; 8D 50 03 ; Store accumulator to $0350.w [Reads: Accumulator]
	jsr $9F5D.w		; [PATTERN: Memory clearing operation] 20 5D 9F ; Jump to subroutine at $9F5D.w [Writes: Stack Pointer] [Flow: call]
	lda $9EEC.w		; AD EC 9E ; Load $9EEC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $0301.w		; 0C 01 03 ; Test and set bits $0301.w [Reads: Accumulator] [Flags: Z]
	jsr $AE65.w		; 20 65 AE ; Jump to subroutine at $AE65.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $29		; 10 29 ; Branch if plus to $10, $29 [Flow: branch]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0300.w		; 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9EEC.w,X		; BD EC 9E ; Load $9EEC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; [PATTERN: Memory clearing operation] 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $3D.b		; [PATTERN: Memory clearing operation] 64 3D ; Store zero to $3D.b
	stz $0350.w		; 9C 50 03 ; Store zero to $0350.w
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0301.w		; 8D 01 03 ; Store accumulator to $0301.w [Reads: Accumulator]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	adc $9F669F.l		; 6F 9F 66 9F ; Add with carry (long) $9F669F.l [Writes: Accumulator] [Flags: NCVZ]
	lda $0307.w		; AD 07 03 ; Load $0307.w into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($9F59.w,X)		; 7C 59 9F ; Jump indirect indexed to ($9F59.w,X) [Reads: X Index] [Flow: jump]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $099863.l		; 22 63 98 09 ; Jump to subroutine long $099863.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0880B3.l		; 22 B3 80 08 ; Jump to subroutine long $0880B3.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	.db $10, $AD		; 10 AD ; Branch if plus to $10, $AD [Flow: branch]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $70, $24		; 70 24 ; Branch if overflow set to $70, $24 [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $B07B.w		; 20 7B B0 ; Jump to subroutine at $B07B.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	.db $82, $C6, $FF		; 82 C6 FF ; Branch always long to $82, $C6, $FF [Flow: branch]
	lda $9F78.w		; AD 78 9F ; Load $9F78.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0301.w		; 8D 01 03 ; Store accumulator to $0301.w [Reads: Accumulator]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	jsr $AE65.w		; 20 65 AE ; Jump to subroutine at $AE65.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $4B		; 10 4B ; Branch if plus to $10, $4B [Flow: branch]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0300.w		; 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9F78.w,X		; BD 78 9F ; Load $9F78.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098024.l		; 22 24 80 09 ; Jump to subroutine long $098024.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $012E.w		; AD 2E 01 ; Load $012E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	jsl $1AFF3C.l		; [PATTERN: Memory clearing operation] 22 3C FF 1A ; Jump to subroutine long $1AFF3C.l [Writes: Stack Pointer] [Flow: call]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0301.w		; 8D 01 03 ; Store accumulator to $0301.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $70, $21		; 70 21 ; Branch if overflow set to $70, $21 [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F4		; D0 F4 ; Branch if not equal to $D0, $F4 [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $EF		; 90 EF ; Branch if carry clear to $90, $EF [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; [PATTERN: Memory clearing operation] 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda $A003.w		; AD 03 A0 ; Load $A003.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0301.w		; 8D 01 03 ; Store accumulator to $0301.w [Reads: Accumulator]
	jsr $AE65.w		; 20 65 AE ; Jump to subroutine at $AE65.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $CA		; 10 CA ; Branch if plus to $10, $CA [Flow: branch]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0300.w		; 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $A003.w,X		; BD 03 A0 ; Load $A003.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $71		; D0 71 ; Branch if not equal to $D0, $71 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
	ldx $2F.b		; A6 2F ; Load $2F.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0990A4.l		; 22 A4 90 09 ; Jump to subroutine long $0990A4.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $32		; 90 32 ; Branch if carry clear to $90, $32 [Flow: branch]
	lda $0B99.w		; AD 99 0B ; Load $0B99.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	dec $0B99.w		; CE 99 0B ; Decrement $0B99.w [Flags: NZ]
	lda $7EF377.l		; AF 77 F3 7E ; Load long $7EF377.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF377.l		; 8F 77 F3 7E ; Store accumulator (long) $7EF377.l [Reads: Accumulator]
	lda $0B9A.w		; AD 9A 0B ; Load $0B9A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $7EF377.l		; AF 77 F3 7E ; Load long $7EF377.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF377.l		; 8F 77 F3 7E ; Store accumulator (long) $7EF377.l [Reads: Accumulator]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	jsl $0DDB7F.l		; 22 7F DB 0D ; Jump to subroutine long $0DDB7F.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $08		; [PATTERN: Memory clearing operation] 80 08 ; Branch always to $80, $08 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$EF.b		; 29 EF ; Logical AND #$EF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0301.w		; 8D 01 03 ; Store accumulator to $0301.w [Reads: Accumulator]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3C.b		; 85 3C ; Store accumulator to $3C.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $70, $3B		; 70 3B ; Branch if overflow set to $70, $3B [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F7		; D0 F7 ; Branch if not equal to $D0, $F7 [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $6F		; 90 6F ; Branch if carry clear to $90, $6F [Flow: branch]
	lda $035F.w		; AD 5F 03 ; Load $035F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $6A		; D0 6A ; Branch if not equal to $D0, $6A [Flow: branch]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0301.w		; 8D 01 03 ; Store accumulator to $0301.w [Reads: Accumulator]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $09820F.l		; 22 0F 82 09 ; Jump to subroutine long $09820F.l [Writes: Stack Pointer] [Flow: call]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $31		; B0 31 ; Branch if carry set to $B0, $31 [Flow: branch]
	lda $72.b		; A5 72 ; Load $72.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda $0301.w		; AD 01 03 ; Load $0301.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	jsr $AE65.w		; 20 65 AE ; Jump to subroutine at $AE65.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $27		; 10 27 ; Branch if plus to $10, $27 [Flow: branch]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0300.w		; [PATTERN: Memory clearing operation] 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $11		; 90 11 ; Branch if carry clear to $90, $11 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $09811F.l		; 22 1F 81 09 ; Jump to subroutine long $09811F.l [Writes: Stack Pointer] [Flow: call]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $FA		; 90 FA ; Branch if carry clear to $90, $FA [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $7EF34F.l		; AF 4F F3 7E ; Load long $7EF34F.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7EF35C.l,X		; BF 5C F3 7E ; Load long $7EF35C.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $E8		; F0 E8 ; Branch if equal to $F0, $E8 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $20		; 90 20 ; Branch if carry clear to $90, $20 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3B		; F0 3B ; Branch if equal to $F0, $3B [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $63		; F0 63 ; Branch if equal to $F0, $63 [Flow: branch]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $AA, $00		; 82 AA 00 ; Branch always long to $82, $AA, $00 [Flow: branch]
	.db $82, $8F, $00		; 82 8F 00 ; Branch always long to $82, $8F, $00 [Flow: branch]
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7EF36D.l		; CF 6D F3 7E ; Compare accumulator (long) $7EF36D.l [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $BC, $07		; 82 BC 07 ; Branch always long to $82, $BC, $07 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF35C.l,X		; 9F 5C F3 7E ; Store accumulator (long,X) $7EF35C.l,X [Reads: Accumulator, X Index]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0208.w		; 8D 08 02 ; Store accumulator to $0208.w [Reads: Accumulator]
	jsl $0DFA58.l		; 22 58 FA 0D ; Jump to subroutine long $0DFA58.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $91, $07		; 82 91 07 ; Branch always long to $82, $91, $07 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF35C.l,X		; 9F 5C F3 7E ; Store accumulator (long,X) $7EF35C.l,X [Reads: Accumulator, X Index]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0208.w		; 8D 08 02 ; Store accumulator to $0208.w [Reads: Accumulator]
	jsl $0DFA58.l		; 22 58 FA 0D ; Jump to subroutine long $0DFA58.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $64		; 80 64 ; Branch always to $80, $64 [Flow: branch]
	lda $7EF36C.l		; AF 6C F3 7E ; Load long $7EF36C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7EF36D.l		; CF 6D F3 7E ; Compare accumulator (long) $7EF36D.l [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $5B, $07		; 82 5B 07 ; Branch always long to $82, $5B, $07 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF35C.l,X		; 9F 5C F3 7E ; Store accumulator (long,X) $7EF35C.l,X [Reads: Accumulator, X Index]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0208.w		; 8D 08 02 ; Store accumulator to $0208.w [Reads: Accumulator]
	jsl $0DFA58.l		; 22 58 FA 0D ; Jump to subroutine long $0DFA58.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $2E		; 80 2E ; Branch always to $80, $2E [Flow: branch]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	jsl $1EFE33.l		; 22 33 FE 1E ; Jump to subroutine long $1EFE33.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	.db $82, $2E, $07		; 82 2E 07 ; Branch always long to $82, $2E, $07 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF35C.l,X		; 9F 5C F3 7E ; Store accumulator (long,X) $7EF35C.l,X [Reads: Accumulator, X Index]
	jsl $0DFA58.l		; 22 58 FA 0D ; Jump to subroutine long $0DFA58.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	jsl $1EDCCF.l		; 22 CF DC 1E ; Jump to subroutine long $1EDCCF.l [Writes: Stack Pointer] [Flow: call]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	.db $82, $16, $07		; 82 16 07 ; Branch always long to $82, $16, $07 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF35C.l,X		; 9F 5C F3 7E ; Store accumulator (long,X) $7EF35C.l,X [Reads: Accumulator, X Index]
	jsl $0DFA58.l		; 22 58 FA 0D ; Jump to subroutine long $0DFA58.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $37		; D0 37 ; Branch if not equal to $D0, $37 [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $32		; 90 32 ; Branch if carry clear to $90, $32 [Flow: branch]
	lda $7EF34A.l		; AF 4A F3 7E ; Load long $7EF34A.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B0AB.w		; 20 AB B0 ; Jump to subroutine at $B0AB.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0992F0.l		; 22 F0 92 09 ; Jump to subroutine long $0992F0.l [Writes: Stack Pointer] [Flow: call]
	jsl $01F3EC.l		; 22 EC F3 01 ; Jump to subroutine long $01F3EC.l [Writes: Stack Pointer] [Flow: call]
	ldy #$02.b		; [PATTERN: Memory clearing operation] A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$2F.b		; A9 2F ; Load #$2F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098F1C.l		; 22 1C 8F 09 ; Jump to subroutine long $098F1C.l [Writes: Stack Pointer] [Flow: call]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	stz $3C.b		; [PATTERN: Memory clearing operation] 64 3C ; Store zero to $3C.b
	stz $50.b		; 64 50 ; Store zero to $50.b
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($03.b,X)		; 01 03 ; Logical OR ($03.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $70, $37		; 70 37 ; Branch if overflow set to $70, $37 [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $ED		; D0 ED ; Branch if not equal to $D0, $ED [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $72		; 90 72 ; Branch if carry clear to $90, $72 [Flow: branch]
	lda $7EF344.l		; AF 44 F3 7E ; Load long $7EF344.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $57		; 80 57 ; Branch always to $80, $57 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B0AB.w		; 20 AB B0 ; Jump to subroutine at $B0AB.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $50		; [PATTERN: Memory clearing operation] 90 50 ; Branch if carry clear to $90, $50 [Flow: branch]
	lda $A289.w		; AD 89 A2 ; Load $A289.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; [PATTERN: Memory clearing operation] 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $0301.w		; 0C 01 03 ; Test and set bits $0301.w [Reads: Accumulator] [Flags: Z]
	stz $30.b		; 64 30 ; Store zero to $30.b
	stz $31.b		; [PATTERN: Memory clearing operation] 64 31 ; Store zero to $31.b
	stz $67.b		; 64 67 ; Store zero to $67.b
	stz $2A.b		; 64 2A ; Store zero to $2A.b
	stz $2B.b		; 64 2B ; Store zero to $2B.b
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $34		; 10 34 ; Branch if plus to $10, $34 [Flow: branch]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0300.w		; 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $A289.w,X		; BD 89 A2 ; Load $A289.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0992F0.l		; 22 F0 92 09 ; Jump to subroutine long $0992F0.l [Writes: Stack Pointer] [Flow: call]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	ldy #$01.b		; [PATTERN: Memory clearing operation] A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $00		; 80 00 ; Branch always to $80, $00 [Flow: branch]
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $7EF34C.l		; AF 4C F3 7E ; Load long $7EF34C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F9		; F0 F9 ; Branch if equal to $F0, $F9 [Flow: branch]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	.db $82, $BB, $00		; 82 BB 00 ; Branch always long to $82, $BB, $00 [Flow: branch]
	ora [$12.b]		; 07 12 ; OR accumulator with memory (long) [$12.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	ora ($10.b)		; 12 10 ; OR accumulator with memory (indirect) ($10.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $70, $1F		; 70 1F ; Branch if overflow set to $70, $1F [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $DE		; D0 DE ; Branch if not equal to $D0, $DE [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $D9		; [PATTERN: Memory clearing operation] 90 D9 ; Branch if carry clear to $90, $D9 [Flow: branch]
	lda $A320.w		; AD 20 A3 ; Load $A320.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037A.w		; 8D 7A 03 ; Store accumulator to $037A.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	jsr $AE65.w		; 20 65 AE ; Jump to subroutine at $AE65.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $30, $01		; 30 01 ; Branch if minus to $30, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $030D.w		; AE 0D 03 ; Load $030D.w into X register [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $030D.w		; 8E 0D 03 ; Store X register to $030D.w [Reads: X Index]
	lda $A320.w,X		; BD 20 A3 ; Load $A320.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda $A326.w,X		; BD 26 A3 ; Load $A326.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0300.w		; 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $4E		; D0 4E ; Branch if not equal to $D0, $4E [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $04B2.w		; AD B2 04 ; Load $04B2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0F		; F0 0F ; Branch if equal to $F0, $0F [Flow: branch]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$36.b		; A9 36 ; Load #$36.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098C73.l		; 22 73 8C 09 ; Jump to subroutine long $098C73.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $0357.w		; AD 57 03 ; Load $0357.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $035B.w		; 0D 5B 03 ; Logical OR $035B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098024.l		; 22 24 80 09 ; Jump to subroutine long $098024.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098F5B.l		; 22 5B 8F 09 ; Jump to subroutine long $098F5B.l [Writes: Stack Pointer] [Flow: call]
	lda $03FC.w		; AD FC 03 ; Load $03FC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $1DFD4B.l		; 22 4B FD 1D ; Jump to subroutine long $1DFD4B.l [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda #$12.b		; A9 12 ; Load #$12.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; [PATTERN: Memory clearing operation] 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	stz $037A.w		; 9C 7A 03 ; Store zero to $037A.w
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $50, $0E		; 50 0E ; Branch if overflow clear to $50, $0E [Flow: branch]
	dec $03F0.w		; CE F0 03 ; Decrement $03F0.w [Flags: NZ]
	lda $03F0.w		; AD F0 03 ; Load $03F0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F3		; D0 F3 ; Branch if not equal to $D0, $F3 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $E8		; 90 E8 ; Branch if carry clear to $90, $E8 [Flow: branch]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03F0.w		; 8D F0 03 ; Store accumulator to $03F0.w [Reads: Accumulator]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $DA		; D0 DA ; Branch if not equal to $D0, $DA [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $D4		; D0 D4 ; Branch if not equal to $D0, $D4 [Flow: branch]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $CE		; F0 CE ; Branch if equal to $F0, $CE [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$27.b		; C9 27 ; Compare #$27.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $C5		; F0 C5 ; Branch if equal to $F0, $C5 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	lda $7EF34C.l		; AF 4C F3 7E ; Load long $7EF34C.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $33		; D0 33 ; Branch if not equal to $D0, $33 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0018.w		; C9 18 00 ; Compare #$0018.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0760.w		; C9 60 07 ; Compare #$0760.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $1F		; 90 1F ; Branch if carry clear to $90, $1F [Flow: branch]
	cmp #$07E0.w		; C9 E0 07 ; Compare #$07E0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $1A		; B0 1A ; Branch if carry set to $B0, $1A [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01CF.w		; C9 CF 01 ; Compare #$01CF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $13		; 90 13 ; Branch if carry clear to $90, $13 [Flow: branch]
	cmp #$0230.w		; C9 30 02 ; Compare #$0230.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$2D.b		; A9 2D ; Load #$2D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$37.b		; A9 37 ; Load #$37.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098D11.l		; 22 11 8D 09 ; Jump to subroutine long $098D11.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$27.b		; A9 27 ; Load #$27.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0994FE.l		; 22 FE 94 09 ; Jump to subroutine long $0994FE.l [Writes: Stack Pointer] [Flow: call]
	stz $03F8.w		; 9C F8 03 ; Store zero to $03F8.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$27.b		; A9 27 ; Load #$27.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0994FE.l		; 22 FE 94 09 ; Jump to subroutine long $0994FE.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $70, $1E		; 70 1E ; Branch if overflow set to $70, $1E [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $E5		; D0 E5 ; Branch if not equal to $D0, $E5 [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $15		; 90 15 ; Branch if carry clear to $90, $15 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $02ED.w		; AD ED 02 ; Load $02ED.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	.db $82, $D9, $05		; 82 D9 05 ; Branch always long to $82, $D9, $05 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $5D		; 90 5D ; Branch if carry clear to $90, $5D [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda $0FFC.w		; AD FC 0F ; Load $0FFC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $7EF3D3.l		; AF D3 F3 7E ; Load long $7EF3D3.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $8C, $04		; 82 8C 04 ; Branch always long to $82, $8C, $04 [Flow: branch]
	lda $0C4A.w		; AD 4A 0C ; Load $0C4A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0C4B.w		; 0D 4B 0C ; Logical OR $0C4B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0C4C.w		; 0D 4C 0C ; Logical OR $0C4C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B0AB.w		; 20 AB B0 ; Jump to subroutine at $B0AB.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $1B		; 90 1B ; Branch if carry clear to $90, $1B [Flow: branch]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; [PATTERN: Memory clearing operation] 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda $A503.w		; AD 03 A5 ; Load $A503.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $031C.w		; 9C 1C 03 ; Store zero to $031C.w
	stz $031D.w		; 9C 1D 03 ; Store zero to $031D.w
	stz $0324.w		; 9C 24 03 ; Store zero to $0324.w
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$07.b]		; 07 07 ; OR accumulator with memory (long) [$07.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	inc $0FC1.w		; EE C1 0F ; Increment $0FC1.w [Flags: NZ]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $52		; 10 52 ; Branch if plus to $10, $52 [Flow: branch]
	inc $031D.w		; EE 1D 03 ; Increment $031D.w [Flags: NZ]
	ldx $031D.w		; AE 1D 03 ; Load $031D.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldx #$0B.b		; A2 0B ; Load #$0B.b into X register [Writes: X Index] [Flags: NZ]
	.db $80, $1E		; 80 1E ; Branch always to $80, $1E [Flow: branch]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	cpx #$0C.b		; E0 0C ; Compare #$0C.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031D.w		; 8D 1D 03 ; Store accumulator to $031D.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $A503.w,X		; BD 03 A5 ; Load $A503.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda $A4F7.w,X		; BD F7 A4 ; Load $A4F7.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $031C.w		; 8D 1C 03 ; Store accumulator to $031C.w [Reads: Accumulator]
	lda $0324.w		; AD 24 03 ; Load $0324.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0324.w		; 8D 24 03 ; Store accumulator to $0324.w [Reads: Accumulator]
	ldy #$00.b		; [PATTERN: Memory clearing operation] A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0991FC.l		; 22 FC 91 09 ; Jump to subroutine long $0991FC.l [Writes: Stack Pointer] [Flow: call]
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $0046.w		; 9C 46 00 ; Store zero to $0046.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $60		; 90 60 ; Branch if carry clear to $90, $60 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda $0FFC.w		; AD FC 0F ; Load $0FFC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $7EF3D3.l		; AF D3 F3 7E ; Load long $7EF3D3.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $B7, $03		; 82 B7 03 ; Branch always long to $82, $B7, $03 [Flow: branch]
	lda $0C4A.w		; AD 4A 0C ; Load $0C4A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0C4B.w		; 0D 4B 0C ; Logical OR $0C4B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0C4C.w		; 0D 4C 0C ; Logical OR $0C4C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B0AB.w		; 20 AB B0 ; Jump to subroutine at $B0AB.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $1E		; 90 1E ; Branch if carry clear to $90, $1E [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda $A5E3.w		; AD E3 A5 ; Load $A5E3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; [PATTERN: Memory clearing operation] 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda $A5CF.w		; AD CF A5 ; Load $A5CF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031C.w		; 8D 1C 03 ; Store accumulator to $031C.w [Reads: Accumulator]
	stz $031D.w		; 9C 1D 03 ; Store zero to $031D.w
	stz $0324.w		; 9C 24 03 ; Store zero to $0324.w
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$0A.b		; 09 0A ; Logical OR #$0A.b with accumulator [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	tsb $080A.w		; 0C 0A 08 ; Test and set bits $080A.w [Reads: Accumulator] [Flags: Z]
	ora $0F0E.w		; 0D 0E 0F ; Logical OR $0F0E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $07.b,S		; 03 07 ; OR accumulator with stack relative $07.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($0D.b,X)		; 01 0D ; Logical OR ($0D.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc $0FC1.w		; EE C1 0F ; Increment $0FC1.w [Flags: NZ]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $4C		; 10 4C ; Branch if plus to $10, $4C [Flow: branch]
	inc $031D.w		; EE 1D 03 ; Increment $031D.w [Flags: NZ]
	ldx $031D.w		; AE 1D 03 ; Load $031D.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cpx #$14.b		; E0 14 ; Compare #$14.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031D.w		; 8D 1D 03 ; Store accumulator to $031D.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $A5E3.w,X		; BD E3 A5 ; Load $A5E3.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda $A5CF.w,X		; BD CF A5 ; Load $A5CF.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $031C.w		; 8D 1C 03 ; Store accumulator to $031C.w [Reads: Accumulator]
	lda $0324.w		; AD 24 03 ; Load $0324.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	cpx #$13.b		; E0 13 ; Compare #$13.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0324.w		; 8D 24 03 ; Store accumulator to $0324.w [Reads: Accumulator]
	ldy #$00.b		; [PATTERN: Memory clearing operation] A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $08AF66.l		; 22 66 AF 08 ; Jump to subroutine long $08AF66.l [Writes: Stack Pointer] [Flow: call]
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $0046.w		; 9C 46 00 ; Store zero to $0046.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $6D		; 90 6D ; Branch if carry clear to $90, $6D [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda $0FFC.w		; AD FC 0F ; Load $0FFC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $7EF359.l		; AF 59 F3 7E ; Load long $7EF359.l into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $7EF3D3.l		; AF D3 F3 7E ; Load long $7EF3D3.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $D5, $02		; 82 D5 02 ; Branch always long to $82, $D5, $02 [Flow: branch]
	lda $0C4A.w		; AD 4A 0C ; Load $0C4A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0C4B.w		; 0D 4B 0C ; Logical OR $0C4B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0C4C.w		; 0D 4C 0C ; Logical OR $0C4C.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $32		; D0 32 ; Branch if not equal to $D0, $32 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B0AB.w		; 20 AB B0 ; Jump to subroutine at $B0AB.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $2B		; 90 2B ; Branch if carry clear to $90, $2B [Flow: branch]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda $A6CA.w		; AD CA A6 ; Load $A6CA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; [PATTERN: Memory clearing operation] 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda $A6BE.w		; AD BE A6 ; Load $A6BE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031C.w		; 8D 1C 03 ; Store accumulator to $031C.w [Reads: Accumulator]
	stz $031D.w		; 9C 1D 03 ; Store zero to $031D.w
	stz $0324.w		; 9C 24 03 ; Store zero to $0324.w
	stz $46.b		; [PATTERN: Memory clearing operation] 64 46 ; Store zero to $46.b
	lda #$28.b		; A9 28 ; Load #$28.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0362.w		; 8D 62 03 ; Store accumulator to $0362.w [Reads: Accumulator]
	sta $0363.w		; 8D 63 03 ; Store accumulator to $0363.w [Reads: Accumulator]
	stz $0364.w		; 9C 64 03 ; Store zero to $0364.w
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($13.b)		; 12 13 ; OR accumulator with memory (indirect) ($13.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	trb $16.b		; 14 16 ; Test and reset bits $16.b [Reads: Accumulator] [Flags: Z]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; [PATTERN: Memory clearing operation] 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $13.b		; 05 13 ; Logical OR $13.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc $0FC1.w		; EE C1 0F ; Increment $0FC1.w [Flags: NZ]
	stz $27.b		; 64 27 ; Store zero to $27.b
	stz $28.b		; 64 28 ; Store zero to $28.b
	lda $031D.w		; AD 1D 03 ; Load $031D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	lda $0362.w		; AD 62 03 ; Load $0362.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	lda $0363.w		; AD 63 03 ; Load $0363.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02C7.w		; 8D C7 02 ; Store accumulator to $02C7.w [Reads: Accumulator]
	lda $0364.w		; AD 64 03 ; Load $0364.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	jsr $8932.w		; 20 32 89 ; Jump to subroutine at $8932.w [Writes: Stack Pointer] [Flow: call]
	jsl $07E370.l		; 22 70 E3 07 ; Jump to subroutine long $07E370.l [Writes: Stack Pointer] [Flow: call]
	lda $29.b		; A5 29 ; Load $29.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0362.w		; 8D 62 03 ; Store accumulator to $0362.w [Reads: Accumulator]
	lda $02C7.w		; AD C7 02 ; Load $02C7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0363.w		; 8D 63 03 ; Store accumulator to $0363.w [Reads: Accumulator]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0364.w		; 8D 64 03 ; Store accumulator to $0364.w [Reads: Accumulator]
	.db $30, $11		; 30 11 ; Branch if minus to $30, $11 [Flow: branch]
	ldy #$14.b		; A0 14 ; Load #$14.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $29.b		; A5 29 ; Load $29.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$15.b		; A0 15 ; Load #$15.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $031C.w		; 8C 1C 03 ; Store Y register to $031C.w [Reads: Y Index]
	.db $80, $59		; 80 59 ; Branch always to $80, $59 [Flow: branch]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $55		; 10 55 ; Branch if plus to $10, $55 [Flow: branch]
	inc $031D.w		; EE 1D 03 ; Increment $031D.w [Flags: NZ]
	ldx $031D.w		; AE 1D 03 ; Load $031D.w into X register [Writes: X Index] [Flags: NZ]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	cpx #$0C.b		; E0 0C ; Compare #$0C.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031D.w		; 8D 1D 03 ; Store accumulator to $031D.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $A6CA.w,X		; BD CA A6 ; Load $A6CA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda $A6BE.w,X		; BD BE A6 ; Load $A6BE.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $031C.w		; 8D 1C 03 ; Store accumulator to $031C.w [Reads: Accumulator]
	lda $0324.w		; AD 24 03 ; Load $0324.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	cpx #$0B.b		; E0 0B ; Compare #$0B.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0324.w		; 8D 24 03 ; Store accumulator to $0324.w [Reads: Accumulator]
	ldy #$00.b		; [PATTERN: Memory clearing operation] A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $099589.l		; 22 89 95 09 ; Jump to subroutine long $099589.l [Writes: Stack Pointer] [Flow: call]
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $0046.w		; 9C 46 00 ; Store zero to $0046.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $09960B.l		; 22 0B 96 09 ; Jump to subroutine long $09960B.l [Writes: Stack Pointer] [Flow: call]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $A800.w,X		; BD 00 A8 ; Load $A800.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $031E.w		; 8D 1E 03 ; Store accumulator to $031E.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $A7E8.w		; AD E8 A7 ; Load $A7E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda $A7B8.w,X		; BD B8 A7 ; Load $A7B8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $031C.w		; 8D 1C 03 ; Store accumulator to $031C.w [Reads: Accumulator]
	stz $031D.w		; 9C 1D 03 ; Store zero to $031D.w
	lda #$90.b		; A9 90 ; Load #$90.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3C.b		; 85 3C ; Store accumulator to $3C.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	.db $82, $55, $00		; 82 55 00 ; Branch always long to $82, $55, $00 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $A783.w		; 20 83 A7 ; Jump to subroutine at $A783.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora #$00.b		; 09 00 ; Logical OR #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $0C0D.w		; 0C 0D 0C ; Test and set bits $0C0D.w [Reads: Accumulator] [Flags: Z]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0C.b,S		; 03 0C ; OR accumulator with stack relative $0C.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl $0E0F.w		; 0E 0F 0E ; Arithmetic shift left $0E0F.w [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora #$02.b		; 09 02 ; Logical OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$0E.b]		; 07 0E ; OR accumulator with memory (long) [$0E.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $09.b,S		; 03 09 ; OR accumulator with stack relative $09.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $01.b,S		; 03 01 ; OR accumulator with stack relative $01.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($05.b,X)		; 01 05 ; Logical OR ($05.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	clc		; 18 ; Clear carry flag [Flags: C]
	bit $20.b		; 24 20 ; Test bits $20.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	trb $F5.b		; 14 F5 ; Test and reset bits $F5.b [Reads: Accumulator] [Flags: Z]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $65		; F0 65 ; Branch if equal to $F0, $65 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$2A.b		; C9 2A ; Compare #$2A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$2B.b		; C9 2B ; Compare #$2B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; [PATTERN: Memory clearing operation] D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $EF		; 10 EF ; Branch if plus to $10, $EF [Flow: branch]
	stz $25.b		; 64 25 ; Store zero to $25.b
	lda $50.b		; [PATTERN: Memory clearing operation] A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $3A.b		; [PATTERN: Memory clearing operation] 64 3A ; Store zero to $3A.b
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	stz $031C.w		; 9C 1C 03 ; Store zero to $031C.w
	stz $031D.w		; 9C 1D 03 ; Store zero to $031D.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	lda $0360.w		; AD 60 03 ; Load $0360.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2A		; F0 2A ; Branch if equal to $F0, $2A [Flow: branch]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; [PATTERN: Memory clearing operation] 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	lda #$2B.b		; A9 2B ; Load #$2B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $82, $03, $F1		; 82 03 F1 ; Branch always long to $82, $03, $F1 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $82, $45, $DE		; 82 45 DE ; Branch always long to $82, $45, $DE [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $8711.w		; 20 11 87 ; Jump to subroutine at $8711.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	stz $67.b		; 64 67 ; Store zero to $67.b
	jsl $07E245.l		; 22 45 E2 07 ; Jump to subroutine long $07E245.l [Writes: Stack Pointer] [Flow: call]
	jsr $B7C7.w		; 20 C7 B7 ; Jump to subroutine at $B7C7.w [Writes: Stack Pointer] [Flow: call]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $0302.w		; 9C 02 03 ; Store zero to $0302.w
	jsr $E8F0.w		; 20 F0 E8 ; Jump to subroutine at $E8F0.w [Writes: Stack Pointer] [Flow: call]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $5B		; 10 5B ; Branch if plus to $10, $5B [Flow: branch]
	lda $031D.w		; AD 1D 03 ; Load $031D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $031D.w		; 8D 1D 03 ; Store accumulator to $031D.w [Reads: Accumulator]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	lda $031D.w		; AD 1D 03 ; Load $031D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	lda $50.b		; [PATTERN: Memory clearing operation] A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $031C.w		; [PATTERN: Memory clearing operation] 9C 1C 03 ; Store zero to $031C.w
	stz $031D.w		; 9C 1D 03 ; Store zero to $031D.w
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$1E.b		; C9 1E ; Compare #$1E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx $3A.b		; 86 3A ; Store X register to $3A.b [Reads: X Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $80, $1B		; 80 1B ; Branch always to $80, $1B [Flow: branch]
	lda $031D.w		; AD 1D 03 ; Load $031D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $031E.w		; 6D 1E 03 ; Add $031E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $A7B8.w,X		; BD B8 A7 ; Load $A7B8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $031C.w		; 8D 1C 03 ; Store accumulator to $031C.w [Reads: Accumulator]
	ldx $031D.w		; AE 1D 03 ; Load $031D.w into X register [Writes: X Index] [Flags: NZ]
	ldy $A7F4.w,X		; BC F4 A7 ; Load Y register $A7F4.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sty $3D.b		; 84 3D ; Store Y register to $3D.b [Reads: Y Index]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $09960B.l		; 22 0B 96 09 ; Jump to subroutine long $09960B.l [Writes: Stack Pointer] [Flow: call]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $A800.w,X		; BD 00 A8 ; Load $A800.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $031E.w		; 8D 1E 03 ; Store accumulator to $031E.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $A7E8.w		; AD E8 A7 ; Load $A7E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda $A7B8.w,X		; BD B8 A7 ; Load $A7B8.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $031C.w		; 8D 1C 03 ; Store accumulator to $031C.w [Reads: Accumulator]
	stz $031D.w		; 9C 1D 03 ; Store zero to $031D.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	.db $82, $EA, $FE		; 82 EA FE ; Branch always long to $82, $EA, $FE [Flow: branch]
	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $70, $1E		; 70 1E ; Branch if overflow set to $70, $1E [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $C8		; 90 C8 ; Branch if carry clear to $90, $C8 [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda #$0121.w		; A9 21 01 ; Load #$0121.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	.db $82, $74, $00		; 82 74 00 ; Branch always long to $82, $74, $00 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $037F.w		; AD 7F 03 ; Load $037F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $54		; 80 54 ; Branch always to $80, $54 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda $0FFC.w		; AD FC 0F ; Load $0FFC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4B		; D0 4B ; Branch if not equal to $D0, $4B [Flow: branch]
	jsl $02A1B1.l		; 22 B1 A1 02 ; Jump to subroutine long $02A1B1.l [Writes: Stack Pointer] [Flow: call]
	lda $012E.w		; [PATTERN: Memory clearing operation] AD 2E 01 ; Load $012E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$3C.b		; C9 3C ; Compare #$3C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	stz $05FC.w		; 9C FC 05 ; Store zero to $05FC.w
	stz $05FD.w		; 9C FD 05 ; Store zero to $05FD.w
	.db $80, $38		; 80 38 ; Branch always to $80, $38 [Flow: branch]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7B.b		; 85 7B ; Store accumulator to $7B.b [Reads: Accumulator]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1ADF.w		; 8D DF 1A ; Store accumulator to $1ADF.w [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1AEF.w		; 8D EF 1A ; Store accumulator to $1AEF.w [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1ABF.w		; 8D BF 1A ; Store accumulator to $1ABF.w [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $1ACF.w		; 8D CF 1A ; Store accumulator to $1ACF.w [Reads: Accumulator]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; [PATTERN: Memory clearing operation] 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	stz $03F8.w		; 9C F8 03 ; Store zero to $03F8.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02DB.w		; 8D DB 02 ; Store accumulator to $02DB.w [Reads: Accumulator]
	stz $B0.b		; 64 B0 ; Store zero to $B0.b
	stz $27.b		; [PATTERN: Memory clearing operation] 64 27 ; Store zero to $27.b
	stz $28.b		; 64 28 ; Store zero to $28.b
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $07F1E6.l		; 22 E6 F1 07 ; Jump to subroutine long $07F1E6.l [Writes: Stack Pointer] [Flow: call]
	jsr $D6F4.w		; 20 F4 D6 ; Jump to subroutine at $D6F4.w [Writes: Stack Pointer] [Flow: call]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7B.b		; C5 7B ; Compare $7B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $29, $00		; 82 29 00 ; Branch always long to $82, $29, $00 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $B0		; 80 B0 ; Branch always to $80, $B0 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $01		; 90 01 ; Branch if carry clear to $90, $01 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $90, $2D		; 90 2D ; Branch if carry clear to $90, $2D [Flow: branch]
	lda $7EF356.l		; AF 56 F3 7E ; Load long $7EF356.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7B.b		; C5 7B ; Compare $7B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $DC		; D0 DC ; Branch if not equal to $D0, $DC [Flow: branch]
	jsl $01FFB6.l		; 22 B6 FF 01 ; Jump to subroutine long $01FFB6.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	lda $26.b		; A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	stz $5E.b		; [PATTERN: Memory clearing operation] 64 5E ; Store zero to $5E.b
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	stz $0345.w		; 9C 45 03 ; Store zero to $0345.w
	lda $0340.w		; [PATTERN: Memory clearing operation] AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	stz $0374.w		; 9C 74 03 ; Store zero to $0374.w
	stz $0372.w		; 9C 72 03 ; Store zero to $0372.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $3A.b		; [PATTERN: Memory clearing operation] 64 3A ; Store zero to $3A.b
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $032B.w		; 9C 2B 03 ; Store zero to $032B.w
	stz $27.b		; 64 27 ; Store zero to $27.b
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; [PATTERN: Memory clearing operation] 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $7B.b		; C5 7B ; Compare $7B.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	stz $04AC.w		; 9C AC 04 ; Store zero to $04AC.w
	stz $04AD.w		; 9C AD 04 ; Store zero to $04AD.w
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$17.b		; A0 17 ; Load #$17.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $5D.b		; 84 5D ; Store Y register to $5D.b [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$05.b		; A9 05 ; Load #$05.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $010C.w		; 8D 0C 01 ; Store accumulator to $010C.w [Reads: Accumulator]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0FC1.w		; 8D C1 0F ; Store accumulator to $0FC1.w [Reads: Accumulator]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0308.w		; 8D 08 03 ; Store accumulator to $0308.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	lda #$F2.b		; A9 F2 ; Load #$F2.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04B4.w		; 8D B4 04 ; Store accumulator to $04B4.w [Reads: Accumulator]
	stz $04B5.w		; 9C B5 04 ; Store zero to $04B5.w
	lda $7EF3D3.l		; AF D3 F3 7E ; Load long $7EF3D3.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3D3.l		; 8F D3 F3 7E ; Store accumulator (long) $7EF3D3.l [Reads: Accumulator]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	.db $80, $21		; 80 21 ; Branch always to $80, $21 [Flow: branch]
	ldy #$07.b		; A0 07 ; Load #$07.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $7EF3CC.l		; 8F CC F3 7E ; Store accumulator (long) $7EF3CC.l [Reads: Accumulator]
	jsl $00D423.l		; 22 23 D4 00 ; Jump to subroutine long $00D423.l [Writes: Stack Pointer] [Flow: call]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $09915F.l		; 22 5F 91 09 ; Jump to subroutine long $09915F.l [Writes: Stack Pointer] [Flow: call]
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $099102.l		; 22 02 91 09 ; Jump to subroutine long $099102.l [Writes: Stack Pointer] [Flow: call]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	stz $02E2.w		; 9C E2 02 ; Store zero to $02E2.w
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsr $AE47.w		; 20 47 AE ; Jump to subroutine at $AE47.w [Writes: Stack Pointer] [Flow: call]
	stz $02E2.w		; 9C E2 02 ; Store zero to $02E2.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $40		; D0 40 ; Branch if not equal to $D0, $40 [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3C		; D0 3C ; Branch if not equal to $D0, $3C [Flow: branch]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $36		; D0 36 ; Branch if not equal to $D0, $36 [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $31		; 90 31 ; Branch if carry clear to $90, $31 [Flow: branch]
	jsr $9873.w		; 20 73 98 ; Jump to subroutine at $9873.w [Writes: Stack Pointer] [Flow: call]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00.b		; 29 00 ; Logical AND #$00.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037A.w		; 8D 7A 03 ; Store accumulator to $037A.w [Reads: Accumulator]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$1F.b		; A9 1F ; Load #$1F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $099B10.l		; 22 10 9B 09 ; Jump to subroutine long $099B10.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sed		; F8 ; Set decimal flag [Flags: D]
	.db $F0, $00		; F0 00 ; Branch if equal to $F0, $00 [Flow: branch]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	pea $40C0.w		; F4 C0 40 ; Push absolute address $40C0.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	brk $00.b		; [PATTERN: Memory clearing operation] 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpy #$40.b		; C0 40 ; Compare #$40.b with Y register [Reads: Y Index] [Flags: NCZ]
	stz $0373.w		; 9C 73 03 ; Store zero to $0373.w
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $46.b		; 64 46 ; Store zero to $46.b
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$1F.b		; C9 1F ; Compare #$1F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	dec $3D.b		; [PATTERN: Memory clearing operation] C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	lda $3D.b		; A5 3D ; Load $3D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $D6		; 10 D6 ; Branch if plus to $10, $D6 [Flow: branch]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FB.b		; 29 FB ; Logical AND #$FB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037A.w		; 8D 7A 03 ; Store accumulator to $037A.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3C.b		; 85 3C ; Store accumulator to $3C.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	lda $037E.w		; AD 7E 03 ; Load $037E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3E.b		; [PATTERN: Memory clearing operation] 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	stz $30.b		; 64 30 ; Store zero to $30.b
	stz $31.b		; 64 31 ; Store zero to $31.b
	.db $82, $EF, $0B		; 82 EF 0B ; Branch always long to $82, $EF, $0B [Flow: branch]
	stz $02F5.w		; [PATTERN: Memory clearing operation] 9C F5 02 ; Store zero to $02F5.w
	ldx $039D.w		; AE 9D 03 ; Load $039D.w into X register [Writes: X Index] [Flags: NZ]
	dec $0C5E.w,X		; DE 5E 0C ; Decrement memory $0C5E.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	stz $0C5E.w,X		; 9E 5E 0C ; Store zero to $0C5E.w,X [Reads: X Index]
	.db $82, $88, $00		; 82 88 00 ; Branch always long to $82, $88, $00 [Flow: branch]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	ldy $0C72.w,X		; BC 72 0C ; Load Y register $0C72.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	stz $05.b		; 64 05 ; Store zero to $05.b
	lda $AB6C.w,Y		; B9 6C AB ; Load $AB6C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	stz $07.b		; 64 07 ; Store zero to $07.b
	lda $AB70.w,Y		; B9 70 AB ; Load $AB70.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	.db $10, $04		; [PATTERN: Memory clearing operation] 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
	stz $27.b		; 64 27 ; Store zero to $27.b
	stz $28.b		; 64 28 ; Store zero to $28.b
	lda $AB74.w,Y		; B9 74 AB ; Load $AB74.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; [PATTERN: Memory clearing operation] 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	stz $09.b		; 64 09 ; Store zero to $09.b
	lda $AB78.w,Y		; B9 78 AB ; Load $AB78.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	stz $0B.b		; 64 0B ; Store zero to $0B.b
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $20.b		; E5 20 ; Subtract $20.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda $27.b		; A5 27 ; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $08.b		; 05 08 ; Logical OR $08.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $22.b		; E5 22 ; Subtract $22.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $09		; 90 09 ; Branch if carry clear to $90, $09 [Flow: branch]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0A.b		; 05 0A ; Logical OR $0A.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $27.b		; A5 27 ; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $28.b		; 05 28 ; Logical OR $28.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $D8, $00		; 82 D8 00 ; Branch always long to $82, $D8, $00 [Flow: branch]
	ldx $039D.w		; AE 9D 03 ; Load $039D.w into X register [Writes: X Index] [Flags: NZ]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	lda $02D3.w		; AD D3 02 ; Load $02D3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02D1.w		; [PATTERN: Memory clearing operation] 8D D1 02 ; Store accumulator to $02D1.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $3D.b		; 64 3D ; Store zero to $3D.b
	stz $037E.w		; 9C 7E 03 ; Store zero to $037E.w
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FB.b		; 29 FB ; Logical AND #$FB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037A.w		; 8D 7A 03 ; Store accumulator to $037A.w [Reads: Accumulator]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	lda $03A4.w,X		; BD A4 03 ; Load $03A4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2A		; F0 2A ; Branch if equal to $F0, $2A [Flow: branch]
	lda $0476.w		; AD 76 04 ; Load $0476.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0476.w		; 8D 76 04 ; Store accumulator to $0476.w [Reads: Accumulator]
	dec $A4.b		; C6 A4 ; Decrement $A4.b [Reads: Direct Page] [Flags: NZ]
	lda $044A.w		; AD 4A 04 ; Load $044A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $048E.w		; 8D 8E 04 ; Store accumulator to $048E.w [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	lda $044A.w		; AD 4A 04 ; Load $044A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	jsl $02B929.l		; 22 29 B9 02 ; Jump to subroutine long $02B929.l [Writes: Stack Pointer] [Flow: call]
	jsr $CF12.w		; 20 12 CF ; Jump to subroutine at $CF12.w [Writes: Stack Pointer] [Flow: call]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $32		; D0 32 ; Branch if not equal to $D0, $32 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	lda $26.b		; A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0998FC.l		; 22 FC 98 09 ; Jump to subroutine long $0998FC.l [Writes: Stack Pointer] [Flow: call]
	lda #$04.b		; [PATTERN: Memory clearing operation] A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; [PATTERN: Memory clearing operation] 9C 76 03 ; Store zero to $0376.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	.db $80, $2C		; 80 2C ; Branch always to $80, $2C [Flow: branch]
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5C.b		; 85 5C ; Store accumulator to $5C.b [Reads: Accumulator]
	stz $5A.b		; 64 5A ; Store zero to $5A.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5B.b		; 85 5B ; Store accumulator to $5B.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3E.b		; 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $41.b		; 85 41 ; Store accumulator to $41.b [Reads: Accumulator]
	jsr $B7C7.w		; 20 C7 B7 ; Jump to subroutine at $B7C7.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $7E, $00		; 82 7E 00 ; Branch always long to $82, $7E, $00 [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3C.b		; 85 3C ; Store accumulator to $3C.b [Reads: Accumulator]
	.db $82, $74, $00		; 82 74 00 ; Branch always long to $82, $74, $00 [Flow: branch]
	jsl $07E370.l		; 22 70 E3 07 ; Jump to subroutine long $07E370.l [Writes: Stack Pointer] [Flow: call]
	ldy #$05.b		; A0 05 ; Load #$05.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	lda $036D.w		; AD 6D 03 ; Load $036D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $036D.w		; 0D 6D 03 ; Logical OR $036D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $036E.w		; 0D 6E 03 ; Logical OR $036E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	dec $03F9.w		; CE F9 03 ; Decrement $03F9.w [Flags: NZ]
	.db $10, $0D		; 10 0D ; Branch if plus to $10, $0D [Flow: branch]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $03F9.w		; 8D F9 03 ; Store accumulator to $03F9.w [Reads: Accumulator]
	lda $037E.w		; AD 7E 03 ; Load $037E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$02.b		; 49 02 ; Exclusive OR #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037E.w		; 8D 7E 03 ; Store accumulator to $037E.w [Reads: Accumulator]
	stz $0351.w		; 9C 51 03 ; Store zero to $0351.w
	lda $037E.w		; AD 7E 03 ; Load $037E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $37		; D0 37 ; Branch if not equal to $D0, $37 [Flow: branch]
	lda $0357.w		; AD 57 03 ; Load $0357.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0351.w		; 8D 51 03 ; Store accumulator to $0351.w [Reads: Accumulator]
	jsr $D2C6.w		; 20 C6 D2 ; Jump to subroutine at $D2C6.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $26		; B0 26 ; Branch if carry set to $B0, $26 [Flow: branch]
	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $1F		; 80 1F ; Branch always to $80, $1F [Flow: branch]
	lda $0359.w		; AD 59 03 ; Load $0359.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0341.w		; 0D 41 03 ; Logical OR $0341.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	inc $0351.w		; EE 51 03 ; Increment $0351.w [Flags: NZ]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$70.b		; C9 70 ; Compare #$70.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8F0.w		; 20 F0 E8 ; Jump to subroutine at $E8F0.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4B		; D0 4B ; Branch if not equal to $D0, $4B [Flow: branch]
	dec $02E2.w		; CE E2 02 ; Decrement $02E2.w [Flags: NZ]
	.db $30, $09		; 30 09 ; Branch if minus to $30, $09 [Flow: branch]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	.db $82, $92, $00		; 82 92 00 ; Branch always long to $82, $92, $00 [Flow: branch]
	stz $02E2.w		; 9C E2 02 ; Store zero to $02E2.w
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $E3		; D0 E3 ; Branch if not equal to $D0, $E3 [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $DE		; 90 DE ; Branch if carry clear to $90, $DE [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $77		; F0 77 ; Branch if equal to $F0, $77 [Flow: branch]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $55.b		; 85 55 ; Store accumulator to $55.b [Reads: Accumulator]
	lda $7EF37B.l		; AF 7B F3 7E ; Load long $7EF37B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $ADBE.w,Y		; B9 BE AD ; Load $ADBE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $4C.b		; 85 4C ; Store accumulator to $4C.b [Reads: Accumulator]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E2.w		; 8D E2 02 ; Store accumulator to $02E2.w [Reads: Accumulator]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $09912C.l		; 22 2C 91 09 ; Jump to subroutine long $09912C.l [Writes: Stack Pointer] [Flow: call]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $51		; 80 51 ; Branch always to $80, $51 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	jsr $AE65.w		; 20 65 AE ; Jump to subroutine at $AE65.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	dec $4C.b		; C6 4C ; Decrement $4C.b [Reads: Direct Page] [Flags: NZ]
	lda $4C.b		; A5 4C ; Load $4C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $7EF37B.l		; AF 7B F3 7E ; Load long $7EF37B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $ADBE.w,Y		; B9 BE AD ; Load $ADBE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $4C.b		; 85 4C ; Store accumulator to $4C.b [Reads: Accumulator]
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF36E.l		; 8F 6E F3 7E ; Store accumulator (long) $7EF36E.l [Reads: Accumulator]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	dec $02E2.w		; CE E2 02 ; Decrement $02E2.w [Flags: NZ]
	.db $10, $23		; 10 23 ; Branch if plus to $10, $23 [Flow: branch]
	stz $02E2.w		; 9C E2 02 ; Store zero to $02E2.w
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$23.b		; A9 23 ; Load #$23.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $09912C.l		; 22 2C 91 09 ; Jump to subroutine long $09912C.l [Writes: Stack Pointer] [Flow: call]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; [PATTERN: Memory clearing operation] 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E2.w		; 8D E2 02 ; Store accumulator to $02E2.w [Reads: Accumulator]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $55.b		; 64 55 ; Store zero to $55.b
	stz $0360.w		; 9C 60 03 ; Store zero to $0360.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $82, $6F, $02		; 82 6F 02 ; Branch always long to $82, $6F, $02 [Flow: branch]
	lda $AD.b		; A5 AD ; Load $AD.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $0322.w		; AD 22 03 ; Load $0322.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; [PATTERN: Memory clearing operation] 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	stz $30.b		; 64 30 ; Store zero to $30.b
	stz $31.b		; 64 31 ; Store zero to $31.b
	stz $67.b		; [PATTERN: Memory clearing operation] 64 67 ; Store zero to $67.b
	stz $2A.b		; 64 2A ; Store zero to $2A.b
	stz $2B.b		; 64 2B ; Store zero to $2B.b
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	lda $02F5.w		; AD F5 02 ; Load $02F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	stz $67.b		; 64 67 ; Store zero to $67.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F8		; F0 F8 ; Branch if equal to $F0, $F8 [Flow: branch]
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F4		; F0 F4 ; Branch if equal to $F0, $F4 [Flow: branch]
	lda $0304.w		; AD 04 03 ; Load $0304.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $ED		; D0 ED ; Branch if not equal to $D0, $ED [Flow: branch]
	cmp $0303.w		; CD 03 03 ; Compare $0303.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	dec $4C.b		; C6 4C ; Decrement $4C.b [Reads: Direct Page] [Flags: NZ]
	lda $4C.b		; A5 4C ; Load $4C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1A		; D0 1A ; Branch if not equal to $D0, $1A [Flow: branch]
	lda $7EF37B.l		; AF 7B F3 7E ; Load long $7EF37B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $ADBE.w,Y		; B9 BE AD ; Load $ADBE.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $4C.b		; 85 4C ; Store accumulator to $4C.b [Reads: Accumulator]
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $7EF36E.l		; 8F 6E F3 7E ; Store accumulator (long) $7EF36E.l [Reads: Accumulator]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $AE47.w		; 20 47 AE ; Jump to subroutine at $AE47.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $70, $40		; 70 40 ; Branch if overflow set to $70, $40 [Flow: branch]
	lda $02F5.w		; AD F5 02 ; Load $02F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $BE		; D0 BE ; Branch if not equal to $D0, $BE [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $BA		; D0 BA ; Branch if not equal to $D0, $BA [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $B5		; 90 B5 ; Branch if carry clear to $90, $B5 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$2C.b		; C9 2C ; Compare #$2C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B0AB.w		; 20 AB B0 ; Jump to subroutine at $B0AB.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $A2		; 90 A2 ; Branch if carry clear to $90, $A2 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0350.w		; 8D 50 03 ; Store accumulator to $0350.w [Reads: Accumulator]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$2C.b		; A9 2C ; Load #$2C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $08E078.l		; [PATTERN: Memory clearing operation] 22 78 E0 08 ; Jump to subroutine long $08E078.l [Writes: Stack Pointer] [Flow: call]
	lda $9EEC.w		; AD EC 9E ; Load $9EEC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $037A.w		; 0C 7A 03 ; Test and set bits $037A.w [Reads: Accumulator] [Flags: Z]
	jsr $AE65.w		; 20 65 AE ; Jump to subroutine at $AE65.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $29		; 10 29 ; Branch if plus to $10, $29 [Flow: branch]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0300.w		; 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $9EEC.w,X		; BD EC 9E ; Load $9EEC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; [PATTERN: Memory clearing operation] 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $3D.b		; [PATTERN: Memory clearing operation] 64 3D ; Store zero to $3D.b
	stz $0350.w		; 9C 50 03 ; Store zero to $0350.w
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$F7.b		; 29 F7 ; Logical AND #$F7.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037A.w		; 8D 7A 03 ; Store accumulator to $037A.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($07.b,S),Y		; 13 07 ; OR accumulator (stack relative indirect indexed) ($07.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $B520.w		; 0D 20 B5 ; Logical OR $B520.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lda $24F7B0.l		; AF B0 F7 24 ; Load long $24F7B0.l into accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $70, $30		; 70 30 ; Branch if overflow set to $70, $30 [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $EF		; D0 EF ; Branch if not equal to $D0, $EF [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $EA		; 90 EA ; Branch if carry clear to $90, $EA [Flow: branch]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	jsr $B0AB.w		; 20 AB B0 ; Jump to subroutine at $B0AB.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $48		; 90 48 ; Branch if carry clear to $90, $48 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098EE0.l		; [PATTERN: Memory clearing operation] 22 E0 8E 09 ; Jump to subroutine long $098EE0.l [Writes: Stack Pointer] [Flow: call]
	stz $79.b		; 64 79 ; Store zero to $79.b
	lda $AF3B.w		; AD 3B AF ; Load $AF3B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037A.w		; 8D 7A 03 ; Store accumulator to $037A.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	jsr $AE65.w		; 20 65 AE ; Jump to subroutine at $AE65.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $30		; 10 30 ; Branch if plus to $10, $30 [Flow: branch]
	ldx $0300.w		; AE 00 03 ; Load $0300.w into X register [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $0300.w		; 8E 00 03 ; Store X register to $0300.w [Reads: X Index]
	lda $AF3B.w,X		; BD 3B AF ; Load $AF3B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$2A.b		; A9 2A ; Load #$2A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	plx		; [PATTERN: Memory clearing operation] FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	stz $037A.w		; 9C 7A 03 ; Store zero to $037A.w
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $037A.w		; AD 7A 03 ; Load $037A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$31.b		; C9 31 ; Compare #$31.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora #$04.b		; 09 04 ; Logical OR #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$08.b]		; 07 08 ; OR accumulator with memory (long) [$08.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	trb $1E.b		; 14 1E ; Test and reset bits $1E.b [Reads: Accumulator] [Flags: Z]
	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $70, $2D		; 70 2D ; Branch if overflow set to $70, $2D [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $B4		; D0 B4 ; Branch if not equal to $D0, $B4 [Flow: branch]
	jsr $B073.w		; 20 73 B0 ; Jump to subroutine at $B073.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $AF		; 90 AF ; Branch if carry clear to $90, $AF [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	ldx $AFF4.w,Y		; BE F4 AF ; Load X register $AFF4.w,Y [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	lda $AFCC.w,X		; BD CC AF ; Load $AFCC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0300.w		; 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037A.w		; 8D 7A 03 ; Store accumulator to $037A.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	jsr $AE65.w		; 20 65 AE ; Jump to subroutine at $AE65.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $3C		; 10 3C ; Branch if plus to $10, $3C [Flow: branch]
	ldx $030D.w		; AE 0D 03 ; Load $030D.w into X register [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	stx $030D.w		; 8E 0D 03 ; Store X register to $030D.w [Reads: X Index]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $AFF4.w,Y		; B9 F4 AF ; Load $AFF4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $030D.w		; 6D 0D 03 ; Add $030D.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $AFCC.w,Y		; B9 CC AF ; Load $AFCC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0300.w		; [PATTERN: Memory clearing operation] 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	cpx #$0A.b		; E0 0A ; Compare #$0A.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	stz $037A.w		; 9C 7A 03 ; Store zero to $037A.w
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $44.b		; 85 44 ; Store accumulator to $44.b [Reads: Accumulator]
	sta $45.b		; 85 45 ; Store accumulator to $45.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	bit $3A.b		; 24 3A ; Test bits $3A.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $70, $0E		; 70 0E ; Branch if overflow set to $70, $0E [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	tsb $3A.b		; 04 3A ; Test and set bits $3A.b [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora $06.b,S		; 03 06 ; OR accumulator with stack relative $06.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora #$0C.b		; 09 0C ; Logical OR #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $181512.l		; 0F 12 15 18 ; OR accumulator with memory (long) $181512.l [Writes: Accumulator] [Flags: NZ]
	stx $02.b		; 86 02 ; Store X register to $02.b [Reads: X Index]
	lda $B0A2.w,X		; BD A2 B0 ; Load $B0A2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7EF37B.l		; 6F 7B F3 7E ; Add with carry (long) $7EF37B.l [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $B087.w,X		; BD 87 B0 ; Load $B087.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	sta $7EF36E.l		; 8F 6E F3 7E ; Store accumulator (long) $7EF36E.l [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	lda #$3C.b		; A9 3C ; Load #$3C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
.ACCU 16
	rep #$20		; C2 20
	lda #$007B.w		; A9 7B 00 ; Load #$007B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $B0A2.w,X		; BD A2 B0 ; Load $B0A2.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $7EF37B.l		; 6F 7B F3 7E ; Add with carry (long) $7EF37B.l [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $B087.w,X		; BD 87 B0 ; Load $B087.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $7EF36E.l		; AF 6E F3 7E ; Load long $7EF36E.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF36E.l		; [PATTERN: Memory clearing operation] 8F 6E F3 7E ; Store accumulator (long) $7EF36E.l [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	stz $0308.w		; [PATTERN: Memory clearing operation] 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0314.w		; AD 14 03 ; Load $0314.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $02EC.w		; 0D EC 02 ; Logical OR $02EC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4C		; D0 4C ; Branch if not equal to $D0, $4C [Flow: branch]
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: NZ]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	lda $0368.w		; AD 68 03 ; Load $0368.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0300.w		; 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	.db $80, $2C		; 80 2C ; Branch always to $80, $2C [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsl $01D9EC.l		; 22 EC D9 01 ; Jump to subroutine long $01D9EC.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $1BBF9D.l		; 22 9D BF 1B ; Jump to subroutine long $1BBF9D.l [Writes: Stack Pointer] [Flow: call]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	cmp $B1AD.w,X		; DD AD B1 ; Compare accumulator $B1AD.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	.db $82, $1E, $01		; 82 1E 01 ; Branch always long to $82, $1E, $01 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0314.w		; 8D 14 03 ; Store accumulator to $0314.w [Reads: Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $06814B.l		; [PATTERN: Memory clearing operation] 22 4B 81 06 ; Jump to subroutine long $06814B.l [Writes: Stack Pointer] [Flow: call]
	asl $F6.b		; 06 F6 ; Arithmetic shift left $F6.b [Reads: Direct Page] [Flags: NCZ]
	lsr $F6.b		; 46 F6 ; Logical shift right $F6.b [Reads: Direct Page] [Flags: NCZ]
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	lda $B199.w		; AD 99 B1 ; Load $B199.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0309.w		; 8D 09 03 ; Store accumulator to $0309.w [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0308.w		; [PATTERN: Memory clearing operation] 8D 08 03 ; Store accumulator to $0308.w [Reads: Accumulator]
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora [$05.b]		; 07 05 ; OR accumulator with memory (long) [$05.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FE.b		; 00 FE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $540011.l,X		; FF 11 00 54 ; Subtract with carry (long,X) $540011.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor ($50.b)		; 52 50 ; Exclusive OR accumulator with memory (indirect) ($50.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc $555351.l,X		; FF 51 53 55 ; Subtract with carry (long,X) $555351.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	lsr $57.b,X		; 56 57 ; Logical shift right $57.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	jsr $0806.w		; 20 06 08 ; Jump to subroutine at $0806.w [Writes: Stack Pointer] [Flow: call]
	ora $000D.w		; 0D 0D 00 ; Logical OR $000D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $AD.b,S		; 03 AD ; OR accumulator with stack relative $AD.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora $F0.b,S		; 03 F0 ; OR accumulator with stack relative $F0.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cmp #$AD.b		; C9 AD ; Compare #$AD.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ora #$03.b		; 09 03 ; Logical OR #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda $030B.w		; AD 0B 03 ; Load $030B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $06		; 90 06 ; Branch if carry clear to $90, $06 [Flow: branch]
	lda $B19C.w		; AD 9C B1 ; Load $B19C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	lda $0309.w		; AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	jsr $AE65.w		; 20 65 AE ; Jump to subroutine at $AE65.w [Writes: Stack Pointer] [Flow: call]
	lda $0309.w		; [PATTERN: Memory clearing operation] AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $2D.b		; 64 2D ; Store zero to $2D.b
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	dec $030B.w		; CE 0B 03 ; Decrement $030B.w [Flags: NZ]
	lda $030B.w		; AD 0B 03 ; Load $030B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $94		; D0 94 ; Branch if not equal to $D0, $94 [Flow: branch]
	lda $0309.w		; [PATTERN: Memory clearing operation] AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$18.b		; C9 18 ; Compare #$18.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $5F		; D0 5F ; Branch if not equal to $D0, $5F [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $82, $58, $00		; 82 58 00 ; Branch always long to $82, $58, $00 [Flow: branch]
	lda $0300.w		; AD 00 03 ; Load $0300.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $42		; F0 42 ; Branch if equal to $F0, $42 [Flow: branch]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $4E		; F0 4E ; Branch if equal to $F0, $4E [Flow: branch]
	sta $0300.w		; 8D 00 03 ; Store accumulator to $0300.w [Reads: Accumulator]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $B1B6.w,X		; BD B6 B1 ; Load $B1B6.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	lda $B1C0.w,X		; BD C0 B1 ; Load $B1C0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $030A.w		; 8D 0A 03 ; Store accumulator to $030A.w [Reads: Accumulator]
	cpx #$06.b		; E0 06 ; Compare #$06.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $43		; D0 43 ; Branch if not equal to $D0, $43 [Flow: branch]
	stz $0B9C.w		; 9C 9C 0B ; Store zero to $0B9C.w
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsl $01D9EC.l		; 22 EC D9 01 ; Jump to subroutine long $01D9EC.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $1BBF9D.l		; 22 9D BF 1B ; Jump to subroutine long $1BBF9D.l [Writes: Stack Pointer] [Flow: call]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0314.w		; 8D 14 03 ; Store accumulator to $0314.w [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	jsl $06814B.l		; 22 4B 81 06 ; Jump to subroutine long $06814B.l [Writes: Stack Pointer] [Flow: call]
	asl $F6.b		; 06 F6 ; Arithmetic shift left $F6.b [Reads: Direct Page] [Flags: NCZ]
	lsr $F6.b		; 46 F6 ; Logical shift right $F6.b [Reads: Direct Page] [Flags: NCZ]
	.db $80, $1A		; 80 1A ; Branch always to $80, $1A [Flow: branch]
	ldx $030A.w		; AE 0A 03 ; Load $030A.w into X register [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $B199.w,X		; BD 99 B1 ; Load $B199.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	stx $030A.w		; 8E 0A 03 ; Store X register to $030A.w [Reads: X Index]
	cpx #$03.b		; E0 03 ; Compare #$03.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $02F5.w		; AD F5 02 ; Load $02F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $FA		; D0 FA ; Branch if not equal to $D0, $FA [Flow: branch]
	lda $0314.w		; AD 14 03 ; Load $0314.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $02EC.w		; 0D EC 02 ; Logical OR $02EC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $F2		; D0 F2 ; Branch if not equal to $D0, $F2 [Flow: branch]
	bit $0308.w		; 2C 08 03 ; Test bits $0308.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $30, $ED		; 30 ED ; Branch if minus to $30, $ED [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0374.w		; 8D 74 03 ; Store accumulator to $0374.w [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02F1.w		; 8D F1 02 ; Store accumulator to $02F1.w [Reads: Accumulator]
	lda #$11.b		; A9 11 ; Load #$11.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0372.w		; 8D 72 03 ; Store accumulator to $0372.w [Reads: Accumulator]
	lda $3A.b		; [PATTERN: Memory clearing operation] A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	stz $48.b		; [PATTERN: Memory clearing operation] 64 48 ; Store zero to $48.b
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	cmp $8F68.w,X		; DD 68 8F ; Compare accumulator $8F68.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $27		; D0 27 ; Branch if not equal to $D0, $27 [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	ldx $02CF.w		; AE CF 02 ; Load $02CF.w into X register [Writes: X Index] [Flags: NZ]
	lda $1A00.w,X		; BD 00 1A ; Load $1A00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $F3CD.w		; 8D CD F3 ; Store accumulator to $F3CD.w [Reads: Accumulator]
	lda $1A14.w,X		; BD 14 1A ; Load $1A14.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $F3CE.w		; 8D CE F3 ; Store accumulator to $F3CE.w [Reads: Accumulator]
	lda $1A28.w,X		; BD 28 1A ; Load $1A28.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $F3CF.w		; 8D CF F3 ; Store accumulator to $F3CF.w [Reads: Accumulator]
	lda $1A3C.w,X		; BD 3C 1A ; Load $1A3C.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $F3D0.w		; 8D D0 F3 ; Store accumulator to $F3D0.w [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $F3D2.w		; 8D D2 F3 ; Store accumulator to $F3D2.w [Reads: Accumulator]
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02D2.w		; 8D D2 02 ; Store accumulator to $02D2.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $F3		; B0 F3 ; Branch if carry set to $B0, $F3 [Flow: branch]
	lda #$01.b		; [PATTERN: Memory clearing operation] A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0376.w		; 8D 76 03 ; Store accumulator to $0376.w [Reads: Accumulator]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	lda $B314.w		; AD 14 B3 ; Load $B314.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $0C.b		; 05 0C ; Logical OR $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $05.b		; 05 05 ; Logical OR $05.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0100.w		; 0C 00 01 ; Test and set bits $0100.w [Reads: Accumulator] [Flags: Z]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $A5.b,S		; 03 A5 ; OR accumulator with stack relative $A5.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	adc [$29.b]		; 67 29 ; Add with carry (long) [$29.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $85		; F0 85 ; Branch if equal to $F0, $85 [Flow: branch]
	adc [$A5.b]		; 67 A5 ; Add with carry (long) [$A5.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $A5AA4A.l		; 2F 4A AA A5 ; AND accumulator with memory (long) $A5AA4A.l [Writes: Accumulator] [Flags: NZ]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	ora $3D05F0.l		; 0F F0 05 3D ; OR accumulator with memory (long) $3D05F0.l [Writes: Accumulator] [Flags: NZ]
	.db $10, $B3		; 10 B3 ; Branch if plus to $10, $B3 [Flow: branch]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	.db $80, $0F		; 80 0F ; Branch always to $80, $0F [Flow: branch]
	dec $030B.w		; CE 0B 03 ; Decrement $030B.w [Flags: NZ]
	.db $10, $19		; 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	ldx $030D.w		; AE 0D 03 ; Load $030D.w into X register [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	stx $030D.w		; 8E 0D 03 ; Store X register to $030D.w [Reads: X Index]
	lda $B31B.w,X		; BD 1B B3 ; Load $B31B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $030A.w		; 8D 0A 03 ; Store accumulator to $030A.w [Reads: Accumulator]
	lda $B314.w,X		; BD 14 B3 ; Load $B314.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	lda $F2.b		; [PATTERN: Memory clearing operation] A5 F2 ; Load $F2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	stz $0376.w		; [PATTERN: Memory clearing operation] 9C 76 03 ; Store zero to $0376.w
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0376.w		; [PATTERN: Memory clearing operation] 8D 76 03 ; Store accumulator to $0376.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	lda $B314.w		; AD 14 B3 ; Load $B314.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; [PATTERN: Memory clearing operation] F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	and $B310.w,X		; 3D 10 B3 ; AND accumulator with memory $B310.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	stz $67.b		; 64 67 ; Store zero to $67.b
	stz $30.b		; 64 30 ; Store zero to $30.b
	stz $31.b		; [PATTERN: Memory clearing operation] 64 31 ; Store zero to $31.b
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	dec $030B.w		; CE 0B 03 ; Decrement $030B.w [Flags: NZ]
	.db $10, $19		; 10 19 ; Branch if plus to $10, $19 [Flow: branch]
	ldx $030D.w		; AE 0D 03 ; Load $030D.w into X register [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	stx $030D.w		; 8E 0D 03 ; Store X register to $030D.w [Reads: X Index]
	lda $B31B.w,X		; BD 1B B3 ; Load $B31B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $030A.w		; 8D 0A 03 ; Store accumulator to $030A.w [Reads: Accumulator]
	lda $B314.w,X		; BD 14 B3 ; Load $B314.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	lda $F2.b		; [PATTERN: Memory clearing operation] A5 F2 ; Load $F2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	stz $02FA.w		; 9C FA 02 ; Store zero to $02FA.w
	stz $030D.w		; [PATTERN: Memory clearing operation] 9C 0D 03 ; Store zero to $030D.w
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	jsl $07F1A3.l		; 22 A3 F1 07 ; Jump to subroutine long $07F1A3.l [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; [PATTERN: Memory clearing operation] A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0376.w		; 8D 76 03 ; Store accumulator to $0376.w [Reads: Accumulator]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	lda $B314.w		; AD 14 B3 ; Load $B314.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; [PATTERN: Memory clearing operation] 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	lda #$1D.b		; A9 1D ; Load #$1D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $27.b		; 64 27 ; Store zero to $27.b
	stz $28.b		; [PATTERN: Memory clearing operation] 64 28 ; Store zero to $28.b
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $20.b,S		; 03 20 ; OR accumulator with stack relative $20.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	trb $F5.b		; 14 F5 ; Test and reset bits $F5.b [Reads: Accumulator] [Flags: Z]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $10, $CD		; 82 10 CD ; Branch always long to $82, $10, $CD [Flow: branch]
	lda $0376.w		; AD 76 03 ; Load $0376.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $62		; F0 62 ; Branch if equal to $F0, $62 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	bit $F2.b		; 24 F2 ; Test bits $F2.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $10, $0F		; 10 0F ; Branch if plus to $10, $0F [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $52		; F0 52 ; Branch if equal to $F0, $52 [Flow: branch]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda #$22.b		; [PATTERN: Memory clearing operation] A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	lda #$02.b		; [PATTERN: Memory clearing operation] A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	stz $50.b		; 64 50 ; Store zero to $50.b
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $80, $48		; 80 48 ; Branch always to $80, $48 [Flow: branch]
	dec $030B.w		; CE 0B 03 ; Decrement $030B.w [Flags: NZ]
	.db $10, $2E		; 10 2E ; Branch if plus to $10, $2E [Flow: branch]
	inc $030D.w		; EE 0D 03 ; Increment $030D.w [Flags: NZ]
	ldx $030D.w		; AE 0D 03 ; Load $030D.w into X register [Writes: X Index] [Flags: NZ]
	lda $B31B.w,X		; BD 1B B3 ; Load $B31B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $030A.w		; 8D 0A 03 ; Store accumulator to $030A.w [Reads: Accumulator]
	lda $B314.w,X		; BD 14 B3 ; Load $B314.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; [PATTERN: Memory clearing operation] 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	cpx #$07.b		; E0 07 ; Compare #$07.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; [PATTERN: Memory clearing operation] 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0308.w		; 8D 08 03 ; Store accumulator to $0308.w [Reads: Accumulator]
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	.db $80, $60		; 80 60 ; Branch always to $80, $60 [Flow: branch]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$09.b		; 29 09 ; Logical AND #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	lda $030D.w		; AD 0D 03 ; Load $030D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $51		; F0 51 ; Branch if equal to $F0, $51 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $82, $68, $CC		; 82 68 CC ; Branch always long to $82, $68, $CC [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$1E.b		; A9 1E ; Load #$1E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $098FC1.l		; 22 C1 8F 09 ; Jump to subroutine long $098FC1.l [Writes: Stack Pointer] [Flow: call]
	dec $030B.w		; CE 0B 03 ; Decrement $030B.w [Flags: NZ]
	.db $10, $26		; 10 26 ; Branch if plus to $10, $26 [Flow: branch]
	inc $030D.w		; EE 0D 03 ; Increment $030D.w [Flags: NZ]
	ldx $030D.w		; AE 0D 03 ; Load $030D.w into X register [Writes: X Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $030B.w		; 8D 0B 03 ; Store accumulator to $030B.w [Reads: Accumulator]
	lda $B40D.w,X		; BD 0D B4 ; Load $B40D.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $030A.w		; 8D 0A 03 ; Store accumulator to $030A.w [Reads: Accumulator]
	lda #$30.b		; A9 30 ; Load #$30.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; [PATTERN: Memory clearing operation] 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	stz $2F.b		; 64 2F ; Store zero to $2F.b
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $50.b		; 64 50 ; Store zero to $50.b
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	jsr $92A0.w		; 20 A0 92 ; Jump to subroutine at $92A0.w [Writes: Stack Pointer] [Flow: call]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $28.b		; [PATTERN: Memory clearing operation] 64 28 ; Store zero to $28.b
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $27.b		; 64 27 ; Store zero to $27.b
	jsl $07E370.l		; 22 70 E3 07 ; Jump to subroutine long $07E370.l [Writes: Stack Pointer] [Flow: call]
	jsr $B7C7.w		; 20 C7 B7 ; Jump to subroutine at $B7C7.w [Writes: Stack Pointer] [Flow: call]
	jsr $E8F0.w		; 20 F0 E8 ; Jump to subroutine at $E8F0.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $F61D.w,Y		; B9 1D F6 ; Load $F61D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	lda $7EF3C5.l		; AF C5 F3 7E ; Load long $7EF3C5.l into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	lda #$003A.w		; A9 3A 00 ; Load #$003A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $F51D.w,Y		; B9 1D F5 ; Load $F51D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $1CF0.w		; 8D F0 1C ; Store accumulator to $1CF0.w [Reads: Accumulator]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsl $0FFDAA.l		; 22 AA FD 0F ; Jump to subroutine long $0FFDAA.l [Writes: Stack Pointer] [Flow: call]
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvp $FF,$FF		; 44 FF FF ; Move block positive $FF,$FF [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	sbc $35FFFF.l,X		; FF FF FF 35 ; Subtract with carry (long,X) $35FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $46FFFF.l,X		; FF FF FF 46 ; Subtract with carry (long,X) $46FFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $D02FA5.l,X		; FF A5 2F D0 ; Subtract with carry (long,X) $D02FA5.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor [$AD.b]		; 47 AD ; Exclusive OR accumulator with memory (long) [$AD.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sbc #$02.b		; E9 02 ; Subtract #$02.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $42		; D0 42 ; Branch if not equal to $D0, $42 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3E		; D0 3E ; Branch if not equal to $D0, $3E [Flow: branch]
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	lda $76.b		; A5 76 ; Load $76.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsl $01EB66.l		; 22 66 EB 01 ; Jump to subroutine long $01EB66.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $31		; 90 31 ; Branch if carry clear to $90, $31 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02E9.w		; 8D E9 02 ; Store accumulator to $02E9.w [Reads: Accumulator]
	ldy $0C.b		; A4 0C ; Load $0C.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $30, $28		; 30 28 ; Branch if minus to $30, $28 [Flow: branch]
	lda $B528.w,Y		; B9 28 B5 ; Load $B528.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0984E8.l,X		; BF E8 84 09 ; Load long $0984E8.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0984E9.l,X		; BF E9 84 09 ; Load long $0984E9.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda #$7E.b		; A9 7E ; Load #$7E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy $03.b		; A4 03 ; Load $03.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	jsl $0799AD.l		; 22 AD 99 07 ; Jump to subroutine long $0799AD.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	stz $02E9.w		; 9C E9 02 ; Store zero to $02E9.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $3B.b		; A5 3B ; Load $3B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	tsb $3B.b		; 04 3B ; Test and set bits $3B.b [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $3B.b		; A5 3B ; Load $3B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2B		; F0 2B ; Branch if equal to $F0, $2B [Flow: branch]
	lda $F6.b		; A5 F6 ; Load $F6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	lda $0309.w		; [PATTERN: Memory clearing operation] AD 09 03 ; Load $0309.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $030E.w		; 9C 0E 03 ; Store zero to $030E.w
	stz $030A.w		; [PATTERN: Memory clearing operation] 9C 0A 03 ; Store zero to $030A.w
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	lda $0305.w		; [PATTERN: Memory clearing operation] AD 05 03 ; Load $0305.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $1E.b		; 64 1E ; Store zero to $1E.b
	stz $1F.b		; 64 1F ; Store zero to $1F.b
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $F2.b		; A5 F2 ; Load $F2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	bit $F0.b		; 24 F0 ; Test bits $F0.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $30, $06		; 30 06 ; Branch if minus to $30, $06 [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$DF.b		; 29 DF ; Logical AND #$DF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $3B.b		; A5 3B ; Load $3B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$A0.b		; 29 A0 ; Logical AND #$A0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $00.b		; 05 00 ; Logical OR $00.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$B0.b		; 29 B0 ; Logical AND #$B0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1C		; F0 1C ; Branch if equal to $F0, $1C [Flow: branch]
	cmp #$90.b		; C9 90 ; Compare #$90.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda $F2.b		; A5 F2 ; Load $F2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $3B.b		; 04 3B ; Test and set bits $3B.b [Reads: Accumulator] [Flags: Z]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora [$0B.b]		; 07 0B ; OR accumulator with memory (long) [$0B.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $200E.w		; 0D 0E 20 ; Logical OR $200E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	jmp ($90B9.w,X)		; 7C B9 90 ; Jump indirect indexed to ($90B9.w,X) [Reads: X Index] [Flow: jump]
	asl $20.b		; 06 20 ; Arithmetic shift left $20.b [Reads: Direct Page] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $20.b,Y		; B6 20 ; Load X register $20.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	lda ($B9.b,S),Y		; B3 B9 ; Load accumulator (stack relative indirect indexed) ($B9.b,S),Y [Reads: Y Index, Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	lda #$0F.b		; A9 0F ; Load #$0F.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $42.b		; 85 42 ; Store accumulator to $42.b [Reads: Accumulator]
	sta $43.b		; 85 43 ; Store accumulator to $43.b [Reads: Accumulator]
	stz $6A.b		; 64 6A ; Store zero to $6A.b
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $2F, $01		; 82 2F 01 ; Branch always long to $82, $2F, $01 [Flow: branch]
	inc $6A.b		; E6 6A ; Increment $6A.b [Reads: Direct Page] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $66.b		; 85 66 ; Store accumulator to $66.b [Reads: Accumulator]
	jsr $CE85.w		; 20 85 CE ; Jump to subroutine at $CE85.w [Writes: Stack Pointer] [Flow: call]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	lda $62.b		; A5 62 ; Load $62.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and $67.b		; 25 67 ; Logical AND $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $56		; D0 56 ; Branch if not equal to $D0, $56 [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $52		; 80 52 ; Branch always to $80, $52 [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	.db $80, $4A		; 80 4A ; Branch always to $80, $4A [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $80, $32		; 80 32 ; Branch always to $80, $32 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $38		; F0 38 ; Branch if equal to $F0, $38 [Flow: branch]
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $67.b		; [PATTERN: Memory clearing operation] A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	stz $033C.w		; 9C 3C 03 ; Store zero to $033C.w
	stz $033D.w		; 9C 3D 03 ; Store zero to $033D.w
	stz $032F.w		; [PATTERN: Memory clearing operation] 9C 2F 03 ; Store zero to $032F.w
	stz $0330.w		; 9C 30 03 ; Store zero to $0330.w
	stz $032B.w		; 9C 2B 03 ; Store zero to $032B.w
	stz $032C.w		; 9C 2C 03 ; Store zero to $032C.w
	stz $0334.w		; 9C 34 03 ; Store zero to $0334.w
	stz $0335.w		; 9C 35 03 ; Store zero to $0335.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0302.w		; 8D 02 03 ; Store accumulator to $0302.w [Reads: Accumulator]
	ldy $66.b		; A4 66 ; Load $66.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $B64B.w,Y		; B9 4B B6 ; Load $B64B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $42.b		; 85 42 ; Store accumulator to $42.b [Reads: Accumulator]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $96, $00		; 82 96 00 ; Branch always long to $82, $96, $00 [Flow: branch]
	inc $6A.b		; E6 6A ; Increment $6A.b [Reads: Direct Page] [Flags: NZ]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $66.b		; 85 66 ; Store accumulator to $66.b [Reads: Accumulator]
	jsr $CEC9.w		; 20 C9 CE ; Jump to subroutine at $CEC9.w [Writes: Stack Pointer] [Flow: call]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	lda $62.b		; A5 62 ; Load $62.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and $67.b		; 25 67 ; Logical AND $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $10		; D0 10 ; Branch if not equal to $D0, $10 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	and #$08.b		; 29 08 ; Logical AND #$08.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $56		; D0 56 ; Branch if not equal to $D0, $56 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $52		; 80 52 ; Branch always to $80, $52 [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	.db $80, $4A		; 80 4A ; Branch always to $80, $4A [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $80, $32		; 80 32 ; Branch always to $80, $32 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $38		; F0 38 ; Branch if equal to $F0, $38 [Flow: branch]
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $67.b		; [PATTERN: Memory clearing operation] A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	stz $033E.w		; 9C 3E 03 ; Store zero to $033E.w
	stz $033F.w		; 9C 3F 03 ; Store zero to $033F.w
	stz $0331.w		; [PATTERN: Memory clearing operation] 9C 31 03 ; Store zero to $0331.w
	stz $0332.w		; 9C 32 03 ; Store zero to $0332.w
	stz $032D.w		; 9C 2D 03 ; Store zero to $032D.w
	stz $032E.w		; 9C 2E 03 ; Store zero to $032E.w
	stz $0336.w		; 9C 36 03 ; Store zero to $0336.w
	stz $0337.w		; 9C 37 03 ; Store zero to $0337.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0302.w		; 8D 02 03 ; Store accumulator to $0302.w [Reads: Accumulator]
	ldy $66.b		; A4 66 ; Load $66.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	lda $B64B.w,Y		; B9 4B B6 ; Load $B64B.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $43.b		; 85 43 ; Store accumulator to $43.b [Reads: Accumulator]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $42.b		; 25 42 ; Logical AND $42.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $43.b		; 25 43 ; Logical AND $43.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $6A.b		; 64 6A ; Store zero to $6A.b
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $6A.b		; 84 6A ; Store Y register to $6A.b [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($64.b,X)		; 01 64 ; Logical OR ($64.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ror $3864.w		; 6E 64 38 ; Rotate right $3864.w [Flags: NCZ]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$30.b		; 29 30 ; Logical AND #$30.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	jsr $CCAB.w		; 20 AB CC ; Jump to subroutine at $CCAB.w [Writes: Stack Pointer] [Flow: call]
	lda $6D.b		; A5 6D ; Load $6D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $70, $00		; 82 70 00 ; Branch always long to $82, $70, $00 [Flow: branch]
	jsr $B97C.w		; 20 7C B9 ; Jump to subroutine at $B97C.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $6B		; 90 6B ; Branch if carry clear to $90, $6B [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $59		; 90 59 ; Branch if carry clear to $90, $59 [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $52		; F0 52 ; Branch if equal to $F0, $52 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0315.w		; 8D 15 03 ; Store accumulator to $0315.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	jsr $CF12.w		; 20 12 CF ; Jump to subroutine at $CF12.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0316.w		; 8D 16 03 ; Store accumulator to $0316.w [Reads: Accumulator]
	.db $F0, $3F		; F0 3F ; Branch if equal to $F0, $3F [Flow: branch]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0310.w		; 6D 10 03 ; Add $0310.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0312.w		; 6D 12 03 ; Add $0312.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $21		; F0 21 ; Branch if equal to $F0, $21 [Flow: branch]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $0310.w		; AD 10 03 ; Load $0310.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $10, $05		; 10 05 ; Branch if plus to $10, $05 [Flow: branch]
	jsr $B956.w		; 20 56 B9 ; Jump to subroutine at $B956.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $B969.w		; 20 69 B9 ; Jump to subroutine at $B969.w [Writes: Stack Pointer] [Flow: call]
	jsr $B9B3.w		; 20 B3 B9 ; Jump to subroutine at $B9B3.w [Writes: Stack Pointer] [Flow: call]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $75		; F0 75 ; Branch if equal to $F0, $75 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $67		; F0 67 ; Branch if equal to $F0, $67 [Flow: branch]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $31.b		; 05 31 ; Logical OR $31.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $61		; D0 61 ; Branch if not equal to $D0, $61 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $22		; F0 22 ; Branch if equal to $F0, $22 [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	jsr $CF12.w		; 20 12 CF ; Jump to subroutine at $CF12.w [Writes: Stack Pointer] [Flow: call]
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	.db $82, $44, $00		; 82 44 00 ; Branch always long to $82, $44, $00 [Flow: branch]
	jsr $CF12.w		; 20 12 CF ; Jump to subroutine at $CF12.w [Writes: Stack Pointer] [Flow: call]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $0316.w		; 0D 16 03 ; Logical OR $0316.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$3A.b		; A9 3A ; Load #$3A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031F.w		; 8D 1F 03 ; Store accumulator to $031F.w [Reads: Accumulator]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0310.w		; AD 10 03 ; Load $0310.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	lda $0312.w		; AD 12 03 ; Load $0312.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0315.w		; 8D 15 03 ; Store accumulator to $0315.w [Reads: Accumulator]
	jsr $B956.w		; 20 56 B9 ; Jump to subroutine at $B956.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0315.w		; 8D 15 03 ; Store accumulator to $0315.w [Reads: Accumulator]
	jsr $B969.w		; 20 69 B9 ; Jump to subroutine at $B969.w [Writes: Stack Pointer] [Flow: call]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $D077.w		; 20 77 D0 ; Jump to subroutine at $D077.w [Writes: Stack Pointer] [Flow: call]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $3E.b		; E5 3E ; Subtract $3E.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $67.b		; 04 67 ; Test and set bits $67.b [Reads: Accumulator] [Flags: Z]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $3F.b		; E5 3F ; Subtract $3F.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $67.b		; 04 67 ; Test and set bits $67.b [Reads: Accumulator] [Flags: Z]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3D		; F0 3D ; Branch if equal to $F0, $3D [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $36		; D0 36 ; Branch if not equal to $D0, $36 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $30		; D0 30 ; Branch if not equal to $D0, $30 [Flow: branch]
	ldy #$F7.b		; A0 F7 ; Load #$F7.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0310.w		; AD 10 03 ; Load $0310.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$FB.b		; A0 FB ; Load #$FB.b into Y register [Writes: Y Index] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $30.b		; 65 30 ; Add $30.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $67.b		; 25 67 ; Logical AND $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	ldy #$FD.b		; A0 FD ; Load #$FD.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0312.w		; AD 12 03 ; Load $0312.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$FE.b		; A0 FE ; Load #$FE.b into Y register [Writes: Y Index] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $31.b		; 65 31 ; Add $31.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $67.b		; 25 67 ; Logical AND $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $BA0A.w		; 20 0A BA ; Jump to subroutine at $BA0A.w [Writes: Stack Pointer] [Flow: call]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $C4D4.w		; 20 D4 C4 ; Jump to subroutine at $C4D4.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $C4D4.w		; 20 D4 C4 ; Jump to subroutine at $C4D4.w [Writes: Stack Pointer] [Flow: call]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $BA0A.w		; 20 0A BA ; Jump to subroutine at $BA0A.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $30		; F0 30 ; Branch if equal to $F0, $30 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $22		; 90 22 ; Branch if carry clear to $90, $22 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	sta $0318.w		; 8D 18 03 ; Store accumulator to $0318.w [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	sta $031A.w		; 8D 1A 03 ; Store accumulator to $031A.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0318.w		; ED 18 03 ; Subtract $0318.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $031A.w		; ED 1A 03 ; Subtract $031A.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $E8.b		; A5 E8 ; Load $E8.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E6.b		; E5 E6 ; Subtract $E6.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $E2.b		; A5 E2 ; Load $E2.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E0.b		; E5 E0 ; Subtract $E0.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $02.b		; 65 02 ; Add $02.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
	stz $EE.b		; 64 EE ; Store zero to $EE.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $66.b		; 85 66 ; Store accumulator to $66.b [Reads: Accumulator]
	jsr $CDCB.w		; 20 CB CD ; Jump to subroutine at $CDCB.w [Writes: Stack Pointer] [Flow: call]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $7A, $04		; 82 7A 04 ; Branch always long to $82, $7A, $04 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	.db $82, $91, $00		; 82 91 00 ; Branch always long to $82, $91, $00 [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $21		; D0 21 ; Branch if not equal to $D0, $21 [Flow: branch]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $93, $00		; 82 93 00 ; Branch always long to $82, $93, $00 [Flow: branch]
	jsr $C29F.w		; 20 9F C2 ; Jump to subroutine at $C29F.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $D6, $07		; 82 D6 07 ; Branch always long to $82, $D6, $07 [Flow: branch]
	lda $62.b		; A5 62 ; Load $62.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $C29F.w		; 20 9F C2 ; Jump to subroutine at $C29F.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $73		; 80 73 ; Branch always to $80, $73 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$70.b		; 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $64		; F0 64 ; Branch if equal to $F0, $64 [Flow: branch]
	stz $05.b		; 64 05 ; Store zero to $05.b
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $B7C3.w,Y		; B9 C3 B7 ; Load $B7C3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $49.b		; 85 49 ; Store accumulator to $49.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $6C.b		; 85 6C ; Store accumulator to $6C.b [Reads: Accumulator]
	stz $03F3.w		; 9C F3 03 ; Store zero to $03F3.w
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$70.b		; 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$70.b		; C9 70 ; Compare #$70.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	.db $80, $32		; [PATTERN: Memory clearing operation] 80 32 ; Branch always to $80, $32 [Flow: branch]
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	jsr $C1E4.w		; 20 E4 C1 ; Jump to subroutine at $C1E4.w [Writes: Stack Pointer] [Flow: call]
	jsr $C1FF.w		; 20 FF C1 ; Jump to subroutine at $C1FF.w [Writes: Stack Pointer] [Flow: call]
	stz $6C.b		; 64 6C ; Store zero to $6C.b
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F8.b		; 29 F8 ; Logical AND #$F8.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $0315.w		; AD 15 03 ; Load $0315.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0315.w		; AD 15 03 ; Load $0315.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $6C.b		; 64 6C ; Store zero to $6C.b
	lda $0315.w		; AD 15 03 ; Load $0315.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $50.b		; [PATTERN: Memory clearing operation] A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	stz $49.b		; 64 49 ; Store zero to $49.b
	stz $EF.b		; 64 EF ; Store zero to $EF.b
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	stz $03F3.w		; 9C F3 03 ; Store zero to $03F3.w
	jsr $E076.w		; 20 76 E0 ; Jump to subroutine at $E076.w [Writes: Stack Pointer] [Flow: call]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $6B.b		; 64 6B ; Store zero to $6B.b
	lda $02E7.w		; AD E7 02 ; Load $02E7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $02EA.w		; AD EA 02 ; Load $02EA.w into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $01EB66.l		; 22 66 EB 01 ; Jump to subroutine long $01EB66.l [Writes: Stack Pointer] [Flow: call]
	stz $02EA.w		; 9C EA 02 ; Store zero to $02EA.w
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0F.b		; 85 0F ; Store accumulator to $0F.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	lda $034C.w		; AD 4C 03 ; Load $034C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $0322.w		; 0C 22 03 ; Test and set bits $0322.w [Reads: Accumulator] [Flags: Z]
	.db $80, $2D		; 80 2D ; Branch always to $80, $2D [Flow: branch]
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	lda $0322.w		; AD 22 03 ; Load $0322.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0322.w		; 8D 22 03 ; Store accumulator to $0322.w [Reads: Accumulator]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	lda $0320.w		; AD 20 03 ; Load $0320.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $0322.w		; 0C 22 03 ; Test and set bits $0322.w [Reads: Accumulator] [Flags: Z]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $0322.w		; AD 22 03 ; Load $0322.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0322.w		; 8D 22 03 ; Store accumulator to $0322.w [Reads: Accumulator]
	lda $02F7.w		; AD F7 02 ; Load $02F7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$22.b		; 29 22 ; Logical AND #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	stz $01.b		; 64 01 ; Store zero to $01.b
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0005.w		; 69 05 00 ; Add #$0005.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B9F7.w,Y		; 79 F7 B9 ; Add $B9F7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B9FF.w,Y		; 79 FF B9 ; Add $B9FF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $01E8BD.l		; 22 BD E8 01 ; Jump to subroutine long $01E8BD.l [Writes: Stack Pointer] [Flow: call]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $03F1.w		; AD F1 03 ; Load $03F1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$22.b		; 29 22 ; Logical AND #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $03F3.w		; 8C F3 03 ; Store Y register to $03F3.w [Reads: Y Index]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $03F2.w		; AD F2 03 ; Load $03F2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$22.b		; 29 22 ; Logical AND #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $03F3.w		; 8C F3 03 ; Store Y register to $03F3.w [Reads: Y Index]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $03F3.w		; 9C F3 03 ; Store zero to $03F3.w
	lda $036D.w		; AD 6D 03 ; Load $036D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	jsr $C16D.w		; 20 6D C1 ; Jump to subroutine at $C16D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $16		; 90 16 ; Branch if carry clear to $90, $16 [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	inc $047A.w		; EE 7A 04 ; Increment $047A.w [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $39		; 80 39 ; Branch always to $80, $39 [Flow: branch]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $35		; D0 35 ; Branch if not equal to $D0, $35 [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda $1D.b		; A5 1D ; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsl $01FF05.l		; 22 05 FF 01 ; Jump to subroutine long $01FF05.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $1E		; 80 1E ; Branch always to $80, $1E [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; [PATTERN: Memory clearing operation] 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	lda $26.b		; A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; [PATTERN: Memory clearing operation] 9C 76 03 ; Store zero to $0376.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	jsr $C2C3.w		; 20 C3 C2 ; Jump to subroutine at $C2C3.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $3E		; 80 3E ; Branch always to $80, $3E [Flow: branch]
	lda $0343.w		; AD 43 03 ; Load $0343.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $80, $28		; 80 28 ; Branch always to $80, $28 [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	stz $0345.w		; 9C 45 03 ; Store zero to $0345.w
	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0998FC.l		; 22 FC 98 09 ; Jump to subroutine long $0998FC.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $0B		; 90 0B ; Branch if carry clear to $90, $0B [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	jsr $C2C3.w		; 20 C3 C2 ; Jump to subroutine at $C2C3.w [Writes: Stack Pointer] [Flow: call]
	lda $58.b		; A5 58 ; Load $58.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $58.b		; A5 58 ; Load $58.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $82, $11, $01		; 82 11 01 ; Branch always long to $82, $11, $01 [Flow: branch]
	lda $02C0.w		; AD C0 02 ; Load $02C0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$77.b		; 29 77 ; Logical AND #$77.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	and #$70.b		; 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$10.b		; A0 10 ; Load #$10.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $11.b		; 84 11 ; Store Y register to $11.b [Reads: Y Index]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	stx $5E.b		; 86 5E ; Store X register to $5E.b [Reads: X Index]
	lda $57.b		; A5 57 ; Load $57.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	stx $57.b		; 86 57 ; Store X register to $57.b [Reads: X Index]
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5C.b		; 85 5C ; Store accumulator to $5C.b [Reads: Accumulator]
	stz $5A.b		; 64 5A ; Store zero to $5A.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5B.b		; 85 5B ; Store accumulator to $5B.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $5A.b		; 64 5A ; Store zero to $5A.b
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $39		; F0 39 ; Branch if equal to $F0, $39 [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $031F.w		; 0D 1F 03 ; Logical OR $031F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $55.b		; 05 55 ; Logical OR $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $29		; D0 29 ; Branch if not equal to $D0, $29 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $66.b		; A4 66 ; Load $66.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $7EF35B.l		; AF 5B F3 7E ; Load long $7EF35B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $BA07.w,Y		; B9 07 BA ; Load $BA07.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0373.w		; 8D 73 03 ; Store accumulator to $0373.w [Reads: Accumulator]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $E0, $D4		; 82 E0 D4 ; Branch always long to $82, $E0, $D4 [Flow: branch]
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $5B		; D0 5B ; Branch if not equal to $D0, $5B [Flow: branch]
	lda $5F.b		; A5 5F ; Load $5F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $60.b		; 05 60 ; Logical OR $60.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $51		; F0 51 ; Branch if equal to $F0, $51 [Flow: branch]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4D		; D0 4D ; Branch if not equal to $D0, $4D [Flow: branch]
	lda $5F.b		; A5 5F ; Load $5F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02C2.w		; 8D C2 02 ; Store accumulator to $02C2.w [Reads: Accumulator]
	dec $61.b		; C6 61 ; Decrement $61.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $48		; 10 48 ; Branch if plus to $10, $48 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $5F.b		; A5 5F ; Load $5F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $36		; 90 36 ; Branch if carry clear to $90, $36 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
.ACCU 8
	sep #$20		; E2 20
	jsr $ED2C.w		; 20 2C ED ; Jump to subroutine at $ED2C.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $29		; B0 29 ; Branch if carry set to $B0, $29 [Flow: branch]
	stx $0E.b		; 86 0E ; Store X register to $0E.b [Reads: X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr $ED3F.w		; 20 3F ED ; Jump to subroutine at $ED3F.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $1F		; B0 1F ; Branch if carry set to $B0, $1F [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $F0D9.w		; 20 D9 F0 ; Jump to subroutine at $F0D9.w [Writes: Stack Pointer] [Flow: call]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy $66.b		; A4 66 ; Load $66.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $05F8.w,X		; 9D F8 05 ; Store accumulator to $05F8.w,X [Reads: Accumulator, X Index]
	sta $0474.w		; 8D 74 04 ; Store accumulator to $0474.w [Reads: Accumulator]
	lda $05F0.w,X		; BD F0 05 ; Load $05F0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$01.b		; C0 01 ; Compare #$01.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $05E8.w,X		; 9D E8 05 ; Store accumulator to $05E8.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $C4		; 10 C4 ; Branch if plus to $10, $C4 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $61.b		; 85 61 ; Store accumulator to $61.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $DF, $00		; 82 DF 00 ; Branch always long to $82, $DF, $00 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $0310.w		; AD 10 03 ; Load $0310.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $9873.w		; 20 73 98 ; Jump to subroutine at $9873.w [Writes: Stack Pointer] [Flow: call]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	jsr $C1E4.w		; 20 E4 C1 ; Jump to subroutine at $C1E4.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $3E		; 80 3E ; Branch always to $80, $3E [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $C1A1.w		; 20 A1 C1 ; Jump to subroutine at $C1A1.w [Writes: Stack Pointer] [Flow: call]
	jsr $91F1.w		; 20 F1 91 ; Jump to subroutine at $91F1.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0302.w		; 8D 02 03 ; Store accumulator to $0302.w [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $C1E4.w		; 20 E4 C1 ; Jump to subroutine at $C1E4.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $9D, $00		; 82 9D 00 ; Branch always long to $82, $9D, $00 [Flow: branch]
	jsr $C1E4.w		; 20 E4 C1 ; Jump to subroutine at $C1E4.w [Writes: Stack Pointer] [Flow: call]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $F4		; F0 F4 ; Branch if equal to $F0, $F4 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	stz $01.b		; 64 01 ; Store zero to $01.b
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $39		; D0 39 ; Branch if not equal to $D0, $39 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2D		; D0 2D ; Branch if not equal to $D0, $2D [Flow: branch]
	jsr $C1A1.w		; 20 A1 C1 ; Jump to subroutine at $C1A1.w [Writes: Stack Pointer] [Flow: call]
	jsr $91F1.w		; 20 F1 91 ; Jump to subroutine at $91F1.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $2B		; 80 2B ; Branch always to $80, $2B [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	stz $01.b		; 64 01 ; Store zero to $01.b
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	jsr $C1A1.w		; 20 A1 C1 ; Jump to subroutine at $C1A1.w [Writes: Stack Pointer] [Flow: call]
	jsr $91F1.w		; 20 F1 91 ; Jump to subroutine at $91F1.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	jsr $C229.w		; 20 29 C2 ; Jump to subroutine at $C229.w [Writes: Stack Pointer] [Flow: call]
	jmp $D485.w		; 4C 85 D4 ; Jump to $D485.w [Flow: jump]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $2F.b		; C5 2F ; Compare $2F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	lda $0315.w		; AD 15 03 ; Load $0315.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	dec $0371.w		; CE 71 03 ; Decrement $0371.w [Flags: NZ]
	.db $10, $2B		; 10 2B ; Branch if plus to $10, $2B [Flow: branch]
	ldy $0315.w		; AC 15 03 ; Load $0315.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $02F6.w		; AD F6 02 ; Load $02F6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0315.w		; AD 15 03 ; Load $0315.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F6.b		; 29 F6 ; Logical AND #$F6.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0371.w		; 8D 71 03 ; Store accumulator to $0371.w [Reads: Accumulator]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	stx $5E.b		; 86 5E ; Store X register to $5E.b [Reads: X Index]
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5C.b		; 85 5C ; Store accumulator to $5C.b [Reads: Accumulator]
	stz $5A.b		; 64 5A ; Store zero to $5A.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5B.b		; 85 5B ; Store accumulator to $5B.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0366.w		; AD 66 03 ; Load $0366.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $036A.w		; AD 6A 03 ; Load $036A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0368.w		; 8D 68 03 ; Store accumulator to $0368.w [Reads: Accumulator]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	stz $0368.w		; 9C 68 03 ; Store zero to $0368.w
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $65		; F0 65 ; Branch if equal to $F0, $65 [Flow: branch]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $5A		; D0 5A ; Branch if not equal to $D0, $5A [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $55		; D0 55 ; Branch if not equal to $D0, $55 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $51		; D0 51 ; Branch if not equal to $D0, $51 [Flow: branch]
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; [PATTERN: Memory clearing operation] 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	lda $26.b		; A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	lda $0351.w		; AD 51 03 ; Load $0351.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF356.l		; AF 56 F3 7E ; Load long $7EF356.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda $3E.b		; A5 3E ; Load $3E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $40.b		; A5 40 ; Load $40.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	lda $3F.b		; A5 3F ; Load $3F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $41.b		; A5 41 ; Load $41.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	jsr $C2C3.w		; 20 C3 C2 ; Jump to subroutine at $C2C3.w [Writes: Stack Pointer] [Flow: call]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	lda $036D.w		; AD 6D 03 ; Load $036D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $82, $3C, $FE		; 82 3C FE ; Branch always long to $82, $3C, $FE [Flow: branch]
	lda $58.b		; A5 58 ; Load $58.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $0343.w		; AD 43 03 ; Load $0343.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	stz $0345.w		; 9C 45 03 ; Store zero to $0345.w
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0998FC.l		; 22 FC 98 09 ; Jump to subroutine long $0998FC.l [Writes: Stack Pointer] [Flow: call]
	.db $82, $1E, $03		; 82 1E 03 ; Branch always long to $82, $1E, $03 [Flow: branch]
	lda $036E.w		; AD 6E 03 ; Load $036E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $0370.w		; AD 70 03 ; Load $0370.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$22.b		; 29 22 ; Logical AND #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $82, $F7, $FD		; 82 F7 FD ; Branch always long to $82, $F7, $FD [Flow: branch]
	lda $036D.w		; AD 6D 03 ; Load $036D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$70.b		; 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	jsr $C16D.w		; 20 6D C1 ; Jump to subroutine at $C16D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $32		; 90 32 ; Branch if carry clear to $90, $32 [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	sta $78.b		; 85 78 ; Store accumulator to $78.b [Reads: Accumulator]
	lda #$0B.b		; A9 0B ; Load #$0B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $46.b		; [PATTERN: Memory clearing operation] 64 46 ; Store zero to $46.b
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0364.w		; 8D 64 03 ; Store accumulator to $0364.w [Reads: Accumulator]
	sta $0365.w		; 8D 65 03 ; Store accumulator to $0365.w [Reads: Accumulator]
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$14.b		; A2 14 ; Load #$14.b into X register [Writes: X Index] [Flags: NZ]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	ldx #$0E.b		; A2 0E ; Load #$0E.b into X register [Writes: X Index] [Flags: NZ]
	stx $0362.w		; 8E 62 03 ; Store X register to $0362.w [Reads: X Index]
	stx $0363.w		; 8E 63 03 ; Store X register to $0363.w [Reads: X Index]
	sty $4D.b		; 84 4D ; Store Y register to $4D.b [Reads: Y Index]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $036D.w		; AD 6D 03 ; Load $036D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	jsr $C16D.w		; 20 6D C1 ; Jump to subroutine at $C16D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; [PATTERN: Memory clearing operation] A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	.db $82, $54, $03		; 82 54 03 ; Branch always long to $82, $54, $03 [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $92, $00		; 82 92 00 ; Branch always long to $82, $92, $00 [Flow: branch]
	lda $036F.w		; AD 6F 03 ; Load $036F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $57		; F0 57 ; Branch if equal to $F0, $57 [Flow: branch]
	lda $036D.w		; AD 6D 03 ; Load $036D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$77.b		; 29 77 ; Logical AND #$77.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $50		; D0 50 ; Branch if not equal to $D0, $50 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $76.b		; A5 76 ; Load $76.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$2F.b		; C9 2F ; Compare #$2F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $036F.w		; 2D 6F 03 ; Logical AND $036F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	jsr $C16D.w		; 20 6D C1 ; Jump to subroutine at $C16D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $3B		; 90 3B ; Branch if carry clear to $90, $3B [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	lda $036F.w		; AD 6F 03 ; Load $036F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda #$01.b		; [PATTERN: Memory clearing operation] A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	stx $28.b		; 86 28 ; Store X register to $28.b [Reads: X Index]
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	sta $78.b		; 85 78 ; Store accumulator to $78.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0362.w		; 8D 62 03 ; Store accumulator to $0362.w [Reads: Accumulator]
	sta $0363.w		; 8D 63 03 ; Store accumulator to $0363.w [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0364.w		; 8D 64 03 ; Store accumulator to $0364.w [Reads: Accumulator]
	stz $46.b		; 64 46 ; Store zero to $46.b
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $036E.w		; AD 6E 03 ; Load $036E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$70.b		; 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2D		; F0 2D ; Branch if equal to $F0, $2D [Flow: branch]
	lda $036D.w		; AD 6D 03 ; Load $036D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$77.b		; 29 77 ; Logical AND #$77.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	jsr $C16D.w		; 20 6D C1 ; Jump to subroutine at $C16D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $21		; 90 21 ; Branch if carry clear to $90, $21 [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $036E.w		; AD 6E 03 ; Load $036E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$40.b		; 29 40 ; Logical AND #$40.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $66.b		; [PATTERN: Memory clearing operation] 84 66 ; Store Y register to $66.b [Reads: Y Index]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	.db $82, $BB, $03		; 82 BB 03 ; Branch always long to $82, $BB, $03 [Flow: branch]
	lda $58.b		; A5 58 ; Load $58.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1C		; D0 1C ; Branch if not equal to $D0, $1C [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $58.b		; A5 58 ; Load $58.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $82, $EA, $FC		; 82 EA FC ; Branch always long to $82, $EA, $FC [Flow: branch]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	stx $5E.b		; 86 5E ; Store X register to $5E.b [Reads: X Index]
	lda $57.b		; A5 57 ; Load $57.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	stx $57.b		; 86 57 ; Store X register to $57.b [Reads: X Index]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	jsr $E076.w		; 20 76 E0 ; Jump to subroutine at $E076.w [Writes: Stack Pointer] [Flow: call]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $6B.b		; 64 6B ; Store zero to $6B.b
	lda $02E7.w		; AD E7 02 ; Load $02E7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	dec $61.b		; C6 61 ; Decrement $61.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $12		; 10 12 ; Branch if plus to $10, $12 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda #$24.b		; A9 24 ; Load #$24.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0999E9.l		; 22 E9 99 09 ; Jump to subroutine long $0999E9.l [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda #$34.b		; A9 34 ; Load #$34.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $61.b		; 85 61 ; Store accumulator to $61.b [Reads: Accumulator]
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $34		; F0 34 ; Branch if equal to $F0, $34 [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $031F.w		; 0D 1F 03 ; Logical OR $031F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $55.b		; 05 55 ; Logical OR $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $66.b		; A4 66 ; Load $66.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	.db $80, $1F		; 80 1F ; Branch always to $80, $1F [Flow: branch]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	lda $7EF35B.l		; AF 5B F3 7E ; Load long $7EF35B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $BA07.w,Y		; B9 07 BA ; Load $BA07.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0373.w		; 8D 73 03 ; Store accumulator to $0373.w [Reads: Accumulator]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $BF, $D0		; 82 BF D0 ; Branch always long to $82, $BF, $D0 [Flow: branch]
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $82, $44, $FC		; 82 44 FC ; Branch always long to $82, $44, $FC [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	dec $0375.w		; CE 75 03 ; Decrement $0375.w [Flags: NZ]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	lda #$13.b		; A9 13 ; Load #$13.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0375.w		; 8D 75 03 ; Store accumulator to $0375.w [Reads: Accumulator]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	jsr $C189.w		; 20 89 C1 ; Jump to subroutine at $C189.w [Writes: Stack Pointer] [Flow: call]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $0FC4.w		; AD C4 0F ; Load $0FC4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; [PATTERN: Memory clearing operation] 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $0FC2.w		; AD C2 0F ; Load $0FC2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	stz $2A.b		; 64 2A ; Store zero to $2A.b
	stz $2B.b		; 64 2B ; Store zero to $2B.b
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $00		; D0 00 ; Branch if not equal to $D0, $00 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $F9		; F0 F9 ; Branch if equal to $F0, $F9 [Flow: branch]
	lda $02F1.w		; AD F1 02 ; Load $02F1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$40.b		; C9 40 ; Compare #$40.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $F2		; F0 F2 ; Branch if equal to $F0, $F2 [Flow: branch]
	lda $02EF.w		; AD EF 02 ; Load $02EF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$70.b		; 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $EB		; F0 EB ; Branch if equal to $F0, $EB [Flow: branch]
	jsl $1BC076.l		; 22 76 C0 1B ; Jump to subroutine long $1BC076.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	jsr $C1C3.w		; 20 C3 C1 ; Jump to subroutine at $C1C3.w [Writes: Stack Pointer] [Flow: call]
	jsl $1BC063.l		; 22 63 C0 1B ; Jump to subroutine long $1BC063.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $20		; 90 20 ; Branch if carry clear to $90, $20 [Flow: branch]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	cmp $B1AD.w,X		; DD AD B1 ; Compare accumulator $B1AD.w,X [Reads: X Index] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F8		; 10 F8 ; Branch if plus to $10, $F8 [Flow: branch]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda #$32.b		; A9 32 ; Load #$32.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jsl $06812D.l		; 22 2D 81 06 ; Jump to subroutine long $06812D.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $51.b		; A5 51 ; Load $51.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0007.w		; 29 07 00 ; Logical AND #$0007.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $30.b		; A4 30 ; Load $30.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	stz $01.b		; 64 01 ; Store zero to $01.b
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	stz $01.b		; 64 01 ; Store zero to $01.b
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $6C.b		; 64 6C ; Store zero to $6C.b
	.db $80, $49		; 80 49 ; Branch always to $80, $49 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $15		; 90 15 ; Branch if carry clear to $90, $15 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	stz $01.b		; 64 01 ; Store zero to $01.b
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	stz $01.b		; 64 01 ; Store zero to $01.b
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	sty $2F.b		; 84 2F ; Store Y register to $2F.b [Reads: Y Index]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $A5		; 10 A5 ; Branch if plus to $10, $A5 [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	ldx $1D.b		; A6 1D ; Load $1D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $047A.w		; AD 7A 04 ; Load $047A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lda $C2BA.w,X		; BD BA C2 ; Load $C2BA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx $27.b		; 86 27 ; Store X register to $27.b [Reads: X Index]
	stz $28.b		; 64 28 ; Store zero to $28.b
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $C2BD.w,X		; [PATTERN: Memory clearing operation] BD BD C2 ; Load $C2BD.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $02C7.w		; 8D C7 02 ; Store accumulator to $02C7.w [Reads: Accumulator]
	stz $24.b		; 64 24 ; Store zero to $24.b
	stz $25.b		; 64 25 ; Store zero to $25.b
	lda $C2C0.w,X		; BD C0 C2 ; Load $C2C0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	stz $0360.w		; 9C 60 03 ; Store zero to $0360.w
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $201C.w		; 1C 1C 20 ; Test and reset bits $201C.w [Reads: Accumulator] [Flags: Z]
	jsr $2424.w		; 20 24 24 ; Jump to subroutine at $2424.w [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $302C.w		; 2C 2C 30 ; Test bits $302C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	trb $2020.w		; 1C 20 20 ; Test and reset bits $2020.w [Reads: Accumulator] [Flags: Z]
	jsr $2420.w		; 20 20 24 ; Jump to subroutine at $2420.w [Writes: Stack Pointer] [Flow: call]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	bit $28.b		; 24 28 ; Test bits $28.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $2C2C.w		; 2C 2C 2C ; Test bits $2C2C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $3030.w		; 2C 30 30 ; Test bits $3030.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $201C.w		; 1C 1C 20 ; Test and reset bits $201C.w [Reads: Accumulator] [Flags: Z]
	jsr $2424.w		; 20 24 24 ; Jump to subroutine at $2424.w [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $302C.w		; 2C 2C 30 ; Test bits $302C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	.db $30, $A5		; 30 A5 ; Branch if minus to $30, $A5 [Flow: branch]
	jsr $3285.w		; 20 85 32 ; Jump to subroutine at $3285.w [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $33.b		; 85 33 ; Store accumulator to $33.b [Reads: Accumulator]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $CDCB.w		; 20 CB CD ; Jump to subroutine at $CDCB.w [Writes: Stack Pointer] [Flow: call]
	lda $0343.w		; AD 43 03 ; Load $0343.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $035B.w		; 0D 5B 03 ; Logical OR $035B.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0357.w		; 0D 57 03 ; Logical OR $0357.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0341.w		; 0D 41 03 ; Logical OR $0341.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $DB		; D0 DB ; Branch if not equal to $D0, $DB [Flow: branch]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	stz $0360.w		; 9C 60 03 ; Store zero to $0360.w
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	lda $26.b		; [PATTERN: Memory clearing operation] A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0010.w		; E9 10 00 ; Subtract #$0010.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $32.b		; A5 32 ; Load $32.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $20.b		; E5 20 ; Subtract $20.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $32.b		; 85 32 ; Store accumulator to $32.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $32.b		; A5 32 ; Load $32.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $C30C.w,Y		; B9 0C C3 ; Load $C30C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx $27.b		; 86 27 ; Store X register to $27.b [Reads: X Index]
	stz $28.b		; [PATTERN: Memory clearing operation] 64 28 ; Store zero to $28.b
	lda $C32C.w,Y		; B9 2C C3 ; Load $C32C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $02C7.w		; 8D C7 02 ; Store accumulator to $02C7.w [Reads: Accumulator]
	stz $24.b		; 64 24 ; Store zero to $24.b
	stz $25.b		; 64 25 ; Store zero to $25.b
	lda $C34C.w,Y		; B9 4C C3 ; Load $C34C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	stz $0360.w		; 9C 60 03 ; Store zero to $0360.w
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $1408.w		; 20 08 14 ; Jump to subroutine at $1408.w [Writes: Stack Pointer] [Flow: call]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	trb $2020.w		; 1C 20 20 ; Test and reset bits $2020.w [Reads: Accumulator] [Flags: Z]
	jsr $0820.w		; 20 20 08 ; Jump to subroutine at $0820.w [Writes: Stack Pointer] [Flow: call]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	trb $14.b		; 14 14 ; Test and reset bits $14.b [Reads: Accumulator] [Flags: Z]
	trb $18.b		; 14 18 ; Test and reset bits $18.b [Reads: Accumulator] [Flags: Z]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	clc		; 18 ; Clear carry flag [Flags: C]
	trb $1C1C.w		; 1C 1C 1C ; Test and reset bits $1C1C.w [Reads: Accumulator] [Flags: Z]
	trb $2020.w		; 1C 20 20 ; Test and reset bits $2020.w [Reads: Accumulator] [Flags: Z]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $2020.w		; 20 20 20 ; Jump to subroutine at $2020.w [Writes: Stack Pointer] [Flow: call]
	jsr $2424.w		; 20 24 24 ; Jump to subroutine at $2424.w [Writes: Stack Pointer] [Flow: call]
	bit $24.b		; 24 24 ; Test bits $24.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	jsr $2828.w		; 20 28 28 ; Jump to subroutine at $2828.w [Writes: Stack Pointer] [Flow: call]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	bit $2C2C.w		; 2C 2C 2C ; Test bits $2C2C.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	bit $3030.w		; 2C 30 30 ; Test bits $3030.w with accumulator [Reads: Accumulator] [Flags: NVZ]
	.db $30, $30		; 30 30 ; Branch if minus to $30, $30 [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	bit $34.b,X		; 34 34 ; Test bits $34.b,X [Reads: Direct Page, X Index] [Flags: NVZ] [Flow: branch]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	jsr $A500.w		; 20 00 A5 ; Jump to subroutine at $A500.w [Writes: Stack Pointer] [Flow: call]
	rol $A548.w,X		; 3E 48 A5 ; Rotate left $A548.w,X [Reads: X Index] [Flags: NCZ]
	jsl $23A548.l		; 22 48 A5 23 ; Jump to subroutine long $23A548.l [Writes: Stack Pointer] [Flow: call]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	ldx $66.b		; A6 66 ; Load $66.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $28.b		; 84 28 ; Store Y register to $28.b [Reads: Y Index]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $66.b		; 85 66 ; Store accumulator to $66.b [Reads: Accumulator]
	jsr $8E7B.w		; 20 7B 8E ; Jump to subroutine at $8E7B.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $3E.b		; 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $32.b		; A5 32 ; Load $32.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $20.b		; E5 20 ; Subtract $20.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $32.b		; A5 32 ; Load $32.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $C409.w,Y		; B9 09 C4 ; Load $C409.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda $C429.w,Y		; B9 29 C4 ; Load $C429.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cpx #$02.b		; E0 02 ; Compare #$02.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda $C449.w,Y		; [PATTERN: Memory clearing operation] B9 49 C4 ; Load $C449.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $02C7.w		; 8D C7 02 ; Store accumulator to $02C7.w [Reads: Accumulator]
	stz $24.b		; 64 24 ; Store zero to $24.b
	stz $25.b		; 64 25 ; Store zero to $25.b
	stz $0364.w		; [PATTERN: Memory clearing operation] 9C 64 03 ; Store zero to $0364.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	stz $0360.w		; 9C 60 03 ; Store zero to $0360.w
	lda #$0D.b		; A9 0D ; Load #$0D.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $01		; D0 01 ; Branch if not equal to $D0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $66.b		; 85 66 ; Store accumulator to $66.b [Reads: Accumulator]
	jsr $CE2A.w		; 20 2A CE ; Jump to subroutine at $CE2A.w [Writes: Stack Pointer] [Flow: call]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $EA, $03		; 82 EA 03 ; Branch always long to $82, $EA, $03 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $04		; 30 04 ; Branch if minus to $30, $04 [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	.db $82, $78, $00		; 82 78 00 ; Branch always long to $82, $78, $00 [Flow: branch]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $57.b		; 64 57 ; Store zero to $57.b
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $6D, $00		; 82 6D 00 ; Branch always long to $82, $6D, $00 [Flow: branch]
	jsr $CB84.w		; 20 84 CB ; Jump to subroutine at $CB84.w [Writes: Stack Pointer] [Flow: call]
	jsr $CBDD.w		; 20 DD CB ; Jump to subroutine at $CBDD.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $2D, $11		; 82 2D 11 ; Branch always long to $82, $2D, $11 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$70.b		; 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $4B		; F0 4B ; Branch if equal to $F0, $4B [Flow: branch]
	stz $05.b		; 64 05 ; Store zero to $05.b
	lda $0F.b		; A5 0F ; Load $0F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $B7C3.w,Y		; B9 C3 B7 ; Load $B7C3.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $49.b		; 85 49 ; Store accumulator to $49.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $6C.b		; 85 6C ; Store accumulator to $6C.b [Reads: Accumulator]
	stz $03F3.w		; 9C F3 03 ; Store zero to $03F3.w
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$70.b		; 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$70.b		; C9 70 ; Compare #$70.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$70.b		; [PATTERN: Memory clearing operation] 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0D		; D0 0D ; Branch if not equal to $D0, $0D [Flow: branch]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	stz $6C.b		; 64 6C ; Store zero to $6C.b
	jsr $CB84.w		; 20 84 CB ; Jump to subroutine at $CB84.w [Writes: Stack Pointer] [Flow: call]
	jmp $07CB9F.l		; 5C 9F CB 07 ; Jump long to $07CB9F.l [Flow: jump]
	lda $0315.w		; AD 15 03 ; Load $0315.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0315.w		; AD 15 03 ; Load $0315.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0C		; D0 0C ; Branch if not equal to $D0, $0C [Flow: branch]
	lda $50.b		; [PATTERN: Memory clearing operation] A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	stz $6C.b		; 64 6C ; Store zero to $6C.b
	stz $EF.b		; 64 EF ; Store zero to $EF.b
	stz $49.b		; 64 49 ; Store zero to $49.b
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	stz $03F3.w		; 9C F3 03 ; Store zero to $03F3.w
	jsr $E112.w		; 20 12 E1 ; Jump to subroutine at $E112.w [Writes: Stack Pointer] [Flow: call]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $6B.b		; 64 6B ; Store zero to $6B.b
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	lda $034C.w		; AD 4C 03 ; Load $034C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $0322.w		; 0C 22 03 ; Test and set bits $0322.w [Reads: Accumulator] [Flags: Z]
	.db $80, $2D		; 80 2D ; Branch always to $80, $2D [Flow: branch]
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	lda $0322.w		; AD 22 03 ; Load $0322.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0322.w		; 8D 22 03 ; Store accumulator to $0322.w [Reads: Accumulator]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	lda $0320.w		; AD 20 03 ; Load $0320.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $0322.w		; 0C 22 03 ; Test and set bits $0322.w [Reads: Accumulator] [Flags: Z]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $0322.w		; AD 22 03 ; Load $0322.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0322.w		; 8D 22 03 ; Store accumulator to $0322.w [Reads: Accumulator]
	lda $02F7.w		; AD F7 02 ; Load $02F7.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$22.b		; 29 22 ; Logical AND #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3C		; F0 3C ; Branch if equal to $F0, $3C [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	stz $01.b		; 64 01 ; Store zero to $01.b
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $7EF360.l		; AF 60 F3 7E ; Load long $7EF360.l into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0005.w		; 69 05 00 ; Add #$0005.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $7EF360.l		; 8F 60 F3 7E ; Store accumulator (long) $7EF360.l [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B9F7.w,Y		; 79 F7 B9 ; Add $B9F7.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $B9FF.w,Y		; 79 FF B9 ; Add $B9FF.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsl $01E8BD.l		; 22 BD E8 01 ; Jump to subroutine long $01E8BD.l [Writes: Stack Pointer] [Flow: call]
	lda #$0A.b		; A9 0A ; Load #$0A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $802F.w		; 20 2F 80 ; Jump to subroutine at $802F.w [Writes: Stack Pointer] [Flow: call]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $03F1.w		; AD F1 03 ; Load $03F1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$22.b		; 29 22 ; Logical AND #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $03F3.w		; 8C F3 03 ; Store Y register to $03F3.w [Reads: Y Index]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	ldy #$03.b		; A0 03 ; Load #$03.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $03F2.w		; AD F2 03 ; Load $03F2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$22.b		; 29 22 ; Logical AND #$22.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $03F3.w		; 8C F3 03 ; Store Y register to $03F3.w [Reads: Y Index]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $03F3.w		; 9C F3 03 ; Store zero to $03F3.w
	lda $036E.w		; AD 6E 03 ; Load $036E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	jsr $C16D.w		; 20 6D C1 ; Jump to subroutine at $C16D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $0C		; 90 0C ; Branch if carry clear to $90, $0C [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	inc $047A.w		; EE 7A 04 ; Increment $047A.w [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	.db $80, $4A		; 80 4A ; Branch always to $80, $4A [Flow: branch]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $50		; D0 50 ; Branch if not equal to $D0, $50 [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4B		; D0 4B ; Branch if not equal to $D0, $4B [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $45		; F0 45 ; Branch if equal to $F0, $45 [Flow: branch]
	lda $3E.b		; A5 3E ; Load $3E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $40.b		; A5 40 ; Load $40.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	lda $3F.b		; A5 3F ; Load $3F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $41.b		; A5 41 ; Load $41.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda $1D.b		; A5 1D ; Load $1D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	jsl $01FF05.l		; 22 05 FF 01 ; Jump to subroutine long $01FF05.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $19		; 80 19 ; Branch always to $80, $19 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; [PATTERN: Memory clearing operation] 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	lda $26.b		; A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; [PATTERN: Memory clearing operation] 9C 76 03 ; Store zero to $0376.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	jsr $CC3C.w		; 20 3C CC ; Jump to subroutine at $CC3C.w [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $37		; 80 37 ; Branch always to $80, $37 [Flow: branch]
	lda $0343.w		; AD 43 03 ; Load $0343.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $80, $1F		; 80 1F ; Branch always to $80, $1F [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	stz $0345.w		; 9C 45 03 ; Store zero to $0345.w
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0998FC.l		; 22 FC 98 09 ; Jump to subroutine long $0998FC.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	jsr $CC3C.w		; 20 3C CC ; Jump to subroutine at $CC3C.w [Writes: Stack Pointer] [Flow: call]
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5C.b		; 85 5C ; Store accumulator to $5C.b [Reads: Accumulator]
	stz $5A.b		; 64 5A ; Store zero to $5A.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5B.b		; 85 5B ; Store accumulator to $5B.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $5B.b		; 64 5B ; Store zero to $5B.b
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3B		; F0 3B ; Branch if equal to $F0, $3B [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $031F.w		; 0D 1F 03 ; Logical OR $031F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $55.b		; 05 55 ; Logical OR $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2B		; D0 2B ; Branch if not equal to $D0, $2B [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $66.b		; A4 66 ; Load $66.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	.db $80, $24		; 80 24 ; Branch always to $80, $24 [Flow: branch]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $20		; F0 20 ; Branch if equal to $F0, $20 [Flow: branch]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $7EF35B.l		; AF 5B F3 7E ; Load long $7EF35B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $BA07.w,Y		; B9 07 BA ; Load $BA07.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0373.w		; 8D 73 03 ; Store accumulator to $0373.w [Reads: Accumulator]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $A3, $CA		; 82 A3 CA ; Branch always long to $82, $A3, $CA [Flow: branch]
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $5B		; D0 5B ; Branch if not equal to $D0, $5B [Flow: branch]
	lda $5F.b		; A5 5F ; Load $5F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $60.b		; 05 60 ; Logical OR $60.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $51		; F0 51 ; Branch if equal to $F0, $51 [Flow: branch]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4D		; D0 4D ; Branch if not equal to $D0, $4D [Flow: branch]
	lda $5F.b		; A5 5F ; Load $5F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02C2.w		; 8D C2 02 ; Store accumulator to $02C2.w [Reads: Accumulator]
	dec $61.b		; C6 61 ; Decrement $61.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $48		; 10 48 ; Branch if plus to $10, $48 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	ldy #$0F.b		; A0 0F ; Load #$0F.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $5F.b		; A5 5F ; Load $5F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $90, $36		; 90 36 ; Branch if carry clear to $90, $36 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
.ACCU 8
	sep #$20		; E2 20
	jsr $ED2C.w		; 20 2C ED ; Jump to subroutine at $ED2C.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $29		; B0 29 ; Branch if carry set to $B0, $29 [Flow: branch]
	stx $0E.b		; 86 0E ; Store X register to $0E.b [Reads: X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jsr $ED3F.w		; 20 3F ED ; Jump to subroutine at $ED3F.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $1F		; B0 1F ; Branch if carry set to $B0, $1F [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	jsr $F0D9.w		; 20 D9 F0 ; Jump to subroutine at $F0D9.w [Writes: Stack Pointer] [Flow: call]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	ldy $66.b		; A4 66 ; Load $66.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $05F8.w,X		; 9D F8 05 ; Store accumulator to $05F8.w,X [Reads: Accumulator, X Index]
	sta $0474.w		; 8D 74 04 ; Store accumulator to $0474.w [Reads: Accumulator]
	lda $05E4.w,X		; BD E4 05 ; Load $05E4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $05E8.w,X		; 9D E8 05 ; Store accumulator to $05E8.w,X [Reads: Accumulator, X Index]
.ACCU 16
	rep #$20		; C2 20
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $C4		; 10 C4 ; Branch if plus to $10, $C4 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $61.b		; 85 61 ; Store accumulator to $61.b [Reads: Accumulator]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	stz $57.b		; [PATTERN: Memory clearing operation] 64 57 ; Store zero to $57.b
	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $CE, $00		; 82 CE 00 ; Branch always long to $82, $CE, $00 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0312.w		; AD 12 03 ; Load $0312.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $9873.w		; 20 73 98 ; Jump to subroutine at $9873.w [Writes: Stack Pointer] [Flow: call]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $C1A1.w		; 20 A1 C1 ; Jump to subroutine at $C1A1.w [Writes: Stack Pointer] [Flow: call]
	jsr $91F1.w		; 20 F1 91 ; Jump to subroutine at $91F1.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0302.w		; 8D 02 03 ; Store accumulator to $0302.w [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	jsr $CB84.w		; 20 84 CB ; Jump to subroutine at $CB84.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $12		; 80 12 ; Branch always to $80, $12 [Flow: branch]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $9D, $00		; 82 9D 00 ; Branch always long to $82, $9D, $00 [Flow: branch]
	jsr $CB84.w		; 20 84 CB ; Jump to subroutine at $CB84.w [Writes: Stack Pointer] [Flow: call]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $F4		; F0 F4 ; Branch if equal to $F0, $F4 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	stz $01.b		; 64 01 ; Store zero to $01.b
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $39		; D0 39 ; Branch if not equal to $D0, $39 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2D		; D0 2D ; Branch if not equal to $D0, $2D [Flow: branch]
	jsr $C1A1.w		; 20 A1 C1 ; Jump to subroutine at $C1A1.w [Writes: Stack Pointer] [Flow: call]
	jsr $91F1.w		; 20 F1 91 ; Jump to subroutine at $91F1.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $2B		; 80 2B ; Branch always to $80, $2B [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	stz $01.b		; 64 01 ; Store zero to $01.b
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	jsr $C1A1.w		; 20 A1 C1 ; Jump to subroutine at $C1A1.w [Writes: Stack Pointer] [Flow: call]
	jsr $91F1.w		; 20 F1 91 ; Jump to subroutine at $91F1.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $06		; 80 06 ; Branch always to $80, $06 [Flow: branch]
	jsr $CBC9.w		; 20 C9 CB ; Jump to subroutine at $CBC9.w [Writes: Stack Pointer] [Flow: call]
	jmp $D485.w		; 4C 85 D4 ; Jump to $D485.w [Flow: jump]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $2F.b		; C5 2F ; Compare $2F.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $31		; D0 31 ; Branch if not equal to $D0, $31 [Flow: branch]
	lda $0315.w		; AD 15 03 ; Load $0315.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	dec $0371.w		; CE 71 03 ; Decrement $0371.w [Flags: NZ]
	.db $10, $2B		; 10 2B ; Branch if plus to $10, $2B [Flow: branch]
	ldy $0315.w		; AC 15 03 ; Load $0315.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $02F6.w		; AD F6 02 ; Load $02F6.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$20.b		; 29 20 ; Logical AND #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0315.w		; AD 15 03 ; Load $0315.w into accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F6.b		; 29 F6 ; Logical AND #$F6.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0371.w		; 8D 71 03 ; Store accumulator to $0371.w [Reads: Accumulator]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	stz $57.b		; [PATTERN: Memory clearing operation] 64 57 ; Store zero to $57.b
	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda $59.b		; A5 59 ; Load $59.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $19		; D0 19 ; Branch if not equal to $D0, $19 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5C.b		; 85 5C ; Store accumulator to $5C.b [Reads: Accumulator]
	stz $5A.b		; 64 5A ; Store zero to $5A.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5B.b		; 85 5B ; Store accumulator to $5B.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0366.w		; AD 66 03 ; Load $0366.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	lda $036A.w		; AD 6A 03 ; Load $036A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0369.w		; 8D 69 03 ; Store accumulator to $0369.w [Reads: Accumulator]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	stz $0369.w		; 9C 69 03 ; Store zero to $0369.w
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $65		; F0 65 ; Branch if equal to $F0, $65 [Flow: branch]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $5A		; D0 5A ; Branch if not equal to $D0, $5A [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $55		; D0 55 ; Branch if not equal to $D0, $55 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $51		; D0 51 ; Branch if not equal to $D0, $51 [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0345.w		; 8D 45 03 ; Store accumulator to $0345.w [Reads: Accumulator]
	lda $26.b		; [PATTERN: Memory clearing operation] A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda $0351.w		; AD 51 03 ; Load $0351.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $14		; D0 14 ; Branch if not equal to $D0, $14 [Flow: branch]
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	lda $7EF356.l		; AF 56 F3 7E ; Load long $7EF356.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	lda $3E.b		; A5 3E ; Load $3E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $40.b		; A5 40 ; Load $40.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $21.b		; 85 21 ; Store accumulator to $21.b [Reads: Accumulator]
	lda $3F.b		; A5 3F ; Load $3F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $41.b		; A5 41 ; Load $41.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	jsr $CC3C.w		; 20 3C CC ; Jump to subroutine at $CC3C.w [Writes: Stack Pointer] [Flow: call]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $036E.w		; AD 6E 03 ; Load $036E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	lda $036D.w		; AD 6D 03 ; Load $036D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$42.b		; 29 42 ; Logical AND #$42.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $82, $43, $FE		; 82 43 FE ; Branch always long to $82, $43, $FE [Flow: branch]
	lda $0343.w		; AD 43 03 ; Load $0343.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1F		; F0 1F ; Branch if equal to $F0, $1F [Flow: branch]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	stz $0345.w		; 9C 45 03 ; Store zero to $0345.w
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	jsl $0998FC.l		; 22 FC 98 09 ; Jump to subroutine long $0998FC.l [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	.db $82, $56, $02		; 82 56 02 ; Branch always long to $82, $56, $02 [Flow: branch]
	lda $036E.w		; AD 6E 03 ; Load $036E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $6B		; F0 6B ; Branch if equal to $F0, $6B [Flow: branch]
	jsr $C16D.w		; 20 6D C1 ; Jump to subroutine at $C16D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $66		; 90 66 ; Branch if carry clear to $90, $66 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx $28.b		; 86 28 ; Store X register to $28.b [Reads: X Index]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0362.w		; 8D 62 03 ; Store accumulator to $0362.w [Reads: Accumulator]
	sta $0363.w		; 8D 63 03 ; Store accumulator to $0363.w [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0364.w		; 8D 64 03 ; Store accumulator to $0364.w [Reads: Accumulator]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	lda #$01.b		; [PATTERN: Memory clearing operation] A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	sta $78.b		; 85 78 ; Store accumulator to $78.b [Reads: Accumulator]
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FD.b		; 29 FD ; Logical AND #$FD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	jsr $8D2B.w		; 20 2B 8D ; Jump to subroutine at $8D2B.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $66.b		; 85 66 ; Store accumulator to $66.b [Reads: Accumulator]
	cpx #$FF.b		; E0 FF ; Compare #$FF.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	jsr $8B9B.w		; 20 9B 8B ; Jump to subroutine at $8B9B.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $03, $00		; 82 03 00 ; Branch always long to $82, $03, $00 [Flow: branch]
	jsr $8AD1.w		; 20 D1 8A ; Jump to subroutine at $8AD1.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $23.b		; 85 23 ; Store accumulator to $23.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0370.w		; AD 70 03 ; Load $0370.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$77.b		; 29 77 ; Logical AND #$77.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $42		; F0 42 ; Branch if equal to $F0, $42 [Flow: branch]
	jsr $C16D.w		; 20 6D C1 ; Jump to subroutine at $C16D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $3D		; 90 3D ; Branch if carry clear to $90, $3D [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	stx $5D.b		; 86 5D ; Store X register to $5D.b [Reads: X Index]
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$F0.b		; A2 F0 ; Load #$F0.b into X register [Writes: X Index] [Flags: NZ]
	stx $28.b		; 86 28 ; Store X register to $28.b [Reads: X Index]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0362.w		; 8D 62 03 ; Store accumulator to $0362.w [Reads: Accumulator]
	sta $0363.w		; 8D 63 03 ; Store accumulator to $0363.w [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0364.w		; 8D 64 03 ; Store accumulator to $0364.w [Reads: Accumulator]
	stz $46.b		; [PATTERN: Memory clearing operation] 64 46 ; Store zero to $46.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	sta $78.b		; 85 78 ; Store accumulator to $78.b [Reads: Accumulator]
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $036E.w		; AD 6E 03 ; Load $036E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$70.b		; 29 70 ; Logical AND #$70.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2D		; F0 2D ; Branch if equal to $F0, $2D [Flow: branch]
	lda $036E.w		; AD 6E 03 ; Load $036E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $26		; D0 26 ; Branch if not equal to $D0, $26 [Flow: branch]
	lda $0370.w		; AD 70 03 ; Load $0370.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$77.b		; 29 77 ; Logical AND #$77.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	jsr $C16D.w		; 20 6D C1 ; Jump to subroutine at $C16D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $14		; 90 14 ; Branch if carry clear to $90, $14 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	jsr $9195.w		; [PATTERN: Memory clearing operation] 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	.db $82, $98, $F9		; 82 98 F9 ; Branch always long to $82, $98, $F9 [Flow: branch]
	lda $036F.w		; AD 6F 03 ; Load $036F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $48		; F0 48 ; Branch if equal to $F0, $48 [Flow: branch]
	lda $036E.w		; AD 6E 03 ; Load $036E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $41		; D0 41 ; Branch if not equal to $D0, $41 [Flow: branch]
	lda $0370.w		; AD 70 03 ; Load $0370.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$77.b		; 29 77 ; Logical AND #$77.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3A		; D0 3A ; Branch if not equal to $D0, $3A [Flow: branch]
	jsr $C16D.w		; 20 6D C1 ; Jump to subroutine at $C16D.w [Writes: Stack Pointer] [Flow: call]
	.db $90, $35		; 90 35 ; Branch if carry clear to $90, $35 [Flow: branch]
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx $28.b		; 86 28 ; Store X register to $28.b [Reads: X Index]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0362.w		; 8D 62 03 ; Store accumulator to $0362.w [Reads: Accumulator]
	sta $0363.w		; 8D 63 03 ; Store accumulator to $0363.w [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0364.w		; 8D 64 03 ; Store accumulator to $0364.w [Reads: Accumulator]
	lda #$0E.b		; A9 0E ; Load #$0E.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	stz $46.b		; [PATTERN: Memory clearing operation] 64 46 ; Store zero to $46.b
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	sta $78.b		; 85 78 ; Store accumulator to $78.b [Reads: Accumulator]
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1B		; D0 1B ; Branch if not equal to $D0, $1B [Flow: branch]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	jsr $E112.w		; 20 12 E1 ; Jump to subroutine at $E112.w [Writes: Stack Pointer] [Flow: call]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $6B.b		; 64 6B ; Store zero to $6B.b
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $031F.w		; 0D 1F 03 ; Logical OR $031F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $55.b		; 05 55 ; Logical OR $55.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $66.b		; A4 66 ; Load $66.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpy #$02.b		; C0 02 ; Compare #$02.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	.db $80, $1C		; 80 1C ; Branch always to $80, $1C [Flow: branch]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $18		; F0 18 ; Branch if equal to $F0, $18 [Flow: branch]
	lda $7EF35B.l		; AF 5B F3 7E ; Load long $7EF35B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $BA07.w,Y		; B9 07 BA ; Load $BA07.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0373.w		; 8D 73 03 ; Store accumulator to $0373.w [Reads: Accumulator]
	jsr $9195.w		; 20 95 91 ; Jump to subroutine at $9195.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $A8, $C6		; 82 A8 C6 ; Branch always long to $82, $A8, $C6 [Flow: branch]
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	.db $82, $78, $FC		; 82 78 FC ; Branch always long to $82, $78, $FC [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0007.w		; 29 07 00 ; Logical AND #$0007.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $31.b		; A4 31 ; Load $31.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $10, $04		; 10 04 ; Branch if plus to $10, $04 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $13		; F0 13 ; Branch if equal to $F0, $13 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	stz $01.b		; 64 01 ; Store zero to $01.b
	.db $80, $11		; 80 11 ; Branch always to $80, $11 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	stz $01.b		; 64 01 ; Store zero to $01.b
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $50.b		; 04 50 ; Test and set bits $50.b [Reads: Accumulator] [Flags: Z]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $0E.b		; 05 0E ; Logical OR $0E.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	stz $6C.b		; 64 6C ; Store zero to $6C.b
	.db $80, $3D		; 80 3D ; Branch always to $80, $3D [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0F		; 90 0F ; Branch if carry clear to $90, $0F [Flow: branch]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	sty $2F.b		; 84 2F ; Store Y register to $2F.b [Reads: Y Index]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $1018.w		; 1C 18 10 ; Test and reset bits $1018.w [Reads: Accumulator] [Flags: Z]
	jsr $1818.w		; 20 18 18 ; Jump to subroutine at $1818.w [Writes: Stack Pointer] [Flow: call]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	.db $10, $A5		; 10 A5 ; Branch if plus to $10, $A5 [Flow: branch]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	ldx $1D.b		; A6 1D ; Load $1D.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $047A.w		; AD 7A 04 ; Load $047A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
	lda $CC33.w,X		; BD 33 CC ; Load $CC33.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stx $28.b		; 86 28 ; Store X register to $28.b [Reads: X Index]
	stz $27.b		; 64 27 ; Store zero to $27.b
	ldx $00.b		; A6 00 ; Load $00.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $CC36.w,X		; BD 36 CC ; Load $CC36.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $02C7.w		; 8D C7 02 ; Store accumulator to $02C7.w [Reads: Accumulator]
	lda $CC39.w,X		; BD 39 CC ; Load $CC39.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $46.b		; 85 46 ; Store accumulator to $46.b [Reads: Accumulator]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $4D.b		; 85 4D ; Store accumulator to $4D.b [Reads: Accumulator]
	stz $0360.w		; 9C 60 03 ; Store zero to $0360.w
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FEFEFF.l,X		; FF FF FE FE ; Subtract with carry (long,X) $FEFEFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FDFD.w,X		; FE FD FD ; Increment memory $FDFD.w,X [Reads: X Index] [Flags: NZ]
	sbc $0000.w,X		; FD 00 00 ; Subtract with carry $0000.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $C0, $00		; 82 C0 00 ; Branch always long to $82, $C0, $00 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02DE.w		; 8D DE 02 ; Store accumulator to $02DE.w [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02DF.w		; 8D DF 02 ; Store accumulator to $02DF.w [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02DC.w		; 8D DC 02 ; Store accumulator to $02DC.w [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02DD.w		; 8D DD 02 ; Store accumulator to $02DD.w [Reads: Accumulator]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $CE2A.w		; 20 2A CE ; Jump to subroutine at $CE2A.w [Writes: Stack Pointer] [Flow: call]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $09		; F0 09 ; Branch if equal to $F0, $09 [Flow: branch]
	jsr $E112.w		; 20 12 E1 ; Jump to subroutine at $E112.w [Writes: Stack Pointer] [Flow: call]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $8F, $00		; 82 8F 00 ; Branch always long to $82, $8F, $00 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02DC.w		; ED DC 02 ; Subtract $02DC.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02DC.w		; AD DC 02 ; Load $02DC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	jsr $CDCB.w		; 20 CB CD ; Jump to subroutine at $CDCB.w [Writes: Stack Pointer] [Flow: call]
	lda $0C.b		; A5 0C ; Load $0C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $69		; F0 69 ; Branch if equal to $F0, $69 [Flow: branch]
	jsr $E076.w		; 20 76 E0 ; Jump to subroutine at $E076.w [Writes: Stack Pointer] [Flow: call]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $60		; F0 60 ; Branch if equal to $F0, $60 [Flow: branch]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $6D.b		; 85 6D ; Store accumulator to $6D.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02DE.w		; ED DE 02 ; Subtract $02DE.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	ldy $31.b		; A4 31 ; Load $31.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $30, $05		; 30 05 ; Branch if minus to $30, $05 [Flow: branch]
	lda $CC83.w,Y		; B9 83 CC ; Load $CC83.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $CC8D.w,Y		; B9 8D CC ; Load $CC8D.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldy $30.b		; A4 30 ; Load $30.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $30, $05		; 30 05 ; Branch if minus to $30, $05 [Flow: branch]
	lda $CC97.w,Y		; B9 97 CC ; Load $CC97.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $CCA1.w,Y		; B9 A1 CC ; Load $CCA1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0080.w		; C9 80 00 ; Compare #$0080.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; [PATTERN: Memory clearing operation] 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	stz $6D.b		; 64 6D ; Store zero to $6D.b
	stz $6B.b		; 64 6B ; Store zero to $6B.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1F.b		; 00 1F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000010.l,X		; FF 10 00 00 ; Subtract with carry (long,X) $000010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $12.b		; 00 12 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $9820.w		; 20 20 98 ; Jump to subroutine at $9820.w [Writes: Stack Pointer] [Flow: call]
	cmp [$64.b],Y		; D7 64 ; Compare accumulator (long indexed) [$64.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	eor $20A5.w,Y		; 59 A5 20 ; Exclusive OR accumulator with memory $20A5.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD7B.w,Y		; 79 7B CD ; Add $CD7B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $51.b		; 85 51 ; Store accumulator to $51.b [Reads: Accumulator]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD83.w,Y		; 79 83 CD ; Add $CD83.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD8B.w,Y		; 79 8B CD ; Add $CD8B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD93.w,Y		; 79 93 CD ; Add $CD93.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	jsr $D798.w		; 20 98 D7 ; Jump to subroutine at $D798.w [Writes: Stack Pointer] [Flow: call]
	stz $59.b		; 64 59 ; Store zero to $59.b
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD7B.w,Y		; 79 7B CD ; Add $CD7B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD83.w,Y		; 79 83 CD ; Add $CD83.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD8B.w,Y		; 79 8B CD ; Add $CD8B.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $51.b		; 85 51 ; Store accumulator to $51.b [Reads: Accumulator]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD93.w,Y		; 79 93 CD ; Add $CD93.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $53.b		; 85 53 ; Store accumulator to $53.b [Reads: Accumulator]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	jsr $D798.w		; 20 98 D7 ; Jump to subroutine at $D798.w [Writes: Stack Pointer] [Flow: call]
	stz $59.b		; 64 59 ; Store zero to $59.b
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CDA3.w,Y		; 79 A3 CD ; Add $CDA3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CDAB.w,Y		; 79 AB CD ; Add $CDAB.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CDB3.w,Y		; 79 B3 CD ; Add $CDB3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	jsr $D798.w		; 20 98 D7 ; Jump to subroutine at $D798.w [Writes: Stack Pointer] [Flow: call]
	stz $59.b		; 64 59 ; Store zero to $59.b
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CDA3.w,Y		; 79 A3 CD ; Add $CDA3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CDAB.w,Y		; 79 AB CD ; Add $CDAB.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CDB3.w,Y		; 79 B3 CD ; Add $CDB3.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	jsr $CF12.w		; 20 12 CF ; Jump to subroutine at $CF12.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $59.b		; 64 59 ; Store zero to $59.b
.ACCU 16
	rep #$20		; C2 20
	jsr $D798.w		; 20 98 D7 ; Jump to subroutine at $D798.w [Writes: Stack Pointer] [Flow: call]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD83.w		; 6D 83 CD ; Add $CD83.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD93.w		; 6D 93 CD ; Add $CD93.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD87.w		; 6D 87 CD ; Add $CD87.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CD97.w		; 6D 97 CD ; Add $CD97.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0008.w		; A9 08 00 ; Load #$0008.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $74.b		; A5 74 ; Load $74.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0004.w		; A9 04 00 ; Load #$0004.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $59.b		; 64 59 ; Store zero to $59.b
.ACCU 16
	rep #$20		; C2 20
	jsr $D798.w		; 20 98 D7 ; Jump to subroutine at $D798.w [Writes: Stack Pointer] [Flow: call]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0000.w		; 69 00 00 ; Add #$0000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$00FF.w		; C9 FF 00 ; Compare #$00FF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	trb $00.b		; 14 00 ; Test and reset bits $00.b [Reads: Accumulator] [Flags: Z]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	trb $1000.w		; 1C 00 10 ; Test and reset bits $1000.w [Reads: Accumulator] [Flags: Z]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $16.b		; 00 16 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $14.b		; 00 14 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $100024.l,X		; FF 24 00 10 ; Subtract with carry (long,X) $100024.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $1C.b		; 00 1C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $130016.l,X		; FF 16 00 13 ; Subtract with carry (long,X) $130016.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $13.b		; 00 13 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $080016.l,X		; FF 16 00 08 ; Subtract with carry (long,X) $080016.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $06.b		; 00 06 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $F6.b		; 00 F6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $06001D.l,X		; FF 1D 00 06 ; Subtract with carry (long,X) $06001D.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FA.b		; 00 FA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $060016.l,X		; FF 16 00 06 ; Subtract with carry (long,X) $060016.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FC0016.l,X		; FF 16 00 FC ; Subtract with carry (long,X) $FC0016.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FC0016.l,X		; FF 16 00 FC ; Subtract with carry (long,X) $FC0016.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $080016.l,X		; FF 16 00 08 ; Subtract with carry (long,X) $080016.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl $0E.b		; 06 0E ; Arithmetic shift left $0E.b [Reads: Direct Page] [Flags: NCZ]
	cop $0C.b		; 02 0C ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $08.b		; 04 08 ; Test and set bits $08.b [Reads: Accumulator] [Flags: Z]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor $20C2.w,Y		; 59 C2 20 ; Exclusive OR accumulator with memory $20C2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D798.w		; 20 98 D7 ; Jump to subroutine at $D798.w [Writes: Stack Pointer] [Flow: call]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	cpy #$08.b		; C0 08 ; Compare #$08.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
	lda $031C.w		; AD 1C 03 ; Load $031C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $3A.b		; 00 3A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $30, $6B		; 30 6B ; Branch if minus to $30, $6B [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $5A.b		; 66 5A ; Rotate right $5A.b [Reads: Direct Page] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $D06F.w,Y		; B9 6F D0 ; Load $D06F.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	adc #$40.b		; 69 40 ; Add #$40.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $80, $0D		; 80 0D ; Branch always to $80, $0D [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF.b		; 29 FF ; Logical AND #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $0A.b		; 00 0A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $2F.b		; 65 2F ; Add $2F.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D01C.w,Y		; 79 1C D0 ; Add $D01C.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $CFCC.w,Y		; 79 CC CF ; Add $CFCC.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.INDEX 16
	rep #$10		; C2 10
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsr $02C9.w		; 20 C9 02 ; Jump to subroutine at $02C9.w [Writes: Stack Pointer] [Flow: call]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $C9.b,X		; 16 C9 ; Arithmetic shift left $C9.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	cmp #$07.b		; C9 07 ; Compare #$07.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $08C9.w		; 0C C9 08 ; Test and set bits $08C9.w [Reads: Accumulator] [Flags: Z]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$5A.b]		; 07 5A ; OR accumulator with memory (long) [$5A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	jsr $DC4A.w		; 20 4A DC ; Jump to subroutine at $DC4A.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	.db $82, $C7, $01		; 82 C7 01 ; Branch always long to $82, $C7, $01 [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	cpy #$05.b		; C0 05 ; Compare #$05.b with Y register [Reads: Y Index] [Flags: NCZ]
	.db $F0, $F7		; F0 F7 ; Branch if equal to $F0, $F7 [Flow: branch]
	lda $0357.w		; AD 57 03 ; Load $0357.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $51		; F0 51 ; Branch if equal to $F0, $51 [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	cmp #$0B.b		; C9 0B ; Compare #$0B.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $3F		; 90 3F ; Branch if carry clear to $90, $3F [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	cmp #$0C.b		; C9 0C ; Compare #$0C.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $33		; 90 33 ; Branch if carry clear to $90, $33 [Flow: branch]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2E		; D0 2E ; Branch if not equal to $D0, $2E [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1E		; F0 1E ; Branch if equal to $F0, $1E [Flow: branch]
	jsl $02B929.l		; 22 29 B9 02 ; Jump to subroutine long $02B929.l [Writes: Stack Pointer] [Flow: call]
	lda #$33.b		; A9 33 ; Load #$33.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda #$15.b		; A9 15 ; Load #$15.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $11.b		; 85 11 ; Store accumulator to $11.b [Reads: Accumulator]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $A2.b		; 85 A2 ; Store accumulator to $A2.b [Reads: Accumulator]
	lda $7EC000.l		; AF 00 C0 7E ; Load long $7EC000.l into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	jsr $94F1.w		; 20 F1 94 ; Jump to subroutine at $94F1.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $02DB.w		; AD DB 02 ; Load $02DB.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $A95C.w		; 20 5C A9 ; Jump to subroutine at $A95C.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $A0, $00		; 82 A0 00 ; Branch always long to $82, $A0, $00 [Flow: branch]
	stz $02DB.w		; 9C DB 02 ; Store zero to $02DB.w
	lda $0357.w		; AD 57 03 ; Load $0357.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0351.w		; 8D 51 03 ; Store accumulator to $0351.w [Reads: Accumulator]
	jsr $D2C6.w		; 20 C6 D2 ; Jump to subroutine at $D2C6.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $09		; B0 09 ; Branch if carry set to $B0, $09 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$1A.b		; A9 1A ; Load #$1A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $49, $01		; 82 49 01 ; Branch always long to $82, $49, $01 [Flow: branch]
	lda $0359.w		; AD 59 03 ; Load $0359.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $46		; F0 46 ; Branch if equal to $F0, $46 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0351.w		; 8D 51 03 ; Store accumulator to $0351.w [Reads: Accumulator]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1F		; D0 1F ; Branch if not equal to $D0, $1F [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	lda $02E0.w		; AD E0 02 ; Load $02E0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	lda $7EF356.l		; AF 56 F3 7E ; Load long $7EF356.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $DD		; F0 DD ; Branch if equal to $F0, $DD [Flow: branch]
	stz $0345.w		; 9C 45 03 ; Store zero to $0345.w
	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5D.b		; 85 5D ; Store accumulator to $5D.b [Reads: Accumulator]
	.db $82, $1A, $01		; 82 1A 01 ; Branch always long to $82, $1A, $01 [Flow: branch]
	jsr $D2C6.w		; 20 C6 D2 ; Jump to subroutine at $D2C6.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$70.b		; C9 70 ; Compare #$70.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $FC, $00		; 82 FC 00 ; Branch always long to $82, $FC, $00 [Flow: branch]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2F		; D0 2F ; Branch if not equal to $D0, $2F [Flow: branch]
	lda $0345.w		; AD 45 03 ; Load $0345.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2A		; D0 2A ; Branch if not equal to $D0, $2A [Flow: branch]
	lda $0341.w		; AD 41 03 ; Load $0341.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0351.w		; 8D 51 03 ; Store accumulator to $0351.w [Reads: Accumulator]
	jsr $D2C6.w		; 20 C6 D2 ; Jump to subroutine at $D2C6.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	lda $8A.b		; A5 8A ; Load $8A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$70.b		; C9 70 ; Compare #$70.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$1B.b		; A9 1B ; Load #$1B.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $82, $C9, $00		; 82 C9 00 ; Branch always long to $82, $C9, $00 [Flow: branch]
	stz $0351.w		; 9C 51 03 ; Store zero to $0351.w
	lda $02EE.w		; AD EE 02 ; Load $02EE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02ED.w		; 8D ED 02 ; Store accumulator to $02ED.w [Reads: Accumulator]
	.db $82, $B7, $00		; 82 B7 00 ; Branch always long to $82, $B7, $00 [Flow: branch]
	stz $02ED.w		; [PATTERN: Memory clearing operation] 9C ED 02 ; Store zero to $02ED.w
	lda $02EE.w		; AD EE 02 ; Load $02EE.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $33		; F0 33 ; Branch if equal to $F0, $33 [Flow: branch]
	stz $0373.w		; 9C 73 03 ; Store zero to $0373.w
	lda $55.b		; A5 55 ; Load $55.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $2C		; D0 2C ; Branch if not equal to $D0, $2C [Flow: branch]
	jsr $AFB5.w		; 20 B5 AF ; Jump to subroutine at $AFB5.w [Writes: Stack Pointer] [Flow: call]
	.db $B0, $27		; [PATTERN: Memory clearing operation] B0 27 ; Branch if carry set to $B0, $27 [Flow: branch]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $22		; D0 22 ; Branch if not equal to $D0, $22 [Flow: branch]
	stz $03F7.w		; 9C F7 03 ; Store zero to $03F7.w
	stz $03F5.w		; 9C F5 03 ; Store zero to $03F5.w
	stz $03F6.w		; [PATTERN: Memory clearing operation] 9C F6 03 ; Store zero to $03F6.w
	lda $7EF357.l		; AF 57 F3 7E ; Load long $7EF357.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	stz $56.b		; 64 56 ; Store zero to $56.b
	stz $02E0.w		; 9C E0 02 ; Store zero to $02E0.w
	lda $7EF35B.l		; AF 5B F3 7E ; Load long $7EF35B.l into accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $D06C.w,Y		; B9 6C D0 ; Load $D06C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0373.w		; 8D 73 03 ; Store accumulator to $0373.w [Reads: Accumulator]
	.db $82, $4A, $BF		; 82 4A BF ; Branch always long to $82, $4A, $BF [Flow: branch]
	lda $0348.w		; AD 48 03 ; Load $0348.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$11.b		; 29 11 ; Logical AND #$11.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $4B		; F0 4B ; Branch if equal to $F0, $4B [Flow: branch]
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $59		; F0 59 ; Branch if equal to $F0, $59 [Flow: branch]
	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	.db $82, $51, $00		; 82 51 00 ; Branch always long to $82, $51, $00 [Flow: branch]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $033D.w		; 8D 3D 03 ; Store accumulator to $033D.w [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $033C.w		; 8D 3C 03 ; Store accumulator to $033C.w [Reads: Accumulator]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $033D.w		; 8D 3D 03 ; Store accumulator to $033D.w [Reads: Accumulator]
	lda #$80.b		; A9 80 ; Load #$80.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $033C.w		; 8D 3C 03 ; Store accumulator to $033C.w [Reads: Accumulator]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0348.w		; AD 48 03 ; Load $0348.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $034A.w		; 8C 4A 03 ; Store Y register to $034A.w [Reads: Y Index]
	lda $26.b		; A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0340.w		; 8D 40 03 ; Store accumulator to $0340.w [Reads: Accumulator]
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	.db $82, $17, $00		; 82 17 00 ; Branch always long to $82, $17, $00 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	stz $034A.w		; 9C 4A 03 ; Store zero to $034A.w
	lda $02E8.w		; AD E8 02 ; Load $02E8.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$10.b		; 29 10 ; Logical AND #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	lda $031F.w		; AD 1F 03 ; Load $031F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$3A.b		; A9 3A ; Load #$3A.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $031F.w		; 8D 1F 03 ; Store accumulator to $031F.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$11.b		; C9 11 ; Compare #$11.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $1A.b		; A5 1A ; Load $1A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr ($14FF.w,X)		; FC FF 14 ; Jump to subroutine indirect indexed ($14FF.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0C0014.l,X		; FF 14 00 0C ; Subtract with carry (long,X) $0C0014.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $04.b		; 00 04 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $0C0014.l,X		; FF 14 00 0C ; Subtract with carry (long,X) $0C0014.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FC.b		; 00 FC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $C20014.l,X		; FF 14 00 C2 ; Subtract with carry (long,X) $C20014.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr $0A98.w		; 20 98 0A ; Jump to subroutine at $0A98.w [Writes: Stack Pointer] [Flow: call]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0A.b		; 65 0A ; Add $0A.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D2F4.w,Y		; 79 F4 D2 ; Add $D2F4.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D2E4.w,Y		; 79 E4 D2 ; Add $D2E4.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsr $E026.w		; 20 26 E0 ; Jump to subroutine at $E026.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and $A5.b		; 25 A5 ; Logical AND $A5.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D2FC.w,Y		; 79 FC D2 ; Add $D2FC.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D2EC.w,Y		; 79 EC D2 ; Add $D2EC.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	jsr $E026.w		; 20 26 E0 ; Jump to subroutine at $E026.w [Writes: Stack Pointer] [Flow: call]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cpx #$09.b		; E0 09 ; Compare #$09.b with X register [Reads: X Index] [Flags: NCZ]
	brk $D0.b		; 00 D0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $E2.b		; 04 E2 ; Test and set bits $E2.b [Reads: Accumulator] [Flags: Z]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0C.b		; 00 0C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $07.b		; 00 07 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FD.b		; 00 FD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $000010.l,X		; FF 10 00 00 ; Subtract with carry (long,X) $000010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $05.b		; 00 05 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $64.b		; 06 64 ; Arithmetic shift left $64.b [Reads: Direct Page] [Flags: NCZ]
	eor $20C2.w,Y		; 59 C2 20 ; Exclusive OR accumulator with memory $20C2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D798.w		; 20 98 D7 ; Jump to subroutine at $D798.w [Writes: Stack Pointer] [Flow: call]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D365.w,Y		; 79 65 D3 ; Add $D365.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$14.b		; 69 14 ; Add #$14.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $0485.w		; EC 85 04 ; Compare $0485.w with X register [Reads: X Index] [Flags: NCZ]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D36D.w,Y		; 79 6D D3 ; Add $D36D.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	brk $25.b		; 00 25 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx $4A4A.w		; EC 4A 4A ; Compare $4A4A.w with X register [Reads: X Index] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.INDEX 16
	rep #$10		; C2 10
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	brk $85.b		; 00 85 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	ldx #$02.b		; A2 02 ; Load #$02.b into X register [Writes: X Index] [Flags: NZ]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $036D.w		; 0D 6D 03 ; Logical OR $036D.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$03.b		; A2 03 ; Load #$03.b into X register [Writes: X Index] [Flags: NZ]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsl $01D748.l		; 22 48 D7 01 ; Jump to subroutine long $01D748.l [Writes: Stack Pointer] [Flow: call]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $D37C.w,Y		; B9 7C D3 ; Load $D37C.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0368.w		; 8D 68 03 ; Store accumulator to $0368.w [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $80, $31		; 80 31 ; Branch always to $80, $31 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda $0366.w		; AD 66 03 ; Load $0366.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $036A.w		; AD 6A 03 ; Load $036A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	.db $80, $2A		; 80 2A ; Branch always to $80, $2A [Flow: branch]
	lda $0366.w		; AD 66 03 ; Load $0366.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $036A.w		; AD 6A 03 ; Load $036A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	lda $036A.w		; AD 6A 03 ; Load $036A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $0368.w		; 8D 68 03 ; Store accumulator to $0368.w [Reads: Accumulator]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $D375.w,Y		; B9 75 D3 ; Load $D375.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $7EF354.l		; EF 54 F3 7E ; Subtract with carry (long) $7EF354.l [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	lda $02E5.w		; AD E5 02 ; Load $02E5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$05.b		; A2 05 ; Load #$05.b into X register [Writes: X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	ldx #$08.b		; A2 08 ; Load #$08.b into X register [Writes: X Index] [Flags: NZ]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$0C.b		; A2 0C ; Load #$0C.b into X register [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	stz $59.b		; 64 59 ; Store zero to $59.b
.ACCU 16
	rep #$20		; C2 20
	jsr $D798.w		; 20 98 D7 ; Jump to subroutine at $D798.w [Writes: Stack Pointer] [Flow: call]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D445.w,Y		; 79 45 D4 ; Add $D445.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D455.w,Y		; 79 55 D4 ; Add $D455.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D465.w,Y		; 79 65 D4 ; Add $D465.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D475.w,Y		; 79 75 D4 ; Add $D475.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $036E.w		; 0D 6E 03 ; Logical OR $036E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $036D.w		; AD 6D 03 ; Load $036D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0370.w		; 0D 70 03 ; Logical OR $0370.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$33.b		; 29 33 ; Logical AND #$33.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2B		; F0 2B ; Branch if equal to $F0, $2B [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $01.b		; 84 01 ; Store Y register to $01.b [Reads: Y Index]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$00.b]		; 07 00 ; OR accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $000000.l		; 0F 00 00 00 ; OR accumulator with memory (long) $000000.l [Writes: Accumulator] [Flags: NZ]
	ora $000000.l		; 0F 00 00 00 ; OR accumulator with memory (long) $000000.l [Writes: Accumulator] [Flags: NZ]
	ora $000000.l		; 0F 00 00 00 ; OR accumulator with memory (long) $000000.l [Writes: Accumulator] [Flags: NZ]
	ora $000000.l		; 0F 00 00 00 ; OR accumulator with memory (long) $000000.l [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $8B.b		; 00 8B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $03A4.w,X		; BD A4 03 ; Load $03A4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda $044A.w		; AD 4A 04 ; Load $044A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $A0.b		; A5 A0 ; Load $A0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$10.b		; 69 10 ; Add #$10.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	lda $EE.b		; A5 EE ; Load $EE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	lda $0BFA.w,X		; BD FA 0B ; Load $0BFA.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0C0E.w,X		; BD 0E 0C ; Load $0C0E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0C04.w,X		; BD 04 0C ; Load $0C04.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda $0C18.w,X		; BD 18 0C ; Load $0C18.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	lda $0C72.w,X		; BD 72 0C ; Load $0C72.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stz $59.b		; 64 59 ; Store zero to $59.b
.ACCU 16
	rep #$20		; C2 20
	jsr $D798.w		; 20 98 D7 ; Jump to subroutine at $D798.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $39		; D0 39 ; Branch if not equal to $D0, $39 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $05.b		; A5 05 ; Load $05.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $09.b		; A5 09 ; Load $09.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $E6.b		; A5 E6 ; Load $E6.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $04.b		; 65 04 ; Add $04.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $E0.b		; A5 E0 ; Load $E0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $08.b		; 65 08 ; Add $08.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	jsr $D607.w		; 20 07 D6 ; Jump to subroutine at $D607.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $09.b		; 85 09 ; Store accumulator to $09.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	stz $EE.b		; 64 EE ; Store zero to $EE.b
	jsr $D607.w		; 20 07 D6 ; Jump to subroutine at $D607.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $EE.b		; 85 EE ; Store accumulator to $EE.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $A0.b		; 85 A0 ; Store accumulator to $A0.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $73.b		; A5 73 ; Load $73.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D556.w,Y		; 79 56 D5 ; Add $D556.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D558.w,Y		; 79 58 D5 ; Add $D558.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D566.w,Y		; 79 66 D5 ; Add $D566.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D568.w,Y		; 79 68 D5 ; Add $D568.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A5.b		; 00 A5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $48.b		; 00 48 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	ldy #$02.b		; A0 02 ; Load #$02.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $0E		; 90 0E ; Branch if carry clear to $90, $0E [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	stz $59.b		; 64 59 ; Store zero to $59.b
.ACCU 16
	rep #$20		; C2 20
	jsr $D798.w		; 20 98 D7 ; Jump to subroutine at $D798.w [Writes: Stack Pointer] [Flow: call]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D657.w,Y		; 79 57 D6 ; Add $D657.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D65F.w,Y		; 79 5F D6 ; Add $D65F.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $036E.w		; 0D 6E 03 ; Logical OR $036E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $036D.w		; AD 6D 03 ; Load $036D.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0370.w		; 0D 70 03 ; Logical OR $0370.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$33.b		; 29 33 ; Logical AND #$33.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2B		; F0 2B ; Branch if equal to $F0, $2B [Flow: branch]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	cmp #$80.b		; C9 80 ; Compare #$80.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	ldy #$FF.b		; A0 FF ; Load #$FF.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $01.b		; 84 01 ; Store Y register to $01.b [Reads: Y Index]
	lda $66.b		; A5 66 ; Load $66.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$02.b		; 29 02 ; Logical AND #$02.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $59.b		; 64 59 ; Store zero to $59.b
.ACCU 16
	rep #$20		; C2 20
	jsr $D798.w		; 20 98 D7 ; Jump to subroutine at $D798.w [Writes: Stack Pointer] [Flow: call]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0002.w		; 69 02 00 ; Add #$0002.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000D.w		; 69 0D 00 ; Add #$000D.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000A.w		; 69 0A 00 ; Add #$000A.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0015.w		; 69 15 00 ; Add #$0015.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	.db $82, $1B, $F8		; 82 1B F8 ; Branch always long to $82, $1B, $F8 [Flow: branch]
	sbc $0018FF.l,X		; FF FF 18 00 ; Subtract with carry (long,X) $0018FF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	.db $10, $00		; 10 00 ; Branch if plus to $10, $00 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $640010.l,X		; FF 10 00 64 ; Subtract with carry (long,X) $640010.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	eor $20C2.w,Y		; 59 C2 20 ; Exclusive OR accumulator with memory $20C2.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jsr $D798.w		; 20 98 D7 ; Jump to subroutine at $D798.w [Writes: Stack Pointer] [Flow: call]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D736.w,Y		; 79 36 D7 ; Add $D736.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D738.w,Y		; 79 38 D7 ; Add $D738.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D72E.w,Y		; 79 2E D7 ; Add $D72E.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $D730.w,Y		; 79 30 D7 ; Add $D730.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	and $EC.b		; 25 EC ; Logical AND $EC.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
.INDEX 16
	rep #$10		; C2 10
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; [PATTERN: Memory clearing operation] 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	jsr $D9D8.w		; 20 D8 D9 ; Jump to subroutine at $D9D8.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0C.b		; 64 0C ; Store zero to $0C.b
	stz $0E.b		; 64 0E ; Store zero to $0E.b
	stz $38.b		; [PATTERN: Memory clearing operation] 64 38 ; Store zero to $38.b
	stz $58.b		; 64 58 ; Store zero to $58.b
	stz $02C0.w		; 9C C0 02 ; Store zero to $02C0.w
	stz $5F.b		; 64 5F ; Store zero to $5F.b
	stz $62.b		; 64 62 ; Store zero to $62.b
	stz $0320.w		; [PATTERN: Memory clearing operation] 9C 20 03 ; Store zero to $0320.w
	stz $0341.w		; 9C 41 03 ; Store zero to $0341.w
	stz $0343.w		; 9C 43 03 ; Store zero to $0343.w
	stz $0348.w		; 9C 48 03 ; Store zero to $0348.w
	stz $034C.w		; 9C 4C 03 ; Store zero to $034C.w
	stz $0357.w		; [PATTERN: Memory clearing operation] 9C 57 03 ; Store zero to $0357.w
	stz $0359.w		; 9C 59 03 ; Store zero to $0359.w
	stz $035B.w		; 9C 5B 03 ; Store zero to $035B.w
	stz $0366.w		; 9C 66 03 ; Store zero to $0366.w
	stz $036D.w		; 9C 6D 03 ; Store zero to $036D.w
	stz $036F.w		; [PATTERN: Memory clearing operation] 9C 6F 03 ; Store zero to $036F.w
	stz $02E5.w		; 9C E5 02 ; Store zero to $02E5.w
	stz $02E7.w		; 9C E7 02 ; Store zero to $02E7.w
	stz $02EE.w		; 9C EE 02 ; Store zero to $02EE.w
	stz $02F6.w		; 9C F6 02 ; Store zero to $02F6.w
	stz $03F1.w		; 9C F1 03 ; Store zero to $03F1.w
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvn $50,$DC		; 54 DC 50 ; Move block negative $50,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC50]		; DC 50 DC ; Jump long indirect [$DC50] [Flow: jump]
	.db $50, $DC		; 50 DC ; Branch if overflow clear to $50, $DC [Flow: branch]
	.db $50, $DC		; 50 DC ; Branch if overflow clear to $50, $DC [Flow: branch]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	ldx $DC.b,Y		; B6 DC ; Load X register $DC.b,Y [Reads: Direct Page, Y Index] [Writes: X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $DCBC.w,X		; DD BC DC ; Compare accumulator $DCBC.w,X [Reads: X Index] [Flags: NCZ]
	.db $50, $DC		; 50 DC ; Branch if overflow clear to $50, $DC [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$DDCA]		; DC CA DD ; Jump long indirect [$DDCA] [Flow: jump]
	stz $A4DC.w,X		; 9E DC A4 ; Store zero to $A4DC.w,X [Reads: X Index]
	jmp.w [$DC61]		; DC 61 DC ; Jump long indirect [$DC61] [Flow: jump]
	adc ($DC.b,X)		; 61 DC ; Add with carry ($DC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($DC.b,X)		; 61 DC ; Add with carry ($DC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($DC.b,X)		; 61 DC ; Add with carry ($DC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $5D,$DC		; 54 DC 5D ; Move block negative $5D,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC5D]		; DC 5D DC ; Jump long indirect [$DC5D] [Flow: jump]
	eor $5DDC.w,X		; 5D DC 5D ; Exclusive OR accumulator with memory $5DDC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$DCC2]		; DC C2 DC ; Jump long indirect [$DCC2] [Flow: jump]
	adc ($DC.b)		; 72 DC ; Add with carry (indirect) ($DC.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	adc $7DDC.w,X		; 7D DC 7D ; Add $7DDC.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	mvn $86,$DC		; 54 DC 86 ; Move block negative $86,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC50]		; DC 50 DC ; Jump long indirect [$DC50] [Flow: jump]
	sbc ($DD.b,X)		; E1 DD ; Subtract with carry ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	dec $DEAD.w,X		; DE AD DE ; Decrement memory $DEAD.w,X [Reads: X Index] [Flags: NZ]
	cmp $DE.b		; C5 DE ; Compare $DE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $DE.b		; C5 DE ; Compare $DE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $DEDDDE.l		; CF DE DD DE ; Compare accumulator (long) $DEDDDE.l [Reads: Accumulator] [Flags: NCZ]
	cmp $DEDDDE.l		; CF DE DD DE ; Compare accumulator (long) $DEDDDE.l [Reads: Accumulator] [Flags: NCZ]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DD9D]		; DC 9D DD ; Jump long indirect [$DD9D] [Flow: jump]
	lda ($DD.b,X)		; A1 DD ; Load accumulator ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($DD.b,X)		; A1 DD ; Load accumulator ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($DE.b,X)		; 61 DE ; Add with carry ($DE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC50]		; DC 50 DC ; Jump long indirect [$DC50] [Flow: jump]
	lda ($DD.b),Y		; B1 DD ; Load accumulator ($DD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	mvn $11,$DC		; 54 DC 11 ; Move block negative $11,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cmp $67DC54.l,X		; DF 54 DC 67 ; Compare accumulator (long,X) $67DC54.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	dec $DC54.w,X		; DE 54 DC ; Decrement memory $DC54.w,X [Reads: X Index] [Flags: NZ]
	adc [$DE.b]		; 67 DE ; Add with carry (long) [$DE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $DC54DE.l,X		; FF DE 54 DC ; Subtract with carry (long,X) $DC54DE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	ror $7EDE.w,X		; 7E DE 7E ; Rotate right $7EDE.w,X [Reads: X Index] [Flags: NCZ]
	dec $DE7E.w,X		; DE 7E DE ; Decrement memory $DE7E.w,X [Reads: X Index] [Flags: NZ]
	ror $7EDE.w,X		; 7E DE 7E ; Rotate right $7EDE.w,X [Reads: X Index] [Flags: NCZ]
	dec $DE7E.w,X		; DE 7E DE ; Decrement memory $DE7E.w,X [Reads: X Index] [Flags: NZ]
	ror $19DE.w,X		; 7E DE 19 ; Rotate right $19DE.w,X [Reads: X Index] [Flags: NCZ]
	cmp $6ADD6A.l,X		; DF 6A DD 6A ; Compare accumulator (long,X) $6ADD6A.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cmp $DD6A.w,X		; DD 6A DD ; Compare accumulator $DD6A.w,X [Reads: X Index] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD6A.w,X		; DD 6A DD ; Compare accumulator $DD6A.w,X [Reads: X Index] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DC54.w,X		; DD 54 DC ; Compare accumulator $DC54.w,X [Reads: X Index] [Flags: NCZ]
	mvn $F7,$DC		; 54 DC F7 ; Move block negative $F7,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	cmp $DC54.w,X		; DD 54 DC ; Compare accumulator $DC54.w,X [Reads: X Index] [Flags: NCZ]
	mvn $45,$DC		; 54 DC 45 ; Move block negative $45,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	dec $DC54.w,X		; DE 54 DC ; Decrement memory $DC54.w,X [Reads: X Index] [Flags: NZ]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DE17]		; DC 17 DE ; Jump long indirect [$DE17] [Flow: jump]
	and #$DE.b		; 29 DE ; Logical AND #$DE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	and $35DE.w		; 2D DE 35 ; Logical AND $35DE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec $DE3A.w,X		; DE 3A DE ; Decrement memory $DE3A.w,X [Reads: X Index] [Flags: NZ]
	.db $50, $DC		; 50 DC ; Branch if overflow clear to $50, $DC [Flow: branch]
	.db $50, $DC		; 50 DC ; Branch if overflow clear to $50, $DC [Flow: branch]
	.db $50, $DC		; 50 DC ; Branch if overflow clear to $50, $DC [Flow: branch]
	.db $50, $DC		; 50 DC ; Branch if overflow clear to $50, $DC [Flow: branch]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD0A.w,X		; DD 0A DD ; Compare accumulator $DD0A.w,X [Reads: X Index] [Flags: NCZ]
	nop		; EA ; No operation
	jmp.w [$DCEA]		; DC EA DC ; Jump long indirect [$DCEA] [Flow: jump]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD0A.w,X		; DD 0A DD ; Compare accumulator $DD0A.w,X [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD0A.w,X		; DD 0A DD ; Compare accumulator $DD0A.w,X [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD0A.w,X		; DD 0A DD ; Compare accumulator $DD0A.w,X [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD0A.w,X		; DD 0A DD ; Compare accumulator $DD0A.w,X [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD0A.w,X		; DD 0A DD ; Compare accumulator $DD0A.w,X [Reads: X Index] [Flags: NCZ]
	eor $DE4FDE.l		; 4F DE 4F DE ; Exclusive OR accumulator with memory (long) $DE4FDE.l [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$DCC8]		; DC C8 DC ; Jump long indirect [$DCC8] [Flow: jump]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$DCC8]		; DC C8 DC ; Jump long indirect [$DCC8] [Flow: jump]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$DCC8]		; DC C8 DC ; Jump long indirect [$DCC8] [Flow: jump]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$DCC8]		; DC C8 DC ; Jump long indirect [$DCC8] [Flow: jump]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$DC.b		; E0 DC ; Compare #$DC.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$DC.b		; E0 DC ; Compare #$DC.b with X register [Reads: X Index] [Flags: NCZ]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DCD4]		; DC D4 DC ; Jump long indirect [$DCD4] [Flow: jump]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DCAE]		; DC AE DC ; Jump long indirect [$DCAE] [Flow: jump]
	ldx $AEDC.w		; AE DC AE ; Load $AEDC.w into X register [Writes: X Index] [Flags: NZ]
	jmp.w [$DCAE]		; DC AE DC ; Jump long indirect [$DCAE] [Flow: jump]
	ldx $AEDC.w		; AE DC AE ; Load $AEDC.w into X register [Writes: X Index] [Flags: NZ]
	jmp.w [$DCAE]		; DC AE DC ; Jump long indirect [$DCAE] [Flow: jump]
	ldx $AEDC.w		; AE DC AE ; Load $AEDC.w into X register [Writes: X Index] [Flags: NZ]
	jmp.w [$DCAE]		; DC AE DC ; Jump long indirect [$DCAE] [Flow: jump]
	ldx $AEDC.w		; AE DC AE ; Load $AEDC.w into X register [Writes: X Index] [Flags: NZ]
	jmp.w [$DCAE]		; DC AE DC ; Jump long indirect [$DCAE] [Flow: jump]
	ldx $AEDC.w		; AE DC AE ; Load $AEDC.w into X register [Writes: X Index] [Flags: NZ]
	jmp.w [$DCAE]		; DC AE DC ; Jump long indirect [$DCAE] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DC54]		; DC 54 DC ; Jump long indirect [$DC54] [Flow: jump]
	mvn $54,$DC		; 54 DC 54 ; Move block negative $54,$DC [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	jmp.w [$DDEB]		; DC EB DD ; Jump long indirect [$DDEB] [Flow: jump]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $30E2.w,X		; DD E2 30 ; Compare accumulator $30E2.w,X [Reads: X Index] [Flags: NCZ]
	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $49, $02		; 82 49 02 ; Branch always long to $82, $49, $02 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $49.b		; A5 49 ; Load $49.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $49.b		; 85 49 ; Store accumulator to $49.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FFF8.w		; 29 F8 FF ; Logical AND #$FFF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldx $EE.b		; A6 EE ; Load $EE.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$1000.w		; 69 00 10 ; Add #$1000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
.INDEX 16
	rep #$10		; C2 10
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $037F.w		; AD 7F 03 ; Load $037F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	sta $0114.w		; 8D 14 01 ; Store accumulator to $0114.w [Reads: Accumulator]
	stx $BD.b		; 86 BD ; Store X register to $BD.b [Reads: X Index]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($D7D8.w,X)		; 7C D8 D7 ; Jump indirect indexed to ($D7D8.w,X) [Reads: X Index] [Flow: jump]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DC50.w,X		; DE 50 DC ; Decrement memory $DC50.w,X [Reads: X Index] [Flags: NZ]
	.db $50, $DC		; 50 DC ; Branch if overflow clear to $50, $DC [Flow: branch]
	.db $50, $DC		; 50 DC ; Branch if overflow clear to $50, $DC [Flow: branch]
	adc ($DE.b,X)		; 61 DE ; Add with carry ($DE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DCB6.w,X		; DE B6 DC ; Decrement memory $DCB6.w,X [Reads: X Index] [Flags: NZ]
	tas		; 1B ; Transfer C to stack pointer  [Reads: Accumulator] [Writes: Stack Pointer]
	cmp $DCBC.w,X		; DD BC DC ; Compare accumulator $DCBC.w,X [Reads: X Index] [Flags: NCZ]
	jmp $DC98DD.l		; 5C DD 98 DC ; Jump long to $DC98DD.l [Flow: jump]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp $DC9E.w,X		; DD 9E DC ; Compare accumulator $DC9E.w,X [Reads: X Index] [Flags: NCZ]
	ldy $DC.b		; A4 DC ; Load $DC.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	adc ($DC.b,X)		; 61 DC ; Add with carry ($DC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($DC.b,X)		; 61 DC ; Add with carry ($DC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($DC.b,X)		; 61 DC ; Add with carry ($DC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	adc ($DC.b,X)		; 61 DC ; Add with carry ($DC.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	eor $5DDC.w,X		; 5D DC 5D ; Exclusive OR accumulator with memory $5DDC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$DC5D]		; DC 5D DC ; Jump long indirect [$DC5D] [Flow: jump]
	eor $C2DC.w,X		; 5D DC C2 ; Exclusive OR accumulator with memory $C2DC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	jmp.w [$DC72]		; DC 72 DC ; Jump long indirect [$DC72] [Flow: jump]
	adc $7DDC.w,X		; 7D DC 7D ; Add $7DDC.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DC86.w,X		; DE 86 DC ; Decrement memory $DC86.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DC50.w,X		; DE 50 DC ; Decrement memory $DC50.w,X [Reads: X Index] [Flags: NZ]
	sbc ($DD.b,X)		; E1 DD ; Subtract with carry ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	dec $DEAD.w,X		; DE AD DE ; Decrement memory $DEAD.w,X [Reads: X Index] [Flags: NZ]
	cmp $DE.b		; C5 DE ; Compare $DE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $DE.b		; C5 DE ; Compare $DE.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $DEDDDE.l		; CF DE DD DE ; Compare accumulator (long) $DEDDDE.l [Reads: Accumulator] [Flags: NCZ]
	cmp $DEDDDE.l		; CF DE DD DE ; Compare accumulator (long) $DEDDDE.l [Reads: Accumulator] [Flags: NCZ]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	stx $DC.b		; 86 DC ; Store X register to $DC.b [Reads: X Index]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DD9D.w,X		; DE 9D DD ; Decrement memory $DD9D.w,X [Reads: X Index] [Flags: NZ]
	lda ($DD.b,X)		; A1 DD ; Load accumulator ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lda ($DD.b,X)		; A1 DD ; Load accumulator ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	adc ($DE.b,X)		; 61 DE ; Add with carry ($DE.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DF09.w,X		; DE 09 DF ; Decrement memory $DF09.w,X [Reads: X Index] [Flags: NZ]
	.db $50, $DC		; 50 DC ; Branch if overflow clear to $50, $DC [Flow: branch]
	lda ($DD.b),Y		; B1 DD ; Load accumulator ($DD.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DF11.w,X		; DE 11 DF ; Decrement memory $DF11.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE67.w,X		; DE 67 DE ; Decrement memory $DE67.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE67.w,X		; DE 67 DE ; Decrement memory $DE67.w,X [Reads: X Index] [Flags: NZ]
	sbc $DEE7DE.l,X		; FF DE E7 DE ; Subtract with carry (long,X) $DEE7DE.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc [$DE.b]		; E7 DE ; Subtract with carry (long) [$DE.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($DE.b),Y		; F1 DE ; Subtract with carry ($DE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($DE.b),Y		; F1 DE ; Subtract with carry ($DE.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	ror $7EDE.w,X		; 7E DE 7E ; Rotate right $7EDE.w,X [Reads: X Index] [Flags: NCZ]
	dec $DE7E.w,X		; DE 7E DE ; Decrement memory $DE7E.w,X [Reads: X Index] [Flags: NZ]
	ror $7EDE.w,X		; 7E DE 7E ; Rotate right $7EDE.w,X [Reads: X Index] [Flags: NCZ]
	dec $DE7E.w,X		; DE 7E DE ; Decrement memory $DE7E.w,X [Reads: X Index] [Flags: NZ]
	ror $19DE.w,X		; 7E DE 19 ; Rotate right $19DE.w,X [Reads: X Index] [Flags: NCZ]
	cmp $6ADD6A.l,X		; DF 6A DD 6A ; Compare accumulator (long,X) $6ADD6A.l,X [Reads: Accumulator, X Index] [Flags: NCZ]
	cmp $DD6A.w,X		; DD 6A DD ; Compare accumulator $DD6A.w,X [Reads: X Index] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD6A.w,X		; DD 6A DD ; Compare accumulator $DD6A.w,X [Reads: X Index] [Flags: NCZ]
	ror A		; 6A ; Rotate right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DE5B.w,X		; DD 5B DE ; Compare accumulator $DE5B.w,X [Reads: X Index] [Flags: NCZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	eor $DE.b		; 45 DE ; Exclusive OR $DE.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE17.w,X		; DE 17 DE ; Decrement memory $DE17.w,X [Reads: X Index] [Flags: NZ]
	and #$2DDE.w		; 29 DE 2D ; Logical AND #$2DDE.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec $DE35.w,X		; DE 35 DE ; Decrement memory $DE35.w,X [Reads: X Index] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DD41.w,X		; DE 41 DD ; Decrement memory $DD41.w,X [Reads: X Index] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor ($DD.b,X)		; 41 DD ; Exclusive OR accumulator with memory ($DD.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD0A.w,X		; DD 0A DD ; Compare accumulator $DD0A.w,X [Reads: X Index] [Flags: NCZ]
	nop		; EA ; No operation
	jmp.w [$DCEA]		; DC EA DC ; Jump long indirect [$DCEA] [Flow: jump]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD0A.w,X		; DD 0A DD ; Compare accumulator $DD0A.w,X [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD0A.w,X		; DD 0A DD ; Compare accumulator $DD0A.w,X [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD0A.w,X		; DD 0A DD ; Compare accumulator $DD0A.w,X [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD0A.w,X		; DD 0A DD ; Compare accumulator $DD0A.w,X [Reads: X Index] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $DD0A.w,X		; DD 0A DD ; Compare accumulator $DD0A.w,X [Reads: X Index] [Flags: NCZ]
	eor $DE4FDE.l		; 4F DE 4F DE ; Exclusive OR accumulator with memory (long) $DE4FDE.l [Writes: Accumulator] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$DCC8]		; DC C8 DC ; Jump long indirect [$DCC8] [Flow: jump]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$DCC8]		; DC C8 DC ; Jump long indirect [$DCC8] [Flow: jump]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$DCC8]		; DC C8 DC ; Jump long indirect [$DCC8] [Flow: jump]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	jmp.w [$DCC8]		; DC C8 DC ; Jump long indirect [$DCC8] [Flow: jump]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$E0DC.w		; E0 DC E0 ; Compare #$E0DC.w with X register [Reads: X Index] [Flags: NCZ]
	jmp.w [$DD00]		; DC 00 DD ; Jump long indirect [$DD00] [Flow: jump]
	brk $DD.b		; 00 DD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	pei ($DC.b)		; D4 DC ; Push effective indirect address ($DC.b) [Reads: Direct Page] [Writes: Stack Pointer]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	phb		; 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	jmp.w [$DC8B]		; DC 8B DC ; Jump long indirect [$DC8B] [Flow: jump]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	ldx $AEDC.w		; AE DC AE ; Load $AEDC.w into X register [Writes: X Index] [Flags: NZ]
	jmp.w [$DCAE]		; DC AE DC ; Jump long indirect [$DCAE] [Flow: jump]
	ldx $AEDC.w		; AE DC AE ; Load $AEDC.w into X register [Writes: X Index] [Flags: NZ]
	jmp.w [$DCAE]		; DC AE DC ; Jump long indirect [$DCAE] [Flow: jump]
	ldx $AEDC.w		; AE DC AE ; Load $AEDC.w into X register [Writes: X Index] [Flags: NZ]
	jmp.w [$DCAE]		; DC AE DC ; Jump long indirect [$DCAE] [Flow: jump]
	ldx $AEDC.w		; AE DC AE ; Load $AEDC.w into X register [Writes: X Index] [Flags: NZ]
	jmp.w [$DCAE]		; DC AE DC ; Jump long indirect [$DCAE] [Flow: jump]
	ldx $AEDC.w		; AE DC AE ; Load $AEDC.w into X register [Writes: X Index] [Flags: NZ]
	jmp.w [$DCAE]		; DC AE DC ; Jump long indirect [$DCAE] [Flow: jump]
	ldx $5BDC.w		; AE DC 5B ; Load $5BDC.w into X register [Writes: X Index] [Flags: NZ]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	tad		; 5B ; Transfer 16-bit accumulator to direct page register [Reads: Accumulator] [Writes: Direct Page] [Flags: NZ] [SNES: Sets DP register from accumulator]
	dec $DE5B.w,X		; DE 5B DE ; Decrement memory $DE5B.w,X [Reads: X Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp $DDEB.w,X		; DD EB DD ; Compare accumulator $DDEB.w,X [Reads: X Index] [Flags: NCZ]
	jsl $00882E.l		; 22 2E 88 00 ; Jump to subroutine long $00882E.l [Writes: Stack Pointer] [Flow: call]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $037F.w		; AD 7F 03 ; Load $037F.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $01		; 80 01 ; Branch always to $80, $01 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	jmp ($DA2A.w,X)		; 7C 2A DA ; Jump indirect indexed to ($DA2A.w,X) [Reads: X Index] [Flow: jump]
	jsl $1BBD7A.l		; 22 7A BD 1B ; Jump to subroutine long $1BBD7A.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $DE		; 80 DE ; Branch always to $80, $DE [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	asl $00.b		; 06 00 ; Arithmetic shift left $00.b [Reads: Direct Page] [Flags: NCZ]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $38.b		; 04 38 ; Test and set bits $38.b [Reads: Accumulator] [Flags: Z]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0003.w		; 29 03 00 ; Logical AND #$0003.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $DC55.w,Y		; B9 55 DC ; Load $DC55.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $6E.b		; 85 6E ; Store accumulator to $6E.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $02C0.w		; 0C C0 02 ; Test and set bits $02C0.w [Reads: Accumulator] [Flags: Z]
	.db $80, $09		; 80 09 ; Branch always to $80, $09 [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $02C0.w		; 0C C0 02 ; Test and set bits $02C0.w [Reads: Accumulator] [Flags: Z]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $58.b		; 04 58 ; Test and set bits $58.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $02F5.w		; AD F5 02 ; Load $02F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $59.b		; 04 59 ; Test and set bits $59.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0320.w		; 0C 20 03 ; Test and set bits $0320.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0348.w		; 0C 48 03 ; Test and set bits $0348.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0348.w		; 0C 48 03 ; Test and set bits $0348.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	tsb $02F6.w		; 0C F6 02 ; Test and set bits $02F6.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0341.w		; 0C 41 03 ; Test and set bits $0341.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0343.w		; 0C 43 03 ; Test and set bits $0343.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $034C.w		; 0C 4C 03 ; Test and set bits $034C.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0001.w		; 09 01 00 ; Logical OR #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EF.b		; 85 EF ; Store accumulator to $EF.b [Reads: Accumulator]
	.db $80, $16		; 80 16 ; Branch always to $80, $16 [Flow: branch]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0003.w		; 09 03 00 ; Logical OR #$0003.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EF.b		; 85 EF ; Store accumulator to $EF.b [Reads: Accumulator]
	.db $80, $0A		; 80 0A ; Branch always to $80, $0A [Flow: branch]
	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0002.w		; 09 02 00 ; Logical OR #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EF.b		; 85 EF ; Store accumulator to $EF.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $62.b		; 85 62 ; Store accumulator to $62.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $EF.b		; A5 EF ; Load $EF.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$0002.w		; 09 02 00 ; Logical OR #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $EF.b		; 85 EF ; Store accumulator to $EF.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0001.w		; 29 01 00 ; Logical AND #$0001.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $62.b		; 85 62 ; Store accumulator to $62.b [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0359.w		; 0C 59 03 ; Test and set bits $0359.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $00.b		; 04 00 ; Test and set bits $00.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $80.b		; 00 80 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $DD21.w,Y		; B9 21 DD ; Load $DD21.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $5F.b		; 04 5F ; Test and set bits $5F.b [Reads: Accumulator] [Flags: Z]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	jsr $DDE5.w		; 20 E5 DD ; Jump to subroutine at $DDE5.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0341.w		; 0C 41 03 ; Test and set bits $0341.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $DDE5.w		; 20 E5 DD ; Jump to subroutine at $DDE5.w [Writes: Stack Pointer] [Flow: call]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0058.w		; E9 58 00 ; Subtract #$0058.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $06E0.w,X		; BD E0 06 ; Load $06E0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$8000.w		; C9 00 80 ; Compare #$8000.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $16		; 90 16 ; Branch if carry clear to $90, $16 [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $02E7.w		; 0C E7 02 ; Test and set bits $02E7.w [Reads: Accumulator] [Flags: Z]
	and #$0020.w		; 29 20 00 ; Logical AND #$0020.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02EA.w		; 8D EA 02 ; Store accumulator to $02EA.w [Reads: Accumulator]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $02E5.w		; 0C E5 02 ; Test and set bits $02E5.w [Reads: Accumulator] [Flags: Z]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $02		; 80 02 ; Branch always to $80, $02 [Flow: branch]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $58.b		; 04 58 ; Test and set bits $58.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $02C0.w		; 0C C0 02 ; Test and set bits $02C0.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0FFC.w		; AD FC 0F ; Load $0FFC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0080.w		; 29 80 00 ; Logical AND #$0080.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsb $02E7.w		; 0C E7 02 ; Test and set bits $02E7.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0FFC.w		; AD FC 0F ; Load $0FFC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $11		; D0 11 ; Branch if not equal to $D0, $11 [Flow: branch]
	lda $0403.w		; AD 03 04 ; Load $0403.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$0080.w		; 29 80 00 ; Logical AND #$0080.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $09		; D0 09 ; Branch if not equal to $D0, $09 [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $02EE.w		; 0C EE 02 ; Test and set bits $02EE.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $02F6.w		; 0C F6 02 ; Test and set bits $02F6.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $02F6.w		; 0C F6 02 ; Test and set bits $02F6.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $BD.b		; A6 BD ; Load $BD.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $7F2040.l,X		; BF 40 20 7F ; Load long $7F2040.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0060.w		; C9 60 00 ; Compare #$0060.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsb $02F6.w		; 0C F6 02 ; Test and set bits $02F6.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $02F6.w		; 0C F6 02 ; Test and set bits $02F6.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	tsb $02F6.w		; 0C F6 02 ; Test and set bits $02F6.w [Reads: Accumulator] [Flags: Z]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $02E7.w		; 0C E7 02 ; Test and set bits $02E7.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $80, $0C		; 80 0C ; Branch always to $80, $0C [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $03F1.w		; 0C F1 03 ; Test and set bits $03F1.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsr $DDE5.w		; 20 E5 DD ; Jump to subroutine at $DDE5.w [Writes: Stack Pointer] [Flow: call]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	.db $82, $46, $FF		; 82 46 FF ; Branch always long to $82, $46, $FF [Flow: branch]
	jsr $DD0A.w		; 20 0A DD ; Jump to subroutine at $DD0A.w [Writes: Stack Pointer] [Flow: call]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	tsb $02EE.w		; 0C EE 02 ; Test and set bits $02EE.w [Reads: Accumulator] [Flags: Z]
	stz $62.b		; 64 62 ; Store zero to $62.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0343.w		; 0C 43 03 ; Test and set bits $0343.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0357.w		; 0C 57 03 ; Test and set bits $0357.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $035B.w		; 0C 5B 03 ; Test and set bits $035B.w [Reads: Accumulator] [Flags: Z]
	tsb $0343.w		; 0C 43 03 ; Test and set bits $0343.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	mvn $52,$00		; 54 00 52 ; Move block negative $52,$00 [Reads: Y Index, Accumulator, X Index] [Writes: Y Index, Accumulator, X Index]
	brk $50.b		; 00 50 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $51.b		; 00 51 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $53.b		; 00 53 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $55.b		; 00 55 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $56.b		; 00 56 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A2.b		; 00 A2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $A500.w		; 0C 00 A5 ; Test and set bits $A500.w [Reads: Accumulator] [Flags: Z]
	asl $DD.b		; 06 DD ; Arithmetic shift left $DD.b [Reads: Direct Page] [Flags: NCZ]
	.db $70, $DE		; 70 DE ; Branch if overflow set to $70, $DE [Flow: branch]
	.db $D0, $20		; D0 20 ; Branch if not equal to $D0, $20 [Flow: branch]
	cmp #$0050.w		; C9 50 00 ; Compare #$0050.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	cmp #$0051.w		; C9 51 00 ; Compare #$0051.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $02EE.w		; 0C EE 02 ; Test and set bits $02EE.w [Reads: Accumulator] [Flags: Z]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0366.w		; 0C 66 03 ; Test and set bits $0366.w [Reads: Accumulator] [Flags: Z]
	stx $036A.w		; 8E 6A 03 ; Store X register to $036A.w [Reads: X Index]
	jsr $DDE1.w		; 20 E1 DD ; Jump to subroutine at $DDE1.w [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $D5		; 10 D5 ; Branch if plus to $10, $D5 [Flow: branch]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $036D.w		; 0C 6D 03 ; Test and set bits $036D.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $036D.w		; 0C 6D 03 ; Test and set bits $036D.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $036E.w		; 0C 6E 03 ; Test and set bits $036E.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $036E.w		; 0C 6E 03 ; Test and set bits $036E.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $036F.w		; 0C 6F 03 ; Test and set bits $036F.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0370.w		; 0C 70 03 ; Test and set bits $0370.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $76.b		; 85 76 ; Store accumulator to $76.b [Reads: Accumulator]
	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0370.w		; 0C 70 03 ; Test and set bits $0370.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $0357.w		; 0C 57 03 ; Test and set bits $0357.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $02E7.w		; 0C E7 02 ; Test and set bits $02E7.w [Reads: Accumulator] [Flags: Z]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $02EE.w		; 0C EE 02 ; Test and set bits $02EE.w [Reads: Accumulator] [Flags: Z]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0A.b		; A5 0A ; Load $0A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tsb $0E.b		; 04 0E ; Test and set bits $0E.b [Reads: Accumulator] [Flags: Z]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $02EE.w		; 0C EE 02 ; Test and set bits $02EE.w [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $00.b		; 02 00 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FFF8.w		; 29 F8 FF ; Logical AND #$FFF8.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$003F.w		; 29 3F 00 ; Logical AND #$003F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $06.b		; 65 06 ; Add $06.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldx $EE.b		; A6 EE ; Load $EE.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$1000.w		; 69 00 10 ; Add #$1000.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
.INDEX 16
	rep #$10		; C2 10
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $7F2000.l,X		; BF 00 20 7F ; Load long $7F2000.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $DF26.w,X		; BD 26 DF ; Load $DF26.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora [$06.b]		; 07 06 ; OR accumulator with memory (long) [$06.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $04.b		; 05 04 ; Logical OR $04.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $03.b		; 02 03 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $05.b		; 04 05 ; Test and set bits $05.b [Reads: Accumulator] [Flags: Z]
	asl $07.b		; 06 07 ; Arithmetic shift left $07.b [Reads: Direct Page] [Flags: NCZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	eor ($29.b),Y		; 51 29 ; Exclusive OR accumulator with memory ($29.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora [$85.b]		; 07 85 ; OR accumulator with memory (long) [$85.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	brk $A4.b		; 00 A4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	jsl $290CA5.l		; 22 A5 0C 29 ; Jump to subroutine long $290CA5.l [Writes: Stack Pointer] [Flow: call]
	tsb $F0.b		; 04 F0 ; Test and set bits $F0.b [Reads: Accumulator] [Flags: Z]
	ora ($88.b,X)		; 01 88 ; Logical OR ($88.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $6E.b		; A5 6E ; Load $6E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$1807.w		; 29 07 18 ; Logical AND #$1807.w with accumulator [Writes: Accumulator] [Flags: NZ]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $38.b		; A5 38 ; Load $38.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F005.w		; 29 05 F0 ; Logical AND #$F005.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and $51A5.w		; 2D A5 51 ; Logical AND $51A5.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and #$8507.w		; 29 07 85 ; Logical AND #$8507.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cop $A5.b		; 02 A5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ror $0229.w		; 6E 29 02 ; Rotate right $0229.w [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$3808.w		; A9 08 38 ; Load #$3808.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$8508.w		; 69 08 85 ; Add #$8508.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cop $BD.b		; 02 BD ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	eor ($E0.b)		; 52 E0 ; Exclusive OR accumulator with memory (indirect) ($E0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldy $30.b		; A4 30 ; Load $30.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $55		; F0 55 ; Branch if equal to $F0, $55 [Flow: branch]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$1AFF.w		; 49 FF 1A ; Exclusive OR #$1AFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $E052.w,X		; BD 52 E0 ; Load $E052.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $30.b		; A5 30 ; Load $30.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	.db $30, $38		; 30 38 ; Branch if minus to $30, $38 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $24		; 10 24 ; Branch if plus to $10, $24 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $20.b		; 65 20 ; Add $20.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $6B.b		; 85 6B ; Store accumulator to $6B.b [Reads: Accumulator]
	ldy #$A502.w		; A0 02 A5 ; Load #$A502.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $0429.w		; 0C 29 04 ; Test and set bits $0429.w [Reads: Accumulator] [Flags: Z]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$B903.w		; A0 03 B9 ; Load #$B903.w into Y register [Writes: Y Index] [Flags: NZ]
	adc ($E0.b)		; 72 E0 ; Add with carry (indirect) ($E0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora #$10.b		; 09 10 ; Logical OR #$10.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $6B.b		; 04 6B ; Test and set bits $6B.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldy $6E.b		; A4 6E ; Load $6E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpy #$D006.w		; C0 06 D0 ; Compare #$D006.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora ($3A.b,X)		; 01 3A ; Logical OR ($3A.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$A500.w		; A2 00 A5 ; Load #$A500.w into X register [Writes: X Index] [Flags: NZ]
	tsb $0429.w		; 0C 29 04 ; Test and set bits $0429.w [Reads: Accumulator] [Flags: Z]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$A502.w		; A2 02 A5 ; Load #$A502.w into X register [Writes: X Index] [Flags: NZ]
	ror $0A0A.w		; 6E 0A 0A ; Rotate right $0A0A.w [Flags: NCZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $51.b,X		; B5 51 ; Load $51.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $01.b		; 65 01 ; Add $01.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $38.b		; A5 38 ; Load $38.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$05.b		; 29 05 ; Logical AND #$05.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $34		; F0 34 ; Branch if equal to $F0, $34 [Flow: branch]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$07.b		; 29 07 ; Logical AND #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy $6E.b		; A4 6E ; Load $6E.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	cpy #$F004.w		; C0 04 F0 ; Compare #$F004.w with Y register [Reads: Y Index] [Flags: NCZ]
	ora $F006C0.l		; 0F C0 06 F0 ; OR accumulator with memory (long) $F006C0.l [Writes: Accumulator] [Flags: NZ]
	phd		; 0B ; Push direct page register  [Reads: Direct Page] [Writes: Stack Pointer]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$07.b		; 49 07 ; Exclusive OR #$07.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $80, $0E		; 80 0E ; Branch always to $80, $0E [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$08.b		; E9 08 ; Subtract #$08.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $E052.w,X		; BD 52 E0 ; Load $E052.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $02.b		; E5 02 ; Subtract $02.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ldy $31.b		; A4 31 ; Load $31.b into Y register [Reads: Direct Page] [Writes: Y Index] [Flags: NZ]
	.db $F0, $55		; F0 55 ; Branch if equal to $F0, $55 [Flow: branch]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $E052.w,X		; BD 52 E0 ; Load $E052.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $31.b		; A5 31 ; Load $31.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $40		; F0 40 ; Branch if equal to $F0, $40 [Flow: branch]
	.db $10, $16		; 10 16 ; Branch if plus to $10, $16 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $3A		; F0 3A ; Branch if equal to $F0, $3A [Flow: branch]
	.db $30, $38		; 30 38 ; Branch if minus to $30, $38 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $10, $24		; 10 24 ; Branch if plus to $10, $24 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$FF00.w		; 09 00 FF ; Logical OR #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $22.b		; 65 22 ; Add $22.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $6B.b		; 85 6B ; Store accumulator to $6B.b [Reads: Accumulator]
	ldy #$A500.w		; A0 00 A5 ; Load #$A500.w into Y register [Writes: Y Index] [Flags: NZ]
	ror $0229.w		; 6E 29 02 ; Rotate right $0229.w [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldy #$B901.w		; A0 01 B9 ; Load #$B901.w into Y register [Writes: Y Index] [Flags: NZ]
	adc ($E0.b)		; 72 E0 ; Add with carry (indirect) ($E0.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	ora #$20.b		; 09 20 ; Logical OR #$20.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $6B.b		; 04 6B ; Test and set bits $6B.b [Reads: Accumulator] [Flags: Z]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $67.b		; 64 67 ; Store zero to $67.b
	ldy #$A508.w		; A0 08 A5 ; Load #$A508.w into Y register [Writes: Y Index] [Flags: NZ]
	and [$F0.b]		; 27 F0 ; AND accumulator with memory (long) [$F0.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora [$30.b]		; 07 30 ; OR accumulator with memory (long) [$30.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $A0.b		; 02 A0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $20.b		; 04 20 ; Test and set bits $20.b [Reads: Accumulator] [Flags: Z]
	cmp [$E1.b],Y		; D7 E1 ; Compare accumulator (long indexed) [$E1.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	ldy #$A502.w		; A0 02 A5 ; Load #$A502.w into Y register [Writes: Y Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$9801.w		; A0 01 98 ; Load #$9801.w into Y register [Writes: Y Index] [Flags: NZ]
	ora $67.b		; 05 67 ; Logical OR $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	lda $6B.b		; A5 6B ; Load $6B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $14		; F0 14 ; Branch if equal to $F0, $14 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda $27.b		; A5 27 ; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $26.b		; A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	stz $28.b		; 64 28 ; Store zero to $28.b
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	lda $26.b		; A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	stz $27.b		; 64 27 ; Store zero to $27.b
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $0A		; 10 0A ; Branch if plus to $10, $0A [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $0C.b		; 04 0C ; Test and set bits $0C.b [Reads: Accumulator] [Flags: Z]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	ora $0D14.w,Y		; 19 14 0D ; OR accumulator with memory $0D14.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	rol A		; 2A ; Rotate left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $10, $08		; 10 08 ; Branch if plus to $10, $08 [Flow: branch]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	.db $30, $18		; 30 18 ; Branch if minus to $30, $18 [Flow: branch]
	jsr $F015.w		; 20 15 F0 ; Jump to subroutine at $F015.w [Writes: Stack Pointer] [Flow: call]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($8B.b,X)		; 01 8B ; Logical OR ($8B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda $10.b		; A5 10 ; Load $10.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $0B7B.w		; AD 7B 0B ; Load $0B7B.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1B		; F0 1B ; Branch if equal to $F0, $1B [Flow: branch]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $3E.b		; 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	sta $41.b		; 85 41 ; Store accumulator to $41.b [Reads: Accumulator]
	.db $82, $6C, $01		; 82 6C 01 ; Branch always long to $82, $6C, $01 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	.db $80, $40		; 80 40 ; Branch always to $80, $40 [Flow: branch]
	.db $82, $9D, $01		; 82 9D 01 ; Branch always long to $82, $9D, $01 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	stz $57.b		; 64 57 ; Store zero to $57.b
	lda $02F1.w		; AD F1 02 ; Load $02F1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	.db $82, $A7, $02		; 82 A7 02 ; Branch always long to $82, $A7, $02 [Flow: branch]
	lda $0316.w		; AD 16 03 ; Load $0316.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0317.w		; 0D 17 03 ; Logical OR $0317.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$0F.b		; C9 0F ; Compare #$0F.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $57, $01		; 82 57 01 ; Branch always long to $82, $57, $01 [Flow: branch]
	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0351.w		; AD 51 03 ; Load $0351.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldx #$8016.w		; A2 16 80 ; Load #$8016.w into X register [Writes: X Index] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ldx #$A50C.w		; A2 0C A5 ; Load #$A50C.w into X register [Writes: X Index] [Flags: NZ]
	lsr $0CC9.w,X		; 5E C9 0C ; Logical shift right $0CC9.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$860E.w		; A2 0E 86 ; Load #$860E.w into X register [Writes: X Index] [Flags: NZ]
	brk $64.b		; [PATTERN: Memory clearing operation] 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$64.b]		; 27 64 ; AND accumulator with memory (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	stz $68.b		; 64 68 ; Store zero to $68.b
	stz $69.b		; 64 69 ; Store zero to $69.b
	ldx #$A500.w		; A2 00 A5 ; Load #$A500.w into X register [Writes: X Index] [Flags: NZ]
	adc [$A8.b]		; 67 A8 ; Add with carry (long) [$A8.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$8A01.w		; A2 01 8A ; Load #$8A01.w into X register [Writes: X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $5B.b		; A5 5B ; Load $5B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $41		; D0 41 ; Branch if not equal to $D0, $41 [Flow: branch]
	lda $57.b		; A5 57 ; Load $57.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$30.b		; C9 30 ; Compare #$30.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $06		; B0 06 ; Branch if carry set to $B0, $06 [Flow: branch]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	.db $80, $35		; 80 35 ; Branch always to $80, $35 [Flow: branch]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $57.b		; 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	.db $80, $2F		; 80 2F ; Branch always to $80, $2F [Flow: branch]
	lda $57.b		; A5 57 ; Load $57.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2B		; F0 2B ; Branch if equal to $F0, $2B [Flow: branch]
	ldx #$A50A.w		; A2 0A A5 ; Load #$A50A.w into X register [Writes: X Index] [Flags: NZ]
	ora ($C9.b),Y		; 11 C9 ; OR accumulator with memory ($C9.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$A502.w		; A2 02 A5 ; Load #$A502.w into X register [Writes: X Index] [Flags: NZ]
	adc [$29.b]		; 67 29 ; Add with carry (long) [$29.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	brk $F0.b		; 00 F0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($E8.b,X)		; 01 E8 ; Logical OR ($E8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	lda $57.b		; A5 57 ; Load $57.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$10.b		; C9 10 ; Compare #$10.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $08		; B0 08 ; Branch if carry set to $B0, $08 [Flow: branch]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $57.b		; [PATTERN: Memory clearing operation] 85 57 ; Store accumulator to $57.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $07		; 80 07 ; Branch always to $80, $07 [Flow: branch]
	stz $57.b		; 64 57 ; Store zero to $57.b
	stz $5E.b		; 64 5E ; Store zero to $5E.b
	lda $E227.w,X		; BD 27 E2 ; Load $E227.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $57.b		; 65 57 ; Add $57.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	ldx #$A501.w		; A2 01 A5 ; Load #$A501.w into X register [Writes: X Index] [Flags: NZ]
	adc [$25.b]		; 67 25 ; Add with carry (long) [$25.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tsb $0FF0.w		; 0C F0 0F ; Test and set bits $0FF0.w [Reads: Accumulator] [Flags: Z]
	and $0D.b		; 25 0D ; Logical AND $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0A.b,X		; B5 0A ; Load $0A.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b,X		; 95 0A ; Store accumulator to $0A.b,X [Reads: Accumulator, X Index]
	lda $0A.b,X		; B5 0A ; Load $0A.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $27.b,X		; 95 27 ; Store accumulator to $27.b,X [Reads: Accumulator, X Index]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	asl $0D.b		; 06 0D ; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: NCZ]
	asl $0D.b		; 06 0D ; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $E0		; 10 E0 ; Branch if plus to $10, $E0 [Flow: branch]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $29.b		; 85 29 ; Store accumulator to $29.b [Reads: Accumulator]
	sta $24.b		; 85 24 ; Store accumulator to $24.b [Reads: Accumulator]
	sta $25.b		; 85 25 ; Store accumulator to $25.b [Reads: Accumulator]
	stz $2C.b		; 64 2C ; Store zero to $2C.b
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $3E.b		; 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	sta $41.b		; 85 41 ; Store accumulator to $41.b [Reads: Accumulator]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $02F5.w		; AD F5 02 ; Load $02F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $48		; F0 48 ; Branch if equal to $F0, $48 [Flow: branch]
	ldy #$A202.w		; A0 02 A2 ; Load #$A202.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $A5.b		; 04 A5 ; Test and set bits $A5.b [Reads: Accumulator] [Flags: Z]
	eor $04D0.w		; 4D D0 04 ; Exclusive OR $04D0.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$A201.w		; A0 01 A2 ; Load #$A201.w into Y register [Writes: Y Index] [Flags: NZ]
	cop $B9.b		; 02 B9 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$00.b]		; 27 00 ; AND accumulator with memory (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $002A.w,Y		; 79 2A 00 ; Add $002A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $002A.w,Y		; 99 2A 00 ; Store accumulator to $002A.w,Y [Reads: Y Index, Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $0027.w,Y		; B9 27 00 ; Load $0027.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$9000.w		; A0 00 90 ; Load #$9000.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	.db $F0, $A0		; F0 A0 ; Branch if equal to $F0, $A0 [Flow: branch]
	sbc $207528.l,X		; FF 28 75 20 ; Subtract with carry (long,X) $207528.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b,X		; 95 20 ; Store accumulator to $20.b,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $21.b,X		; 75 21 ; Add $21.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $21.b,X		; 95 21 ; Store accumulator to $21.b,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $CF		; 10 CF ; Branch if plus to $10, $CF [Flow: branch]
	jsr $E595.w		; 20 95 E5 ; Jump to subroutine at $E595.w [Writes: Stack Pointer] [Flow: call]
	jsr $E5F0.w		; 20 F0 E5 ; Jump to subroutine at $E5F0.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0B7E.w		; 6D 7E 0B ; Add $0B7E.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0B7C.w		; 6D 7C 0B ; Add $0B7C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $30.b		; 85 30 ; Store accumulator to $30.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $01.b		; E5 01 ; Subtract $01.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $31.b		; 85 31 ; Store accumulator to $31.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $F4.b		; 00 F4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $F0FFF8.l,X		; FF F8 FF F0 ; Subtract with carry (long,X) $F0FFF8.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FA0004.l,X		; FF 04 00 FA ; Subtract with carry (long,X) $FA0004.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FAFFF4.l,X		; FF F4 FF FA ; Subtract with carry (long,X) $FAFFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $F0000A.l,X		; FF 0A 00 F0 ; Subtract with carry (long,X) $F0000A.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FAFFF4.l,X		; FF F4 FF FA ; Subtract with carry (long,X) $FAFFF4.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FCFFF3.l,X		; FF F3 FF FC ; Subtract with carry (long,X) $FCFFF3.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $040008.l,X		; FF 08 00 04 ; Subtract with carry (long,X) $040008.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	brk $02.b		; 00 02 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $01.b		; 00 01 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	and [$64.b]		; 27 64 ; AND accumulator with memory (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
.ACCU 16
	rep #$20		; C2 20
	ldx #$7402.w		; A2 02 74 ; Load #$7402.w into X register [Writes: X Index] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	dec $0326.w,X		; DE 26 03 ; Decrement memory $0326.w,X [Reads: X Index] [Flags: NZ]
	.db $10, $09		; 10 09 ; Branch if plus to $10, $09 [Flow: branch]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $032B.w,X		; 9D 2B 03 ; Store accumulator to $032B.w,X [Reads: Accumulator, X Index]
	stz $0326.w,X		; 9E 26 03 ; Store zero to $0326.w,X [Reads: X Index]
	lda $032B.w,X		; BD 2B 03 ; Load $032B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0A		; F0 0A ; Branch if equal to $F0, $0A [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $E406.w,Y		; B9 06 E4 ; Load $E406.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $033C.w,X		; 7D 3C 03 ; Add $033C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	.db $10, $2A		; 10 2A ; Branch if plus to $10, $2A [Flow: branch]
	lda $E41E.w,X		; BD 1E E4 ; Load $E41E.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and $67.b		; 25 67 ; Logical AND $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	lda $032B.w,X		; BD 2B 03 ; Load $032B.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0002.w		; C9 02 00 ; Compare #$0002.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0E		; D0 0E ; Branch if not equal to $D0, $0E [Flow: branch]
	stz $032B.w,X		; 9E 2B 03 ; Store zero to $032B.w,X [Reads: X Index]
	lda $9639.w		; AD 39 96 ; Load $9639.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0334.w,X		; 9D 34 03 ; Store accumulator to $0334.w,X [Reads: Accumulator, X Index]
	lda #$0002.w		; A9 02 00 ; Load #$0002.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	lda #$0000.w		; A9 00 00 ; Load #$0000.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0334.w,X		; 9D 34 03 ; Store accumulator to $0334.w,X [Reads: Accumulator, X Index]
	sta $032B.w,X		; 9D 2B 03 ; Store accumulator to $032B.w,X [Reads: Accumulator, X Index]
	.db $80, $18		; 80 18 ; Branch always to $80, $18 [Flow: branch]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0338.w,X		; 7D 38 03 ; Add $0338.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $E422.w,Y		; B9 22 E4 ; Load $E422.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $67.b		; 05 67 ; Logical OR $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	cmp $0334.w,X		; DD 34 03 ; Compare accumulator $0334.w,X [Reads: X Index] [Flags: NCZ]
	.db $90, $03		; 90 03 ; Branch if carry clear to $90, $03 [Flow: branch]
	lda $0334.w,X		; BD 34 03 ; Load $0334.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $033C.w,X		; 9D 3C 03 ; Store accumulator to $033C.w,X [Reads: Accumulator, X Index]
	sta $08.b,X		; 95 08 ; Store accumulator to $08.b,X [Reads: Accumulator, X Index]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	lda $08.b,X		; B5 08 ; Load $08.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $08.b,X		; B5 08 ; Load $08.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $00.b		; E5 00 ; Subtract $00.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b,X		; 95 08 ; Store accumulator to $08.b,X [Reads: Accumulator, X Index]
	lda $0338.w,X		; BD 38 03 ; Load $0338.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	lda $08.b,X		; B5 08 ; Load $08.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $08.b,X		; 95 08 ; Store accumulator to $08.b,X [Reads: Accumulator, X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $30, $03		; 30 03 ; Branch if minus to $30, $03 [Flow: branch]
	.db $82, $5F, $FF		; 82 5F FF ; Branch always long to $82, $5F, $FF [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $3E.b		; 85 3E ; Store accumulator to $3E.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	sta $3F.b		; 85 3F ; Store accumulator to $3F.b [Reads: Accumulator]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	sta $41.b		; 85 41 ; Store accumulator to $41.b [Reads: Accumulator]
	ldy #$A201.w		; A0 01 A2 ; Load #$A201.w into Y register [Writes: Y Index] [Flags: NZ]
	cop $B5.b		; 02 B5 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $002A.w,Y		; 79 2A 00 ; Add $002A.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $002A.w,Y		; 99 2A 00 ; Store accumulator to $002A.w,Y [Reads: Y Index, Accumulator]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $09.b,X		; B5 09 ; Load $09.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	ldy #$9000.w		; A0 00 90 ; Load #$9000.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $09.b		; 04 09 ; Test and set bits $09.b [Reads: Accumulator] [Flags: Z]
	.db $F0, $A0		; F0 A0 ; Branch if equal to $F0, $A0 [Flow: branch]
	sbc $207528.l,X		; FF 28 75 20 ; Subtract with carry (long,X) $207528.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b,X		; 95 20 ; Store accumulator to $20.b,X [Reads: Accumulator, X Index]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	adc $21.b,X		; 75 21 ; Add $21.b,X to accumulator with carry [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $21.b,X		; 95 21 ; Store accumulator to $21.b,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $08.b,X		; B5 08 ; Load $08.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $08.b,X		; 95 08 ; Store accumulator to $08.b,X [Reads: Accumulator, X Index]
	lda $09.b,X		; B5 09 ; Load $09.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	ora $08.b,X		; 15 08 ; OR accumulator with memory $08.b,X [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $0027.w,Y		; 99 27 00 ; Store accumulator to $0027.w,Y [Reads: Y Index, Accumulator]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $C1		; 10 C1 ; Branch if plus to $10, $C1 [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; [PATTERN: Memory clearing operation] C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	jsr $E5CD.w		; 20 CD E5 ; Jump to subroutine at $E5CD.w [Writes: Stack Pointer] [Flow: call]
	stz $68.b		; 64 68 ; Store zero to $68.b
	stz $69.b		; 64 69 ; Store zero to $69.b
	.db $82, $9F, $FE		; 82 9F FE ; Branch always long to $82, $9F, $FE [Flow: branch]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $64.b		; 00 64 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($A5.b,X)		; 01 A5 ; Logical OR ($A5.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	.db $F0, $29		; F0 29 ; Branch if equal to $F0, $29 [Flow: branch]
	ora $A20FF0.l		; 0F F0 0F A2 ; OR accumulator with memory (long) $A20FF0.l [Writes: Accumulator] [Flags: NZ]
	.db $80, $AD		; 80 AD ; Branch always to $80, $AD [Flow: branch]
	eor ($03.b),Y		; 51 03 ; Exclusive OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$8650.w		; A2 50 86 ; Load #$8650.w into X register [Writes: X Index] [Flags: NZ]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($85.b,X)		; 01 85 ; Logical OR ($85.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($64.b,X)		; [PATTERN: Memory clearing operation] 01 64 ; Logical OR ($64.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	and [$64.b]		; 27 64 ; AND accumulator with memory (long) [$64.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	stz $08.b		; 64 08 ; Store zero to $08.b
	stz $09.b		; 64 09 ; Store zero to $09.b
	stz $0A.b		; [PATTERN: Memory clearing operation] 64 0A ; Store zero to $0A.b
	stz $0B.b		; 64 0B ; Store zero to $0B.b
	ldx #$A503.w		; A2 03 A5 ; Load #$A503.w into X register [Writes: X Index] [Flags: NZ]
	adc [$4A.b]		; 67 4A ; Add with carry (long) [$4A.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $B0, $05		; B0 05 ; Branch if carry set to $B0, $05 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $FA		; 10 FA ; Branch if plus to $10, $FA [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	txy		; 9B ; Transfer X to Y [Reads: X Index] [Writes: Y Index] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cpy #$F000.w		; C0 00 F0 ; Compare #$F000.w with Y register [Reads: Y Index] [Flags: NCZ]
	tsb $C0.b		; 04 C0 ; Test and set bits $C0.b [Reads: Accumulator] [Flags: Z]
	cop $D0.b		; 02 D0 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $49.b		; 04 49 ; Test and set bits $49.b [Reads: Accumulator] [Flags: Z]
	sbc $481AFF.l,X		; FF FF 1A 48 ; Subtract with carry (long,X) $481AFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $08.b,X		; 95 08 ; Store accumulator to $08.b,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	.db $82, $3E, $FF		; 82 3E FF ; Branch always long to $82, $3E, $FF [Flow: branch]
	lda $046C.w		; AD 6C 04 ; Load $046C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $49		; F0 49 ; Branch if equal to $F0, $49 [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $41		; D0 41 ; Branch if not equal to $D0, $41 [Flow: branch]
	lda $0322.w		; AD 22 03 ; Load $0322.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $38		; D0 38 ; Branch if not equal to $D0, $38 [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $32		; F0 32 ; Branch if equal to $F0, $32 [Flow: branch]
	ldy #$AD08.w		; A0 08 AD ; Load #$AD08.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$9804.w		; A0 04 98 ; Load #$9804.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $67.b		; 04 67 ; Test and set bits $67.b [Reads: Accumulator] [Flags: Z]
	ldy #$AD02.w		; A0 02 AD ; Load #$AD02.w into Y register [Writes: Y Index] [Flags: NZ]
	ora ($03.b)		; 12 03 ; OR accumulator with memory (indirect) ($03.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	.db $30, $02		; 30 02 ; Branch if minus to $30, $02 [Flow: branch]
	ldy #$9801.w		; A0 01 98 ; Load #$9801.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $67.b		; 04 67 ; Test and set bits $67.b [Reads: Accumulator] [Flags: Z]
	stz $6A.b		; 64 6A ; Store zero to $6A.b
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0310.w		; 6D 10 03 ; Add $0310.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0312.w		; 6D 12 03 ; Add $0312.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($F8.b,X)		; 01 F8 ; Logical OR ($F8.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sed		; F8 ; Set decimal flag [Flags: D]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $03F3.w		; AD F3 03 ; Load $03F3.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $EE		; F0 EE ; Branch if equal to $F0, $EE [Flow: branch]
	lda $24.b		; A5 24 ; Load $24.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $E6		; D0 E6 ; Branch if not equal to $D0, $E6 [Flow: branch]
	lda $0376.w		; AD 76 03 ; Load $0376.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $DF		; D0 DF ; Branch if not equal to $D0, $DF [Flow: branch]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $D9		; F0 D9 ; Branch if equal to $F0, $D9 [Flow: branch]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $D5		; D0 D5 ; Branch if not equal to $D0, $D5 [Flow: branch]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	lda $02F1.w		; AD F1 02 ; Load $02F1.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$20.b		; C9 20 ; Compare #$20.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	ldy $03F3.w		; AC F3 03 ; Load $03F3.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $E5E4.w,Y		; B9 E4 E5 ; Load $E5E4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and $67.b		; 25 67 ; Logical AND $67.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $BE		; D0 BE ; Branch if not equal to $D0, $BE [Flow: branch]
	stz $6A.b		; 64 6A ; Store zero to $6A.b
	ldy $03F3.w		; AC F3 03 ; Load $03F3.w into Y register [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $E5E4.w,Y		; B9 E4 E5 ; Load $E5E4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $67.b		; 04 67 ; Test and set bits $67.b [Reads: Accumulator] [Flags: Z]
	lda $E5E8.w,Y		; B9 E8 E5 ; Load $E5E8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $E5EC.w,Y		; B9 EC E5 ; Load $E5EC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	ldx #$A001.w		; A2 01 A0 ; Load #$A001.w into X register [Writes: X Index] [Flags: NZ]
	cop $DA.b		; 02 DA ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	lda $72.b,X		; B5 72 ; Load $72.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $041C.w,X		; 7D 1C 04 ; Add $041C.w,X to accumulator with carry [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $041C.w,X		; 9D 1C 04 ; Store accumulator to $041C.w,X [Reads: Accumulator, X Index]
	lda $72.b,X		; B5 72 ; Load $72.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ldx #$4A00.w		; A2 00 4A ; Load #$4A00.w into X register [Writes: X Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	adc $0020.w,Y		; 79 20 00 ; Add $0020.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0020.w,Y		; 99 20 00 ; Store accumulator to $0020.w,Y [Reads: Y Index, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $0021.w,Y		; 79 21 00 ; Add $0021.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0021.w,Y		; 99 21 00 ; Store accumulator to $0021.w,Y [Reads: Y Index, Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $D0		; 10 D0 ; Branch if plus to $10, $D0 [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	ora ($04.b,X)		; 01 04 ; Logical OR ($04.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	tsb $01.b		; 04 01 ; Test and set bits $01.b [Reads: Accumulator] [Flags: Z]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $08.b		; 02 08 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $48, $01		; 82 48 01 ; Branch always long to $82, $48, $01 [Flow: branch]
	lda $26.b		; A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $D6, $00		; 82 D6 00 ; Branch always long to $82, $D6, $00 [Flow: branch]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3E		; D0 3E ; Branch if not equal to $D0, $3E [Flow: branch]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $15		; F0 15 ; Branch if equal to $F0, $15 [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$FC.b		; 29 FC ; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $E671.w,X		; 3D 71 E6 ; AND accumulator with memory $E671.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $25		; D0 25 ; Branch if not equal to $D0, $25 [Flow: branch]
	ldy #$A504.w		; A0 04 A5 ; Load #$A504.w into Y register [Writes: Y Index] [Flags: NZ]
	brk $29.b		; 00 29 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02F0.w		; 0C F0 02 ; Test and set bits $02F0.w [Reads: Accumulator] [Flags: Z]
	ldy #$C000.w		; A0 00 C0 ; Load #$C000.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $F0.b		; 04 F0 ; Test and set bits $F0.b [Reads: Accumulator] [Flags: Z]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $08		; D0 08 ; Branch if not equal to $D0, $08 [Flow: branch]
	.db $80, $08		; 80 08 ; Branch always to $80, $08 [Flow: branch]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$01.b		; 29 01 ; Logical AND #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $2F.b		; 84 2F ; Store Y register to $2F.b [Reads: Y Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $0372.w		; AD 72 03 ; Load $0372.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	.db $82, $80, $01		; 82 80 01 ; Branch always long to $82, $80, $01 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0B		; F0 0B ; Branch if equal to $F0, $0B [Flow: branch]
	lda $F0.b		; A5 F0 ; Load $F0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $60		; F0 60 ; Branch if equal to $F0, $60 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$04.b		; 69 04 ; Add #$04.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$17.b		; C9 17 ; Compare #$17.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	.db $82, $95, $00		; 82 95 00 ; Branch always long to $82, $95, $00 [Flow: branch]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$0E.b		; C9 0E ; Compare #$0E.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $26		; F0 26 ; Branch if equal to $F0, $26 [Flow: branch]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$13.b		; C9 13 ; Compare #$13.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	ldx #$800C.w		; A2 0C 80 ; Load #$800C.w into X register [Writes: X Index] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $13		; D0 13 ; Branch if not equal to $D0, $13 [Flow: branch]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$8D.b		; 29 8D ; Logical AND #$8D.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	ldx #$800C.w		; A2 0C 80 ; Load #$800C.w into X register [Writes: X Index] [Flags: NZ]
	ora #$AD.b		; 09 AD ; Logical OR #$AD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	eor ($03.b),Y		; 51 03 ; Exclusive OR accumulator with memory ($03.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $2C		; F0 2C ; Branch if equal to $F0, $2C [Flow: branch]
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $20		; B0 20 ; Branch if carry set to $B0, $20 [Flow: branch]
	lda $02F5.w		; AD F5 02 ; Load $02F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	lda $E675.w,X		; BD 75 E6 ; Load $E675.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $2D.b		; A5 2D ; Load $2D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	stz $2D.b		; 64 2D ; Store zero to $2D.b
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2E.b		; 85 2E ; Store accumulator to $2E.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx $2E.b		; A6 2E ; Load $2E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $5E.b		; A5 5E ; Load $5E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $034A.w		; AD 4A 03 ; Load $034A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $02F5.w		; AD F5 02 ; Load $02F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $49		; F0 49 ; Branch if equal to $F0, $49 [Flow: branch]
	lda $E685.w,X		; BD 85 E6 ; Load $E685.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $2D.b		; A5 2D ; Load $2D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	stz $2D.b		; 64 2D ; Store zero to $2D.b
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2E.b		; 85 2E ; Store accumulator to $2E.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $20		; B0 20 ; Branch if carry set to $B0, $20 [Flow: branch]
	lda $02F5.w		; AD F5 02 ; Load $02F5.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	lda $E675.w,X		; BD 75 E6 ; Load $E675.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $2D.b		; A5 2D ; Load $2D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	stz $2D.b		; 64 2D ; Store zero to $2D.b
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2E.b		; 85 2E ; Store accumulator to $2E.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $41		; F0 41 ; Branch if equal to $F0, $41 [Flow: branch]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $3D		; D0 3D ; Branch if not equal to $D0, $3D [Flow: branch]
	lda $6A.b		; A5 6A ; Load $6A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	and #$FC.b		; 29 FC ; Logical AND #$FC.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $80, $17		; 80 17 ; Branch always to $80, $17 [Flow: branch]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $0340.w		; AD 40 03 ; Load $0340.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and $E671.w,X		; 3D 71 E6 ; AND accumulator with memory $E671.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $23		; D0 23 ; Branch if not equal to $D0, $23 [Flow: branch]
	ldy #$AD04.w		; A0 04 AD ; Load #$AD04.w into Y register [Writes: Y Index] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora $29.b,S		; 03 29 ; OR accumulator with stack relative $29.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $02F0.w		; 0C F0 02 ; Test and set bits $02F0.w [Reads: Accumulator] [Flags: Z]
	ldy #$C000.w		; A0 00 C0 ; Load #$C000.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $F0.b		; 04 F0 ; Test and set bits $F0.b [Reads: Accumulator] [Flags: Z]
	ora #$AD.b		; 09 AD ; Logical OR #$AD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora $29.b,S		; 03 29 ; OR accumulator with stack relative $29.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	tsb $D0.b		; 04 D0 ; Test and set bits $D0.b [Reads: Accumulator] [Flags: Z]
	ora #$80.b		; 09 80 ; Logical OR #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$AD.b		; 09 AD ; Logical OR #$AD.b with accumulator [Writes: Accumulator] [Flags: NZ]
	rti		; 40 ; Return from interrupt [Reads: Stack Pointer] [Writes: Stack Pointer] [Flags: MXCZIDVN] [Flow: return]

	ora $29.b,S		; 03 29 ; OR accumulator with stack relative $29.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $C8.b		; 02 C8 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	sty $2F.b		; 84 2F ; Store Y register to $2F.b [Reads: Y Index]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $03.b,S		; 03 03 ; OR accumulator with stack relative $03.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora $03.b		; 05 03 ; Logical OR $03.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	tsb $02.b		; 04 02 ; Test and set bits $02.b [Reads: Accumulator] [Flags: Z]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora $02.b,S		; 03 02 ; OR accumulator with stack relative $02.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora ($01.b,X)		; 01 01 ; Logical OR ($01.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($00.b,X)		; 01 00 ; Logical OR ($00.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $02.b		; 02 02 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cop $30.b		; 02 30 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	bit $18.b		; 24 18 ; Test bits $18.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NVZ]
	.db $10, $0C		; 10 0C ; Branch if plus to $10, $0C [Flow: branch]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	tsb $04.b		; 04 04 ; Test and set bits $04.b [Reads: Accumulator] [Flags: Z]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tsb $100E.w		; 0C 0E 10 ; Test and set bits $100E.w [Reads: Accumulator] [Flags: Z]
	ldx #$AD06.w		; A2 06 AD ; Load #$AD06.w into X register [Writes: X Index] [Flags: NZ]
	stz $03.b,X		; 74 03 ; Store zero to $03.b,X [Reads: X Index]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $0374.w		; AD 74 03 ; Load $0374.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $E881.w,X		; DD 81 E8 ; Compare accumulator $E881.w,X [Reads: X Index] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F5		; 10 F5 ; Branch if plus to $10, $F5 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $3C.b		; A5 3C ; Load $3C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $29		; B0 29 ; Branch if carry set to $B0, $29 [Flow: branch]
	lda $0351.w		; AD 51 03 ; Load $0351.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $24		; D0 24 ; Branch if not equal to $D0, $24 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $E842.w,X		; BD 42 E8 ; Load $E842.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $2D.b		; A5 2D ; Load $2D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	stz $2D.b		; 64 2D ; Store zero to $2D.b
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	.db $80, $1D		; 80 1D ; Branch always to $80, $1D [Flow: branch]
	lda $E87A.w,X		; BD 7A E8 ; Load $E87A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $2D.b		; A5 2D ; Load $2D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$01.b		; 69 01 ; Add #$01.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $2D.b		; 85 2D ; Store accumulator to $2D.b [Reads: Accumulator]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $0D		; 90 0D ; Branch if carry clear to $90, $0D [Flow: branch]
	stz $2D.b		; 64 2D ; Store zero to $2D.b
	lda $2E.b		; A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	cmp #$06.b		; C9 06 ; Compare #$06.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2E.b		; 85 2E ; Store accumulator to $2E.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	lda $6C.b		; A5 6C ; Load $6C.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jmp $07E901.l		; [PATTERN: Memory clearing operation] 5C 01 E9 07 ; Jump long to $07E901.l [Flow: jump]
	jsl $07E9D3.l		; 22 D3 E9 07 ; Jump to subroutine long $07E9D3.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $68.b		; 64 68 ; Store zero to $68.b
	stz $69.b		; 64 69 ; Store zero to $69.b
	lda $26.b		; A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$0C.b		; 29 0C ; Logical AND #$0C.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	ldx $6C.b		; A6 6C ; Load $6C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$D001.w		; E0 01 D0 ; Compare #$D001.w with X register [Reads: X Index] [Flags: NCZ]
	and ($29.b),Y		; 31 29 ; AND accumulator with memory ($29.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	tsb $F0.b		; 04 F0 ; Test and set bits $F0.b [Reads: Accumulator] [Flags: Z]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$001C.w		; 69 1C 00 ; Add #$001C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	and #$00FC.w		; 29 FC 00 ; Logical AND #$00FC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $40.b		; E5 40 ; Subtract $40.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $68.b		; 85 68 ; Store accumulator to $68.b [Reads: Accumulator]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0012.w		; E9 12 00 ; Subtract #$0012.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $40.b		; E5 40 ; Subtract $40.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $68.b		; 85 68 ; Store accumulator to $68.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $26.b		; A5 26 ; Load $26.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$03.b		; 29 03 ; Logical AND #$03.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $37		; F0 37 ; Branch if equal to $F0, $37 [Flow: branch]
	ldx $6C.b		; A6 6C ; Load $6C.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	cpx #$D002.w		; E0 02 D0 ; Compare #$D002.w with X register [Reads: X Index] [Flags: NCZ]
	and ($29.b),Y		; 31 29 ; AND accumulator with memory ($29.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora ($F0.b,X)		; 01 F0 ; Logical OR ($F0.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0015.w		; 69 15 00 ; Add #$0015.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	and #$00FC.w		; 29 FC 00 ; Logical AND #$00FC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $1E		; D0 1E ; Branch if not equal to $D0, $1E [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $41.b		; E5 41 ; Subtract $41.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $69.b		; 85 69 ; Store accumulator to $69.b [Reads: Accumulator]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$0008.w		; E9 08 00 ; Subtract #$0008.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $41.b		; E5 41 ; Subtract $41.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $69.b		; 85 69 ; Store accumulator to $69.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $69.b		; [PATTERN: Memory clearing operation] A5 69 ; Load $69.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $24		; F0 24 ; Branch if equal to $F0, $24 [Flow: branch]
	.db $30, $11		; 30 11 ; Branch if minus to $30, $11 [Flow: branch]
	stz $030B.w		; 9C 0B 03 ; Store zero to $030B.w
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; [PATTERN: Memory clearing operation] 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	jsl $02B62E.l		; 22 2E B6 02 ; Jump to subroutine long $02B62E.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $030B.w		; 9C 0B 03 ; Store zero to $030B.w
	stz $0308.w		; [PATTERN: Memory clearing operation] 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	jsl $02B6CD.l		; 22 CD B6 02 ; Jump to subroutine long $02B6CD.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $68.b		; [PATTERN: Memory clearing operation] A5 68 ; Load $68.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $23		; F0 23 ; Branch if equal to $F0, $23 [Flow: branch]
	.db $10, $11		; 10 11 ; Branch if plus to $10, $11 [Flow: branch]
	stz $030B.w		; 9C 0B 03 ; Store zero to $030B.w
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; [PATTERN: Memory clearing operation] 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	jsl $02B81C.l		; 22 1C B8 02 ; Jump to subroutine long $02B81C.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $030B.w		; 9C 0B 03 ; Store zero to $030B.w
	stz $0308.w		; [PATTERN: Memory clearing operation] 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	jsl $02B76E.l		; 22 6E B7 02 ; Jump to subroutine long $02B76E.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $40.b		; E5 40 ; Subtract $40.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $68.b		; 85 68 ; Store accumulator to $68.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $41.b		; E5 41 ; Subtract $41.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $69.b		; 85 69 ; Store accumulator to $69.b [Reads: Accumulator]
	lda $69.b		; A5 69 ; Load $69.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	.db $30, $06		; 30 06 ; Branch if minus to $30, $06 [Flow: branch]
	jsl $02B8BD.l		; 22 BD B8 02 ; Jump to subroutine long $02B8BD.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $04		; 80 04 ; Branch always to $80, $04 [Flow: branch]
	jsl $02B8F9.l		; 22 F9 B8 02 ; Jump to subroutine long $02B8F9.l [Writes: Stack Pointer] [Flow: call]
	lda $68.b		; A5 68 ; Load $68.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	.db $10, $06		; 10 06 ; Branch if plus to $10, $06 [Flow: branch]
	jsl $02B919.l		; 22 19 B9 02 ; Jump to subroutine long $02B919.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $02B909.l		; 22 09 B9 02 ; Jump to subroutine long $02B909.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	jsl $02C7B8.l		; 22 B8 C7 02 ; Jump to subroutine long $02C7B8.l [Writes: Stack Pointer] [Flow: call]
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda #$0026.w		; A9 26 00 ; Load #$0026.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $067C.w		; 8D 7C 06 ; Store accumulator to $067C.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	stz $067E.w		; 9C 7E 06 ; Store zero to $067E.w
	jsl $07EA27.l		; 22 27 EA 07 ; Jump to subroutine long $07EA27.l [Writes: Stack Pointer] [Flow: call]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	asl $16.b,X		; 16 16 ; Arithmetic shift left $16.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	asl $40.b,X		; 16 40 ; Arithmetic shift left $40.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	ora ($8B.b,X)		; 01 8B ; Logical OR ($8B.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	stz $04.b		; 64 04 ; Store zero to $04.b
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$000C.w		; 69 0C 00 ; Add #$000C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $067C.w		; ED 7C 06 ; Subtract $067C.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	sta $0674.w		; 8D 74 06 ; Store accumulator to $0674.w [Reads: Accumulator]
	.db $10, $02		; 10 02 ; Branch if plus to $10, $02 [Flow: branch]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $067C.w		; 6D 7C 06 ; Add $067C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $067C.w		; 6D 7C 06 ; Add $067C.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0676.w		; 8D 76 06 ; Store accumulator to $0676.w [Reads: Accumulator]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0008.w		; 69 08 00 ; Add #$0008.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $0670.w		; 8D 70 06 ; Store accumulator to $0670.w [Reads: Accumulator]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $067A.w		; 8D 7A 06 ; Store accumulator to $067A.w [Reads: Accumulator]
	lda #$0100.w		; A9 00 01 ; Load #$0100.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0674.w		; AD 74 06 ; Load $0674.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $0C		; 30 0C ; Branch if minus to $30, $0C [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0674.w		; CD 74 06 ; Compare $0674.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $51		; 90 51 ; Branch if carry clear to $90, $51 [Flow: branch]
	cmp $0676.w		; CD 76 06 ; Compare $0676.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $4C		; B0 4C ; Branch if carry set to $B0, $4C [Flow: branch]
	lda $067C.w		; AD 7C 06 ; Load $067C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $067A.w		; CD 7A 06 ; Compare $067A.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $16		; B0 16 ; Branch if carry set to $B0, $16 [Flow: branch]
	lda #$0001.w		; A9 01 00 ; Load #$0001.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $067A.w		; 8D 7A 06 ; Store accumulator to $067A.w [Reads: Accumulator]
	stz $0674.w		; 9C 74 06 ; Store zero to $0674.w
	lda $0676.w		; AD 76 06 ; Load $0676.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	cmp #$00E1.w		; C9 E1 00 ; Compare #$00E1.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $31		; 90 31 ; Branch if carry clear to $90, $31 [Flow: branch]
	.db $82, $C0, $00		; 82 C0 00 ; Branch always long to $82, $C0, $00 [Flow: branch]
	jsr $ECDC.w		; 20 DC EC ; Jump to subroutine at $ECDC.w [Writes: Stack Pointer] [Flow: call]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	stz $0674.w		; 9C 74 06 ; Store zero to $0674.w
	.db $80, $10		; 80 10 ; Branch always to $80, $10 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0670.w		; 6D 70 06 ; Add $0670.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $0670.w		; AD 70 06 ; Load $0670.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $08.b		; E5 08 ; Subtract $08.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $067A.w		; AD 7A 06 ; Load $067A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0A.b		; E5 0A ; Subtract $0A.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	.db $30, $0F		; 30 0F ; Branch if minus to $30, $0F [Flow: branch]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	cmp #$0100.w		; C9 00 01 ; Compare #$0100.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	ldy #$00FF.w		; A0 FF 00 ; Load #$00FF.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $0D		; F0 0D ; Branch if equal to $F0, $0D [Flow: branch]
	and #$FF00.w		; 29 00 FF ; Logical AND #$FF00.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $05		; F0 05 ; Branch if equal to $F0, $05 [Flow: branch]
	ldy #$00FF.w		; A0 FF 00 ; Load #$00FF.w into Y register [Writes: Y Index] [Flags: NZ]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	ldy #$0000.w		; A0 00 00 ; Load #$0000.w into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	ora $06.b		; 05 06 ; Logical OR $06.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	cpx #$01C0.w		; E0 C0 01 ; Compare #$01C0.w with X register [Reads: X Index] [Flags: NCZ]
	.db $B0, $0B		; B0 0B ; Branch if carry set to $B0, $0B [Flow: branch]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,X		; 9D 00 1B ; Store accumulator to $1B00.w,X [Reads: Accumulator, X Index]
	lda $0674.w		; AD 74 06 ; Load $0674.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $0C		; 30 0C ; Branch if minus to $30, $0C [Flow: branch]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $0674.w		; CD 74 06 ; Compare $0674.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $28		; 90 28 ; Branch if carry clear to $90, $28 [Flow: branch]
	cmp $0676.w		; CD 76 06 ; Compare $0676.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $23		; B0 23 ; Branch if carry set to $B0, $23 [Flow: branch]
	lda $067A.w		; AD 7A 06 ; Load $067A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $0E.b		; 65 0E ; Add $0E.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$01C0.w		; C9 C0 01 ; Compare #$01C0.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $0E		; B0 0E ; Branch if carry set to $B0, $0E [Flow: branch]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $06.b		; A5 06 ; Load $06.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$FFFF.w		; C9 FF FF ; Compare #$FFFF.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	lda #$00FF.w		; A9 FF 00 ; Load #$00FF.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $1B00.w,X		; 9D 00 1B ; Store accumulator to $1B00.w,X [Reads: Accumulator, X Index]
	inc $067A.w		; EE 7A 06 ; Increment $067A.w [Flags: NZ]
	inc $04.b		; E6 04 ; Increment $04.b [Reads: Direct Page] [Flags: NZ]
	lda $04.b		; A5 04 ; Load $04.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $30, $05		; 30 05 ; Branch if minus to $30, $05 [Flow: branch]
	cmp #$00E1.w		; C9 E1 00 ; Compare #$00E1.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $03		; B0 03 ; Branch if carry set to $B0, $03 [Flow: branch]
	.db $82, $0A, $FF		; 82 0A FF ; Branch always long to $82, $0A, $FF [Flow: branch]
.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	lda $B0.b		; A5 B0 ; Load $B0.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $79		; D0 79 ; Branch if not equal to $D0, $79 [Flow: branch]
	lda $067E.w		; AD 7E 06 ; Load $067E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$01.b		; C9 01 ; Compare #$01.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	lda $F4.b		; A5 F4 ; Load $F4.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $F6.b		; 05 F6 ; Logical OR $F6.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$C0.b		; 29 C0 ; Logical AND #$C0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $067E.w		; 8D 7E 06 ; Store accumulator to $067E.w [Reads: Accumulator]
	lsr $067C.w		; 4E 7C 06 ; Logical shift right $067C.w [Flags: NCZ]
	lda $067E.w		; AD 7E 06 ; Load $067E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $49		; F0 49 ; Branch if equal to $F0, $49 [Flow: branch]
	lda $067C.w		; AD 7C 06 ; Load $067C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$08.b		; 69 08 ; Add #$08.b to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $067C.w		; 8D 7C 06 ; Store accumulator to $067C.w [Reads: Accumulator]
	cmp #$C0.b		; C9 C0 ; Compare #$C0.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $3C		; 90 3C ; Branch if carry clear to $90, $3C [Flow: branch]
	lda $02F0.w		; AD F0 02 ; Load $02F0.w into accumulator [Writes: Accumulator] [Flags: NZ]
	eor #$01.b		; 49 01 ; Exclusive OR #$01.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02F0.w		; 8D F0 02 ; Store accumulator to $02F0.w [Reads: Accumulator]
	lda #$F3.b		; A9 F3 ; Load #$F3.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012C.w		; [PATTERN: Memory clearing operation] 8D 2C 01 ; Store accumulator to $012C.w [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $012D.w		; 8D 2D 01 ; Store accumulator to $012D.w [Reads: Accumulator]
	stz $0FC1.w		; 9C C1 0F ; Store zero to $0FC1.w
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	stz $3A.b		; [PATTERN: Memory clearing operation] 64 3A ; Store zero to $3A.b
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	stz $B0.b		; [PATTERN: Memory clearing operation] 64 B0 ; Store zero to $B0.b
	stz $11.b		; 64 11 ; Store zero to $11.b
	lda $010C.w		; AD 0C 01 ; Load $010C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $10.b		; 85 10 ; Store accumulator to $10.b [Reads: Accumulator]
	stz $1E.b		; 64 1E ; Store zero to $1E.b
	stz $1F.b		; [PATTERN: Memory clearing operation] 64 1F ; Store zero to $1F.b
	stz $96.b		; 64 96 ; Store zero to $96.b
	stz $97.b		; 64 97 ; Store zero to $97.b
	stz $98.b		; 64 98 ; Store zero to $98.b
	jsl $00F427.l		; 22 27 F4 00 ; Jump to subroutine long $00F427.l [Writes: Stack Pointer] [Flow: call]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	ldx $030A.w		; AE 0A 03 ; Load $030A.w into X register [Writes: X Index] [Flags: NZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cpx #$04.b		; E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	stx $030A.w		; 8E 0A 03 ; Store X register to $030A.w [Reads: X Index]
	lda $EA22.w,X		; BD 22 EA ; Load $EA22.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FEFE.w,X		; FE FE FE ; Increment memory $FEFE.w,X [Reads: X Index] [Flags: NZ]
	inc $FDFD.w,X		; FE FD FD ; Increment memory $FDFD.w,X [Reads: X Index] [Flags: NZ]
	sbc $FCFD.w,X		; FD FD FC ; Subtract with carry $FCFD.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	jsr ($FBFC.w,X)		; FC FC FB ; Jump to subroutine indirect indexed ($FBFC.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $F8F9.w,Y		; F9 F9 F8 ; Subtract with carry $F8F9.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sed		; F8 ; Set decimal flag [Flags: D]
	sbc [$F7.b],Y		; F7 F7 ; Subtract with carry (long indexed) [$F7.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $F6.b,X		; F6 F6 ; Increment memory $F6.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	sbc $F5.b,X		; F5 F5 ; Subtract $F5.b,X from accumulator with borrow [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	pea $F3F3.w		; F4 F3 F3 ; Push absolute address $F3F3.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	sbc ($F1.b)		; F2 F1 ; Subtract with carry (indirect) ($F1.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc ($F0.b),Y		; F1 F0 ; Subtract with carry ($F0.b),Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $EDEEEE.l		; EF EE EE ED ; Subtract with carry (long) $EDEEEE.l [Writes: Accumulator] [Flags: NCVZ]
	cpx $EAEB.w		; EC EB EA ; Compare $EAEB.w with X register [Reads: X Index] [Flags: NCZ]
	sbc #$E9.b		; E9 E9 ; Subtract #$E9.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	sbc [$E6.b]		; E7 E6 ; Subtract with carry (long) [$E6.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E4.b		; E5 E4 ; Subtract $E4.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sbc $E2.b,S		; E3 E2 ; Subtract stack-relative $E2.b,S from accumulator with borrow [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ] [SNES: Stack-relative addressing]
	sbc ($DF.b,X)		; E1 DF ; Subtract with carry ($DF.b,X) [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NCVZ]
	dec $DCDD.w,X		; DE DD DC ; Decrement memory $DCDD.w,X [Reads: X Index] [Flags: NZ]
	stp		; DB ; Stop processor (halt CPU clock) [SNES: SNES: Stops CPU until reset] [Flow: halt]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	cld		; D8 ; Clear decimal flag [Flags: D]
	cmp [$D6.b],Y		; D7 D6 ; Compare accumulator (long indexed) [$D6.b],Y [Reads: Direct Page, Y Index, Accumulator] [Flags: NCZ]
	cmp $D3.b,X		; D5 D3 ; Compare accumulator $D3.b,X [Reads: Direct Page, X Index] [Flags: NCZ]
	cmp ($D0.b)		; D2 D0 ; Compare accumulator (indirect) ($D0.b) [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp $CACCCD.l		; CF CD CC CA ; Compare accumulator (long) $CACCCD.l [Reads: Accumulator] [Flags: NCZ]
	cmp #$C7.b		; C9 C7 ; Compare #$C7.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	dec $C4.b		; C6 C4 ; Decrement $C4.b [Reads: Direct Page] [Flags: NZ]
	rep #$C1		; C2 C1 ; Reset processor status bits #$C1 [Writes: Processor Status] [SNES: Configures CPU mode (8/16-bit registers)]
	lda $B9BBBD.l,X		; BF BD BB B9 ; Load long $B9BBBD.l,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lda [$B6.b],Y		; B7 B6 ; Load accumulator (long indexed) [$B6.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ldy $B1.b,X		; B4 B1 ; Load Y register $B1.b,X [Reads: Direct Page, X Index] [Writes: Y Index] [Flags: NZ]
	lda $A9ABAD.l		; AF AD AB A9 ; Load long $A9ABAD.l into accumulator [Writes: Accumulator] [Flags: NZ]
	lda [$A4.b]		; A7 A4 ; Load accumulator (long) [$A4.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ldx #$9F.b		; A2 9F ; Load #$9F.b into X register [Writes: X Index] [Flags: NZ]
	sta $979A.w,X		; 9D 9A 97 ; Store accumulator to $979A.w,X [Reads: Accumulator, X Index]
	sta $92.b,X		; 95 92 ; Store accumulator to $92.b,X [Reads: Accumulator, X Index]
	sta $86898C.l		; 8F 8C 89 86 ; Store accumulator (long) $86898C.l [Reads: Accumulator]
	.db $82, $7F, $7B		; 82 7F 7B ; Branch always long to $82, $7F, $7B [Flow: branch]
	sei		; 78 ; Set interrupt disable flag [Flags: I]
	stz $70.b,X		; 74 70 ; Store zero to $70.b,X [Reads: X Index]
	jmp ($6367.w)		; 6C 67 63 ; Jump indirect to ($6367.w) [Flow: jump]
	lsr $5359.w,X		; 5E 59 53 ; Logical shift right $5359.w,X [Reads: X Index] [Flags: NCZ]
	eor $3F46.w		; 4D 46 3F ; Exclusive OR $3F46.w with accumulator [Writes: Accumulator] [Flags: NZ]
	and [$2D.b],Y		; 37 2D ; AND accumulator with memory (long indexed) [$2D.b],Y [Reads: Direct Page, Y Index] [Writes: Accumulator] [Flags: NZ]
	ora $FFFF00.l,X		; 1F 00 FF FF ; Logical OR long $FFFF00.l,X with accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $FDFE.w,X		; FE FE FD ; Increment memory $FDFE.w,X [Reads: X Index] [Flags: NZ]
	sbc $FCFC.w,X		; FD FC FC ; Subtract with carry $FCFC.w,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	xce		; FB ; Exchange carry and emulation bits [Flags: C]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sbc $F7F8.w,Y		; F9 F8 F7 ; Subtract with carry $F7F8.w,Y [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	inc $F5.b,X		; F6 F5 ; Increment memory $F5.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	pea $F1F3.w		; F4 F3 F1 ; Push absolute address $F1F3.w to stack [Writes: Stack Pointer] [SNES: Pushes 16-bit address to stack]
	.db $F0, $EE		; F0 EE ; Branch if equal to $F0, $EE [Flow: branch]
	sbc $E9EB.w		; ED EB E9 ; Subtract $E9EB.w from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	inc $E4.b		; E6 E4 ; Increment $E4.b [Reads: Direct Page] [Flags: NZ]
.INDEX 8
	sep #$DF		; E2 DF
	cmp $D8DB.w,X		; DD DB D8 ; Compare accumulator $D8DB.w,X [Reads: X Index] [Flags: NCZ]
	dec $D3.b,X		; D6 D3 ; Decrement memory $D3.b,X [Reads: Direct Page, X Index] [Flags: NZ]
	.db $D0, $CD		; D0 CD ; Branch if not equal to $D0, $CD [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	cmp [$C4.b]		; C7 C4 ; Compare accumulator (long) [$C4.b] [Reads: Direct Page, Accumulator] [Flags: NCZ]
	cmp ($BD.b,X)		; C1 BD ; Compare accumulator ($BD.b,X) [Reads: Direct Page, Accumulator, X Index] [Flags: NCZ]
	lda $B1B6.w,Y		; B9 B6 B1 ; Load $B1B6.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lda $A4A9.w		; AD A9 A4 ; Load $A4A9.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $8F959A.l,X		; 9F 9A 95 8F ; Store accumulator (long,X) $8F959A.l,X [Reads: Accumulator, X Index]
	bit #$82.b		; 89 82 ; Test bits #$82.b with accumulator [Reads: Accumulator] [Flags: Z]
	tda		; 7B ; Transfer direct page to C  [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz $6C.b,X		; 74 6C ; Store zero to $6C.b,X [Reads: X Index]
	adc $59.b,S		; 63 59 ; Add with carry (stack relative) $59.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NCVZ]
	eor $2D3F.w		; 4D 3F 2D ; Exclusive OR $2D3F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $E2.b		; 00 E2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	.db $30, $AD		; 30 AD ; Branch if minus to $30, $AD [Flow: branch]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	asl $8D.b		; 06 8D ; Arithmetic shift left $8D.b [Reads: Direct Page] [Flags: NCZ]
	ora $42.b		; 05 42 ; Logical OR $42.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	stz WRDIVL.w		; 9C 04 42 ; Store zero to WRDIVL.w
	lda $067C.w		; AD 7C 06 ; Load $067C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta WRDIVB.w		; 8D 06 42 ; Store accumulator to WRDIVB.w [Reads: Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
.ACCU 16
	rep #$20		; C2 20
	lda RDDIVL.w		; AD 14 42 ; Load RDDIVL.w into accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
.ACCU 8
	sep #$20		; E2 20
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy $EC5B.w,X		; BC 5B EC ; Load Y register $EC5B.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	lda $067E.w		; AD 7E 06 ; Load $067E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $03		; F0 03 ; Branch if equal to $F0, $03 [Flow: branch]
	ldy $EBDA.w,X		; BC DA EB ; Load Y register $EBDA.w,X [Reads: X Index] [Writes: Y Index] [Flags: NZ]
	sty $06.b		; 84 06 ; Store Y register to $06.b [Reads: Y Index]
	sty WRMPYA.w		; 8C 02 42 ; Store Y register to WRMPYA.w [Reads: Y Index]
	lda $067C.w		; AD 7C 06 ; Load $067C.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta WRMPYB.w		; 8D 03 42 ; Store accumulator to WRMPYB.w [Reads: Accumulator]
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; EA ; No operation
	nop		; [PATTERN: Memory clearing operation] EA ; No operation
	lda RDMPYH.w		; AD 17 42 ; Load RDMPYH.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	stz $09.b		; 64 09 ; Store zero to $09.b
	stz $07.b		; 64 07 ; Store zero to $07.b
.ACCU 16
.INDEX 16
	rep #$30		; C2 30
	lda $067E.w		; AD 7E 06 ; Load $067E.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	asl $08.b		; 06 08 ; Arithmetic shift left $08.b [Reads: Direct Page] [Flags: NCZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$BD01.w		; A2 01 BD ; Load #$BD01.w into X register [Writes: X Index] [Flags: NZ]
	jsr ($D005.w,X)		; FC 05 D0 ; Jump to subroutine indirect indexed ($D005.w,X) [Reads: X Index] [Writes: Stack Pointer] [Flow: call]
	ora [$98.b]		; 07 98 ; OR accumulator with memory (long) [$98.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $05FC.w,X		; 9D FC 05 ; Store accumulator to $05FC.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F1		; 10 F1 ; Branch if plus to $10, $F1 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	stx $72.b		; 86 72 ; Store X register to $72.b [Reads: X Index]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
.ACCU 16
	rep #$20		; C2 20
	lda $0540.w,X		; BD 40 05 ; Load $0540.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$007E.w		; 29 7E 00 ; Logical AND #$007E.w with accumulator [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $0540.w,X		; BD 40 05 ; Load $0540.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	and #$1F80.w		; 29 80 1F ; Logical AND #$1F80.w with accumulator [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $05E4.w,X		; 9D E4 05 ; Store accumulator to $05E4.w,X [Reads: Accumulator, X Index]
	lda $01.b		; A5 01 ; Load $01.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062D.w		; 6D 2D 06 ; Add $062D.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $05E0.w,X		; 9D E0 05 ; Store accumulator to $05E0.w,X [Reads: Accumulator, X Index]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $05F0.w,X		; 9D F0 05 ; Store accumulator to $05F0.w,X [Reads: Accumulator, X Index]
	lda $03.b		; A5 03 ; Load $03.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $062F.w		; [PATTERN: Memory clearing operation] 6D 2F 06 ; Add $062F.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	sta $05EC.w,X		; 9D EC 05 ; Store accumulator to $05EC.w,X [Reads: Accumulator, X Index]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	stz $05E8.w,X		; 9E E8 05 ; Store zero to $05E8.w,X [Reads: X Index]
	stz $05F4.w,X		; 9E F4 05 ; Store zero to $05F4.w,X [Reads: X Index]
	lda $AE.b		; A5 AE ; Load $AE.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$26.b		; C9 26 ; Compare #$26.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0E		; F0 0E ; Branch if equal to $F0, $0E [Flow: branch]
	ldx $72.b		; A6 72 ; Load $72.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $0500.w,X		; BD 00 05 ; Load $0500.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	ldy #$2000.w		; A0 00 20 ; Load #$2000.w into Y register [Writes: Y Index] [Flags: NZ]
	tsb $D3.b		; 04 D3 ; Test and set bits $D3.b [Reads: Accumulator] [Flags: Z]
	.db $90, $08		; 90 08 ; Branch if carry clear to $90, $08 [Flow: branch]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	stz $05FC.w,X		; 9E FC 05 ; Store zero to $05FC.w,X [Reads: X Index]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda #$22.b		; A9 22 ; Load #$22.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0500.w,X		; 9D 00 05 ; Store accumulator to $0500.w,X [Reads: Accumulator, X Index]
	clc		; 18 ; Clear carry flag [Flags: C]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 8
.INDEX 8
	sep #$30		; E2 30
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $34		; D0 34 ; Branch if not equal to $D0, $34 [Flow: branch]
	sty $00.b		; 84 00 ; Store Y register to $00.b [Reads: Y Index]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	lda $05FC.w,X		; BD FC 05 ; Load $05FC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $00.b		; C5 00 ; Compare $00.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$09.b		; A9 09 ; Load #$09.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02C4.w		; 8D C4 02 ; Store accumulator to $02C4.w [Reads: Accumulator]
	stz $02C3.w		; 9C C3 02 ; Store zero to $02C3.w
	jsr $EE35.w		; 20 35 EE ; Jump to subroutine at $EE35.w [Writes: Stack Pointer] [Flow: call]
	lda $05F0.w,Y		; B9 F0 05 ; Load $05F0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $72.b		; 85 72 ; Store accumulator to $72.b [Reads: Accumulator]
	lda $05EC.w,Y		; B9 EC 05 ; Load $05EC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $73.b		; 85 73 ; Store accumulator to $73.b [Reads: Accumulator]
	lda $05E4.w,Y		; B9 E4 05 ; Load $05E4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $74.b		; 85 74 ; Store accumulator to $74.b [Reads: Accumulator]
	lda $05E0.w,Y		; B9 E0 05 ; Load $05E0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $75.b		; 85 75 ; Store accumulator to $75.b [Reads: Accumulator]
	jsr $EFB9.w		; 20 B9 EF ; Jump to subroutine at $EFB9.w [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$09.b		; 09 09 ; Logical OR #$09.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora #$E2.b		; 09 E2 ; Logical OR #$E2.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $30, $8B		; 30 8B ; Branch if minus to $30, $8B [Flow: branch]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	dec $02C4.w		; CE C4 02 ; Decrement $02C4.w [Flags: NZ]
	.db $10, $27		; 10 27 ; Branch if plus to $10, $27 [Flow: branch]
	inc $02C3.w		; EE C3 02 ; Increment $02C3.w [Flags: NZ]
	ldx $02C3.w		; AE C3 02 ; Load $02C3.w into X register [Writes: X Index] [Flags: NZ]
	lda $EDF4.w,X		; BD F4 ED ; Load $EDF4.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $02C4.w		; 8D C4 02 ; Store accumulator to $02C4.w [Reads: Accumulator]
	cpx #$04.b		; [PATTERN: Memory clearing operation] E0 04 ; Compare #$04.b with X register [Reads: X Index] [Flags: NCZ]
	.db $D0, $17		; D0 17 ; Branch if not equal to $D0, $17 [Flow: branch]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	stz $0500.w,X		; 9E 00 05 ; Store zero to $0500.w,X [Reads: X Index]
	stz $02C3.w		; 9C C3 02 ; Store zero to $02C3.w
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	lda $05FC.w,X		; BD FC 05 ; Load $05FC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp $0E.b		; C5 0E ; Compare $0E.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	stz $05FC.w,X		; 9E FC 05 ; Store zero to $05FC.w,X [Reads: X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; [PATTERN: Memory clearing operation] 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $0408.w		; 0C 08 04 ; Test and set bits $0408.w [Reads: Accumulator] [Flags: Z]
	cop $01.b		; 02 01 ; Coprocessor interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	stz $27.b		; 64 27 ; Store zero to $27.b
	stz $28.b		; 64 28 ; Store zero to $28.b
	lda $EE30.w		; AD 30 EE ; Load $EE30.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	sta $0B.b		; 85 0B ; Store accumulator to $0B.b [Reads: Accumulator]
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0D.b		; 85 0D ; Store accumulator to $0D.b [Reads: Accumulator]
	lda $05F8.w,Y		; B9 F8 05 ; Load $05F8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $EE31.w,X		; BD 31 EE ; Load $EE31.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and $0C.b		; 25 0C ; Logical AND $0C.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $11		; F0 11 ; Branch if equal to $F0, $11 [Flow: branch]
	and $0D.b		; 25 0D ; Logical AND $0D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda $0A.b,X		; B5 0A ; Load $0A.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $0A.b,X		; 95 0A ; Store accumulator to $0A.b,X [Reads: Accumulator, X Index]
	lda $0A.b,X		; B5 0A ; Load $0A.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	sta $27.b,X		; 95 27 ; Store accumulator to $27.b,X [Reads: Accumulator, X Index]
	.db $80, $0B		; 80 0B ; Branch always to $80, $0B [Flow: branch]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	asl $0C.b		; 06 0C ; Arithmetic shift left $0C.b [Reads: Direct Page] [Flags: NCZ]
	asl $0D.b		; 06 0D ; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: NCZ]
	asl $0D.b		; 06 0D ; Arithmetic shift left $0D.b [Reads: Direct Page] [Flags: NCZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $DE		; 10 DE ; Branch if plus to $10, $DE [Flow: branch]
	lda $27.b,X		; B5 27 ; Load $27.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $05F4.w,Y		; 79 F4 05 ; Add $05F4.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $05F4.w,Y		; 99 F4 05 ; Store accumulator to $05F4.w,Y [Reads: Y Index, Accumulator]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	cpx #$01.b		; E0 01 ; Compare #$01.b with X register [Reads: X Index] [Flags: NCZ]
	.db $F0, $25		; F0 25 ; Branch if equal to $F0, $25 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $27.b		; A5 27 ; Load $27.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$FF.b		; A2 FF ; Load #$FF.b into X register [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc $05F0.w,Y		; 79 F0 05 ; Add $05F0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $05F0.w,Y		; 99 F0 05 ; Store accumulator to $05F0.w,Y [Reads: Y Index, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $05EC.w,Y		; 79 EC 05 ; Add $05EC.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $05EC.w,Y		; 99 EC 05 ; Store accumulator to $05EC.w,Y [Reads: Y Index, Accumulator]
	lda $05F0.w,Y		; B9 F0 05 ; Load $05F0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $80, $23		; 80 23 ; Branch always to $80, $23 [Flow: branch]
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	lda $28.b		; A5 28 ; Load $28.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	ora #$F0.b		; 09 F0 ; Logical OR #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ldx #$FF.b		; A2 FF ; Load #$FF.b into X register [Writes: X Index] [Flags: NZ]
	plp		; 28 ; Pull processor status [Reads: Stack Pointer] [Writes: Processor Status, Stack Pointer] [Flags: MXCZIDVN]
	adc $05E4.w,Y		; 79 E4 05 ; Add $05E4.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $05E4.w,Y		; 99 E4 05 ; Store accumulator to $05E4.w,Y [Reads: Y Index, Accumulator]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	adc $05E0.w,Y		; 79 E0 05 ; Add $05E0.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $05E0.w,Y		; 99 E0 05 ; Store accumulator to $05E0.w,Y [Reads: Y Index, Accumulator]
	lda $05E4.w,Y		; B9 E4 05 ; Load $05E4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$0F.b		; 29 0F ; Logical AND #$0F.b with accumulator [Writes: Accumulator] [Flags: NZ]
	tyx		; BB ; Transfer Y to X [Reads: Y Index] [Writes: X Index] [Flags: NZ]
	cmp $05E8.w,X		; DD E8 05 ; Compare accumulator $05E8.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $18		; D0 18 ; Branch if not equal to $D0, $18 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $05FC.w,X		; BD FC 05 ; Load $05FC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	inc $0500.w,X		; FE 00 05 ; Increment memory $0500.w,X [Reads: X Index] [Flags: NZ]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FB.b		; 29 FB ; Logical AND #$FB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FB.b		; 29 FB ; Logical AND #$FB.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $05E4.w,Y		; B9 E4 05 ; Load $05E4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $05E0.w,Y		; B9 E0 05 ; Load $05E0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $05F0.w,Y		; B9 F0 05 ; Load $05F0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $05EC.w,Y		; B9 EC 05 ; Load $05EC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx #$0F.b		; A2 0F ; Load #$0F.b into X register [Writes: X Index] [Flags: NZ]
	lda $0DD0.w,X		; BD D0 0D ; Load $0DD0.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $4C		; 90 4C ; Branch if carry clear to $90, $4C [Flow: branch]
	lda $0D10.w,X		; BD 10 0D ; Load $0D10.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda $0D30.w,X		; BD 30 0D ; Load $0D30.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $05.b		; 85 05 ; Store accumulator to $05.b [Reads: Accumulator]
	lda $0D00.w,X		; BD 00 0D ; Load $0D00.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $0D20.w,X		; BD 20 0D ; Load $0D20.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	sta $07.b		; 85 07 ; Store accumulator to $07.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $04.b		; E5 04 ; Subtract $04.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0020.w		; C9 20 00 ; Compare #$0020.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $28		; B0 28 ; Branch if carry set to $B0, $28 [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $06.b		; E5 06 ; Subtract $06.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc #$0010.w		; 69 10 00 ; Add #$0010.w to accumulator with carry [Writes: Accumulator] [Flags: NCVZ]
	cmp #$0020.w		; C9 20 00 ; Compare #$0020.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $1A		; B0 1A ; Branch if carry set to $B0, $1A [Flow: branch]
.ACCU 8
	sep #$20		; E2 20
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0EA0.w,X		; 9D A0 0E ; Store accumulator to $0EA0.w,X [Reads: Accumulator, X Index]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda $05F8.w,Y		; B9 F8 05 ; Load $05F8.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda $EF61.w,Y		; B9 61 EF ; Load $EF61.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F40.w,X		; 9D 40 0F ; Store accumulator to $0F40.w,X [Reads: Accumulator, X Index]
	lda $EF65.w,Y		; B9 65 EF ; Load $EF65.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0F30.w,X		; 9D 30 0F ; Store accumulator to $0F30.w,X [Reads: Accumulator, X Index]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
.ACCU 8
	sep #$20		; E2 20
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $A8		; 10 A8 ; Branch if plus to $10, $A8 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	cpx #$20.b		; E0 20 ; Compare #$20.b with X register [Reads: X Index] [Flags: NCZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	php		; 08 ; Push processor status [Reads: Processor Status] [Writes: Stack Pointer]
	brk $18.b		; 00 18 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $10.b		; 00 10 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $08.b		; 00 08 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $17.b		; 00 17 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $0F.b		; 00 0F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $22.b		; 00 22 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $20.b		; 00 20 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $74.b		; 00 74 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $72.b		; 00 72 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $5A.b		; 00 5A ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sty $0E.b		; 84 0E ; Store Y register to $0E.b [Reads: Y Index]
	stz $0F.b		; 64 0F ; Store zero to $0F.b
	lda $21.b		; A5 21 ; Load $21.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $40.b		; 85 40 ; Store accumulator to $40.b [Reads: Accumulator]
	lda $23.b		; A5 23 ; Load $23.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $41.b		; 85 41 ; Store accumulator to $41.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$000F.w		; 29 0F 00 ; Logical AND #$000F.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ldy #$06.b		; A0 06 ; Load #$06.b into Y register [Writes: Y Index] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	.db $B0, $07		; B0 07 ; Branch if carry set to $B0, $07 [Flow: branch]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	dey		; 88 ; Decrement Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	.db $10, $F9		; 10 F9 ; Branch if plus to $10, $F9 [Flow: branch]
	.db $82, $CC, $00		; 82 CC 00 ; Branch always long to $82, $CC, $00 [Flow: branch]
	lda $0E.b		; A5 0E ; Load $0E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	lda $EFA1.w,Y		; B9 A1 EF ; Load $EFA1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $EFB1.w,Y		; B9 B1 EF ; Load $EFB1.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EF71.w,Y		; 79 71 EF ; Add $EF71.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EF79.w,Y		; 79 79 EF ; Add $EF79.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda ($0E.b)		; B2 0E ; Load accumulator (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EF89.w,Y		; 79 89 EF ; Add $EF89.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $04.b		; 85 04 ; Store accumulator to $04.b [Reads: Accumulator]
	lda ($0E.b)		; B2 0E ; Load accumulator (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EF91.w,Y		; 79 91 EF ; Add $EF91.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $06.b		; 85 06 ; Store accumulator to $06.b [Reads: Accumulator]
	lda $EF99.w,Y		; B9 99 EF ; Load $EF99.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0C.b		; 85 0C ; Store accumulator to $0C.b [Reads: Accumulator]
	lda $EFA9.w,Y		; B9 A9 EF ; Load $EFA9.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda ($0C.b)		; B2 0C ; Load accumulator (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EF69.w,Y		; 79 69 EF ; Add $EF69.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $08.b		; 85 08 ; Store accumulator to $08.b [Reads: Accumulator]
	lda ($0E.b)		; B2 0E ; Load accumulator (indirect) ($0E.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $EF81.w,Y		; 79 81 EF ; Add $EF81.w,Y to accumulator with carry [Reads: Y Index] [Writes: Accumulator] [Flags: NCVZ]
	sta $0A.b		; 85 0A ; Store accumulator to $0A.b [Reads: Accumulator]
	lda $48.b		; A5 48 ; Load $48.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FFFB.w		; 29 FB FF ; Logical AND #$FFFB.w with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $48.b		; 85 48 ; Store accumulator to $48.b [Reads: Accumulator]
	pla		; 68 ; Pull accumulator [Reads: Stack Pointer] [Writes: Stack Pointer, Accumulator] [Flags: NZ]
	sta $0E.b		; 85 0E ; Store accumulator to $0E.b [Reads: Accumulator]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $04.b		; C5 04 ; Compare $04.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $04		; 90 04 ; Branch if carry clear to $90, $04 [Flow: branch]
	cmp $06.b		; C5 06 ; Compare $06.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $0A		; 90 0A ; Branch if carry clear to $90, $0A [Flow: branch]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $04.b		; C5 04 ; Compare $04.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $90, $6B		; 90 6B ; Branch if carry clear to $90, $6B [Flow: branch]
	cmp $06.b		; C5 06 ; Compare $06.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $B0, $67		; B0 67 ; Branch if carry set to $B0, $67 [Flow: branch]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	ldx $0E.b		; A6 0E ; Load $0E.b into X register [Reads: Direct Page] [Writes: X Index] [Flags: NZ]
	lda $2F.b		; A5 2F ; Load $2F.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	cmp $05F8.w,X		; DD F8 05 ; Compare accumulator $05F8.w,X [Reads: X Index] [Flags: NCZ]
	.db $D0, $12		; D0 12 ; Branch if not equal to $D0, $12 [Flow: branch]
	ldy #$01.b		; A0 01 ; Load #$01.b into Y register [Writes: Y Index] [Flags: NZ]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	lda $05FC.w,X		; BD FC 05 ; Load $05FC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$04.b		; A0 04 ; Load #$04.b into Y register [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$00FF.w		; 29 FF 00 ; Logical AND #$00FF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	tsb $48.b		; 04 48 ; Test and set bits $48.b [Reads: Accumulator] [Flags: Z]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$0002.w		; 29 02 00 ; Logical AND #$0002.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $19		; F0 19 ; Branch if equal to $F0, $19 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0A.b		; E5 0A ; Subtract $0A.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $90, $38		; 90 38 ; Branch if carry clear to $90, $38 [Flow: branch]
	cmp #$0008.w		; C9 08 00 ; Compare #$0008.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $33		; B0 33 ; Branch if carry set to $B0, $33 [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($0C.b)		; 72 0C ; Add with carry (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta ($0C.b)		; 92 0C ; Store accumulator (indirect) ($0C.b) [Reads: Direct Page, Accumulator]
	.db $80, $15		; 80 15 ; Branch always to $80, $15 [Flow: branch]
	lda $08.b		; A5 08 ; Load $08.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $0A.b		; E5 0A ; Subtract $0A.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	cmp #$FFF8.w		; C9 F8 FF ; Compare #$FFF8.w with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $1C		; 90 1C ; Branch if carry clear to $90, $1C [Flow: branch]
	eor #$FFFF.w		; 49 FF FF ; Exclusive OR #$FFFF.w with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc ($0C.b)		; 72 0C ; Add with carry (indirect) ($0C.b) [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta ($0C.b)		; 92 0C ; Store accumulator (indirect) ($0C.b) [Reads: Direct Page, Accumulator]
.ACCU 8
	sep #$20		; E2 20
	ldx #$00.b		; A2 00 ; Load #$00.b into X register [Writes: X Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	inx		; E8 ; Increment X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	lda $30.b,X		; B5 30 ; Load $30.b,X into accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $30.b,X		; 95 30 ; Store accumulator to $30.b,X [Reads: Accumulator, X Index]
.ACCU 8
	sep #$20		; E2 20
	jsr $E8F0.w		; 20 F0 E8 ; Jump to subroutine at $E8F0.w [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $05FC.w		; AD FC 05 ; Load $05FC.w into accumulator [Writes: Accumulator] [Flags: NZ]
	ora $05FD.w		; 0D FD 05 ; Logical OR $05FD.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $12		; F0 12 ; Branch if equal to $F0, $12 [Flow: branch]
	ldx #$01.b		; A2 01 ; Load #$01.b into X register [Writes: X Index] [Flags: NZ]
	lda $05FC.w,X		; BD FC 05 ; Load $05FC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	txa		; 8A ; Transfer X to accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	asl A		; 0A ; Arithmetic shift left accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $F0D9.w		; 20 D9 F0 ; Jump to subroutine at $F0D9.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F0		; 10 F0 ; Branch if plus to $10, $F0 [Flow: branch]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	tsb $0C0C.w		; 0C 0C 0C ; Test and set bits $0C0C.w [Reads: Accumulator] [Flags: Z]
	tsb $00FF.w		; 0C FF 00 ; Test and set bits $00FF.w [Reads: Accumulator] [Flags: Z]
	ora ($02.b,X)		; 01 02 ; Logical OR ($02.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	ora $04.b,S		; 03 04 ; OR accumulator with stack relative $04.b,S [Reads: Stack Pointer] [Writes: Accumulator] [Flags: NZ]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $00.b		; 00 00 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsl $0DBA84.l		; 22 84 BA 0D ; Jump to subroutine long $0DBA84.l [Writes: Stack Pointer] [Flow: call]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	lda $05F0.w,Y		; B9 F0 05 ; Load $05F0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $05EC.w,Y		; B9 EC 05 ; Load $05EC.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $05E4.w,Y		; B9 E4 05 ; Load $05E4.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
	lda $05E0.w,Y		; B9 E0 05 ; Load $05E0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sta $03.b		; 85 03 ; Store accumulator to $03.b [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E8.b		; E5 E8 ; Subtract $E8.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	dec A		; 3A ; Decrement accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $E2.b		; E5 E2 ; Subtract $E2.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $02.b		; 85 02 ; Store accumulator to $02.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	phy		; 5A ; Push Y register [Reads: Y Index] [Writes: Stack Pointer]
	ldy $02C3.w		; AC C3 02 ; Load $02C3.w into Y register [Writes: Y Index] [Flags: NZ]
	lda $F0D0.w,Y		; B9 D0 F0 ; Load $F0D0.w,Y into accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	tax		; AA ; Transfer accumulator to X [Reads: Accumulator] [Writes: X Index] [Flags: NZ]
	ldy #$00.b		; A0 00 ; Load #$00.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $F0CC.w,X		; BD CC F0 ; Load $F0CC.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$FF.b		; C9 FF ; Compare #$FF.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	.db $80, $1F		; 80 1F ; Branch always to $80, $1F [Flow: branch]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	lda $02.b		; A5 02 ; Load $02.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda $00.b		; A5 00 ; Load $00.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	xba		; EB ; Exchange B and A accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($90.b),Y		; 91 90 ; Store accumulator ($90.b),Y [Reads: Direct Page, Y Index, Accumulator]
	iny		; C8 ; Increment Y register [Reads: Y Index] [Writes: Y Index] [Flags: NZ]
	tya		; 98 ; Transfer Y to accumulator [Reads: Y Index] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc #$04.b		; E9 04 ; Subtract #$04.b from accumulator with borrow [Writes: Accumulator] [Flags: NCVZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	lsr A		; 4A ; Logical shift right accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NCZ]
	tay		; A8 ; Transfer accumulator to Y [Reads: Accumulator] [Writes: Y Index] [Flags: NZ]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta ($92.b),Y		; 91 92 ; Store accumulator ($92.b),Y [Reads: Direct Page, Y Index, Accumulator]
	ply		; 7A ; Pull Y register [Reads: Stack Pointer] [Writes: Y Index, Stack Pointer] [Flags: NZ]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$02.b		; [PATTERN: Memory clearing operation] A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	stz $26.b		; 64 26 ; Store zero to $26.b
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	stz $037A.w		; 9C 7A 03 ; Store zero to $037A.w
	stz $020B.w		; [PATTERN: Memory clearing operation] 9C 0B 02 ; Store zero to $020B.w
	stz $0350.w		; 9C 50 03 ; Store zero to $0350.w
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $030E.w		; 9C 0E 03 ; Store zero to $030E.w
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	stz $02E1.w		; [PATTERN: Memory clearing operation] 9C E1 02 ; Store zero to $02E1.w
	stz $3B.b		; 64 3B ; Store zero to $3B.b
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$BF.b		; 29 BF ; Logical AND #$BF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3A.b		; 85 3A ; Store accumulator to $3A.b [Reads: Accumulator]
	stz $0308.w		; [PATTERN: Memory clearing operation] 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; 9C 76 03 ; Store zero to $0376.w
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	lda $50.b		; A5 50 ; Load $50.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$FE.b		; [PATTERN: Memory clearing operation] 29 FE ; Logical AND #$FE.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $50.b		; 85 50 ; Store accumulator to $50.b [Reads: Accumulator]
	stz $25.b		; 64 25 ; Store zero to $25.b
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $46.b		; 64 46 ; Store zero to $46.b
	stz $031F.w		; [PATTERN: Memory clearing operation] 9C 1F 03 ; Store zero to $031F.w
	stz $0360.w		; 9C 60 03 ; Store zero to $0360.w
	stz $02DA.w		; 9C DA 02 ; Store zero to $02DA.w
	stz $55.b		; 64 55 ; Store zero to $55.b
	jsr $AE54.w		; 20 54 AE ; Jump to subroutine at $AE54.w [Writes: Stack Pointer] [Flow: call]
	jsr $9D84.w		; [PATTERN: Memory clearing operation] 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	lda $67.b		; A5 67 ; Load $67.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$F0.b		; 29 F0 ; Logical AND #$F0.b with accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; [PATTERN: Memory clearing operation] 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	stz $02F5.w		; 9C F5 02 ; Store zero to $02F5.w
	stz $0079.w		; 9C 79 00 ; Store zero to $0079.w
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $26.b		; [PATTERN: Memory clearing operation] 64 26 ; Store zero to $26.b
	stz $67.b		; 64 67 ; Store zero to $67.b
	stz $031F.w		; 9C 1F 03 ; Store zero to $031F.w
	stz $034A.w		; 9C 4A 03 ; Store zero to $034A.w
	jsl $07983A.l		; 22 3A 98 07 ; Jump to subroutine long $07983A.l [Writes: Stack Pointer] [Flow: call]
	stz $02E1.w		; [PATTERN: Memory clearing operation] 9C E1 02 ; Store zero to $02E1.w
	stz $031F.w		; 9C 1F 03 ; Store zero to $031F.w
	stz $03DB.w		; 9C DB 03 ; Store zero to $03DB.w
	stz $02E0.w		; 9C E0 02 ; Store zero to $02E0.w
	stz $56.b		; 64 56 ; Store zero to $56.b
	stz $03F5.w		; [PATTERN: Memory clearing operation] 9C F5 03 ; Store zero to $03F5.w
	stz $03F7.w		; 9C F7 03 ; Store zero to $03F7.w
	stz $03FC.w		; 9C FC 03 ; Store zero to $03FC.w
	stz $03F8.w		; 9C F8 03 ; Store zero to $03F8.w
	stz $03FA.w		; 9C FA 03 ; Store zero to $03FA.w
	stz $03E9.w		; [PATTERN: Memory clearing operation] 9C E9 03 ; Store zero to $03E9.w
	stz $0373.w		; 9C 73 03 ; Store zero to $0373.w
	stz $031E.w		; 9C 1E 03 ; Store zero to $031E.w
	stz $02F2.w		; 9C F2 02 ; Store zero to $02F2.w
	stz $02F8.w		; 9C F8 02 ; Store zero to $02F8.w
	stz $02EA.w		; [PATTERN: Memory clearing operation] 9C EA 02 ; Store zero to $02EA.w
	stz $02E9.w		; 9C E9 02 ; Store zero to $02E9.w
	stz $02DB.w		; 9C DB 02 ; Store zero to $02DB.w
	stz $02F5.w		; 9C F5 02 ; Store zero to $02F5.w
	stz $0079.w		; 9C 79 00 ; Store zero to $0079.w
	stz $0302.w		; [PATTERN: Memory clearing operation] 9C 02 03 ; Store zero to $0302.w
	stz $02F4.w		; 9C F4 02 ; Store zero to $02F4.w
	stz $48.b		; 64 48 ; Store zero to $48.b
	stz $5A.b		; 64 5A ; Store zero to $5A.b
	stz $5B.b		; 64 5B ; Store zero to $5B.b
	stz $5B.b		; [PATTERN: Memory clearing operation] 64 5B ; Store zero to $5B.b
	stz $036C.w		; 9C 6C 03 ; Store zero to $036C.w
	stz $031C.w		; 9C 1C 03 ; Store zero to $031C.w
	stz $031D.w		; 9C 1D 03 ; Store zero to $031D.w
	stz $0315.w		; 9C 15 03 ; Store zero to $0315.w
	stz $03EF.w		; [PATTERN: Memory clearing operation] 9C EF 03 ; Store zero to $03EF.w
	stz $02E3.w		; 9C E3 02 ; Store zero to $02E3.w
	stz $02F6.w		; 9C F6 02 ; Store zero to $02F6.w
	stz $0301.w		; 9C 01 03 ; Store zero to $0301.w
	stz $037A.w		; 9C 7A 03 ; Store zero to $037A.w
	stz $020B.w		; [PATTERN: Memory clearing operation] 9C 0B 02 ; Store zero to $020B.w
	stz $0350.w		; 9C 50 03 ; Store zero to $0350.w
	stz $030D.w		; 9C 0D 03 ; Store zero to $030D.w
	stz $030E.w		; 9C 0E 03 ; Store zero to $030E.w
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	stz $3B.b		; [PATTERN: Memory clearing operation] 64 3B ; Store zero to $3B.b
	stz $3A.b		; 64 3A ; Store zero to $3A.b
	stz $3C.b		; 64 3C ; Store zero to $3C.b
	stz $0308.w		; 9C 08 03 ; Store zero to $0308.w
	stz $0309.w		; 9C 09 03 ; Store zero to $0309.w
	stz $0376.w		; [PATTERN: Memory clearing operation] 9C 76 03 ; Store zero to $0376.w
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $46.b		; 64 46 ; Store zero to $46.b
	stz $0360.w		; 9C 60 03 ; Store zero to $0360.w
	stz $02DA.w		; [PATTERN: Memory clearing operation] 9C DA 02 ; Store zero to $02DA.w
	stz $55.b		; 64 55 ; Store zero to $55.b
	jsr $9D84.w		; 20 84 9D ; Jump to subroutine at $9D84.w [Writes: Stack Pointer] [Flow: call]
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
	stz $0300.w		; 9C 00 03 ; Store zero to $0300.w
	stz $037E.w		; [PATTERN: Memory clearing operation] 9C 7E 03 ; Store zero to $037E.w
	stz $02EC.w		; 9C EC 02 ; Store zero to $02EC.w
	stz $0314.w		; 9C 14 03 ; Store zero to $0314.w
	stz $03F8.w		; 9C F8 03 ; Store zero to $03F8.w
	stz $02FA.w		; 9C FA 02 ; Store zero to $02FA.w
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	ldx #$09.b		; A2 09 ; Load #$09.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$0D.b		; C9 0D ; Compare #$0D.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $03		; D0 03 ; Branch if not equal to $D0, $03 [Flow: branch]
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F3		; 10 F3 ; Branch if plus to $10, $F3 [Flow: branch]
	lda $2E.b		; [PATTERN: Memory clearing operation] A5 2E ; Load $2E.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$05.b		; C9 05 ; Compare #$05.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $02		; 90 02 ; Branch if carry clear to $90, $02 [Flow: branch]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $2A.b		; 64 2A ; Store zero to $2A.b
	stz $2B.b		; [PATTERN: Memory clearing operation] 64 2B ; Store zero to $2B.b
	stz $030A.w		; 9C 0A 03 ; Store zero to $030A.w
	lda #$1C.b		; A9 1C ; Load #$1C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0371.w		; 8D 71 03 ; Store accumulator to $0371.w [Reads: Accumulator]
	lda #$20.b		; A9 20 ; Load #$20.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0378.w		; 8D 78 03 ; Store accumulator to $0378.w [Reads: Accumulator]
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $037B.w		; 8D 7B 03 ; Store accumulator to $037B.w [Reads: Accumulator]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $07		; F0 07 ; Branch if equal to $F0, $07 [Flow: branch]
	lda #$18.b		; A9 18 ; Load #$18.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$16.b		; A9 16 ; Load #$16.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	stz $01.b		; 64 01 ; Store zero to $01.b
	ldx #$10.b		; A2 10 ; Load #$10.b into X register [Writes: X Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	ldx #$F1.b		; A2 F1 ; Load #$F1.b into X register [Writes: X Index] [Flags: NZ]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	stx $00.b		; 86 00 ; Store X register to $00.b [Reads: X Index]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $53.b		; 85 53 ; Store accumulator to $53.b [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $51.b		; 85 51 ; Store accumulator to $51.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FC2.w		; 8D C2 0F ; Store accumulator to $0FC2.w [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FC4.w		; 8D C4 0F ; Store accumulator to $0FC4.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda $030A.w		; [PATTERN: Memory clearing operation] AD 0A 03 ; Load $030A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $01		; F0 01 ; Branch if equal to $F0, $01 [Flow: branch]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	stz $0373.w		; 9C 73 03 ; Store zero to $0373.w
	stz $46.b		; 64 46 ; Store zero to $46.b
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $16		; F0 16 ; Branch if equal to $F0, $16 [Flow: branch]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	dec $0371.w		; CE 71 03 ; Decrement $0371.w [Flags: NZ]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	stz $0371.w		; 9C 71 03 ; Store zero to $0371.w
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	.db $80, $14		; 80 14 ; Branch always to $80, $14 [Flow: branch]
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	dec $0371.w		; CE 71 03 ; Decrement $0371.w [Flags: NZ]
	.db $10, $0B		; 10 0B ; Branch if plus to $10, $0B [Flow: branch]
	stz $0371.w		; 9C 71 03 ; Store zero to $0371.w
	lda #$FE.b		; A9 FE ; Load #$FE.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	jsl $07E370.l		; 22 70 E3 07 ; Jump to subroutine long $07E370.l [Writes: Stack Pointer] [Flow: call]
	jsl $07E704.l		; 22 04 E7 07 ; Jump to subroutine long $07E704.l [Writes: Stack Pointer] [Flow: call]
	lda $0371.w		; AD 71 03 ; Load $0371.w into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $15		; D0 15 ; Branch if not equal to $D0, $15 [Flow: branch]
	dec $0378.w		; CE 78 03 ; Decrement $0378.w [Flags: NZ]
	.db $10, $10		; 10 10 ; Branch if plus to $10, $10 [Flow: branch]
	stz $0378.w		; 9C 78 03 ; Store zero to $0378.w
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	ldx #$06.b		; A2 06 ; Load #$06.b into X register [Writes: X Index] [Flags: NZ]
	stx $2F.b		; 86 2F ; Store X register to $2F.b [Reads: X Index]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	sbc $53.b		; E5 53 ; Subtract $53.b from accumulator with borrow [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	.db $10, $03		; 10 03 ; Branch if plus to $10, $03 [Flow: branch]
	eor #$FF.b		; 49 FF ; Exclusive OR #$FF.b with accumulator [Writes: Accumulator] [Flags: NZ]
	inc A		; 1A ; Increment accumulator [Reads: Accumulator] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $4F		; D0 4F ; Branch if not equal to $D0, $4F [Flow: branch]
.ACCU 16
	rep #$20		; C2 20
	jsl $02921A.l		; 22 1A 92 02 ; Jump to subroutine long $02921A.l [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	lda $7EF3CC.l		; AF CC F3 7E ; Load long $7EF3CC.l into accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	jsl $099EFC.l		; 22 FC 9E 09 ; Jump to subroutine long $099EFC.l [Writes: Stack Pointer] [Flow: call]
	lda #$F8.b		; A9 F8 ; Load #$F8.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	lda #$FF.b		; A9 FF ; Load #$FF.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $01.b		; 85 01 ; Store accumulator to $01.b [Reads: Accumulator]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$0C.b		; A9 0C ; Load #$0C.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $00.b		; 85 00 ; Store accumulator to $00.b [Reads: Accumulator]
	stz $01.b		; 64 01 ; Store zero to $01.b
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	adc $00.b		; 65 00 ; Add $00.b to accumulator with carry [Reads: Direct Page] [Writes: Accumulator] [Flags: NCVZ]
	sta $53.b		; 85 53 ; Store accumulator to $53.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	lda #$01.b		; A9 01 ; Load #$01.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $030A.w		; 8D 0A 03 ; Store accumulator to $030A.w [Reads: Accumulator]
	lda #$06.b		; A9 06 ; Load #$06.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0378.w		; 8D 78 03 ; Store accumulator to $0378.w [Reads: Accumulator]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$17.b		; A9 17 ; Load #$17.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
	.db $80, $05		; 80 05 ; Branch always to $80, $05 [Flow: branch]
	lda #$19.b		; A9 19 ; Load #$19.b into accumulator [Writes: Accumulator] [Flags: NZ]
	jsr $8028.w		; 20 28 80 ; Jump to subroutine at $8028.w [Writes: Stack Pointer] [Flow: call]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	stz $0373.w		; [PATTERN: Memory clearing operation] 9C 73 03 ; Store zero to $0373.w
	stz $46.b		; 64 46 ; Store zero to $46.b
	stz $4D.b		; 64 4D ; Store zero to $4D.b
	stz $037B.w		; 9C 7B 03 ; Store zero to $037B.w
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FC2.w		; 8D C2 0F ; Store accumulator to $0FC2.w [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FC4.w		; 8D C4 0F ; Store accumulator to $0FC4.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	dec $0378.w		; CE 78 03 ; Decrement $0378.w [Flags: NZ]
	.db $10, $07		; 10 07 ; Branch if plus to $10, $07 [Flow: branch]
	stz $0378.w		; 9C 78 03 ; Store zero to $0378.w
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $2F.b		; 85 2F ; Store accumulator to $2F.b [Reads: Accumulator]
	lda #$00.b		; A9 00 ; Load #$00.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda #$04.b		; A9 04 ; Load #$04.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	lda #$FC.b		; A9 FC ; Load #$FC.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $28.b		; 85 28 ; Store accumulator to $28.b [Reads: Accumulator]
	lda $030A.w		; AD 0A 03 ; Load $030A.w into accumulator [Writes: Accumulator] [Flags: NZ]
	cmp #$02.b		; C9 02 ; Compare #$02.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $06		; D0 06 ; Branch if not equal to $D0, $06 [Flow: branch]
	lda #$10.b		; A9 10 ; Load #$10.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $27.b		; 85 27 ; Store accumulator to $27.b [Reads: Accumulator]
	stz $28.b		; 64 28 ; Store zero to $28.b
	jsl $07E370.l		; 22 70 E3 07 ; Jump to subroutine long $07E370.l [Writes: Stack Pointer] [Flow: call]
	jsl $07E704.l		; 22 04 E7 07 ; Jump to subroutine long $07E704.l [Writes: Stack Pointer] [Flow: call]
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp $53.b		; C5 53 ; Compare $53.b with accumulator [Reads: Direct Page, Accumulator] [Flags: NCZ]
	.db $D0, $05		; D0 05 ; Branch if not equal to $D0, $05 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $030A.w		; 8D 0A 03 ; Store accumulator to $030A.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda #$07.b		; A9 07 ; Load #$07.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $0371.w		; 8D 71 03 ; Store accumulator to $0371.w [Reads: Accumulator]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
.ACCU 16
	rep #$20		; C2 20
	lda $22.b		; A5 22 ; Load $22.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FC2.w		; 8D C2 0F ; Store accumulator to $0FC2.w [Reads: Accumulator]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	sta $0FC4.w		; 8D C4 0F ; Store accumulator to $0FC4.w [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	stz $28.b		; 64 28 ; Store zero to $28.b
	ldy #$08.b		; A0 08 ; Load #$08.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $11.b		; A5 11 ; Load $11.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$12.b		; C9 12 ; Compare #$12.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0B		; D0 0B ; Branch if not equal to $D0, $0B [Flow: branch]
	ldy #$FE.b		; A0 FE ; Load #$FE.b into Y register [Writes: Y Index] [Flags: NZ]
	lda $0462.w		; AD 62 04 ; Load $0462.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$04.b		; 29 04 ; Logical AND #$04.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $F0, $02		; F0 02 ; Branch if equal to $F0, $02 [Flow: branch]
	ldy #$FA.b		; A0 FA ; Load #$FA.b into Y register [Writes: Y Index] [Flags: NZ]
	sty $27.b		; 84 27 ; Store Y register to $27.b [Reads: Y Index]
	jsl $07E370.l		; 22 70 E3 07 ; Jump to subroutine long $07E370.l [Writes: Stack Pointer] [Flow: call]
	jsl $07E704.l		; 22 04 E7 07 ; Jump to subroutine long $07E704.l [Writes: Stack Pointer] [Flow: call]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	jsr $E8F0.w		; 20 F0 E8 ; Jump to subroutine at $E8F0.w [Writes: Stack Pointer] [Flow: call]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$03.b		; C9 03 ; Compare #$03.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $10		; F0 10 ; Branch if equal to $F0, $10 [Flow: branch]
	cmp #$08.b		; C9 08 ; Compare #$08.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $0C		; F0 0C ; Branch if equal to $F0, $0C [Flow: branch]
	cmp #$09.b		; C9 09 ; Compare #$09.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$0A.b		; C9 0A ; Compare #$0A.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; [PATTERN: Memory clearing operation] F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	lda $46.b		; A5 46 ; Load $46.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $F0, $1A		; F0 1A ; Branch if equal to $F0, $1A [Flow: branch]
	stz $27.b		; 64 27 ; Store zero to $27.b
	stz $28.b		; 64 28 ; Store zero to $28.b
	lda #$03.b		; A9 03 ; Load #$03.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02C6.w		; 8D C6 02 ; Store accumulator to $02C6.w [Reads: Accumulator]
.ACCU 16
	rep #$20		; C2 20
	lda $0FC2.w		; AD C2 0F ; Load $0FC2.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $22.b		; 85 22 ; Store accumulator to $22.b [Reads: Accumulator]
	lda $0FC4.w		; AD C4 0F ; Load $0FC4.w into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $20.b		; 85 20 ; Store accumulator to $20.b [Reads: Accumulator]
.ACCU 8
	sep #$20		; E2 20
	sec		; 38 ; Set carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $5D.b		; A5 5D ; Load $5D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$00.b		; C9 00 ; Compare #$00.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $08		; F0 08 ; Branch if equal to $F0, $08 [Flow: branch]
	cmp #$04.b		; C9 04 ; Compare #$04.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $04		; F0 04 ; Branch if equal to $F0, $04 [Flow: branch]
	cmp #$11.b		; C9 11 ; Compare #$11.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $1D		; D0 1D ; Branch if not equal to $D0, $1D [Flow: branch]
	lda $3A.b		; A5 3A ; Load $3A.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0377.w		; 0D 77 03 ; Logical OR $0377.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0301.w		; 0D 01 03 ; Logical OR $0301.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $037A.w		; 0D 7A 03 ; Logical OR $037A.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $02EC.w		; 0D EC 02 ; Logical OR $02EC.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0314.w		; 0D 14 03 ; Logical OR $0314.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0308.w		; 0D 08 03 ; Logical OR $0308.w with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $0376.w		; 0D 76 03 ; Logical OR $0376.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	sec		; 38 ; Set carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phb		; [PATTERN: Function entry: Data bank preservation prologue] 8B ; Push data bank register to stack [Reads: Data Bank] [Writes: Stack Pointer] [SNES: Stack operation: pushes DBR]
	phk		; 4B ; Push program bank register  [Reads: Program Bank] [Writes: Stack Pointer]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	lda $20.b		; A5 20 ; Load $20.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	cmp #$98.b		; C9 98 ; Compare #$98.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $90, $16		; 90 16 ; Branch if carry clear to $90, $16 [Flow: branch]
	cmp #$A9.b		; C9 A9 ; Compare #$A9.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $B0, $04		; B0 04 ; Branch if carry set to $B0, $04 [Flow: branch]
	lda #$14.b		; A9 14 ; Load #$14.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $5E.b		; 85 5E ; Store accumulator to $5E.b [Reads: Accumulator]
	lda #$08.b		; A9 08 ; Load #$08.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $67.b		; 85 67 ; Store accumulator to $67.b [Reads: Accumulator]
	sta $26.b		; 85 26 ; Store accumulator to $26.b [Reads: Accumulator]
	stz $2F.b		; [PATTERN: Memory clearing operation] 64 2F ; Store zero to $2F.b
	lda #$40.b		; A9 40 ; Load #$40.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $3D.b		; 85 3D ; Store accumulator to $3D.b [Reads: Accumulator]
	.db $80, $13		; 80 13 ; Branch always to $80, $13 [Flow: branch]
	stz $2E.b		; 64 2E ; Store zero to $2E.b
	stz $67.b		; [PATTERN: Memory clearing operation] 64 67 ; Store zero to $67.b
	stz $26.b		; 64 26 ; Store zero to $26.b
	dec $3D.b		; C6 3D ; Decrement $3D.b [Reads: Direct Page] [Flags: NZ]
	lda $3D.b		; A5 3D ; Load $3D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $07		; D0 07 ; Branch if not equal to $D0, $07 [Flow: branch]
	lda #$02.b		; A9 02 ; Load #$02.b into accumulator [Writes: Accumulator] [Flags: NZ]
	sta $02DA.w		; 8D DA 02 ; Store accumulator to $02DA.w [Reads: Accumulator]
	inc $B0.b		; E6 B0 ; Increment $B0.b [Reads: Direct Page] [Flags: NZ]
	plb		; AB ; Pull data bank register  [Reads: Stack Pointer] [Writes: Data Bank] [Flags: NZ]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	phx		; DA ; Push X register [Reads: X Index] [Writes: Stack Pointer]
	lda $4D.b		; A5 4D ; Load $4D.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	ora $02DA.w		; 0D DA 02 ; Logical OR $02DA.w with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $16		; D0 16 ; Branch if not equal to $D0, $16 [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	.db $D0, $0F		; D0 0F ; Branch if not equal to $D0, $0F [Flow: branch]
	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$27.b		; C9 27 ; Compare #$27.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $F0, $06		; F0 06 ; Branch if equal to $F0, $06 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $F6		; 10 F6 ; Branch if plus to $10, $F6 [Flow: branch]
	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	plx		; FA ; Pull X register [Reads: Stack Pointer] [Writes: Stack Pointer, X Index] [Flags: NZ]
	sec		; 38 ; Set carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	ldx #$04.b		; A2 04 ; Load #$04.b into X register [Writes: X Index] [Flags: NZ]
	lda $0C4A.w,X		; [PATTERN: Memory clearing operation] BD 4A 0C ; Load $0C4A.w,X into accumulator [Reads: X Index] [Writes: Accumulator] [Flags: NZ]
	cmp #$31.b		; C9 31 ; Compare #$31.b with accumulator [Reads: Accumulator] [Flags: NCZ]
	.db $D0, $0A		; D0 0A ; Branch if not equal to $D0, $0A [Flow: branch]
	stz $037A.w		; 9C 7A 03 ; Store zero to $037A.w
	stz $50.b		; 64 50 ; Store zero to $50.b
	stz $0C4A.w,X		; 9E 4A 0C ; Store zero to $0C4A.w,X [Reads: X Index]
	.db $80, $03		; 80 03 ; Branch always to $80, $03 [Flow: branch]
	dex		; CA ; Decrement X register [Reads: X Index] [Writes: X Index] [Flags: NZ]
	.db $10, $EC		; 10 EC ; Branch if plus to $10, $EC [Flow: branch]
	lda $0308.w		; AD 08 03 ; Load $0308.w into accumulator [Writes: Accumulator] [Flags: NZ]
	and #$80.b		; 29 80 ; Logical AND #$80.b with accumulator [Writes: Accumulator] [Flags: NZ]
	ora $4D.b		; 05 4D ; Logical OR $4D.b with accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $02		; D0 02 ; Branch if not equal to $D0, $02 [Flow: branch]
	clc		; 18 ; Clear carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	sec		; 38 ; Set carry flag [Flags: C]
	rtl		; 6B ; Return from subroutine long [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda $1B.b		; A5 1B ; Load $1B.b into accumulator [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	.db $D0, $04		; D0 04 ; Branch if not equal to $D0, $04 [Flow: branch]
	jsl $01FF28.l		; 22 28 FF 01 ; Jump to subroutine long $01FF28.l [Writes: Stack Pointer] [Flow: call]
	rts		; 60 ; Return from subroutine [Reads: Stack Pointer] [Writes: Stack Pointer] [Flow: return]

	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	lda [$00.b]		; A7 00 ; Load accumulator (long) [$00.b] [Reads: Direct Page] [Writes: Accumulator] [Flags: NZ]
	pha		; 48 ; Push accumulator [Reads: Accumulator] [Writes: Stack Pointer]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3C.b		; 00 3C ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $40.b		; 00 40 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3E.b		; 00 3E ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3D.b		; 00 3D ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $49.b		; 00 49 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3F.b		; 00 3F ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B0.b		; 00 B0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $44.b		; 00 44 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $3B.b		; 00 3B ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $45.b		; 00 45 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $41.b		; 00 41 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $42.b		; 00 42 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $47.b		; 00 47 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $43.b		; 00 43 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $46.b		; 00 46 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A8.b		; 00 A8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A9.b		; 00 A9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AA.b		; 00 AA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AB.b		; 00 AB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B1.b		; 00 B1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AF.b		; 00 AF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AC.b		; 00 AC ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AD.b		; 00 AD ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $AE.b		; 00 AE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $A7.b		; 00 A7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C7.b		; 00 C7 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C4.b		; 00 C4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BE.b		; 00 BE ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B5.b		; 00 B5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C5.b		; 00 C5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B9.b		; 00 B9 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BA.b		; 00 BA ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BF.b		; 00 BF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C6.b		; 00 C6 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C0.b		; 00 C0 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C2.b		; 00 C2 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $BB.b		; 00 BB ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C1.b		; 00 C1 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $C3.b		; 00 C3 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B8.b		; 00 B8 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B5.b		; 00 B5 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $79.b		; 00 79 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	ora ($B4.b,X)		; 01 B4 ; Logical OR ($B4.b,X) with accumulator [Reads: Direct Page, X Index] [Writes: Accumulator] [Flags: NZ] [SNES: Indexed indirect addressing]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $B4.b		; 00 B4 ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	brk $FF.b		; 00 FF ; Software interrupt [Writes: Stack Pointer] [Flags: I] [Flow: interrupt]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	sbc $FFFFFF.l,X		; FF FF FF FF ; Subtract with carry (long,X) $FFFFFF.l,X [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 03FFFE. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
	.db $FF		; Opcode FF overrunning bank boundry at 03FFFF. Skipping. ; Subtract with carry (long,X) $FF [Reads: X Index] [Writes: Accumulator] [Flags: NCVZ]
.ENDS
